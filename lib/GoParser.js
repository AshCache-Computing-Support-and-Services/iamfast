// Generated from grammars/GoParser.g4 by ANTLR 4.9.2
// jshint ignore: start
import antlr4 from 'antlr4';
import GoParserListener from './GoParserListener.js';
import GoParserVisitor from './GoParserVisitor.js';

import GoParserBase from './GoParserBase.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003Z\u03ba\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0007\u0002\u00ce\n\u0002\f\u0002\u000e\u0002\u00d1\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u00d6\n\u0002\u0003",
    "\u0002\u0003\u0002\u0007\u0002\u00da\n\u0002\f\u0002\u000e\u0002\u00dd",
    "\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0007\u0004\u00ea\n\u0004\f\u0004\u000e\u0004\u00ed\u000b\u0004\u0003",
    "\u0004\u0005\u0004\u00f0\n\u0004\u0003\u0005\u0005\u0005\u00f3\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0005\u0007\u00fc\n\u0007\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0007\b\u0104\n\b\f\b\u000e\b\u0107\u000b\b\u0003",
    "\b\u0005\b\u010a\n\b\u0003\t\u0003\t\u0005\t\u010e\n\t\u0003\t\u0003",
    "\t\u0005\t\u0112\n\t\u0003\n\u0003\n\u0003\n\u0007\n\u0117\n\n\f\n\u000e",
    "\n\u011a\u000b\n\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u011f",
    "\n\u000b\f\u000b\u000e\u000b\u0122\u000b\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0007\f\u012a\n\f\f\f\u000e\f\u012d\u000b",
    "\f\u0003\f\u0005\f\u0130\n\f\u0003\r\u0003\r\u0005\r\u0134\n\r\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u013c\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0005\u000f\u0143\n\u000f\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011",
    "\u014d\n\u0011\f\u0011\u000e\u0011\u0150\u000b\u0011\u0003\u0011\u0005",
    "\u0011\u0153\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u0159\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u015d",
    "\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u0161\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0005\u0014\u0166\n\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0006\u0014\u016b\n\u0014\r\u0014\u000e\u0014\u016c",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u017e\n\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0185",
    "\n\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001b\u0005\u001b\u0195\n\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01a2",
    "\n\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u01a6\n\u001f\u0003 \u0003",
    " \u0005 \u01aa\n \u0003!\u0003!\u0005!\u01ae\n!\u0003\"\u0003\"\u0003",
    "\"\u0003#\u0003#\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0005%\u01c1\n%\u0003%\u0003%\u0003%\u0003",
    "%\u0005%\u01c7\n%\u0005%\u01c9\n%\u0003&\u0003&\u0005&\u01cd\n&\u0003",
    "\'\u0003\'\u0005\'\u01d1\n\'\u0003\'\u0005\'\u01d4\n\'\u0003\'\u0003",
    "\'\u0005\'\u01d8\n\'\u0005\'\u01da\n\'\u0003\'\u0003\'\u0007\'\u01de",
    "\n\'\f\'\u000e\'\u01e1\u000b\'\u0003\'\u0003\'\u0003(\u0003(\u0003(",
    "\u0005(\u01e8\n(\u0003)\u0003)\u0003)\u0005)\u01ed\n)\u0003*\u0003*",
    "\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u01f8\n*\u0003",
    "*\u0003*\u0007*\u01fc\n*\f*\u000e*\u01ff\u000b*\u0003*\u0003*\u0003",
    "+\u0003+\u0005+\u0205\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    ",\u0003,\u0003,\u0005,\u0210\n,\u0003-\u0003-\u0003-\u0005-\u0215\n",
    "-\u0003.\u0003.\u0005.\u0219\n.\u0003.\u0003.\u0003.\u0005.\u021e\n",
    ".\u0007.\u0220\n.\f.\u000e.\u0223\u000b.\u0003/\u0003/\u0003/\u0007",
    "/\u0228\n/\f/\u000e/\u022b\u000b/\u0003/\u0003/\u00030\u00030\u0003",
    "0\u00050\u0232\n0\u00031\u00031\u00031\u00051\u0237\n1\u00031\u0005",
    "1\u023a\n1\u00032\u00032\u00032\u00032\u00032\u00032\u00052\u0242\n",
    "2\u00032\u00032\u00033\u00033\u00033\u00033\u00053\u024a\n3\u00033\u0003",
    "3\u00034\u00054\u024f\n4\u00034\u00034\u00054\u0253\n4\u00034\u0003",
    "4\u00054\u0257\n4\u00035\u00035\u00035\u00035\u00035\u00035\u00055\u025f",
    "\n5\u00035\u00035\u00035\u00036\u00036\u00036\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00057\u026d\n7\u00038\u00038\u00058\u0271\n8\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u027b\n9\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003<\u0003<\u0003=\u0003",
    "=\u0003=\u0003>\u0003>\u0003>\u0003>\u0005>\u028d\n>\u0003>\u0003>\u0007",
    ">\u0291\n>\f>\u000e>\u0294\u000b>\u0003>\u0003>\u0003?\u0003?\u0003",
    "?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0005A\u02a7\nA\u0003A\u0003A\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0005B\u02b1\nB\u0003C\u0003C\u0003C\u0003D\u0003D\u0003",
    "D\u0003D\u0005D\u02ba\nD\u0003E\u0003E\u0005E\u02be\nE\u0003F\u0003",
    "F\u0003F\u0003F\u0007F\u02c4\nF\fF\u000eF\u02c7\u000bF\u0003F\u0005",
    "F\u02ca\nF\u0005F\u02cc\nF\u0003F\u0003F\u0003G\u0005G\u02d1\nG\u0003",
    "G\u0005G\u02d4\nG\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0005H\u02dc",
    "\nH\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0007H\u02ed\nH\fH\u000eH\u02f0",
    "\u000bH\u0003I\u0003I\u0003I\u0003I\u0005I\u02f6\nI\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0005I\u02ff\nI\u0007I\u0301\nI\fI\u000e",
    "I\u0304\u000bI\u0003J\u0003J\u0003J\u0003J\u0005J\u030a\nJ\u0003J\u0003",
    "J\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u0313\nK\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0005L\u031b\nL\u0003M\u0003M\u0003M\u0005M\u0320",
    "\nM\u0003N\u0003N\u0003N\u0003N\u0005N\u0326\nN\u0003O\u0003O\u0003",
    "P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u033c\nS\u0003",
    "T\u0003T\u0003T\u0005T\u0341\nT\u0005T\u0343\nT\u0003T\u0003T\u0003",
    "U\u0003U\u0003U\u0007U\u034a\nU\fU\u000eU\u034d\u000bU\u0003V\u0003",
    "V\u0003V\u0005V\u0352\nV\u0003V\u0003V\u0003W\u0003W\u0005W\u0358\n",
    "W\u0003X\u0003X\u0005X\u035c\nX\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0007",
    "Y\u0363\nY\fY\u000eY\u0366\u000bY\u0003Y\u0003Y\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0005Z\u036e\nZ\u0003Z\u0005Z\u0371\nZ\u0003[\u0003[\u0003",
    "\\\u0005\\\u0376\n\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003]\u0003",
    "^\u0003^\u0003^\u0003^\u0003_\u0003_\u0005_\u0384\n_\u0003_\u0003_\u0005",
    "_\u0388\n_\u0003_\u0005_\u038b\n_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0005_\u0392\n_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0005a\u03a0\na\u0005a\u03a2\na\u0003",
    "a\u0005a\u03a5\na\u0003a\u0005a\u03a8\na\u0005a\u03aa\na\u0003a\u0003",
    "a\u0003b\u0003b\u0003b\u0003b\u0003c\u0003c\u0003d\u0003d\u0003d\u0003",
    "d\u0005d\u03b8\nd\u0003d\u0002\u0004\u008e\u0090e\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*",
    ",.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086",
    "\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e",
    "\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6",
    "\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u0002\f\u0004\u0002",
    "\u001d\u001d((\u0003\u0002)*\u0004\u00025:<@\u0004\u0002&&YY\u0003\u0002",
    ";A\u0004\u00026:?@\u0004\u000255<>\u0003\u0002/4\u0004\u0002BEIJ\u0003",
    "\u0002PQ\u0002\u03f2\u0002\u00c8\u0003\u0002\u0002\u0002\u0004\u00e0",
    "\u0003\u0002\u0002\u0002\u0006\u00e3\u0003\u0002\u0002\u0002\b\u00f2",
    "\u0003\u0002\u0002\u0002\n\u00f6\u0003\u0002\u0002\u0002\f\u00fb\u0003",
    "\u0002\u0002\u0002\u000e\u00fd\u0003\u0002\u0002\u0002\u0010\u010b\u0003",
    "\u0002\u0002\u0002\u0012\u0113\u0003\u0002\u0002\u0002\u0014\u011b\u0003",
    "\u0002\u0002\u0002\u0016\u0123\u0003\u0002\u0002\u0002\u0018\u0131\u0003",
    "\u0002\u0002\u0002\u001a\u0137\u0003\u0002\u0002\u0002\u001c\u013d\u0003",
    "\u0002\u0002\u0002\u001e\u0144\u0003\u0002\u0002\u0002 \u0146\u0003",
    "\u0002\u0002\u0002\"\u0154\u0003\u0002\u0002\u0002$\u015e\u0003\u0002",
    "\u0002\u0002&\u016a\u0003\u0002\u0002\u0002(\u017d\u0003\u0002\u0002",
    "\u0002*\u0184\u0003\u0002\u0002\u0002,\u0186\u0003\u0002\u0002\u0002",
    ".\u0188\u0003\u0002\u0002\u00020\u018c\u0003\u0002\u0002\u00022\u018f",
    "\u0003\u0002\u0002\u00024\u0194\u0003\u0002\u0002\u00026\u0198\u0003",
    "\u0002\u0002\u00028\u019c\u0003\u0002\u0002\u0002:\u019e\u0003\u0002",
    "\u0002\u0002<\u01a3\u0003\u0002\u0002\u0002>\u01a7\u0003\u0002\u0002",
    "\u0002@\u01ab\u0003\u0002\u0002\u0002B\u01af\u0003\u0002\u0002\u0002",
    "D\u01b2\u0003\u0002\u0002\u0002F\u01b4\u0003\u0002\u0002\u0002H\u01b7",
    "\u0003\u0002\u0002\u0002J\u01cc\u0003\u0002\u0002\u0002L\u01ce\u0003",
    "\u0002\u0002\u0002N\u01e4\u0003\u0002\u0002\u0002P\u01ec\u0003\u0002",
    "\u0002\u0002R\u01ee\u0003\u0002\u0002\u0002T\u0204\u0003\u0002\u0002",
    "\u0002V\u020c\u0003\u0002\u0002\u0002X\u0214\u0003\u0002\u0002\u0002",
    "Z\u0218\u0003\u0002\u0002\u0002\\\u0224\u0003\u0002\u0002\u0002^\u022e",
    "\u0003\u0002\u0002\u0002`\u0239\u0003\u0002\u0002\u0002b\u0241\u0003",
    "\u0002\u0002\u0002d\u0245\u0003\u0002\u0002\u0002f\u024e\u0003\u0002",
    "\u0002\u0002h\u025e\u0003\u0002\u0002\u0002j\u0263\u0003\u0002\u0002",
    "\u0002l\u026c\u0003\u0002\u0002\u0002n\u0270\u0003\u0002\u0002\u0002",
    "p\u027a\u0003\u0002\u0002\u0002r\u027c\u0003\u0002\u0002\u0002t\u0281",
    "\u0003\u0002\u0002\u0002v\u0283\u0003\u0002\u0002\u0002x\u0285\u0003",
    "\u0002\u0002\u0002z\u0288\u0003\u0002\u0002\u0002|\u0297\u0003\u0002",
    "\u0002\u0002~\u029b\u0003\u0002\u0002\u0002\u0080\u02a6\u0003\u0002",
    "\u0002\u0002\u0082\u02b0\u0003\u0002\u0002\u0002\u0084\u02b2\u0003\u0002",
    "\u0002\u0002\u0086\u02b9\u0003\u0002\u0002\u0002\u0088\u02bd\u0003\u0002",
    "\u0002\u0002\u008a\u02bf\u0003\u0002\u0002\u0002\u008c\u02d0\u0003\u0002",
    "\u0002\u0002\u008e\u02db\u0003\u0002\u0002\u0002\u0090\u02f5\u0003\u0002",
    "\u0002\u0002\u0092\u0305\u0003\u0002\u0002\u0002\u0094\u0312\u0003\u0002",
    "\u0002\u0002\u0096\u031a\u0003\u0002\u0002\u0002\u0098\u031f\u0003\u0002",
    "\u0002\u0002\u009a\u0325\u0003\u0002\u0002\u0002\u009c\u0327\u0003\u0002",
    "\u0002\u0002\u009e\u0329\u0003\u0002\u0002\u0002\u00a0\u032b\u0003\u0002",
    "\u0002\u0002\u00a2\u032f\u0003\u0002\u0002\u0002\u00a4\u033b\u0003\u0002",
    "\u0002\u0002\u00a6\u033d\u0003\u0002\u0002\u0002\u00a8\u0346\u0003\u0002",
    "\u0002\u0002\u00aa\u0351\u0003\u0002\u0002\u0002\u00ac\u0357\u0003\u0002",
    "\u0002\u0002\u00ae\u035b\u0003\u0002\u0002\u0002\u00b0\u035d\u0003\u0002",
    "\u0002\u0002\u00b2\u036d\u0003\u0002\u0002\u0002\u00b4\u0372\u0003\u0002",
    "\u0002\u0002\u00b6\u0375\u0003\u0002\u0002\u0002\u00b8\u0379\u0003\u0002",
    "\u0002\u0002\u00ba\u037d\u0003\u0002\u0002\u0002\u00bc\u0381\u0003\u0002",
    "\u0002\u0002\u00be\u0395\u0003\u0002\u0002\u0002\u00c0\u039a\u0003\u0002",
    "\u0002\u0002\u00c2\u03ad\u0003\u0002\u0002\u0002\u00c4\u03b1\u0003\u0002",
    "\u0002\u0002\u00c6\u03b7\u0003\u0002\u0002\u0002\u00c8\u00c9\u0005\u0004",
    "\u0003\u0002\u00c9\u00cf\u0005\u00c6d\u0002\u00ca\u00cb\u0005\u0006",
    "\u0004\u0002\u00cb\u00cc\u0005\u00c6d\u0002\u00cc\u00ce\u0003\u0002",
    "\u0002\u0002\u00cd\u00ca\u0003\u0002\u0002\u0002\u00ce\u00d1\u0003\u0002",
    "\u0002\u0002\u00cf\u00cd\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002",
    "\u0002\u0002\u00d0\u00db\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002",
    "\u0002\u0002\u00d2\u00d6\u0005\u001a\u000e\u0002\u00d3\u00d6\u0005\u001c",
    "\u000f\u0002\u00d4\u00d6\u0005\f\u0007\u0002\u00d5\u00d2\u0003\u0002",
    "\u0002\u0002\u00d5\u00d3\u0003\u0002\u0002\u0002\u00d5\u00d4\u0003\u0002",
    "\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002\u0002\u00d7\u00d8\u0005\u00c6",
    "d\u0002\u00d8\u00da\u0003\u0002\u0002\u0002\u00d9\u00d5\u0003\u0002",
    "\u0002\u0002\u00da\u00dd\u0003\u0002\u0002\u0002\u00db\u00d9\u0003\u0002",
    "\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u00de\u0003\u0002",
    "\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002\u00de\u00df\u0007\u0002",
    "\u0002\u0003\u00df\u0003\u0003\u0002\u0002\u0002\u00e0\u00e1\u0007\u0010",
    "\u0002\u0002\u00e1\u00e2\u0007\u001d\u0002\u0002\u00e2\u0005\u0003\u0002",
    "\u0002\u0002\u00e3\u00ef\u0007\u0019\u0002\u0002\u00e4\u00f0\u0005\b",
    "\u0005\u0002\u00e5\u00eb\u0007\u001e\u0002\u0002\u00e6\u00e7\u0005\b",
    "\u0005\u0002\u00e7\u00e8\u0005\u00c6d\u0002\u00e8\u00ea\u0003\u0002",
    "\u0002\u0002\u00e9\u00e6\u0003\u0002\u0002\u0002\u00ea\u00ed\u0003\u0002",
    "\u0002\u0002\u00eb\u00e9\u0003\u0002\u0002\u0002\u00eb\u00ec\u0003\u0002",
    "\u0002\u0002\u00ec\u00ee\u0003\u0002\u0002\u0002\u00ed\u00eb\u0003\u0002",
    "\u0002\u0002\u00ee\u00f0\u0007\u001f\u0002\u0002\u00ef\u00e4\u0003\u0002",
    "\u0002\u0002\u00ef\u00e5\u0003\u0002\u0002\u0002\u00f0\u0007\u0003\u0002",
    "\u0002\u0002\u00f1\u00f3\t\u0002\u0002\u0002\u00f2\u00f1\u0003\u0002",
    "\u0002\u0002\u00f2\u00f3\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002",
    "\u0002\u0002\u00f4\u00f5\u0005\n\u0006\u0002\u00f5\t\u0003\u0002\u0002",
    "\u0002\u00f6\u00f7\u0005\u00b4[\u0002\u00f7\u000b\u0003\u0002\u0002",
    "\u0002\u00f8\u00fc\u0005\u000e\b\u0002\u00f9\u00fc\u0005\u0016\f\u0002",
    "\u00fa\u00fc\u0005 \u0011\u0002\u00fb\u00f8\u0003\u0002\u0002\u0002",
    "\u00fb\u00f9\u0003\u0002\u0002\u0002\u00fb\u00fa\u0003\u0002\u0002\u0002",
    "\u00fc\r\u0003\u0002\u0002\u0002\u00fd\u0109\u0007\u0012\u0002\u0002",
    "\u00fe\u010a\u0005\u0010\t\u0002\u00ff\u0105\u0007\u001e\u0002\u0002",
    "\u0100\u0101\u0005\u0010\t\u0002\u0101\u0102\u0005\u00c6d\u0002\u0102",
    "\u0104\u0003\u0002\u0002\u0002\u0103\u0100\u0003\u0002\u0002\u0002\u0104",
    "\u0107\u0003\u0002\u0002\u0002\u0105\u0103\u0003\u0002\u0002\u0002\u0105",
    "\u0106\u0003\u0002\u0002\u0002\u0106\u0108\u0003\u0002\u0002\u0002\u0107",
    "\u0105\u0003\u0002\u0002\u0002\u0108\u010a\u0007\u001f\u0002\u0002\u0109",
    "\u00fe\u0003\u0002\u0002\u0002\u0109\u00ff\u0003\u0002\u0002\u0002\u010a",
    "\u000f\u0003\u0002\u0002\u0002\u010b\u0111\u0005\u0012\n\u0002\u010c",
    "\u010e\u0005l7\u0002\u010d\u010c\u0003\u0002\u0002\u0002\u010d\u010e",
    "\u0003\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u0110",
    "\u0007$\u0002\u0002\u0110\u0112\u0005\u0014\u000b\u0002\u0111\u010d",
    "\u0003\u0002\u0002\u0002\u0111\u0112\u0003\u0002\u0002\u0002\u0112\u0011",
    "\u0003\u0002\u0002\u0002\u0113\u0118\u0007\u001d\u0002\u0002\u0114\u0115",
    "\u0007%\u0002\u0002\u0115\u0117\u0007\u001d\u0002\u0002\u0116\u0114",
    "\u0003\u0002\u0002\u0002\u0117\u011a\u0003\u0002\u0002\u0002\u0118\u0116",
    "\u0003\u0002\u0002\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u0013",
    "\u0003\u0002\u0002\u0002\u011a\u0118\u0003\u0002\u0002\u0002\u011b\u0120",
    "\u0005\u008eH\u0002\u011c\u011d\u0007%\u0002\u0002\u011d\u011f\u0005",
    "\u008eH\u0002\u011e\u011c\u0003\u0002\u0002\u0002\u011f\u0122\u0003",
    "\u0002\u0002\u0002\u0120\u011e\u0003\u0002\u0002\u0002\u0120\u0121\u0003",
    "\u0002\u0002\u0002\u0121\u0015\u0003\u0002\u0002\u0002\u0122\u0120\u0003",
    "\u0002\u0002\u0002\u0123\u012f\u0007\u0016\u0002\u0002\u0124\u0130\u0005",
    "\u0018\r\u0002\u0125\u012b\u0007\u001e\u0002\u0002\u0126\u0127\u0005",
    "\u0018\r\u0002\u0127\u0128\u0005\u00c6d\u0002\u0128\u012a\u0003\u0002",
    "\u0002\u0002\u0129\u0126\u0003\u0002\u0002\u0002\u012a\u012d\u0003\u0002",
    "\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002",
    "\u0002\u0002\u012c\u012e\u0003\u0002\u0002\u0002\u012d\u012b\u0003\u0002",
    "\u0002\u0002\u012e\u0130\u0007\u001f\u0002\u0002\u012f\u0124\u0003\u0002",
    "\u0002\u0002\u012f\u0125\u0003\u0002\u0002\u0002\u0130\u0017\u0003\u0002",
    "\u0002\u0002\u0131\u0133\u0007\u001d\u0002\u0002\u0132\u0134\u0007$",
    "\u0002\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u0133\u0134\u0003\u0002",
    "\u0002\u0002\u0134\u0135\u0003\u0002\u0002\u0002\u0135\u0136\u0005l",
    "7\u0002\u0136\u0019\u0003\u0002\u0002\u0002\u0137\u0138\u0007\u0005",
    "\u0002\u0002\u0138\u0139\u0007\u001d\u0002\u0002\u0139\u013b\u0005\u0086",
    "D\u0002\u013a\u013c\u0005$\u0013\u0002\u013b\u013a\u0003\u0002\u0002",
    "\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u001b\u0003\u0002\u0002",
    "\u0002\u013d\u013e\u0007\u0005\u0002\u0002\u013e\u013f\u0005\u001e\u0010",
    "\u0002\u013f\u0140\u0007\u001d\u0002\u0002\u0140\u0142\u0005\u0086D",
    "\u0002\u0141\u0143\u0005$\u0013\u0002\u0142\u0141\u0003\u0002\u0002",
    "\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143\u001d\u0003\u0002\u0002",
    "\u0002\u0144\u0145\u0005\u008aF\u0002\u0145\u001f\u0003\u0002\u0002",
    "\u0002\u0146\u0152\u0007\u001b\u0002\u0002\u0147\u0153\u0005\"\u0012",
    "\u0002\u0148\u014e\u0007\u001e\u0002\u0002\u0149\u014a\u0005\"\u0012",
    "\u0002\u014a\u014b\u0005\u00c6d\u0002\u014b\u014d\u0003\u0002\u0002",
    "\u0002\u014c\u0149\u0003\u0002\u0002\u0002\u014d\u0150\u0003\u0002\u0002",
    "\u0002\u014e\u014c\u0003\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002",
    "\u0002\u014f\u0151\u0003\u0002\u0002\u0002\u0150\u014e\u0003\u0002\u0002",
    "\u0002\u0151\u0153\u0007\u001f\u0002\u0002\u0152\u0147\u0003\u0002\u0002",
    "\u0002\u0152\u0148\u0003\u0002\u0002\u0002\u0153!\u0003\u0002\u0002",
    "\u0002\u0154\u015c\u0005\u0012\n\u0002\u0155\u0158\u0005l7\u0002\u0156",
    "\u0157\u0007$\u0002\u0002\u0157\u0159\u0005\u0014\u000b\u0002\u0158",
    "\u0156\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002\u0002\u0002\u0159",
    "\u015d\u0003\u0002\u0002\u0002\u015a\u015b\u0007$\u0002\u0002\u015b",
    "\u015d\u0005\u0014\u000b\u0002\u015c\u0155\u0003\u0002\u0002\u0002\u015c",
    "\u015a\u0003\u0002\u0002\u0002\u015d#\u0003\u0002\u0002\u0002\u015e",
    "\u0160\u0007 \u0002\u0002\u015f\u0161\u0005&\u0014\u0002\u0160\u015f",
    "\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u0162",
    "\u0003\u0002\u0002\u0002\u0162\u0163\u0007!\u0002\u0002\u0163%\u0003",
    "\u0002\u0002\u0002\u0164\u0166\u0005\u00c6d\u0002\u0165\u0164\u0003",
    "\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0167\u0003",
    "\u0002\u0002\u0002\u0167\u0168\u0005(\u0015\u0002\u0168\u0169\u0005",
    "\u00c6d\u0002\u0169\u016b\u0003\u0002\u0002\u0002\u016a\u0165\u0003",
    "\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002\u016c\u016a\u0003",
    "\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\'\u0003",
    "\u0002\u0002\u0002\u016e\u017e\u0005\f\u0007\u0002\u016f\u017e\u0005",
    ":\u001e\u0002\u0170\u017e\u0005*\u0016\u0002\u0171\u017e\u0005j6\u0002",
    "\u0172\u017e\u0005<\u001f\u0002\u0173\u017e\u0005> \u0002\u0174\u017e",
    "\u0005@!\u0002\u0175\u017e\u0005B\"\u0002\u0176\u017e\u0005D#\u0002",
    "\u0177\u017e\u0005$\u0013\u0002\u0178\u017e\u0005H%\u0002\u0179\u017e",
    "\u0005J&\u0002\u017a\u017e\u0005\\/\u0002\u017b\u017e\u0005d3\u0002",
    "\u017c\u017e\u0005F$\u0002\u017d\u016e\u0003\u0002\u0002\u0002\u017d",
    "\u016f\u0003\u0002\u0002\u0002\u017d\u0170\u0003\u0002\u0002\u0002\u017d",
    "\u0171\u0003\u0002\u0002\u0002\u017d\u0172\u0003\u0002\u0002\u0002\u017d",
    "\u0173\u0003\u0002\u0002\u0002\u017d\u0174\u0003\u0002\u0002\u0002\u017d",
    "\u0175\u0003\u0002\u0002\u0002\u017d\u0176\u0003\u0002\u0002\u0002\u017d",
    "\u0177\u0003\u0002\u0002\u0002\u017d\u0178\u0003\u0002\u0002\u0002\u017d",
    "\u0179\u0003\u0002\u0002\u0002\u017d\u017a\u0003\u0002\u0002\u0002\u017d",
    "\u017b\u0003\u0002\u0002\u0002\u017d\u017c\u0003\u0002\u0002\u0002\u017e",
    ")\u0003\u0002\u0002\u0002\u017f\u0185\u0005.\u0018\u0002\u0180\u0185",
    "\u00050\u0019\u0002\u0181\u0185\u00052\u001a\u0002\u0182\u0185\u0005",
    ",\u0017\u0002\u0183\u0185\u00056\u001c\u0002\u0184\u017f\u0003\u0002",
    "\u0002\u0002\u0184\u0180\u0003\u0002\u0002\u0002\u0184\u0181\u0003\u0002",
    "\u0002\u0002\u0184\u0182\u0003\u0002\u0002\u0002\u0184\u0183\u0003\u0002",
    "\u0002\u0002\u0185+\u0003\u0002\u0002\u0002\u0186\u0187\u0005\u008e",
    "H\u0002\u0187-\u0003\u0002\u0002\u0002\u0188\u0189\u0005\u008eH\u0002",
    "\u0189\u018a\u0007A\u0002\u0002\u018a\u018b\u0005\u008eH\u0002\u018b",
    "/\u0003\u0002\u0002\u0002\u018c\u018d\u0005\u008eH\u0002\u018d\u018e",
    "\t\u0003\u0002\u0002\u018e1\u0003\u0002\u0002\u0002\u018f\u0190\u0005",
    "\u0014\u000b\u0002\u0190\u0191\u00054\u001b\u0002\u0191\u0192\u0005",
    "\u0014\u000b\u0002\u01923\u0003\u0002\u0002\u0002\u0193\u0195\t\u0004",
    "\u0002\u0002\u0194\u0193\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002",
    "\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0197\u0007$",
    "\u0002\u0002\u01975\u0003\u0002\u0002\u0002\u0198\u0199\u0005\u0012",
    "\n\u0002\u0199\u019a\u0007+\u0002\u0002\u019a\u019b\u0005\u0014\u000b",
    "\u0002\u019b7\u0003\u0002\u0002\u0002\u019c\u019d\t\u0005\u0002\u0002",
    "\u019d9\u0003\u0002\u0002\u0002\u019e\u019f\u0007\u001d\u0002\u0002",
    "\u019f\u01a1\u0007\'\u0002\u0002\u01a0\u01a2\u0005(\u0015\u0002\u01a1",
    "\u01a0\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2",
    ";\u0003\u0002\u0002\u0002\u01a3\u01a5\u0007\u001a\u0002\u0002\u01a4",
    "\u01a6\u0005\u0014\u000b\u0002\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a5",
    "\u01a6\u0003\u0002\u0002\u0002\u01a6=\u0003\u0002\u0002\u0002\u01a7",
    "\u01a9\u0007\u0003\u0002\u0002\u01a8\u01aa\u0007\u001d\u0002\u0002\u01a9",
    "\u01a8\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa",
    "?\u0003\u0002\u0002\u0002\u01ab\u01ad\u0007\u0017\u0002\u0002\u01ac",
    "\u01ae\u0007\u001d\u0002\u0002\u01ad\u01ac\u0003\u0002\u0002\u0002\u01ad",
    "\u01ae\u0003\u0002\u0002\u0002\u01aeA\u0003\u0002\u0002\u0002\u01af",
    "\u01b0\u0007\u000f\u0002\u0002\u01b0\u01b1\u0007\u001d\u0002\u0002\u01b1",
    "C\u0003\u0002\u0002\u0002\u01b2\u01b3\u0007\u0013\u0002\u0002\u01b3",
    "E\u0003\u0002\u0002\u0002\u01b4\u01b5\u0007\t\u0002\u0002\u01b5\u01b6",
    "\u0005\u008eH\u0002\u01b6G\u0003\u0002\u0002\u0002\u01b7\u01c0\u0007",
    "\u0014\u0002\u0002\u01b8\u01c1\u0005\u008eH\u0002\u01b9\u01ba\u0005",
    "\u00c6d\u0002\u01ba\u01bb\u0005\u008eH\u0002\u01bb\u01c1\u0003\u0002",
    "\u0002\u0002\u01bc\u01bd\u0005*\u0016\u0002\u01bd\u01be\u0005\u00c6",
    "d\u0002\u01be\u01bf\u0005\u008eH\u0002\u01bf\u01c1\u0003\u0002\u0002",
    "\u0002\u01c0\u01b8\u0003\u0002\u0002\u0002\u01c0\u01b9\u0003\u0002\u0002",
    "\u0002\u01c0\u01bc\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002",
    "\u0002\u01c2\u01c8\u0005$\u0013\u0002\u01c3\u01c6\u0007\u000e\u0002",
    "\u0002\u01c4\u01c7\u0005H%\u0002\u01c5\u01c7\u0005$\u0013\u0002\u01c6",
    "\u01c4\u0003\u0002\u0002\u0002\u01c6\u01c5\u0003\u0002\u0002\u0002\u01c7",
    "\u01c9\u0003\u0002\u0002\u0002\u01c8\u01c3\u0003\u0002\u0002\u0002\u01c8",
    "\u01c9\u0003\u0002\u0002\u0002\u01c9I\u0003\u0002\u0002\u0002\u01ca",
    "\u01cd\u0005L\'\u0002\u01cb\u01cd\u0005R*\u0002\u01cc\u01ca\u0003\u0002",
    "\u0002\u0002\u01cc\u01cb\u0003\u0002\u0002\u0002\u01cdK\u0003\u0002",
    "\u0002\u0002\u01ce\u01d9\u0007\u0011\u0002\u0002\u01cf\u01d1\u0005\u008e",
    "H\u0002\u01d0\u01cf\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002",
    "\u0002\u0002\u01d1\u01da\u0003\u0002\u0002\u0002\u01d2\u01d4\u0005*",
    "\u0016\u0002\u01d3\u01d2\u0003\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002",
    "\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d7\u0005\u00c6",
    "d\u0002\u01d6\u01d8\u0005\u008eH\u0002\u01d7\u01d6\u0003\u0002\u0002",
    "\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01da\u0003\u0002\u0002",
    "\u0002\u01d9\u01d0\u0003\u0002\u0002\u0002\u01d9\u01d3\u0003\u0002\u0002",
    "\u0002\u01da\u01db\u0003\u0002\u0002\u0002\u01db\u01df\u0007 \u0002",
    "\u0002\u01dc\u01de\u0005N(\u0002\u01dd\u01dc\u0003\u0002\u0002\u0002",
    "\u01de\u01e1\u0003\u0002\u0002\u0002\u01df\u01dd\u0003\u0002\u0002\u0002",
    "\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e2\u0003\u0002\u0002\u0002",
    "\u01e1\u01df\u0003\u0002\u0002\u0002\u01e2\u01e3\u0007!\u0002\u0002",
    "\u01e3M\u0003\u0002\u0002\u0002\u01e4\u01e5\u0005P)\u0002\u01e5\u01e7",
    "\u0007\'\u0002\u0002\u01e6\u01e8\u0005&\u0014\u0002\u01e7\u01e6\u0003",
    "\u0002\u0002\u0002\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8O\u0003",
    "\u0002\u0002\u0002\u01e9\u01ea\u0007\b\u0002\u0002\u01ea\u01ed\u0005",
    "\u0014\u000b\u0002\u01eb\u01ed\u0007\u0004\u0002\u0002\u01ec\u01e9\u0003",
    "\u0002\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01edQ\u0003",
    "\u0002\u0002\u0002\u01ee\u01f7\u0007\u0011\u0002\u0002\u01ef\u01f8\u0005",
    "T+\u0002\u01f0\u01f1\u0005\u00c6d\u0002\u01f1\u01f2\u0005T+\u0002\u01f2",
    "\u01f8\u0003\u0002\u0002\u0002\u01f3\u01f4\u0005*\u0016\u0002\u01f4",
    "\u01f5\u0005\u00c6d\u0002\u01f5\u01f6\u0005T+\u0002\u01f6\u01f8\u0003",
    "\u0002\u0002\u0002\u01f7\u01ef\u0003\u0002\u0002\u0002\u01f7\u01f0\u0003",
    "\u0002\u0002\u0002\u01f7\u01f3\u0003\u0002\u0002\u0002\u01f8\u01f9\u0003",
    "\u0002\u0002\u0002\u01f9\u01fd\u0007 \u0002\u0002\u01fa\u01fc\u0005",
    "V,\u0002\u01fb\u01fa\u0003\u0002\u0002\u0002\u01fc\u01ff\u0003\u0002",
    "\u0002\u0002\u01fd\u01fb\u0003\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002",
    "\u0002\u0002\u01fe\u0200\u0003\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002",
    "\u0002\u0002\u0200\u0201\u0007!\u0002\u0002\u0201S\u0003\u0002\u0002",
    "\u0002\u0202\u0203\u0007\u001d\u0002\u0002\u0203\u0205\u0007+\u0002",
    "\u0002\u0204\u0202\u0003\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002",
    "\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206\u0207\u0005\u0090I",
    "\u0002\u0207\u0208\u0007(\u0002\u0002\u0208\u0209\u0007\u001e\u0002",
    "\u0002\u0209\u020a\u0007\u0016\u0002\u0002\u020a\u020b\u0007\u001f\u0002",
    "\u0002\u020bU\u0003\u0002\u0002\u0002\u020c\u020d\u0005X-\u0002\u020d",
    "\u020f\u0007\'\u0002\u0002\u020e\u0210\u0005&\u0014\u0002\u020f\u020e",
    "\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002\u0210W",
    "\u0003\u0002\u0002\u0002\u0211\u0212\u0007\b\u0002\u0002\u0212\u0215",
    "\u0005Z.\u0002\u0213\u0215\u0007\u0004\u0002\u0002\u0214\u0211\u0003",
    "\u0002\u0002\u0002\u0214\u0213\u0003\u0002\u0002\u0002\u0215Y\u0003",
    "\u0002\u0002\u0002\u0216\u0219\u0005l7\u0002\u0217\u0219\u0007\u001c",
    "\u0002\u0002\u0218\u0216\u0003\u0002\u0002\u0002\u0218\u0217\u0003\u0002",
    "\u0002\u0002\u0219\u0221\u0003\u0002\u0002\u0002\u021a\u021d\u0007%",
    "\u0002\u0002\u021b\u021e\u0005l7\u0002\u021c\u021e\u0007\u001c\u0002",
    "\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021d\u021c\u0003\u0002\u0002",
    "\u0002\u021e\u0220\u0003\u0002\u0002\u0002\u021f\u021a\u0003\u0002\u0002",
    "\u0002\u0220\u0223\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002\u0002",
    "\u0002\u0221\u0222\u0003\u0002\u0002\u0002\u0222[\u0003\u0002\u0002",
    "\u0002\u0223\u0221\u0003\u0002\u0002\u0002\u0224\u0225\u0007\u0007\u0002",
    "\u0002\u0225\u0229\u0007 \u0002\u0002\u0226\u0228\u0005^0\u0002\u0227",
    "\u0226\u0003\u0002\u0002\u0002\u0228\u022b\u0003\u0002\u0002\u0002\u0229",
    "\u0227\u0003\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a",
    "\u022c\u0003\u0002\u0002\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022c",
    "\u022d\u0007!\u0002\u0002\u022d]\u0003\u0002\u0002\u0002\u022e\u022f",
    "\u0005`1\u0002\u022f\u0231\u0007\'\u0002\u0002\u0230\u0232\u0005&\u0014",
    "\u0002\u0231\u0230\u0003\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002",
    "\u0002\u0232_\u0003\u0002\u0002\u0002\u0233\u0236\u0007\b\u0002\u0002",
    "\u0234\u0237\u0005.\u0018\u0002\u0235\u0237\u0005b2\u0002\u0236\u0234",
    "\u0003\u0002\u0002\u0002\u0236\u0235\u0003\u0002\u0002\u0002\u0237\u023a",
    "\u0003\u0002\u0002\u0002\u0238\u023a\u0007\u0004\u0002\u0002\u0239\u0233",
    "\u0003\u0002\u0002\u0002\u0239\u0238\u0003\u0002\u0002\u0002\u023aa",
    "\u0003\u0002\u0002\u0002\u023b\u023c\u0005\u0014\u000b\u0002\u023c\u023d",
    "\u0007$\u0002\u0002\u023d\u0242\u0003\u0002\u0002\u0002\u023e\u023f",
    "\u0005\u0012\n\u0002\u023f\u0240\u0007+\u0002\u0002\u0240\u0242\u0003",
    "\u0002\u0002\u0002\u0241\u023b\u0003\u0002\u0002\u0002\u0241\u023e\u0003",
    "\u0002\u0002\u0002\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0243\u0003",
    "\u0002\u0002\u0002\u0243\u0244\u0005\u008eH\u0002\u0244c\u0003\u0002",
    "\u0002\u0002\u0245\u0249\u0007\u0018\u0002\u0002\u0246\u024a\u0005\u008e",
    "H\u0002\u0247\u024a\u0005f4\u0002\u0248\u024a\u0005h5\u0002\u0249\u0246",
    "\u0003\u0002\u0002\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u0249\u0248",
    "\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002\u024a\u024b",
    "\u0003\u0002\u0002\u0002\u024b\u024c\u0005$\u0013\u0002\u024ce\u0003",
    "\u0002\u0002\u0002\u024d\u024f\u0005*\u0016\u0002\u024e\u024d\u0003",
    "\u0002\u0002\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0250\u0003",
    "\u0002\u0002\u0002\u0250\u0252\u0005\u00c6d\u0002\u0251\u0253\u0005",
    "\u008eH\u0002\u0252\u0251\u0003\u0002\u0002\u0002\u0252\u0253\u0003",
    "\u0002\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254\u0256\u0005",
    "\u00c6d\u0002\u0255\u0257\u0005*\u0016\u0002\u0256\u0255\u0003\u0002",
    "\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257g\u0003\u0002",
    "\u0002\u0002\u0258\u0259\u0005\u0014\u000b\u0002\u0259\u025a\u0007$",
    "\u0002\u0002\u025a\u025f\u0003\u0002\u0002\u0002\u025b\u025c\u0005\u0012",
    "\n\u0002\u025c\u025d\u0007+\u0002\u0002\u025d\u025f\u0003\u0002\u0002",
    "\u0002\u025e\u0258\u0003\u0002\u0002\u0002\u025e\u025b\u0003\u0002\u0002",
    "\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025f\u0260\u0003\u0002\u0002",
    "\u0002\u0260\u0261\u0007\u0015\u0002\u0002\u0261\u0262\u0005\u008eH",
    "\u0002\u0262i\u0003\u0002\u0002\u0002\u0263\u0264\u0007\n\u0002\u0002",
    "\u0264\u0265\u0005\u008eH\u0002\u0265k\u0003\u0002\u0002\u0002\u0266",
    "\u026d\u0005n8\u0002\u0267\u026d\u0005p9\u0002\u0268\u0269\u0007\u001e",
    "\u0002\u0002\u0269\u026a\u0005l7\u0002\u026a\u026b\u0007\u001f\u0002",
    "\u0002\u026b\u026d\u0003\u0002\u0002\u0002\u026c\u0266\u0003\u0002\u0002",
    "\u0002\u026c\u0267\u0003\u0002\u0002\u0002\u026c\u0268\u0003\u0002\u0002",
    "\u0002\u026dm\u0003\u0002\u0002\u0002\u026e\u0271\u0005\u00a0Q\u0002",
    "\u026f\u0271\u0007\u001d\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002",
    "\u0270\u026f\u0003\u0002\u0002\u0002\u0271o\u0003\u0002\u0002\u0002",
    "\u0272\u027b\u0005r:\u0002\u0273\u027b\u0005\u00b0Y\u0002\u0274\u027b",
    "\u0005x=\u0002\u0275\u027b\u0005\u0084C\u0002\u0276\u027b\u0005z>\u0002",
    "\u0277\u027b\u0005|?\u0002\u0278\u027b\u0005~@\u0002\u0279\u027b\u0005",
    "\u0080A\u0002\u027a\u0272\u0003\u0002\u0002\u0002\u027a\u0273\u0003",
    "\u0002\u0002\u0002\u027a\u0274\u0003\u0002\u0002\u0002\u027a\u0275\u0003",
    "\u0002\u0002\u0002\u027a\u0276\u0003\u0002\u0002\u0002\u027a\u0277\u0003",
    "\u0002\u0002\u0002\u027a\u0278\u0003\u0002\u0002\u0002\u027a\u0279\u0003",
    "\u0002\u0002\u0002\u027bq\u0003\u0002\u0002\u0002\u027c\u027d\u0007",
    "\"\u0002\u0002\u027d\u027e\u0005t;\u0002\u027e\u027f\u0007#\u0002\u0002",
    "\u027f\u0280\u0005v<\u0002\u0280s\u0003\u0002\u0002\u0002\u0281\u0282",
    "\u0005\u008eH\u0002\u0282u\u0003\u0002\u0002\u0002\u0283\u0284\u0005",
    "l7\u0002\u0284w\u0003\u0002\u0002\u0002\u0285\u0286\u0007?\u0002\u0002",
    "\u0286\u0287\u0005l7\u0002\u0287y\u0003\u0002\u0002\u0002\u0288\u0289",
    "\u0007\u0006\u0002\u0002\u0289\u0292\u0007 \u0002\u0002\u028a\u028d",
    "\u0005\u0082B\u0002\u028b\u028d\u0005n8\u0002\u028c\u028a\u0003\u0002",
    "\u0002\u0002\u028c\u028b\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002",
    "\u0002\u0002\u028e\u028f\u0005\u00c6d\u0002\u028f\u0291\u0003\u0002",
    "\u0002\u0002\u0290\u028c\u0003\u0002\u0002\u0002\u0291\u0294\u0003\u0002",
    "\u0002\u0002\u0292\u0290\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002",
    "\u0002\u0002\u0293\u0295\u0003\u0002\u0002\u0002\u0294\u0292\u0003\u0002",
    "\u0002\u0002\u0295\u0296\u0007!\u0002\u0002\u0296{\u0003\u0002\u0002",
    "\u0002\u0297\u0298\u0007\"\u0002\u0002\u0298\u0299\u0007#\u0002\u0002",
    "\u0299\u029a\u0005v<\u0002\u029a}\u0003\u0002\u0002\u0002\u029b\u029c",
    "\u0007\u000b\u0002\u0002\u029c\u029d\u0007\"\u0002\u0002\u029d\u029e",
    "\u0005l7\u0002\u029e\u029f\u0007#\u0002\u0002\u029f\u02a0\u0005v<\u0002",
    "\u02a0\u007f\u0003\u0002\u0002\u0002\u02a1\u02a7\u0007\r\u0002\u0002",
    "\u02a2\u02a3\u0007\r\u0002\u0002\u02a3\u02a7\u0007A\u0002\u0002\u02a4",
    "\u02a5\u0007A\u0002\u0002\u02a5\u02a7\u0007\r\u0002\u0002\u02a6\u02a1",
    "\u0003\u0002\u0002\u0002\u02a6\u02a2\u0003\u0002\u0002\u0002\u02a6\u02a4",
    "\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002\u0002\u02a8\u02a9",
    "\u0005v<\u0002\u02a9\u0081\u0003\u0002\u0002\u0002\u02aa\u02ab\u0007",
    "\u001d\u0002\u0002\u02ab\u02ac\u0005\u008aF\u0002\u02ac\u02ad\u0005",
    "\u0088E\u0002\u02ad\u02b1\u0003\u0002\u0002\u0002\u02ae\u02af\u0007",
    "\u001d\u0002\u0002\u02af\u02b1\u0005\u008aF\u0002\u02b0\u02aa\u0003",
    "\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b1\u0083\u0003",
    "\u0002\u0002\u0002\u02b2\u02b3\u0007\u0005\u0002\u0002\u02b3\u02b4\u0005",
    "\u0086D\u0002\u02b4\u0085\u0003\u0002\u0002\u0002\u02b5\u02b6\u0005",
    "\u008aF\u0002\u02b6\u02b7\u0005\u0088E\u0002\u02b7\u02ba\u0003\u0002",
    "\u0002\u0002\u02b8\u02ba\u0005\u008aF\u0002\u02b9\u02b5\u0003\u0002",
    "\u0002\u0002\u02b9\u02b8\u0003\u0002\u0002\u0002\u02ba\u0087\u0003\u0002",
    "\u0002\u0002\u02bb\u02be\u0005\u008aF\u0002\u02bc\u02be\u0005l7\u0002",
    "\u02bd\u02bb\u0003\u0002\u0002\u0002\u02bd\u02bc\u0003\u0002\u0002\u0002",
    "\u02be\u0089\u0003\u0002\u0002\u0002\u02bf\u02cb\u0007\u001e\u0002\u0002",
    "\u02c0\u02c5\u0005\u008cG\u0002\u02c1\u02c2\u0007%\u0002\u0002\u02c2",
    "\u02c4\u0005\u008cG\u0002\u02c3\u02c1\u0003\u0002\u0002\u0002\u02c4",
    "\u02c7\u0003\u0002\u0002\u0002\u02c5\u02c3\u0003\u0002\u0002\u0002\u02c5",
    "\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c9\u0003\u0002\u0002\u0002\u02c7",
    "\u02c5\u0003\u0002\u0002\u0002\u02c8\u02ca\u0007%\u0002\u0002\u02c9",
    "\u02c8\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca",
    "\u02cc\u0003\u0002\u0002\u0002\u02cb\u02c0\u0003\u0002\u0002\u0002\u02cb",
    "\u02cc\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd",
    "\u02ce\u0007\u001f\u0002\u0002\u02ce\u008b\u0003\u0002\u0002\u0002\u02cf",
    "\u02d1\u0005\u0012\n\u0002\u02d0\u02cf\u0003\u0002\u0002\u0002\u02d0",
    "\u02d1\u0003\u0002\u0002\u0002\u02d1\u02d3\u0003\u0002\u0002\u0002\u02d2",
    "\u02d4\u0007,\u0002\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d3",
    "\u02d4\u0003\u0002\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002\u02d5",
    "\u02d6\u0005l7\u0002\u02d6\u008d\u0003\u0002\u0002\u0002\u02d7\u02d8",
    "\bH\u0001\u0002\u02d8\u02dc\u0005\u0090I\u0002\u02d9\u02da\t\u0006\u0002",
    "\u0002\u02da\u02dc\u0005\u008eH\b\u02db\u02d7\u0003\u0002\u0002\u0002",
    "\u02db\u02d9\u0003\u0002\u0002\u0002\u02dc\u02ee\u0003\u0002\u0002\u0002",
    "\u02dd\u02de\f\u0007\u0002\u0002\u02de\u02df\t\u0007\u0002\u0002\u02df",
    "\u02ed\u0005\u008eH\b\u02e0\u02e1\f\u0006\u0002\u0002\u02e1\u02e2\t",
    "\b\u0002\u0002\u02e2\u02ed\u0005\u008eH\u0007\u02e3\u02e4\f\u0005\u0002",
    "\u0002\u02e4\u02e5\t\t\u0002\u0002\u02e5\u02ed\u0005\u008eH\u0006\u02e6",
    "\u02e7\f\u0004\u0002\u0002\u02e7\u02e8\u0007.\u0002\u0002\u02e8\u02ed",
    "\u0005\u008eH\u0005\u02e9\u02ea\f\u0003\u0002\u0002\u02ea\u02eb\u0007",
    "-\u0002\u0002\u02eb\u02ed\u0005\u008eH\u0004\u02ec\u02dd\u0003\u0002",
    "\u0002\u0002\u02ec\u02e0\u0003\u0002\u0002\u0002\u02ec\u02e3\u0003\u0002",
    "\u0002\u0002\u02ec\u02e6\u0003\u0002\u0002\u0002\u02ec\u02e9\u0003\u0002",
    "\u0002\u0002\u02ed\u02f0\u0003\u0002\u0002\u0002\u02ee\u02ec\u0003\u0002",
    "\u0002\u0002\u02ee\u02ef\u0003\u0002\u0002\u0002\u02ef\u008f\u0003\u0002",
    "\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002\u02f1\u02f2\bI\u0001",
    "\u0002\u02f2\u02f6\u0005\u0096L\u0002\u02f3\u02f6\u0005\u0092J\u0002",
    "\u02f4\u02f6\u0005\u00c2b\u0002\u02f5\u02f1\u0003\u0002\u0002\u0002",
    "\u02f5\u02f3\u0003\u0002\u0002\u0002\u02f5\u02f4\u0003\u0002\u0002\u0002",
    "\u02f6\u0302\u0003\u0002\u0002\u0002\u02f7\u02fe\f\u0003\u0002\u0002",
    "\u02f8\u02f9\u0007(\u0002\u0002\u02f9\u02ff\u0007\u001d\u0002\u0002",
    "\u02fa\u02ff\u0005\u00ba^\u0002\u02fb\u02ff\u0005\u00bc_\u0002\u02fc",
    "\u02ff\u0005\u00be`\u0002\u02fd\u02ff\u0005\u00c0a\u0002\u02fe\u02f8",
    "\u0003\u0002\u0002\u0002\u02fe\u02fa\u0003\u0002\u0002\u0002\u02fe\u02fb",
    "\u0003\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe\u02fd",
    "\u0003\u0002\u0002\u0002\u02ff\u0301\u0003\u0002\u0002\u0002\u0300\u02f7",
    "\u0003\u0002\u0002\u0002\u0301\u0304\u0003\u0002\u0002\u0002\u0302\u0300",
    "\u0003\u0002\u0002\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303\u0091",
    "\u0003\u0002\u0002\u0002\u0304\u0302\u0003\u0002\u0002\u0002\u0305\u0306",
    "\u0005\u0094K\u0002\u0306\u0307\u0007\u001e\u0002\u0002\u0307\u0309",
    "\u0005\u008eH\u0002\u0308\u030a\u0007%\u0002\u0002\u0309\u0308\u0003",
    "\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u030b\u0003",
    "\u0002\u0002\u0002\u030b\u030c\u0007\u001f\u0002\u0002\u030c\u0093\u0003",
    "\u0002\u0002\u0002\u030d\u0313\u0005p9\u0002\u030e\u030f\u0007\u001e",
    "\u0002\u0002\u030f\u0310\u0005\u0094K\u0002\u0310\u0311\u0007\u001f",
    "\u0002\u0002\u0311\u0313\u0003\u0002\u0002\u0002\u0312\u030d\u0003\u0002",
    "\u0002\u0002\u0312\u030e\u0003\u0002\u0002\u0002\u0313\u0095\u0003\u0002",
    "\u0002\u0002\u0314\u031b\u0005\u0098M\u0002\u0315\u031b\u0005\u009e",
    "P\u0002\u0316\u0317\u0007\u001e\u0002\u0002\u0317\u0318\u0005\u008e",
    "H\u0002\u0318\u0319\u0007\u001f\u0002\u0002\u0319\u031b\u0003\u0002",
    "\u0002\u0002\u031a\u0314\u0003\u0002\u0002\u0002\u031a\u0315\u0003\u0002",
    "\u0002\u0002\u031a\u0316\u0003\u0002\u0002\u0002\u031b\u0097\u0003\u0002",
    "\u0002\u0002\u031c\u0320\u0005\u009aN\u0002\u031d\u0320\u0005\u00a2",
    "R\u0002\u031e\u0320\u0005\u00b8]\u0002\u031f\u031c\u0003\u0002\u0002",
    "\u0002\u031f\u031d\u0003\u0002\u0002\u0002\u031f\u031e\u0003\u0002\u0002",
    "\u0002\u0320\u0099\u0003\u0002\u0002\u0002\u0321\u0326\u0007\u001c\u0002",
    "\u0002\u0322\u0326\u0005\u009cO\u0002\u0323\u0326\u0005\u00b4[\u0002",
    "\u0324\u0326\u0007F\u0002\u0002\u0325\u0321\u0003\u0002\u0002\u0002",
    "\u0325\u0322\u0003\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002",
    "\u0325\u0324\u0003\u0002\u0002\u0002\u0326\u009b\u0003\u0002\u0002\u0002",
    "\u0327\u0328\t\n\u0002\u0002\u0328\u009d\u0003\u0002\u0002\u0002\u0329",
    "\u032a\u0007\u001d\u0002\u0002\u032a\u009f\u0003\u0002\u0002\u0002\u032b",
    "\u032c\u0007\u001d\u0002\u0002\u032c\u032d\u0007(\u0002\u0002\u032d",
    "\u032e\u0007\u001d\u0002\u0002\u032e\u00a1\u0003\u0002\u0002\u0002\u032f",
    "\u0330\u0005\u00a4S\u0002\u0330\u0331\u0005\u00a6T\u0002\u0331\u00a3",
    "\u0003\u0002\u0002\u0002\u0332\u033c\u0005\u00b0Y\u0002\u0333\u033c",
    "\u0005r:\u0002\u0334\u0335\u0007\"\u0002\u0002\u0335\u0336\u0007,\u0002",
    "\u0002\u0336\u0337\u0007#\u0002\u0002\u0337\u033c\u0005v<\u0002\u0338",
    "\u033c\u0005|?\u0002\u0339\u033c\u0005~@\u0002\u033a\u033c\u0005n8\u0002",
    "\u033b\u0332\u0003\u0002\u0002\u0002\u033b\u0333\u0003\u0002\u0002\u0002",
    "\u033b\u0334\u0003\u0002\u0002\u0002\u033b\u0338\u0003\u0002\u0002\u0002",
    "\u033b\u0339\u0003\u0002\u0002\u0002\u033b\u033a\u0003\u0002\u0002\u0002",
    "\u033c\u00a5\u0003\u0002\u0002\u0002\u033d\u0342\u0007 \u0002\u0002",
    "\u033e\u0340\u0005\u00a8U\u0002\u033f\u0341\u0007%\u0002\u0002\u0340",
    "\u033f\u0003\u0002\u0002\u0002\u0340\u0341\u0003\u0002\u0002\u0002\u0341",
    "\u0343\u0003\u0002\u0002\u0002\u0342\u033e\u0003\u0002\u0002\u0002\u0342",
    "\u0343\u0003\u0002\u0002\u0002\u0343\u0344\u0003\u0002\u0002\u0002\u0344",
    "\u0345\u0007!\u0002\u0002\u0345\u00a7\u0003\u0002\u0002\u0002\u0346",
    "\u034b\u0005\u00aaV\u0002\u0347\u0348\u0007%\u0002\u0002\u0348\u034a",
    "\u0005\u00aaV\u0002\u0349\u0347\u0003\u0002\u0002\u0002\u034a\u034d",
    "\u0003\u0002\u0002\u0002\u034b\u0349\u0003\u0002\u0002\u0002\u034b\u034c",
    "\u0003\u0002\u0002\u0002\u034c\u00a9\u0003\u0002\u0002\u0002\u034d\u034b",
    "\u0003\u0002\u0002\u0002\u034e\u034f\u0005\u00acW\u0002\u034f\u0350",
    "\u0007\'\u0002\u0002\u0350\u0352\u0003\u0002\u0002\u0002\u0351\u034e",
    "\u0003\u0002\u0002\u0002\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u0353",
    "\u0003\u0002\u0002\u0002\u0353\u0354\u0005\u00aeX\u0002\u0354\u00ab",
    "\u0003\u0002\u0002\u0002\u0355\u0358\u0005\u008eH\u0002\u0356\u0358",
    "\u0005\u00a6T\u0002\u0357\u0355\u0003\u0002\u0002\u0002\u0357\u0356",
    "\u0003\u0002\u0002\u0002\u0358\u00ad\u0003\u0002\u0002\u0002\u0359\u035c",
    "\u0005\u008eH\u0002\u035a\u035c\u0005\u00a6T\u0002\u035b\u0359\u0003",
    "\u0002\u0002\u0002\u035b\u035a\u0003\u0002\u0002\u0002\u035c\u00af\u0003",
    "\u0002\u0002\u0002\u035d\u035e\u0007\f\u0002\u0002\u035e\u0364\u0007",
    " \u0002\u0002\u035f\u0360\u0005\u00b2Z\u0002\u0360\u0361\u0005\u00c6",
    "d\u0002\u0361\u0363\u0003\u0002\u0002\u0002\u0362\u035f\u0003\u0002",
    "\u0002\u0002\u0363\u0366\u0003\u0002\u0002\u0002\u0364\u0362\u0003\u0002",
    "\u0002\u0002\u0364\u0365\u0003\u0002\u0002\u0002\u0365\u0367\u0003\u0002",
    "\u0002\u0002\u0366\u0364\u0003\u0002\u0002\u0002\u0367\u0368\u0007!",
    "\u0002\u0002\u0368\u00b1\u0003\u0002\u0002\u0002\u0369\u036a\u0005\u0012",
    "\n\u0002\u036a\u036b\u0005l7\u0002\u036b\u036e\u0003\u0002\u0002\u0002",
    "\u036c\u036e\u0005\u00b6\\\u0002\u036d\u0369\u0003\u0002\u0002\u0002",
    "\u036d\u036c\u0003\u0002\u0002\u0002\u036e\u0370\u0003\u0002\u0002\u0002",
    "\u036f\u0371\u0005\u00b4[\u0002\u0370\u036f\u0003\u0002\u0002\u0002",
    "\u0370\u0371\u0003\u0002\u0002\u0002\u0371\u00b3\u0003\u0002\u0002\u0002",
    "\u0372\u0373\t\u000b\u0002\u0002\u0373\u00b5\u0003\u0002\u0002\u0002",
    "\u0374\u0376\u0007?\u0002\u0002\u0375\u0374\u0003\u0002\u0002\u0002",
    "\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002",
    "\u0377\u0378\u0005n8\u0002\u0378\u00b7\u0003\u0002\u0002\u0002\u0379",
    "\u037a\u0007\u0005\u0002\u0002\u037a\u037b\u0005\u0086D\u0002\u037b",
    "\u037c\u0005$\u0013\u0002\u037c\u00b9\u0003\u0002\u0002\u0002\u037d",
    "\u037e\u0007\"\u0002\u0002\u037e\u037f\u0005\u008eH\u0002\u037f\u0380",
    "\u0007#\u0002\u0002\u0380\u00bb\u0003\u0002\u0002\u0002\u0381\u0391",
    "\u0007\"\u0002\u0002\u0382\u0384\u0005\u008eH\u0002\u0383\u0382\u0003",
    "\u0002\u0002\u0002\u0383\u0384\u0003\u0002\u0002\u0002\u0384\u0385\u0003",
    "\u0002\u0002\u0002\u0385\u0387\u0007\'\u0002\u0002\u0386\u0388\u0005",
    "\u008eH\u0002\u0387\u0386\u0003\u0002\u0002\u0002\u0387\u0388\u0003",
    "\u0002\u0002\u0002\u0388\u0392\u0003\u0002\u0002\u0002\u0389\u038b\u0005",
    "\u008eH\u0002\u038a\u0389\u0003\u0002\u0002\u0002\u038a\u038b\u0003",
    "\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002\u038c\u038d\u0007",
    "\'\u0002\u0002\u038d\u038e\u0005\u008eH\u0002\u038e\u038f\u0007\'\u0002",
    "\u0002\u038f\u0390\u0005\u008eH\u0002\u0390\u0392\u0003\u0002\u0002",
    "\u0002\u0391\u0383\u0003\u0002\u0002\u0002\u0391\u038a\u0003\u0002\u0002",
    "\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u0394\u0007#\u0002",
    "\u0002\u0394\u00bd\u0003\u0002\u0002\u0002\u0395\u0396\u0007(\u0002",
    "\u0002\u0396\u0397\u0007\u001e\u0002\u0002\u0397\u0398\u0005l7\u0002",
    "\u0398\u0399\u0007\u001f\u0002\u0002\u0399\u00bf\u0003\u0002\u0002\u0002",
    "\u039a\u03a9\u0007\u001e\u0002\u0002\u039b\u03a2\u0005\u0014\u000b\u0002",
    "\u039c\u039f\u0005\u0094K\u0002\u039d\u039e\u0007%\u0002\u0002\u039e",
    "\u03a0\u0005\u0014\u000b\u0002\u039f\u039d\u0003\u0002\u0002\u0002\u039f",
    "\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a2\u0003\u0002\u0002\u0002\u03a1",
    "\u039b\u0003\u0002\u0002\u0002\u03a1\u039c\u0003\u0002\u0002\u0002\u03a2",
    "\u03a4\u0003\u0002\u0002\u0002\u03a3\u03a5\u0007,\u0002\u0002\u03a4",
    "\u03a3\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5",
    "\u03a7\u0003\u0002\u0002\u0002\u03a6\u03a8\u0007%\u0002\u0002\u03a7",
    "\u03a6\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002\u0002\u03a8",
    "\u03aa\u0003\u0002\u0002\u0002\u03a9\u03a1\u0003\u0002\u0002\u0002\u03a9",
    "\u03aa\u0003\u0002\u0002\u0002\u03aa\u03ab\u0003\u0002\u0002\u0002\u03ab",
    "\u03ac\u0007\u001f\u0002\u0002\u03ac\u00c1\u0003\u0002\u0002\u0002\u03ad",
    "\u03ae\u0005\u0094K\u0002\u03ae\u03af\u0007(\u0002\u0002\u03af\u03b0",
    "\u0007\u001d\u0002\u0002\u03b0\u00c3\u0003\u0002\u0002\u0002\u03b1\u03b2",
    "\u0005l7\u0002\u03b2\u00c5\u0003\u0002\u0002\u0002\u03b3\u03b8\u0007",
    "&\u0002\u0002\u03b4\u03b8\u0007\u0002\u0002\u0003\u03b5\u03b8\u0007",
    "Y\u0002\u0002\u03b6\u03b8\u0006d\b\u0002\u03b7\u03b3\u0003\u0002\u0002",
    "\u0002\u03b7\u03b4\u0003\u0002\u0002\u0002\u03b7\u03b5\u0003\u0002\u0002",
    "\u0002\u03b7\u03b6\u0003\u0002\u0002\u0002\u03b8\u00c7\u0003\u0002\u0002",
    "\u0002m\u00cf\u00d5\u00db\u00eb\u00ef\u00f2\u00fb\u0105\u0109\u010d",
    "\u0111\u0118\u0120\u012b\u012f\u0133\u013b\u0142\u014e\u0152\u0158\u015c",
    "\u0160\u0165\u016c\u017d\u0184\u0194\u01a1\u01a5\u01a9\u01ad\u01c0\u01c6",
    "\u01c8\u01cc\u01d0\u01d3\u01d7\u01d9\u01df\u01e7\u01ec\u01f7\u01fd\u0204",
    "\u020f\u0214\u0218\u021d\u0221\u0229\u0231\u0236\u0239\u0241\u0249\u024e",
    "\u0252\u0256\u025e\u026c\u0270\u027a\u028c\u0292\u02a6\u02b0\u02b9\u02bd",
    "\u02c5\u02c9\u02cb\u02d0\u02d3\u02db\u02ec\u02ee\u02f5\u02fe\u0302\u0309",
    "\u0312\u031a\u031f\u0325\u033b\u0340\u0342\u034b\u0351\u0357\u035b\u0364",
    "\u036d\u0370\u0375\u0383\u0387\u038a\u0391\u039f\u03a1\u03a4\u03a7\u03a9",
    "\u03b7"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class GoParser extends GoParserBase {

    static grammarFileName = "GoParser.g4";
    static literalNames = [ null, "'break'", "'default'", "'func'", "'interface'", 
                            "'select'", "'case'", "'defer'", "'go'", "'map'", 
                            "'struct'", "'chan'", "'else'", "'goto'", "'package'", 
                            "'switch'", "'const'", "'fallthrough'", "'if'", 
                            "'range'", "'type'", "'continue'", "'for'", 
                            "'import'", "'return'", "'var'", "'nil'", null, 
                            "'('", "')'", "'{'", "'}'", "'['", "']'", "'='", 
                            "','", "';'", "':'", "'.'", "'++'", "'--'", 
                            "':='", "'...'", "'||'", "'&&'", "'=='", "'!='", 
                            "'<'", "'<='", "'>'", "'>='", "'|'", "'/'", 
                            "'%'", "'<<'", "'>>'", "'&^'", "'!'", "'+'", 
                            "'-'", "'^'", "'*'", "'&'", "'<-'" ];
    static symbolicNames = [ null, "BREAK", "DEFAULT", "FUNC", "INTERFACE", 
                             "SELECT", "CASE", "DEFER", "GO", "MAP", "STRUCT", 
                             "CHAN", "ELSE", "GOTO", "PACKAGE", "SWITCH", 
                             "CONST", "FALLTHROUGH", "IF", "RANGE", "TYPE", 
                             "CONTINUE", "FOR", "IMPORT", "RETURN", "VAR", 
                             "NIL_LIT", "IDENTIFIER", "L_PAREN", "R_PAREN", 
                             "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", 
                             "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", 
                             "PLUS_PLUS", "MINUS_MINUS", "DECLARE_ASSIGN", 
                             "ELLIPSIS", "LOGICAL_OR", "LOGICAL_AND", "EQUALS", 
                             "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", 
                             "GREATER_OR_EQUALS", "OR", "DIV", "MOD", "LSHIFT", 
                             "RSHIFT", "BIT_CLEAR", "EXCLAMATION", "PLUS", 
                             "MINUS", "CARET", "STAR", "AMPERSAND", "RECEIVE", 
                             "DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", "HEX_LIT", 
                             "FLOAT_LIT", "DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", 
                             "IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", 
                             "OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", "LITTLE_U_VALUE", 
                             "BIG_U_VALUE", "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", 
                             "WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", 
                             "WS_NLSEMI", "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI", 
                             "EOS", "OTHER" ];
    static ruleNames = [ "sourceFile", "packageClause", "importDecl", "importSpec", 
                         "importPath", "declaration", "constDecl", "constSpec", 
                         "identifierList", "expressionList", "typeDecl", 
                         "typeSpec", "functionDecl", "methodDecl", "receiver", 
                         "varDecl", "varSpec", "block", "statementList", 
                         "statement", "simpleStmt", "expressionStmt", "sendStmt", 
                         "incDecStmt", "assignment", "assign_op", "shortVarDecl", 
                         "emptyStmt", "labeledStmt", "returnStmt", "breakStmt", 
                         "continueStmt", "gotoStmt", "fallthroughStmt", 
                         "deferStmt", "ifStmt", "switchStmt", "exprSwitchStmt", 
                         "exprCaseClause", "exprSwitchCase", "typeSwitchStmt", 
                         "typeSwitchGuard", "typeCaseClause", "typeSwitchCase", 
                         "typeList", "selectStmt", "commClause", "commCase", 
                         "recvStmt", "forStmt", "forClause", "rangeClause", 
                         "goStmt", "type_", "typeName", "typeLit", "arrayType", 
                         "arrayLength", "elementType", "pointerType", "interfaceType", 
                         "sliceType", "mapType", "channelType", "methodSpec", 
                         "functionType", "signature", "result", "parameters", 
                         "parameterDecl", "expression", "primaryExpr", "conversion", 
                         "nonNamedType", "operand", "literal", "basicLit", 
                         "integer", "operandName", "qualifiedIdent", "compositeLit", 
                         "literalType", "literalValue", "elementList", "keyedElement", 
                         "key", "element", "structType", "fieldDecl", "string_", 
                         "embeddedField", "functionLit", "index", "slice_", 
                         "typeAssertion", "arguments", "methodExpr", "receiverType", 
                         "eos" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = GoParser.ruleNames;
        this.literalNames = GoParser.literalNames;
        this.symbolicNames = GoParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 70:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 71:
    	    		return this.primaryExpr_sempred(localctx, predIndex);
    	case 98:
    	    		return this.eos_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 5);
    		case 1:
    			return this.precpred(this._ctx, 4);
    		case 2:
    			return this.precpred(this._ctx, 3);
    		case 3:
    			return this.precpred(this._ctx, 2);
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    primaryExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    eos_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.closingBracket();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	sourceFile() {
	    let localctx = new SourceFileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, GoParser.RULE_sourceFile);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 198;
	        this.packageClause();
	        this.state = 199;
	        this.eos();
	        this.state = 205;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===GoParser.IMPORT) {
	            this.state = 200;
	            this.importDecl();
	            this.state = 201;
	            this.eos();
	            this.state = 207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 217;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GoParser.FUNC) | (1 << GoParser.CONST) | (1 << GoParser.TYPE) | (1 << GoParser.VAR))) !== 0)) {
	            this.state = 211;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 208;
	                this.functionDecl();
	                break;

	            case 2:
	                this.state = 209;
	                this.methodDecl();
	                break;

	            case 3:
	                this.state = 210;
	                this.declaration();
	                break;

	            }
	            this.state = 213;
	            this.eos();
	            this.state = 219;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 220;
	        this.match(GoParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageClause() {
	    let localctx = new PackageClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, GoParser.RULE_packageClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 222;
	        this.match(GoParser.PACKAGE);
	        this.state = 223;
	        localctx.packageName = this.match(GoParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDecl() {
	    let localctx = new ImportDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, GoParser.RULE_importDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 225;
	        this.match(GoParser.IMPORT);
	        this.state = 237;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.IDENTIFIER:
	        case GoParser.DOT:
	        case GoParser.RAW_STRING_LIT:
	        case GoParser.INTERPRETED_STRING_LIT:
	            this.state = 226;
	            this.importSpec();
	            break;
	        case GoParser.L_PAREN:
	            this.state = 227;
	            this.match(GoParser.L_PAREN);
	            this.state = 233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===GoParser.IDENTIFIER || _la===GoParser.DOT || _la===GoParser.RAW_STRING_LIT || _la===GoParser.INTERPRETED_STRING_LIT) {
	                this.state = 228;
	                this.importSpec();
	                this.state = 229;
	                this.eos();
	                this.state = 235;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 236;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importSpec() {
	    let localctx = new ImportSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, GoParser.RULE_importSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GoParser.IDENTIFIER || _la===GoParser.DOT) {
	            this.state = 239;
	            localctx.alias = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===GoParser.IDENTIFIER || _la===GoParser.DOT)) {
	                localctx.alias = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 242;
	        this.importPath();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importPath() {
	    let localctx = new ImportPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, GoParser.RULE_importPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 244;
	        this.string_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, GoParser.RULE_declaration);
	    try {
	        this.state = 249;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.CONST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 246;
	            this.constDecl();
	            break;
	        case GoParser.TYPE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 247;
	            this.typeDecl();
	            break;
	        case GoParser.VAR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 248;
	            this.varDecl();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constDecl() {
	    let localctx = new ConstDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, GoParser.RULE_constDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 251;
	        this.match(GoParser.CONST);
	        this.state = 263;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.IDENTIFIER:
	            this.state = 252;
	            this.constSpec();
	            break;
	        case GoParser.L_PAREN:
	            this.state = 253;
	            this.match(GoParser.L_PAREN);
	            this.state = 259;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===GoParser.IDENTIFIER) {
	                this.state = 254;
	                this.constSpec();
	                this.state = 255;
	                this.eos();
	                this.state = 261;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 262;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constSpec() {
	    let localctx = new ConstSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, GoParser.RULE_constSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 265;
	        this.identifierList();
	        this.state = 271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        if(la_===1) {
	            this.state = 267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GoParser.FUNC) | (1 << GoParser.INTERFACE) | (1 << GoParser.MAP) | (1 << GoParser.STRUCT) | (1 << GoParser.CHAN) | (1 << GoParser.IDENTIFIER) | (1 << GoParser.L_PAREN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GoParser.L_BRACKET - 32)) | (1 << (GoParser.STAR - 32)) | (1 << (GoParser.RECEIVE - 32)))) !== 0)) {
	                this.state = 266;
	                this.type_();
	            }

	            this.state = 269;
	            this.match(GoParser.ASSIGN);
	            this.state = 270;
	            this.expressionList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, GoParser.RULE_identifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 273;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 278;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 274;
	                this.match(GoParser.COMMA);
	                this.state = 275;
	                this.match(GoParser.IDENTIFIER); 
	            }
	            this.state = 280;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, GoParser.RULE_expressionList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 281;
	        this.expression(0);
	        this.state = 286;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 282;
	                this.match(GoParser.COMMA);
	                this.state = 283;
	                this.expression(0); 
	            }
	            this.state = 288;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDecl() {
	    let localctx = new TypeDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, GoParser.RULE_typeDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 289;
	        this.match(GoParser.TYPE);
	        this.state = 301;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.IDENTIFIER:
	            this.state = 290;
	            this.typeSpec();
	            break;
	        case GoParser.L_PAREN:
	            this.state = 291;
	            this.match(GoParser.L_PAREN);
	            this.state = 297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===GoParser.IDENTIFIER) {
	                this.state = 292;
	                this.typeSpec();
	                this.state = 293;
	                this.eos();
	                this.state = 299;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 300;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpec() {
	    let localctx = new TypeSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, GoParser.RULE_typeSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 303;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GoParser.ASSIGN) {
	            this.state = 304;
	            this.match(GoParser.ASSIGN);
	        }

	        this.state = 307;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDecl() {
	    let localctx = new FunctionDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, GoParser.RULE_functionDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 309;
	        this.match(GoParser.FUNC);
	        this.state = 310;
	        this.match(GoParser.IDENTIFIER);

	        this.state = 311;
	        this.signature();
	        this.state = 313;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 312;
	            this.block();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDecl() {
	    let localctx = new MethodDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, GoParser.RULE_methodDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 315;
	        this.match(GoParser.FUNC);
	        this.state = 316;
	        this.receiver();
	        this.state = 317;
	        this.match(GoParser.IDENTIFIER);

	        this.state = 318;
	        this.signature();
	        this.state = 320;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        if(la_===1) {
	            this.state = 319;
	            this.block();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiver() {
	    let localctx = new ReceiverContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, GoParser.RULE_receiver);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 322;
	        this.parameters();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varDecl() {
	    let localctx = new VarDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, GoParser.RULE_varDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        this.match(GoParser.VAR);
	        this.state = 336;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.IDENTIFIER:
	            this.state = 325;
	            this.varSpec();
	            break;
	        case GoParser.L_PAREN:
	            this.state = 326;
	            this.match(GoParser.L_PAREN);
	            this.state = 332;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===GoParser.IDENTIFIER) {
	                this.state = 327;
	                this.varSpec();
	                this.state = 328;
	                this.eos();
	                this.state = 334;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 335;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varSpec() {
	    let localctx = new VarSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, GoParser.RULE_varSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 338;
	        this.identifierList();
	        this.state = 346;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.FUNC:
	        case GoParser.INTERFACE:
	        case GoParser.MAP:
	        case GoParser.STRUCT:
	        case GoParser.CHAN:
	        case GoParser.IDENTIFIER:
	        case GoParser.L_PAREN:
	        case GoParser.L_BRACKET:
	        case GoParser.STAR:
	        case GoParser.RECEIVE:
	            this.state = 339;
	            this.type_();
	            this.state = 342;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	            if(la_===1) {
	                this.state = 340;
	                this.match(GoParser.ASSIGN);
	                this.state = 341;
	                this.expressionList();

	            }
	            break;
	        case GoParser.ASSIGN:
	            this.state = 344;
	            this.match(GoParser.ASSIGN);
	            this.state = 345;
	            this.expressionList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, GoParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 348;
	        this.match(GoParser.L_CURLY);
	        this.state = 350;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        if(la_===1) {
	            this.state = 349;
	            this.statementList();

	        }
	        this.state = 352;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, GoParser.RULE_statementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 360; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 355;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        		if(la_===1) {
	        		    this.state = 354;
	        		    this.eos();

	        		}
	        		this.state = 357;
	        		this.statement();
	        		this.state = 358;
	        		this.eos();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 362; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,24, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, GoParser.RULE_statement);
	    try {
	        this.state = 379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 364;
	            this.declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 365;
	            this.labeledStmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 366;
	            this.simpleStmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 367;
	            this.goStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 368;
	            this.returnStmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 369;
	            this.breakStmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 370;
	            this.continueStmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 371;
	            this.gotoStmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 372;
	            this.fallthroughStmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 373;
	            this.block();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 374;
	            this.ifStmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 375;
	            this.switchStmt();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 376;
	            this.selectStmt();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 377;
	            this.forStmt();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 378;
	            this.deferStmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleStmt() {
	    let localctx = new SimpleStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, GoParser.RULE_simpleStmt);
	    try {
	        this.state = 386;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 381;
	            this.sendStmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 382;
	            this.incDecStmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 383;
	            this.assignment();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 384;
	            this.expressionStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 385;
	            this.shortVarDecl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStmt() {
	    let localctx = new ExpressionStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, GoParser.RULE_expressionStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 388;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendStmt() {
	    let localctx = new SendStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, GoParser.RULE_sendStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 390;
	        localctx.channel = this.expression(0);
	        this.state = 391;
	        this.match(GoParser.RECEIVE);
	        this.state = 392;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	incDecStmt() {
	    let localctx = new IncDecStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, GoParser.RULE_incDecStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 394;
	        this.expression(0);
	        this.state = 395;
	        _la = this._input.LA(1);
	        if(!(_la===GoParser.PLUS_PLUS || _la===GoParser.MINUS_MINUS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, GoParser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 397;
	        this.expressionList();
	        this.state = 398;
	        this.assign_op();
	        this.state = 399;
	        this.expressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_op() {
	    let localctx = new Assign_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, GoParser.RULE_assign_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 402;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GoParser.OR - 51)) | (1 << (GoParser.DIV - 51)) | (1 << (GoParser.MOD - 51)) | (1 << (GoParser.LSHIFT - 51)) | (1 << (GoParser.RSHIFT - 51)) | (1 << (GoParser.BIT_CLEAR - 51)) | (1 << (GoParser.PLUS - 51)) | (1 << (GoParser.MINUS - 51)) | (1 << (GoParser.CARET - 51)) | (1 << (GoParser.STAR - 51)) | (1 << (GoParser.AMPERSAND - 51)))) !== 0)) {
	            this.state = 401;
	            _la = this._input.LA(1);
	            if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GoParser.OR - 51)) | (1 << (GoParser.DIV - 51)) | (1 << (GoParser.MOD - 51)) | (1 << (GoParser.LSHIFT - 51)) | (1 << (GoParser.RSHIFT - 51)) | (1 << (GoParser.BIT_CLEAR - 51)) | (1 << (GoParser.PLUS - 51)) | (1 << (GoParser.MINUS - 51)) | (1 << (GoParser.CARET - 51)) | (1 << (GoParser.STAR - 51)) | (1 << (GoParser.AMPERSAND - 51)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 404;
	        this.match(GoParser.ASSIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shortVarDecl() {
	    let localctx = new ShortVarDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, GoParser.RULE_shortVarDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.identifierList();
	        this.state = 407;
	        this.match(GoParser.DECLARE_ASSIGN);
	        this.state = 408;
	        this.expressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStmt() {
	    let localctx = new EmptyStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, GoParser.RULE_emptyStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 410;
	        _la = this._input.LA(1);
	        if(!(_la===GoParser.SEMI || _la===GoParser.EOS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStmt() {
	    let localctx = new LabeledStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, GoParser.RULE_labeledStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 413;
	        this.match(GoParser.COLON);
	        this.state = 415;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 414;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStmt() {
	    let localctx = new ReturnStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, GoParser.RULE_returnStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 417;
	        this.match(GoParser.RETURN);
	        this.state = 419;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        if(la_===1) {
	            this.state = 418;
	            this.expressionList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStmt() {
	    let localctx = new BreakStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, GoParser.RULE_breakStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 421;
	        this.match(GoParser.BREAK);
	        this.state = 423;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 422;
	            this.match(GoParser.IDENTIFIER);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStmt() {
	    let localctx = new ContinueStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, GoParser.RULE_continueStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this.match(GoParser.CONTINUE);
	        this.state = 427;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        if(la_===1) {
	            this.state = 426;
	            this.match(GoParser.IDENTIFIER);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gotoStmt() {
	    let localctx = new GotoStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, GoParser.RULE_gotoStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this.match(GoParser.GOTO);
	        this.state = 430;
	        this.match(GoParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fallthroughStmt() {
	    let localctx = new FallthroughStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, GoParser.RULE_fallthroughStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        this.match(GoParser.FALLTHROUGH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deferStmt() {
	    let localctx = new DeferStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, GoParser.RULE_deferStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 434;
	        this.match(GoParser.DEFER);
	        this.state = 435;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStmt() {
	    let localctx = new IfStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, GoParser.RULE_ifStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 437;
	        this.match(GoParser.IF);
	        this.state = 446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 438;
	            this.expression(0);
	            break;

	        case 2:
	            this.state = 439;
	            this.eos();
	            this.state = 440;
	            this.expression(0);
	            break;

	        case 3:
	            this.state = 442;
	            this.simpleStmt();
	            this.state = 443;
	            this.eos();
	            this.state = 444;
	            this.expression(0);
	            break;

	        }
	        this.state = 448;
	        this.block();
	        this.state = 454;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        if(la_===1) {
	            this.state = 449;
	            this.match(GoParser.ELSE);
	            this.state = 452;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case GoParser.IF:
	                this.state = 450;
	                this.ifStmt();
	                break;
	            case GoParser.L_CURLY:
	                this.state = 451;
	                this.block();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStmt() {
	    let localctx = new SwitchStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, GoParser.RULE_switchStmt);
	    try {
	        this.state = 458;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 456;
	            this.exprSwitchStmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 457;
	            this.typeSwitchStmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprSwitchStmt() {
	    let localctx = new ExprSwitchStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, GoParser.RULE_exprSwitchStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 460;
	        this.match(GoParser.SWITCH);
	        this.state = 471;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (GoParser.FUNC - 3)) | (1 << (GoParser.INTERFACE - 3)) | (1 << (GoParser.MAP - 3)) | (1 << (GoParser.STRUCT - 3)) | (1 << (GoParser.CHAN - 3)) | (1 << (GoParser.NIL_LIT - 3)) | (1 << (GoParser.IDENTIFIER - 3)) | (1 << (GoParser.L_PAREN - 3)) | (1 << (GoParser.L_BRACKET - 3)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GoParser.EXCLAMATION - 57)) | (1 << (GoParser.PLUS - 57)) | (1 << (GoParser.MINUS - 57)) | (1 << (GoParser.CARET - 57)) | (1 << (GoParser.STAR - 57)) | (1 << (GoParser.AMPERSAND - 57)) | (1 << (GoParser.RECEIVE - 57)) | (1 << (GoParser.DECIMAL_LIT - 57)) | (1 << (GoParser.BINARY_LIT - 57)) | (1 << (GoParser.OCTAL_LIT - 57)) | (1 << (GoParser.HEX_LIT - 57)) | (1 << (GoParser.FLOAT_LIT - 57)) | (1 << (GoParser.IMAGINARY_LIT - 57)) | (1 << (GoParser.RUNE_LIT - 57)) | (1 << (GoParser.RAW_STRING_LIT - 57)) | (1 << (GoParser.INTERPRETED_STRING_LIT - 57)))) !== 0)) {
	                this.state = 461;
	                this.expression(0);
	            }

	            break;

	        case 2:
	            this.state = 465;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	            if(la_===1) {
	                this.state = 464;
	                this.simpleStmt();

	            }
	            this.state = 467;
	            this.eos();
	            this.state = 469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (GoParser.FUNC - 3)) | (1 << (GoParser.INTERFACE - 3)) | (1 << (GoParser.MAP - 3)) | (1 << (GoParser.STRUCT - 3)) | (1 << (GoParser.CHAN - 3)) | (1 << (GoParser.NIL_LIT - 3)) | (1 << (GoParser.IDENTIFIER - 3)) | (1 << (GoParser.L_PAREN - 3)) | (1 << (GoParser.L_BRACKET - 3)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GoParser.EXCLAMATION - 57)) | (1 << (GoParser.PLUS - 57)) | (1 << (GoParser.MINUS - 57)) | (1 << (GoParser.CARET - 57)) | (1 << (GoParser.STAR - 57)) | (1 << (GoParser.AMPERSAND - 57)) | (1 << (GoParser.RECEIVE - 57)) | (1 << (GoParser.DECIMAL_LIT - 57)) | (1 << (GoParser.BINARY_LIT - 57)) | (1 << (GoParser.OCTAL_LIT - 57)) | (1 << (GoParser.HEX_LIT - 57)) | (1 << (GoParser.FLOAT_LIT - 57)) | (1 << (GoParser.IMAGINARY_LIT - 57)) | (1 << (GoParser.RUNE_LIT - 57)) | (1 << (GoParser.RAW_STRING_LIT - 57)) | (1 << (GoParser.INTERPRETED_STRING_LIT - 57)))) !== 0)) {
	                this.state = 468;
	                this.expression(0);
	            }

	            break;

	        }
	        this.state = 473;
	        this.match(GoParser.L_CURLY);
	        this.state = 477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===GoParser.DEFAULT || _la===GoParser.CASE) {
	            this.state = 474;
	            this.exprCaseClause();
	            this.state = 479;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 480;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprCaseClause() {
	    let localctx = new ExprCaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, GoParser.RULE_exprCaseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 482;
	        this.exprSwitchCase();
	        this.state = 483;
	        this.match(GoParser.COLON);
	        this.state = 485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        if(la_===1) {
	            this.state = 484;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprSwitchCase() {
	    let localctx = new ExprSwitchCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, GoParser.RULE_exprSwitchCase);
	    try {
	        this.state = 490;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.CASE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 487;
	            this.match(GoParser.CASE);
	            this.state = 488;
	            this.expressionList();
	            break;
	        case GoParser.DEFAULT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 489;
	            this.match(GoParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSwitchStmt() {
	    let localctx = new TypeSwitchStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, GoParser.RULE_typeSwitchStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 492;
	        this.match(GoParser.SWITCH);
	        this.state = 501;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 493;
	            this.typeSwitchGuard();
	            break;

	        case 2:
	            this.state = 494;
	            this.eos();
	            this.state = 495;
	            this.typeSwitchGuard();
	            break;

	        case 3:
	            this.state = 497;
	            this.simpleStmt();
	            this.state = 498;
	            this.eos();
	            this.state = 499;
	            this.typeSwitchGuard();
	            break;

	        }
	        this.state = 503;
	        this.match(GoParser.L_CURLY);
	        this.state = 507;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===GoParser.DEFAULT || _la===GoParser.CASE) {
	            this.state = 504;
	            this.typeCaseClause();
	            this.state = 509;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 510;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSwitchGuard() {
	    let localctx = new TypeSwitchGuardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, GoParser.RULE_typeSwitchGuard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        if(la_===1) {
	            this.state = 512;
	            this.match(GoParser.IDENTIFIER);
	            this.state = 513;
	            this.match(GoParser.DECLARE_ASSIGN);

	        }
	        this.state = 516;
	        this.primaryExpr(0);
	        this.state = 517;
	        this.match(GoParser.DOT);
	        this.state = 518;
	        this.match(GoParser.L_PAREN);
	        this.state = 519;
	        this.match(GoParser.TYPE);
	        this.state = 520;
	        this.match(GoParser.R_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeCaseClause() {
	    let localctx = new TypeCaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, GoParser.RULE_typeCaseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.typeSwitchCase();
	        this.state = 523;
	        this.match(GoParser.COLON);
	        this.state = 525;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 524;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSwitchCase() {
	    let localctx = new TypeSwitchCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, GoParser.RULE_typeSwitchCase);
	    try {
	        this.state = 530;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.CASE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 527;
	            this.match(GoParser.CASE);
	            this.state = 528;
	            this.typeList();
	            break;
	        case GoParser.DEFAULT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 529;
	            this.match(GoParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeList() {
	    let localctx = new TypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, GoParser.RULE_typeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 534;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.FUNC:
	        case GoParser.INTERFACE:
	        case GoParser.MAP:
	        case GoParser.STRUCT:
	        case GoParser.CHAN:
	        case GoParser.IDENTIFIER:
	        case GoParser.L_PAREN:
	        case GoParser.L_BRACKET:
	        case GoParser.STAR:
	        case GoParser.RECEIVE:
	            this.state = 532;
	            this.type_();
	            break;
	        case GoParser.NIL_LIT:
	            this.state = 533;
	            this.match(GoParser.NIL_LIT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 543;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===GoParser.COMMA) {
	            this.state = 536;
	            this.match(GoParser.COMMA);
	            this.state = 539;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case GoParser.FUNC:
	            case GoParser.INTERFACE:
	            case GoParser.MAP:
	            case GoParser.STRUCT:
	            case GoParser.CHAN:
	            case GoParser.IDENTIFIER:
	            case GoParser.L_PAREN:
	            case GoParser.L_BRACKET:
	            case GoParser.STAR:
	            case GoParser.RECEIVE:
	                this.state = 537;
	                this.type_();
	                break;
	            case GoParser.NIL_LIT:
	                this.state = 538;
	                this.match(GoParser.NIL_LIT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 545;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStmt() {
	    let localctx = new SelectStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, GoParser.RULE_selectStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        this.match(GoParser.SELECT);
	        this.state = 547;
	        this.match(GoParser.L_CURLY);
	        this.state = 551;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===GoParser.DEFAULT || _la===GoParser.CASE) {
	            this.state = 548;
	            this.commClause();
	            this.state = 553;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 554;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commClause() {
	    let localctx = new CommClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, GoParser.RULE_commClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 556;
	        this.commCase();
	        this.state = 557;
	        this.match(GoParser.COLON);
	        this.state = 559;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        if(la_===1) {
	            this.state = 558;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commCase() {
	    let localctx = new CommCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, GoParser.RULE_commCase);
	    try {
	        this.state = 567;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.CASE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 561;
	            this.match(GoParser.CASE);
	            this.state = 564;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 562;
	                this.sendStmt();
	                break;

	            case 2:
	                this.state = 563;
	                this.recvStmt();
	                break;

	            }
	            break;
	        case GoParser.DEFAULT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 566;
	            this.match(GoParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recvStmt() {
	    let localctx = new RecvStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, GoParser.RULE_recvStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 575;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        if(la_===1) {
	            this.state = 569;
	            this.expressionList();
	            this.state = 570;
	            this.match(GoParser.ASSIGN);

	        } else if(la_===2) {
	            this.state = 572;
	            this.identifierList();
	            this.state = 573;
	            this.match(GoParser.DECLARE_ASSIGN);

	        }
	        this.state = 577;
	        localctx.recvExpr = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStmt() {
	    let localctx = new ForStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, GoParser.RULE_forStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this.match(GoParser.FOR);
	        this.state = 583;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        if(la_===1) {
	            this.state = 580;
	            this.expression(0);

	        } else if(la_===2) {
	            this.state = 581;
	            this.forClause();

	        } else if(la_===3) {
	            this.state = 582;
	            this.rangeClause();

	        }
	        this.state = 585;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forClause() {
	    let localctx = new ForClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, GoParser.RULE_forClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        if(la_===1) {
	            this.state = 587;
	            localctx.initStmt = this.simpleStmt();

	        }
	        this.state = 590;
	        this.eos();
	        this.state = 592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        if(la_===1) {
	            this.state = 591;
	            this.expression(0);

	        }
	        this.state = 594;
	        this.eos();
	        this.state = 596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (GoParser.FUNC - 3)) | (1 << (GoParser.INTERFACE - 3)) | (1 << (GoParser.MAP - 3)) | (1 << (GoParser.STRUCT - 3)) | (1 << (GoParser.CHAN - 3)) | (1 << (GoParser.NIL_LIT - 3)) | (1 << (GoParser.IDENTIFIER - 3)) | (1 << (GoParser.L_PAREN - 3)) | (1 << (GoParser.L_BRACKET - 3)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GoParser.EXCLAMATION - 57)) | (1 << (GoParser.PLUS - 57)) | (1 << (GoParser.MINUS - 57)) | (1 << (GoParser.CARET - 57)) | (1 << (GoParser.STAR - 57)) | (1 << (GoParser.AMPERSAND - 57)) | (1 << (GoParser.RECEIVE - 57)) | (1 << (GoParser.DECIMAL_LIT - 57)) | (1 << (GoParser.BINARY_LIT - 57)) | (1 << (GoParser.OCTAL_LIT - 57)) | (1 << (GoParser.HEX_LIT - 57)) | (1 << (GoParser.FLOAT_LIT - 57)) | (1 << (GoParser.IMAGINARY_LIT - 57)) | (1 << (GoParser.RUNE_LIT - 57)) | (1 << (GoParser.RAW_STRING_LIT - 57)) | (1 << (GoParser.INTERPRETED_STRING_LIT - 57)))) !== 0)) {
	            this.state = 595;
	            localctx.postStmt = this.simpleStmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeClause() {
	    let localctx = new RangeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, GoParser.RULE_rangeClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 604;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        if(la_===1) {
	            this.state = 598;
	            this.expressionList();
	            this.state = 599;
	            this.match(GoParser.ASSIGN);

	        } else if(la_===2) {
	            this.state = 601;
	            this.identifierList();
	            this.state = 602;
	            this.match(GoParser.DECLARE_ASSIGN);

	        }
	        this.state = 606;
	        this.match(GoParser.RANGE);
	        this.state = 607;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goStmt() {
	    let localctx = new GoStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, GoParser.RULE_goStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 609;
	        this.match(GoParser.GO);
	        this.state = 610;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, GoParser.RULE_type_);
	    try {
	        this.state = 618;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 612;
	            this.typeName();
	            break;
	        case GoParser.FUNC:
	        case GoParser.INTERFACE:
	        case GoParser.MAP:
	        case GoParser.STRUCT:
	        case GoParser.CHAN:
	        case GoParser.L_BRACKET:
	        case GoParser.STAR:
	        case GoParser.RECEIVE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 613;
	            this.typeLit();
	            break;
	        case GoParser.L_PAREN:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 614;
	            this.match(GoParser.L_PAREN);
	            this.state = 615;
	            this.type_();
	            this.state = 616;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, GoParser.RULE_typeName);
	    try {
	        this.state = 622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 620;
	            this.qualifiedIdent();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 621;
	            this.match(GoParser.IDENTIFIER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeLit() {
	    let localctx = new TypeLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, GoParser.RULE_typeLit);
	    try {
	        this.state = 632;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 624;
	            this.arrayType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 625;
	            this.structType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 626;
	            this.pointerType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 627;
	            this.functionType();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 628;
	            this.interfaceType();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 629;
	            this.sliceType();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 630;
	            this.mapType();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 631;
	            this.channelType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, GoParser.RULE_arrayType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this.match(GoParser.L_BRACKET);
	        this.state = 635;
	        this.arrayLength();
	        this.state = 636;
	        this.match(GoParser.R_BRACKET);
	        this.state = 637;
	        this.elementType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLength() {
	    let localctx = new ArrayLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, GoParser.RULE_arrayLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 639;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementType() {
	    let localctx = new ElementTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, GoParser.RULE_elementType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerType() {
	    let localctx = new PointerTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, GoParser.RULE_pointerType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this.match(GoParser.STAR);
	        this.state = 644;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceType() {
	    let localctx = new InterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, GoParser.RULE_interfaceType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 646;
	        this.match(GoParser.INTERFACE);
	        this.state = 647;
	        this.match(GoParser.L_CURLY);
	        this.state = 656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===GoParser.IDENTIFIER) {
	            this.state = 650;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 648;
	                this.methodSpec();
	                break;

	            case 2:
	                this.state = 649;
	                this.typeName();
	                break;

	            }
	            this.state = 652;
	            this.eos();
	            this.state = 658;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 659;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sliceType() {
	    let localctx = new SliceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, GoParser.RULE_sliceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661;
	        this.match(GoParser.L_BRACKET);
	        this.state = 662;
	        this.match(GoParser.R_BRACKET);
	        this.state = 663;
	        this.elementType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapType() {
	    let localctx = new MapTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, GoParser.RULE_mapType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this.match(GoParser.MAP);
	        this.state = 666;
	        this.match(GoParser.L_BRACKET);
	        this.state = 667;
	        this.type_();
	        this.state = 668;
	        this.match(GoParser.R_BRACKET);
	        this.state = 669;
	        this.elementType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	channelType() {
	    let localctx = new ChannelTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, GoParser.RULE_channelType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 676;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 671;
	            this.match(GoParser.CHAN);
	            break;

	        case 2:
	            this.state = 672;
	            this.match(GoParser.CHAN);
	            this.state = 673;
	            this.match(GoParser.RECEIVE);
	            break;

	        case 3:
	            this.state = 674;
	            this.match(GoParser.RECEIVE);
	            this.state = 675;
	            this.match(GoParser.CHAN);
	            break;

	        }
	        this.state = 678;
	        this.elementType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodSpec() {
	    let localctx = new MethodSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, GoParser.RULE_methodSpec);
	    try {
	        this.state = 686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 680;
	            this.match(GoParser.IDENTIFIER);
	            this.state = 681;
	            this.parameters();
	            this.state = 682;
	            this.result();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 684;
	            this.match(GoParser.IDENTIFIER);
	            this.state = 685;
	            this.parameters();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionType() {
	    let localctx = new FunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, GoParser.RULE_functionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(GoParser.FUNC);
	        this.state = 689;
	        this.signature();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signature() {
	    let localctx = new SignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, GoParser.RULE_signature);
	    try {
	        this.state = 695;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 691;
	            this.parameters();
	            this.state = 692;
	            this.result();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 694;
	            this.parameters();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result() {
	    let localctx = new ResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, GoParser.RULE_result);
	    try {
	        this.state = 699;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 697;
	            this.parameters();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 698;
	            this.type_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameters() {
	    let localctx = new ParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, GoParser.RULE_parameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 701;
	        this.match(GoParser.L_PAREN);
	        this.state = 713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GoParser.FUNC) | (1 << GoParser.INTERFACE) | (1 << GoParser.MAP) | (1 << GoParser.STRUCT) | (1 << GoParser.CHAN) | (1 << GoParser.IDENTIFIER) | (1 << GoParser.L_PAREN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GoParser.L_BRACKET - 32)) | (1 << (GoParser.ELLIPSIS - 32)) | (1 << (GoParser.STAR - 32)) | (1 << (GoParser.RECEIVE - 32)))) !== 0)) {
	            this.state = 702;
	            this.parameterDecl();
	            this.state = 707;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 703;
	                    this.match(GoParser.COMMA);
	                    this.state = 704;
	                    this.parameterDecl(); 
	                }
	                this.state = 709;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
	            }

	            this.state = 711;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===GoParser.COMMA) {
	                this.state = 710;
	                this.match(GoParser.COMMA);
	            }

	        }

	        this.state = 715;
	        this.match(GoParser.R_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDecl() {
	    let localctx = new ParameterDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, GoParser.RULE_parameterDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 718;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        if(la_===1) {
	            this.state = 717;
	            this.identifierList();

	        }
	        this.state = 721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GoParser.ELLIPSIS) {
	            this.state = 720;
	            this.match(GoParser.ELLIPSIS);
	        }

	        this.state = 723;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 140;
	    this.enterRecursionRule(localctx, 140, GoParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 726;
	            this.primaryExpr(0);
	            break;

	        case 2:
	            this.state = 727;
	            localctx.unary_op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GoParser.EXCLAMATION - 57)) | (1 << (GoParser.PLUS - 57)) | (1 << (GoParser.MINUS - 57)) | (1 << (GoParser.CARET - 57)) | (1 << (GoParser.STAR - 57)) | (1 << (GoParser.AMPERSAND - 57)) | (1 << (GoParser.RECEIVE - 57)))) !== 0))) {
	                localctx.unary_op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 728;
	            this.expression(6);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 748;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 746;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
	                    this.state = 731;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 732;
	                    localctx.mul_op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (GoParser.DIV - 52)) | (1 << (GoParser.MOD - 52)) | (1 << (GoParser.LSHIFT - 52)) | (1 << (GoParser.RSHIFT - 52)) | (1 << (GoParser.BIT_CLEAR - 52)) | (1 << (GoParser.STAR - 52)) | (1 << (GoParser.AMPERSAND - 52)))) !== 0))) {
	                        localctx.mul_op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 733;
	                    this.expression(6);
	                    break;

	                case 2:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
	                    this.state = 734;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 735;
	                    localctx.add_op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (GoParser.OR - 51)) | (1 << (GoParser.PLUS - 51)) | (1 << (GoParser.MINUS - 51)) | (1 << (GoParser.CARET - 51)))) !== 0))) {
	                        localctx.add_op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 736;
	                    this.expression(5);
	                    break;

	                case 3:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
	                    this.state = 737;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 738;
	                    localctx.rel_op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (GoParser.EQUALS - 45)) | (1 << (GoParser.NOT_EQUALS - 45)) | (1 << (GoParser.LESS - 45)) | (1 << (GoParser.LESS_OR_EQUALS - 45)) | (1 << (GoParser.GREATER - 45)) | (1 << (GoParser.GREATER_OR_EQUALS - 45)))) !== 0))) {
	                        localctx.rel_op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 739;
	                    this.expression(4);
	                    break;

	                case 4:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
	                    this.state = 740;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 741;
	                    this.match(GoParser.LOGICAL_AND);
	                    this.state = 742;
	                    this.expression(3);
	                    break;

	                case 5:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
	                    this.state = 743;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 744;
	                    this.match(GoParser.LOGICAL_OR);
	                    this.state = 745;
	                    this.expression(2);
	                    break;

	                } 
	            }
	            this.state = 750;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	primaryExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PrimaryExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 142;
	    this.enterRecursionRule(localctx, 142, GoParser.RULE_primaryExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 755;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 752;
	            this.operand();
	            break;

	        case 2:
	            this.state = 753;
	            this.conversion();
	            break;

	        case 3:
	            this.state = 754;
	            this.methodExpr();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 768;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PrimaryExprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_primaryExpr);
	                this.state = 757;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 764;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 758;
	                    this.match(GoParser.DOT);
	                    this.state = 759;
	                    this.match(GoParser.IDENTIFIER);
	                    break;

	                case 2:
	                    this.state = 760;
	                    this.index();
	                    break;

	                case 3:
	                    this.state = 761;
	                    this.slice_();
	                    break;

	                case 4:
	                    this.state = 762;
	                    this.typeAssertion();
	                    break;

	                case 5:
	                    this.state = 763;
	                    this.arguments();
	                    break;

	                } 
	            }
	            this.state = 770;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	conversion() {
	    let localctx = new ConversionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, GoParser.RULE_conversion);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 771;
	        this.nonNamedType();
	        this.state = 772;
	        this.match(GoParser.L_PAREN);
	        this.state = 773;
	        this.expression(0);
	        this.state = 775;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GoParser.COMMA) {
	            this.state = 774;
	            this.match(GoParser.COMMA);
	        }

	        this.state = 777;
	        this.match(GoParser.R_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonNamedType() {
	    let localctx = new NonNamedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, GoParser.RULE_nonNamedType);
	    try {
	        this.state = 784;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.FUNC:
	        case GoParser.INTERFACE:
	        case GoParser.MAP:
	        case GoParser.STRUCT:
	        case GoParser.CHAN:
	        case GoParser.L_BRACKET:
	        case GoParser.STAR:
	        case GoParser.RECEIVE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 779;
	            this.typeLit();
	            break;
	        case GoParser.L_PAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 780;
	            this.match(GoParser.L_PAREN);
	            this.state = 781;
	            this.nonNamedType();
	            this.state = 782;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operand() {
	    let localctx = new OperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, GoParser.RULE_operand);
	    try {
	        this.state = 792;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 786;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 787;
	            this.operandName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 788;
	            this.match(GoParser.L_PAREN);
	            this.state = 789;
	            this.expression(0);
	            this.state = 790;
	            this.match(GoParser.R_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, GoParser.RULE_literal);
	    try {
	        this.state = 797;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.NIL_LIT:
	        case GoParser.DECIMAL_LIT:
	        case GoParser.BINARY_LIT:
	        case GoParser.OCTAL_LIT:
	        case GoParser.HEX_LIT:
	        case GoParser.FLOAT_LIT:
	        case GoParser.IMAGINARY_LIT:
	        case GoParser.RUNE_LIT:
	        case GoParser.RAW_STRING_LIT:
	        case GoParser.INTERPRETED_STRING_LIT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 794;
	            this.basicLit();
	            break;
	        case GoParser.MAP:
	        case GoParser.STRUCT:
	        case GoParser.IDENTIFIER:
	        case GoParser.L_BRACKET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 795;
	            this.compositeLit();
	            break;
	        case GoParser.FUNC:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 796;
	            this.functionLit();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicLit() {
	    let localctx = new BasicLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, GoParser.RULE_basicLit);
	    try {
	        this.state = 803;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.NIL_LIT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 799;
	            this.match(GoParser.NIL_LIT);
	            break;
	        case GoParser.DECIMAL_LIT:
	        case GoParser.BINARY_LIT:
	        case GoParser.OCTAL_LIT:
	        case GoParser.HEX_LIT:
	        case GoParser.IMAGINARY_LIT:
	        case GoParser.RUNE_LIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 800;
	            this.integer();
	            break;
	        case GoParser.RAW_STRING_LIT:
	        case GoParser.INTERPRETED_STRING_LIT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 801;
	            this.string_();
	            break;
	        case GoParser.FLOAT_LIT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 802;
	            this.match(GoParser.FLOAT_LIT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer() {
	    let localctx = new IntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, GoParser.RULE_integer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 805;
	        _la = this._input.LA(1);
	        if(!(((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (GoParser.DECIMAL_LIT - 64)) | (1 << (GoParser.BINARY_LIT - 64)) | (1 << (GoParser.OCTAL_LIT - 64)) | (1 << (GoParser.HEX_LIT - 64)) | (1 << (GoParser.IMAGINARY_LIT - 64)) | (1 << (GoParser.RUNE_LIT - 64)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operandName() {
	    let localctx = new OperandNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, GoParser.RULE_operandName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this.match(GoParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedIdent() {
	    let localctx = new QualifiedIdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, GoParser.RULE_qualifiedIdent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 809;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 810;
	        this.match(GoParser.DOT);
	        this.state = 811;
	        this.match(GoParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeLit() {
	    let localctx = new CompositeLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, GoParser.RULE_compositeLit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 813;
	        this.literalType();
	        this.state = 814;
	        this.literalValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalType() {
	    let localctx = new LiteralTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, GoParser.RULE_literalType);
	    try {
	        this.state = 825;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 816;
	            this.structType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 817;
	            this.arrayType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 818;
	            this.match(GoParser.L_BRACKET);
	            this.state = 819;
	            this.match(GoParser.ELLIPSIS);
	            this.state = 820;
	            this.match(GoParser.R_BRACKET);
	            this.state = 821;
	            this.elementType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 822;
	            this.sliceType();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 823;
	            this.mapType();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 824;
	            this.typeName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalValue() {
	    let localctx = new LiteralValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, GoParser.RULE_literalValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 827;
	        this.match(GoParser.L_CURLY);
	        this.state = 832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (GoParser.FUNC - 3)) | (1 << (GoParser.INTERFACE - 3)) | (1 << (GoParser.MAP - 3)) | (1 << (GoParser.STRUCT - 3)) | (1 << (GoParser.CHAN - 3)) | (1 << (GoParser.NIL_LIT - 3)) | (1 << (GoParser.IDENTIFIER - 3)) | (1 << (GoParser.L_PAREN - 3)) | (1 << (GoParser.L_CURLY - 3)) | (1 << (GoParser.L_BRACKET - 3)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GoParser.EXCLAMATION - 57)) | (1 << (GoParser.PLUS - 57)) | (1 << (GoParser.MINUS - 57)) | (1 << (GoParser.CARET - 57)) | (1 << (GoParser.STAR - 57)) | (1 << (GoParser.AMPERSAND - 57)) | (1 << (GoParser.RECEIVE - 57)) | (1 << (GoParser.DECIMAL_LIT - 57)) | (1 << (GoParser.BINARY_LIT - 57)) | (1 << (GoParser.OCTAL_LIT - 57)) | (1 << (GoParser.HEX_LIT - 57)) | (1 << (GoParser.FLOAT_LIT - 57)) | (1 << (GoParser.IMAGINARY_LIT - 57)) | (1 << (GoParser.RUNE_LIT - 57)) | (1 << (GoParser.RAW_STRING_LIT - 57)) | (1 << (GoParser.INTERPRETED_STRING_LIT - 57)))) !== 0)) {
	            this.state = 828;
	            this.elementList();
	            this.state = 830;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===GoParser.COMMA) {
	                this.state = 829;
	                this.match(GoParser.COMMA);
	            }

	        }

	        this.state = 834;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementList() {
	    let localctx = new ElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, GoParser.RULE_elementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 836;
	        this.keyedElement();
	        this.state = 841;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 837;
	                this.match(GoParser.COMMA);
	                this.state = 838;
	                this.keyedElement(); 
	            }
	            this.state = 843;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyedElement() {
	    let localctx = new KeyedElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, GoParser.RULE_keyedElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 847;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        if(la_===1) {
	            this.state = 844;
	            this.key();
	            this.state = 845;
	            this.match(GoParser.COLON);

	        }
	        this.state = 849;
	        this.element();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key() {
	    let localctx = new KeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, GoParser.RULE_key);
	    try {
	        this.state = 853;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.FUNC:
	        case GoParser.INTERFACE:
	        case GoParser.MAP:
	        case GoParser.STRUCT:
	        case GoParser.CHAN:
	        case GoParser.NIL_LIT:
	        case GoParser.IDENTIFIER:
	        case GoParser.L_PAREN:
	        case GoParser.L_BRACKET:
	        case GoParser.EXCLAMATION:
	        case GoParser.PLUS:
	        case GoParser.MINUS:
	        case GoParser.CARET:
	        case GoParser.STAR:
	        case GoParser.AMPERSAND:
	        case GoParser.RECEIVE:
	        case GoParser.DECIMAL_LIT:
	        case GoParser.BINARY_LIT:
	        case GoParser.OCTAL_LIT:
	        case GoParser.HEX_LIT:
	        case GoParser.FLOAT_LIT:
	        case GoParser.IMAGINARY_LIT:
	        case GoParser.RUNE_LIT:
	        case GoParser.RAW_STRING_LIT:
	        case GoParser.INTERPRETED_STRING_LIT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 851;
	            this.expression(0);
	            break;
	        case GoParser.L_CURLY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 852;
	            this.literalValue();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element() {
	    let localctx = new ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, GoParser.RULE_element);
	    try {
	        this.state = 857;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GoParser.FUNC:
	        case GoParser.INTERFACE:
	        case GoParser.MAP:
	        case GoParser.STRUCT:
	        case GoParser.CHAN:
	        case GoParser.NIL_LIT:
	        case GoParser.IDENTIFIER:
	        case GoParser.L_PAREN:
	        case GoParser.L_BRACKET:
	        case GoParser.EXCLAMATION:
	        case GoParser.PLUS:
	        case GoParser.MINUS:
	        case GoParser.CARET:
	        case GoParser.STAR:
	        case GoParser.AMPERSAND:
	        case GoParser.RECEIVE:
	        case GoParser.DECIMAL_LIT:
	        case GoParser.BINARY_LIT:
	        case GoParser.OCTAL_LIT:
	        case GoParser.HEX_LIT:
	        case GoParser.FLOAT_LIT:
	        case GoParser.IMAGINARY_LIT:
	        case GoParser.RUNE_LIT:
	        case GoParser.RAW_STRING_LIT:
	        case GoParser.INTERPRETED_STRING_LIT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 855;
	            this.expression(0);
	            break;
	        case GoParser.L_CURLY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 856;
	            this.literalValue();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structType() {
	    let localctx = new StructTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, GoParser.RULE_structType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 859;
	        this.match(GoParser.STRUCT);
	        this.state = 860;
	        this.match(GoParser.L_CURLY);
	        this.state = 866;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===GoParser.IDENTIFIER || _la===GoParser.STAR) {
	            this.state = 861;
	            this.fieldDecl();
	            this.state = 862;
	            this.eos();
	            this.state = 868;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 869;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDecl() {
	    let localctx = new FieldDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, GoParser.RULE_fieldDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 875;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 871;
	            this.identifierList();
	            this.state = 872;
	            this.type_();
	            break;

	        case 2:
	            this.state = 874;
	            this.embeddedField();
	            break;

	        }
	        this.state = 878;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        if(la_===1) {
	            this.state = 877;
	            localctx.tag = this.string_();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_() {
	    let localctx = new String_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, GoParser.RULE_string_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 880;
	        _la = this._input.LA(1);
	        if(!(_la===GoParser.RAW_STRING_LIT || _la===GoParser.INTERPRETED_STRING_LIT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	embeddedField() {
	    let localctx = new EmbeddedFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, GoParser.RULE_embeddedField);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GoParser.STAR) {
	            this.state = 882;
	            this.match(GoParser.STAR);
	        }

	        this.state = 885;
	        this.typeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionLit() {
	    let localctx = new FunctionLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, GoParser.RULE_functionLit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 887;
	        this.match(GoParser.FUNC);
	        this.state = 888;
	        this.signature();
	        this.state = 889;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index() {
	    let localctx = new IndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, GoParser.RULE_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 891;
	        this.match(GoParser.L_BRACKET);
	        this.state = 892;
	        this.expression(0);
	        this.state = 893;
	        this.match(GoParser.R_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slice_() {
	    let localctx = new Slice_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, GoParser.RULE_slice_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 895;
	        this.match(GoParser.L_BRACKET);
	        this.state = 911;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (GoParser.FUNC - 3)) | (1 << (GoParser.INTERFACE - 3)) | (1 << (GoParser.MAP - 3)) | (1 << (GoParser.STRUCT - 3)) | (1 << (GoParser.CHAN - 3)) | (1 << (GoParser.NIL_LIT - 3)) | (1 << (GoParser.IDENTIFIER - 3)) | (1 << (GoParser.L_PAREN - 3)) | (1 << (GoParser.L_BRACKET - 3)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GoParser.EXCLAMATION - 57)) | (1 << (GoParser.PLUS - 57)) | (1 << (GoParser.MINUS - 57)) | (1 << (GoParser.CARET - 57)) | (1 << (GoParser.STAR - 57)) | (1 << (GoParser.AMPERSAND - 57)) | (1 << (GoParser.RECEIVE - 57)) | (1 << (GoParser.DECIMAL_LIT - 57)) | (1 << (GoParser.BINARY_LIT - 57)) | (1 << (GoParser.OCTAL_LIT - 57)) | (1 << (GoParser.HEX_LIT - 57)) | (1 << (GoParser.FLOAT_LIT - 57)) | (1 << (GoParser.IMAGINARY_LIT - 57)) | (1 << (GoParser.RUNE_LIT - 57)) | (1 << (GoParser.RAW_STRING_LIT - 57)) | (1 << (GoParser.INTERPRETED_STRING_LIT - 57)))) !== 0)) {
	                this.state = 896;
	                this.expression(0);
	            }

	            this.state = 899;
	            this.match(GoParser.COLON);
	            this.state = 901;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (GoParser.FUNC - 3)) | (1 << (GoParser.INTERFACE - 3)) | (1 << (GoParser.MAP - 3)) | (1 << (GoParser.STRUCT - 3)) | (1 << (GoParser.CHAN - 3)) | (1 << (GoParser.NIL_LIT - 3)) | (1 << (GoParser.IDENTIFIER - 3)) | (1 << (GoParser.L_PAREN - 3)) | (1 << (GoParser.L_BRACKET - 3)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GoParser.EXCLAMATION - 57)) | (1 << (GoParser.PLUS - 57)) | (1 << (GoParser.MINUS - 57)) | (1 << (GoParser.CARET - 57)) | (1 << (GoParser.STAR - 57)) | (1 << (GoParser.AMPERSAND - 57)) | (1 << (GoParser.RECEIVE - 57)) | (1 << (GoParser.DECIMAL_LIT - 57)) | (1 << (GoParser.BINARY_LIT - 57)) | (1 << (GoParser.OCTAL_LIT - 57)) | (1 << (GoParser.HEX_LIT - 57)) | (1 << (GoParser.FLOAT_LIT - 57)) | (1 << (GoParser.IMAGINARY_LIT - 57)) | (1 << (GoParser.RUNE_LIT - 57)) | (1 << (GoParser.RAW_STRING_LIT - 57)) | (1 << (GoParser.INTERPRETED_STRING_LIT - 57)))) !== 0)) {
	                this.state = 900;
	                this.expression(0);
	            }

	            break;

	        case 2:
	            this.state = 904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (GoParser.FUNC - 3)) | (1 << (GoParser.INTERFACE - 3)) | (1 << (GoParser.MAP - 3)) | (1 << (GoParser.STRUCT - 3)) | (1 << (GoParser.CHAN - 3)) | (1 << (GoParser.NIL_LIT - 3)) | (1 << (GoParser.IDENTIFIER - 3)) | (1 << (GoParser.L_PAREN - 3)) | (1 << (GoParser.L_BRACKET - 3)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GoParser.EXCLAMATION - 57)) | (1 << (GoParser.PLUS - 57)) | (1 << (GoParser.MINUS - 57)) | (1 << (GoParser.CARET - 57)) | (1 << (GoParser.STAR - 57)) | (1 << (GoParser.AMPERSAND - 57)) | (1 << (GoParser.RECEIVE - 57)) | (1 << (GoParser.DECIMAL_LIT - 57)) | (1 << (GoParser.BINARY_LIT - 57)) | (1 << (GoParser.OCTAL_LIT - 57)) | (1 << (GoParser.HEX_LIT - 57)) | (1 << (GoParser.FLOAT_LIT - 57)) | (1 << (GoParser.IMAGINARY_LIT - 57)) | (1 << (GoParser.RUNE_LIT - 57)) | (1 << (GoParser.RAW_STRING_LIT - 57)) | (1 << (GoParser.INTERPRETED_STRING_LIT - 57)))) !== 0)) {
	                this.state = 903;
	                this.expression(0);
	            }

	            this.state = 906;
	            this.match(GoParser.COLON);
	            this.state = 907;
	            this.expression(0);
	            this.state = 908;
	            this.match(GoParser.COLON);
	            this.state = 909;
	            this.expression(0);
	            break;

	        }
	        this.state = 913;
	        this.match(GoParser.R_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAssertion() {
	    let localctx = new TypeAssertionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, GoParser.RULE_typeAssertion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 915;
	        this.match(GoParser.DOT);
	        this.state = 916;
	        this.match(GoParser.L_PAREN);
	        this.state = 917;
	        this.type_();
	        this.state = 918;
	        this.match(GoParser.R_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, GoParser.RULE_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 920;
	        this.match(GoParser.L_PAREN);
	        this.state = 935;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (GoParser.FUNC - 3)) | (1 << (GoParser.INTERFACE - 3)) | (1 << (GoParser.MAP - 3)) | (1 << (GoParser.STRUCT - 3)) | (1 << (GoParser.CHAN - 3)) | (1 << (GoParser.NIL_LIT - 3)) | (1 << (GoParser.IDENTIFIER - 3)) | (1 << (GoParser.L_PAREN - 3)) | (1 << (GoParser.L_BRACKET - 3)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GoParser.EXCLAMATION - 57)) | (1 << (GoParser.PLUS - 57)) | (1 << (GoParser.MINUS - 57)) | (1 << (GoParser.CARET - 57)) | (1 << (GoParser.STAR - 57)) | (1 << (GoParser.AMPERSAND - 57)) | (1 << (GoParser.RECEIVE - 57)) | (1 << (GoParser.DECIMAL_LIT - 57)) | (1 << (GoParser.BINARY_LIT - 57)) | (1 << (GoParser.OCTAL_LIT - 57)) | (1 << (GoParser.HEX_LIT - 57)) | (1 << (GoParser.FLOAT_LIT - 57)) | (1 << (GoParser.IMAGINARY_LIT - 57)) | (1 << (GoParser.RUNE_LIT - 57)) | (1 << (GoParser.RAW_STRING_LIT - 57)) | (1 << (GoParser.INTERPRETED_STRING_LIT - 57)))) !== 0)) {
	            this.state = 927;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 921;
	                this.expressionList();
	                break;

	            case 2:
	                this.state = 922;
	                this.nonNamedType();
	                this.state = 925;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	                if(la_===1) {
	                    this.state = 923;
	                    this.match(GoParser.COMMA);
	                    this.state = 924;
	                    this.expressionList();

	                }
	                break;

	            }
	            this.state = 930;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===GoParser.ELLIPSIS) {
	                this.state = 929;
	                this.match(GoParser.ELLIPSIS);
	            }

	            this.state = 933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===GoParser.COMMA) {
	                this.state = 932;
	                this.match(GoParser.COMMA);
	            }

	        }

	        this.state = 937;
	        this.match(GoParser.R_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodExpr() {
	    let localctx = new MethodExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, GoParser.RULE_methodExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 939;
	        this.nonNamedType();
	        this.state = 940;
	        this.match(GoParser.DOT);
	        this.state = 941;
	        this.match(GoParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiverType() {
	    let localctx = new ReceiverTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, GoParser.RULE_receiverType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 943;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, GoParser.RULE_eos);
	    try {
	        this.state = 949;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 945;
	            this.match(GoParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 946;
	            this.match(GoParser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 947;
	            this.match(GoParser.EOS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 948;
	            if (!( this.closingBracket())) {
	                throw new antlr4.error.FailedPredicateException(this, "closingBracket()");
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

GoParser.EOF = antlr4.Token.EOF;
GoParser.BREAK = 1;
GoParser.DEFAULT = 2;
GoParser.FUNC = 3;
GoParser.INTERFACE = 4;
GoParser.SELECT = 5;
GoParser.CASE = 6;
GoParser.DEFER = 7;
GoParser.GO = 8;
GoParser.MAP = 9;
GoParser.STRUCT = 10;
GoParser.CHAN = 11;
GoParser.ELSE = 12;
GoParser.GOTO = 13;
GoParser.PACKAGE = 14;
GoParser.SWITCH = 15;
GoParser.CONST = 16;
GoParser.FALLTHROUGH = 17;
GoParser.IF = 18;
GoParser.RANGE = 19;
GoParser.TYPE = 20;
GoParser.CONTINUE = 21;
GoParser.FOR = 22;
GoParser.IMPORT = 23;
GoParser.RETURN = 24;
GoParser.VAR = 25;
GoParser.NIL_LIT = 26;
GoParser.IDENTIFIER = 27;
GoParser.L_PAREN = 28;
GoParser.R_PAREN = 29;
GoParser.L_CURLY = 30;
GoParser.R_CURLY = 31;
GoParser.L_BRACKET = 32;
GoParser.R_BRACKET = 33;
GoParser.ASSIGN = 34;
GoParser.COMMA = 35;
GoParser.SEMI = 36;
GoParser.COLON = 37;
GoParser.DOT = 38;
GoParser.PLUS_PLUS = 39;
GoParser.MINUS_MINUS = 40;
GoParser.DECLARE_ASSIGN = 41;
GoParser.ELLIPSIS = 42;
GoParser.LOGICAL_OR = 43;
GoParser.LOGICAL_AND = 44;
GoParser.EQUALS = 45;
GoParser.NOT_EQUALS = 46;
GoParser.LESS = 47;
GoParser.LESS_OR_EQUALS = 48;
GoParser.GREATER = 49;
GoParser.GREATER_OR_EQUALS = 50;
GoParser.OR = 51;
GoParser.DIV = 52;
GoParser.MOD = 53;
GoParser.LSHIFT = 54;
GoParser.RSHIFT = 55;
GoParser.BIT_CLEAR = 56;
GoParser.EXCLAMATION = 57;
GoParser.PLUS = 58;
GoParser.MINUS = 59;
GoParser.CARET = 60;
GoParser.STAR = 61;
GoParser.AMPERSAND = 62;
GoParser.RECEIVE = 63;
GoParser.DECIMAL_LIT = 64;
GoParser.BINARY_LIT = 65;
GoParser.OCTAL_LIT = 66;
GoParser.HEX_LIT = 67;
GoParser.FLOAT_LIT = 68;
GoParser.DECIMAL_FLOAT_LIT = 69;
GoParser.HEX_FLOAT_LIT = 70;
GoParser.IMAGINARY_LIT = 71;
GoParser.RUNE_LIT = 72;
GoParser.BYTE_VALUE = 73;
GoParser.OCTAL_BYTE_VALUE = 74;
GoParser.HEX_BYTE_VALUE = 75;
GoParser.LITTLE_U_VALUE = 76;
GoParser.BIG_U_VALUE = 77;
GoParser.RAW_STRING_LIT = 78;
GoParser.INTERPRETED_STRING_LIT = 79;
GoParser.WS = 80;
GoParser.COMMENT = 81;
GoParser.TERMINATOR = 82;
GoParser.LINE_COMMENT = 83;
GoParser.WS_NLSEMI = 84;
GoParser.COMMENT_NLSEMI = 85;
GoParser.LINE_COMMENT_NLSEMI = 86;
GoParser.EOS = 87;
GoParser.OTHER = 88;

GoParser.RULE_sourceFile = 0;
GoParser.RULE_packageClause = 1;
GoParser.RULE_importDecl = 2;
GoParser.RULE_importSpec = 3;
GoParser.RULE_importPath = 4;
GoParser.RULE_declaration = 5;
GoParser.RULE_constDecl = 6;
GoParser.RULE_constSpec = 7;
GoParser.RULE_identifierList = 8;
GoParser.RULE_expressionList = 9;
GoParser.RULE_typeDecl = 10;
GoParser.RULE_typeSpec = 11;
GoParser.RULE_functionDecl = 12;
GoParser.RULE_methodDecl = 13;
GoParser.RULE_receiver = 14;
GoParser.RULE_varDecl = 15;
GoParser.RULE_varSpec = 16;
GoParser.RULE_block = 17;
GoParser.RULE_statementList = 18;
GoParser.RULE_statement = 19;
GoParser.RULE_simpleStmt = 20;
GoParser.RULE_expressionStmt = 21;
GoParser.RULE_sendStmt = 22;
GoParser.RULE_incDecStmt = 23;
GoParser.RULE_assignment = 24;
GoParser.RULE_assign_op = 25;
GoParser.RULE_shortVarDecl = 26;
GoParser.RULE_emptyStmt = 27;
GoParser.RULE_labeledStmt = 28;
GoParser.RULE_returnStmt = 29;
GoParser.RULE_breakStmt = 30;
GoParser.RULE_continueStmt = 31;
GoParser.RULE_gotoStmt = 32;
GoParser.RULE_fallthroughStmt = 33;
GoParser.RULE_deferStmt = 34;
GoParser.RULE_ifStmt = 35;
GoParser.RULE_switchStmt = 36;
GoParser.RULE_exprSwitchStmt = 37;
GoParser.RULE_exprCaseClause = 38;
GoParser.RULE_exprSwitchCase = 39;
GoParser.RULE_typeSwitchStmt = 40;
GoParser.RULE_typeSwitchGuard = 41;
GoParser.RULE_typeCaseClause = 42;
GoParser.RULE_typeSwitchCase = 43;
GoParser.RULE_typeList = 44;
GoParser.RULE_selectStmt = 45;
GoParser.RULE_commClause = 46;
GoParser.RULE_commCase = 47;
GoParser.RULE_recvStmt = 48;
GoParser.RULE_forStmt = 49;
GoParser.RULE_forClause = 50;
GoParser.RULE_rangeClause = 51;
GoParser.RULE_goStmt = 52;
GoParser.RULE_type_ = 53;
GoParser.RULE_typeName = 54;
GoParser.RULE_typeLit = 55;
GoParser.RULE_arrayType = 56;
GoParser.RULE_arrayLength = 57;
GoParser.RULE_elementType = 58;
GoParser.RULE_pointerType = 59;
GoParser.RULE_interfaceType = 60;
GoParser.RULE_sliceType = 61;
GoParser.RULE_mapType = 62;
GoParser.RULE_channelType = 63;
GoParser.RULE_methodSpec = 64;
GoParser.RULE_functionType = 65;
GoParser.RULE_signature = 66;
GoParser.RULE_result = 67;
GoParser.RULE_parameters = 68;
GoParser.RULE_parameterDecl = 69;
GoParser.RULE_expression = 70;
GoParser.RULE_primaryExpr = 71;
GoParser.RULE_conversion = 72;
GoParser.RULE_nonNamedType = 73;
GoParser.RULE_operand = 74;
GoParser.RULE_literal = 75;
GoParser.RULE_basicLit = 76;
GoParser.RULE_integer = 77;
GoParser.RULE_operandName = 78;
GoParser.RULE_qualifiedIdent = 79;
GoParser.RULE_compositeLit = 80;
GoParser.RULE_literalType = 81;
GoParser.RULE_literalValue = 82;
GoParser.RULE_elementList = 83;
GoParser.RULE_keyedElement = 84;
GoParser.RULE_key = 85;
GoParser.RULE_element = 86;
GoParser.RULE_structType = 87;
GoParser.RULE_fieldDecl = 88;
GoParser.RULE_string_ = 89;
GoParser.RULE_embeddedField = 90;
GoParser.RULE_functionLit = 91;
GoParser.RULE_index = 92;
GoParser.RULE_slice_ = 93;
GoParser.RULE_typeAssertion = 94;
GoParser.RULE_arguments = 95;
GoParser.RULE_methodExpr = 96;
GoParser.RULE_receiverType = 97;
GoParser.RULE_eos = 98;

class SourceFileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_sourceFile;
    }

	packageClause() {
	    return this.getTypedRuleContext(PackageClauseContext,0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	EOF() {
	    return this.getToken(GoParser.EOF, 0);
	};

	importDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclContext,i);
	    }
	};

	functionDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDeclContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDeclContext,i);
	    }
	};

	methodDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodDeclContext);
	    } else {
	        return this.getTypedRuleContext(MethodDeclContext,i);
	    }
	};

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSourceFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSourceFile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSourceFile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_packageClause;
        this.packageName = null; // Token
    }

	PACKAGE() {
	    return this.getToken(GoParser.PACKAGE, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterPackageClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitPackageClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitPackageClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_importDecl;
    }

	IMPORT() {
	    return this.getToken(GoParser.IMPORT, 0);
	};

	importSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportSpecContext);
	    } else {
	        return this.getTypedRuleContext(ImportSpecContext,i);
	    }
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterImportDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitImportDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitImportDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_importSpec;
        this.alias = null; // Token
    }

	importPath() {
	    return this.getTypedRuleContext(ImportPathContext,0);
	};

	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterImportSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitImportSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitImportSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_importPath;
    }

	string_() {
	    return this.getTypedRuleContext(String_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterImportPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitImportPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitImportPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_declaration;
    }

	constDecl() {
	    return this.getTypedRuleContext(ConstDeclContext,0);
	};

	typeDecl() {
	    return this.getTypedRuleContext(TypeDeclContext,0);
	};

	varDecl() {
	    return this.getTypedRuleContext(VarDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_constDecl;
    }

	CONST() {
	    return this.getToken(GoParser.CONST, 0);
	};

	constSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstSpecContext);
	    } else {
	        return this.getTypedRuleContext(ConstSpecContext,i);
	    }
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterConstDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitConstDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitConstDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_constSpec;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterConstSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitConstSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitConstSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_identifierList;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.IDENTIFIER);
	    } else {
	        return this.getToken(GoParser.IDENTIFIER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitIdentifierList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeDecl;
    }

	TYPE() {
	    return this.getToken(GoParser.TYPE, 0);
	};

	typeSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeSpecContext);
	    } else {
	        return this.getTypedRuleContext(TypeSpecContext,i);
	    }
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeSpec;
    }

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_functionDecl;
    }

	FUNC() {
	    return this.getToken(GoParser.FUNC, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitFunctionDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitFunctionDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_methodDecl;
    }

	FUNC() {
	    return this.getToken(GoParser.FUNC, 0);
	};

	receiver() {
	    return this.getTypedRuleContext(ReceiverContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterMethodDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitMethodDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitMethodDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReceiverContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_receiver;
    }

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterReceiver(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitReceiver(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitReceiver(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_varDecl;
    }

	VAR() {
	    return this.getToken(GoParser.VAR, 0);
	};

	varSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarSpecContext);
	    } else {
	        return this.getTypedRuleContext(VarSpecContext,i);
	    }
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterVarDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitVarDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitVarDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_varSpec;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterVarSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitVarSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitVarSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_block;
    }

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitStatementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitStatementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_statement;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	labeledStmt() {
	    return this.getTypedRuleContext(LabeledStmtContext,0);
	};

	simpleStmt() {
	    return this.getTypedRuleContext(SimpleStmtContext,0);
	};

	goStmt() {
	    return this.getTypedRuleContext(GoStmtContext,0);
	};

	returnStmt() {
	    return this.getTypedRuleContext(ReturnStmtContext,0);
	};

	breakStmt() {
	    return this.getTypedRuleContext(BreakStmtContext,0);
	};

	continueStmt() {
	    return this.getTypedRuleContext(ContinueStmtContext,0);
	};

	gotoStmt() {
	    return this.getTypedRuleContext(GotoStmtContext,0);
	};

	fallthroughStmt() {
	    return this.getTypedRuleContext(FallthroughStmtContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ifStmt() {
	    return this.getTypedRuleContext(IfStmtContext,0);
	};

	switchStmt() {
	    return this.getTypedRuleContext(SwitchStmtContext,0);
	};

	selectStmt() {
	    return this.getTypedRuleContext(SelectStmtContext,0);
	};

	forStmt() {
	    return this.getTypedRuleContext(ForStmtContext,0);
	};

	deferStmt() {
	    return this.getTypedRuleContext(DeferStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_simpleStmt;
    }

	sendStmt() {
	    return this.getTypedRuleContext(SendStmtContext,0);
	};

	incDecStmt() {
	    return this.getTypedRuleContext(IncDecStmtContext,0);
	};

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	expressionStmt() {
	    return this.getTypedRuleContext(ExpressionStmtContext,0);
	};

	shortVarDecl() {
	    return this.getTypedRuleContext(ShortVarDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSimpleStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSimpleStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSimpleStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_expressionStmt;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExpressionStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExpressionStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExpressionStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SendStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_sendStmt;
        this.channel = null; // ExpressionContext
    }

	RECEIVE() {
	    return this.getToken(GoParser.RECEIVE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSendStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSendStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSendStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IncDecStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_incDecStmt;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	PLUS_PLUS() {
	    return this.getToken(GoParser.PLUS_PLUS, 0);
	};

	MINUS_MINUS() {
	    return this.getToken(GoParser.MINUS_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterIncDecStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitIncDecStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitIncDecStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_assignment;
    }

	expressionList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionListContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionListContext,i);
	    }
	};

	assign_op() {
	    return this.getTypedRuleContext(Assign_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_assign_op;
    }

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	PLUS() {
	    return this.getToken(GoParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(GoParser.MINUS, 0);
	};

	OR() {
	    return this.getToken(GoParser.OR, 0);
	};

	CARET() {
	    return this.getToken(GoParser.CARET, 0);
	};

	STAR() {
	    return this.getToken(GoParser.STAR, 0);
	};

	DIV() {
	    return this.getToken(GoParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(GoParser.MOD, 0);
	};

	LSHIFT() {
	    return this.getToken(GoParser.LSHIFT, 0);
	};

	RSHIFT() {
	    return this.getToken(GoParser.RSHIFT, 0);
	};

	AMPERSAND() {
	    return this.getToken(GoParser.AMPERSAND, 0);
	};

	BIT_CLEAR() {
	    return this.getToken(GoParser.BIT_CLEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterAssign_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitAssign_op(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitAssign_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShortVarDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_shortVarDecl;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	DECLARE_ASSIGN() {
	    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterShortVarDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitShortVarDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitShortVarDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_emptyStmt;
    }

	EOS() {
	    return this.getToken(GoParser.EOS, 0);
	};

	SEMI() {
	    return this.getToken(GoParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterEmptyStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitEmptyStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitEmptyStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_labeledStmt;
    }

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	COLON() {
	    return this.getToken(GoParser.COLON, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterLabeledStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitLabeledStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitLabeledStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_returnStmt;
    }

	RETURN() {
	    return this.getToken(GoParser.RETURN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterReturnStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitReturnStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitReturnStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_breakStmt;
    }

	BREAK() {
	    return this.getToken(GoParser.BREAK, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterBreakStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitBreakStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitBreakStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_continueStmt;
    }

	CONTINUE() {
	    return this.getToken(GoParser.CONTINUE, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterContinueStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitContinueStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitContinueStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GotoStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_gotoStmt;
    }

	GOTO() {
	    return this.getToken(GoParser.GOTO, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterGotoStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitGotoStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitGotoStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FallthroughStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_fallthroughStmt;
    }

	FALLTHROUGH() {
	    return this.getToken(GoParser.FALLTHROUGH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterFallthroughStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitFallthroughStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitFallthroughStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeferStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_deferStmt;
    }

	DEFER() {
	    return this.getToken(GoParser.DEFER, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterDeferStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitDeferStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitDeferStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_ifStmt;
    }

	IF() {
	    return this.getToken(GoParser.IF, 0);
	};

	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	simpleStmt() {
	    return this.getTypedRuleContext(SimpleStmtContext,0);
	};

	ELSE() {
	    return this.getToken(GoParser.ELSE, 0);
	};

	ifStmt() {
	    return this.getTypedRuleContext(IfStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterIfStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitIfStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitIfStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_switchStmt;
    }

	exprSwitchStmt() {
	    return this.getTypedRuleContext(ExprSwitchStmtContext,0);
	};

	typeSwitchStmt() {
	    return this.getTypedRuleContext(TypeSwitchStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSwitchStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSwitchStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSwitchStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprSwitchStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_exprSwitchStmt;
    }

	SWITCH() {
	    return this.getToken(GoParser.SWITCH, 0);
	};

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	exprCaseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprCaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(ExprCaseClauseContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	simpleStmt() {
	    return this.getTypedRuleContext(SimpleStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExprSwitchStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExprSwitchStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExprSwitchStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprCaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_exprCaseClause;
    }

	exprSwitchCase() {
	    return this.getTypedRuleContext(ExprSwitchCaseContext,0);
	};

	COLON() {
	    return this.getToken(GoParser.COLON, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExprCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExprCaseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExprCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprSwitchCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_exprSwitchCase;
    }

	CASE() {
	    return this.getToken(GoParser.CASE, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	DEFAULT() {
	    return this.getToken(GoParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExprSwitchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExprSwitchCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExprSwitchCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSwitchStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeSwitchStmt;
    }

	SWITCH() {
	    return this.getToken(GoParser.SWITCH, 0);
	};

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	typeSwitchGuard() {
	    return this.getTypedRuleContext(TypeSwitchGuardContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	simpleStmt() {
	    return this.getTypedRuleContext(SimpleStmtContext,0);
	};

	typeCaseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeCaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(TypeCaseClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeSwitchStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeSwitchStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeSwitchStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSwitchGuardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeSwitchGuard;
    }

	primaryExpr() {
	    return this.getTypedRuleContext(PrimaryExprContext,0);
	};

	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	TYPE() {
	    return this.getToken(GoParser.TYPE, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	DECLARE_ASSIGN() {
	    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeSwitchGuard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeSwitchGuard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeSwitchGuard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeCaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeCaseClause;
    }

	typeSwitchCase() {
	    return this.getTypedRuleContext(TypeSwitchCaseContext,0);
	};

	COLON() {
	    return this.getToken(GoParser.COLON, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeCaseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSwitchCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeSwitchCase;
    }

	CASE() {
	    return this.getToken(GoParser.CASE, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	DEFAULT() {
	    return this.getToken(GoParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeSwitchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeSwitchCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeSwitchCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeList;
    }

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	NIL_LIT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.NIL_LIT);
	    } else {
	        return this.getToken(GoParser.NIL_LIT, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_selectStmt;
    }

	SELECT() {
	    return this.getToken(GoParser.SELECT, 0);
	};

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	commClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommClauseContext);
	    } else {
	        return this.getTypedRuleContext(CommClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSelectStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSelectStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSelectStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_commClause;
    }

	commCase() {
	    return this.getTypedRuleContext(CommCaseContext,0);
	};

	COLON() {
	    return this.getToken(GoParser.COLON, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterCommClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitCommClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitCommClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_commCase;
    }

	CASE() {
	    return this.getToken(GoParser.CASE, 0);
	};

	sendStmt() {
	    return this.getTypedRuleContext(SendStmtContext,0);
	};

	recvStmt() {
	    return this.getTypedRuleContext(RecvStmtContext,0);
	};

	DEFAULT() {
	    return this.getToken(GoParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterCommCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitCommCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitCommCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecvStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_recvStmt;
        this.recvExpr = null; // ExpressionContext
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	DECLARE_ASSIGN() {
	    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterRecvStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitRecvStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitRecvStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_forStmt;
    }

	FOR() {
	    return this.getToken(GoParser.FOR, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forClause() {
	    return this.getTypedRuleContext(ForClauseContext,0);
	};

	rangeClause() {
	    return this.getTypedRuleContext(RangeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterForStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitForStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitForStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_forClause;
        this.initStmt = null; // SimpleStmtContext
        this.postStmt = null; // SimpleStmtContext
    }

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	simpleStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleStmtContext);
	    } else {
	        return this.getTypedRuleContext(SimpleStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterForClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitForClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitForClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_rangeClause;
    }

	RANGE() {
	    return this.getToken(GoParser.RANGE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	DECLARE_ASSIGN() {
	    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterRangeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitRangeClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitRangeClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GoStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_goStmt;
    }

	GO() {
	    return this.getToken(GoParser.GO, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterGoStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitGoStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitGoStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_type_;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	typeLit() {
	    return this.getTypedRuleContext(TypeLitContext,0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitType_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitType_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeName;
    }

	qualifiedIdent() {
	    return this.getTypedRuleContext(QualifiedIdentContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeLit;
    }

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	structType() {
	    return this.getTypedRuleContext(StructTypeContext,0);
	};

	pointerType() {
	    return this.getTypedRuleContext(PointerTypeContext,0);
	};

	functionType() {
	    return this.getTypedRuleContext(FunctionTypeContext,0);
	};

	interfaceType() {
	    return this.getTypedRuleContext(InterfaceTypeContext,0);
	};

	sliceType() {
	    return this.getTypedRuleContext(SliceTypeContext,0);
	};

	mapType() {
	    return this.getTypedRuleContext(MapTypeContext,0);
	};

	channelType() {
	    return this.getTypedRuleContext(ChannelTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_arrayType;
    }

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	arrayLength() {
	    return this.getTypedRuleContext(ArrayLengthContext,0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitArrayType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitArrayType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_arrayLength;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterArrayLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitArrayLength(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitArrayLength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_elementType;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterElementType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitElementType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitElementType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PointerTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_pointerType;
    }

	STAR() {
	    return this.getToken(GoParser.STAR, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterPointerType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitPointerType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitPointerType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_interfaceType;
    }

	INTERFACE() {
	    return this.getToken(GoParser.INTERFACE, 0);
	};

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	methodSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodSpecContext);
	    } else {
	        return this.getTypedRuleContext(MethodSpecContext,i);
	    }
	};

	typeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNameContext);
	    } else {
	        return this.getTypedRuleContext(TypeNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SliceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_sliceType;
    }

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSliceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSliceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSliceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MapTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_mapType;
    }

	MAP() {
	    return this.getToken(GoParser.MAP, 0);
	};

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterMapType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitMapType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitMapType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChannelTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_channelType;
    }

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	CHAN() {
	    return this.getToken(GoParser.CHAN, 0);
	};

	RECEIVE() {
	    return this.getToken(GoParser.RECEIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterChannelType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitChannelType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitChannelType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_methodSpec;
    }

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterMethodSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitMethodSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitMethodSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_functionType;
    }

	FUNC() {
	    return this.getToken(GoParser.FUNC, 0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitFunctionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitFunctionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_signature;
    }

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSignature(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSignature(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_result;
    }

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitResult(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitResult(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_parameters;
    }

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	parameterDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDeclContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDeclContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_parameterDecl;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(GoParser.ELLIPSIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterParameterDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitParameterDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitParameterDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_expression;
        this.unary_op = null; // Token
        this.mul_op = null; // Token
        this.add_op = null; // Token
        this.rel_op = null; // Token
    }

	primaryExpr() {
	    return this.getTypedRuleContext(PrimaryExprContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(GoParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(GoParser.MINUS, 0);
	};

	EXCLAMATION() {
	    return this.getToken(GoParser.EXCLAMATION, 0);
	};

	CARET() {
	    return this.getToken(GoParser.CARET, 0);
	};

	STAR() {
	    return this.getToken(GoParser.STAR, 0);
	};

	AMPERSAND() {
	    return this.getToken(GoParser.AMPERSAND, 0);
	};

	RECEIVE() {
	    return this.getToken(GoParser.RECEIVE, 0);
	};

	DIV() {
	    return this.getToken(GoParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(GoParser.MOD, 0);
	};

	LSHIFT() {
	    return this.getToken(GoParser.LSHIFT, 0);
	};

	RSHIFT() {
	    return this.getToken(GoParser.RSHIFT, 0);
	};

	BIT_CLEAR() {
	    return this.getToken(GoParser.BIT_CLEAR, 0);
	};

	OR() {
	    return this.getToken(GoParser.OR, 0);
	};

	EQUALS() {
	    return this.getToken(GoParser.EQUALS, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(GoParser.NOT_EQUALS, 0);
	};

	LESS() {
	    return this.getToken(GoParser.LESS, 0);
	};

	LESS_OR_EQUALS() {
	    return this.getToken(GoParser.LESS_OR_EQUALS, 0);
	};

	GREATER() {
	    return this.getToken(GoParser.GREATER, 0);
	};

	GREATER_OR_EQUALS() {
	    return this.getToken(GoParser.GREATER_OR_EQUALS, 0);
	};

	LOGICAL_AND() {
	    return this.getToken(GoParser.LOGICAL_AND, 0);
	};

	LOGICAL_OR() {
	    return this.getToken(GoParser.LOGICAL_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_primaryExpr;
    }

	operand() {
	    return this.getTypedRuleContext(OperandContext,0);
	};

	conversion() {
	    return this.getTypedRuleContext(ConversionContext,0);
	};

	methodExpr() {
	    return this.getTypedRuleContext(MethodExprContext,0);
	};

	primaryExpr() {
	    return this.getTypedRuleContext(PrimaryExprContext,0);
	};

	index() {
	    return this.getTypedRuleContext(IndexContext,0);
	};

	slice_() {
	    return this.getTypedRuleContext(Slice_Context,0);
	};

	typeAssertion() {
	    return this.getTypedRuleContext(TypeAssertionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterPrimaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitPrimaryExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitPrimaryExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConversionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_conversion;
    }

	nonNamedType() {
	    return this.getTypedRuleContext(NonNamedTypeContext,0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GoParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterConversion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitConversion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitConversion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonNamedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_nonNamedType;
    }

	typeLit() {
	    return this.getTypedRuleContext(TypeLitContext,0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	nonNamedType() {
	    return this.getTypedRuleContext(NonNamedTypeContext,0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterNonNamedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitNonNamedType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitNonNamedType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_operand;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	operandName() {
	    return this.getTypedRuleContext(OperandNameContext,0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_literal;
    }

	basicLit() {
	    return this.getTypedRuleContext(BasicLitContext,0);
	};

	compositeLit() {
	    return this.getTypedRuleContext(CompositeLitContext,0);
	};

	functionLit() {
	    return this.getTypedRuleContext(FunctionLitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BasicLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_basicLit;
    }

	NIL_LIT() {
	    return this.getToken(GoParser.NIL_LIT, 0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	string_() {
	    return this.getTypedRuleContext(String_Context,0);
	};

	FLOAT_LIT() {
	    return this.getToken(GoParser.FLOAT_LIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterBasicLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitBasicLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitBasicLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_integer;
    }

	DECIMAL_LIT() {
	    return this.getToken(GoParser.DECIMAL_LIT, 0);
	};

	BINARY_LIT() {
	    return this.getToken(GoParser.BINARY_LIT, 0);
	};

	OCTAL_LIT() {
	    return this.getToken(GoParser.OCTAL_LIT, 0);
	};

	HEX_LIT() {
	    return this.getToken(GoParser.HEX_LIT, 0);
	};

	IMAGINARY_LIT() {
	    return this.getToken(GoParser.IMAGINARY_LIT, 0);
	};

	RUNE_LIT() {
	    return this.getToken(GoParser.RUNE_LIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitInteger(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitInteger(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OperandNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_operandName;
    }

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterOperandName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitOperandName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitOperandName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedIdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_qualifiedIdent;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.IDENTIFIER);
	    } else {
	        return this.getToken(GoParser.IDENTIFIER, i);
	    }
	};


	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterQualifiedIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitQualifiedIdent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitQualifiedIdent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompositeLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_compositeLit;
    }

	literalType() {
	    return this.getTypedRuleContext(LiteralTypeContext,0);
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterCompositeLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitCompositeLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitCompositeLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_literalType;
    }

	structType() {
	    return this.getTypedRuleContext(StructTypeContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	ELLIPSIS() {
	    return this.getToken(GoParser.ELLIPSIS, 0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	sliceType() {
	    return this.getTypedRuleContext(SliceTypeContext,0);
	};

	mapType() {
	    return this.getTypedRuleContext(MapTypeContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterLiteralType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitLiteralType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitLiteralType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_literalValue;
    }

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	elementList() {
	    return this.getTypedRuleContext(ElementListContext,0);
	};

	COMMA() {
	    return this.getToken(GoParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterLiteralValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitLiteralValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitLiteralValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_elementList;
    }

	keyedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyedElementContext);
	    } else {
	        return this.getTypedRuleContext(KeyedElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitElementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyedElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_keyedElement;
    }

	element() {
	    return this.getTypedRuleContext(ElementContext,0);
	};

	key() {
	    return this.getTypedRuleContext(KeyContext,0);
	};

	COLON() {
	    return this.getToken(GoParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterKeyedElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitKeyedElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitKeyedElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_key;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_element;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_structType;
    }

	STRUCT() {
	    return this.getToken(GoParser.STRUCT, 0);
	};

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	fieldDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldDeclContext);
	    } else {
	        return this.getTypedRuleContext(FieldDeclContext,i);
	    }
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterStructType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitStructType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitStructType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_fieldDecl;
        this.tag = null; // String_Context
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	embeddedField() {
	    return this.getTypedRuleContext(EmbeddedFieldContext,0);
	};

	string_() {
	    return this.getTypedRuleContext(String_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterFieldDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitFieldDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitFieldDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class String_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_string_;
    }

	RAW_STRING_LIT() {
	    return this.getToken(GoParser.RAW_STRING_LIT, 0);
	};

	INTERPRETED_STRING_LIT() {
	    return this.getToken(GoParser.INTERPRETED_STRING_LIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterString_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitString_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitString_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmbeddedFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_embeddedField;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	STAR() {
	    return this.getToken(GoParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterEmbeddedField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitEmbeddedField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitEmbeddedField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_functionLit;
    }

	FUNC() {
	    return this.getToken(GoParser.FUNC, 0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterFunctionLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitFunctionLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitFunctionLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_index;
    }

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Slice_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_slice_;
    }

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COLON);
	    } else {
	        return this.getToken(GoParser.COLON, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSlice_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSlice_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSlice_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeAssertionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeAssertion;
    }

	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeAssertion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeAssertion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeAssertion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_arguments;
    }

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	nonNamedType() {
	    return this.getTypedRuleContext(NonNamedTypeContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(GoParser.ELLIPSIS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_methodExpr;
    }

	nonNamedType() {
	    return this.getTypedRuleContext(NonNamedTypeContext,0);
	};

	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterMethodExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitMethodExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitMethodExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReceiverTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_receiverType;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterReceiverType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitReceiverType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitReceiverType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_eos;
    }

	SEMI() {
	    return this.getToken(GoParser.SEMI, 0);
	};

	EOF() {
	    return this.getToken(GoParser.EOF, 0);
	};

	EOS() {
	    return this.getToken(GoParser.EOS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterEos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitEos(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitEos(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




GoParser.SourceFileContext = SourceFileContext; 
GoParser.PackageClauseContext = PackageClauseContext; 
GoParser.ImportDeclContext = ImportDeclContext; 
GoParser.ImportSpecContext = ImportSpecContext; 
GoParser.ImportPathContext = ImportPathContext; 
GoParser.DeclarationContext = DeclarationContext; 
GoParser.ConstDeclContext = ConstDeclContext; 
GoParser.ConstSpecContext = ConstSpecContext; 
GoParser.IdentifierListContext = IdentifierListContext; 
GoParser.ExpressionListContext = ExpressionListContext; 
GoParser.TypeDeclContext = TypeDeclContext; 
GoParser.TypeSpecContext = TypeSpecContext; 
GoParser.FunctionDeclContext = FunctionDeclContext; 
GoParser.MethodDeclContext = MethodDeclContext; 
GoParser.ReceiverContext = ReceiverContext; 
GoParser.VarDeclContext = VarDeclContext; 
GoParser.VarSpecContext = VarSpecContext; 
GoParser.BlockContext = BlockContext; 
GoParser.StatementListContext = StatementListContext; 
GoParser.StatementContext = StatementContext; 
GoParser.SimpleStmtContext = SimpleStmtContext; 
GoParser.ExpressionStmtContext = ExpressionStmtContext; 
GoParser.SendStmtContext = SendStmtContext; 
GoParser.IncDecStmtContext = IncDecStmtContext; 
GoParser.AssignmentContext = AssignmentContext; 
GoParser.Assign_opContext = Assign_opContext; 
GoParser.ShortVarDeclContext = ShortVarDeclContext; 
GoParser.EmptyStmtContext = EmptyStmtContext; 
GoParser.LabeledStmtContext = LabeledStmtContext; 
GoParser.ReturnStmtContext = ReturnStmtContext; 
GoParser.BreakStmtContext = BreakStmtContext; 
GoParser.ContinueStmtContext = ContinueStmtContext; 
GoParser.GotoStmtContext = GotoStmtContext; 
GoParser.FallthroughStmtContext = FallthroughStmtContext; 
GoParser.DeferStmtContext = DeferStmtContext; 
GoParser.IfStmtContext = IfStmtContext; 
GoParser.SwitchStmtContext = SwitchStmtContext; 
GoParser.ExprSwitchStmtContext = ExprSwitchStmtContext; 
GoParser.ExprCaseClauseContext = ExprCaseClauseContext; 
GoParser.ExprSwitchCaseContext = ExprSwitchCaseContext; 
GoParser.TypeSwitchStmtContext = TypeSwitchStmtContext; 
GoParser.TypeSwitchGuardContext = TypeSwitchGuardContext; 
GoParser.TypeCaseClauseContext = TypeCaseClauseContext; 
GoParser.TypeSwitchCaseContext = TypeSwitchCaseContext; 
GoParser.TypeListContext = TypeListContext; 
GoParser.SelectStmtContext = SelectStmtContext; 
GoParser.CommClauseContext = CommClauseContext; 
GoParser.CommCaseContext = CommCaseContext; 
GoParser.RecvStmtContext = RecvStmtContext; 
GoParser.ForStmtContext = ForStmtContext; 
GoParser.ForClauseContext = ForClauseContext; 
GoParser.RangeClauseContext = RangeClauseContext; 
GoParser.GoStmtContext = GoStmtContext; 
GoParser.Type_Context = Type_Context; 
GoParser.TypeNameContext = TypeNameContext; 
GoParser.TypeLitContext = TypeLitContext; 
GoParser.ArrayTypeContext = ArrayTypeContext; 
GoParser.ArrayLengthContext = ArrayLengthContext; 
GoParser.ElementTypeContext = ElementTypeContext; 
GoParser.PointerTypeContext = PointerTypeContext; 
GoParser.InterfaceTypeContext = InterfaceTypeContext; 
GoParser.SliceTypeContext = SliceTypeContext; 
GoParser.MapTypeContext = MapTypeContext; 
GoParser.ChannelTypeContext = ChannelTypeContext; 
GoParser.MethodSpecContext = MethodSpecContext; 
GoParser.FunctionTypeContext = FunctionTypeContext; 
GoParser.SignatureContext = SignatureContext; 
GoParser.ResultContext = ResultContext; 
GoParser.ParametersContext = ParametersContext; 
GoParser.ParameterDeclContext = ParameterDeclContext; 
GoParser.ExpressionContext = ExpressionContext; 
GoParser.PrimaryExprContext = PrimaryExprContext; 
GoParser.ConversionContext = ConversionContext; 
GoParser.NonNamedTypeContext = NonNamedTypeContext; 
GoParser.OperandContext = OperandContext; 
GoParser.LiteralContext = LiteralContext; 
GoParser.BasicLitContext = BasicLitContext; 
GoParser.IntegerContext = IntegerContext; 
GoParser.OperandNameContext = OperandNameContext; 
GoParser.QualifiedIdentContext = QualifiedIdentContext; 
GoParser.CompositeLitContext = CompositeLitContext; 
GoParser.LiteralTypeContext = LiteralTypeContext; 
GoParser.LiteralValueContext = LiteralValueContext; 
GoParser.ElementListContext = ElementListContext; 
GoParser.KeyedElementContext = KeyedElementContext; 
GoParser.KeyContext = KeyContext; 
GoParser.ElementContext = ElementContext; 
GoParser.StructTypeContext = StructTypeContext; 
GoParser.FieldDeclContext = FieldDeclContext; 
GoParser.String_Context = String_Context; 
GoParser.EmbeddedFieldContext = EmbeddedFieldContext; 
GoParser.FunctionLitContext = FunctionLitContext; 
GoParser.IndexContext = IndexContext; 
GoParser.Slice_Context = Slice_Context; 
GoParser.TypeAssertionContext = TypeAssertionContext; 
GoParser.ArgumentsContext = ArgumentsContext; 
GoParser.MethodExprContext = MethodExprContext; 
GoParser.ReceiverTypeContext = ReceiverTypeContext; 
GoParser.EosContext = EosContext; 
