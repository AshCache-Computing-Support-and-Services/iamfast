(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./Token');
const Lexer = require('./Lexer');
const {Interval} = require('./IntervalSet');

// this is just to keep meaningful parameter types to Parser
class TokenStream {}

/**
 * This implementation of {@link TokenStream} loads tokens from a
 * {@link TokenSource} on-demand, and places the tokens in a buffer to provide
 * access to any previous token by index.
 *
 * <p>
 * This token stream ignores the value of {@link Token//getChannel}. If your
 * parser requires the token stream filter tokens to only those on a particular
 * channel, such as {@link Token//DEFAULT_CHANNEL} or
 * {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
 * {@link CommonTokenStream}.</p>
 */
class BufferedTokenStream extends TokenStream {
	constructor(tokenSource) {

		super();
		// The {@link TokenSource} from which tokens for this stream are fetched.
		this.tokenSource = tokenSource;
		/**
		 * A collection of all tokens fetched from the token source. The list is
		 * considered a complete view of the input once {@link //fetchedEOF} is set
		 * to {@code true}.
		 */
		this.tokens = [];

		/**
		 * The index into {@link //tokens} of the current token (next token to
		 * {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
		 * be
		 * {@link //LT LT(1)}.
		 *
		 * <p>This field is set to -1 when the stream is first constructed or when
		 * {@link //setTokenSource} is called, indicating that the first token has
		 * not yet been fetched from the token source. For additional information,
		 * see the documentation of {@link IntStream} for a description of
		 * Initializing Methods.</p>
		 */
		this.index = -1;

		/**
		 * Indicates whether the {@link Token//EOF} token has been fetched from
		 * {@link //tokenSource} and added to {@link //tokens}. This field improves
		 * performance for the following cases:
		 *
		 * <ul>
		 * <li>{@link //consume}: The lookahead check in {@link //consume} to
		 * prevent
		 * consuming the EOF symbol is optimized by checking the values of
		 * {@link //fetchedEOF} and {@link //p} instead of calling {@link
		 * //LA}.</li>
		 * <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
		 * into
		 * {@link //tokens} is trivial with this field.</li>
		 * <ul>
		 */
		this.fetchedEOF = false;
	}

	mark() {
		return 0;
	}

	release(marker) {
		// no resources to release
	}

	reset() {
		this.seek(0);
	}

	seek(index) {
		this.lazyInit();
		this.index = this.adjustSeekIndex(index);
	}

	get(index) {
		this.lazyInit();
		return this.tokens[index];
	}

	consume() {
		let skipEofCheck = false;
		if (this.index >= 0) {
			if (this.fetchedEOF) {
				// the last token in tokens is EOF. skip check if p indexes any
				// fetched token except the last.
				skipEofCheck = this.index < this.tokens.length - 1;
			} else {
				// no EOF token in tokens. skip check if p indexes a fetched token.
				skipEofCheck = this.index < this.tokens.length;
			}
		} else {
			// not yet initialized
			skipEofCheck = false;
		}
		if (!skipEofCheck && this.LA(1) === Token.EOF) {
			throw "cannot consume EOF";
		}
		if (this.sync(this.index + 1)) {
			this.index = this.adjustSeekIndex(this.index + 1);
		}
	}

	/**
	 * Make sure index {@code i} in tokens has a token.
	 *
	 * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise
	 * {@code false}.
	 * @see //get(int i)
	 */
	sync(i) {
		const n = i - this.tokens.length + 1; // how many more elements we need?
		if (n > 0) {
			const fetched = this.fetch(n);
			return fetched >= n;
		}
		return true;
	}

	/**
	 * Add {@code n} elements to buffer.
	 *
	 * @return {Number} The actual number of elements added to the buffer.
	 */
	fetch(n) {
		if (this.fetchedEOF) {
			return 0;
		}
		for (let i = 0; i < n; i++) {
			const t = this.tokenSource.nextToken();
			t.tokenIndex = this.tokens.length;
			this.tokens.push(t);
			if (t.type === Token.EOF) {
				this.fetchedEOF = true;
				return i + 1;
			}
		}
		return n;
	}

// Get all tokens from start..stop inclusively///
	getTokens(start, stop, types) {
		if (types === undefined) {
			types = null;
		}
		if (start < 0 || stop < 0) {
			return null;
		}
		this.lazyInit();
		const subset = [];
		if (stop >= this.tokens.length) {
			stop = this.tokens.length - 1;
		}
		for (let i = start; i < stop; i++) {
			const t = this.tokens[i];
			if (t.type === Token.EOF) {
				break;
			}
			if (types === null || types.contains(t.type)) {
				subset.push(t);
			}
		}
		return subset;
	}

	LA(i) {
		return this.LT(i).type;
	}

	LB(k) {
		if (this.index - k < 0) {
			return null;
		}
		return this.tokens[this.index - k];
	}

	LT(k) {
		this.lazyInit();
		if (k === 0) {
			return null;
		}
		if (k < 0) {
			return this.LB(-k);
		}
		const i = this.index + k - 1;
		this.sync(i);
		if (i >= this.tokens.length) { // return EOF token
			// EOF must be last token
			return this.tokens[this.tokens.length - 1];
		}
		return this.tokens[i];
	}

	/**
	 * Allowed derived classes to modify the behavior of operations which change
	 * the current stream position by adjusting the target token index of a seek
	 * operation. The default implementation simply returns {@code i}. If an
	 * exception is thrown in this method, the current stream index should not be
	 * changed.
	 *
	 * <p>For example, {@link CommonTokenStream} overrides this method to ensure
	 * that
	 * the seek target is always an on-channel token.</p>
	 *
	 * @param {Number} i The target token index.
	 * @return {Number} The adjusted target token index.
	 */
	adjustSeekIndex(i) {
		return i;
	}

	lazyInit() {
		if (this.index === -1) {
			this.setup();
		}
	}

	setup() {
		this.sync(0);
		this.index = this.adjustSeekIndex(0);
	}

// Reset this token stream by setting its token source.///
	setTokenSource(tokenSource) {
		this.tokenSource = tokenSource;
		this.tokens = [];
		this.index = -1;
		this.fetchedEOF = false;
	}

	/**
	 * Given a starting index, return the index of the next token on channel.
	 * Return i if tokens[i] is on channel. Return -1 if there are no tokens
	 * on channel between i and EOF.
	 */
	nextTokenOnChannel(i, channel) {
		this.sync(i);
		if (i >= this.tokens.length) {
			return -1;
		}
		let token = this.tokens[i];
		while (token.channel !== this.channel) {
			if (token.type === Token.EOF) {
				return -1;
			}
			i += 1;
			this.sync(i);
			token = this.tokens[i];
		}
		return i;
	}

	/**
	 * Given a starting index, return the index of the previous token on channel.
	 * Return i if tokens[i] is on channel. Return -1 if there are no tokens
	 * on channel between i and 0.
	 */
	previousTokenOnChannel(i, channel) {
		while (i >= 0 && this.tokens[i].channel !== channel) {
			i -= 1;
		}
		return i;
	}

	/**
	 * Collect all tokens on specified channel to the right of
	 * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
	 * EOF. If channel is -1, find any non default channel token.
	 */
	getHiddenTokensToRight(tokenIndex,
			channel) {
		if (channel === undefined) {
			channel = -1;
		}
		this.lazyInit();
		if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
			throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
		}
		const nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
		const from_ = tokenIndex + 1;
		// if none onchannel to right, nextOnChannel=-1 so set to = last token
		const to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
		return this.filterForChannel(from_, to, channel);
	}

	/**
	 * Collect all tokens on specified channel to the left of
	 * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
	 * If channel is -1, find any non default channel token.
	 */
	getHiddenTokensToLeft(tokenIndex,
			channel) {
		if (channel === undefined) {
			channel = -1;
		}
		this.lazyInit();
		if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
			throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
		}
		const prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
		if (prevOnChannel === tokenIndex - 1) {
			return null;
		}
		// if none on channel to left, prevOnChannel=-1 then from=0
		const from_ = prevOnChannel + 1;
		const to = tokenIndex - 1;
		return this.filterForChannel(from_, to, channel);
	}

	filterForChannel(left, right, channel) {
		const hidden = [];
		for (let i = left; i < right + 1; i++) {
			const t = this.tokens[i];
			if (channel === -1) {
				if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
					hidden.push(t);
				}
			} else if (t.channel === channel) {
				hidden.push(t);
			}
		}
		if (hidden.length === 0) {
			return null;
		}
		return hidden;
	}

	getSourceName() {
		return this.tokenSource.getSourceName();
	}

// Get the text of all tokens in this buffer.///
	getText(interval) {
		this.lazyInit();
		this.fill();
		if (interval === undefined || interval === null) {
			interval = new Interval(0, this.tokens.length - 1);
		}
		let start = interval.start;
		if (start instanceof Token) {
			start = start.tokenIndex;
		}
		let stop = interval.stop;
		if (stop instanceof Token) {
			stop = stop.tokenIndex;
		}
		if (start === null || stop === null || start < 0 || stop < 0) {
			return "";
		}
		if (stop >= this.tokens.length) {
			stop = this.tokens.length - 1;
		}
		let s = "";
		for (let i = start; i < stop + 1; i++) {
			const t = this.tokens[i];
			if (t.type === Token.EOF) {
				break;
			}
			s = s + t.text;
		}
		return s;
	}

// Get all tokens from lexer until EOF///
	fill() {
		this.lazyInit();
		while (this.fetch(1000) === 1000) {
			continue;
		}
	}
}


module.exports = BufferedTokenStream;

},{"./IntervalSet":7,"./Lexer":9,"./Token":15}],2:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const InputStream = require('./InputStream');
const fs = require("fs");

/**
 * Utility functions to create InputStreams from various sources.
 *
 * All returned InputStreams support the full range of Unicode
 * up to U+10FFFF (the default behavior of InputStream only supports
 * code points up to U+FFFF).
 */
const CharStreams = {
  // Creates an InputStream from a string.
  fromString: function(str) {
    return new InputStream(str, true);
  },

  /**
   * Asynchronously creates an InputStream from a blob given the
   * encoding of the bytes in that blob (defaults to 'utf8' if
   * encoding is null).
   *
   * Invokes onLoad(result) on success, onError(error) on
   * failure.
   */
  fromBlob: function(blob, encoding, onLoad, onError) {
    const reader = new window.FileReader();
    reader.onload = function(e) {
      const is = new InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  /**
   * Creates an InputStream from a Buffer given the
   * encoding of the bytes in that buffer (defaults to 'utf8' if
   * encoding is null).
   */
  fromBuffer: function(buffer, encoding) {
    return new InputStream(buffer.toString(encoding), true);
  },

  /** Asynchronously creates an InputStream from a file on disk given
   * the encoding of the bytes in that file (defaults to 'utf8' if
   * encoding is null).
   *
   * Invokes callback(error, result) on completion.
   */
  fromPath: function(path, encoding, callback) {
    fs.readFile(path, encoding, function(err, data) {
      let is = null;
      if (data !== null) {
        is = new InputStream(data, true);
      }
      callback(err, is);
    });
  },

  /**
   * Synchronously creates an InputStream given a path to a file
   * on disk and the encoding of the bytes in that file (defaults to
   * 'utf8' if encoding is null).
   */
  fromPathSync: function(path, encoding) {
    const data = fs.readFileSync(path, encoding);
    return new InputStream(data, true);
  }
};

module.exports = CharStreams;

},{"./InputStream":6,"fs":49}],3:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const CommonToken = require('./Token').CommonToken;

class TokenFactory {}

/**
 * This default implementation of {@link TokenFactory} creates
 * {@link CommonToken} objects.
 */
class CommonTokenFactory extends TokenFactory {
    constructor(copyText) {
        super();
        /**
         * Indicates whether {@link CommonToken//setText} should be called after
         * constructing tokens to explicitly set the text. This is useful for cases
         * where the input stream might not be able to provide arbitrary substrings
         * of text from the input after the lexer creates a token (e.g. the
         * implementation of {@link CharStream//getText} in
         * {@link UnbufferedCharStream} throws an
         * {@link UnsupportedOperationException}). Explicitly setting the token text
         * allows {@link Token//getText} to be called at any time regardless of the
         * input stream implementation.
         *
         * <p>
         * The default value is {@code false} to avoid the performance and memory
         * overhead of copying text for every token unless explicitly requested.</p>
         */
        this.copyText = copyText===undefined ? false : copyText;
    }

    create(source, type, text, channel, start, stop, line, column) {
        const t = new CommonToken(source, type, channel, start, stop);
        t.line = line;
        t.column = column;
        if (text !==null) {
            t.text = text;
        } else if (this.copyText && source[1] !==null) {
            t.text = source[1].getText(start,stop);
        }
        return t;
    }

    createThin(type, text) {
        const t = new CommonToken(null, type);
        t.text = text;
        return t;
    }
}

/**
 * The default {@link CommonTokenFactory} instance.
 *
 * <p>
 * This token factory does not explicitly copy token text when constructing
 * tokens.</p>
 */
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

module.exports = CommonTokenFactory;

},{"./Token":15}],4:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */


const Token = require('./Token').Token;
const BufferedTokenStream = require('./BufferedTokenStream');

/**
 * This class extends {@link BufferedTokenStream} with functionality to filter
 * token streams to tokens on a particular channel (tokens where
 * {@link Token//getChannel} returns a particular value).
 *
 * <p>
 * This token stream provides access to all tokens by index or when calling
 * methods like {@link //getText}. The channel filtering is only used for code
 * accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
 * {@link //LB}.</p>
 *
 * <p>
 * By default, tokens are placed on the default channel
 * ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
 * {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
 * call {@link Lexer//setChannel}.
 * </p>
 *
 * <p>
 * Note: lexer rules which use the {@code ->skip} lexer command or call
 * {@link Lexer//skip} do not produce tokens at all, so input text matched by
 * such a rule will not be available as part of the token stream, regardless of
 * channel.</p>
 */
class CommonTokenStream extends BufferedTokenStream {
    constructor(lexer, channel) {
        super(lexer);
        this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    }

    adjustSeekIndex(i) {
        return this.nextTokenOnChannel(i, this.channel);
    }

    LB(k) {
        if (k===0 || this.index-k<0) {
            return null;
        }
        let i = this.index;
        let n = 1;
        // find k good tokens looking backwards
        while (n <= k) {
            // skip off-channel tokens
            i = this.previousTokenOnChannel(i - 1, this.channel);
            n += 1;
        }
        if (i < 0) {
            return null;
        }
        return this.tokens[i];
    }

    LT(k) {
        this.lazyInit();
        if (k === 0) {
            return null;
        }
        if (k < 0) {
            return this.LB(-k);
        }
        let i = this.index;
        let n = 1; // we know tokens[pos] is a good one
        // find k good tokens
        while (n < k) {
            // skip off-channel tokens, but make sure to not look past EOF
            if (this.sync(i + 1)) {
                i = this.nextTokenOnChannel(i + 1, this.channel);
            }
            n += 1;
        }
        return this.tokens[i];
    }

    // Count EOF just once.
    getNumberOfOnChannelTokens() {
        let n = 0;
        this.fill();
        for (let i =0; i< this.tokens.length;i++) {
            const t = this.tokens[i];
            if( t.channel===this.channel) {
                n += 1;
            }
            if( t.type===Token.EOF) {
                break;
            }
        }
        return n;
    }
}

module.exports = CommonTokenStream;

},{"./BufferedTokenStream":1,"./Token":15}],5:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const InputStream = require('./InputStream');
const fs = require("fs");

/**
 * This is an InputStream that is loaded from a file all at once
 * when you construct the object.
 */
class FileStream extends InputStream {
	constructor(fileName, decodeToUnicodeCodePoints) {
		const data = fs.readFileSync(fileName, "utf8");
		super(data, decodeToUnicodeCodePoints);
		this.fileName = fileName;
	}
}

module.exports = FileStream

},{"./InputStream":6,"fs":49}],6:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./Token');
require('./polyfills/codepointat');
require('./polyfills/fromcodepoint');

/**
 * If decodeToUnicodeCodePoints is true, the input is treated
 * as a series of Unicode code points.
 *
 * Otherwise, the input is treated as a series of 16-bit UTF-16 code
 * units.
 */
class InputStream {
	constructor(data, decodeToUnicodeCodePoints) {
		this.name = "<empty>";
		this.strdata = data;
		this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
		// _loadString - Vacuum all input from a string and then treat it like a buffer.
		this._index = 0;
		this.data = [];
		if (this.decodeToUnicodeCodePoints) {
			for (let i = 0; i < this.strdata.length; ) {
				const codePoint = this.strdata.codePointAt(i);
				this.data.push(codePoint);
				i += codePoint <= 0xFFFF ? 1 : 2;
			}
		} else {
			this.data = new Array(this.strdata.length);
			for (let i = 0; i < this.strdata.length; i++) {
				const codeUnit = this.strdata.charCodeAt(i);
				this.data[i] = codeUnit;
			}
		}
		this._size = this.data.length;
	}

	/**
	 * Reset the stream so that it's in the same state it was
	 * when the object was created *except* the data array is not
	 * touched.
	 */
	reset() {
		this._index = 0;
	}

	consume() {
		if (this._index >= this._size) {
			// assert this.LA(1) == Token.EOF
			throw ("cannot consume EOF");
		}
		this._index += 1;
	}

	LA(offset) {
		if (offset === 0) {
			return 0; // undefined
		}
		if (offset < 0) {
			offset += 1; // e.g., translate LA(-1) to use offset=0
		}
		const pos = this._index + offset - 1;
		if (pos < 0 || pos >= this._size) { // invalid
			return Token.EOF;
		}
		return this.data[pos];
	}

	LT(offset) {
		return this.LA(offset);
	}

// mark/release do nothing; we have entire buffer
	mark() {
		return -1;
	}

	release(marker) {
	}

	/**
	 * consume() ahead until p==_index; can't just set p=_index as we must
	 * update line and column. If we seek backwards, just set p
	 */
	seek(_index) {
		if (_index <= this._index) {
			this._index = _index; // just jump; don't update stream state (line,
									// ...)
			return;
		}
		// seek forward
		this._index = Math.min(_index, this._size);
	}

	getText(start, stop) {
		if (stop >= this._size) {
			stop = this._size - 1;
		}
		if (start >= this._size) {
			return "";
		} else {
			if (this.decodeToUnicodeCodePoints) {
				let result = "";
				for (let i = start; i <= stop; i++) {
					result += String.fromCodePoint(this.data[i]);
				}
				return result;
			} else {
				return this.strdata.slice(start, stop + 1);
			}
		}
	}

	toString() {
		return this.strdata;
	}

	get index(){
		return this._index;
	}

	get size(){
		return this._size;
	}
}


module.exports = InputStream;

},{"./Token":15,"./polyfills/codepointat":43,"./polyfills/fromcodepoint":44}],7:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./Token');

/* stop is not included! */
class Interval {

	constructor(start, stop) {
		this.start = start;
		this.stop = stop;
	}

	clone() {
		return new Interval(this.start, this.stop);
	}

	contains(item) {
		return item >= this.start && item < this.stop;
	}

	toString() {
		if(this.start===this.stop-1) {
			return this.start.toString();
		} else {
			return this.start.toString() + ".." + (this.stop-1).toString();
		}
	}

	get length(){
		return this.stop - this.start;
	}
}


class IntervalSet {
	constructor() {
		this.intervals = null;
		this.readOnly = false;
	}

	first(v) {
		if (this.intervals === null || this.intervals.length===0) {
			return Token.INVALID_TYPE;
		} else {
			return this.intervals[0].start;
		}
	}

	addOne(v) {
		this.addInterval(new Interval(v, v + 1));
	}

	addRange(l, h) {
		this.addInterval(new Interval(l, h + 1));
	}

	addInterval(toAdd) {
		if (this.intervals === null) {
			this.intervals = [];
			this.intervals.push(toAdd.clone());
		} else {
			// find insert pos
			for (let pos = 0; pos < this.intervals.length; pos++) {
				const existing = this.intervals[pos];
				// distinct range -> insert
				if (toAdd.stop < existing.start) {
					this.intervals.splice(pos, 0, toAdd);
					return;
				}
				// contiguous range -> adjust
				else if (toAdd.stop === existing.start) {
					this.intervals[pos] = new Interval(toAdd.start, existing.stop)
					return;
				}
				// overlapping range -> adjust and reduce
				else if (toAdd.start <= existing.stop) {
					this.intervals[pos] = new Interval(Math.min(existing.start, toAdd.start), Math.max(existing.stop, toAdd.stop));
					this.reduce(pos);
					return;
				}
			}
			// greater than any existing
			this.intervals.push(toAdd.clone());
		}
	}

	addSet(other) {
		if (other.intervals !== null) {
			other.intervals.forEach( toAdd => this.addInterval(toAdd), this);
		}
		return this;
	}

	reduce(pos) {
		// only need to reduce if pos is not the last
		if (pos < this.intervals.length - 1) {
			const current = this.intervals[pos];
			const next = this.intervals[pos + 1];
			// if next contained in current
			if (current.stop >= next.stop) {
				this.intervals.splice(pos + 1, 1);
				this.reduce(pos);
			} else if (current.stop >= next.start) {
				this.intervals[pos] = new Interval(current.start, next.stop);
				this.intervals.splice(pos + 1, 1);
			}
		}
	}

	complement(start, stop) {
		const result = new IntervalSet();
		result.addInterval(new Interval(start, stop + 1));
		if(this.intervals !== null)
			this.intervals.forEach(toRemove => result.removeRange(toRemove));
		return result;
	}

	contains(item) {
		if (this.intervals === null) {
			return false;
		} else {
			for (let k = 0; k < this.intervals.length; k++) {
				if(this.intervals[k].contains(item)) {
					return true;
				}
			}
			return false;
		}
	}

	removeRange(toRemove) {
		if(toRemove.start===toRemove.stop-1) {
			this.removeOne(toRemove.start);
		} else if (this.intervals !== null) {
			let pos = 0;
			for(let n=0; n<this.intervals.length; n++) {
				const existing = this.intervals[pos];
				// intervals are ordered
				if (toRemove.stop<=existing.start) {
					return;
				}
				// check for including range, split it
				else if(toRemove.start>existing.start && toRemove.stop<existing.stop) {
					this.intervals[pos] = new Interval(existing.start, toRemove.start);
					const x = new Interval(toRemove.stop, existing.stop);
					this.intervals.splice(pos, 0, x);
					return;
				}
				// check for included range, remove it
				else if(toRemove.start<=existing.start && toRemove.stop>=existing.stop) {
					this.intervals.splice(pos, 1);
					pos = pos - 1; // need another pass
				}
				// check for lower boundary
				else if(toRemove.start<existing.stop) {
					this.intervals[pos] = new Interval(existing.start, toRemove.start);
				}
				// check for upper boundary
				else if(toRemove.stop<existing.stop) {
					this.intervals[pos] = new Interval(toRemove.stop, existing.stop);
				}
				pos += 1;
			}
		}
	}

	removeOne(value) {
		if (this.intervals !== null) {
			for (let i = 0; i < this.intervals.length; i++) {
				const existing = this.intervals[i];
				// intervals are ordered
				if (value < existing.start) {
					return;
				}
				// check for single value range
				else if (value === existing.start && value === existing.stop - 1) {
					this.intervals.splice(i, 1);
					return;
				}
				// check for lower boundary
				else if (value === existing.start) {
					this.intervals[i] = new Interval(existing.start + 1, existing.stop);
					return;
				}
				// check for upper boundary
				else if (value === existing.stop - 1) {
					this.intervals[i] = new Interval(existing.start, existing.stop - 1);
					return;
				}
				// split existing range
				else if (value < existing.stop - 1) {
					const replace = new Interval(existing.start, value);
					existing.start = value + 1;
					this.intervals.splice(i, 0, replace);
					return;
				}
			}
		}
	}

	toString(literalNames, symbolicNames, elemsAreChar) {
		literalNames = literalNames || null;
		symbolicNames = symbolicNames || null;
		elemsAreChar = elemsAreChar || false;
		if (this.intervals === null) {
			return "{}";
		} else if(literalNames!==null || symbolicNames!==null) {
			return this.toTokenString(literalNames, symbolicNames);
		} else if(elemsAreChar) {
			return this.toCharString();
		} else {
			return this.toIndexString();
		}
	}

	toCharString() {
		const names = [];
		for (let i = 0; i < this.intervals.length; i++) {
			const existing = this.intervals[i];
			if(existing.stop===existing.start+1) {
				if ( existing.start===Token.EOF ) {
					names.push("<EOF>");
				} else {
					names.push("'" + String.fromCharCode(existing.start) + "'");
				}
			} else {
				names.push("'" + String.fromCharCode(existing.start) + "'..'" + String.fromCharCode(existing.stop-1) + "'");
			}
		}
		if (names.length > 1) {
			return "{" + names.join(", ") + "}";
		} else {
			return names[0];
		}
	}

	toIndexString() {
		const names = [];
		for (let i = 0; i < this.intervals.length; i++) {
			const existing = this.intervals[i];
			if(existing.stop===existing.start+1) {
				if ( existing.start===Token.EOF ) {
					names.push("<EOF>");
				} else {
					names.push(existing.start.toString());
				}
			} else {
				names.push(existing.start.toString() + ".." + (existing.stop-1).toString());
			}
		}
		if (names.length > 1) {
			return "{" + names.join(", ") + "}";
		} else {
			return names[0];
		}
	}

	toTokenString(literalNames, symbolicNames) {
		const names = [];
		for (let i = 0; i < this.intervals.length; i++) {
			const existing = this.intervals[i];
			for (let j = existing.start; j < existing.stop; j++) {
				names.push(this.elementName(literalNames, symbolicNames, j));
			}
		}
		if (names.length > 1) {
			return "{" + names.join(", ") + "}";
		} else {
			return names[0];
		}
	}

	elementName(literalNames, symbolicNames, token) {
		if (token === Token.EOF) {
			return "<EOF>";
		} else if (token === Token.EPSILON) {
			return "<EPSILON>";
		} else {
			return literalNames[token] || symbolicNames[token];
		}
	}

	get length(){
		return this.intervals.map( interval => interval.length ).reduce((acc, val) => acc + val);
	}
}

module.exports = {
	Interval,
	IntervalSet
};

},{"./Token":15}],8:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Set, BitSet} = require('./Utils');
const {Token} = require('./Token');
const {ATNConfig} = require('./atn/ATNConfig');
const {IntervalSet} = require('./IntervalSet');
const {RuleStopState} = require('./atn/ATNState');
const {RuleTransition, NotSetTransition, WildcardTransition, AbstractPredicateTransition} = require('./atn/Transition');
const {predictionContextFromRuleContext, PredictionContext, SingletonPredictionContext} = require('./PredictionContext');

class LL1Analyzer {
    constructor(atn) {
        this.atn = atn;
    }

    /**
     * Calculates the SLL(1) expected lookahead set for each outgoing transition
     * of an {@link ATNState}. The returned array has one element for each
     * outgoing transition in {@code s}. If the closure from transition
     * <em>i</em> leads to a semantic predicate before matching a symbol, the
     * element at index <em>i</em> of the result will be {@code null}.
     *
     * @param s the ATN state
     * @return the expected symbols for each outgoing transition of {@code s}.
     */
    getDecisionLookahead(s) {
        if (s === null) {
            return null;
        }
        const count = s.transitions.length;
        const look = [];
        for(let alt=0; alt< count; alt++) {
            look[alt] = new IntervalSet();
            const lookBusy = new Set();
            const seeThruPreds = false; // fail to get lookahead upon pred
            this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
                  look[alt], lookBusy, new BitSet(), seeThruPreds, false);
            // Wipe out lookahead for this alternative if we found nothing
            // or we had a predicate when we !seeThruPreds
            if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
                look[alt] = null;
            }
        }
        return look;
    }

    /**
     * Compute set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     *
     * <p>If {@code ctx} is {@code null} and the end of the rule containing
     * {@code s} is reached, {@link Token//EPSILON} is added to the result set.
     * If {@code ctx} is not {@code null} and the end of the outermost rule is
     * reached, {@link Token//EOF} is added to the result set.</p>
     *
     * @param s the ATN state
     * @param stopState the ATN state to stop at. This can be a
     * {@link BlockEndState} to detect epsilon paths through a closure.
     * @param ctx the complete parser context, or {@code null} if the context
     * should be ignored
     *
     * @return The set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     */
    LOOK(s, stopState, ctx) {
        const r = new IntervalSet();
        const seeThruPreds = true; // ignore preds; get all lookahead
        ctx = ctx || null;
        const lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
        this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
        return r;
    }

    /**
     * Compute set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     *
     * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
     * rule containing {@code s} is reached, {@link Token//EPSILON} is added to
     * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
     * {@code true} and {@code stopState} or the end of the outermost rule is
     * reached, {@link Token//EOF} is added to the result set.</p>
     *
     * @param s the ATN state.
     * @param stopState the ATN state to stop at. This can be a
     * {@link BlockEndState} to detect epsilon paths through a closure.
     * @param ctx The outer context, or {@code null} if the outer context should
     * not be used.
     * @param look The result lookahead set.
     * @param lookBusy A set used for preventing epsilon closures in the ATN
     * from causing a stack overflow. Outside code should pass
     * {@code new Set<ATNConfig>} for this argument.
     * @param calledRuleStack A set used for preventing left recursion in the
     * ATN from causing a stack overflow. Outside code should pass
     * {@code new BitSet()} for this argument.
     * @param seeThruPreds {@code true} to true semantic predicates as
     * implicitly {@code true} and "see through them", otherwise {@code false}
     * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
     * result if one is encountered.
     * @param addEOF Add {@link Token//EOF} to the result if the end of the
     * outermost context is reached. This parameter has no effect if {@code ctx}
     * is {@code null}.
     */
    _LOOK(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
        const c = new ATNConfig({state:s, alt:0, context: ctx}, null);
        if (lookBusy.contains(c)) {
            return;
        }
        lookBusy.add(c);
        if (s === stopState) {
            if (ctx ===null) {
                look.addOne(Token.EPSILON);
                return;
            } else if (ctx.isEmpty() && addEOF) {
                look.addOne(Token.EOF);
                return;
            }
        }
        if (s instanceof RuleStopState ) {
            if (ctx ===null) {
                look.addOne(Token.EPSILON);
                return;
            } else if (ctx.isEmpty() && addEOF) {
                look.addOne(Token.EOF);
                return;
            }
            if (ctx !== PredictionContext.EMPTY) {
                const removed = calledRuleStack.contains(s.ruleIndex);
                try {
                    calledRuleStack.remove(s.ruleIndex);
                    // run thru all possible stack tops in ctx
                    for (let i = 0; i < ctx.length; i++) {
                        const returnState = this.atn.states[ctx.getReturnState(i)];
                        this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                    }
                }finally {
                    if (removed) {
                        calledRuleStack.add(s.ruleIndex);
                    }
                }
                return;
            }
        }
        for(let j=0; j<s.transitions.length; j++) {
            const t = s.transitions[j];
            if (t.constructor === RuleTransition) {
                if (calledRuleStack.contains(t.target.ruleIndex)) {
                    continue;
                }
                const newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
                try {
                    calledRuleStack.add(t.target.ruleIndex);
                    this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    calledRuleStack.remove(t.target.ruleIndex);
                }
            } else if (t instanceof AbstractPredicateTransition ) {
                if (seeThruPreds) {
                    this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } else {
                    look.addOne(LL1Analyzer.HIT_PRED);
                }
            } else if( t.isEpsilon) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else if (t.constructor === WildcardTransition) {
                look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
            } else {
                let set = t.label;
                if (set !== null) {
                    if (t instanceof NotSetTransition) {
                        set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                    }
                    look.addSet(set);
                }
            }
        }
    }
}

/**
 * Special value added to the lookahead sets to indicate that we hit
 * a predicate during analysis if {@code seeThruPreds==false}.
 */
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;

module.exports = LL1Analyzer;


},{"./IntervalSet":7,"./PredictionContext":12,"./Token":15,"./Utils":16,"./atn/ATNConfig":18,"./atn/ATNState":23,"./atn/Transition":31}],9:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./Token');
const Recognizer = require('./Recognizer');
const CommonTokenFactory = require('./CommonTokenFactory');
const {RecognitionException} = require('./error/Errors');
const {LexerNoViableAltException} = require('./error/Errors');

class TokenSource {}

/**
 * A lexer is recognizer that draws input symbols from a character stream.
 * lexer grammars result in a subclass of this object. A Lexer object
 * uses simplified match() and error recovery mechanisms in the interest of speed.
 */
class Lexer extends Recognizer {
	constructor(input) {
		super();
		this._input = input;
		this._factory = CommonTokenFactory.DEFAULT;
		this._tokenFactorySourcePair = [ this, input ];

		this._interp = null; // child classes must populate this

		/**
		 * The goal of all lexer rules/methods is to create a token object.
		 * this is an instance variable as multiple rules may collaborate to
		 * create a single token. nextToken will return this object after
		 * matching lexer rule(s). If you subclass to allow multiple token
		 * emissions, then set this to the last token to be matched or
		 * something nonnull so that the auto token emit mechanism will not
		 * emit another token.
		 */
		this._token = null;

		/**
		 * What character index in the stream did the current token start at?
		 * Needed, for example, to get the text for current token. Set at
		 * the start of nextToken.
		 */
		this._tokenStartCharIndex = -1;

		// The line on which the first character of the token resides///
		this._tokenStartLine = -1;

		// The character position of first character within the line///
		this._tokenStartColumn = -1;

		// Once we see EOF on char stream, next token will be EOF.
		// If you have DONE : EOF ; then you see DONE EOF.
		this._hitEOF = false;

		// The channel number for the current token///
		this._channel = Token.DEFAULT_CHANNEL;

		// The token type for the current token///
		this._type = Token.INVALID_TYPE;

		this._modeStack = [];
		this._mode = Lexer.DEFAULT_MODE;

		/**
		 * You can set the text for the current token to override what is in
		 * the input char buffer. Use setText() or can set this instance var.
		 */
		this._text = null;
	}

	reset() {
		// wack Lexer state variables
		if (this._input !== null) {
			this._input.seek(0); // rewind the input
		}
		this._token = null;
		this._type = Token.INVALID_TYPE;
		this._channel = Token.DEFAULT_CHANNEL;
		this._tokenStartCharIndex = -1;
		this._tokenStartColumn = -1;
		this._tokenStartLine = -1;
		this._text = null;

		this._hitEOF = false;
		this._mode = Lexer.DEFAULT_MODE;
		this._modeStack = [];

		this._interp.reset();
	}

// Return a token from this source; i.e., match a token on the char stream.
	nextToken() {
		if (this._input === null) {
			throw "nextToken requires a non-null input stream.";
		}

		/**
		 * Mark start location in char stream so unbuffered streams are
		 * guaranteed at least have text of current token
		 */
		const tokenStartMarker = this._input.mark();
		try {
			while (true) {
				if (this._hitEOF) {
					this.emitEOF();
					return this._token;
				}
				this._token = null;
				this._channel = Token.DEFAULT_CHANNEL;
				this._tokenStartCharIndex = this._input.index;
				this._tokenStartColumn = this._interp.column;
				this._tokenStartLine = this._interp.line;
				this._text = null;
				let continueOuter = false;
				while (true) {
					this._type = Token.INVALID_TYPE;
					let ttype = Lexer.SKIP;
					try {
						ttype = this._interp.match(this._input, this._mode);
					} catch (e) {
						if(e instanceof RecognitionException) {
							this.notifyListeners(e); // report error
							this.recover(e);
						} else {
							console.log(e.stack);
							throw e;
						}
					}
					if (this._input.LA(1) === Token.EOF) {
						this._hitEOF = true;
					}
					if (this._type === Token.INVALID_TYPE) {
						this._type = ttype;
					}
					if (this._type === Lexer.SKIP) {
						continueOuter = true;
						break;
					}
					if (this._type !== Lexer.MORE) {
						break;
					}
				}
				if (continueOuter) {
					continue;
				}
				if (this._token === null) {
					this.emit();
				}
				return this._token;
			}
		} finally {
			// make sure we release marker after match or
			// unbuffered char stream will keep buffering
			this._input.release(tokenStartMarker);
		}
	}

	/**
	 * Instruct the lexer to skip creating a token for current lexer rule
	 * and look for another token. nextToken() knows to keep looking when
	 * a lexer rule finishes with token set to SKIP_TOKEN. Recall that
	 * if token==null at end of any token rule, it creates one for you
	 * and emits it.
	 */
	skip() {
		this._type = Lexer.SKIP;
	}

	more() {
		this._type = Lexer.MORE;
	}

	mode(m) {
		this._mode = m;
	}

	pushMode(m) {
		if (this._interp.debug) {
			console.log("pushMode " + m);
		}
		this._modeStack.push(this._mode);
		this.mode(m);
	}

	popMode() {
		if (this._modeStack.length === 0) {
			throw "Empty Stack";
		}
		if (this._interp.debug) {
			console.log("popMode back to " + this._modeStack.slice(0, -1));
		}
		this.mode(this._modeStack.pop());
		return this._mode;
	}

	/**
	 * By default does not support multiple emits per nextToken invocation
	 * for efficiency reasons. Subclass and override this method, nextToken,
	 * and getToken (to push tokens into a list and pull from that list
	 * rather than a single variable as this implementation does).
	 */
	emitToken(token) {
		this._token = token;
	}

	/**
	 * The standard method called to automatically emit a token at the
	 * outermost lexical rule. The token object should point into the
	 * char buffer start..stop. If there is a text override in 'text',
	 * use that to set the token's text. Override this method to emit
	 * custom Token objects or provide a new factory.
	 */
	emit() {
		const t = this._factory.create(this._tokenFactorySourcePair, this._type,
				this._text, this._channel, this._tokenStartCharIndex, this
						.getCharIndex() - 1, this._tokenStartLine,
				this._tokenStartColumn);
		this.emitToken(t);
		return t;
	}

	emitEOF() {
		const cpos = this.column;
		const lpos = this.line;
		const eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
				null, Token.DEFAULT_CHANNEL, this._input.index,
				this._input.index - 1, lpos, cpos);
		this.emitToken(eof);
		return eof;
	}

// What is the index of the current character of lookahead?///
	getCharIndex() {
		return this._input.index;
	}

	/**
	 * Return a list of all Token objects in input char stream.
	 * Forces load of all tokens. Does not include EOF token.
	 */
	getAllTokens() {
		const tokens = [];
		let t = this.nextToken();
		while (t.type !== Token.EOF) {
			tokens.push(t);
			t = this.nextToken();
		}
		return tokens;
	}

	notifyListeners(e) {
		const start = this._tokenStartCharIndex;
		const stop = this._input.index;
		const text = this._input.getText(start, stop);
		const msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
		const listener = this.getErrorListenerDispatch();
		listener.syntaxError(this, null, this._tokenStartLine,
				this._tokenStartColumn, msg, e);
	}

	getErrorDisplay(s) {
		const d = [];
		for (let i = 0; i < s.length; i++) {
			d.push(s[i]);
		}
		return d.join('');
	}

	getErrorDisplayForChar(c) {
		if (c.charCodeAt(0) === Token.EOF) {
			return "<EOF>";
		} else if (c === '\n') {
			return "\\n";
		} else if (c === '\t') {
			return "\\t";
		} else if (c === '\r') {
			return "\\r";
		} else {
			return c;
		}
	}

	getCharErrorDisplay(c) {
		return "'" + this.getErrorDisplayForChar(c) + "'";
	}

	/**
	 * Lexers can normally match any char in it's vocabulary after matching
	 * a token, so do the easy thing and just kill a character and hope
	 * it all works out. You can instead use the rule invocation stack
	 * to do sophisticated error recovery if you are in a fragment rule.
	 */
	recover(re) {
		if (this._input.LA(1) !== Token.EOF) {
			if (re instanceof LexerNoViableAltException) {
				// skip a char and try again
				this._interp.consume(this._input);
			} else {
				// TODO: Do we lose character or line position information?
				this._input.consume();
			}
		}
	}

	get inputStream(){
		return this._input;
	}

	set inputStream(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}

	get sourceName(){
		return this._input.sourceName;
	}

	get type(){
		return this._type;
	}

	set type(type) {
		this._type = type;
	}

	get line(){
		return this._interp.line;
	}

	set line(line) {
		this._interp.line = line;
	}

	get column(){
		return this._interp.column;
	}

	set column(column) {
		this._interp.column = column;
	}

	get text(){
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	}

	set text(text) {
		this._text = text;
	}
}




Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

// Set the char stream and reset the lexer


module.exports = Lexer;

},{"./CommonTokenFactory":3,"./Recognizer":13,"./Token":15,"./error/Errors":40}],10:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./Token');
const {ParseTreeListener, TerminalNode, ErrorNode} = require('./tree/Tree');
const Recognizer = require('./Recognizer');
const {DefaultErrorStrategy} = require('./error/ErrorStrategy');
const ATNDeserializer = require('./atn/ATNDeserializer');
const ATNDeserializationOptions = require('./atn/ATNDeserializationOptions');
const Lexer = require('./Lexer');

class TraceListener extends ParseTreeListener {
	constructor(parser) {
		super();
		this.parser = parser;
	}

	enterEveryRule(ctx) {
		console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
	}

	visitTerminal(node) {
		console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
	}

	exitEveryRule(ctx) {
		console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
	}
}

class Parser extends Recognizer {
	/**
	 * this is all the parsing support code essentially; most of it is error
	 * recovery stuff.
	 */
	constructor(input) {
		super();
		// The input stream.
		this._input = null;
		/**
		 * The error handling strategy for the parser. The default value is a new
		 * instance of {@link DefaultErrorStrategy}.
		 */
		this._errHandler = new DefaultErrorStrategy();
		this._precedenceStack = [];
		this._precedenceStack.push(0);
		/**
		 * The {@link ParserRuleContext} object for the currently executing rule.
		 * this is always non-null during the parsing process.
		 */
		this._ctx = null;
		/**
		 * Specifies whether or not the parser should construct a parse tree during
		 * the parsing process. The default value is {@code true}.
		 */
		this.buildParseTrees = true;
		/**
		 * When {@link //setTrace}{@code (true)} is called, a reference to the
		 * {@link TraceListener} is stored here so it can be easily removed in a
		 * later call to {@link //setTrace}{@code (false)}. The listener itself is
		 * implemented as a parser listener so this field is not directly used by
		 * other parser methods.
		 */
		this._tracer = null;
		/**
		 * The list of {@link ParseTreeListener} listeners registered to receive
		 * events during the parse.
		 */
		this._parseListeners = null;
		/**
		 * The number of syntax errors reported during parsing. this value is
		 * incremented each time {@link //notifyErrorListeners} is called.
		 */
		this._syntaxErrors = 0;
		this.setInputStream(input);
	}

	// reset the parser's state
	reset() {
		if (this._input !== null) {
			this._input.seek(0);
		}
		this._errHandler.reset(this);
		this._ctx = null;
		this._syntaxErrors = 0;
		this.setTrace(false);
		this._precedenceStack = [];
		this._precedenceStack.push(0);
		if (this._interp !== null) {
			this._interp.reset();
		}
	}

	/**
	 * Match current input symbol against {@code ttype}. If the symbol type
	 * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
	 * called to complete the match process.
	 *
	 * <p>If the symbol type does not match,
	 * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
	 * strategy to attempt recovery. If {@link //getBuildParseTree} is
	 * {@code true} and the token index of the symbol returned by
	 * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
	 * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
	 *
	 * @param ttype the token type to match
	 * @return the matched symbol
	 * @throws RecognitionException if the current input symbol did not match
	 * {@code ttype} and the error strategy could not recover from the
	 * mismatched symbol
	 */
	match(ttype) {
		let t = this.getCurrentToken();
		if (t.type === ttype) {
			this._errHandler.reportMatch(this);
			this.consume();
		} else {
			t = this._errHandler.recoverInline(this);
			if (this.buildParseTrees && t.tokenIndex === -1) {
				// we must have conjured up a new token during single token
				// insertion
				// if it's not the current symbol
				this._ctx.addErrorNode(t);
			}
		}
		return t;
	}

	/**
	 * Match current input symbol as a wildcard. If the symbol type matches
	 * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
	 * and {@link //consume} are called to complete the match process.
	 *
	 * <p>If the symbol type does not match,
	 * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
	 * strategy to attempt recovery. If {@link //getBuildParseTree} is
	 * {@code true} and the token index of the symbol returned by
	 * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
	 * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
	 *
	 * @return the matched symbol
	 * @throws RecognitionException if the current input symbol did not match
	 * a wildcard and the error strategy could not recover from the mismatched
	 * symbol
	 */
	matchWildcard() {
		let t = this.getCurrentToken();
		if (t.type > 0) {
			this._errHandler.reportMatch(this);
			this.consume();
		} else {
			t = this._errHandler.recoverInline(this);
			if (this._buildParseTrees && t.tokenIndex === -1) {
				// we must have conjured up a new token during single token
				// insertion
				// if it's not the current symbol
				this._ctx.addErrorNode(t);
			}
		}
		return t;
	}

	getParseListeners() {
		return this._parseListeners || [];
	}

	/**
	 * Registers {@code listener} to receive events during the parsing process.
	 *
	 * <p>To support output-preserving grammar transformations (including but not
	 * limited to left-recursion removal, automated left-factoring, and
	 * optimized code generation), calls to listener methods during the parse
	 * may differ substantially from calls made by
	 * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
	 * particular, rule entry and exit events may occur in a different order
	 * during the parse than after the parser. In addition, calls to certain
	 * rule entry methods may be omitted.</p>
	 *
	 * <p>With the following specific exceptions, calls to listener events are
	 * <em>deterministic</em>, i.e. for identical input the calls to listener
	 * methods will be the same.</p>
	 *
	 * <ul>
	 * <li>Alterations to the grammar used to generate code may change the
	 * behavior of the listener calls.</li>
	 * <li>Alterations to the command line options passed to ANTLR 4 when
	 * generating the parser may change the behavior of the listener calls.</li>
	 * <li>Changing the version of the ANTLR Tool used to generate the parser
	 * may change the behavior of the listener calls.</li>
	 * </ul>
	 *
	 * @param listener the listener to add
	 *
	 * @throws NullPointerException if {@code} listener is {@code null}
	 */
	addParseListener(listener) {
		if (listener === null) {
			throw "listener";
		}
		if (this._parseListeners === null) {
			this._parseListeners = [];
		}
		this._parseListeners.push(listener);
	}

	/**
	 * Remove {@code listener} from the list of parse listeners.
	 *
	 * <p>If {@code listener} is {@code null} or has not been added as a parse
	 * listener, this method does nothing.</p>
	 * @param listener the listener to remove
	 */
	removeParseListener(listener) {
		if (this._parseListeners !== null) {
			const idx = this._parseListeners.indexOf(listener);
			if (idx >= 0) {
				this._parseListeners.splice(idx, 1);
			}
			if (this._parseListeners.length === 0) {
				this._parseListeners = null;
			}
		}
	}

	// Remove all parse listeners.
	removeParseListeners() {
		this._parseListeners = null;
	}

	// Notify any parse listeners of an enter rule event.
	triggerEnterRuleEvent() {
		if (this._parseListeners !== null) {
			const ctx = this._ctx;
			this._parseListeners.forEach(function(listener) {
				listener.enterEveryRule(ctx);
				ctx.enterRule(listener);
			});
		}
	}

	/**
	 * Notify any parse listeners of an exit rule event.
	 * @see //addParseListener
	 */
	triggerExitRuleEvent() {
		if (this._parseListeners !== null) {
			// reverse order walk of listeners
			const ctx = this._ctx;
			this._parseListeners.slice(0).reverse().forEach(function(listener) {
				ctx.exitRule(listener);
				listener.exitEveryRule(ctx);
			});
		}
	}

	getTokenFactory() {
		return this._input.tokenSource._factory;
	}

	// Tell our token source and error strategy about a new way to create tokens.
	setTokenFactory(factory) {
		this._input.tokenSource._factory = factory;
	}

	/**
	 * The ATN with bypass alternatives is expensive to create so we create it
	 * lazily.
	 *
	 * @throws UnsupportedOperationException if the current parser does not
	 * implement the {@link //getSerializedATN()} method.
	 */
	getATNWithBypassAlts() {
		const serializedAtn = this.getSerializedATN();
		if (serializedAtn === null) {
			throw "The current parser does not support an ATN with bypass alternatives.";
		}
		let result = this.bypassAltsAtnCache[serializedAtn];
		if (result === null) {
			const deserializationOptions = new ATNDeserializationOptions();
			deserializationOptions.generateRuleBypassTransitions = true;
			result = new ATNDeserializer(deserializationOptions)
					.deserialize(serializedAtn);
			this.bypassAltsAtnCache[serializedAtn] = result;
		}
		return result;
	}

	/**
	 * The preferred method of getting a tree pattern. For example, here's a
	 * sample use:
	 *
	 * <pre>
	 * ParseTree t = parser.expr();
	 * ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
	 * MyParser.RULE_expr);
	 * ParseTreeMatch m = p.match(t);
	 * String id = m.get("ID");
	 * </pre>
	 */
	compileParseTreePattern(pattern, patternRuleIndex, lexer) {
		lexer = lexer || null;
		if (lexer === null) {
			if (this.getTokenStream() !== null) {
				const tokenSource = this.getTokenStream().tokenSource;
				if (tokenSource instanceof Lexer) {
					lexer = tokenSource;
				}
			}
		}
		if (lexer === null) {
			throw "Parser can't discover a lexer to use";
		}
		const m = new ParseTreePatternMatcher(lexer, this);
		return m.compile(pattern, patternRuleIndex);
	}

	getInputStream() {
		return this.getTokenStream();
	}

	setInputStream(input) {
		this.setTokenStream(input);
	}

	getTokenStream() {
		return this._input;
	}

	// Set the token stream and reset the parser.
	setTokenStream(input) {
		this._input = null;
		this.reset();
		this._input = input;
	}

	/**
	 * Match needs to return the current input symbol, which gets put
	 * into the label for the associated token ref; e.g., x=ID.
	 */
	getCurrentToken() {
		return this._input.LT(1);
	}

	notifyErrorListeners(msg, offendingToken, err) {
		offendingToken = offendingToken || null;
		err = err || null;
		if (offendingToken === null) {
			offendingToken = this.getCurrentToken();
		}
		this._syntaxErrors += 1;
		const line = offendingToken.line;
		const column = offendingToken.column;
		const listener = this.getErrorListenerDispatch();
		listener.syntaxError(this, offendingToken, line, column, msg, err);
	}

	/**
	 * Consume and return the {@linkplain //getCurrentToken current symbol}.
	 *
	 * <p>E.g., given the following input with {@code A} being the current
	 * lookahead symbol, this function moves the cursor to {@code B} and returns
	 * {@code A}.</p>
	 *
	 * <pre>
	 * A B
	 * ^
	 * </pre>
	 *
	 * If the parser is not in error recovery mode, the consumed symbol is added
	 * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
	 * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
	 * If the parser <em>is</em> in error recovery mode, the consumed symbol is
	 * added to the parse tree using
	 * {@link ParserRuleContext//addErrorNode(Token)}, and
	 * {@link ParseTreeListener//visitErrorNode} is called on any parse
	 * listeners.
	 */
	consume() {
		const o = this.getCurrentToken();
		if (o.type !== Token.EOF) {
			this.getInputStream().consume();
		}
		const hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
		if (this.buildParseTrees || hasListener) {
			let node;
			if (this._errHandler.inErrorRecoveryMode(this)) {
				node = this._ctx.addErrorNode(o);
			} else {
				node = this._ctx.addTokenNode(o);
			}
			node.invokingState = this.state;
			if (hasListener) {
				this._parseListeners.forEach(function(listener) {
					if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
						listener.visitErrorNode(node);
					} else if (node instanceof TerminalNode) {
						listener.visitTerminal(node);
					}
				});
			}
		}
		return o;
	}

	addContextToParseTree() {
		// add current context to parent if we have a parent
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.addChild(this._ctx);
		}
	}

	/**
	 * Always called by generated parsers upon entry to a rule. Access field
	 * {@link //_ctx} get the current context.
	 */
	enterRule(localctx, state, ruleIndex) {
		this.state = state;
		this._ctx = localctx;
		this._ctx.start = this._input.LT(1);
		if (this.buildParseTrees) {
			this.addContextToParseTree();
		}
		this.triggerEnterRuleEvent();
	}

	exitRule() {
		this._ctx.stop = this._input.LT(-1);
		// trigger event on _ctx, before it reverts to parent
		this.triggerExitRuleEvent();
		this.state = this._ctx.invokingState;
		this._ctx = this._ctx.parentCtx;
	}

	enterOuterAlt(localctx, altNum) {
		localctx.setAltNumber(altNum);
		// if we have new localctx, make sure we replace existing ctx
		// that is previous child of parse tree
		if (this.buildParseTrees && this._ctx !== localctx) {
			if (this._ctx.parentCtx !== null) {
				this._ctx.parentCtx.removeLastChild();
				this._ctx.parentCtx.addChild(localctx);
			}
		}
		this._ctx = localctx;
	}

	/**
	 * Get the precedence level for the top-most precedence rule.
	 *
	 * @return The precedence level for the top-most precedence rule, or -1 if
	 * the parser context is not nested within a precedence rule.
	 */
	getPrecedence() {
		if (this._precedenceStack.length === 0) {
			return -1;
		} else {
			return this._precedenceStack[this._precedenceStack.length-1];
		}
	}

	enterRecursionRule(localctx, state, ruleIndex, precedence) {
	   this.state = state;
	   this._precedenceStack.push(precedence);
	   this._ctx = localctx;
	   this._ctx.start = this._input.LT(1);
	   this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
   }

	// Like {@link //enterRule} but for recursive rules.
	pushNewRecursionContext(localctx, state, ruleIndex) {
		const previous = this._ctx;
		previous.parentCtx = localctx;
		previous.invokingState = state;
		previous.stop = this._input.LT(-1);

		this._ctx = localctx;
		this._ctx.start = previous.start;
		if (this.buildParseTrees) {
			this._ctx.addChild(previous);
		}
		this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
	}

	unrollRecursionContexts(parentCtx) {
		this._precedenceStack.pop();
		this._ctx.stop = this._input.LT(-1);
		const retCtx = this._ctx; // save current ctx (return value)
		// unroll so _ctx is as it was before call to recursive method
		const parseListeners = this.getParseListeners();
		if (parseListeners !== null && parseListeners.length > 0) {
			while (this._ctx !== parentCtx) {
				this.triggerExitRuleEvent();
				this._ctx = this._ctx.parentCtx;
			}
		} else {
			this._ctx = parentCtx;
		}
		// hook into tree
		retCtx.parentCtx = parentCtx;
		if (this.buildParseTrees && parentCtx !== null) {
			// add return ctx into invoking rule's tree
			parentCtx.addChild(retCtx);
		}
	}

	getInvokingContext(ruleIndex) {
		let ctx = this._ctx;
		while (ctx !== null) {
			if (ctx.ruleIndex === ruleIndex) {
				return ctx;
			}
			ctx = ctx.parentCtx;
		}
		return null;
	}

	precpred(localctx, precedence) {
		return precedence >= this._precedenceStack[this._precedenceStack.length-1];
	}

	inContext(context) {
		// TODO: useful in parser?
		return false;
	}

	/**
	 * Checks whether or not {@code symbol} can follow the current state in the
	 * ATN. The behavior of this method is equivalent to the following, but is
	 * implemented such that the complete context-sensitive follow set does not
	 * need to be explicitly constructed.
	 *
	 * <pre>
	 * return getExpectedTokens().contains(symbol);
	 * </pre>
	 *
	 * @param symbol the symbol type to check
	 * @return {@code true} if {@code symbol} can follow the current state in
	 * the ATN, otherwise {@code false}.
	 */
	isExpectedToken(symbol) {
		const atn = this._interp.atn;
		let ctx = this._ctx;
		const s = atn.states[this.state];
		let following = atn.nextTokens(s);
		if (following.contains(symbol)) {
			return true;
		}
		if (!following.contains(Token.EPSILON)) {
			return false;
		}
		while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
			const invokingState = atn.states[ctx.invokingState];
			const rt = invokingState.transitions[0];
			following = atn.nextTokens(rt.followState);
			if (following.contains(symbol)) {
				return true;
			}
			ctx = ctx.parentCtx;
		}
		if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Computes the set of input symbols which could follow the current parser
	 * state and context, as given by {@link //getState} and {@link //getContext},
	 * respectively.
	 *
	 * @see ATN//getExpectedTokens(int, RuleContext)
	 */
	getExpectedTokens() {
		return this._interp.atn.getExpectedTokens(this.state, this._ctx);
	}

	getExpectedTokensWithinCurrentRule() {
		const atn = this._interp.atn;
		const s = atn.states[this.state];
		return atn.nextTokens(s);
	}

	// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.
	getRuleIndex(ruleName) {
		const ruleIndex = this.getRuleIndexMap()[ruleName];
		if (ruleIndex !== null) {
			return ruleIndex;
		} else {
			return -1;
		}
	}

	/**
	 * Return List&lt;String&gt; of the rule names in your parser instance
	 * leading up to a call to the current rule. You could override if
	 * you want more details such as the file/line info of where
	 * in the ATN a rule is invoked.
	 *
	 * this is very useful for error messages.
	 */
	getRuleInvocationStack(p) {
		p = p || null;
		if (p === null) {
			p = this._ctx;
		}
		const stack = [];
		while (p !== null) {
			// compute what follows who invoked us
			const ruleIndex = p.ruleIndex;
			if (ruleIndex < 0) {
				stack.push("n/a");
			} else {
				stack.push(this.ruleNames[ruleIndex]);
			}
			p = p.parentCtx;
		}
		return stack;
	}

	// For debugging and other purposes.
	getDFAStrings() {
		return this._interp.decisionToDFA.toString();
	}

	// For debugging and other purposes.
	dumpDFA() {
		let seenOne = false;
		for (let i = 0; i < this._interp.decisionToDFA.length; i++) {
			const dfa = this._interp.decisionToDFA[i];
			if (dfa.states.length > 0) {
				if (seenOne) {
					console.log();
				}
				this.printer.println("Decision " + dfa.decision + ":");
				this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
				seenOne = true;
			}
		}
	}

	/*
		"			printer = function() {\r\n" +
		"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
		"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
		"			};\r\n" +
		*/
	getSourceName() {
		return this._input.sourceName;
	}

	/**
	 * During a parse is sometimes useful to listen in on the rule entry and exit
	 * events as well as token matches. this is for quick and dirty debugging.
	 */
	setTrace(trace) {
		if (!trace) {
			this.removeParseListener(this._tracer);
			this._tracer = null;
		} else {
			if (this._tracer !== null) {
				this.removeParseListener(this._tracer);
			}
			this._tracer = new TraceListener(this);
			this.addParseListener(this._tracer);
		}
	}
}

/**
 * this field maps from the serialized ATN string to the deserialized {@link
 * ATN} with
 * bypass alternatives.
 *
 * @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
 */
Parser.bypassAltsAtnCache = {};

module.exports = Parser;

},{"./Lexer":9,"./Recognizer":13,"./Token":15,"./atn/ATNDeserializationOptions":20,"./atn/ATNDeserializer":21,"./error/ErrorStrategy":39,"./tree/Tree":45}],11:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const RuleContext = require('./RuleContext');
const Tree = require('./tree/Tree');
const INVALID_INTERVAL = Tree.INVALID_INTERVAL;
const TerminalNode = Tree.TerminalNode;
const TerminalNodeImpl = Tree.TerminalNodeImpl;
const ErrorNodeImpl = Tree.ErrorNodeImpl;
const Interval = require("./IntervalSet").Interval;

/**
 * A rule invocation record for parsing.
 *
 *  Contains all of the information about the current rule not stored in the
 *  RuleContext. It handles parse tree children list, Any ATN state
 *  tracing, and the default values available for rule indications:
 *  start, stop, rule index, current alt number, current
 *  ATN state.
 *
 *  Subclasses made for each rule and grammar track the parameters,
 *  return values, locals, and labels specific to that rule. These
 *  are the objects that are returned from rules.
 *
 *  Note text is not an actual field of a rule return value; it is computed
 *  from start and stop using the input stream's toString() method.  I
 *  could add a ctor to this so that we can pass in and store the input
 *  stream, but I'm not sure we want to do that.  It would seem to be undefined
 *  to get the .text property anyway if the rule matches tokens from multiple
 *  input streams.
 *
 *  I do not use getters for fields of objects that are used simply to
 *  group values such as this aggregate.  The getters/setters are there to
 *  satisfy the superclass interface.
 */
class ParserRuleContext extends RuleContext {
	constructor(parent, invokingStateNumber) {
		parent = parent || null;
		invokingStateNumber = invokingStateNumber || null;
		super(parent, invokingStateNumber);
		this.ruleIndex = -1;
		/**
		 * If we are debugging or building a parse tree for a visitor,
		 * we need to track all of the tokens and rule invocations associated
		 * with this rule's context. This is empty for parsing w/o tree constr.
		 * operation because we don't the need to track the details about
		 * how we parse this rule.
		 */
		this.children = null;
		this.start = null;
		this.stop = null;
		/**
		 * The exception that forced this rule to return. If the rule successfully
		 * completed, this is {@code null}.
		 */
		this.exception = null;
	}

	// COPY a ctx (I'm deliberately not using copy constructor)
	copyFrom(ctx) {
		// from RuleContext
		this.parentCtx = ctx.parentCtx;
		this.invokingState = ctx.invokingState;
		this.children = null;
		this.start = ctx.start;
		this.stop = ctx.stop;
		// copy any error nodes to alt label node
		if(ctx.children) {
			this.children = [];
			// reset parent pointer for any error nodes
			ctx.children.map(function(child) {
				if (child instanceof ErrorNodeImpl) {
					this.children.push(child);
					child.parentCtx = this;
				}
			}, this);
		}
	}

	// Double dispatch methods for listeners
	enterRule(listener) {
	}

	exitRule(listener) {
	}

	// Does not set parent link; other add methods do that
	addChild(child) {
		if (this.children === null) {
			this.children = [];
		}
		this.children.push(child);
		return child;
	}

	/** Used by enterOuterAlt to toss out a RuleContext previously added as
	 * we entered a rule. If we have // label, we will need to remove
	 * generic ruleContext object.
	 */
	removeLastChild() {
		if (this.children !== null) {
			this.children.pop();
		}
	}

	addTokenNode(token) {
		const node = new TerminalNodeImpl(token);
		this.addChild(node);
		node.parentCtx = this;
		return node;
	}

	addErrorNode(badToken) {
		const node = new ErrorNodeImpl(badToken);
		this.addChild(node);
		node.parentCtx = this;
		return node;
	}

	getChild(i, type) {
		type = type || null;
		if (this.children === null || i < 0 || i >= this.children.length) {
			return null;
		}
		if (type === null) {
			return this.children[i];
		} else {
			for(let j=0; j<this.children.length; j++) {
				const child = this.children[j];
				if(child instanceof type) {
					if(i===0) {
						return child;
					} else {
						i -= 1;
					}
				}
			}
			return null;
		}
	}

	getToken(ttype, i) {
		if (this.children === null || i < 0 || i >= this.children.length) {
			return null;
		}
		for(let j=0; j<this.children.length; j++) {
			const child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					if(i===0) {
						return child;
					} else {
						i -= 1;
					}
				}
			}
		}
		return null;
	}

	getTokens(ttype ) {
		if (this.children=== null) {
			return [];
		} else {
			const tokens = [];
			for(let j=0; j<this.children.length; j++) {
				const child = this.children[j];
				if (child instanceof TerminalNode) {
					if (child.symbol.type === ttype) {
						tokens.push(child);
					}
				}
			}
			return tokens;
		}
	}

	getTypedRuleContext(ctxType, i) {
		return this.getChild(i, ctxType);
	}

	getTypedRuleContexts(ctxType) {
		if (this.children=== null) {
			return [];
		} else {
			const contexts = [];
			for(let j=0; j<this.children.length; j++) {
				const child = this.children[j];
				if (child instanceof ctxType) {
					contexts.push(child);
				}
			}
			return contexts;
		}
	}

	getChildCount() {
		if (this.children=== null) {
			return 0;
		} else {
			return this.children.length;
		}
	}

	getSourceInterval() {
		if( this.start === null || this.stop === null) {
			return INVALID_INTERVAL;
		} else {
			return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
		}
	}
}

RuleContext.EMPTY = new ParserRuleContext();

class InterpreterRuleContext extends ParserRuleContext {
	constructor(parent, invokingStateNumber, ruleIndex) {
		super(parent, invokingStateNumber);
		this.ruleIndex = ruleIndex;
	}
}

module.exports = ParserRuleContext;

},{"./IntervalSet":7,"./RuleContext":14,"./tree/Tree":45}],12:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const RuleContext = require('./RuleContext');
const {Hash, Map, equalArrays} = require('./Utils');

class PredictionContext {

	constructor(cachedHashCode) {
		this.cachedHashCode = cachedHashCode;
	}

	/**
	 * Stores the computed hash code of this {@link PredictionContext}. The hash
	 * code is computed in parts to match the following reference algorithm.
	 *
	 * <pre>
	 * private int referenceHashCode() {
	 * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
	 * //INITIAL_HASH});
	 *
	 * for (int i = 0; i &lt; {@link //size()}; i++) {
	 * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
	 * getParent}(i));
	 * }
	 *
	 * for (int i = 0; i &lt; {@link //size()}; i++) {
	 * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
	 * //getReturnState getReturnState}(i));
	 * }
	 *
	 * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
	 * //size()});
	 * return hash;
	 * }
	 * </pre>
	 * This means only the {@link //EMPTY} context is in set.
	 */
	isEmpty() {
		return this === PredictionContext.EMPTY;
	}

	hasEmptyPath() {
		return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
	}

	hashCode() {
		return this.cachedHashCode;
	}

	updateHashCode(hash) {
		hash.update(this.cachedHashCode);
	}
}

/**
 * Represents {@code $} in local context prediction, which means wildcard.
 * {@code//+x =//}.
 */
PredictionContext.EMPTY = null;

/**
 * Represents {@code $} in an array in full context mode, when {@code $}
 * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
 * {@code $} = {@link //EMPTY_RETURN_STATE}.
 */
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;


/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

/**
 * Used to cache {@link PredictionContext} objects. Its used for the shared
 * context cash associated with contexts in DFA states. This cache
 * can be used for both lexers and parsers.
 */
class PredictionContextCache {

	constructor() {
		this.cache = new Map();
	}

	/**
	 * Add a context to the cache and return it. If the context already exists,
	 * return that one instead and do not add a new context to the cache.
	 * Protect shared cache from unsafe thread access.
	 */
	add(ctx) {
		if (ctx === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY;
		}
		const existing = this.cache.get(ctx) || null;
		if (existing !== null) {
			return existing;
		}
		this.cache.put(ctx, ctx);
		return ctx;
	}

	get(ctx) {
		return this.cache.get(ctx) || null;
	}

	get length(){
		return this.cache.length;
	}
}


class SingletonPredictionContext extends PredictionContext {

	constructor(parent, returnState) {
		let hashCode = 0;
		const hash = new Hash();
		if(parent !== null) {
			hash.update(parent, returnState);
		} else {
			hash.update(1);
		}
		hashCode = hash.finish();
		super(hashCode);
		this.parentCtx = parent;
		this.returnState = returnState;
	}

	getParent(index) {
		return this.parentCtx;
	}

	getReturnState(index) {
		return this.returnState;
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof SingletonPredictionContext)) {
			return false;
		} else if (this.hashCode() !== other.hashCode()) {
			return false; // can't be same if hash is different
		} else {
			if(this.returnState !== other.returnState)
				return false;
			else if(this.parentCtx==null)
				return other.parentCtx==null
			else
				return this.parentCtx.equals(other.parentCtx);
		}
	}

	toString() {
		const up = this.parentCtx === null ? "" : this.parentCtx.toString();
		if (up.length === 0) {
			if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
				return "$";
			} else {
				return "" + this.returnState;
			}
		} else {
			return "" + this.returnState + " " + up;
		}
	}

	get length(){
		return 1;
	}

	static create(parent, returnState) {
		if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
			// someone can pass in the bits of an array ctx that mean $
			return PredictionContext.EMPTY;
		} else {
			return new SingletonPredictionContext(parent, returnState);
		}
	}
}

class EmptyPredictionContext extends SingletonPredictionContext {

	constructor() {
		super(null, PredictionContext.EMPTY_RETURN_STATE);
	}

	isEmpty() {
		return true;
	}

	getParent(index) {
		return null;
	}

	getReturnState(index) {
		return this.returnState;
	}

	equals(other) {
		return this === other;
	}

	toString() {
		return "$";
	}
}


PredictionContext.EMPTY = new EmptyPredictionContext();

class ArrayPredictionContext extends PredictionContext {

	constructor(parents, returnStates) {
		/**
		 * Parent can be null only if full ctx mode and we make an array
		 * from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
		 * null parent and
		 * returnState == {@link //EMPTY_RETURN_STATE}.
		 */
		const h = new Hash();
		h.update(parents, returnStates);
		const hashCode = h.finish();
		super(hashCode);
		this.parents = parents;
		this.returnStates = returnStates;
		return this;
	}

	isEmpty() {
		// since EMPTY_RETURN_STATE can only appear in the last position, we
		// don't need to verify that size==1
		return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
	}

	getParent(index) {
		return this.parents[index];
	}

	getReturnState(index) {
		return this.returnStates[index];
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof ArrayPredictionContext)) {
			return false;
		} else if (this.hashCode() !== other.hashCode()) {
			return false; // can't be same if hash is different
		} else {
			return equalArrays(this.returnStates, other.returnStates) &&
				equalArrays(this.parents, other.parents);
		}
	}

	toString() {
		if (this.isEmpty()) {
			return "[]";
		} else {
			let s = "[";
			for (let i = 0; i < this.returnStates.length; i++) {
				if (i > 0) {
					s = s + ", ";
				}
				if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
					s = s + "$";
					continue;
				}
				s = s + this.returnStates[i];
				if (this.parents[i] !== null) {
					s = s + " " + this.parents[i];
				} else {
					s = s + "null";
				}
			}
			return s + "]";
		}
	}

	get length(){
		return this.returnStates.length;
	}
}


/**
 * Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
 * Return {@link //EMPTY} if {@code outerContext} is empty or null.
 */
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	const parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	const state = atn.states[outerContext.invokingState];
	const transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	const s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

/**
 * Merge two {@link SingletonPredictionContext} instances.
 *
 * <p>Stack tops equal, parents merge is same; return left graph.<br>
 * <embed src="images/SingletonMerge_SameRootSamePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Same stack top, parents differ; merge parents giving array node, then
 * remainders of those graphs. A new root node is created to point to the
 * merged parents.<br>
 * <embed src="images/SingletonMerge_SameRootDiffPar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Different stack tops pointing to same parent. Make array node for the
 * root where both element in the root point to the same (original)
 * parent.<br>
 * <embed src="images/SingletonMerge_DiffRootSamePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Different stack tops pointing to different parents. Make array node for
 * the root where each element points to the corresponding original
 * parent.<br>
 * <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
 * type="image/svg+xml"/></p>
 *
 * @param a the first {@link SingletonPredictionContext}
 * @param b the second {@link SingletonPredictionContext}
 * @param rootIsWildcard {@code true} if this is a local-context merge,
 * otherwise false to indicate a full-context merge
 * @param mergeCache
 */
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		let previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	const rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		const parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		const spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		let singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			const payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			const parents = [ singleParent, singleParent ];
			const apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		const payloads = [ a.returnState, b.returnState ];
		let parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		const a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

/**
 * Handle case where at least one of {@code a} or {@code b} is
 * {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
 * to represent {@link //EMPTY}.
 *
 * <h2>Local-Context Merges</h2>
 *
 * <p>These local-context merge operations are used when {@code rootIsWildcard}
 * is true.</p>
 *
 * <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
 * <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
 *
 * <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
 * {@code //EMPTY}; return left graph.<br>
 * <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
 *
 * <p>Special case of last merge if local context.<br>
 * <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
 *
 * <h2>Full-Context Merges</h2>
 *
 * <p>These full-context merge operations are used when {@code rootIsWildcard}
 * is false.</p>
 *
 * <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
 *
 * <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
 * null parent).<br>
 * <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
 *
 * <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
 *
 * @param a the first {@link SingletonPredictionContext}
 * @param b the second {@link SingletonPredictionContext}
 * @param rootIsWildcard {@code true} if this is a local-context merge,
 * otherwise false to indicate a full-context merge
 */
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			const payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			const parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			const payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			const parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

/**
 * Merge two {@link ArrayPredictionContext} instances.
 *
 * <p>Different tops, different parents.<br>
 * <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, same parents.<br>
 * <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, different parents.<br>
 * <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, all shared parents.<br>
 * <embed src="images/ArrayMerge_ShareTopSharePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Equal tops, merge parents and reduce top to
 * {@link SingletonPredictionContext}.<br>
 * <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
 */
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		let previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	let i = 0; // walks a
	let j = 0; // walks b
	let k = 0; // walks target M array

	let mergedReturnStates = [];
	let mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		const a_parent = a.parents[i];
		const b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			const payload = a.returnStates[i];
			// $+$ = $
			const bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			const ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				mergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (let p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (let p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			const a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	const M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

/**
 * Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
 * ones.
 */
function combineCommonParents(parents) {
	const uniqueParents = new Map();

	for (let p = 0; p < parents.length; p++) {
		const parent = parents[p];
		if (!(uniqueParents.containsKey(parent))) {
			uniqueParents.put(parent, parent);
		}
	}
	for (let q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents.get(parents[q]);
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	let existing = visited.get(context) || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited.put(context, existing);
		return existing;
	}
	let changed = false;
	let parents = [];
	for (let i = 0; i < parents.length; i++) {
		const parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (let j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited.put(context, context);
		return context;
	}
	let updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited.put(updated, updated);
	visited.put(context, updated);

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = new Map();
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited.containsKey(context)) {
			return nodes;
		}
		visited.put(context, context);
		nodes.push(context);
		for (let i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

module.exports = {
	merge,
	PredictionContext,
	PredictionContextCache,
	SingletonPredictionContext,
	predictionContextFromRuleContext,
	getCachedPredictionContext
}

},{"./RuleContext":14,"./Utils":16}],13:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./Token');
const {ConsoleErrorListener} = require('./error/ErrorListener');
const {ProxyErrorListener} = require('./error/ErrorListener');

class Recognizer {
    constructor() {
        this._listeners = [ ConsoleErrorListener.INSTANCE ];
        this._interp = null;
        this._stateNumber = -1;
    }

    checkVersion(toolVersion) {
        const runtimeVersion = "4.9.3";
        if (runtimeVersion!==toolVersion) {
            console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
        }
    }

    addErrorListener(listener) {
        this._listeners.push(listener);
    }

    removeErrorListeners() {
        this._listeners = [];
    }

    getLiteralNames() {
        return Object.getPrototypeOf(this).constructor.literalNames || [];
    }

    getSymbolicNames() {
        return Object.getPrototypeOf(this).constructor.symbolicNames || [];
    }

    getTokenNames() {
        if(!this.tokenNames) {
            const literalNames = this.getLiteralNames();
            const symbolicNames = this.getSymbolicNames();
            const length = literalNames.length > symbolicNames.length ? literalNames.length : symbolicNames.length;
            this.tokenNames = [];
            for(let i=0; i<length; i++) {
                this.tokenNames[i] = literalNames[i] || symbolicNames[i] || "<INVALID";
            }
        }
        return this.tokenNames;
    }

    getTokenTypeMap() {
        const tokenNames = this.getTokenNames();
        if (tokenNames===null) {
            throw("The current recognizer does not provide a list of token names.");
        }
        let result = this.tokenTypeMapCache[tokenNames];
        if(result===undefined) {
            result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
            result.EOF = Token.EOF;
            this.tokenTypeMapCache[tokenNames] = result;
        }
        return result;
    }

    /**
     * Get a map from rule names to rule indexes.
     * <p>Used for XPath and tree pattern compilation.</p>
     */
    getRuleIndexMap() {
        const ruleNames = this.ruleNames;
        if (ruleNames===null) {
            throw("The current recognizer does not provide a list of rule names.");
        }
        let result = this.ruleIndexMapCache[ruleNames]; // todo: should it be Recognizer.ruleIndexMapCache ?
        if(result===undefined) {
            result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
            this.ruleIndexMapCache[ruleNames] = result;
        }
        return result;
    }

    getTokenType(tokenName) {
        const ttype = this.getTokenTypeMap()[tokenName];
        if (ttype !==undefined) {
            return ttype;
        } else {
            return Token.INVALID_TYPE;
        }
    }

    // What is the error header, normally line/character position information?
    getErrorHeader(e) {
        const line = e.getOffendingToken().line;
        const column = e.getOffendingToken().column;
        return "line " + line + ":" + column;
    }

    /**
     * How should a token be displayed in an error message? The default
     * is to display just the text, but during development you might
     * want to have a lot of information spit out.  Override in that case
     * to use t.toString() (which, for CommonToken, dumps everything about
     * the token). This is better than forcing you to override a method in
     * your token objects because you don't have to go modify your lexer
     * so that it creates a new Java type.
     *
     * @deprecated This method is not called by the ANTLR 4 Runtime. Specific
     * implementations of {@link ANTLRErrorStrategy} may provide a similar
     * feature when necessary. For example, see
     * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/
    getTokenErrorDisplay(t) {
        if (t===null) {
            return "<no token>";
        }
        let s = t.text;
        if (s===null) {
            if (t.type===Token.EOF) {
                s = "<EOF>";
            } else {
                s = "<" + t.type + ">";
            }
        }
        s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
        return "'" + s + "'";
    }

    getErrorListenerDispatch() {
        return new ProxyErrorListener(this._listeners);
    }

    /**
     * subclass needs to override these if there are sempreds or actions
     * that the ATN interp needs to execute
     */
    sempred(localctx, ruleIndex, actionIndex) {
        return true;
    }

    precpred(localctx , precedence) {
        return true;
    }

    get state(){
        return this._stateNumber;
    }

    set state(state) {
        this._stateNumber = state;
    }
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};

module.exports = Recognizer;

},{"./Token":15,"./error/ErrorListener":38}],14:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {RuleNode} = require('./tree/Tree');
const {INVALID_INTERVAL} = require('./tree/Tree');
const Trees = require('./tree/Trees');

class RuleContext extends RuleNode {
	/** A rule context is a record of a single rule invocation. It knows
	 * which context invoked it, if any. If there is no parent context, then
	 * naturally the invoking state is not valid.  The parent link
	 * provides a chain upwards from the current rule invocation to the root
	 * of the invocation tree, forming a stack. We actually carry no
	 * information about the rule associated with this context (except
	 * when parsing). We keep only the state number of the invoking state from
	 * the ATN submachine that invoked this. Contrast this with the s
	 * pointer inside ParserRuleContext that tracks the current state
	 * being "executed" for the current rule.
	 *
	 * The parent contexts are useful for computing lookahead sets and
	 * getting error information.
	 *
	 * These objects are used during parsing and prediction.
	 * For the special case of parsers, we use the subclass
	 * ParserRuleContext.
	 *
	 * @see ParserRuleContext
	 */
	constructor(parent, invokingState) {
		// What context invoked this rule?
		super();
		this.parentCtx = parent || null;
		/**
		 * What state invoked the rule associated with this context?
		 * The "return address" is the followState of invokingState
		 * If parent is null, this should be -1.
		 */
		this.invokingState = invokingState || -1;
	}

	depth() {
		let n = 0;
		let p = this;
		while (p !== null) {
			p = p.parentCtx;
			n += 1;
		}
		return n;
	}

	/**
	 * A context is empty if there is no invoking state; meaning nobody call
	 * current context.
	 */
	isEmpty() {
		return this.invokingState === -1;
	}

// satisfy the ParseTree / SyntaxTree interface
	getSourceInterval() {
		return INVALID_INTERVAL;
	}

	getRuleContext() {
		return this;
	}

	getPayload() {
		return this;
	}

	/**
	 * Return the combined text of all child nodes. This method only considers
	 * tokens which have been added to the parse tree.
	 * <p>
	 * Since tokens on hidden channels (e.g. whitespace or comments) are not
	 * added to the parse trees, they will not appear in the output of this
	 * method.
	 */
	getText() {
		if (this.getChildCount() === 0) {
			return "";
		} else {
			return this.children.map(function(child) {
				return child.getText();
			}).join("");
		}
	}

	/**
	 * For rule associated with this parse tree internal node, return
	 * the outer alternative number used to match the input. Default
	 * implementation does not compute nor store this alt num. Create
	 * a subclass of ParserRuleContext with backing field and set
	 * option contextSuperClass.
	 * to set it.
	 */
	getAltNumber() {
	    // use constant value of ATN.INVALID_ALT_NUMBER to avoid circular dependency
	    return 0;
    }

	/**
	 * Set the outer alternative number for this context node. Default
	 * implementation does nothing to avoid backing field overhead for
	 * trees that don't need it.  Create
	 * a subclass of ParserRuleContext with backing field and set
	 * option contextSuperClass.
	 */
	setAltNumber(altNumber) { }

	getChild(i) {
		return null;
	}

	getChildCount() {
		return 0;
	}

	accept(visitor) {
		return visitor.visitChildren(this);
	}

	/**
	 * Print out a whole tree, not just a node, in LISP format
	 * (root child1 .. childN). Print just a node if this is a leaf.
	 */
	toStringTree(ruleNames, recog) {
		return Trees.toStringTree(this, ruleNames, recog);
	}

	toString(ruleNames, stop) {
		ruleNames = ruleNames || null;
		stop = stop || null;
		let p = this;
		let s = "[";
		while (p !== null && p !== stop) {
			if (ruleNames === null) {
				if (!p.isEmpty()) {
					s += p.invokingState;
				}
			} else {
				const ri = p.ruleIndex;
				const ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
						: "" + ri;
				s += ruleName;
			}
			if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
				s += " ";
			}
			p = p.parentCtx;
		}
		s += "]";
		return s;
	}
}

module.exports = RuleContext;

},{"./tree/Tree":45,"./tree/Trees":46}],15:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * A token has properties: text, type, line, character position in the line
 * (so we can ignore tabs), token channel, index, and source from which
 * we obtained this token.
 */
class Token {
	constructor() {
		this.source = null;
		this.type = null; // token type of the token
		this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
		this.start = null; // optional; return -1 if not implemented.
		this.stop = null; // optional; return -1 if not implemented.
		this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
		this.line = null; // line=1..n of the 1st character
		this.column = null; // beginning of the line at which it occurs, 0..n-1
		this._text = null; // text of the token.
	}

	getTokenSource() {
		return this.source[0];
	}

	getInputStream() {
		return this.source[1];
	}

	get text(){
		return this._text;
	}

	set text(text) {
		this._text = text;
	}
}

Token.INVALID_TYPE = 0;

/**
 * During lookahead operations, this "token" signifies we hit rule end ATN state
 * and did not follow it despite needing to.
 */
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

/**
 * All tokens go to the parser (unless skip() is called in that rule)
 * on a particular "channel". The parser tunes to a particular channel
 * so that whitespace etc... can go to the parser on a "hidden" channel.
 */
Token.DEFAULT_CHANNEL = 0;

/**
 * Anything on different channel than DEFAULT_CHANNEL is not parsed
 * by parser.
 */
Token.HIDDEN_CHANNEL = 1;


class CommonToken extends Token {
	constructor(source, type, channel, start, stop) {
		super();
		this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
		this.type = type !== undefined ? type : null;
		this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
		this.start = start !== undefined ? start : -1;
		this.stop = stop !== undefined ? stop : -1;
		this.tokenIndex = -1;
		if (this.source[0] !== null) {
			this.line = source[0].line;
			this.column = source[0].column;
		} else {
			this.column = -1;
		}
	}

	/**
	 * Constructs a new {@link CommonToken} as a copy of another {@link Token}.
	 *
	 * <p>
	 * If {@code oldToken} is also a {@link CommonToken} instance, the newly
	 * constructed token will share a reference to the {@link //text} field and
	 * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
	 * be assigned the result of calling {@link //getText}, and {@link //source}
	 * will be constructed from the result of {@link Token//getTokenSource} and
	 * {@link Token//getInputStream}.</p>
	 *
	 * @param oldToken The token to copy.
	 */
	clone() {
		const t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);
		t.tokenIndex = this.tokenIndex;
		t.line = this.line;
		t.column = this.column;
		t.text = this.text;
		return t;
	}

	toString() {
		let txt = this.text;
		if (txt !== null) {
			txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
		} else {
			txt = "<no text>";
		}
		return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
				txt + "',<" + this.type + ">" +
				(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
				this.line + ":" + this.column + "]";
	}

	get text(){
		if (this._text !== null) {
			return this._text;
		}
		const input = this.getInputStream();
		if (input === null) {
			return null;
		}
		const n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	}

	set text(text) {
		this._text = text;
	}
}

/**
 * An empty {@link Pair} which is used as the default value of
 * {@link //source} for tokens that do not have a source.
 */
CommonToken.EMPTY_SOURCE = [ null, null ];

module.exports = {
	Token,
	CommonToken
}

},{}],16:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function valueToString(v) {
    return v === null ? "null" : v;
}

function arrayToString(a) {
    return Array.isArray(a) ? ("[" + a.map(valueToString).join(", ") + "]") : "null";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    const key = this.toString();
    let h1b, k1;

    const remainder = key.length & 3; // key.length % 4
    const bytes = key.length - remainder;
    let h1 = String.prototype.seed;
    const c1 = 0xcc9e2d51;
    const c2 = 0x1b873593;
    let i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a ? a.equals(b) : a==b;
}

function standardHashCodeFunction(a) {
    return a ? a.hashCode() : -1;
}

class Set {
    constructor(hashFunction, equalsFunction) {
        this.data = {};
        this.hashFunction = hashFunction || standardHashCodeFunction;
        this.equalsFunction = equalsFunction || standardEqualsFunction;
    }

    add(value) {
        const hash = this.hashFunction(value);
        const key = "hash_" + hash;
        if (key in this.data) {
            const values = this.data[key];
            for (let i = 0; i < values.length; i++) {
                if (this.equalsFunction(value, values[i])) {
                    return values[i];
                }
            }
            values.push(value);
            return value;
        } else {
            this.data[key] = [value];
            return value;
        }
    }

    contains(value) {
        return this.get(value) != null;
    }

    get(value) {
        const hash = this.hashFunction(value);
        const key = "hash_" + hash;
        if (key in this.data) {
            const values = this.data[key];
            for (let i = 0; i < values.length; i++) {
                if (this.equalsFunction(value, values[i])) {
                    return values[i];
                }
            }
        }
        return null;
    }

    values() {
        let l = [];
        for (const key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l.concat(this.data[key]);
            }
        }
        return l;
    }

    toString() {
        return arrayToString(this.values());
    }

    get length(){
        let l = 0;
        for (const key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
}


class BitSet {
    constructor() {
        this.data = [];
    }

    add(value) {
        this.data[value] = true;
    }

    or(set) {
        const bits = this;
        Object.keys(set.data).map(function (alt) {
            bits.add(alt);
        });
    }

    remove(value) {
        delete this.data[value];
    }

    contains(value) {
        return this.data[value] === true;
    }

    values() {
        return Object.keys(this.data);
    }

    minValue() {
        return Math.min.apply(null, this.values());
    }

    hashCode() {
        const hash = new Hash();
        hash.update(this.values());
        return hash.finish();
    }

    equals(other) {
        if (!(other instanceof BitSet)) {
            return false;
        }
        return this.hashCode() === other.hashCode();
    }

    toString() {
        return "{" + this.values().join(", ") + "}";
    }

    get length(){
        return this.values().length;
    }
}


class Map {
    constructor(hashFunction, equalsFunction) {
        this.data = {};
        this.hashFunction = hashFunction || standardHashCodeFunction;
        this.equalsFunction = equalsFunction || standardEqualsFunction;
    }

    put(key, value) {
        const hashKey = "hash_" + this.hashFunction(key);
        if (hashKey in this.data) {
            const entries = this.data[hashKey];
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (this.equalsFunction(key, entry.key)) {
                    const oldValue = entry.value;
                    entry.value = value;
                    return oldValue;
                }
            }
            entries.push({key:key, value:value});
            return value;
        } else {
            this.data[hashKey] = [{key:key, value:value}];
            return value;
        }
    }

    containsKey(key) {
        const hashKey = "hash_" + this.hashFunction(key);
        if(hashKey in this.data) {
            const entries = this.data[hashKey];
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (this.equalsFunction(key, entry.key))
                    return true;
            }
        }
        return false;
    }

    get(key) {
        const hashKey = "hash_" + this.hashFunction(key);
        if(hashKey in this.data) {
            const entries = this.data[hashKey];
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (this.equalsFunction(key, entry.key))
                    return entry.value;
            }
        }
        return null;
    }

    entries() {
        let l = [];
        for (const key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l.concat(this.data[key]);
            }
        }
        return l;
    }

    getKeys() {
        return this.entries().map(function(e) {
            return e.key;
        });
    }

    getValues() {
        return this.entries().map(function(e) {
                return e.value;
        });
    }

    toString() {
        const ss = this.entries().map(function(entry) {
            return '{' + entry.key + ':' + entry.value + '}';
        });
        return '[' + ss.join(", ") + ']';
    }

    get length(){
        let l = 0;
        for (const hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
}


class AltDict {
    constructor() {
        this.data = {};
    }

    get(key) {
        key = "k-" + key;
        if (key in this.data) {
            return this.data[key];
        } else {
            return null;
        }
    }

    put(key, value) {
        key = "k-" + key;
        this.data[key] = value;
    }

    values() {
        const data = this.data;
        const keys = Object.keys(this.data);
        return keys.map(function (key) {
            return data[key];
        });
    }
}


class DoubleDict {
    constructor(defaultMapCtor) {
        this.defaultMapCtor = defaultMapCtor || Map;
        this.cacheMap = new this.defaultMapCtor();
    }

    get(a, b) {
        const d = this.cacheMap.get(a) || null;
        return d === null ? null : (d.get(b) || null);
    }

    set(a, b, o) {
        let d = this.cacheMap.get(a) || null;
        if (d === null) {
            d = new this.defaultMapCtor();
            this.cacheMap.put(a, d);
        }
        d.put(b, o);
    }
}

class Hash {
    constructor() {
        this.count = 0;
        this.hash = 0;
    }

    update() {
        for(let i=0;i<arguments.length;i++) {
            const value = arguments[i];
            if (value == null)
                continue;
            if(Array.isArray(value))
                this.update.apply(this, value);
            else {
                let k = 0;
                switch (typeof(value)) {
                    case 'undefined':
                    case 'function':
                        continue;
                    case 'number':
                    case 'boolean':
                        k = value;
                        break;
                    case 'string':
                        k = value.hashCode();
                        break;
                    default:
                        if(value.updateHashCode)
                            value.updateHashCode(this);
                        else
                            console.log("No updateHashCode for " + value.toString())
                        continue;
                }
                k = k * 0xCC9E2D51;
                k = (k << 15) | (k >>> (32 - 15));
                k = k * 0x1B873593;
                this.count = this.count + 1;
                let hash = this.hash ^ k;
                hash = (hash << 13) | (hash >>> (32 - 13));
                hash = hash * 5 + 0xE6546B64;
                this.hash = hash;
            }
        }
    }

    finish() {
        let hash = this.hash ^ (this.count * 4);
        hash = hash ^ (hash >>> 16);
        hash = hash * 0x85EBCA6B;
        hash = hash ^ (hash >>> 13);
        hash = hash * 0xC2B2AE35;
        hash = hash ^ (hash >>> 16);
        return hash;
    }
}

function hashStuff() {
    const hash = new Hash();
    hash.update.apply(hash, arguments);
    return hash.finish();
}


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace(/\t/g, "\\t")
         .replace(/\n/g, "\\n")
         .replace(/\r/g, "\\r");
    if (escapeSpaces) {
        s = s.replace(/ /g, "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
}

function equalArrays(a, b) {
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a === b)
        return true;
    if (a.length !== b.length)
        return false;
    for (let i = 0; i < a.length; i++) {
        if (a[i] === b[i])
            continue;
        if (!a[i].equals || !a[i].equals(b[i]))
            return false;
    }
    return true;
}

module.exports = {
    Hash,
    Set,
    Map,
    BitSet,
    AltDict,
    DoubleDict,
    hashStuff,
    escapeWhitespace,
    arrayToString,
    titleCase,
    equalArrays
}

},{}],17:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const LL1Analyzer = require('./../LL1Analyzer');
const {IntervalSet} = require('./../IntervalSet');
const {Token} = require('./../Token');

class ATN {

    constructor(grammarType , maxTokenType) {
        /**
         * Used for runtime deserialization of ATNs from strings
         * The type of the ATN.
        */
        this.grammarType = grammarType;
        // The maximum value for any symbol recognized by a transition in the ATN.
        this.maxTokenType = maxTokenType;
        this.states = [];
        /**
         * Each subrule/rule is a decision point and we must track them so we
         * can go back later and build DFA predictors for them.  This includes
         * all the rules, subrules, optional blocks, ()+, ()* etc...
         */
        this.decisionToState = [];
        // Maps from rule index to starting state number.
        this.ruleToStartState = [];
        // Maps from rule index to stop state number.
        this.ruleToStopState = null;
        this.modeNameToStartState = {};
        /**
         * For lexer ATNs, this maps the rule index to the resulting token type.
         * For parser ATNs, this maps the rule index to the generated bypass token
         * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
         * deserialization option was specified; otherwise, this is {@code null}
         */
        this.ruleToTokenType = null;
        /**
         * For lexer ATNs, this is an array of {@link LexerAction} objects which may
         * be referenced by action transitions in the ATN
         */
        this.lexerActions = null;
        this.modeToStartState = [];
    }

    /**
     * Compute the set of valid tokens that can occur starting in state {@code s}.
     * If {@code ctx} is null, the set of tokens will not include what can follow
     * the rule surrounding {@code s}. In other words, the set will be
     * restricted to tokens reachable staying within {@code s}'s rule
     */
    nextTokensInContext(s, ctx) {
        const anal = new LL1Analyzer(this);
        return anal.LOOK(s, null, ctx);
    }

    /**
     * Compute the set of valid tokens that can occur starting in {@code s} and
     * staying in same rule. {@link Token//EPSILON} is in set if we reach end of
     * rule
     */
    nextTokensNoContext(s) {
        if (s.nextTokenWithinRule !== null ) {
            return s.nextTokenWithinRule;
        }
        s.nextTokenWithinRule = this.nextTokensInContext(s, null);
        s.nextTokenWithinRule.readOnly = true;
        return s.nextTokenWithinRule;
    }

    nextTokens(s, ctx) {
        if ( ctx===undefined ) {
            return this.nextTokensNoContext(s);
        } else {
            return this.nextTokensInContext(s, ctx);
        }
    }

    addState(state) {
        if ( state !== null ) {
            state.atn = this;
            state.stateNumber = this.states.length;
        }
        this.states.push(state);
    }

    removeState(state) {
        this.states[state.stateNumber] = null; // just free mem, don't shift states in list
    }

    defineDecisionState(s) {
        this.decisionToState.push(s);
        s.decision = this.decisionToState.length-1;
        return s.decision;
    }

    getDecisionState(decision) {
        if (this.decisionToState.length===0) {
            return null;
        } else {
            return this.decisionToState[decision];
        }
    }

    /**
     * Computes the set of input symbols which could follow ATN state number
     * {@code stateNumber} in the specified full {@code context}. This method
     * considers the complete parser context, but does not evaluate semantic
     * predicates (i.e. all predicates encountered during the calculation are
     * assumed true). If a path in the ATN exists from the starting state to the
     * {@link RuleStopState} of the outermost context without matching any
     * symbols, {@link Token//EOF} is added to the returned set.
     *
     * <p>If {@code context} is {@code null}, it is treated as
     * {@link ParserRuleContext//EMPTY}.</p>
     *
     * @param stateNumber the ATN state number
     * @param ctx the full parse context
     *
     * @return {IntervalSet} The set of potentially valid input symbols which could follow the
     * specified state in the specified context.
     *
     * @throws IllegalArgumentException if the ATN does not contain a state with
     * number {@code stateNumber}
     */
    getExpectedTokens(stateNumber, ctx ) {
        if ( stateNumber < 0 || stateNumber >= this.states.length ) {
            throw("Invalid state number.");
        }
        const s = this.states[stateNumber];
        let following = this.nextTokens(s);
        if (!following.contains(Token.EPSILON)) {
            return following;
        }
        const expected = new IntervalSet();
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
            const invokingState = this.states[ctx.invokingState];
            const rt = invokingState.transitions[0];
            following = this.nextTokens(rt.followState);
            expected.addSet(following);
            expected.removeOne(Token.EPSILON);
            ctx = ctx.parentCtx;
        }
        if (following.contains(Token.EPSILON)) {
            expected.addOne(Token.EOF);
        }
        return expected;
    }
}

ATN.INVALID_ALT_NUMBER = 0;

module.exports = ATN;

},{"./../IntervalSet":7,"./../LL1Analyzer":8,"./../Token":15}],18:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {DecisionState} = require('./ATNState');
const {SemanticContext} = require('./SemanticContext');
const {Hash} = require("../Utils");


function checkParams(params, isCfg) {
	if(params===null) {
		const result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		const props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

class ATNConfig {
    /**
     * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).
     * The syntactic context is a graph-structured stack node whose
     * path(s) to the root is the rule invocation(s)
     * chain used to arrive at the state.  The semantic context is
     * the tree of semantic predicates encountered before reaching
     * an ATN state
     */
    constructor(params, config) {
        this.checkContext(params, config);
        params = checkParams(params);
        config = checkParams(config, true);
        // The ATN state associated with this configuration///
        this.state = params.state!==null ? params.state : config.state;
        // What alt (or lexer rule) is predicted by this configuration///
        this.alt = params.alt!==null ? params.alt : config.alt;
        /**
         * The stack of invoking states leading to the rule/states associated
         * with this config.  We track only those contexts pushed during
         * execution of the ATN simulator
         */
        this.context = params.context!==null ? params.context : config.context;
        this.semanticContext = params.semanticContext!==null ? params.semanticContext :
            (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
        // TODO: make it a boolean then
        /**
         * We cannot execute predicates dependent upon local context unless
         * we know for sure we are in the correct context. Because there is
         * no way to do this efficiently, we simply cannot evaluate
         * dependent predicates unless we are in the rule that initially
         * invokes the ATN simulator.
         * closure() tracks the depth of how far we dip into the
         * outer context: depth &gt; 0.  Note that it may not be totally
         * accurate depth since I don't ever decrement
         */
        this.reachesIntoOuterContext = config.reachesIntoOuterContext;
        this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    }

    checkContext(params, config) {
        if((params.context===null || params.context===undefined) &&
                (config===null || config.context===null || config.context===undefined)) {
            this.context = null;
        }
    }

    hashCode() {
        const hash = new Hash();
        this.updateHashCode(hash);
        return hash.finish();
    }

    updateHashCode(hash) {
        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
    }

    /**
     * An ATN configuration is equal to another if both have
     * the same state, they predict the same alternative, and
     * syntactic/semantic contexts are the same
     */
    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof ATNConfig)) {
            return false;
        } else {
            return this.state.stateNumber===other.state.stateNumber &&
                this.alt===other.alt &&
                (this.context===null ? other.context===null : this.context.equals(other.context)) &&
                this.semanticContext.equals(other.semanticContext) &&
                this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
        }
    }

    hashCodeForConfigSet() {
        const hash = new Hash();
        hash.update(this.state.stateNumber, this.alt, this.semanticContext);
        return hash.finish();
    }

    equalsForConfigSet(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof ATNConfig)) {
            return false;
        } else {
            return this.state.stateNumber===other.state.stateNumber &&
                this.alt===other.alt &&
                this.semanticContext.equals(other.semanticContext);
        }
    }

    toString() {
        return "(" + this.state + "," + this.alt +
            (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
            (this.semanticContext !== SemanticContext.NONE ?
                    ("," + this.semanticContext.toString())
                    : "") +
            (this.reachesIntoOuterContext>0 ?
                    (",up=" + this.reachesIntoOuterContext)
                    : "") + ")";
    }
}


class LexerATNConfig extends ATNConfig {
    constructor(params, config) {
        super(params, config);

        // This is the backing field for {@link //getLexerActionExecutor}.
        const lexerActionExecutor = params.lexerActionExecutor || null;
        this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
        this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
        this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;
        this.equalsForConfigSet = LexerATNConfig.prototype.equals;
        return this;
    }

    updateHashCode(hash) {
        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
    }

    equals(other) {
        return this === other ||
                (other instanceof LexerATNConfig &&
                this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision &&
                (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
                super.equals(other));
    }

    checkNonGreedyDecision(source, target) {
        return source.passedThroughNonGreedyDecision ||
            (target instanceof DecisionState) && target.nonGreedy;
    }
}


module.exports.ATNConfig = ATNConfig;
module.exports.LexerATNConfig = LexerATNConfig;

},{"../Utils":16,"./ATNState":23,"./SemanticContext":30}],19:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const ATN = require('./ATN');
const Utils = require('./../Utils');
const {SemanticContext} = require('./SemanticContext');
const {merge} = require('./../PredictionContext');

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }

/**
 * Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
 * info about the set, with support for combining similar configurations using a
 * graph-structured stack
 */
class ATNConfigSet {
	constructor(fullCtx) {
		/**
		 * The reason that we need this is because we don't want the hash map to use
		 * the standard hash code and equals. We need all configurations with the
		 * same
		 * {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
		 * doubles
		 * the number of objects associated with ATNConfigs. The other solution is
		 * to
		 * use a hash table that lets us specify the equals/hashcode operation.
		 * All configs but hashed by (s, i, _, pi) not including context. Wiped out
		 * when we go readonly as this set becomes a DFA state
		 */
		this.configLookup = new Utils.Set(hashATNConfig, equalATNConfigs);
		/**
		 * Indicates that this configuration set is part of a full context
		 * LL prediction. It will be used to determine how to merge $. With SLL
		 * it's a wildcard whereas it is not for LL context merge
		 */
		this.fullCtx = fullCtx === undefined ? true : fullCtx;
		/**
		 * Indicates that the set of configurations is read-only. Do not
		 * allow any code to manipulate the set; DFA states will point at
		 * the sets and they must not change. This does not protect the other
		 * fields; in particular, conflictingAlts is set after
		 * we've made this readonly
		 */
		this.readOnly = false;
		// Track the elements as they are added to the set; supports get(i)///
		this.configs = [];

		// TODO: these fields make me pretty uncomfortable but nice to pack up info
		// together, saves recomputation
		// TODO: can we track conflicts as they are added to save scanning configs
		// later?
		this.uniqueAlt = 0;
		this.conflictingAlts = null;

		/**
		 * Used in parser and lexer. In lexer, it indicates we hit a pred
		 * while computing a closure operation. Don't make a DFA state from this
		 */
		this.hasSemanticContext = false;
		this.dipsIntoOuterContext = false;

		this.cachedHashCode = -1;
	}

	/**
	 * Adding a new config means merging contexts with existing configs for
	 * {@code (s, i, pi, _)}, where {@code s} is the
	 * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
	 * {@code pi} is the {@link ATNConfig//semanticContext}. We use
	 * {@code (s,i,pi)} as key.
	 *
	 * <p>This method updates {@link //dipsIntoOuterContext} and
	 * {@link //hasSemanticContext} when necessary.</p>
	 */
	add(config, mergeCache) {
		if (mergeCache === undefined) {
			mergeCache = null;
		}
		if (this.readOnly) {
			throw "This set is readonly";
		}
		if (config.semanticContext !== SemanticContext.NONE) {
			this.hasSemanticContext = true;
		}
		if (config.reachesIntoOuterContext > 0) {
			this.dipsIntoOuterContext = true;
		}
		const existing = this.configLookup.add(config);
		if (existing === config) {
			this.cachedHashCode = -1;
			this.configs.push(config); // track order here
			return true;
		}
		// a previous (s,i,pi,_), merge with it and save result
		const rootIsWildcard = !this.fullCtx;
		const merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
		/**
		 * no need to check for existing.context, config.context in cache
		 * since only way to create new graphs is "call rule" and here. We
		 * cache at both places
		 */
		existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
		// make sure to preserve the precedence filter suppression during the merge
		if (config.precedenceFilterSuppressed) {
			existing.precedenceFilterSuppressed = true;
		}
		existing.context = merged; // replace context; no need to alt mapping
		return true;
	}

	getStates() {
		const states = new Utils.Set();
		for (let i = 0; i < this.configs.length; i++) {
			states.add(this.configs[i].state);
		}
		return states;
	}

	getPredicates() {
		const preds = [];
		for (let i = 0; i < this.configs.length; i++) {
			const c = this.configs[i].semanticContext;
			if (c !== SemanticContext.NONE) {
				preds.push(c.semanticContext);
			}
		}
		return preds;
	}

	optimizeConfigs(interpreter) {
		if (this.readOnly) {
			throw "This set is readonly";
		}
		if (this.configLookup.length === 0) {
			return;
		}
		for (let i = 0; i < this.configs.length; i++) {
			const config = this.configs[i];
			config.context = interpreter.getCachedContext(config.context);
		}
	}

	addAll(coll) {
		for (let i = 0; i < coll.length; i++) {
			this.add(coll[i]);
		}
		return false;
	}

	equals(other) {
		return this === other ||
			(other instanceof ATNConfigSet &&
			Utils.equalArrays(this.configs, other.configs) &&
			this.fullCtx === other.fullCtx &&
			this.uniqueAlt === other.uniqueAlt &&
			this.conflictingAlts === other.conflictingAlts &&
			this.hasSemanticContext === other.hasSemanticContext &&
			this.dipsIntoOuterContext === other.dipsIntoOuterContext);
	}

	hashCode() {
		const hash = new Utils.Hash();
		hash.update(this.configs);
		return hash.finish();
	}

	updateHashCode(hash) {
		if (this.readOnly) {
			if (this.cachedHashCode === -1) {
				this.cachedHashCode = this.hashCode();
			}
			hash.update(this.cachedHashCode);
		} else {
			hash.update(this.hashCode());
		}
	}

	isEmpty() {
		return this.configs.length === 0;
	}

	contains(item) {
		if (this.configLookup === null) {
			throw "This method is not implemented for readonly sets.";
		}
		return this.configLookup.contains(item);
	}

	containsFast(item) {
		if (this.configLookup === null) {
			throw "This method is not implemented for readonly sets.";
		}
		return this.configLookup.containsFast(item);
	}

	clear() {
		if (this.readOnly) {
			throw "This set is readonly";
		}
		this.configs = [];
		this.cachedHashCode = -1;
		this.configLookup = new Utils.Set();
	}

	setReadonly(readOnly) {
		this.readOnly = readOnly;
		if (readOnly) {
			this.configLookup = null; // can't mod, no need for lookup cache
		}
	}

	toString() {
		return Utils.arrayToString(this.configs) +
			(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
			(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
			(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
			(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
	}

	get items(){
		return this.configs;
	}

	get length(){
		return this.configs.length;
	}
}


class OrderedATNConfigSet extends ATNConfigSet {
	constructor() {
		super();
		this.configLookup = new Utils.Set();
	}
}

module.exports = {
	ATNConfigSet,
	OrderedATNConfigSet
}

},{"./../PredictionContext":12,"./../Utils":16,"./ATN":17,"./SemanticContext":30}],20:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

class ATNDeserializationOptions {
	constructor(copyFrom) {
		if(copyFrom===undefined) {
			copyFrom = null;
		}
		this.readOnly = false;
		this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
		this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;
	}
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

module.exports = ATNDeserializationOptions

},{}],21:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./../Token');
const ATN = require('./ATN');
const ATNType = require('./ATNType');

const {
    ATNState,
    BasicState,
    DecisionState,
    BlockStartState,
    BlockEndState,
    LoopEndState,
    RuleStartState,
    RuleStopState,
    TokensStartState,
    PlusLoopbackState,
    StarLoopbackState,
    StarLoopEntryState,
    PlusBlockStartState,
    StarBlockStartState,
    BasicBlockStartState
} = require('./ATNState');

const {
    Transition,
    AtomTransition,
    SetTransition,
    NotSetTransition,
    RuleTransition,
    RangeTransition,
    ActionTransition,
    EpsilonTransition,
    WildcardTransition,
    PredicateTransition,
    PrecedencePredicateTransition
} = require('./Transition')

const {IntervalSet} = require('./../IntervalSet');
const ATNDeserializationOptions = require('./ATNDeserializationOptions');

const {
    LexerActionType,
    LexerSkipAction,
    LexerChannelAction,
    LexerCustomAction,
    LexerMoreAction,
    LexerTypeAction,
    LexerPushModeAction,
    LexerPopModeAction,
    LexerModeAction,
} = require('./LexerAction');

// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
const BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
const ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
const SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

const SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
const SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray( length, value) {
	const tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

class ATNDeserializer {
    constructor(options) {

        if ( options=== undefined || options === null ) {
            options = ATNDeserializationOptions.defaultOptions;
        }
        this.deserializationOptions = options;
        this.stateFactories = null;
        this.actionFactories = null;
    }

    /**
     * Determines if a particular serialized representation of an ATN supports
     * a particular feature, identified by the {@link UUID} used for serializing
     * the ATN at the time the feature was first introduced.
     *
     * @param feature The {@link UUID} marking the first time the feature was
     * supported in the serialized ATN.
     * @param actualUuid The {@link UUID} of the actual serialized ATN which is
     * currently being deserialized.
     * @return {@code true} if the {@code actualUuid} value represents a
     * serialized ATN at or after the feature identified by {@code feature} was
     * introduced; otherwise, {@code false}.
    */
    isFeatureSupported(feature, actualUuid) {
        const idx1 = SUPPORTED_UUIDS.indexOf(feature);
        if (idx1<0) {
            return false;
        }
        const idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
        return idx2 >= idx1;
    }

    deserialize(data) {
        this.reset(data);
        this.checkVersion();
        this.checkUUID();
        const atn = this.readATN();
        this.readStates(atn);
        this.readRules(atn);
        this.readModes(atn);
        const sets = [];
        // First, deserialize sets with 16-bit arguments <= U+FFFF.
        this.readSets(atn, sets, this.readInt.bind(this));
        // Next, if the ATN was serialized with the Unicode SMP feature,
        // deserialize sets with 32-bit arguments <= U+10FFFF.
        if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
            this.readSets(atn, sets, this.readInt32.bind(this));
        }
        this.readEdges(atn, sets);
        this.readDecisions(atn);
        this.readLexerActions(atn);
        this.markPrecedenceDecisions(atn);
        this.verifyATN(atn);
        if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
            this.generateRuleBypassTransitions(atn);
            // re-verify after modification
            this.verifyATN(atn);
        }
        return atn;
    }

    reset(data) {
        const adjust = function(c) {
            const v = c.charCodeAt(0);
            return v>1  ? v-2 : v + 65534;
        };
        const temp = data.split("").map(adjust);
        // don't adjust the first value since that's the version number
        temp[0] = data.charCodeAt(0);
        this.data = temp;
        this.pos = 0;
    }

    checkVersion() {
        const version = this.readInt();
        if ( version !== SERIALIZED_VERSION ) {
            throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
        }
    }

    checkUUID() {
        const uuid = this.readUUID();
        if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
            throw ("Could not deserialize ATN with UUID: " + uuid +
                            " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
        }
        this.uuid = uuid;
    }

    readATN() {
        const grammarType = this.readInt();
        const maxTokenType = this.readInt();
        return new ATN(grammarType, maxTokenType);
    }

    readStates(atn) {
        let j, pair, stateNumber;
        const  loopBackStateNumbers = [];
        const  endStateNumbers = [];
        const  nstates = this.readInt();
        for(let i=0; i<nstates; i++) {
            const  stype = this.readInt();
            // ignore bad type of states
            if (stype===ATNState.INVALID_TYPE) {
                atn.addState(null);
                continue;
            }
            let ruleIndex = this.readInt();
            if (ruleIndex === 0xFFFF) {
                ruleIndex = -1;
            }
            const  s = this.stateFactory(stype, ruleIndex);
            if (stype === ATNState.LOOP_END) { // special case
                const  loopBackStateNumber = this.readInt();
                loopBackStateNumbers.push([s, loopBackStateNumber]);
            } else if(s instanceof BlockStartState) {
                const  endStateNumber = this.readInt();
                endStateNumbers.push([s, endStateNumber]);
            }
            atn.addState(s);
        }
        // delay the assignment of loop back and end states until we know all the
        // state instances have been initialized
        for (j=0; j<loopBackStateNumbers.length; j++) {
            pair = loopBackStateNumbers[j];
            pair[0].loopBackState = atn.states[pair[1]];
        }

        for (j=0; j<endStateNumbers.length; j++) {
            pair = endStateNumbers[j];
            pair[0].endState = atn.states[pair[1]];
        }

        let numNonGreedyStates = this.readInt();
        for (j=0; j<numNonGreedyStates; j++) {
            stateNumber = this.readInt();
            atn.states[stateNumber].nonGreedy = true;
        }

        let numPrecedenceStates = this.readInt();
        for (j=0; j<numPrecedenceStates; j++) {
            stateNumber = this.readInt();
            atn.states[stateNumber].isPrecedenceRule = true;
        }
    }

    readRules(atn) {
        let i;
        const nrules = this.readInt();
        if (atn.grammarType === ATNType.LEXER ) {
            atn.ruleToTokenType = initArray(nrules, 0);
        }
        atn.ruleToStartState = initArray(nrules, 0);
        for (i=0; i<nrules; i++) {
            const s = this.readInt();
            atn.ruleToStartState[i] = atn.states[s];
            if ( atn.grammarType === ATNType.LEXER ) {
                let tokenType = this.readInt();
                if (tokenType === 0xFFFF) {
                    tokenType = Token.EOF;
                }
                atn.ruleToTokenType[i] = tokenType;
            }
        }
        atn.ruleToStopState = initArray(nrules, 0);
        for (i=0; i<atn.states.length; i++) {
            const state = atn.states[i];
            if (!(state instanceof RuleStopState)) {
                continue;
            }
            atn.ruleToStopState[state.ruleIndex] = state;
            atn.ruleToStartState[state.ruleIndex].stopState = state;
        }
    }

    readModes(atn) {
        const nmodes = this.readInt();
        for (let i=0; i<nmodes; i++) {
            let s = this.readInt();
            atn.modeToStartState.push(atn.states[s]);
        }
    }

    readSets(atn, sets, readUnicode) {
        const m = this.readInt();
        for (let i=0; i<m; i++) {
            const iset = new IntervalSet();
            sets.push(iset);
            const n = this.readInt();
            const containsEof = this.readInt();
            if (containsEof!==0) {
                iset.addOne(-1);
            }
            for (let j=0; j<n; j++) {
                const i1 = readUnicode();
                const i2 = readUnicode();
                iset.addRange(i1, i2);
            }
        }
    }

    readEdges(atn, sets) {
        let i, j, state, trans, target;
        const nedges = this.readInt();
        for (i=0; i<nedges; i++) {
            const src = this.readInt();
            const trg = this.readInt();
            const ttype = this.readInt();
            const arg1 = this.readInt();
            const arg2 = this.readInt();
            const arg3 = this.readInt();
            trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
            const srcState = atn.states[src];
            srcState.addTransition(trans);
        }
        // edges for rule stop states can be derived, so they aren't serialized
        for (i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            for (j=0; j<state.transitions.length; j++) {
                const t = state.transitions[j];
                if (!(t instanceof RuleTransition)) {
                    continue;
                }
                let outermostPrecedenceReturn = -1;
                if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
                    if (t.precedence === 0) {
                        outermostPrecedenceReturn = t.target.ruleIndex;
                    }
                }

                trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
            }
        }

        for (i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (state instanceof BlockStartState) {
                // we need to know the end state to set its start state
                if (state.endState === null) {
                    throw ("IllegalState");
                }
                // block end states can only be associated to a single block start
                // state
                if ( state.endState.startState !== null) {
                    throw ("IllegalState");
                }
                state.endState.startState = state;
            }
            if (state instanceof PlusLoopbackState) {
                for (j=0; j<state.transitions.length; j++) {
                    target = state.transitions[j].target;
                    if (target instanceof PlusBlockStartState) {
                        target.loopBackState = state;
                    }
                }
            } else if (state instanceof StarLoopbackState) {
                for (j=0; j<state.transitions.length; j++) {
                    target = state.transitions[j].target;
                    if (target instanceof StarLoopEntryState) {
                        target.loopBackState = state;
                    }
                }
            }
        }
    }

    readDecisions(atn) {
        const ndecisions = this.readInt();
        for (let i=0; i<ndecisions; i++) {
            const s = this.readInt();
            const decState = atn.states[s];
            atn.decisionToState.push(decState);
            decState.decision = i;
        }
    }

    readLexerActions(atn) {
        if (atn.grammarType === ATNType.LEXER) {
            const count = this.readInt();
            atn.lexerActions = initArray(count, null);
            for (let i=0; i<count; i++) {
                const actionType = this.readInt();
                let data1 = this.readInt();
                if (data1 === 0xFFFF) {
                    data1 = -1;
                }
                let data2 = this.readInt();
                if (data2 === 0xFFFF) {
                    data2 = -1;
                }

                atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);
            }
        }
    }

    generateRuleBypassTransitions(atn) {
        let i;
        const count = atn.ruleToStartState.length;
        for(i=0; i<count; i++) {
            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
        }
        for(i=0; i<count; i++) {
            this.generateRuleBypassTransition(atn, i);
        }
    }

    generateRuleBypassTransition(atn, idx) {
        let i, state;
        const bypassStart = new BasicBlockStartState();
        bypassStart.ruleIndex = idx;
        atn.addState(bypassStart);

        const bypassStop = new BlockEndState();
        bypassStop.ruleIndex = idx;
        atn.addState(bypassStop);

        bypassStart.endState = bypassStop;
        atn.defineDecisionState(bypassStart);

        bypassStop.startState = bypassStart;

        let excludeTransition = null;
        let endState = null;

        if (atn.ruleToStartState[idx].isPrecedenceRule) {
            // wrap from the beginning of the rule to the StarLoopEntryState
            endState = null;
            for(i=0; i<atn.states.length; i++) {
                state = atn.states[i];
                if (this.stateIsEndStateFor(state, idx)) {
                    endState = state;
                    excludeTransition = state.loopBackState.transitions[0];
                    break;
                }
            }
            if (excludeTransition === null) {
                throw ("Couldn't identify final state of the precedence rule prefix section.");
            }
        } else {
            endState = atn.ruleToStopState[idx];
        }

        // all non-excluded transitions that currently target end state need to
        // target blockEnd instead
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            for(let j=0; j<state.transitions.length; j++) {
                const transition = state.transitions[j];
                if (transition === excludeTransition) {
                    continue;
                }
                if (transition.target === endState) {
                    transition.target = bypassStop;
                }
            }
        }

        // all transitions leaving the rule start state need to leave blockStart
        // instead
        const ruleToStartState = atn.ruleToStartState[idx];
        const count = ruleToStartState.transitions.length;
        while ( count > 0) {
            bypassStart.addTransition(ruleToStartState.transitions[count-1]);
            ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
        }
        // link the new states
        atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
        bypassStop.addTransition(new EpsilonTransition(endState));

        const matchState = new BasicState();
        atn.addState(matchState);
        matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
        bypassStart.addTransition(new EpsilonTransition(matchState));
    }

    stateIsEndStateFor(state, idx) {
        if ( state.ruleIndex !== idx) {
            return null;
        }
        if (!( state instanceof StarLoopEntryState)) {
            return null;
        }
        const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
        if (!( maybeLoopEndState instanceof LoopEndState)) {
            return null;
        }
        if (maybeLoopEndState.epsilonOnlyTransitions &&
            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
            return state;
        } else {
            return null;
        }
    }

    /**
     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set
     * the {@link StarLoopEntryState//isPrecedenceDecision} field to the
     * correct value.
     * @param atn The ATN.
     */
    markPrecedenceDecisions(atn) {
        for(let i=0; i<atn.states.length; i++) {
            const state = atn.states[i];
            if (!( state instanceof StarLoopEntryState)) {
                continue;
            }
            // We analyze the ATN to determine if this ATN decision state is the
            // decision for the closure block that determines whether a
            // precedence rule should continue or complete.
            if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
                const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
                if (maybeLoopEndState instanceof LoopEndState) {
                    if ( maybeLoopEndState.epsilonOnlyTransitions &&
                            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                        state.isPrecedenceDecision = true;
                    }
                }
            }
        }
    }

    verifyATN(atn) {
        if (!this.deserializationOptions.verifyATN) {
            return;
        }
        // verify assumptions
        for(let i=0; i<atn.states.length; i++) {
            const state = atn.states[i];
            if (state === null) {
                continue;
            }
            this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
            if (state instanceof PlusBlockStartState) {
                this.checkCondition(state.loopBackState !== null);
            } else  if (state instanceof StarLoopEntryState) {
                this.checkCondition(state.loopBackState !== null);
                this.checkCondition(state.transitions.length === 2);
                if (state.transitions[0].target instanceof StarBlockStartState) {
                    this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                    this.checkCondition(!state.nonGreedy);
                } else if (state.transitions[0].target instanceof LoopEndState) {
                    this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                    this.checkCondition(state.nonGreedy);
                } else {
                    throw("IllegalState");
                }
            } else if (state instanceof StarLoopbackState) {
                this.checkCondition(state.transitions.length === 1);
                this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
            } else if (state instanceof LoopEndState) {
                this.checkCondition(state.loopBackState !== null);
            } else if (state instanceof RuleStartState) {
                this.checkCondition(state.stopState !== null);
            } else if (state instanceof BlockStartState) {
                this.checkCondition(state.endState !== null);
            } else if (state instanceof BlockEndState) {
                this.checkCondition(state.startState !== null);
            } else if (state instanceof DecisionState) {
                this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
            } else {
                this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
            }
        }
    }

    checkCondition(condition, message) {
        if (!condition) {
            if (message === undefined || message===null) {
                message = "IllegalState";
            }
            throw (message);
        }
    }

    readInt() {
        return this.data[this.pos++];
    }

    readInt32() {
        const low = this.readInt();
        const high = this.readInt();
        return low | (high << 16);
    }

    readLong() {
        const low = this.readInt32();
        const high = this.readInt32();
        return (low & 0x00000000FFFFFFFF) | (high << 32);
    }

    readUUID() {
        const bb = [];
        for(let i=7;i>=0;i--) {
            const int = this.readInt();
            /* jshint bitwise: false */
            bb[(2*i)+1] = int & 0xFF;
            bb[2*i] = (int >> 8) & 0xFF;
        }
        return byteToHex[bb[0]] + byteToHex[bb[1]] +
        byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
        byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
        byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
        byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
        byteToHex[bb[10]] + byteToHex[bb[11]] +
        byteToHex[bb[12]] + byteToHex[bb[13]] +
        byteToHex[bb[14]] + byteToHex[bb[15]];
    }

    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {
        const target = atn.states[trg];
        switch(type) {
        case Transition.EPSILON:
            return new EpsilonTransition(target);
        case Transition.RANGE:
            return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
        case Transition.RULE:
            return new RuleTransition(atn.states[arg1], arg2, arg3, target);
        case Transition.PREDICATE:
            return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
        case Transition.PRECEDENCE:
            return new PrecedencePredicateTransition(target, arg1);
        case Transition.ATOM:
            return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
        case Transition.ACTION:
            return new ActionTransition(target, arg1, arg2, arg3 !== 0);
        case Transition.SET:
            return new SetTransition(target, sets[arg1]);
        case Transition.NOT_SET:
            return new NotSetTransition(target, sets[arg1]);
        case Transition.WILDCARD:
            return new WildcardTransition(target);
        default:
            throw "The specified transition type: " + type + " is not valid.";
        }
    }

    stateFactory(type, ruleIndex) {
        if (this.stateFactories === null) {
            const sf = [];
            sf[ATNState.INVALID_TYPE] = null;
            sf[ATNState.BASIC] = () => new BasicState();
            sf[ATNState.RULE_START] = () => new RuleStartState();
            sf[ATNState.BLOCK_START] = () => new BasicBlockStartState();
            sf[ATNState.PLUS_BLOCK_START] = () => new PlusBlockStartState();
            sf[ATNState.STAR_BLOCK_START] = () => new StarBlockStartState();
            sf[ATNState.TOKEN_START] = () => new TokensStartState();
            sf[ATNState.RULE_STOP] = () => new RuleStopState();
            sf[ATNState.BLOCK_END] = () => new BlockEndState();
            sf[ATNState.STAR_LOOP_BACK] = () => new StarLoopbackState();
            sf[ATNState.STAR_LOOP_ENTRY] = () => new StarLoopEntryState();
            sf[ATNState.PLUS_LOOP_BACK] = () => new PlusLoopbackState();
            sf[ATNState.LOOP_END] = () => new LoopEndState();
            this.stateFactories = sf;
        }
        if (type>this.stateFactories.length || this.stateFactories[type] === null) {
            throw("The specified state type " + type + " is not valid.");
        } else {
            const s = this.stateFactories[type]();
            if (s!==null) {
                s.ruleIndex = ruleIndex;
                return s;
            }
        }
    }

    lexerActionFactory(type, data1, data2) {
        if (this.actionFactories === null) {
            const af = [];
            af[LexerActionType.CHANNEL] = (data1, data2) => new LexerChannelAction(data1);
            af[LexerActionType.CUSTOM] = (data1, data2) => new LexerCustomAction(data1, data2);
            af[LexerActionType.MODE] = (data1, data2) => new LexerModeAction(data1);
            af[LexerActionType.MORE] = (data1, data2) => LexerMoreAction.INSTANCE;
            af[LexerActionType.POP_MODE] = (data1, data2) => LexerPopModeAction.INSTANCE;
            af[LexerActionType.PUSH_MODE] = (data1, data2) => new LexerPushModeAction(data1);
            af[LexerActionType.SKIP] = (data1, data2) => LexerSkipAction.INSTANCE;
            af[LexerActionType.TYPE] = (data1, data2) => new LexerTypeAction(data1);
            this.actionFactories = af;
        }
        if (type>this.actionFactories.length || this.actionFactories[type] === null) {
            throw("The specified lexer action type " + type + " is not valid.");
        } else {
            return this.actionFactories[type](data1, data2);
        }
    }
}

function createByteToHex() {
	const bth = [];
	for (let i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

const byteToHex = createByteToHex();


module.exports = ATNDeserializer;

},{"./../IntervalSet":7,"./../Token":15,"./ATN":17,"./ATNDeserializationOptions":20,"./ATNState":23,"./ATNType":24,"./LexerAction":26,"./Transition":31}],22:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {DFAState} = require('./../dfa/DFAState');
const {ATNConfigSet} = require('./ATNConfigSet');
const {getCachedPredictionContext} = require('./../PredictionContext');
const {Map} = require('./../Utils');

class ATNSimulator {
    constructor(atn, sharedContextCache) {
        /**
         * The context cache maps all PredictionContext objects that are ==
         * to a single cached copy. This cache is shared across all contexts
         * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
         * to use only cached nodes/graphs in addDFAState(). We don't want to
         * fill this during closure() since there are lots of contexts that
         * pop up but are not used ever again. It also greatly slows down closure().
         *
         * <p>This cache makes a huge difference in memory and a little bit in speed.
         * For the Java grammar on java.*, it dropped the memory requirements
         * at the end from 25M to 16M. We don't store any of the full context
         * graphs in the DFA because they are limited to local context only,
         * but apparently there's a lot of repetition there as well. We optimize
         * the config contexts before storing the config set in the DFA states
         * by literally rebuilding them with cached subgraphs only.</p>
         *
         * <p>I tried a cache for use during closure operations, that was
         * whacked after each adaptivePredict(). It cost a little bit
         * more time I think and doesn't save on the overall footprint
         * so it's not worth the complexity.</p>
         */
        this.atn = atn;
        this.sharedContextCache = sharedContextCache;
        return this;
    }

    getCachedContext(context) {
        if (this.sharedContextCache ===null) {
            return context;
        }
        const visited = new Map();
        return getCachedPredictionContext(context, this.sharedContextCache, visited);
    }
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


module.exports = ATNSimulator;

},{"./../PredictionContext":12,"./../Utils":16,"./../dfa/DFAState":35,"./ATNConfigSet":19}],23:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const INITIAL_NUM_TRANSITIONS = 4;

/**
 * The following images show the relation of states and
 * {@link ATNState//transitions} for various grammar constructs.
 *
 * <ul>
 *
 * <li>Solid edges marked with an &//0949; indicate a required
 * {@link EpsilonTransition}.</li>
 *
 * <li>Dashed edges indicate locations where any transition derived from
 * {@link Transition} might appear.</li>
 *
 * <li>Dashed nodes are place holders for either a sequence of linked
 * {@link BasicState} states or the inclusion of a block representing a nested
 * construct in one of the forms below.</li>
 *
 * <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
 * any number of alternatives (one or more). Nodes without the {@code ...} only
 * support the exact number of alternatives shown in the diagram.</li>
 *
 * </ul>
 *
 * <h2>Basic Blocks</h2>
 *
 * <h3>Rule</h3>
 *
 * <embed src="images/Rule.svg" type="image/svg+xml"/>
 *
 * <h3>Block of 1 or more alternatives</h3>
 *
 * <embed src="images/Block.svg" type="image/svg+xml"/>
 *
 * <h2>Greedy Loops</h2>
 *
 * <h3>Greedy Closure: {@code (...)*}</h3>
 *
 * <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Positive Closure: {@code (...)+}</h3>
 *
 * <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Optional: {@code (...)?}</h3>
 *
 * <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
 *
 * <h2>Non-Greedy Loops</h2>
 *
 * <h3>Non-Greedy Closure: {@code (...)*?}</h3>
 *
 * <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
 *
 * <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Optional: {@code (...)??}</h3>
 *
 * <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
 */
class ATNState {
    constructor() {
        // Which ATN are we in?
        this.atn = null;
        this.stateNumber = ATNState.INVALID_STATE_NUMBER;
        this.stateType = null;
        this.ruleIndex = 0; // at runtime, we don't have Rule objects
        this.epsilonOnlyTransitions = false;
        // Track the transitions emanating from this ATN state.
        this.transitions = [];
        // Used to cache lookahead during parsing, not used during construction
        this.nextTokenWithinRule = null;
    }

    toString() {
        return this.stateNumber;
    }

    equals(other) {
        if (other instanceof ATNState) {
            return this.stateNumber===other.stateNumber;
        } else {
            return false;
        }
    }

    isNonGreedyExitState() {
        return false;
    }

    addTransition(trans, index) {
        if(index===undefined) {
            index = -1;
        }
        if (this.transitions.length===0) {
            this.epsilonOnlyTransitions = trans.isEpsilon;
        } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
            this.epsilonOnlyTransitions = false;
        }
        if (index===-1) {
            this.transitions.push(trans);
        } else {
            this.transitions.splice(index, 1, trans);
        }
    }
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;


class BasicState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.BASIC;
    }
}

class DecisionState extends ATNState {
    constructor() {
        super();
        this.decision = -1;
        this.nonGreedy = false;
        return this;
    }
}

/**
 *  The start of a regular {@code (...)} block
 */
class BlockStartState extends DecisionState {
    constructor() {
        super();
        this.endState = null;
        return this;
    }
}

class BasicBlockStartState extends BlockStartState {
    constructor() {
        super();
        this.stateType = ATNState.BLOCK_START;
        return this;
    }
}

/**
 * Terminal node of a simple {@code (a|b|c)} block
 */
class BlockEndState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.BLOCK_END;
        this.startState = null;
        return this;
    }
}

/**
 * The last node in the ATN for a rule, unless that rule is the start symbol.
 * In that case, there is one transition to EOF. Later, we might encode
 * references to all calls to this rule to compute FOLLOW sets for
 * error handling
 */
class RuleStopState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.RULE_STOP;
        return this;
    }
}

class RuleStartState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.RULE_START;
        this.stopState = null;
        this.isPrecedenceRule = false;
        return this;
    }
}

/**
 * Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
 * one to the loop back to start of the block and one to exit.
 */
class PlusLoopbackState extends DecisionState {
    constructor() {
        super();
        this.stateType = ATNState.PLUS_LOOP_BACK;
        return this;
    }
}

/**
 * Start of {@code (A|B|...)+} loop. Technically a decision state, but
 * we don't use for code generation; somebody might need it, so I'm defining
 * it for completeness. In reality, the {@link PlusLoopbackState} node is the
 * real decision-making note for {@code A+}
 */
class PlusBlockStartState extends BlockStartState {
    constructor() {
        super();
        this.stateType = ATNState.PLUS_BLOCK_START;
        this.loopBackState = null;
        return this;
    }
}

/**
 * The block that begins a closure loop
 */
class StarBlockStartState extends BlockStartState {
    constructor() {
        super();
        this.stateType = ATNState.STAR_BLOCK_START;
        return this;
    }
}

class StarLoopbackState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.STAR_LOOP_BACK;
        return this;
    }
}

class StarLoopEntryState extends DecisionState {
    constructor() {
        super();
        this.stateType = ATNState.STAR_LOOP_ENTRY;
        this.loopBackState = null;
        // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
        this.isPrecedenceDecision = null;
        return this;
    }
}

/**
 * Mark the end of a * or + loop
 */
class LoopEndState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.LOOP_END;
        this.loopBackState = null;
        return this;
    }
}

/**
 * The Tokens rule start state linking to each lexer rule start state
 */
class TokensStartState extends DecisionState {
    constructor() {
        super();
        this.stateType = ATNState.TOKEN_START;
        return this;
    }
}

module.exports = {
    ATNState,
    BasicState,
    DecisionState,
    BlockStartState,
    BlockEndState,
    LoopEndState,
    RuleStartState,
    RuleStopState,
    TokensStartState,
    PlusLoopbackState,
    StarLoopbackState,
    StarLoopEntryState,
    PlusBlockStartState,
    StarBlockStartState,
    BasicBlockStartState
}

},{}],24:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Represents the type of recognizer an ATN applies to
 */
module.exports = {
    LEXER: 0,
    PARSER: 1
};


},{}],25:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./../Token');
const Lexer = require('./../Lexer');
const ATN = require('./ATN');
const ATNSimulator = require('./ATNSimulator');
const {DFAState} = require('./../dfa/DFAState');
const {OrderedATNConfigSet} = require('./ATNConfigSet');
const {PredictionContext} = require('./../PredictionContext');
const {SingletonPredictionContext} = require('./../PredictionContext');
const {RuleStopState} = require('./ATNState');
const {LexerATNConfig} = require('./ATNConfig');
const {Transition} = require('./Transition');
const LexerActionExecutor = require('./LexerActionExecutor');
const {LexerNoViableAltException} = require('./../error/Errors');

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

class SimState {
	constructor() {
		resetSimState(this);
	}

	reset() {
		resetSimState(this);
	}
}

class LexerATNSimulator extends ATNSimulator {
	/**
	 * When we hit an accept state in either the DFA or the ATN, we
	 * have to notify the character stream to start buffering characters
	 * via {@link IntStream//mark} and record the current state. The current sim state
	 * includes the current index into the input, the current line,
	 * and current character position in that line. Note that the Lexer is
	 * tracking the starting line and characterization of the token. These
	 * variables track the "state" of the simulator when it hits an accept state.
	 *
	 * <p>We track these variables separately for the DFA and ATN simulation
	 * because the DFA simulation often has to fail over to the ATN
	 * simulation. If the ATN simulation fails, we need the DFA to fall
	 * back to its previously accepted state, if any. If the ATN succeeds,
	 * then the ATN does the accept and the DFA simulator that invoked it
	 * can simply return the predicted token type.</p>
	 */
	constructor(recog, atn, decisionToDFA, sharedContextCache) {
		super(atn, sharedContextCache);
		this.decisionToDFA = decisionToDFA;
		this.recog = recog;
		/**
		 * The current token's starting index into the character stream.
		 * Shared across DFA to ATN simulation in case the ATN fails and the
		 * DFA did not have a previous accept state. In this case, we use the
		 * ATN-generated exception object
		 */
		this.startIndex = -1;
		// line number 1..n within the input///
		this.line = 1;
		/**
		 * The index of the character relative to the beginning of the line
		 * 0..n-1
		 */
		this.column = 0;
		this.mode = Lexer.DEFAULT_MODE;
		/**
		 * Used during DFA/ATN exec to record the most recent accept configuration
		 * info
		 */
		this.prevAccept = new SimState();
	}

	copyState(simulator) {
		this.column = simulator.column;
		this.line = simulator.line;
		this.mode = simulator.mode;
		this.startIndex = simulator.startIndex;
	}

	match(input, mode) {
		this.match_calls += 1;
		this.mode = mode;
		const mark = input.mark();
		try {
			this.startIndex = input.index;
			this.prevAccept.reset();
			const dfa = this.decisionToDFA[mode];
			if (dfa.s0 === null) {
				return this.matchATN(input);
			} else {
				return this.execATN(input, dfa.s0);
			}
		} finally {
			input.release(mark);
		}
	}

	reset() {
		this.prevAccept.reset();
		this.startIndex = -1;
		this.line = 1;
		this.column = 0;
		this.mode = Lexer.DEFAULT_MODE;
	}

	matchATN(input) {
		const startState = this.atn.modeToStartState[this.mode];

		if (LexerATNSimulator.debug) {
			console.log("matchATN mode " + this.mode + " start: " + startState);
		}
		const old_mode = this.mode;
		const s0_closure = this.computeStartState(input, startState);
		const suppressEdge = s0_closure.hasSemanticContext;
		s0_closure.hasSemanticContext = false;

		const next = this.addDFAState(s0_closure);
		if (!suppressEdge) {
			this.decisionToDFA[this.mode].s0 = next;
		}

		const predict = this.execATN(input, next);

		if (LexerATNSimulator.debug) {
			console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
		}
		return predict;
	}

	execATN(input, ds0) {
		if (LexerATNSimulator.debug) {
			console.log("start state closure=" + ds0.configs);
		}
		if (ds0.isAcceptState) {
			// allow zero-length tokens
			this.captureSimState(this.prevAccept, input, ds0);
		}
		let t = input.LA(1);
		let s = ds0; // s is current/from DFA state

		while (true) { // while more work
			if (LexerATNSimulator.debug) {
				console.log("execATN loop starting closure: " + s.configs);
			}

			/**
			 * As we move src->trg, src->trg, we keep track of the previous trg to
			 * avoid looking up the DFA state again, which is expensive.
			 * If the previous target was already part of the DFA, we might
			 * be able to avoid doing a reach operation upon t. If s!=null,
			 * it means that semantic predicates didn't prevent us from
			 * creating a DFA state. Once we know s!=null, we check to see if
			 * the DFA state has an edge already for t. If so, we can just reuse
			 * it's configuration set; there's no point in re-computing it.
			 * This is kind of like doing DFA simulation within the ATN
			 * simulation because DFA simulation is really just a way to avoid
			 * computing reach/closure sets. Technically, once we know that
			 * we have a previously added DFA state, we could jump over to
			 * the DFA simulator. But, that would mean popping back and forth
			 * a lot and making things more complicated algorithmically.
			 * This optimization makes a lot of sense for loops within DFA.
			 * A character will take us back to an existing DFA state
			 * that already has lots of edges out of it. e.g., .* in comments.
			 * print("Target for:" + str(s) + " and:" + str(t))
			 */
			let target = this.getExistingTargetState(s, t);
			// print("Existing:" + str(target))
			if (target === null) {
				target = this.computeTargetState(input, s, t);
				// print("Computed:" + str(target))
			}
			if (target === ATNSimulator.ERROR) {
				break;
			}
			// If this is a consumable input element, make sure to consume before
			// capturing the accept state so the input index, line, and char
			// position accurately reflect the state of the interpreter at the
			// end of the token.
			if (t !== Token.EOF) {
				this.consume(input);
			}
			if (target.isAcceptState) {
				this.captureSimState(this.prevAccept, input, target);
				if (t === Token.EOF) {
					break;
				}
			}
			t = input.LA(1);
			s = target; // flip; current DFA target becomes new src/from state
		}
		return this.failOrAccept(this.prevAccept, input, s.configs, t);
	}

	/**
	 * Get an existing target state for an edge in the DFA. If the target state
	 * for the edge has not yet been computed or is otherwise not available,
	 * this method returns {@code null}.
	 *
	 * @param s The current DFA state
	 * @param t The next input symbol
	 * @return The existing target DFA state for the given input symbol
	 * {@code t}, or {@code null} if the target state for this edge is not
	 * already cached
	 */
	getExistingTargetState(s, t) {
		if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
			return null;
		}

		let target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
		if(target===undefined) {
			target = null;
		}
		if (LexerATNSimulator.debug && target !== null) {
			console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
		}
		return target;
	}

	/**
	 * Compute a target state for an edge in the DFA, and attempt to add the
	 * computed state and corresponding edge to the DFA.
	 *
	 * @param input The input stream
	 * @param s The current DFA state
	 * @param t The next input symbol
	 *
	 * @return The computed target DFA state for the given input symbol
	 * {@code t}. If {@code t} does not lead to a valid DFA state, this method
	 * returns {@link //ERROR}.
	 */
	computeTargetState(input, s, t) {
		const reach = new OrderedATNConfigSet();
		// if we don't find an existing DFA state
		// Fill reach starting from closure, following t transitions
		this.getReachableConfigSet(input, s.configs, reach, t);

		if (reach.items.length === 0) { // we got nowhere on t from s
			if (!reach.hasSemanticContext) {
				// we got nowhere on t, don't throw out this knowledge; it'd
				// cause a failover from DFA later.
				this.addDFAEdge(s, t, ATNSimulator.ERROR);
			}
			// stop when we can't match any more char
			return ATNSimulator.ERROR;
		}
		// Add an edge from s to target DFA found/created for reach
		return this.addDFAEdge(s, t, null, reach);
	}

	failOrAccept(prevAccept, input, reach, t) {
		if (this.prevAccept.dfaState !== null) {
			const lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
			this.accept(input, lexerActionExecutor, this.startIndex,
					prevAccept.index, prevAccept.line, prevAccept.column);
			return prevAccept.dfaState.prediction;
		} else {
			// if no accept and EOF is first char, return EOF
			if (t === Token.EOF && input.index === this.startIndex) {
				return Token.EOF;
			}
			throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
		}
	}

	/**
	 * Given a starting configuration set, figure out all ATN configurations
	 * we can reach upon input {@code t}. Parameter {@code reach} is a return
	 * parameter.
	 */
	getReachableConfigSet(input, closure,
			reach, t) {
		// this is used to skip processing for configs which have a lower priority
		// than a config that already reached an accept state for the same rule
		let skipAlt = ATN.INVALID_ALT_NUMBER;
		for (let i = 0; i < closure.items.length; i++) {
			const cfg = closure.items[i];
			const currentAltReachedAcceptState = (cfg.alt === skipAlt);
			if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
				continue;
			}
			if (LexerATNSimulator.debug) {
				console.log("testing %s at %s\n", this.getTokenName(t), cfg
						.toString(this.recog, true));
			}
			for (let j = 0; j < cfg.state.transitions.length; j++) {
				const trans = cfg.state.transitions[j]; // for each transition
				const target = this.getReachableTarget(trans, t);
				if (target !== null) {
					let lexerActionExecutor = cfg.lexerActionExecutor;
					if (lexerActionExecutor !== null) {
						lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
					}
					const treatEofAsEpsilon = (t === Token.EOF);
					const config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
					if (this.closure(input, config, reach,
							currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
						// any remaining configs for this alt have a lower priority
						// than the one that just reached an accept state.
						skipAlt = cfg.alt;
					}
				}
			}
		}
	}

	accept(input, lexerActionExecutor,
			   startIndex, index, line, charPos) {
		   if (LexerATNSimulator.debug) {
			   console.log("ACTION %s\n", lexerActionExecutor);
		   }
		   // seek to after last char in token
		   input.seek(index);
		   this.line = line;
		   this.column = charPos;
		   if (lexerActionExecutor !== null && this.recog !== null) {
			   lexerActionExecutor.execute(this.recog, input, startIndex);
		   }
	   }

	getReachableTarget(trans, t) {
		if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
			return trans.target;
		} else {
			return null;
		}
	}

	computeStartState(input, p) {
		const initialContext = PredictionContext.EMPTY;
		const configs = new OrderedATNConfigSet();
		for (let i = 0; i < p.transitions.length; i++) {
			const target = p.transitions[i].target;
			const cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
			this.closure(input, cfg, configs, false, false, false);
		}
		return configs;
	}

	/**
	 * Since the alternatives within any lexer decision are ordered by
	 * preference, this method stops pursuing the closure as soon as an accept
	 * state is reached. After the first accept state is reached by depth-first
	 * search from {@code config}, all other (potentially reachable) states for
	 * this rule would have a lower priority.
	 *
	 * @return {Boolean} {@code true} if an accept state is reached, otherwise
	 * {@code false}.
	 */
	closure(input, config, configs,
			currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
		let cfg = null;
		if (LexerATNSimulator.debug) {
			console.log("closure(" + config.toString(this.recog, true) + ")");
		}
		if (config.state instanceof RuleStopState) {
			if (LexerATNSimulator.debug) {
				if (this.recog !== null) {
					console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
				} else {
					console.log("closure at rule stop %s\n", config);
				}
			}
			if (config.context === null || config.context.hasEmptyPath()) {
				if (config.context === null || config.context.isEmpty()) {
					configs.add(config);
					return true;
				} else {
					configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
					currentAltReachedAcceptState = true;
				}
			}
			if (config.context !== null && !config.context.isEmpty()) {
				for (let i = 0; i < config.context.length; i++) {
					if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
						const newContext = config.context.getParent(i); // "pop" return state
						const returnState = this.atn.states[config.context.getReturnState(i)];
						cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
						currentAltReachedAcceptState = this.closure(input, cfg,
								configs, currentAltReachedAcceptState, speculative,
								treatEofAsEpsilon);
					}
				}
			}
			return currentAltReachedAcceptState;
		}
		// optimization
		if (!config.state.epsilonOnlyTransitions) {
			if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
				configs.add(config);
			}
		}
		for (let j = 0; j < config.state.transitions.length; j++) {
			const trans = config.state.transitions[j];
			cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
			if (cfg !== null) {
				currentAltReachedAcceptState = this.closure(input, cfg, configs,
						currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
			}
		}
		return currentAltReachedAcceptState;
	}

	// side-effect: can alter configs.hasSemanticContext
	getEpsilonTarget(input, config, trans,
			configs, speculative, treatEofAsEpsilon) {
		let cfg = null;
		if (trans.serializationType === Transition.RULE) {
			const newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
			cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
		} else if (trans.serializationType === Transition.PRECEDENCE) {
			throw "Precedence predicates are not supported in lexers.";
		} else if (trans.serializationType === Transition.PREDICATE) {
			// Track traversing semantic predicates. If we traverse,
			// we cannot add a DFA state for this "reach" computation
			// because the DFA would not test the predicate again in the
			// future. Rather than creating collections of semantic predicates
			// like v3 and testing them on prediction, v4 will test them on the
			// fly all the time using the ATN not the DFA. This is slower but
			// semantically it's not used that often. One of the key elements to
			// this predicate mechanism is not adding DFA states that see
			// predicates immediately afterwards in the ATN. For example,

			// a : ID {p1}? | ID {p2}? ;

			// should create the start state for rule 'a' (to save start state
			// competition), but should not create target of ID state. The
			// collection of ATN states the following ID references includes
			// states reached by traversing predicates. Since this is when we
			// test them, we cannot cash the DFA state target of ID.

			if (LexerATNSimulator.debug) {
				console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
			}
			configs.hasSemanticContext = true;
			if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
				cfg = new LexerATNConfig({ state:trans.target}, config);
			}
		} else if (trans.serializationType === Transition.ACTION) {
			if (config.context === null || config.context.hasEmptyPath()) {
				// execute actions anywhere in the start rule for a token.
				//
				// TODO: if the entry rule is invoked recursively, some
				// actions may be executed during the recursive call. The
				// problem can appear when hasEmptyPath() is true but
				// isEmpty() is false. In this case, the config needs to be
				// split into two contexts - one with just the empty path
				// and another with everything but the empty path.
				// Unfortunately, the current algorithm does not allow
				// getEpsilonTarget to return two configurations, so
				// additional modifications are needed before we can support
				// the split operation.
				const lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
						this.atn.lexerActions[trans.actionIndex]);
				cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
			} else {
				// ignore actions in referenced rules
				cfg = new LexerATNConfig( { state:trans.target}, config);
			}
		} else if (trans.serializationType === Transition.EPSILON) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		} else if (trans.serializationType === Transition.ATOM ||
					trans.serializationType === Transition.RANGE ||
					trans.serializationType === Transition.SET) {
			if (treatEofAsEpsilon) {
				if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
					cfg = new LexerATNConfig( { state:trans.target }, config);
				}
			}
		}
		return cfg;
	}

	/**
	 * Evaluate a predicate specified in the lexer.
	 *
	 * <p>If {@code speculative} is {@code true}, this method was called before
	 * {@link //consume} for the matched character. This method should call
	 * {@link //consume} before evaluating the predicate to ensure position
	 * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
	 * and {@link Lexer//getcolumn}, properly reflect the current
	 * lexer state. This method should restore {@code input} and the simulator
	 * to the original state before returning (i.e. undo the actions made by the
	 * call to {@link //consume}.</p>
	 *
	 * @param input The input stream.
	 * @param ruleIndex The rule containing the predicate.
	 * @param predIndex The index of the predicate within the rule.
	 * @param speculative {@code true} if the current index in {@code input} is
	 * one character before the predicate's location.
	 *
	 * @return {@code true} if the specified predicate evaluates to
	 * {@code true}.
	 */
	evaluatePredicate(input, ruleIndex,
			predIndex, speculative) {
		// assume true if no recognizer was provided
		if (this.recog === null) {
			return true;
		}
		if (!speculative) {
			return this.recog.sempred(null, ruleIndex, predIndex);
		}
		const savedcolumn = this.column;
		const savedLine = this.line;
		const index = input.index;
		const marker = input.mark();
		try {
			this.consume(input);
			return this.recog.sempred(null, ruleIndex, predIndex);
		} finally {
			this.column = savedcolumn;
			this.line = savedLine;
			input.seek(index);
			input.release(marker);
		}
	}

	captureSimState(settings, input, dfaState) {
		settings.index = input.index;
		settings.line = this.line;
		settings.column = this.column;
		settings.dfaState = dfaState;
	}

	addDFAEdge(from_, tk, to, cfgs) {
		if (to === undefined) {
			to = null;
		}
		if (cfgs === undefined) {
			cfgs = null;
		}
		if (to === null && cfgs !== null) {
			// leading to this call, ATNConfigSet.hasSemanticContext is used as a
			// marker indicating dynamic predicate evaluation makes this edge
			// dependent on the specific input sequence, so the static edge in the
			// DFA should be omitted. The target DFAState is still created since
			// execATN has the ability to resynchronize with the DFA state cache
			// following the predicate evaluation step.
			//
			// TJP notes: next time through the DFA, we see a pred again and eval.
			// If that gets us to a previously created (but dangling) DFA
			// state, we can continue in pure DFA mode from there.
			// /
			const suppressEdge = cfgs.hasSemanticContext;
			cfgs.hasSemanticContext = false;

			to = this.addDFAState(cfgs);

			if (suppressEdge) {
				return to;
			}
		}
		// add the edge
		if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
			// Only track edges within the DFA bounds
			return to;
		}
		if (LexerATNSimulator.debug) {
			console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
		}
		if (from_.edges === null) {
			// make room for tokens 1..n and -1 masquerading as index 0
			from_.edges = [];
		}
		from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

		return to;
	}

	/**
	 * Add a new DFA state if there isn't one with this set of
	 * configurations already. This method also detects the first
	 * configuration containing an ATN rule stop state. Later, when
	 * traversing the DFA, we will know which rule to accept.
	 */
	addDFAState(configs) {
		const proposed = new DFAState(null, configs);
		let firstConfigWithRuleStopState = null;
		for (let i = 0; i < configs.items.length; i++) {
			const cfg = configs.items[i];
			if (cfg.state instanceof RuleStopState) {
				firstConfigWithRuleStopState = cfg;
				break;
			}
		}
		if (firstConfigWithRuleStopState !== null) {
			proposed.isAcceptState = true;
			proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
			proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
		}
		const dfa = this.decisionToDFA[this.mode];
		const existing = dfa.states.get(proposed);
		if (existing!==null) {
			return existing;
		}
		const newState = proposed;
		newState.stateNumber = dfa.states.length;
		configs.setReadonly(true);
		newState.configs = configs;
		dfa.states.add(newState);
		return newState;
	}

	getDFA(mode) {
		return this.decisionToDFA[mode];
	}

// Get the text matched so far for the current token.
	getText(input) {
		// index is first lookahead char, don't include.
		return input.getText(this.startIndex, input.index - 1);
	}

	consume(input) {
		const curChar = input.LA(1);
		if (curChar === "\n".charCodeAt(0)) {
			this.line += 1;
			this.column = 0;
		} else {
			this.column += 1;
		}
		input.consume();
	}

	getTokenName(tt) {
		if (tt === -1) {
			return "EOF";
		} else {
			return "'" + String.fromCharCode(tt) + "'";
		}
	}
}

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

module.exports = LexerATNSimulator;

},{"./../Lexer":9,"./../PredictionContext":12,"./../Token":15,"./../dfa/DFAState":35,"./../error/Errors":40,"./ATN":17,"./ATNConfig":18,"./ATNConfigSet":19,"./ATNSimulator":22,"./ATNState":23,"./LexerActionExecutor":27,"./Transition":31}],26:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const LexerActionType = {
    // The type of a {@link LexerChannelAction} action.
    CHANNEL: 0,
    // The type of a {@link LexerCustomAction} action
    CUSTOM: 1,
    // The type of a {@link LexerModeAction} action.
    MODE: 2,
    //The type of a {@link LexerMoreAction} action.
    MORE: 3,
    //The type of a {@link LexerPopModeAction} action.
    POP_MODE: 4,
    //The type of a {@link LexerPushModeAction} action.
    PUSH_MODE: 5,
    //The type of a {@link LexerSkipAction} action.
    SKIP: 6,
    //The type of a {@link LexerTypeAction} action.
    TYPE: 7
}

class LexerAction {
    constructor(action) {
        this.actionType = action;
        this.isPositionDependent = false;
    }

    hashCode() {
        const hash = new Hash();
        this.updateHashCode(hash);
        return hash.finish()
    }

    updateHashCode(hash) {
        hash.update(this.actionType);
    }

    equals(other) {
        return this === other;
    }
}


/**
 * Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
 *
 * <p>The {@code skip} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
class LexerSkipAction extends LexerAction {
    constructor() {
        super(LexerActionType.SKIP);
    }

    execute(lexer) {
        lexer.skip();
    }

    toString() {
        return "skip";
    }
}

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

/**
 * Implements the {@code type} lexer action by calling {@link Lexer//setType}
 * with the assigned type
 */
class LexerTypeAction extends LexerAction {
    constructor(type) {
        super(LexerActionType.TYPE);
        this.type = type;
    }

    execute(lexer) {
        lexer.type = this.type;
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.type);
    }

    equals(other) {
        if(this === other) {
            return true;
        } else if (! (other instanceof LexerTypeAction)) {
            return false;
        } else {
            return this.type === other.type;
        }
    }

    toString() {
        return "type(" + this.type + ")";
    }
}


/**
 * Implements the {@code pushMode} lexer action by calling
 * {@link Lexer//pushMode} with the assigned mode
 */
class LexerPushModeAction extends LexerAction {
    constructor(mode) {
        super(LexerActionType.PUSH_MODE);
        this.mode = mode;
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//pushMode} with the
     * value provided by {@link //getMode}.</p>
     */
    execute(lexer) {
        lexer.pushMode(this.mode);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.mode);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerPushModeAction)) {
            return false;
        } else {
            return this.mode === other.mode;
        }
    }

    toString() {
        return "pushMode(" + this.mode + ")";
    }
}

/**
 * Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
 *
 * <p>The {@code popMode} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
class LexerPopModeAction extends LexerAction {
    constructor() {
        super(LexerActionType.POP_MODE);
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
     */
    execute(lexer) {
        lexer.popMode();
    }

    toString() {
        return "popMode";
    }
}

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

/**
 * Implements the {@code more} lexer action by calling {@link Lexer//more}.
 *
 * <p>The {@code more} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
class LexerMoreAction extends LexerAction {
    constructor() {
        super(LexerActionType.MORE);
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
     */
    execute(lexer) {
        lexer.more();
    }

    toString() {
        return "more";
    }
}

LexerMoreAction.INSTANCE = new LexerMoreAction();


/**
 * Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
 * the assigned mode
 */
class LexerModeAction extends LexerAction {
    constructor(mode) {
        super(LexerActionType.MODE);
        this.mode = mode;
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//mode} with the
     * value provided by {@link //getMode}.</p>
     */
    execute(lexer) {
        lexer.mode(this.mode);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.mode);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerModeAction)) {
            return false;
        } else {
            return this.mode === other.mode;
        }
    }

    toString() {
        return "mode(" + this.mode + ")";
    }
}

/**
 * Executes a custom lexer action by calling {@link Recognizer//action} with the
 * rule and action indexes assigned to the custom action. The implementation of
 * a custom action is added to the generated code for the lexer in an override
 * of {@link Recognizer//action} when the grammar is compiled.
 *
 * <p>This class may represent embedded actions created with the <code>{...}</code>
 * syntax in ANTLR 4, as well as actions created for lexer commands where the
 * command argument could not be evaluated when the grammar was compiled.</p>
 */
class LexerCustomAction extends LexerAction {
    /**
     * Constructs a custom lexer action with the specified rule and action
     * indexes.
     *
     * @param ruleIndex The rule index to use for calls to
     * {@link Recognizer//action}.
     * @param actionIndex The action index to use for calls to
     * {@link Recognizer//action}.
     */
    constructor(ruleIndex, actionIndex) {
        super(LexerActionType.CUSTOM);
        this.ruleIndex = ruleIndex;
        this.actionIndex = actionIndex;
        this.isPositionDependent = true;
    }

    /**
     * <p>Custom actions are implemented by calling {@link Lexer//action} with the
     * appropriate rule and action indexes.</p>
     */
    execute(lexer) {
        lexer.action(null, this.ruleIndex, this.actionIndex);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.ruleIndex, this.actionIndex);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerCustomAction)) {
            return false;
        } else {
            return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
        }
    }
}

/**
 * Implements the {@code channel} lexer action by calling
 * {@link Lexer//setChannel} with the assigned channel.
 * Constructs a new {@code channel} action with the specified channel value.
 * @param channel The channel value to pass to {@link Lexer//setChannel}
 */
class LexerChannelAction extends LexerAction {
    constructor(channel) {
        super(LexerActionType.CHANNEL);
        this.channel = channel;
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//setChannel} with the
     * value provided by {@link //getChannel}.</p>
     */
    execute(lexer) {
        lexer._channel = this.channel;
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.channel);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerChannelAction)) {
            return false;
        } else {
            return this.channel === other.channel;
        }
    }

    toString() {
        return "channel(" + this.channel + ")";
    }
}


/**
 * This implementation of {@link LexerAction} is used for tracking input offsets
 * for position-dependent actions within a {@link LexerActionExecutor}.
 *
 * <p>This action is not serialized as part of the ATN, and is only required for
 * position-dependent lexer actions which appear at a location other than the
 * end of a rule. For more information about DFA optimizations employed for
 * lexer actions, see {@link LexerActionExecutor//append} and
 * {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>
 *
 * Constructs a new indexed custom action by associating a character offset
 * with a {@link LexerAction}.
 *
 * <p>Note: This class is only required for lexer actions for which
 * {@link LexerAction//isPositionDependent} returns {@code true}.</p>
 *
 * @param offset The offset into the input {@link CharStream}, relative to
 * the token start index, at which the specified lexer action should be
 * executed.
 * @param action The lexer action to execute at a particular offset in the
 * input {@link CharStream}.
 */
class LexerIndexedCustomAction extends LexerAction {
    constructor(offset, action) {
        super(action.actionType);
        this.offset = offset;
        this.action = action;
        this.isPositionDependent = true;
    }

    /**
     * <p>This method calls {@link //execute} on the result of {@link //getAction}
     * using the provided {@code lexer}.</p>
     */
    execute(lexer) {
        // assume the input stream position was properly set by the calling code
        this.action.execute(lexer);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.offset, this.action);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerIndexedCustomAction)) {
            return false;
        } else {
            return this.offset === other.offset && this.action === other.action;
        }
    }
}

module.exports = {
    LexerActionType,
    LexerSkipAction,
    LexerChannelAction,
    LexerCustomAction,
    LexerIndexedCustomAction,
    LexerMoreAction,
    LexerTypeAction,
    LexerPushModeAction,
    LexerPopModeAction,
    LexerModeAction
}

},{}],27:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {hashStuff} = require("../Utils");
const {LexerIndexedCustomAction} = require('./LexerAction');

class LexerActionExecutor {
	/**
	 * Represents an executor for a sequence of lexer actions which traversed during
	 * the matching operation of a lexer rule (token).
	 *
	 * <p>The executor tracks position information for position-dependent lexer actions
	 * efficiently, ensuring that actions appearing only at the end of the rule do
	 * not cause bloating of the {@link DFA} created for the lexer.</p>
	 */
	constructor(lexerActions) {
		this.lexerActions = lexerActions === null ? [] : lexerActions;
		/**
		 * Caches the result of {@link //hashCode} since the hash code is an element
		 * of the performance-critical {@link LexerATNConfig//hashCode} operation
		 */
		this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
		// lexerActions]))
		return this;
	}

	/**
	 * Creates a {@link LexerActionExecutor} which encodes the current offset
	 * for position-dependent lexer actions.
	 *
	 * <p>Normally, when the executor encounters lexer actions where
	 * {@link LexerAction//isPositionDependent} returns {@code true}, it calls
	 * {@link IntStream//seek} on the input {@link CharStream} to set the input
	 * position to the <em>end</em> of the current token. This behavior provides
	 * for efficient DFA representation of lexer actions which appear at the end
	 * of a lexer rule, even when the lexer rule matches a variable number of
	 * characters.</p>
	 *
	 * <p>Prior to traversing a match transition in the ATN, the current offset
	 * from the token start index is assigned to all position-dependent lexer
	 * actions which have not already been assigned a fixed offset. By storing
	 * the offsets relative to the token start index, the DFA representation of
	 * lexer actions which appear in the middle of tokens remains efficient due
	 * to sharing among tokens of the same length, regardless of their absolute
	 * position in the input stream.</p>
	 *
	 * <p>If the current executor already has offsets assigned to all
	 * position-dependent lexer actions, the method returns {@code this}.</p>
	 *
	 * @param offset The current offset to assign to all position-dependent
	 * lexer actions which do not already have offsets assigned.
	 *
	 * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets
	 * for all position-dependent lexer actions.
	 */
	fixOffsetBeforeMatch(offset) {
		let updatedLexerActions = null;
		for (let i = 0; i < this.lexerActions.length; i++) {
			if (this.lexerActions[i].isPositionDependent &&
					!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
				if (updatedLexerActions === null) {
					updatedLexerActions = this.lexerActions.concat([]);
				}
				updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
						this.lexerActions[i]);
			}
		}
		if (updatedLexerActions === null) {
			return this;
		} else {
			return new LexerActionExecutor(updatedLexerActions);
		}
	}

	/**
	 * Execute the actions encapsulated by this executor within the context of a
	 * particular {@link Lexer}.
	 *
	 * <p>This method calls {@link IntStream//seek} to set the position of the
	 * {@code input} {@link CharStream} prior to calling
	 * {@link LexerAction//execute} on a position-dependent action. Before the
	 * method returns, the input position will be restored to the same position
	 * it was in when the method was invoked.</p>
	 *
	 * @param lexer The lexer instance.
	 * @param input The input stream which is the source for the current token.
	 * When this method is called, the current {@link IntStream//index} for
	 * {@code input} should be the start of the following token, i.e. 1
	 * character past the end of the current token.
	 * @param startIndex The token start index. This value may be passed to
	 * {@link IntStream//seek} to set the {@code input} position to the beginning
	 * of the token.
	 */
	execute(lexer, input, startIndex) {
		let requiresSeek = false;
		const stopIndex = input.index;
		try {
			for (let i = 0; i < this.lexerActions.length; i++) {
				let lexerAction = this.lexerActions[i];
				if (lexerAction instanceof LexerIndexedCustomAction) {
					const offset = lexerAction.offset;
					input.seek(startIndex + offset);
					lexerAction = lexerAction.action;
					requiresSeek = (startIndex + offset) !== stopIndex;
				} else if (lexerAction.isPositionDependent) {
					input.seek(stopIndex);
					requiresSeek = false;
				}
				lexerAction.execute(lexer);
			}
		} finally {
			if (requiresSeek) {
				input.seek(stopIndex);
			}
		}
	}

	hashCode() {
		return this.cachedHashCode;
	}

	updateHashCode(hash) {
		hash.update(this.cachedHashCode);
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof LexerActionExecutor)) {
			return false;
		} else if (this.cachedHashCode != other.cachedHashCode) {
			return false;
		} else if (this.lexerActions.length != other.lexerActions.length) {
			return false;
		} else {
			const numActions = this.lexerActions.length
			for (let idx = 0; idx < numActions; ++idx) {
				if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
					return false;
				}
			}
			return true;
		}
	}

	/**
	 * Creates a {@link LexerActionExecutor} which executes the actions for
	 * the input {@code lexerActionExecutor} followed by a specified
	 * {@code lexerAction}.
	 *
	 * @param lexerActionExecutor The executor for actions already traversed by
	 * the lexer while matching a token within a particular
	 * {@link LexerATNConfig}. If this is {@code null}, the method behaves as
	 * though it were an empty executor.
	 * @param lexerAction The lexer action to execute after the actions
	 * specified in {@code lexerActionExecutor}.
	 *
	 * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions
	 * of {@code lexerActionExecutor} and {@code lexerAction}.
	 */
	static append(lexerActionExecutor, lexerAction) {
		if (lexerActionExecutor === null) {
			return new LexerActionExecutor([ lexerAction ]);
		}
		const lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
		return new LexerActionExecutor(lexerActions);
	}
}


module.exports = LexerActionExecutor;

},{"../Utils":16,"./LexerAction":26}],28:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const Utils = require('./../Utils');
const {Set, BitSet, DoubleDict} = Utils;

const ATN = require('./ATN');
const {ATNState, RuleStopState} = require('./ATNState');

const {ATNConfig} = require('./ATNConfig');
const {ATNConfigSet} = require('./ATNConfigSet');
const {Token} = require('./../Token');
const {DFAState, PredPrediction} = require('./../dfa/DFAState');
const ATNSimulator = require('./ATNSimulator');
const PredictionMode = require('./PredictionMode');
const RuleContext = require('./../RuleContext');
const ParserRuleContext = require('./../ParserRuleContext');
const {SemanticContext} = require('./SemanticContext');
const {PredictionContext} = require('./../PredictionContext');
const {Interval} = require('./../IntervalSet');
const {Transition, SetTransition, NotSetTransition, RuleTransition, ActionTransition} = require('./Transition');
const {NoViableAltException} = require('./../error/Errors');
const {SingletonPredictionContext, predictionContextFromRuleContext} = require('./../PredictionContext');


/**
 * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
 *
 * <p>
 * The basic complexity of the adaptive strategy makes it harder to understand.
 * We begin with ATN simulation to build paths in a DFA. Subsequent prediction
 * requests go through the DFA first. If they reach a state without an edge for
 * the current symbol, the algorithm fails over to the ATN simulation to
 * complete the DFA path for the current input (until it finds a conflict state
 * or uniquely predicting state).</p>
 *
 * <p>
 * All of that is done without using the outer context because we want to create
 * a DFA that is not dependent upon the rule invocation stack when we do a
 * prediction. One DFA works in all contexts. We avoid using context not
 * necessarily because it's slower, although it can be, but because of the DFA
 * caching problem. The closure routine only considers the rule invocation stack
 * created during prediction beginning in the decision rule. For example, if
 * prediction occurs without invoking another rule's ATN, there are no context
 * stacks in the configurations. When lack of context leads to a conflict, we
 * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
 * strategy (versus full LL(*)).</p>
 *
 * <p>
 * When SLL yields a configuration set with conflict, we rewind the input and
 * retry the ATN simulation, this time using full outer context without adding
 * to the DFA. Configuration context stacks will be the full invocation stacks
 * from the start rule. If we get a conflict using full context, then we can
 * definitively say we have a true ambiguity for that input sequence. If we
 * don't get a conflict, it implies that the decision is sensitive to the outer
 * context. (It is not context-sensitive in the sense of context-sensitive
 * grammars.)</p>
 *
 * <p>
 * The next time we reach this DFA state with an SLL conflict, through DFA
 * simulation, we will again retry the ATN simulation using full context mode.
 * This is slow because we can't save the results and have to "interpret" the
 * ATN each time we get that input.</p>
 *
 * <p>
 * <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
 *
 * <p>
 * We could cache results from full context to predicted alternative easily and
 * that saves a lot of time but doesn't work in presence of predicates. The set
 * of visible predicates from the ATN start state changes depending on the
 * context, because closure can fall off the end of a rule. I tried to cache
 * tuples (stack context, semantic context, predicted alt) but it was slower
 * than interpreting and much more complicated. Also required a huge amount of
 * memory. The goal is not to create the world's fastest parser anyway. I'd like
 * to keep this algorithm simple. By launching multiple threads, we can improve
 * the speed of parsing across a large number of files.</p>
 *
 * <p>
 * There is no strict ordering between the amount of input used by SLL vs LL,
 * which makes it really hard to build a cache for full context. Let's say that
 * we have input A B C that leads to an SLL conflict with full context X. That
 * implies that using X we might only use A B but we could also use A B C D to
 * resolve conflict. Input A B C D could predict alternative 1 in one position
 * in the input and A B C E could predict alternative 2 in another position in
 * input. The conflicting SLL configurations could still be non-unique in the
 * full context prediction, which would lead us to requiring more input than the
 * original A B C.	To make a	prediction cache work, we have to track	the exact
 * input	used during the previous prediction. That amounts to a cache that maps
 * X to a specific DFA for that context.</p>
 *
 * <p>
 * Something should be done for left-recursive expression predictions. They are
 * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
 * with full LL thing Sam does.</p>
 *
 * <p>
 * <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
 *
 * <p>
 * We avoid doing full context retry when the outer context is empty, we did not
 * dip into the outer context by falling off the end of the decision state rule,
 * or when we force SLL mode.</p>
 *
 * <p>
 * As an example of the not dip into outer context case, consider as super
 * constructor calls versus function calls. One grammar might look like
 * this:</p>
 *
 * <pre>
 * ctorBody
 *   : '{' superCall? stat* '}'
 *   ;
 * </pre>
 *
 * <p>
 * Or, you might see something like</p>
 *
 * <pre>
 * stat
 *   : superCall ';'
 *   | expression ';'
 *   | ...
 *   ;
 * </pre>
 *
 * <p>
 * In both cases I believe that no closure operations will dip into the outer
 * context. In the first case ctorBody in the worst case will stop at the '}'.
 * In the 2nd case it should stop at the ';'. Both cases should stay within the
 * entry rule and not dip into the outer context.</p>
 *
 * <p>
 * <strong>PREDICATES</strong></p>
 *
 * <p>
 * Predicates are always evaluated if present in either SLL or LL both. SLL and
 * LL simulation deals with predicates differently. SLL collects predicates as
 * it performs closure operations like ANTLR v3 did. It delays predicate
 * evaluation until it reaches and accept state. This allows us to cache the SLL
 * ATN simulation whereas, if we had evaluated predicates on-the-fly during
 * closure, the DFA state configuration sets would be different and we couldn't
 * build up a suitable DFA.</p>
 *
 * <p>
 * When building a DFA accept state during ATN simulation, we evaluate any
 * predicates and return the sole semantically valid alternative. If there is
 * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
 * we throw an exception. Alternatives without predicates act like they have
 * true predicates. The simple way to think about it is to strip away all
 * alternatives with false predicates and choose the minimum alternative that
 * remains.</p>
 *
 * <p>
 * When we start in the DFA and reach an accept state that's predicated, we test
 * those and return the minimum semantically viable alternative. If no
 * alternatives are viable, we throw an exception.</p>
 *
 * <p>
 * During full LL ATN simulation, closure always evaluates predicates and
 * on-the-fly. This is crucial to reducing the configuration set size during
 * closure. It hits a landmine when parsing with the Java grammar, for example,
 * without this on-the-fly evaluation.</p>
 *
 * <p>
 * <strong>SHARING DFA</strong></p>
 *
 * <p>
 * All instances of the same parser share the same decision DFAs through a
 * static field. Each instance gets its own ATN simulator but they share the
 * same {@link //decisionToDFA} field. They also share a
 * {@link PredictionContextCache} object that makes sure that all
 * {@link PredictionContext} objects are shared among the DFA states. This makes
 * a big size difference.</p>
 *
 * <p>
 * <strong>THREAD SAFETY</strong></p>
 *
 * <p>
 * The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
 * it adds a new DFA object to that array. {@link //addDFAEdge}
 * locks on the DFA for the current decision when setting the
 * {@link DFAState//edges} field. {@link //addDFAState} locks on
 * the DFA for the current decision when looking up a DFA state to see if it
 * already exists. We must make sure that all requests to add DFA states that
 * are equivalent result in the same shared DFA object. This is because lots of
 * threads will be trying to update the DFA at once. The
 * {@link //addDFAState} method also locks inside the DFA lock
 * but this time on the shared context cache when it rebuilds the
 * configurations' {@link PredictionContext} objects using cached
 * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
 * safe as long as we can guarantee that all threads referencing
 * {@code s.edge[t]} get the same physical target {@link DFAState}, or
 * {@code null}. Once into the DFA, the DFA simulation does not reference the
 * {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
 * targets. The DFA simulator will either find {@link DFAState//edges} to be
 * {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
 * {@code dfa.edges[t]} to be non-null. The
 * {@link //addDFAEdge} method could be racing to set the field
 * but in either case the DFA simulator works; if {@code null}, and requests ATN
 * simulation. It could also race trying to get {@code dfa.edges[t]}, but either
 * way it will work because it's not doing a test and set operation.</p>
 *
 * <p>
 * <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
 * Parsing)</strong></p>
 *
 * <p>
 * Sam pointed out that if SLL does not give a syntax error, then there is no
 * point in doing full LL, which is slower. We only have to try LL if we get a
 * syntax error. For maximum speed, Sam starts the parser set to pure SLL
 * mode with the {@link BailErrorStrategy}:</p>
 *
 * <pre>
 * parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
 * parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
 * </pre>
 *
 * <p>
 * If it does not get a syntax error, then we're done. If it does get a syntax
 * error, we need to retry with the combined SLL/LL strategy.</p>
 *
 * <p>
 * The reason this works is as follows. If there are no SLL conflicts, then the
 * grammar is SLL (at least for that input set). If there is an SLL conflict,
 * the full LL analysis must yield a set of viable alternatives which is a
 * subset of the alternatives reported by SLL. If the LL set is a singleton,
 * then the grammar is LL but not SLL. If the LL set is the same size as the SLL
 * set, the decision is SLL. If the LL set has size &gt; 1, then that decision
 * is truly ambiguous on the current input. If the LL set is smaller, then the
 * SLL conflict resolution might choose an alternative that the full LL would
 * rule out as a possibility based upon better context information. If that's
 * the case, then the SLL parse will definitely get an error because the full LL
 * analysis says it's not viable. If SLL conflict resolution chooses an
 * alternative within the LL set, them both SLL and LL would choose the same
 * alternative because they both choose the minimum of multiple conflicting
 * alternatives.</p>
 *
 * <p>
 * Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
 * a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
 * parsing will get an error because SLL will pursue alternative 1. If
 * <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
 * choose the same alternative because alternative one is the minimum of either
 * set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
 * error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
 *
 * <p>
 * Of course, if the input is invalid, then we will get an error for sure in
 * both SLL and LL parsing. Erroneous input will therefore require 2 passes over
 * the input.</p>
 */
class ParserATNSimulator extends ATNSimulator {
    constructor(parser, atn, decisionToDFA, sharedContextCache) {
        super(atn, sharedContextCache);
        this.parser = parser;
        this.decisionToDFA = decisionToDFA;
        // SLL, LL, or LL + exact ambig detection?//
        this.predictionMode = PredictionMode.LL;
        // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
        this._input = null;
        this._startIndex = 0;
        this._outerContext = null;
        this._dfa = null;
        /**
         * Each prediction operation uses a cache for merge of prediction contexts.
         *  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
         *  isn't synchronized but we're ok since two threads shouldn't reuse same
         *  parser/atnsim object because it can only handle one input at a time.
         *  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
         *  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
         *  also be examined during cache lookup.
         */
        this.mergeCache = null;
        this.debug = false;
        this.debug_closure = false;
        this.debug_add = false;
        this.debug_list_atn_decisions = false;
        this.dfa_debug = false;
        this.retry_debug = false;
    }

    reset() {}

    adaptivePredict(input, decision, outerContext) {
        if (this.debug || this.debug_list_atn_decisions) {
            console.log("adaptivePredict decision " + decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   " line " + input.LT(1).line + ":" +
                                   input.LT(1).column);
        }
        this._input = input;
        this._startIndex = input.index;
        this._outerContext = outerContext;

        const dfa = this.decisionToDFA[decision];
        this._dfa = dfa;
        const m = input.mark();
        const index = input.index;

        // Now we are certain to have a specific decision's DFA
        // But, do we still need an initial state?
        try {
            let s0;
            if (dfa.precedenceDfa) {
                // the start state for a precedence DFA depends on the current
                // parser precedence, and is provided by a DFA method.
                s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
            } else {
                // the start state for a "regular" DFA is just s0
                s0 = dfa.s0;
            }
            if (s0===null) {
                if (outerContext===null) {
                    outerContext = RuleContext.EMPTY;
                }
                if (this.debug || this.debug_list_atn_decisions) {
                    console.log("predictATN decision " + dfa.decision +
                                       " exec LA(1)==" + this.getLookaheadName(input) +
                                       ", outerContext=" + outerContext.toString(this.parser.ruleNames));
                }

                const fullCtx = false;
                let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

                if( dfa.precedenceDfa) {
                    // If this is a precedence DFA, we use applyPrecedenceFilter
                    // to convert the computed start state to a precedence start
                    // state. We then use DFA.setPrecedenceStartState to set the
                    // appropriate start state for the precedence level rather
                    // than simply setting DFA.s0.
                    //
                    dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                    s0_closure = this.applyPrecedenceFilter(s0_closure);
                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                    dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
                } else {
                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                    dfa.s0 = s0;
                }
            }
            const alt = this.execATN(dfa, s0, input, index, outerContext);
            if (this.debug) {
                console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames, this.parser.symbolicNames));
            }
            return alt;
        } finally {
            this._dfa = null;
            this.mergeCache = null; // wack cache after each prediction
            input.seek(index);
            input.release(m);
        }
    }

    /**
     * Performs ATN simulation to compute a predicted alternative based
     *  upon the remaining input, but also updates the DFA cache to avoid
     *  having to traverse the ATN again for the same input sequence.
     *
     * There are some key conditions we're looking for after computing a new
     * set of ATN configs (proposed DFA state):
     *       if the set is empty, there is no viable alternative for current symbol
     *       does the state uniquely predict an alternative?
     *       does the state have a conflict that would prevent us from
     *         putting it on the work list?
     *
     * We also have some key operations to do:
     *       add an edge from previous DFA state to potentially new DFA state, D,
     *         upon current symbol but only if adding to work list, which means in all
     *         cases except no viable alternative (and possibly non-greedy decisions?)
     *       collecting predicates and adding semantic context to DFA accept states
     *       adding rule context to context-sensitive DFA accept states
     *       consuming an input symbol
     *       reporting a conflict
     *       reporting an ambiguity
     *       reporting a context sensitivity
     *       reporting insufficient predicates
     *
     * cover these cases:
     *    dead end
     *    single alt
     *    single alt + preds
     *    conflict
     *    conflict + preds
     *
     */
    execATN(dfa, s0, input, startIndex, outerContext ) {
        if (this.debug || this.debug_list_atn_decisions) {
            console.log("execATN decision " + dfa.decision +
                    " exec LA(1)==" + this.getLookaheadName(input) +
                    " line " + input.LT(1).line + ":" + input.LT(1).column);
        }
        let alt;
        let previousD = s0;

        if (this.debug) {
            console.log("s0 = " + s0);
        }
        let t = input.LA(1);
        while(true) { // while more work
            let D = this.getExistingTargetState(previousD, t);
            if(D===null) {
                D = this.computeTargetState(dfa, previousD, t);
            }
            if(D===ATNSimulator.ERROR) {
                // if any configs in previous dipped into outer context, that
                // means that input up to t actually finished entry rule
                // at least for SLL decision. Full LL doesn't dip into outer
                // so don't need special case.
                // We will get an error no matter what so delay until after
                // decision; better error message. Also, no reachable target
                // ATN states in SLL implies LL will also get nowhere.
                // If conflict in states that dip out, choose min since we
                // will get error no matter what.
                const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
                input.seek(startIndex);
                alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
                if(alt!==ATN.INVALID_ALT_NUMBER) {
                    return alt;
                } else {
                    throw e;
                }
            }
            if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
                // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
                let conflictingAlts = null;
                if (D.predicates!==null) {
                    if (this.debug) {
                        console.log("DFA state has preds in DFA sim LL failover");
                    }
                    const conflictIndex = input.index;
                    if(conflictIndex !== startIndex) {
                        input.seek(startIndex);
                    }
                    conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                    if (conflictingAlts.length===1) {
                        if(this.debug) {
                            console.log("Full LL avoided");
                        }
                        return conflictingAlts.minValue();
                    }
                    if (conflictIndex !== startIndex) {
                        // restore the index so reporting the fallback to full
                        // context occurs with the index at the correct spot
                        input.seek(conflictIndex);
                    }
                }
                if (this.dfa_debug) {
                    console.log("ctx sensitive state " + outerContext +" in " + D);
                }
                const fullCtx = true;
                const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
                this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
                alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
                return alt;
            }
            if (D.isAcceptState) {
                if (D.predicates===null) {
                    return D.prediction;
                }
                const stopIndex = input.index;
                input.seek(startIndex);
                const alts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (alts.length===0) {
                    throw this.noViableAlt(input, outerContext, D.configs, startIndex);
                } else if (alts.length===1) {
                    return alts.minValue();
                } else {
                    // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                    this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                    return alts.minValue();
                }
            }
            previousD = D;

            if (t !== Token.EOF) {
                input.consume();
                t = input.LA(1);
            }
        }
    }

    /**
     * Get an existing target state for an edge in the DFA. If the target state
     * for the edge has not yet been computed or is otherwise not available,
     * this method returns {@code null}.
     *
     * @param previousD The current DFA state
     * @param t The next input symbol
     * @return The existing target DFA state for the given input symbol
     * {@code t}, or {@code null} if the target state for this edge is not
     * already cached
     */
    getExistingTargetState(previousD, t) {
        const edges = previousD.edges;
        if (edges===null) {
            return null;
        } else {
            return edges[t + 1] || null;
        }
    }

    /**
     * Compute a target state for an edge in the DFA, and attempt to add the
     * computed state and corresponding edge to the DFA.
     *
     * @param dfa The DFA
     * @param previousD The current DFA state
     * @param t The next input symbol
     *
     * @return The computed target DFA state for the given input symbol
     * {@code t}. If {@code t} does not lead to a valid DFA state, this method
     * returns {@link //ERROR
     */
    computeTargetState(dfa, previousD, t) {
       const reach = this.computeReachSet(previousD.configs, t, false);
        if(reach===null) {
            this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
            return ATNSimulator.ERROR;
        }
        // create new target state; we'll add to DFA after it's complete
        let D = new DFAState(null, reach);

        const predictedAlt = this.getUniqueAlt(reach);

        if (this.debug) {
            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);
            console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                        /*", previous=" + previousD.configs + */
                        ", configs=" + reach +
                        ", predict=" + predictedAlt +
                        ", allSubsetsConflict=" +
                        PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                        this.getConflictingAlts(reach));
        }
        if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
            // NO CONFLICT, UNIQUELY PREDICTED ALT
            D.isAcceptState = true;
            D.configs.uniqueAlt = predictedAlt;
            D.prediction = predictedAlt;
        } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
            // MORE THAN ONE VIABLE ALTERNATIVE
            D.configs.conflictingAlts = this.getConflictingAlts(reach);
            D.requiresFullContext = true;
            // in SLL-only mode, we will stop at this state and return the minimum alt
            D.isAcceptState = true;
            D.prediction = D.configs.conflictingAlts.minValue();
        }
        if (D.isAcceptState && D.configs.hasSemanticContext) {
            this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
            if( D.predicates!==null) {
                D.prediction = ATN.INVALID_ALT_NUMBER;
            }
        }
        // all adds to dfa are done after we've created full D state
        D = this.addDFAEdge(dfa, previousD, t, D);
        return D;
    }

    predicateDFAState(dfaState, decisionState) {
        // We need to test all predicates, even in DFA states that
        // uniquely predict alternative.
        const nalts = decisionState.transitions.length;
        // Update DFA so reach becomes accept state with (predicate,alt)
        // pairs if preds found for conflicting alts
        const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
        const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
        if (altToPred!==null) {
            dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
            dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
        } else {
            // There are preds in configs but they might go away
            // when OR'd together like {p}? || NONE == NONE. If neither
            // alt has preds, resolve to min alt
            dfaState.prediction = altsToCollectPredsFrom.minValue();
        }
    }

// comes back with reach.uniqueAlt set to a valid alt
    execATNWithFullContext(dfa, D, // how far we got before failing over
                                         s0,
                                         input,
                                         startIndex,
                                         outerContext) {
        if (this.debug || this.debug_list_atn_decisions) {
            console.log("execATNWithFullContext "+s0);
        }
        const fullCtx = true;
        let foundExactAmbig = false;
        let reach;
        let previous = s0;
        input.seek(startIndex);
        let t = input.LA(1);
        let predictedAlt = -1;
        while (true) { // while more work
            reach = this.computeReachSet(previous, t, fullCtx);
            if (reach===null) {
                // if any configs in previous dipped into outer context, that
                // means that input up to t actually finished entry rule
                // at least for LL decision. Full LL doesn't dip into outer
                // so don't need special case.
                // We will get an error no matter what so delay until after
                // decision; better error message. Also, no reachable target
                // ATN states in SLL implies LL will also get nowhere.
                // If conflict in states that dip out, choose min since we
                // will get error no matter what.
                const e = this.noViableAlt(input, outerContext, previous, startIndex);
                input.seek(startIndex);
                const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
                if(alt!==ATN.INVALID_ALT_NUMBER) {
                    return alt;
                } else {
                    throw e;
                }
            }
            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);
            if(this.debug) {
                console.log("LL altSubSets=" + altSubSets + ", predict=" +
                      PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                      PredictionMode.resolvesToJustOneViableAlt(altSubSets));
            }
            reach.uniqueAlt = this.getUniqueAlt(reach);
            // unique prediction?
            if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
                predictedAlt = reach.uniqueAlt;
                break;
            } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
                predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
                if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                    break;
                }
            } else {
                // In exact ambiguity mode, we never try to terminate early.
                // Just keeps scarfing until we know what the conflict is
                if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                    foundExactAmbig = true;
                    predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                    break;
                }
                // else there are multiple non-conflicting subsets or
                // we're not sure what the ambiguity is yet.
                // So, keep going.
            }
            previous = reach;
            if( t !== Token.EOF) {
                input.consume();
                t = input.LA(1);
            }
        }
        // If the configuration set uniquely predicts an alternative,
        // without conflict, then we know that it's a full LL decision
        // not SLL.
        if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
            this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
            return predictedAlt;
        }
        // We do not check predicates here because we have checked them
        // on-the-fly when doing full context prediction.

        //
        // In non-exact ambiguity detection mode, we might	actually be able to
        // detect an exact ambiguity, but I'm not going to spend the cycles
        // needed to check. We only emit ambiguity warnings in exact ambiguity
        // mode.
        //
        // For example, we might know that we have conflicting configurations.
        // But, that does not mean that there is no way forward without a
        // conflict. It's possible to have nonconflicting alt subsets as in:

        // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

        // from
        //
        //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
        //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
        //
        // In this case, (17,1,[5 $]) indicates there is some next sequence that
        // would resolve this without conflict to alternative 1. Any other viable
        // next sequence, however, is associated with a conflict.  We stop
        // looking for input because no amount of further lookahead will alter
        // the fact that we should predict alternative 1.  We just can't say for
        // sure that there is an ambiguity without looking further.

        this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

        return predictedAlt;
    }

    computeReachSet(closure, t, fullCtx) {
        if (this.debug) {
            console.log("in computeReachSet, starting closure: " + closure);
        }
        if( this.mergeCache===null) {
            this.mergeCache = new DoubleDict();
        }
        const intermediate = new ATNConfigSet(fullCtx);

        // Configurations already in a rule stop state indicate reaching the end
        // of the decision rule (local context) or end of the start rule (full
        // context). Once reached, these configurations are never updated by a
        // closure operation, so they are handled separately for the performance
        // advantage of having a smaller intermediate set when calling closure.
        //
        // For full-context reach operations, separate handling is required to
        // ensure that the alternative matching the longest overall sequence is
        // chosen when multiple such configurations can match the input.

        let skippedStopStates = null;

        // First figure out where we can reach on input t
        for (let i=0; i<closure.items.length;i++) {
            const c = closure.items[i];
            if(this.debug) {
                console.log("testing " + this.getTokenName(t) + " at " + c);
            }
            if (c.state instanceof RuleStopState) {
                if (fullCtx || t === Token.EOF) {
                    if (skippedStopStates===null) {
                        skippedStopStates = [];
                    }
                    skippedStopStates.push(c);
                    if(this.debug_add) {
                        console.log("added " + c + " to skippedStopStates");
                    }
                }
                continue;
            }
            for(let j=0;j<c.state.transitions.length;j++) {
                const trans = c.state.transitions[j];
                const target = this.getReachableTarget(trans, t);
                if (target!==null) {
                    const cfg = new ATNConfig({state:target}, c);
                    intermediate.add(cfg, this.mergeCache);
                    if(this.debug_add) {
                        console.log("added " + cfg + " to intermediate");
                    }
                }
            }
        }
        // Now figure out where the reach operation can take us...
        let reach = null;

        // This block optimizes the reach operation for intermediate sets which
        // trivially indicate a termination state for the overall
        // adaptivePredict operation.
        //
        // The conditions assume that intermediate
        // contains all configurations relevant to the reach set, but this
        // condition is not true when one or more configurations have been
        // withheld in skippedStopStates, or when the current symbol is EOF.
        //
        if (skippedStopStates===null && t!==Token.EOF) {
            if (intermediate.items.length===1) {
                // Don't pursue the closure if there is just one state.
                // It can only have one alternative; just add to result
                // Also don't pursue the closure if there is unique alternative
                // among the configurations.
                reach = intermediate;
            } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
                // Also don't pursue the closure if there is unique alternative
                // among the configurations.
                reach = intermediate;
            }
        }
        // If the reach set could not be trivially determined, perform a closure
        // operation on the intermediate set to compute its initial value.
        //
        if (reach===null) {
            reach = new ATNConfigSet(fullCtx);
            const closureBusy = new Set();
            const treatEofAsEpsilon = t === Token.EOF;
            for (let k=0; k<intermediate.items.length;k++) {
                this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
            }
        }
        if (t === Token.EOF) {
            // After consuming EOF no additional input is possible, so we are
            // only interested in configurations which reached the end of the
            // decision rule (local context) or end of the start rule (full
            // context). Update reach to contain only these configurations. This
            // handles both explicit EOF transitions in the grammar and implicit
            // EOF transitions following the end of the decision or start rule.
            //
            // When reach==intermediate, no closure operation was performed. In
            // this case, removeAllConfigsNotInRuleStopState needs to check for
            // reachable rule stop states as well as configurations already in
            // a rule stop state.
            //
            // This is handled before the configurations in skippedStopStates,
            // because any configurations potentially added from that list are
            // already guaranteed to meet this condition whether or not it's
            // required.
            //
            reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
        }
        // If skippedStopStates!==null, then it contains at least one
        // configuration. For full-context reach operations, these
        // configurations reached the end of the start rule, in which case we
        // only add them back to reach if no configuration during the current
        // closure operation reached such a state. This ensures adaptivePredict
        // chooses an alternative matching the longest overall sequence when
        // multiple alternatives are viable.
        //
        if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
            for (let l=0; l<skippedStopStates.length;l++) {
                reach.add(skippedStopStates[l], this.mergeCache);
            }
        }
        if (reach.items.length===0) {
            return null;
        } else {
            return reach;
        }
    }

    /**
     * Return a configuration set containing only the configurations from
     * {@code configs} which are in a {@link RuleStopState}. If all
     * configurations in {@code configs} are already in a rule stop state, this
     * method simply returns {@code configs}.
     *
     * <p>When {@code lookToEndOfRule} is true, this method uses
     * {@link ATN//nextTokens} for each configuration in {@code configs} which is
     * not already in a rule stop state to see if a rule stop state is reachable
     * from the configuration via epsilon-only transitions.</p>
     *
     * @param configs the configuration set to update
     * @param lookToEndOfRule when true, this method checks for rule stop states
     * reachable by epsilon-only transitions from each configuration in
     * {@code configs}.
     *
     * @return {@code configs} if all configurations in {@code configs} are in a
     * rule stop state, otherwise return a new configuration set containing only
     * the configurations from {@code configs} which are in a rule stop state
     */
    removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {
        if (PredictionMode.allConfigsInRuleStopStates(configs)) {
            return configs;
        }
        const result = new ATNConfigSet(configs.fullCtx);
        for(let i=0; i<configs.items.length;i++) {
            const config = configs.items[i];
            if (config.state instanceof RuleStopState) {
                result.add(config, this.mergeCache);
                continue;
            }
            if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
                const nextTokens = this.atn.nextTokens(config.state);
                if (nextTokens.contains(Token.EPSILON)) {
                    const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                    result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
                }
            }
        }
        return result;
    }

    computeStartState(p, ctx, fullCtx) {
        // always at least the implicit call to start rule
        const initialContext = predictionContextFromRuleContext(this.atn, ctx);
        const configs = new ATNConfigSet(fullCtx);
        for(let i=0;i<p.transitions.length;i++) {
            const target = p.transitions[i].target;
            const c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
            const closureBusy = new Set();
            this.closure(c, configs, closureBusy, true, fullCtx, false);
        }
        return configs;
    }

    /**
     * This method transforms the start state computed by
     * {@link //computeStartState} to the special start state used by a
     * precedence DFA for a particular precedence value. The transformation
     * process applies the following changes to the start state's configuration
     * set.
     *
     * <ol>
     * <li>Evaluate the precedence predicates for each configuration using
     * {@link SemanticContext//evalPrecedence}.</li>
     * <li>Remove all configurations which predict an alternative greater than
     * 1, for which another configuration that predicts alternative 1 is in the
     * same ATN state with the same prediction context. This transformation is
     * valid for the following reasons:
     * <ul>
     * <li>The closure block cannot contain any epsilon transitions which bypass
     * the body of the closure, so all states reachable via alternative 1 are
     * part of the precedence alternatives of the transformed left-recursive
     * rule.</li>
     * <li>The "primary" portion of a left recursive rule cannot contain an
     * epsilon transition, so the only way an alternative other than 1 can exist
     * in a state that is also reachable via alternative 1 is by nesting calls
     * to the left-recursive rule, with the outer calls not being at the
     * preferred precedence level.</li>
     * </ul>
     * </li>
     * </ol>
     *
     * <p>
     * The prediction context must be considered by this filter to address
     * situations like the following.
     * </p>
     * <code>
     * <pre>
     * grammar TA;
     * prog: statement* EOF;
     * statement: letterA | statement letterA 'b' ;
     * letterA: 'a';
     * </pre>
     * </code>
     * <p>
     * If the above grammar, the ATN state immediately before the token
     * reference {@code 'a'} in {@code letterA} is reachable from the left edge
     * of both the primary and closure blocks of the left-recursive rule
     * {@code statement}. The prediction context associated with each of these
     * configurations distinguishes between them, and prevents the alternative
     * which stepped out to {@code prog} (and then back in to {@code statement}
     * from being eliminated by the filter.
     * </p>
     *
     * @param configs The configuration set computed by
     * {@link //computeStartState} as the start state for the DFA.
     * @return The transformed configuration set representing the start state
     * for a precedence DFA at a particular precedence level (determined by
     * calling {@link Parser//getPrecedence})
     */
    applyPrecedenceFilter(configs) {
        let config;
        const statesFromAlt1 = [];
        const configSet = new ATNConfigSet(configs.fullCtx);
        for(let i=0; i<configs.items.length; i++) {
            config = configs.items[i];
            // handle alt 1 first
            if (config.alt !== 1) {
                continue;
            }
            const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
            if (updatedContext===null) {
                // the configuration was eliminated
                continue;
            }
            statesFromAlt1[config.state.stateNumber] = config.context;
            if (updatedContext !== config.semanticContext) {
                configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
            } else {
                configSet.add(config, this.mergeCache);
            }
        }
        for(let i=0; i<configs.items.length; i++) {
            config = configs.items[i];
            if (config.alt === 1) {
                // already handled
                continue;
            }
            // In the future, this elimination step could be updated to also
            // filter the prediction context for alternatives predicting alt>1
            // (basically a graph subtraction algorithm).
            if (!config.precedenceFilterSuppressed) {
                const context = statesFromAlt1[config.state.stateNumber] || null;
                if (context!==null && context.equals(config.context)) {
                    // eliminated
                    continue;
                }
            }
            configSet.add(config, this.mergeCache);
        }
        return configSet;
    }

    getReachableTarget(trans, ttype) {
        if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
            return trans.target;
        } else {
            return null;
        }
    }

    getPredsForAmbigAlts(ambigAlts, configs, nalts) {
        // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
        // altToPred starts as an array of all null contexts. The entry at index i
        // corresponds to alternative i. altToPred[i] may have one of three values:
        //   1. null: no ATNConfig c is found such that c.alt==i
        //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
        //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
        //      alt i has at least one unpredicated config.
        //   3. Non-NONE Semantic Context: There exists at least one, and for all
        //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
        //
        // From this, it is clear that NONE||anything==NONE.
        //
        let altToPred = [];
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if(ambigAlts.contains( c.alt )) {
                altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
            }
        }
        let nPredAlts = 0;
        for (let i =1;i< nalts+1;i++) {
            const pred = altToPred[i] || null;
            if (pred===null) {
                altToPred[i] = SemanticContext.NONE;
            } else if (pred !== SemanticContext.NONE) {
                nPredAlts += 1;
            }
        }
        // nonambig alts are null in altToPred
        if (nPredAlts===0) {
            altToPred = null;
        }
        if (this.debug) {
            console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
        }
        return altToPred;
    }

    getPredicatePredictions(ambigAlts, altToPred) {
        const pairs = [];
        let containsPredicate = false;
        for (let i=1; i<altToPred.length;i++) {
            const pred = altToPred[i];
            // unpredicated is indicated by SemanticContext.NONE
            if( ambigAlts!==null && ambigAlts.contains( i )) {
                pairs.push(new PredPrediction(pred, i));
            }
            if (pred !== SemanticContext.NONE) {
                containsPredicate = true;
            }
        }
        if (! containsPredicate) {
            return null;
        }
        return pairs;
    }

    /**
     * This method is used to improve the localization of error messages by
     * choosing an alternative rather than throwing a
     * {@link NoViableAltException} in particular prediction scenarios where the
     * {@link //ERROR} state was reached during ATN simulation.
     *
     * <p>
     * The default implementation of this method uses the following
     * algorithm to identify an ATN configuration which successfully parsed the
     * decision entry rule. Choosing such an alternative ensures that the
     * {@link ParserRuleContext} returned by the calling rule will be complete
     * and valid, and the syntax error will be reported later at a more
     * localized location.</p>
     *
     * <ul>
     * <li>If a syntactically valid path or paths reach the end of the decision rule and
     * they are semantically valid if predicated, return the min associated alt.</li>
     * <li>Else, if a semantically invalid but syntactically valid path exist
     * or paths exist, return the minimum associated alt.
     * </li>
     * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
     * </ul>
     *
     * <p>
     * In some scenarios, the algorithm described above could predict an
     * alternative which will result in a {@link FailedPredicateException} in
     * the parser. Specifically, this could occur if the <em>only</em> configuration
     * capable of successfully parsing to the end of the decision rule is
     * blocked by a semantic predicate. By choosing this alternative within
     * {@link //adaptivePredict} instead of throwing a
     * {@link NoViableAltException}, the resulting
     * {@link FailedPredicateException} in the parser will identify the specific
     * predicate which is preventing the parser from successfully parsing the
     * decision rule, which helps developers identify and correct logic errors
     * in semantic predicates.
     * </p>
     *
     * @param configs The ATN configurations which were valid immediately before
     * the {@link //ERROR} state was reached
     * @param outerContext The is the \gamma_0 initial parser context from the paper
     * or the parser stack at the instant before prediction commences.
     *
     * @return The value to return from {@link //adaptivePredict}, or
     * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
     * identified and {@link //adaptivePredict} should report an error instead
     */
    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {
        const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
        const semValidConfigs = cfgs[0];
        const semInvalidConfigs = cfgs[1];
        let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
            return alt;
        }
        // Is there a syntactically valid path with a failed pred?
        if (semInvalidConfigs.items.length>0) {
            alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
            if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
                return alt;
            }
        }
        return ATN.INVALID_ALT_NUMBER;
    }

    getAltThatFinishedDecisionEntryRule(configs) {
        const alts = [];
        for(let i=0;i<configs.items.length; i++) {
            const c = configs.items[i];
            if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
                if(alts.indexOf(c.alt)<0) {
                    alts.push(c.alt);
                }
            }
        }
        if (alts.length===0) {
            return ATN.INVALID_ALT_NUMBER;
        } else {
            return Math.min.apply(null, alts);
        }
    }

    /**
     * Walk the list of configurations and split them according to
     * those that have preds evaluating to true/false.  If no pred, assume
     * true pred and include in succeeded set.  Returns Pair of sets.
     *
     * Create a new set so as not to alter the incoming parameter.
     *
     * Assumption: the input stream has been restored to the starting point
     * prediction, which is where predicates need to evaluate.*/
    splitAccordingToSemanticValidity( configs, outerContext) {
        const succeeded = new ATNConfigSet(configs.fullCtx);
        const failed = new ATNConfigSet(configs.fullCtx);
        for(let i=0;i<configs.items.length; i++) {
            const c = configs.items[i];
            if (c.semanticContext !== SemanticContext.NONE) {
                const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
                if (predicateEvaluationResult) {
                    succeeded.add(c);
                } else {
                    failed.add(c);
                }
            } else {
                succeeded.add(c);
            }
        }
        return [succeeded, failed];
    }

    /**
     * Look through a list of predicate/alt pairs, returning alts for the
     * pairs that win. A {@code NONE} predicate indicates an alt containing an
     * unpredicated config which behaves as "always true." If !complete
     * then we stop at the first predicate that evaluates to true. This
     * includes pairs with null predicates.
     */
    evalSemanticContext(predPredictions, outerContext, complete) {
        const predictions = new BitSet();
        for(let i=0;i<predPredictions.length;i++) {
            const pair = predPredictions[i];
            if (pair.pred === SemanticContext.NONE) {
                predictions.add(pair.alt);
                if (! complete) {
                    break;
                }
                continue;
            }
            const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
            if (this.debug || this.dfa_debug) {
                console.log("eval pred " + pair + "=" + predicateEvaluationResult);
            }
            if (predicateEvaluationResult) {
                if (this.debug || this.dfa_debug) {
                    console.log("PREDICT " + pair.alt);
                }
                predictions.add(pair.alt);
                if (! complete) {
                    break;
                }
            }
        }
        return predictions;
    }

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//
    closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
        const initialDepth = 0;
        this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                                 fullCtx, initialDepth, treatEofAsEpsilon);
    }

    closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
        if (this.debug || this.debug_closure) {
            console.log("closure(" + config.toString(this.parser,true) + ")");
            // console.log("configs(" + configs.toString() + ")");
            if(config.reachesIntoOuterContext>50) {
                throw "problem";
            }
        }
        if (config.state instanceof RuleStopState) {
            // We hit rule end. If we have context info, use it
            // run thru all possible stack tops in ctx
            if (! config.context.isEmpty()) {
                for (let i =0; i<config.context.length; i++) {
                    if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                        if (fullCtx) {
                            configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                            continue;
                        } else {
                            // we have no context info, just chase follow links (if greedy)
                            if (this.debug) {
                                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                            }
                            this.closure_(config, configs, closureBusy, collectPredicates,
                                     fullCtx, depth, treatEofAsEpsilon);
                        }
                        continue;
                    }
                    const returnState = this.atn.states[config.context.getReturnState(i)];
                    const newContext = config.context.getParent(i); // "pop" return state
                    const parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                    const c = new ATNConfig(parms, null);
                    // While we have context to pop back from, we may have
                    // gotten that context AFTER having falling off a rule.
                    // Make sure we track that we are now out of context.
                    c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                    this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
                }
                return;
            } else if( fullCtx) {
                // reached end of start rule
                configs.add(config, this.mergeCache);
                return;
            } else {
                // else if we have no context info, just chase follow links (if greedy)
                if (this.debug) {
                    console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                }
            }
        }
        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
    }

    // Do the actual work of walking epsilon edges//
    closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
        const p = config.state;
        // optimization
        if (! p.epsilonOnlyTransitions) {
            configs.add(config, this.mergeCache);
            // make sure to not return here, because EOF transitions can act as
            // both epsilon transitions and non-epsilon transitions.
        }
        for(let i = 0;i<p.transitions.length; i++) {
            if(i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
                continue;

            const t = p.transitions[i];
            const continueCollecting = collectPredicates && !(t instanceof ActionTransition);
            const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
            if (c!==null) {
                let newDepth = depth;
                if ( config.state instanceof RuleStopState) {
                    // target fell off end of rule; mark resulting c as having dipped into outer context
                    // We can't get here if incoming config was rule stop and we had context
                    // track how far we dip into outer context.  Might
                    // come in handy and we avoid evaluating context dependent
                    // preds if this is > 0.
                    if (this._dfa !== null && this._dfa.precedenceDfa) {
                        if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
                            c.precedenceFilterSuppressed = true;
                        }
                    }

                    c.reachesIntoOuterContext += 1;
                    if (closureBusy.add(c)!==c) {
                        // avoid infinite recursion for right-recursive rules
                        continue;
                    }
                    configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                    newDepth -= 1;
                    if (this.debug) {
                        console.log("dips into outer ctx: " + c);
                    }
                } else {
                    if (!t.isEpsilon && closureBusy.add(c)!==c){
                        // avoid infinite recursion for EOF* and EOF+
                        continue;
                    }
                    if (t instanceof RuleTransition) {
                        // latch when newDepth goes negative - once we step out of the entry context we can't return
                        if (newDepth >= 0) {
                            newDepth += 1;
                        }
                    }
                }
                this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
            }
        }
    }

    canDropLoopEntryEdgeInLeftRecursiveRule(config) {
        // return False
        const p = config.state;
        // First check to see if we are in StarLoopEntryState generated during
        // left-recursion elimination. For efficiency, also check if
        // the context has an empty stack case. If so, it would mean
        // global FOLLOW so we can't perform optimization
        // Are we the special loop entry/exit state? or SLL wildcard
        if(p.stateType !== ATNState.STAR_LOOP_ENTRY)
            return false;
        if(p.stateType !== ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
               config.context.isEmpty() || config.context.hasEmptyPath())
            return false;

        // Require all return states to return back to the same rule that p is in.
        const numCtxs = config.context.length;
        for(let i=0; i<numCtxs; i++) { // for each stack context
            const returnState = this.atn.states[config.context.getReturnState(i)];
            if (returnState.ruleIndex !== p.ruleIndex)
                return false;
        }

        const decisionStartState = p.transitions[0].target;
        const blockEndStateNum = decisionStartState.endState.stateNumber;
        const blockEndState = this.atn.states[blockEndStateNum];

        // Verify that the top of each stack context leads to loop entry/exit
        // state through epsilon edges and w/o leaving rule.
        for(let i=0; i<numCtxs; i++) { // for each stack context
            const returnStateNumber = config.context.getReturnState(i);
            const returnState = this.atn.states[returnStateNumber];
            // all states must have single outgoing epsilon edge
            if (returnState.transitions.length !== 1 || !returnState.transitions[0].isEpsilon)
                return false;

            // Look for prefix op case like 'not expr', (' type ')' expr
            const returnStateTarget = returnState.transitions[0].target;
            if ( returnState.stateType === ATNState.BLOCK_END && returnStateTarget === p )
                continue;

            // Look for 'expr op expr' or case where expr's return state is block end
            // of (...)* internal block; the block end points to loop back
            // which points to p but we don't need to check that
            if ( returnState === blockEndState )
                continue;

            // Look for ternary expr ? expr : expr. The return state points at block end,
            // which points at loop entry state
            if ( returnStateTarget === blockEndState )
                continue;

            // Look for complex prefix 'between expr and expr' case where 2nd expr's
            // return state points at block end state of (...)* internal block
            if (returnStateTarget.stateType === ATNState.BLOCK_END && returnStateTarget.transitions.length === 1
                    && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p)
                continue;

            // anything else ain't conforming
            return false;
        }
        return true;
    }

    getRuleName(index) {
        if (this.parser!==null && index>=0) {
            return this.parser.ruleNames[index];
        } else {
            return "<rule " + index + ">";
        }
    }

    getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
        switch(t.serializationType) {
        case Transition.RULE:
            return this.ruleTransition(config, t);
        case Transition.PRECEDENCE:
            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
        case Transition.PREDICATE:
            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
        case Transition.ACTION:
            return this.actionTransition(config, t);
        case Transition.EPSILON:
            return new ATNConfig({state:t.target}, config);
        case Transition.ATOM:
        case Transition.RANGE:
        case Transition.SET:
            // EOF transitions act like epsilon transitions after the first EOF
            // transition is traversed
            if (treatEofAsEpsilon) {
                if (t.matches(Token.EOF, 0, 1)) {
                    return new ATNConfig({state: t.target}, config);
                }
            }
            return null;
        default:
            return null;
        }
    }

    actionTransition(config, t) {
        if (this.debug) {
            const index = t.actionIndex === -1 ? 65535 : t.actionIndex;
            console.log("ACTION edge " + t.ruleIndex + ":" + index);
        }
        return new ATNConfig({state:t.target}, config);
    }

    precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {
        if (this.debug) {
            console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                    pt.precedence + ">=_p, ctx dependent=true");
            if (this.parser!==null) {
                console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
            }
        }
        let c = null;
        if (collectPredicates && inContext) {
            if (fullCtx) {
                // In full context mode, we can evaluate predicates on-the-fly
                // during closure, which dramatically reduces the size of
                // the config sets. It also obviates the need to test predicates
                // later during conflict resolution.
                const currentPosition = this._input.index;
                this._input.seek(this._startIndex);
                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
                this._input.seek(currentPosition);
                if (predSucceeds) {
                    c = new ATNConfig({state:pt.target}, config); // no pred context
                }
            } else {
                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
            }
        } else {
            c = new ATNConfig({state:pt.target}, config);
        }
        if (this.debug) {
            console.log("config from pred transition=" + c);
        }
        return c;
    }

    predTransition(config, pt, collectPredicates, inContext, fullCtx) {
        if (this.debug) {
            console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                    ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
            if (this.parser!==null) {
                console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
            }
        }
        let c = null;
        if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
            if (fullCtx) {
                // In full context mode, we can evaluate predicates on-the-fly
                // during closure, which dramatically reduces the size of
                // the config sets. It also obviates the need to test predicates
                // later during conflict resolution.
                const currentPosition = this._input.index;
                this._input.seek(this._startIndex);
                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
                this._input.seek(currentPosition);
                if (predSucceeds) {
                    c = new ATNConfig({state:pt.target}, config); // no pred context
                }
            } else {
                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
            }
        } else {
            c = new ATNConfig({state:pt.target}, config);
        }
        if (this.debug) {
            console.log("config from pred transition=" + c);
        }
        return c;
    }

    ruleTransition(config, t) {
        if (this.debug) {
            console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
        }
        const returnState = t.followState;
        const newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
        return new ATNConfig({state:t.target, context:newContext}, config );
    }

    getConflictingAlts(configs) {
        const altsets = PredictionMode.getConflictingAltSubsets(configs);
        return PredictionMode.getAlts(altsets);
    }

    /**
     * Sam pointed out a problem with the previous definition, v3, of
     * ambiguous states. If we have another state associated with conflicting
     * alternatives, we should keep going. For example, the following grammar
     *
     * s : (ID | ID ID?) ';' ;
     *
     * When the ATN simulation reaches the state before ';', it has a DFA
     * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
     * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
     * because alternative to has another way to continue, via [6|2|[]].
     * The key is that we have a single state that has config's only associated
     * with a single alternative, 2, and crucially the state transitions
     * among the configurations are all non-epsilon transitions. That means
     * we don't consider any conflicts that include alternative 2. So, we
     * ignore the conflict between alts 1 and 2. We ignore a set of
     * conflicting alts when there is an intersection with an alternative
     * associated with a single alt state in the state&rarr;config-list map.
     *
     * It's also the case that we might have two conflicting configurations but
     * also a 3rd nonconflicting configuration for a different alternative:
     * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
     *
     * a : A | A | A B ;
     *
     * After matching input A, we reach the stop state for rule A, state 1.
     * State 8 is the state right before B. Clearly alternatives 1 and 2
     * conflict and no amount of further lookahead will separate the two.
     * However, alternative 3 will be able to continue and so we do not
     * stop working on this state. In the previous example, we're concerned
     * with states associated with the conflicting alternatives. Here alt
     * 3 is not associated with the conflicting configs, but since we can continue
     * looking for input reasonably, I don't declare the state done. We
     * ignore a set of conflicting alts when we have an alternative
     * that we still need to pursue
     */
    getConflictingAltsOrUniqueAlt(configs) {
        let conflictingAlts = null;
        if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
            conflictingAlts = new BitSet();
            conflictingAlts.add(configs.uniqueAlt);
        } else {
            conflictingAlts = configs.conflictingAlts;
        }
        return conflictingAlts;
    }

    getTokenName(t) {
        if (t===Token.EOF) {
            return "EOF";
        }
        if( this.parser!==null && this.parser.literalNames!==null) {
            if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
                console.log("" + t + " ttype out of range: " + this.parser.literalNames);
                console.log("" + this.parser.getInputStream().getTokens());
            } else {
                const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
                return name + "<" + t + ">";
            }
        }
        return "" + t;
    }

    getLookaheadName(input) {
        return this.getTokenName(input.LA(1));
    }

    /**
     * Used for debugging in adaptivePredict around execATN but I cut
     * it out for clarity now that alg. works well. We can leave this
     * "dead" code for a bit
     */
    dumpDeadEndConfigs(nvae) {
        console.log("dead end configs: ");
        const decs = nvae.getDeadEndConfigs();
        for(let i=0; i<decs.length; i++) {
            const c = decs[i];
            let trans = "no edges";
            if (c.state.transitions.length>0) {
                const t = c.state.transitions[0];
                if (t instanceof AtomTransition) {
                    trans = "Atom "+ this.getTokenName(t.label);
                } else if (t instanceof SetTransition) {
                    const neg = (t instanceof NotSetTransition);
                    trans = (neg ? "~" : "") + "Set " + t.set;
                }
            }
            console.error(c.toString(this.parser, true) + ":" + trans);
        }
    }

    noViableAlt(input, outerContext, configs, startIndex) {
        return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
    }

    getUniqueAlt(configs) {
        let alt = ATN.INVALID_ALT_NUMBER;
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if (alt === ATN.INVALID_ALT_NUMBER) {
                alt = c.alt // found first alt
            } else if( c.alt!==alt) {
                return ATN.INVALID_ALT_NUMBER;
            }
        }
        return alt;
    }

    /**
     * Add an edge to the DFA, if possible. This method calls
     * {@link //addDFAState} to ensure the {@code to} state is present in the
     * DFA. If {@code from} is {@code null}, or if {@code t} is outside the
     * range of edges that can be represented in the DFA tables, this method
     * returns without adding the edge to the DFA.
     *
     * <p>If {@code to} is {@code null}, this method returns {@code null}.
     * Otherwise, this method returns the {@link DFAState} returned by calling
     * {@link //addDFAState} for the {@code to} state.</p>
     *
     * @param dfa The DFA
     * @param from_ The source state for the edge
     * @param t The input symbol
     * @param to The target state for the edge
     *
     * @return If {@code to} is {@code null}, this method returns {@code null};
     * otherwise this method returns the result of calling {@link //addDFAState}
     * on {@code to}
     */
    addDFAEdge(dfa, from_, t, to) {
        if( this.debug) {
            console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
        }
        if (to===null) {
            return null;
        }
        to = this.addDFAState(dfa, to); // used existing if possible not incoming
        if (from_===null || t < -1 || t > this.atn.maxTokenType) {
            return to;
        }
        if (from_.edges===null) {
            from_.edges = [];
        }
        from_.edges[t+1] = to; // connect

        if (this.debug) {
            const literalNames = this.parser===null ? null : this.parser.literalNames;
            const symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
            console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
        }
        return to;
    }

    /**
     * Add state {@code D} to the DFA if it is not already present, and return
     * the actual instance stored in the DFA. If a state equivalent to {@code D}
     * is already in the DFA, the existing state is returned. Otherwise this
     * method returns {@code D} after adding it to the DFA.
     *
     * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
     * does not change the DFA.</p>
     *
     * @param dfa The dfa
     * @param D The DFA state to add
     * @return The state stored in the DFA. This will be either the existing
     * state if {@code D} is already in the DFA, or {@code D} itself if the
     * state was not already present
     */
    addDFAState(dfa, D) {
        if (D === ATNSimulator.ERROR) {
            return D;
        }
        const existing = dfa.states.get(D);
        if(existing!==null) {
            return existing;
        }
        D.stateNumber = dfa.states.length;
        if (! D.configs.readOnly) {
            D.configs.optimizeConfigs(this);
            D.configs.setReadonly(true);
        }
        dfa.states.add(D);
        if (this.debug) {
            console.log("adding new DFA state: " + D);
        }
        return D;
    }

    reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {
        if (this.debug || this.retry_debug) {
            const interval = new Interval(startIndex, stopIndex + 1);
            console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                               ", input=" + this.parser.getTokenStream().getText(interval));
        }
        if (this.parser!==null) {
            this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
        }
    }

    reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {
        if (this.debug || this.retry_debug) {
            const interval = new Interval(startIndex, stopIndex + 1);
            console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                               ", input=" + this.parser.getTokenStream().getText(interval));
        }
        if (this.parser!==null) {
            this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
        }
    }

    // If context sensitive parsing, we know it's ambiguity not conflict//
    reportAmbiguity(dfa, D, startIndex, stopIndex,
                                   exact, ambigAlts, configs ) {
        if (this.debug || this.retry_debug) {
            const interval = new Interval(startIndex, stopIndex + 1);
            console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                               ", input=" + this.parser.getTokenStream().getText(interval));
        }
        if (this.parser!==null) {
            this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
        }
    }
}

module.exports = ParserATNSimulator;

},{"./../IntervalSet":7,"./../ParserRuleContext":11,"./../PredictionContext":12,"./../RuleContext":14,"./../Token":15,"./../Utils":16,"./../dfa/DFAState":35,"./../error/Errors":40,"./ATN":17,"./ATNConfig":18,"./ATNConfigSet":19,"./ATNSimulator":22,"./ATNState":23,"./PredictionMode":29,"./SemanticContext":30,"./Transition":31}],29:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Map, BitSet, AltDict, hashStuff} = require('./../Utils');
const ATN = require('./ATN');
const {RuleStopState} = require('./ATNState');
const {ATNConfigSet} = require('./ATNConfigSet');
const {ATNConfig} = require('./ATNConfig');
const {SemanticContext} = require('./SemanticContext');

/**
 * This enumeration defines the prediction modes available in ANTLR 4 along with
 * utility methods for analyzing configuration sets for conflicts and/or
 * ambiguities.
 */
const PredictionMode = {
    /**
     * The SLL(*) prediction mode. This prediction mode ignores the current
     * parser context when making predictions. This is the fastest prediction
     * mode, and provides correct results for many grammars. This prediction
     * mode is more powerful than the prediction mode provided by ANTLR 3, but
     * may result in syntax errors for grammar and input combinations which are
     * not SLL.
     *
     * <p>
     * When using this prediction mode, the parser will either return a correct
     * parse tree (i.e. the same parse tree that would be returned with the
     * {@link //LL} prediction mode), or it will report a syntax error. If a
     * syntax error is encountered when using the {@link //SLL} prediction mode,
     * it may be due to either an actual syntax error in the input or indicate
     * that the particular combination of grammar and input requires the more
     * powerful {@link //LL} prediction abilities to complete successfully.</p>
     *
     * <p>
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.</p>
     */
    SLL: 0,

    /**
     * The LL(*) prediction mode. This prediction mode allows the current parser
     * context to be used for resolving SLL conflicts that occur during
     * prediction. This is the fastest prediction mode that guarantees correct
     * parse results for all combinations of grammars with syntactically correct
     * inputs.
     *
     * <p>
     * When using this prediction mode, the parser will make correct decisions
     * for all syntactically-correct grammar and input combinations. However, in
     * cases where the grammar is truly ambiguous this prediction mode might not
     * report a precise answer for <em>exactly which</em> alternatives are
     * ambiguous.</p>
     *
     * <p>
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.</p>
     */
    LL: 1,

    /**
     *
     * The LL(*) prediction mode with exact ambiguity detection. In addition to
     * the correctness guarantees provided by the {@link //LL} prediction mode,
     * this prediction mode instructs the prediction algorithm to determine the
     * complete and exact set of ambiguous alternatives for every ambiguous
     * decision encountered while parsing.
     *
     * <p>
     * This prediction mode may be used for diagnosing ambiguities during
     * grammar development. Due to the performance overhead of calculating sets
     * of ambiguous alternatives, this prediction mode should be avoided when
     * the exact results are not necessary.</p>
     *
     * <p>
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.</p>
     */
    LL_EXACT_AMBIG_DETECTION: 2,

    /**
     *
     * Computes the SLL prediction termination condition.
     *
     * <p>
     * This method computes the SLL prediction termination condition for both of
     * the following cases.</p>
     *
     * <ul>
     * <li>The usual SLL+LL fallback upon SLL conflict</li>
     * <li>Pure SLL without LL fallback</li>
     * </ul>
     *
     * <p><strong>COMBINED SLL+LL PARSING</strong></p>
     *
     * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
     * ensured regardless of how the termination condition is computed by this
     * method. Due to the substantially higher cost of LL prediction, the
     * prediction should only fall back to LL when the additional lookahead
     * cannot lead to a unique SLL prediction.</p>
     *
     * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
     * conflicting subsets should fall back to full LL, even if the
     * configuration sets don't resolve to the same alternative (e.g.
     * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
     * configuration, SLL could continue with the hopes that more lookahead will
     * resolve via one of those non-conflicting configurations.</p>
     *
     * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
     * stops when it sees only conflicting configuration subsets. In contrast,
     * full LL keeps going when there is uncertainty.</p>
     *
     * <p><strong>HEURISTIC</strong></p>
     *
     * <p>As a heuristic, we stop prediction when we see any conflicting subset
     * unless we see a state that only has one alternative associated with it.
     * The single-alt-state thing lets prediction continue upon rules like
     * (otherwise, it would admit defeat too soon):</p>
     *
     * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
     *
     * <p>When the ATN simulation reaches the state before {@code ';'}, it has a
     * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
     * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
     * processing this node because alternative to has another way to continue,
     * via {@code [6|2|[]]}.</p>
     *
     * <p>It also let's us continue for this rule:</p>
     *
     * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
     *
     * <p>After matching input A, we reach the stop state for rule A, state 1.
     * State 8 is the state right before B. Clearly alternatives 1 and 2
     * conflict and no amount of further lookahead will separate the two.
     * However, alternative 3 will be able to continue and so we do not stop
     * working on this state. In the previous example, we're concerned with
     * states associated with the conflicting alternatives. Here alt 3 is not
     * associated with the conflicting configs, but since we can continue
     * looking for input reasonably, don't declare the state done.</p>
     *
     * <p><strong>PURE SLL PARSING</strong></p>
     *
     * <p>To handle pure SLL parsing, all we have to do is make sure that we
     * combine stack contexts for configurations that differ only by semantic
     * predicate. From there, we can do the usual SLL termination heuristic.</p>
     *
     * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
     *
     * <p>SLL decisions don't evaluate predicates until after they reach DFA stop
     * states because they need to create the DFA cache that works in all
     * semantic situations. In contrast, full LL evaluates predicates collected
     * during start state computation so it can ignore predicates thereafter.
     * This means that SLL termination detection can totally ignore semantic
     * predicates.</p>
     *
     * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
     * semantic predicate contexts so we might see two configurations like the
     * following.</p>
     *
     * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
     *
     * <p>Before testing these configurations against others, we have to merge
     * {@code x} and {@code x'} (without modifying the existing configurations).
     * For example, we test {@code (x+x')==x''} when looking for conflicts in
     * the following configurations.</p>
     *
     * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
     *
     * <p>If the configuration set has predicates (as indicated by
     * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
     * the configurations to strip out all of the predicates so that a standard
     * {@link ATNConfigSet} will merge everything ignoring predicates.</p>
     */
    hasSLLConflictTerminatingPrediction: function( mode, configs) {
        // Configs in rule stop states indicate reaching the end of the decision
        // rule (local context) or end of start rule (full context). If all
        // configs meet this condition, then none of the configurations is able
        // to match additional input so we terminate prediction.
        //
        if (PredictionMode.allConfigsInRuleStopStates(configs)) {
            return true;
        }
        // pure SLL mode parsing
        if (mode === PredictionMode.SLL) {
            // Don't bother with combining configs from different semantic
            // contexts if we can fail over to full LL; costs more time
            // since we'll often fail over anyway.
            if (configs.hasSemanticContext) {
                // dup configs, tossing out semantic predicates
                const dup = new ATNConfigSet();
                for(let i=0;i<configs.items.length;i++) {
                    let c = configs.items[i];
                    c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                    dup.add(c);
                }
                configs = dup;
            }
            // now we have combined contexts for configs with dissimilar preds
        }
        // pure SLL or combined SLL+LL mode parsing
        const altsets = PredictionMode.getConflictingAltSubsets(configs);
        return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
    },

    /**
     * Checks if any configuration in {@code configs} is in a
     * {@link RuleStopState}. Configurations meeting this condition have reached
     * the end of the decision rule (local context) or end of start rule (full
     * context).
     *
     * @param configs the configuration set to test
     * @return {@code true} if any configuration in {@code configs} is in a
     * {@link RuleStopState}, otherwise {@code false}
     */
    hasConfigInRuleStopState: function(configs) {
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if (c.state instanceof RuleStopState) {
                return true;
            }
        }
        return false;
    },

    /**
     * Checks if all configurations in {@code configs} are in a
     * {@link RuleStopState}. Configurations meeting this condition have reached
     * the end of the decision rule (local context) or end of start rule (full
     * context).
     *
     * @param configs the configuration set to test
     * @return {@code true} if all configurations in {@code configs} are in a
     * {@link RuleStopState}, otherwise {@code false}
     */
    allConfigsInRuleStopStates: function(configs) {
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if (!(c.state instanceof RuleStopState)) {
                return false;
            }
        }
        return true;
    },

    /**
     *
     * Full LL prediction termination.
     *
     * <p>Can we stop looking ahead during ATN simulation or is there some
     * uncertainty as to which alternative we will ultimately pick, after
     * consuming more input? Even if there are partial conflicts, we might know
     * that everything is going to resolve to the same minimum alternative. That
     * means we can stop since no more lookahead will change that fact. On the
     * other hand, there might be multiple conflicts that resolve to different
     * minimums. That means we need more look ahead to decide which of those
     * alternatives we should predict.</p>
     *
     * <p>The basic idea is to split the set of configurations {@code C}, into
     * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
     * non-conflicting configurations. Two configurations conflict if they have
     * identical {@link ATNConfig//state} and {@link ATNConfig//context} values
     * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
     * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
     *
     * <p>Reduce these configuration subsets to the set of possible alternatives.
     * You can compute the alternative subsets in one pass as follows:</p>
     *
     * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
     * {@code C} holding {@code s} and {@code ctx} fixed.</p>
     *
     * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
     *
     * <pre>
     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
     * alt and not pred
     * </pre>
     *
     * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
     *
     * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
     * {@code s} and {@code ctx}.</p>
     *
     * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
     * the union of these alternative subsets is a singleton, then no amount of
     * more lookahead will help us. We will always pick that alternative. If,
     * however, there is more than one alternative, then we are uncertain which
     * alternative to predict and must continue looking for resolution. We may
     * or may not discover an ambiguity in the future, even if there are no
     * conflicting subsets this round.</p>
     *
     * <p>The biggest sin is to terminate early because it means we've made a
     * decision but were uncertain as to the eventual outcome. We haven't used
     * enough lookahead. On the other hand, announcing a conflict too late is no
     * big deal; you will still have the conflict. It's just inefficient. It
     * might even look until the end of file.</p>
     *
     * <p>No special consideration for semantic predicates is required because
     * predicates are evaluated on-the-fly for full LL prediction, ensuring that
     * no configuration contains a semantic context during the termination
     * check.</p>
     *
     * <p><strong>CONFLICTING CONFIGS</strong></p>
     *
     * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
     * when {@code i!=j} but {@code x=x'}. Because we merge all
     * {@code (s, i, _)} configurations together, that means that there are at
     * most {@code n} configurations associated with state {@code s} for
     * {@code n} possible alternatives in the decision. The merged stacks
     * complicate the comparison of configuration contexts {@code x} and
     * {@code x'}. Sam checks to see if one is a subset of the other by calling
     * merge and checking to see if the merged result is either {@code x} or
     * {@code x'}. If the {@code x} associated with lowest alternative {@code i}
     * is the superset, then {@code i} is the only possible prediction since the
     * others resolve to {@code min(i)} as well. However, if {@code x} is
     * associated with {@code j>i} then at least one stack configuration for
     * {@code j} is not in conflict with alternative {@code i}. The algorithm
     * should keep going, looking for more lookahead due to the uncertainty.</p>
     *
     * <p>For simplicity, I'm doing a equality check between {@code x} and
     * {@code x'} that lets the algorithm continue to consume lookahead longer
     * than necessary. The reason I like the equality is of course the
     * simplicity but also because that is the test you need to detect the
     * alternatives that are actually in conflict.</p>
     *
     * <p><strong>CONTINUE/STOP RULE</strong></p>
     *
     * <p>Continue if union of resolved alternative sets from non-conflicting and
     * conflicting alternative subsets has more than one alternative. We are
     * uncertain about which alternative to predict.</p>
     *
     * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
     * alternatives are still in the running for the amount of input we've
     * consumed at this point. The conflicting sets let us to strip away
     * configurations that won't lead to more states because we resolve
     * conflicts to the configuration with a minimum alternate for the
     * conflicting set.</p>
     *
     * <p><strong>CASES</strong></p>
     *
     * <ul>
     *
     * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
     *
     * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
     * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
     * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
     * {@code {1,3}} =&gt; continue
     * </li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
     * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
     * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
     * {@code {1}} =&gt; stop and predict 1</li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
     * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
     * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
     * ambiguity {@code {1,2}}</li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
     * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
     * {@code {2}} = {@code {1,2}} =&gt; continue</li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
     * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
     * {@code {3}} = {@code {1,3}} =&gt; continue</li>
     *
     * </ul>
     *
     * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
     *
     * <p>If all states report the same conflicting set of alternatives, then we
     * know we have the exact ambiguity set.</p>
     *
     * <p><code>|A_<em>i</em>|&gt;1</code> and
     * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
     *
     * <p>In other words, we continue examining lookahead until all {@code A_i}
     * have more than one alternative and all {@code A_i} are the same. If
     * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
     * because the resolved set is {@code {1}}. To determine what the real
     * ambiguity is, we have to know whether the ambiguity is between one and
     * two or one and three so we keep going. We can only stop prediction when
     * we need exact ambiguity detection when the sets look like
     * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
     */
    resolvesToJustOneViableAlt: function(altsets) {
        return PredictionMode.getSingleViableAlt(altsets);
    },

    /**
     * Determines if every alternative subset in {@code altsets} contains more
     * than one alternative.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if every {@link BitSet} in {@code altsets} has
     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
     */
    allSubsetsConflict: function(altsets) {
        return ! PredictionMode.hasNonConflictingAltSet(altsets);
    },
    /**
     * Determines if any single alternative subset in {@code altsets} contains
     * exactly one alternative.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if {@code altsets} contains a {@link BitSet} with
     * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
     */
    hasNonConflictingAltSet: function(altsets) {
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            if (alts.length===1) {
                return true;
            }
        }
        return false;
    },


    /**
     * Determines if any single alternative subset in {@code altsets} contains
     * more than one alternative.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if {@code altsets} contains a {@link BitSet} with
     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
     */
    hasConflictingAltSet: function(altsets) {
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            if (alts.length>1) {
                return true;
            }
        }
        return false;
    },


    /**
     * Determines if every alternative subset in {@code altsets} is equivalent.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if every member of {@code altsets} is equal to the
     * others, otherwise {@code false}
     */
    allSubsetsEqual: function(altsets) {
        let first = null;
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            if (first === null) {
                first = alts;
            } else if (alts!==first) {
                return false;
            }
        }
        return true;
    },


    /**
     * Returns the unique alternative predicted by all alternative subsets in
     * {@code altsets}. If no such alternative exists, this method returns
     * {@link ATN//INVALID_ALT_NUMBER}.
     *
     * @param altsets a collection of alternative subsets
     */
    getUniqueAlt: function(altsets) {
        const all = PredictionMode.getAlts(altsets);
        if (all.length===1) {
            return all.minValue();
        } else {
            return ATN.INVALID_ALT_NUMBER;
        }
    },

    /**
     * Gets the complete set of represented alternatives for a collection of
     * alternative subsets. This method returns the union of each {@link BitSet}
     * in {@code altsets}.
     *
     * @param altsets a collection of alternative subsets
     * @return the set of represented alternatives in {@code altsets}
     */
    getAlts: function(altsets) {
        const all = new BitSet();
        altsets.map( function(alts) { all.or(alts); });
        return all;
    },

    /**
     * This function gets the conflicting alt subsets from a configuration set.
     * For each configuration {@code c} in {@code configs}:
     *
     * <pre>
     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
     * alt and not pred
     * </pre>
     */
    getConflictingAltSubsets: function(configs) {
        const configToAlts = new Map();
        configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
        configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber === c2.state.stateNumber && c1.context.equals(c2.context);};
        configs.items.map(function(cfg) {
            let alts = configToAlts.get(cfg);
            if (alts === null) {
                alts = new BitSet();
                configToAlts.put(cfg, alts);
            }
            alts.add(cfg.alt);
        });
        return configToAlts.getValues();
    },

    /**
     * Get a map from state to alt subset from a configuration set. For each
     * configuration {@code c} in {@code configs}:
     *
     * <pre>
     * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
     * </pre>
     */
    getStateToAltMap: function(configs) {
        const m = new AltDict();
        configs.items.map(function(c) {
            let alts = m.get(c.state);
            if (alts === null) {
                alts = new BitSet();
                m.put(c.state, alts);
            }
            alts.add(c.alt);
        });
        return m;
    },

    hasStateAssociatedWithOneAlt: function(configs) {
        const values = PredictionMode.getStateToAltMap(configs).values();
        for(let i=0;i<values.length;i++) {
            if (values[i].length===1) {
                return true;
            }
        }
        return false;
    },

    getSingleViableAlt: function(altsets) {
        let result = null;
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            const minAlt = alts.minValue();
            if(result===null) {
                result = minAlt;
            } else if(result!==minAlt) { // more than 1 viable alt
                return ATN.INVALID_ALT_NUMBER;
            }
        }
        return result;
    }
};

module.exports = PredictionMode;

},{"./../Utils":16,"./ATN":17,"./ATNConfig":18,"./ATNConfigSet":19,"./ATNState":23,"./SemanticContext":30}],30:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const { Set, Hash, equalArrays } = require('./../Utils');

/**
 * A tree structure used to record the semantic context in which
 * an ATN configuration is valid.  It's either a single predicate,
 * a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
 *
 * <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
 * {@link SemanticContext} within the scope of this outer class.</p>
 */
class SemanticContext {

	hashCode() {
		const hash = new Hash();
		this.updateHashCode(hash);
		return hash.finish();
	}

	/**
	 * For context independent predicates, we evaluate them without a local
	 * context (i.e., null context). That way, we can evaluate them without
	 * having to create proper rule-specific context during prediction (as
	 * opposed to the parser, which creates them naturally). In a practical
	 * sense, this avoids a cast exception from RuleContext to myruleContext.
	 *
	 * <p>For context dependent predicates, we must pass in a local context so that
	 * references such as $arg evaluate properly as _localctx.arg. We only
	 * capture context dependent predicates in the context in which we begin
	 * prediction, so we passed in the outer context here in case of context
	 * dependent predicate evaluation.</p>
	 */
	evaluate(parser, outerContext) {}

	/**
	 * Evaluate the precedence predicates for the context and reduce the result.
	 *
	 * @param parser The parser instance.
	 * @param outerContext The current parser context object.
	 * @return The simplified semantic context after precedence predicates are
	 * evaluated, which will be one of the following values.
	 * <ul>
	 * <li>{@link //NONE}: if the predicate simplifies to {@code true} after
	 * precedence predicates are evaluated.</li>
	 * <li>{@code null}: if the predicate simplifies to {@code false} after
	 * precedence predicates are evaluated.</li>
	 * <li>{@code this}: if the semantic context is not changed as a result of
	 * precedence predicate evaluation.</li>
	 * <li>A non-{@code null} {@link SemanticContext}: the new simplified
	 * semantic context after precedence predicates are evaluated.</li>
	 * </ul>
	 */
	evalPrecedence(parser, outerContext) {
		return this;
	}

	static andContext(a, b) {
		if (a === null || a === SemanticContext.NONE) {
			return b;
		}
		if (b === null || b === SemanticContext.NONE) {
			return a;
		}
		const result = new AND(a, b);
		if (result.opnds.length === 1) {
			return result.opnds[0];
		} else {
			return result;
		}
	}

	static orContext(a, b) {
		if (a === null) {
			return b;
		}
		if (b === null) {
			return a;
		}
		if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
			return SemanticContext.NONE;
		}
		const result = new OR(a, b);
		if (result.opnds.length === 1) {
			return result.opnds[0];
		} else {
			return result;
		}
	}
}


class Predicate extends SemanticContext {

	constructor(ruleIndex, predIndex, isCtxDependent) {
		super();
		this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
		this.predIndex = predIndex === undefined ? -1 : predIndex;
		this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	}

	evaluate(parser, outerContext) {
		const localctx = this.isCtxDependent ? outerContext : null;
		return parser.sempred(localctx, this.ruleIndex, this.predIndex);
	}

	updateHashCode(hash) {
		hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof Predicate)) {
			return false;
		} else {
			return this.ruleIndex === other.ruleIndex &&
					this.predIndex === other.predIndex &&
					this.isCtxDependent === other.isCtxDependent;
		}
	}

	toString() {
		return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
	}
}

/**
 * The default {@link SemanticContext}, which is semantically equivalent to
 * a predicate of the form {@code {true}?}
 */
SemanticContext.NONE = new Predicate();


class PrecedencePredicate extends SemanticContext {

	constructor(precedence) {
		super();
		this.precedence = precedence === undefined ? 0 : precedence;
	}

	evaluate(parser, outerContext) {
		return parser.precpred(outerContext, this.precedence);
	}

	evalPrecedence(parser, outerContext) {
		if (parser.precpred(outerContext, this.precedence)) {
			return SemanticContext.NONE;
		} else {
			return null;
		}
	}

	compareTo(other) {
		return this.precedence - other.precedence;
	}

	updateHashCode(hash) {
		hash.update(this.precedence);
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof PrecedencePredicate)) {
			return false;
		} else {
			return this.precedence === other.precedence;
		}
	}

	toString() {
		return "{" + this.precedence + ">=prec}?";
	}

	static filterPrecedencePredicates(set) {
		const result = [];
		set.values().map( function(context) {
			if (context instanceof PrecedencePredicate) {
				result.push(context);
			}
		});
		return result;
	}
}

class AND extends SemanticContext {
	/**
	 * A semantic context which is true whenever none of the contained contexts
	 * is false
	 */
	constructor(a, b) {
		super();
		const operands = new Set();
		if (a instanceof AND) {
			a.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(a);
		}
		if (b instanceof AND) {
			b.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(b);
		}
		const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
		if (precedencePredicates.length > 0) {
			// interested in the transition with the lowest precedence
			let reduced = null;
			precedencePredicates.map( function(p) {
				if(reduced===null || p.precedence<reduced.precedence) {
					reduced = p;
				}
			});
			operands.add(reduced);
		}
		this.opnds = Array.from(operands.values());
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof AND)) {
			return false;
		} else {
			return equalArrays(this.opnds, other.opnds);
		}
	}

	updateHashCode(hash) {
		hash.update(this.opnds, "AND");
	}

	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * The evaluation of predicates by this context is short-circuiting, but
	 * unordered.</p>
	 */
	evaluate(parser, outerContext) {
		for (let i = 0; i < this.opnds.length; i++) {
			if (!this.opnds[i].evaluate(parser, outerContext)) {
				return false;
			}
		}
		return true;
	}

	evalPrecedence(parser, outerContext) {
		let differs = false;
		const operands = [];
		for (let i = 0; i < this.opnds.length; i++) {
			const context = this.opnds[i];
			const evaluated = context.evalPrecedence(parser, outerContext);
			differs |= (evaluated !== context);
			if (evaluated === null) {
				// The AND context is false if any element is false
				return null;
			} else if (evaluated !== SemanticContext.NONE) {
				// Reduce the result by skipping true elements
				operands.push(evaluated);
			}
		}
		if (!differs) {
			return this;
		}
		if (operands.length === 0) {
			// all elements were true, so the AND context is true
			return SemanticContext.NONE;
		}
		let result = null;
		operands.map(function(o) {
			result = result === null ? o : SemanticContext.andContext(result, o);
		});
		return result;
	}

	toString() {
		const s = this.opnds.map(o => o.toString());
		return (s.length > 3 ? s.slice(3) : s).join("&&");
	}
}


class OR extends SemanticContext {
	/**
	 * A semantic context which is true whenever at least one of the contained
	 * contexts is true
	 */
	constructor(a, b) {
		super();
		const operands = new Set();
		if (a instanceof OR) {
			a.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(a);
		}
		if (b instanceof OR) {
			b.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(b);
		}

		const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
		if (precedencePredicates.length > 0) {
			// interested in the transition with the highest precedence
			const s = precedencePredicates.sort(function(a, b) {
				return a.compareTo(b);
			});
			const reduced = s[s.length-1];
			operands.add(reduced);
		}
		this.opnds = Array.from(operands.values());
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof OR)) {
			return false;
		} else {
			return equalArrays(this.opnds, other.opnds);
		}
	}

	updateHashCode(hash) {
		hash.update(this.opnds, "OR");
	}

	/**
	 * <p>
	 * The evaluation of predicates by this context is short-circuiting, but
	 * unordered.</p>
	 */
	evaluate(parser, outerContext) {
		for (let i = 0; i < this.opnds.length; i++) {
			if (this.opnds[i].evaluate(parser, outerContext)) {
				return true;
			}
		}
		return false;
	}

	evalPrecedence(parser, outerContext) {
		let differs = false;
		const operands = [];
		for (let i = 0; i < this.opnds.length; i++) {
			const context = this.opnds[i];
			const evaluated = context.evalPrecedence(parser, outerContext);
			differs |= (evaluated !== context);
			if (evaluated === SemanticContext.NONE) {
				// The OR context is true if any element is true
				return SemanticContext.NONE;
			} else if (evaluated !== null) {
				// Reduce the result by skipping false elements
				operands.push(evaluated);
			}
		}
		if (!differs) {
			return this;
		}
		if (operands.length === 0) {
			// all elements were false, so the OR context is false
			return null;
		}
		const result = null;
		operands.map(function(o) {
			return result === null ? o : SemanticContext.orContext(result, o);
		});
		return result;
	}

	toString() {
		const s = this.opnds.map(o => o.toString());
		return (s.length > 3 ? s.slice(3) : s).join("||");
	}
}

module.exports = {
	SemanticContext,
	PrecedencePredicate,
	Predicate
}

},{"./../Utils":16}],31:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./../Token');
const {IntervalSet} = require('./../IntervalSet');
const {Predicate, PrecedencePredicate} = require('./SemanticContext');

/**
 * An ATN transition between any two ATN states.  Subclasses define
 * atom, set, epsilon, action, predicate, rule transitions.
 *
 * <p>This is a one way link.  It emanates from a state (usually via a list of
 * transitions) and has a target state.</p>
 *
 * <p>Since we never have to change the ATN transitions once we construct it,
 * we can fix these transitions as specific classes. The DFA transitions
 * on the other hand need to update the labels as it adds transitions to
 * the states. We'll use the term Edge for the DFA to distinguish them from
 * ATN transitions.</p>
 */
class Transition {
    constructor(target) {
        // The target of this transition.
        if (target===undefined || target===null) {
            throw "target cannot be null.";
        }
        this.target = target;
        // Are we epsilon, action, sempred?
        this.isEpsilon = false;
        this.label = null;
    }
}

// constants for serialization

Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
// e.g., {isType(input.LT(1))}?
Transition.PREDICATE = 4;
Transition.ATOM = 5;
Transition.ACTION = 6;
// ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.SET = 7;
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges

class AtomTransition extends Transition {
    constructor(target, label) {
        super(target);
        // The token type or character value; or, signifies special label.
        this.label_ = label;
        this.label = this.makeLabel();
        this.serializationType = Transition.ATOM;
    }

    makeLabel() {
        const s = new IntervalSet();
        s.addOne(this.label_);
        return s;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return this.label_ === symbol;
    }

    toString() {
        return this.label_;
    }
}


class RuleTransition extends Transition {
    constructor(ruleStart, ruleIndex, precedence, followState) {
        super(ruleStart);
        // ptr to the rule definition object for this rule ref
        this.ruleIndex = ruleIndex;
        this.precedence = precedence;
        // what node to begin computations following ref to rule
        this.followState = followState;
        this.serializationType = Transition.RULE;
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
}

class EpsilonTransition extends Transition {
    constructor(target, outermostPrecedenceReturn) {
        super(target);
        this.serializationType = Transition.EPSILON;
        this.isEpsilon = true;
        this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    toString() {
        return "epsilon";
    }
}


class RangeTransition extends Transition {
    constructor(target, start, stop) {
        super(target);
        this.serializationType = Transition.RANGE;
        this.start = start;
        this.stop = stop;
        this.label = this.makeLabel();
    }

    makeLabel() {
        const s = new IntervalSet();
        s.addRange(this.start, this.stop);
        return s;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= this.start && symbol <= this.stop;
    }

    toString() {
        return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
    }
}


class AbstractPredicateTransition extends Transition {
    constructor(target) {
        super(target);
    }
}

class PredicateTransition extends AbstractPredicateTransition {
    constructor(target, ruleIndex, predIndex, isCtxDependent) {
        super(target);
        this.serializationType = Transition.PREDICATE;
        this.ruleIndex = ruleIndex;
        this.predIndex = predIndex;
        this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    getPredicate() {
        return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }

    toString() {
        return "pred_" + this.ruleIndex + ":" + this.predIndex;
    }
}


class ActionTransition extends Transition {
    constructor(target, ruleIndex, actionIndex, isCtxDependent) {
        super(target);
        this.serializationType = Transition.ACTION;
        this.ruleIndex = ruleIndex;
        this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
        this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    toString() {
        return "action_" + this.ruleIndex + ":" + this.actionIndex;
    }
}


// A transition containing a set of values.
class SetTransition extends Transition {
    constructor(target, set) {
        super(target);
        this.serializationType = Transition.SET;
        if (set !==undefined && set !==null) {
            this.label = set;
        } else {
            this.label = new IntervalSet();
            this.label.addOne(Token.INVALID_TYPE);
        }
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return this.label.contains(symbol);
    }

    toString() {
        return this.label.toString();
    }
}

class NotSetTransition extends SetTransition {
    constructor(target, set) {
        super(target, set);
        this.serializationType = Transition.NOT_SET;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
                !super.matches(symbol, minVocabSymbol, maxVocabSymbol);
    }

    toString() {
        return '~' + super.toString();
    }
}

class WildcardTransition extends Transition {
    constructor(target) {
        super(target);
        this.serializationType = Transition.WILDCARD;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
    }

    toString() {
        return ".";
    }
}

class PrecedencePredicateTransition extends AbstractPredicateTransition {
    constructor(target, precedence) {
        super(target);
        this.serializationType = Transition.PRECEDENCE;
        this.precedence = precedence;
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    getPredicate() {
        return new PrecedencePredicate(this.precedence);
    }

    toString() {
        return this.precedence + " >= _p";
    }
}

module.exports = {
    Transition,
    AtomTransition,
    SetTransition,
    NotSetTransition,
    RuleTransition,
    ActionTransition,
    EpsilonTransition,
    RangeTransition,
    WildcardTransition,
    PredicateTransition,
    PrecedencePredicateTransition,
    AbstractPredicateTransition
}

},{"./../IntervalSet":7,"./../Token":15,"./SemanticContext":30}],32:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = require('./ATN');
exports.ATNDeserializer = require('./ATNDeserializer');
exports.LexerATNSimulator = require('./LexerATNSimulator');
exports.ParserATNSimulator = require('./ParserATNSimulator');
exports.PredictionMode = require('./PredictionMode');

},{"./ATN":17,"./ATNDeserializer":21,"./LexerATNSimulator":25,"./ParserATNSimulator":28,"./PredictionMode":29}],33:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Set} = require("../Utils");
const {DFAState} = require('./DFAState');
const {StarLoopEntryState} = require('../atn/ATNState');
const {ATNConfigSet} = require('./../atn/ATNConfigSet');
const {DFASerializer} = require('./DFASerializer');
const {LexerDFASerializer} = require('./DFASerializer');

class DFA {
	constructor(atnStartState, decision) {
		if (decision === undefined) {
			decision = 0;
		}
		/**
		 * From which ATN state did we create this DFA?
		 */
		this.atnStartState = atnStartState;
		this.decision = decision;
		/**
		 * A set of all DFA states. Use {@link Map} so we can get old state back
		 * ({@link Set} only allows you to see if it's there).
		 */
		this._states = new Set();
		this.s0 = null;
		/**
		 * {@code true} if this DFA is for a precedence decision; otherwise,
		 * {@code false}. This is the backing field for {@link //isPrecedenceDfa},
		 * {@link //setPrecedenceDfa}
		 */
		this.precedenceDfa = false;
		if (atnStartState instanceof StarLoopEntryState)
		{
			if (atnStartState.isPrecedenceDecision) {
				this.precedenceDfa = true;
				const precedenceState = new DFAState(null, new ATNConfigSet());
				precedenceState.edges = [];
				precedenceState.isAcceptState = false;
				precedenceState.requiresFullContext = false;
				this.s0 = precedenceState;
			}
		}
	}

	/**
	 * Get the start state for a specific precedence value.
	 *
	 * @param precedence The current precedence.
	 * @return The start state corresponding to the specified precedence, or
	 * {@code null} if no start state exists for the specified precedence.
	 *
	 * @throws IllegalStateException if this is not a precedence DFA.
	 * @see //isPrecedenceDfa()
	 */
	getPrecedenceStartState(precedence) {
		if (!(this.precedenceDfa)) {
			throw ("Only precedence DFAs may contain a precedence start state.");
		}
		// s0.edges is never null for a precedence DFA
		if (precedence < 0 || precedence >= this.s0.edges.length) {
			return null;
		}
		return this.s0.edges[precedence] || null;
	}

	/**
	 * Set the start state for a specific precedence value.
	 *
	 * @param precedence The current precedence.
	 * @param startState The start state corresponding to the specified
	 * precedence.
	 *
	 * @throws IllegalStateException if this is not a precedence DFA.
	 * @see //isPrecedenceDfa()
	 */
	setPrecedenceStartState(precedence, startState) {
		if (!(this.precedenceDfa)) {
			throw ("Only precedence DFAs may contain a precedence start state.");
		}
		if (precedence < 0) {
			return;
		}

		/**
		 * synchronization on s0 here is ok. when the DFA is turned into a
		 * precedence DFA, s0 will be initialized once and not updated again
		 * s0.edges is never null for a precedence DFA
		 */
		this.s0.edges[precedence] = startState;
	}

	/**
	 * Sets whether this is a precedence DFA. If the specified value differs
	 * from the current DFA configuration, the following actions are taken;
	 * otherwise no changes are made to the current DFA.
	 *
	 * <ul>
	 * <li>The {@link //states} map is cleared</li>
	 * <li>If {@code precedenceDfa} is {@code false}, the initial state
	 * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
	 * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
	 * store the start states for individual precedence values.</li>
	 * <li>The {@link //precedenceDfa} field is updated</li>
	 * </ul>
	 *
	 * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
	 * {@code false}
	 */
	setPrecedenceDfa(precedenceDfa) {
		if (this.precedenceDfa!==precedenceDfa) {
			this._states = new Set();
			if (precedenceDfa) {
				const precedenceState = new DFAState(null, new ATNConfigSet());
				precedenceState.edges = [];
				precedenceState.isAcceptState = false;
				precedenceState.requiresFullContext = false;
				this.s0 = precedenceState;
			} else {
				this.s0 = null;
			}
			this.precedenceDfa = precedenceDfa;
		}
	}

	/**
	 * Return a list of all states in this DFA, ordered by state number.
	 */
	sortedStates() {
		const list = this._states.values();
		return list.sort(function(a, b) {
			return a.stateNumber - b.stateNumber;
		});
	}

	toString(literalNames, symbolicNames) {
		literalNames = literalNames || null;
		symbolicNames = symbolicNames || null;
		if (this.s0 === null) {
			return "";
		}
		const serializer = new DFASerializer(this, literalNames, symbolicNames);
		return serializer.toString();
	}

	toLexerString() {
		if (this.s0 === null) {
			return "";
		}
		const serializer = new LexerDFASerializer(this);
		return serializer.toString();
	}

	get states(){
		return this._states;
	}
}


module.exports = DFA;

},{"../Utils":16,"../atn/ATNState":23,"./../atn/ATNConfigSet":19,"./DFASerializer":34,"./DFAState":35}],34:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
const Utils = require('./../Utils');

/**
 * A DFA walker that knows how to dump them to serialized strings.
 */
class DFASerializer {
    constructor(dfa, literalNames, symbolicNames) {
        this.dfa = dfa;
        this.literalNames = literalNames || [];
        this.symbolicNames = symbolicNames || [];
    }

    toString() {
       if(this.dfa.s0 === null) {
           return null;
       }
       let buf = "";
       const states = this.dfa.sortedStates();
       for(let i=0; i<states.length; i++) {
           const s = states[i];
           if(s.edges!==null) {
                const n = s.edges.length;
                for(let j=0;j<n;j++) {
                    const t = s.edges[j] || null;
                    if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                        buf = buf.concat(this.getStateString(s));
                        buf = buf.concat("-");
                        buf = buf.concat(this.getEdgeLabel(j));
                        buf = buf.concat("->");
                        buf = buf.concat(this.getStateString(t));
                        buf = buf.concat('\n');
                    }
                }
           }
       }
       return buf.length===0 ? null : buf;
    }

    getEdgeLabel(i) {
        if (i===0) {
            return "EOF";
        } else if(this.literalNames !==null || this.symbolicNames!==null) {
            return this.literalNames[i-1] || this.symbolicNames[i-1];
        } else {
            return String.fromCharCode(i-1);
        }
    }

    getStateString(s) {
        const baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
        if(s.isAcceptState) {
            if (s.predicates !== null) {
                return baseStateStr + "=>" + Utils.arrayToString(s.predicates);
            } else {
                return baseStateStr + "=>" + s.prediction.toString();
            }
        } else {
            return baseStateStr;
        }
    }
}

class LexerDFASerializer extends DFASerializer {
    constructor(dfa) {
        super(dfa, null);
    }

    getEdgeLabel(i) {
        return "'" + String.fromCharCode(i) + "'";
    }
}

module.exports = { DFASerializer , LexerDFASerializer };


},{"./../Utils":16}],35:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {ATNConfigSet} = require('./../atn/ATNConfigSet');
const {Hash, Set} = require('./../Utils');

/**
 * Map a predicate to a predicted alternative.
 */
class PredPrediction {
	constructor(pred, alt) {
		this.alt = alt;
		this.pred = pred;
	}

	toString() {
		return "(" + this.pred + ", " + this.alt + ")";
	}
}

/**
 * A DFA state represents a set of possible ATN configurations.
 * As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
 * to keep track of all possible states the ATN can be in after
 * reading each input symbol. That is to say, after reading
 * input a1a2..an, the DFA is in a state that represents the
 * subset T of the states of the ATN that are reachable from the
 * ATN's start state along some path labeled a1a2..an."
 * In conventional NFA&rarr;DFA conversion, therefore, the subset T
 * would be a bitset representing the set of states the
 * ATN could be in. We need to track the alt predicted by each
 * state as well, however. More importantly, we need to maintain
 * a stack of states, tracking the closure operations as they
 * jump from rule to rule, emulating rule invocations (method calls).
 * I have to add a stack to simulate the proper lookahead sequences for
 * the underlying LL grammar from which the ATN was derived.
 *
 * <p>I use a set of ATNConfig objects not simple states. An ATNConfig
 * is both a state (ala normal conversion) and a RuleContext describing
 * the chain of rules (if any) followed to arrive at that state.</p>
 *
 * <p>A DFA state may have multiple references to a particular state,
 * but with different ATN contexts (with same or different alts)
 * meaning that state was reached via a different set of rule invocations.</p>
 */
class DFAState {
	constructor(stateNumber, configs) {
		if (stateNumber === null) {
			stateNumber = -1;
		}
		if (configs === null) {
			configs = new ATNConfigSet();
		}
		this.stateNumber = stateNumber;
		this.configs = configs;
		/**
		 * {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
		 * {@link Token//EOF} maps to {@code edges[0]}.
		 */
		this.edges = null;
		this.isAcceptState = false;
		/**
		 * if accept state, what ttype do we match or alt do we predict?
		 * This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link//predicates}
		 * {@code !=null} or {@link //requiresFullContext}.
		 */
		this.prediction = 0;
		this.lexerActionExecutor = null;
		/**
		 * Indicates that this state was created during SLL prediction that
		 * discovered a conflict between the configurations in the state. Future
		 * {@link ParserATNSimulator//execATN} invocations immediately jumped doing
		 * full context prediction if this field is true.
		 */
		this.requiresFullContext = false;
		/**
		 * During SLL parsing, this is a list of predicates associated with the
		 * ATN configurations of the DFA state. When we have predicates,
		 * {@link //requiresFullContext} is {@code false} since full context
		 * prediction evaluates predicates
		 * on-the-fly. If this is not null, then {@link //prediction} is
		 * {@link ATN//INVALID_ALT_NUMBER}.
		 *
		 * <p>We only use these for non-{@link //requiresFullContext} but
		 * conflicting states. That
		 * means we know from the context (it's $ or we don't dip into outer
		 * context) that it's an ambiguity not a conflict.</p>
		 *
		 * <p>This list is computed by {@link
		 * ParserATNSimulator//predicateDFAState}.</p>
		 */
		this.predicates = null;
		return this;
	}

	/**
	 * Get the set of all alts mentioned by all ATN configurations in this
	 * DFA state.
	 */
	getAltSet() {
		const alts = new Set();
		if (this.configs !== null) {
			for (let i = 0; i < this.configs.length; i++) {
				const c = this.configs[i];
				alts.add(c.alt);
			}
		}
		if (alts.length === 0) {
			return null;
		} else {
			return alts;
		}
	}

	/**
	 * Two {@link DFAState} instances are equal if their ATN configuration sets
	 * are the same. This method is used to see if a state already exists.
	 *
	 * <p>Because the number of alternatives and number of ATN configurations are
	 * finite, there is a finite number of DFA states that can be processed.
	 * This is necessary to show that the algorithm terminates.</p>
	 *
	 * <p>Cannot test the DFA state numbers here because in
	 * {@link ParserATNSimulator//addDFAState} we need to know if any other state
	 * exists that has this exact set of ATN configurations. The
	 * {@link //stateNumber} is irrelevant.</p>
	 */
	equals(other) {
		// compare set of ATN configurations in this set with other
		return this === other ||
				(other instanceof DFAState &&
					this.configs.equals(other.configs));
	}

	toString() {
		let s = "" + this.stateNumber + ":" + this.configs;
		if(this.isAcceptState) {
			s = s + "=>";
			if (this.predicates !== null)
				s = s + this.predicates;
			else
				s = s + this.prediction;
		}
		return s;
	}

	hashCode() {
		const hash = new Hash();
		hash.update(this.configs);
		return hash.finish();
	}
}

module.exports = { DFAState, PredPrediction };

},{"./../Utils":16,"./../atn/ATNConfigSet":19}],36:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = require('./DFA');
exports.DFASerializer = require('./DFASerializer').DFASerializer;
exports.LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;
exports.PredPrediction = require('./DFAState').PredPrediction;

},{"./DFA":33,"./DFASerializer":34,"./DFAState":35}],37:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {BitSet} = require('./../Utils');
const {ErrorListener} = require('./ErrorListener')
const {Interval} = require('./../IntervalSet')


/**
 * This implementation of {@link ANTLRErrorListener} can be used to identify
 *  certain potential correctness and performance problems in grammars. "Reports"
 *  are made by calling {@link Parser//notifyErrorListeners} with the appropriate
 *  message.
 *
 *  <ul>
 *  <li><b>Ambiguities</b>: These are cases where more than one path through the
 *  grammar can match the input.</li>
 *  <li><b>Weak context sensitivity</b>: These are cases where full-context
 *  prediction resolved an SLL conflict to a unique alternative which equaled the
 *  minimum alternative of the SLL conflict.</li>
 *  <li><b>Strong (forced) context sensitivity</b>: These are cases where the
 *  full-context prediction resolved an SLL conflict to a unique alternative,
 *  <em>and</em> the minimum alternative of the SLL conflict was found to not be
 *  a truly viable alternative. Two-stage parsing cannot be used for inputs where
 *  this situation occurs.</li>
 *  </ul>
 */
class DiagnosticErrorListener extends ErrorListener {
	constructor(exactOnly) {
		super();
		exactOnly = exactOnly || true;
		// whether all ambiguities or only exact ambiguities are reported.
		this.exactOnly = exactOnly;
	}

	reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
		if (this.exactOnly && !exact) {
			return;
		}
		const msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'"
		recognizer.notifyErrorListeners(msg);
	}

	reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
		const msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'"
		recognizer.notifyErrorListeners(msg);
	}

	reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
		const msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'"
		recognizer.notifyErrorListeners(msg);
	}

	getDecisionDescription(recognizer, dfa) {
		const decision = dfa.decision
		const ruleIndex = dfa.atnStartState.ruleIndex

		const ruleNames = recognizer.ruleNames
		if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
			return "" + decision;
		}
		const ruleName = ruleNames[ruleIndex] || null
		if (ruleName === null || ruleName.length === 0) {
			return "" + decision;
		}
		return `${decision} (${ruleName})`;
	}

	/**
	 * Computes the set of conflicting or ambiguous alternatives from a
	 * configuration set, if that information was not already provided by the
	 * parser.
	 *
	 * @param reportedAlts The set of conflicting or ambiguous alternatives, as
	 * reported by the parser.
	 * @param configs The conflicting or ambiguous configuration set.
	 * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
	 * returns the set of alternatives represented in {@code configs}.
     */
	getConflictingAlts(reportedAlts, configs) {
		if (reportedAlts !== null) {
			return reportedAlts;
		}
		const result = new BitSet()
		for (let i = 0; i < configs.items.length; i++) {
			result.add(configs.items[i].alt);
		}
		return `{${result.values().join(", ")}}`;
	}
}

module.exports = DiagnosticErrorListener

},{"./../IntervalSet":7,"./../Utils":16,"./ErrorListener":38}],38:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Provides an empty default implementation of {@link ANTLRErrorListener}. The
 * default implementation of each method does nothing, but can be overridden as
 * necessary.
 */
class ErrorListener {
    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
    }

    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    }

    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
    }

    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
    }
}

/**
 * {@inheritDoc}
 *
 * <p>
 * This implementation prints messages to {@link System//err} containing the
 * values of {@code line}, {@code charPositionInLine}, and {@code msg} using
 * the following format.</p>
 *
 * <pre>
 * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
 * </pre>
 *
 */
class ConsoleErrorListener extends ErrorListener {
    constructor() {
        super();
    }

    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
        console.error("line " + line + ":" + column + " " + msg);
    }
}


/**
 * Provides a default instance of {@link ConsoleErrorListener}.
 */
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

class ProxyErrorListener extends ErrorListener {
    constructor(delegates) {
        super();
        if (delegates===null) {
            throw "delegates";
        }
        this.delegates = delegates;
        return this;
    }

    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
        this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));
    }

    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
        this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));
    }

    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
        this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));
    }

    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
        this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));
    }
}

module.exports = {ErrorListener, ConsoleErrorListener, ProxyErrorListener}


},{}],39:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./../Token')
const {NoViableAltException, InputMismatchException, FailedPredicateException, ParseCancellationException} = require('./Errors')
const {ATNState} = require('./../atn/ATNState')
const {Interval, IntervalSet} = require('./../IntervalSet')

class ErrorStrategy {

    reset(recognizer) {
    }

    recoverInline(recognizer) {
    }

    recover(recognizer, e) {
    }

    sync(recognizer) {
    }

    inErrorRecoveryMode(recognizer) {
    }

    reportError(recognizer) {
    }
}


/**
 * This is the default implementation of {@link ANTLRErrorStrategy} used for
 * error reporting and recovery in ANTLR parsers.
*/
class DefaultErrorStrategy extends ErrorStrategy {
    constructor() {
        super();
        /**
         * Indicates whether the error strategy is currently "recovering from an
         * error". This is used to suppress reporting multiple error messages while
         * attempting to recover from a detected syntax error.
         *
         * @see //inErrorRecoveryMode
         */
        this.errorRecoveryMode = false;

        /**
         * The index into the input stream where the last error occurred.
         * This is used to prevent infinite loops where an error is found
         * but no token is consumed during recovery...another error is found,
         * ad nauseum. This is a failsafe mechanism to guarantee that at least
         * one token/tree node is consumed for two errors.
         */
        this.lastErrorIndex = -1;
        this.lastErrorStates = null;
        this.nextTokensContext = null;
        this.nextTokenState = 0;
    }

    /**
     * <p>The default implementation simply calls {@link //endErrorCondition} to
     * ensure that the handler is not in error recovery mode.</p>
    */
    reset(recognizer) {
        this.endErrorCondition(recognizer);
    }

    /**
     * This method is called to enter error recovery mode when a recognition
     * exception is reported.
     *
     * @param recognizer the parser instance
    */
    beginErrorCondition(recognizer) {
        this.errorRecoveryMode = true;
    }

    inErrorRecoveryMode(recognizer) {
        return this.errorRecoveryMode;
    }

    /**
     * This method is called to leave error recovery mode after recovering from
     * a recognition exception.
     * @param recognizer
     */
    endErrorCondition(recognizer) {
        this.errorRecoveryMode = false;
        this.lastErrorStates = null;
        this.lastErrorIndex = -1;
    }

    /**
     * {@inheritDoc}
     * <p>The default implementation simply calls {@link //endErrorCondition}.</p>
     */
    reportMatch(recognizer) {
        this.endErrorCondition(recognizer);
    }

    /**
     * {@inheritDoc}
     *
     * <p>The default implementation returns immediately if the handler is already
     * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
     * and dispatches the reporting task based on the runtime type of {@code e}
     * according to the following table.</p>
     *
     * <ul>
     * <li>{@link NoViableAltException}: Dispatches the call to
     * {@link //reportNoViableAlternative}</li>
     * <li>{@link InputMismatchException}: Dispatches the call to
     * {@link //reportInputMismatch}</li>
     * <li>{@link FailedPredicateException}: Dispatches the call to
     * {@link //reportFailedPredicate}</li>
     * <li>All other types: calls {@link Parser//notifyErrorListeners} to report
     * the exception</li>
     * </ul>
     */
    reportError(recognizer, e) {
       // if we've already reported an error and have not matched a token
       // yet successfully, don't report any errors.
        if(this.inErrorRecoveryMode(recognizer)) {
            return; // don't report spurious errors
        }
        this.beginErrorCondition(recognizer);
        if ( e instanceof NoViableAltException ) {
            this.reportNoViableAlternative(recognizer, e);
        } else if ( e instanceof InputMismatchException ) {
            this.reportInputMismatch(recognizer, e);
        } else if ( e instanceof FailedPredicateException ) {
            this.reportFailedPredicate(recognizer, e);
        } else {
            console.log("unknown recognition error type: " + e.constructor.name);
            console.log(e.stack);
            recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
        }
    }

    /**
     *
     * {@inheritDoc}
     *
     * <p>The default implementation resynchronizes the parser by consuming tokens
     * until we find one in the resynchronization set--loosely the set of tokens
     * that can follow the current rule.</p>
     *
     */
    recover(recognizer, e) {
        if (this.lastErrorIndex===recognizer.getInputStream().index &&
            this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
            // uh oh, another error at same token index and previously-visited
            // state in ATN; must be a case where LT(1) is in the recovery
            // token set so nothing got consumed. Consume a single token
            // at least to prevent an infinite loop; this is a failsafe.
            recognizer.consume();
        }
        this.lastErrorIndex = recognizer._input.index;
        if (this.lastErrorStates === null) {
            this.lastErrorStates = [];
        }
        this.lastErrorStates.push(recognizer.state);
        const followSet = this.getErrorRecoverySet(recognizer)
        this.consumeUntil(recognizer, followSet);
    }

    /**
     * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
     * that the current lookahead symbol is consistent with what were expecting
     * at this point in the ATN. You can call this anytime but ANTLR only
     * generates code to check before subrules/loops and each iteration.
     *
     * <p>Implements Jim Idle's magic sync mechanism in closures and optional
     * subrules. E.g.,</p>
     *
     * <pre>
     * a : sync ( stuff sync )* ;
     * sync : {consume to what can follow sync} ;
     * </pre>
     *
     * At the start of a sub rule upon error, {@link //sync} performs single
     * token deletion, if possible. If it can't do that, it bails on the current
     * rule and uses the default error recovery, which consumes until the
     * resynchronization set of the current rule.
     *
     * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
     * with an empty alternative), then the expected set includes what follows
     * the subrule.</p>
     *
     * <p>During loop iteration, it consumes until it sees a token that can start a
     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
     * stay in the loop as long as possible.</p>
     *
     * <p><strong>ORIGINS</strong></p>
     *
     * <p>Previous versions of ANTLR did a poor job of their recovery within loops.
     * A single mismatch token or missing token would force the parser to bail
     * out of the entire rules surrounding the loop. So, for rule</p>
     *
     * <pre>
     * classDef : 'class' ID '{' member* '}'
     * </pre>
     *
     * input with an extra token between members would force the parser to
     * consume until it found the next class definition rather than the next
     * member definition of the current class.
     *
     * <p>This functionality cost a little bit of effort because the parser has to
     * compare token set at the start of the loop and at each iteration. If for
     * some reason speed is suffering for you, you can turn off this
     * functionality by simply overriding this method as a blank { }.</p>
     *
     */
    sync(recognizer) {
        // If already recovering, don't try to sync
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        const s = recognizer._interp.atn.states[recognizer.state];
        const la = recognizer.getTokenStream().LA(1);
        // try cheaper subset first; might get lucky. seems to shave a wee bit off
        const nextTokens = recognizer.atn.nextTokens(s);
        if(nextTokens.contains(la)) {
            this.nextTokensContext = null;
            this.nextTokenState = ATNState.INVALID_STATE_NUMBER;
            return;
        } else if (nextTokens.contains(Token.EPSILON)) {
            if(this.nextTokensContext === null) {
                // It's possible the next token won't match information tracked
                // by sync is restricted for performance.
                this.nextTokensContext = recognizer._ctx;
                this.nextTokensState = recognizer._stateNumber;
            }
            return;
        }
        switch (s.stateType) {
        case ATNState.BLOCK_START:
        case ATNState.STAR_BLOCK_START:
        case ATNState.PLUS_BLOCK_START:
        case ATNState.STAR_LOOP_ENTRY:
           // report error and recover if possible
            if( this.singleTokenDeletion(recognizer) !== null) {
                return;
            } else {
                throw new InputMismatchException(recognizer);
            }
        case ATNState.PLUS_LOOP_BACK:
        case ATNState.STAR_LOOP_BACK:
            this.reportUnwantedToken(recognizer);
            const expecting = new IntervalSet()
            expecting.addSet(recognizer.getExpectedTokens());
            const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer))
            this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
            break;
        default:
            // do nothing if we can't identify the exact kind of ATN state
        }
    }

    /**
     * This is called by {@link //reportError} when the exception is a
     * {@link NoViableAltException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportNoViableAlternative(recognizer, e) {
        const tokens = recognizer.getTokenStream()
        let input
        if(tokens !== null) {
            if (e.startToken.type===Token.EOF) {
                input = "<EOF>";
            } else {
                input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
            }
        } else {
            input = "<unknown input>";
        }
        const msg = "no viable alternative at input " + this.escapeWSAndQuote(input)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }

    /**
     * This is called by {@link //reportError} when the exception is an
     * {@link InputMismatchException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportInputMismatch(recognizer, e) {
        const msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
            " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }

    /**
     * This is called by {@link //reportError} when the exception is a
     * {@link FailedPredicateException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportFailedPredicate(recognizer, e) {
        const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex]
        const msg = "rule " + ruleName + " " + e.message
        recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }

    /**
     * This method is called to report a syntax error which requires the removal
     * of a token from the input stream. At the time this method is called, the
     * erroneous symbol is current {@code LT(1)} symbol and has not yet been
     * removed from the input stream. When this method returns,
     * {@code recognizer} is in error recovery mode.
     *
     * <p>This method is called when {@link //singleTokenDeletion} identifies
     * single-token deletion as a viable recovery strategy for a mismatched
     * input error.</p>
     *
     * <p>The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser//notifyErrorListeners}.</p>
     *
     * @param recognizer the parser instance
     *
     */
    reportUnwantedToken(recognizer) {
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        this.beginErrorCondition(recognizer);
        const t = recognizer.getCurrentToken()
        const tokenName = this.getTokenErrorDisplay(t)
        const expecting = this.getExpectedTokens(recognizer)
        const msg = "extraneous input " + tokenName + " expecting " +
            expecting.toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, t, null);
    }

    /**
     * This method is called to report a syntax error which requires the
     * insertion of a missing token into the input stream. At the time this
     * method is called, the missing token has not yet been inserted. When this
     * method returns, {@code recognizer} is in error recovery mode.
     *
     * <p>This method is called when {@link //singleTokenInsertion} identifies
     * single-token insertion as a viable recovery strategy for a mismatched
     * input error.</p>
     *
     * <p>The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser//notifyErrorListeners}.</p>
     *
     * @param recognizer the parser instance
     */
    reportMissingToken(recognizer) {
        if ( this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        this.beginErrorCondition(recognizer);
        const t = recognizer.getCurrentToken()
        const expecting = this.getExpectedTokens(recognizer)
        const msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
            " at " + this.getTokenErrorDisplay(t)
        recognizer.notifyErrorListeners(msg, t, null);
    }

    /**
     * <p>The default implementation attempts to recover from the mismatched input
     * by using single token insertion and deletion as described below. If the
     * recovery attempt fails, this method throws an
     * {@link InputMismatchException}.</p>
     *
     * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
     *
     * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
     * right token, however, then assume {@code LA(1)} is some extra spurious
     * token and delete it. Then consume and return the next token (which was
     * the {@code LA(2)} token) as the successful result of the match operation.</p>
     *
     * <p>This recovery strategy is implemented by {@link
     * //singleTokenDeletion}.</p>
     *
     * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
     *
     * <p>If current token (at {@code LA(1)}) is consistent with what could come
     * after the expected {@code LA(1)} token, then assume the token is missing
     * and use the parser's {@link TokenFactory} to create it on the fly. The
     * "insertion" is performed by returning the created token as the successful
     * result of the match operation.</p>
     *
     * <p>This recovery strategy is implemented by {@link
     * //singleTokenInsertion}.</p>
     *
     * <p><strong>EXAMPLE</strong></p>
     *
     * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
     * the parser returns from the nested call to {@code expr}, it will have
     * call chain:</p>
     *
     * <pre>
     * stat &rarr; expr &rarr; atom
     * </pre>
     *
     * and it will be trying to match the {@code ')'} at this point in the
     * derivation:
     *
     * <pre>
     * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
     * ^
     * </pre>
     *
     * The attempt to match {@code ')'} will fail when it sees {@code ';'} and
     * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
     * is in the set of tokens that can follow the {@code ')'} token reference
     * in rule {@code atom}. It can assume that you forgot the {@code ')'}.
     */
    recoverInline(recognizer) {
        // SINGLE TOKEN DELETION
        const matchedSymbol = this.singleTokenDeletion(recognizer)
        if (matchedSymbol !== null) {
            // we have deleted the extra token.
            // now, move past ttype token as if all were ok
            recognizer.consume();
            return matchedSymbol;
        }
        // SINGLE TOKEN INSERTION
        if (this.singleTokenInsertion(recognizer)) {
            return this.getMissingSymbol(recognizer);
        }
        // even that didn't work; must throw the exception
        throw new InputMismatchException(recognizer);
    }

    /**
     * This method implements the single-token insertion inline error recovery
     * strategy. It is called by {@link //recoverInline} if the single-token
     * deletion strategy fails to recover from the mismatched input. If this
     * method returns {@code true}, {@code recognizer} will be in error recovery
     * mode.
     *
     * <p>This method determines whether or not single-token insertion is viable by
     * checking if the {@code LA(1)} input symbol could be successfully matched
     * if it were instead the {@code LA(2)} symbol. If this method returns
     * {@code true}, the caller is responsible for creating and inserting a
     * token with the correct type to produce this behavior.</p>
     *
     * @param recognizer the parser instance
     * @return {@code true} if single-token insertion is a viable recovery
     * strategy for the current mismatched input, otherwise {@code false}
     */
    singleTokenInsertion(recognizer) {
        const currentSymbolType = recognizer.getTokenStream().LA(1)
        // if current token is consistent with what could come after current
        // ATN state, then we know we're missing a token; error recovery
        // is free to conjure up and insert the missing token
        const atn = recognizer._interp.atn
        const currentState = atn.states[recognizer.state]
        const next = currentState.transitions[0].target
        const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)
        if (expectingAtLL2.contains(currentSymbolType) ){
            this.reportMissingToken(recognizer);
            return true;
        } else {
            return false;
        }
    }

    /**
     * This method implements the single-token deletion inline error recovery
     * strategy. It is called by {@link //recoverInline} to attempt to recover
     * from mismatched input. If this method returns null, the parser and error
     * handler state will not have changed. If this method returns non-null,
     * {@code recognizer} will <em>not</em> be in error recovery mode since the
     * returned token was a successful match.
     *
     * <p>If the single-token deletion is successful, this method calls
     * {@link //reportUnwantedToken} to report the error, followed by
     * {@link Parser//consume} to actually "delete" the extraneous token. Then,
     * before returning {@link //reportMatch} is called to signal a successful
     * match.</p>
     *
     * @param recognizer the parser instance
     * @return the successfully matched {@link Token} instance if single-token
     * deletion successfully recovers from the mismatched input, otherwise
     * {@code null}
     */
    singleTokenDeletion(recognizer) {
        const nextTokenType = recognizer.getTokenStream().LA(2)
        const expecting = this.getExpectedTokens(recognizer)
        if (expecting.contains(nextTokenType)) {
            this.reportUnwantedToken(recognizer);
            // print("recoverFromMismatchedToken deleting " \
            // + str(recognizer.getTokenStream().LT(1)) \
            // + " since " + str(recognizer.getTokenStream().LT(2)) \
            // + " is what we want", file=sys.stderr)
            recognizer.consume(); // simply delete extra token
            // we want to return the token we're actually matching
            const matchedSymbol = recognizer.getCurrentToken()
            this.reportMatch(recognizer); // we know current token is correct
            return matchedSymbol;
        } else {
            return null;
        }
    }

    /**
     * Conjure up a missing token during error recovery.
     *
     * The recognizer attempts to recover from single missing
     * symbols. But, actions might refer to that missing symbol.
     * For example, x=ID {f($x);}. The action clearly assumes
     * that there has been an identifier matched previously and that
     * $x points at that token. If that token is missing, but
     * the next token in the stream is what we want we assume that
     * this token is missing and we keep going. Because we
     * have to return some token to replace the missing token,
     * we have to conjure one up. This method gives the user control
     * over the tokens returned for missing tokens. Mostly,
     * you will want to create something special for identifier
     * tokens. For literals such as '{' and ',', the default
     * action in the parser or tree parser works. It simply creates
     * a CommonToken of the appropriate type. The text will be the token.
     * If you change what tokens must be created by the lexer,
     * override this method to create the appropriate tokens.
     *
     */
    getMissingSymbol(recognizer) {
        const currentSymbol = recognizer.getCurrentToken()
        const expecting = this.getExpectedTokens(recognizer)
        const expectedTokenType = expecting.first() // get any element
        let tokenText
        if (expectedTokenType===Token.EOF) {
            tokenText = "<missing EOF>";
        } else {
            tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
        }
        let current = currentSymbol
        const lookback = recognizer.getTokenStream().LT(-1)
        if (current.type===Token.EOF && lookback !== null) {
            current = lookback;
        }
        return recognizer.getTokenFactory().create(current.source,
            expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
            -1, -1, current.line, current.column);
    }

    getExpectedTokens(recognizer) {
        return recognizer.getExpectedTokens();
    }

    /**
     * How should a token be displayed in an error message? The default
     * is to display just the text, but during development you might
     * want to have a lot of information spit out. Override in that case
     * to use t.toString() (which, for CommonToken, dumps everything about
     * the token). This is better than forcing you to override a method in
     * your token objects because you don't have to go modify your lexer
     * so that it creates a new Java type.
     */
    getTokenErrorDisplay(t) {
        if (t === null) {
            return "<no token>";
        }
        let s = t.text
        if (s === null) {
            if (t.type===Token.EOF) {
                s = "<EOF>";
            } else {
                s = "<" + t.type + ">";
            }
        }
        return this.escapeWSAndQuote(s);
    }

    escapeWSAndQuote(s) {
        s = s.replace(/\n/g,"\\n");
        s = s.replace(/\r/g,"\\r");
        s = s.replace(/\t/g,"\\t");
        return "'" + s + "'";
    }

    /**
     * Compute the error recovery set for the current rule. During
     * rule invocation, the parser pushes the set of tokens that can
     * follow that rule reference on the stack; this amounts to
     * computing FIRST of what follows the rule reference in the
     * enclosing rule. See LinearApproximator.FIRST().
     * This local follow set only includes tokens
     * from within the rule; i.e., the FIRST computation done by
     * ANTLR stops at the end of a rule.
     *
     * EXAMPLE
     *
     * When you find a "no viable alt exception", the input is not
     * consistent with any of the alternatives for rule r. The best
     * thing to do is to consume tokens until you see something that
     * can legally follow a call to r//or* any rule that called r.
     * You don't want the exact set of viable next tokens because the
     * input might just be missing a token--you might consume the
     * rest of the input looking for one of the missing tokens.
     *
     * Consider grammar:
     *
     * a : '[' b ']'
     * | '(' b ')'
     * ;
     * b : c '^' INT ;
     * c : ID
     * | INT
     * ;
     *
     * At each rule invocation, the set of tokens that could follow
     * that rule is pushed on a stack. Here are the various
     * context-sensitive follow sets:
     *
     * FOLLOW(b1_in_a) = FIRST(']') = ']'
     * FOLLOW(b2_in_a) = FIRST(')') = ')'
     * FOLLOW(c_in_b) = FIRST('^') = '^'
     *
     * Upon erroneous input "[]", the call chain is
     *
     * a -> b -> c
     *
     * and, hence, the follow context stack is:
     *
     * depth follow set start of rule execution
     * 0 <EOF> a (from main())
     * 1 ']' b
     * 2 '^' c
     *
     * Notice that ')' is not included, because b would have to have
     * been called from a different context in rule a for ')' to be
     * included.
     *
     * For error recovery, we cannot consider FOLLOW(c)
     * (context-sensitive or otherwise). We need the combined set of
     * all context-sensitive FOLLOW sets--the set of all tokens that
     * could follow any reference in the call chain. We need to
     * resync to one of those tokens. Note that FOLLOW(c)='^' and if
     * we resync'd to that token, we'd consume until EOF. We need to
     * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
     * In this case, for input "[]", LA(1) is ']' and in the set, so we would
     * not consume anything. After printing an error, rule c would
     * return normally. Rule b would not find the required '^' though.
     * At this point, it gets a mismatched token error and throws an
     * exception (since LA(1) is not in the viable following token
     * set). The rule exception handler tries to recover, but finds
     * the same recovery set and doesn't consume anything. Rule b
     * exits normally returning to rule a. Now it finds the ']' (and
     * with the successful match exits errorRecovery mode).
     *
     * So, you can see that the parser walks up the call chain looking
     * for the token that was a member of the recovery set.
     *
     * Errors are not generated in errorRecovery mode.
     *
     * ANTLR's error recovery mechanism is based upon original ideas:
     *
     * "Algorithms + Data Structures = Programs" by Niklaus Wirth
     *
     * and
     *
     * "A note on error recovery in recursive descent parsers":
     * http://portal.acm.org/citation.cfm?id=947902.947905
     *
     * Later, Josef Grosch had some good ideas:
     *
     * "Efficient and Comfortable Error Recovery in Recursive Descent
     * Parsers":
     * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
     *
     * Like Grosch I implement context-sensitive FOLLOW sets that are combined
     * at run-time upon error to avoid overhead during parsing.
     */
    getErrorRecoverySet(recognizer) {
        const atn = recognizer._interp.atn
        let ctx = recognizer._ctx
        const recoverSet = new IntervalSet()
        while (ctx !== null && ctx.invokingState>=0) {
            // compute what follows who invoked us
            const invokingState = atn.states[ctx.invokingState]
            const rt = invokingState.transitions[0]
            const follow = atn.nextTokens(rt.followState)
            recoverSet.addSet(follow);
            ctx = ctx.parentCtx;
        }
        recoverSet.removeOne(Token.EPSILON);
        return recoverSet;
    }

// Consume tokens until one matches the given token set.//
    consumeUntil(recognizer, set) {
        let ttype = recognizer.getTokenStream().LA(1)
        while( ttype !== Token.EOF && !set.contains(ttype)) {
            recognizer.consume();
            ttype = recognizer.getTokenStream().LA(1);
        }
    }
}


/**
 * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
 * by immediately canceling the parse operation with a
 * {@link ParseCancellationException}. The implementation ensures that the
 * {@link ParserRuleContext//exception} field is set for all parse tree nodes
 * that were not completed prior to encountering the error.
 *
 * <p>
 * This error strategy is useful in the following scenarios.</p>
 *
 * <ul>
 * <li><strong>Two-stage parsing:</strong> This error strategy allows the first
 * stage of two-stage parsing to immediately terminate if an error is
 * encountered, and immediately fall back to the second stage. In addition to
 * avoiding wasted work by attempting to recover from errors here, the empty
 * implementation of {@link BailErrorStrategy//sync} improves the performance of
 * the first stage.</li>
 * <li><strong>Silent validation:</strong> When syntax errors are not being
 * reported or logged, and the parse result is simply ignored if errors occur,
 * the {@link BailErrorStrategy} avoids wasting work on recovering from errors
 * when the result will be ignored either way.</li>
 * </ul>
 *
 * <p>
 * {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
 *
 * @see Parser//setErrorHandler(ANTLRErrorStrategy)
 * */
class BailErrorStrategy extends DefaultErrorStrategy {
    constructor() {
        super();
    }

    /**
     * Instead of recovering from exception {@code e}, re-throw it wrapped
     * in a {@link ParseCancellationException} so it is not caught by the
     * rule function catches. Use {@link Exception//getCause()} to get the
     * original {@link RecognitionException}.
     */
    recover(recognizer, e) {
        let context = recognizer._ctx
        while (context !== null) {
            context.exception = e;
            context = context.parentCtx;
        }
        throw new ParseCancellationException(e);
    }

    /**
     * Make sure we don't attempt to recover inline; if the parser
     * successfully recovers, it won't throw an exception.
     */
    recoverInline(recognizer) {
        this.recover(recognizer, new InputMismatchException(recognizer));
    }

// Make sure we don't attempt to recover from problems in subrules.//
    sync(recognizer) {
        // pass
    }
}


module.exports = {BailErrorStrategy, DefaultErrorStrategy};

},{"./../IntervalSet":7,"./../Token":15,"./../atn/ATNState":23,"./Errors":40}],40:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
 *  3 kinds of errors: prediction errors, failed predicate errors, and
 *  mismatched input errors. In each case, the parser knows where it is
 *  in the input, where it is in the ATN, the rule invocation stack,
 *  and what kind of problem occurred.
 */

const {PredicateTransition} = require('./../atn/Transition');
const {Interval} = require('../IntervalSet').Interval;

class RecognitionException extends Error {
    constructor(params) {
        super(params.message);
        if (!!Error.captureStackTrace) {
            Error.captureStackTrace(this, RecognitionException);
        } else {
            var stack = new Error().stack;
        }
        this.message = params.message;
        this.recognizer = params.recognizer;
        this.input = params.input;
        this.ctx = params.ctx;
        /**
         * The current {@link Token} when an error occurred. Since not all streams
         * support accessing symbols by index, we have to track the {@link Token}
         * instance itself
        */
        this.offendingToken = null;
        /**
         * Get the ATN state number the parser was in at the time the error
         * occurred. For {@link NoViableAltException} and
         * {@link LexerNoViableAltException} exceptions, this is the
         * {@link DecisionState} number. For others, it is the state whose outgoing
         * edge we couldn't match.
         */
        this.offendingState = -1;
        if (this.recognizer!==null) {
            this.offendingState = this.recognizer.state;
        }
    }

    /**
     * Gets the set of input symbols which could potentially follow the
     * previously matched symbol at the time this exception was thrown.
     *
     * <p>If the set of expected tokens is not known and could not be computed,
     * this method returns {@code null}.</p>
     *
     * @return The set of token types that could potentially follow the current
     * state in the ATN, or {@code null} if the information is not available.
     */
    getExpectedTokens() {
        if (this.recognizer!==null) {
            return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
        } else {
            return null;
        }
    }

    // <p>If the state number is not known, this method returns -1.</p>
    toString() {
        return this.message;
    }
}

class LexerNoViableAltException extends RecognitionException {
    constructor(lexer, input, startIndex, deadEndConfigs) {
        super({message: "", recognizer: lexer, input: input, ctx: null});
        this.startIndex = startIndex;
        this.deadEndConfigs = deadEndConfigs;
    }

    toString() {
        let symbol = "";
        if (this.startIndex >= 0 && this.startIndex < this.input.size) {
            symbol = this.input.getText(new Interval(this.startIndex,this.startIndex));
        }
        return "LexerNoViableAltException" + symbol;
    }
}


/**
 * Indicates that the parser could not decide which of two or more paths
 * to take based upon the remaining input. It tracks the starting token
 * of the offending input and also knows where the parser was
 * in the various paths when the error. Reported by reportNoViableAlternative()
 */
class NoViableAltException extends RecognitionException {
    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
        ctx = ctx || recognizer._ctx;
        offendingToken = offendingToken || recognizer.getCurrentToken();
        startToken = startToken || recognizer.getCurrentToken();
        input = input || recognizer.getInputStream();
        super({message: "", recognizer: recognizer, input: input, ctx: ctx});
        // Which configurations did we try at input.index() that couldn't match
        // input.LT(1)?//
        this.deadEndConfigs = deadEndConfigs;
        // The token object at the start index; the input stream might
        // not be buffering tokens so get a reference to it. (At the
        // time the error occurred, of course the stream needs to keep a
        // buffer all of the tokens but later we might not have access to those.)
        this.startToken = startToken;
        this.offendingToken = offendingToken;
    }
}

/**
 * This signifies any kind of mismatched input exceptions such as
 * when the current input does not match the expected token.
*/
class InputMismatchException extends RecognitionException {
    constructor(recognizer) {
        super({message: "", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});
        this.offendingToken = recognizer.getCurrentToken();
    }
}

function formatMessage(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
}

/**
 * A semantic predicate failed during validation. Validation of predicates
 * occurs when normally parsing the alternative just like matching a token.
 * Disambiguating predicate evaluation occurs when we test a predicate during
 * prediction.
*/
class FailedPredicateException extends RecognitionException {
    constructor(recognizer, predicate, message) {
        super({
            message: formatMessage(predicate, message || null), recognizer: recognizer,
            input: recognizer.getInputStream(), ctx: recognizer._ctx
        });
        const s = recognizer._interp.atn.states[recognizer.state]
        const trans = s.transitions[0]
        if (trans instanceof PredicateTransition) {
            this.ruleIndex = trans.ruleIndex;
            this.predicateIndex = trans.predIndex;
        } else {
            this.ruleIndex = 0;
            this.predicateIndex = 0;
        }
        this.predicate = predicate;
        this.offendingToken = recognizer.getCurrentToken();
    }
}


class ParseCancellationException extends Error{
    constructor() {
        super()
        Error.captureStackTrace(this, ParseCancellationException);
    }
}

module.exports = {
    RecognitionException,
    NoViableAltException,
    LexerNoViableAltException,
    InputMismatchException,
    FailedPredicateException,
    ParseCancellationException
};

},{"../IntervalSet":7,"./../atn/Transition":31}],41:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

module.exports.RecognitionException = require('./Errors').RecognitionException;
module.exports.NoViableAltException = require('./Errors').NoViableAltException;
module.exports.LexerNoViableAltException = require('./Errors').LexerNoViableAltException;
module.exports.InputMismatchException = require('./Errors').InputMismatchException;
module.exports.FailedPredicateException = require('./Errors').FailedPredicateException;
module.exports.DiagnosticErrorListener = require('./DiagnosticErrorListener');
module.exports.BailErrorStrategy = require('./ErrorStrategy').BailErrorStrategy;
module.exports.DefaultErrorStrategy = require('./ErrorStrategy').DefaultErrorStrategy;
module.exports.ErrorListener = require('./ErrorListener').ErrorListener;

},{"./DiagnosticErrorListener":37,"./ErrorListener":38,"./ErrorStrategy":39,"./Errors":40}],42:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = require('./atn/index');
exports.codepointat = require('./polyfills/codepointat');
exports.dfa = require('./dfa/index');
exports.fromcodepoint = require('./polyfills/fromcodepoint');
exports.tree = require('./tree/index');
exports.error = require('./error/index');
exports.Token = require('./Token').Token;
exports.CharStreams = require('./CharStreams');
exports.CommonToken = require('./Token').CommonToken;
exports.InputStream = require('./InputStream');
exports.FileStream = require('./FileStream');
exports.CommonTokenStream = require('./CommonTokenStream');
exports.Lexer = require('./Lexer');
exports.Parser = require('./Parser');
var pc = require('./PredictionContext');
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = require('./ParserRuleContext');
exports.Interval = require('./IntervalSet').Interval;
exports.IntervalSet = require('./IntervalSet').IntervalSet;
exports.Utils = require('./Utils');
exports.LL1Analyzer = require('./LL1Analyzer').LL1Analyzer;

},{"./CharStreams":2,"./CommonTokenStream":4,"./FileStream":5,"./InputStream":6,"./IntervalSet":7,"./LL1Analyzer":8,"./Lexer":9,"./Parser":10,"./ParserRuleContext":11,"./PredictionContext":12,"./Token":15,"./Utils":16,"./atn/index":32,"./dfa/index":36,"./error/index":41,"./polyfills/codepointat":43,"./polyfills/fromcodepoint":44,"./tree/index":47}],43:[function(require,module,exports){
/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			let result;
			try {
				const object = {};
				const $defineProperty = Object.defineProperty;
				result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {
			}
			return result;
		}());
		const codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			const string = String(this);
			const size = string.length;
			// `ToInteger`
			let index = position ? Number(position) : 0;
			if (index !== index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			const first = string.charCodeAt(index);
			let second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}

},{}],44:[function(require,module,exports){
/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		const defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			let result;
			try {
				const object = {};
				const $defineProperty = Object.defineProperty;
				result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		const stringFromCharCode = String.fromCharCode;
		const floor = Math.floor;
		const fromCodePoint = function(_) {
			const MAX_SIZE = 0x4000;
			const codeUnits = [];
			let highSurrogate;
			let lowSurrogate;
			let index = -1;
			const length = arguments.length;
			if (!length) {
				return '';
			}
			let result = '';
			while (++index < length) {
				let codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) !== codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 === length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}

},{}],45:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = require('./../Token');
const {Interval} = require('./../IntervalSet');
const INVALID_INTERVAL = new Interval(-1, -2);

/**
 * The basic notion of a tree has a parent, a payload, and a list of children.
 * It is the most abstract interface for all the trees used by ANTLR.
 */
class Tree {}

class SyntaxTree extends Tree {
	constructor() {
		super();
	}
}

class ParseTree extends SyntaxTree {
	constructor() {
		super();
	}
}

class RuleNode extends ParseTree {
	constructor() {
		super();
	}

	getRuleContext(){
		throw new Error("missing interface implementation")
	}
}

class TerminalNode extends ParseTree {
	constructor() {
		super();
	}
}

class ErrorNode extends TerminalNode {
	constructor() {
		super();
	}
}

class ParseTreeVisitor {
	visit(ctx) {
		 if (Array.isArray(ctx)) {
			return ctx.map(function(child) {
				return child.accept(this);
			}, this);
		} else {
			return ctx.accept(this);
		}
	}

	visitChildren(ctx) {
		if (ctx.children) {
			return this.visit(ctx.children);
		} else {
			return null;
		}
	}

	visitTerminal(node) {
	}

	visitErrorNode(node) {
	}
}

class ParseTreeListener {
	visitTerminal(node) {
	}

	visitErrorNode(node) {
	}

	enterEveryRule(node) {
	}

	exitEveryRule(node) {
	}
}

class TerminalNodeImpl extends TerminalNode {
	constructor(symbol) {
		super();
		this.parentCtx = null;
		this.symbol = symbol;
	}

	getChild(i) {
		return null;
	}

	getSymbol() {
		return this.symbol;
	}

	getParent() {
		return this.parentCtx;
	}

	getPayload() {
		return this.symbol;
	}

	getSourceInterval() {
		if (this.symbol === null) {
			return INVALID_INTERVAL;
		}
		const tokenIndex = this.symbol.tokenIndex;
		return new Interval(tokenIndex, tokenIndex);
	}

	getChildCount() {
		return 0;
	}

	accept(visitor) {
		return visitor.visitTerminal(this);
	}

	getText() {
		return this.symbol.text;
	}

	toString() {
		if (this.symbol.type === Token.EOF) {
			return "<EOF>";
		} else {
			return this.symbol.text;
		}
	}
}


/**
 * Represents a token that was consumed during resynchronization
 * rather than during a valid match operation. For example,
 * we will create this kind of a node during single token insertion
 * and deletion as well as during "consume until error recovery set"
 * upon no viable alternative exceptions.
 */
class ErrorNodeImpl extends TerminalNodeImpl {
	constructor(token) {
		super(token);
	}

	isErrorNode() {
		return true;
	}

	accept(visitor) {
		return visitor.visitErrorNode(this);
	}
}

class ParseTreeWalker {

	/**
	 * Performs a walk on the given parse tree starting at the root and going down recursively
	 * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before
	 * recursively walking down into child nodes, then
	 * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.
	 * @param listener The listener used by the walker to process grammar rules
	 * @param t The parse tree to be walked on
	 */
	walk(listener, t) {
		const errorNode = t instanceof ErrorNode ||
				(t.isErrorNode !== undefined && t.isErrorNode());
		if (errorNode) {
			listener.visitErrorNode(t);
		} else if (t instanceof TerminalNode) {
			listener.visitTerminal(t);
		} else {
			this.enterRule(listener, t);
			for (let i = 0; i < t.getChildCount(); i++) {
				const child = t.getChild(i);
				this.walk(listener, child);
			}
			this.exitRule(listener, t);
		}
	}

	/**
	 * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}
	 * then by triggering the event specific to the given parse tree node
	 * @param listener The listener responding to the trigger events
	 * @param r The grammar rule containing the rule context
	 */
	enterRule(listener, r) {
		const ctx = r.getRuleContext();
		listener.enterEveryRule(ctx);
		ctx.enterRule(listener);
	}

	/**
	 * Exits a grammar rule by first triggering the event specific to the given parse tree node
	 * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}
	 * @param listener The listener responding to the trigger events
	 * @param r The grammar rule containing the rule context
	 */
	exitRule(listener, r) {
		const ctx = r.getRuleContext();
		ctx.exitRule(listener);
		listener.exitEveryRule(ctx);
	}
}

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

module.exports = {
	RuleNode,
	ErrorNode,
	TerminalNode,
	ErrorNodeImpl,
	TerminalNodeImpl,
	ParseTreeListener,
	ParseTreeVisitor,
	ParseTreeWalker,
	INVALID_INTERVAL
}

},{"./../IntervalSet":7,"./../Token":15}],46:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const Utils = require('./../Utils');
const {Token} = require('./../Token');
const {ErrorNode, TerminalNode, RuleNode} = require('./Tree');

/** A set of utility routines useful for all kinds of ANTLR trees. */
const Trees = {
    /**
     * Print out a whole tree in LISP form. {@link //getNodeText} is used on the
     *  node payloads to get the text for the nodes.  Detect
     *  parse trees and extract data appropriately.
     */
    toStringTree: function(tree, ruleNames, recog) {
        ruleNames = ruleNames || null;
        recog = recog || null;
        if(recog!==null) {
            ruleNames = recog.ruleNames;
        }
        let s = Trees.getNodeText(tree, ruleNames);
        s = Utils.escapeWhitespace(s, false);
        const c = tree.getChildCount();
        if(c===0) {
            return s;
        }
        let res = "(" + s + ' ';
        if(c>0) {
            s = Trees.toStringTree(tree.getChild(0), ruleNames);
            res = res.concat(s);
        }
        for(let i=1;i<c;i++) {
            s = Trees.toStringTree(tree.getChild(i), ruleNames);
            res = res.concat(' ' + s);
        }
        res = res.concat(")");
        return res;
    },

    getNodeText: function(t, ruleNames, recog) {
        ruleNames = ruleNames || null;
        recog = recog || null;
        if(recog!==null) {
            ruleNames = recog.ruleNames;
        }
        if(ruleNames!==null) {
            if (t instanceof RuleNode) {
                const context = t.getRuleContext()
                const altNumber = context.getAltNumber();
                // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency
                if ( altNumber != 0 ) {
                    return ruleNames[t.ruleIndex]+":"+altNumber;
                }
                return ruleNames[t.ruleIndex];
            } else if ( t instanceof ErrorNode) {
                return t.toString();
            } else if(t instanceof TerminalNode) {
                if(t.symbol!==null) {
                    return t.symbol.text;
                }
            }
        }
        // no recog for rule names
        const payload = t.getPayload();
        if (payload instanceof Token ) {
            return payload.text;
        }
        return t.getPayload().toString();
    },

    /**
     * Return ordered list of all children of this node
     */
    getChildren: function(t) {
        const list = [];
        for(let i=0;i<t.getChildCount();i++) {
            list.push(t.getChild(i));
        }
        return list;
    },

    /**
     * Return a list of all ancestors of this node.  The first node of
     * list is the root and the last is the parent of this node.
     */
    getAncestors: function(t) {
        let ancestors = [];
        t = t.getParent();
        while(t!==null) {
            ancestors = [t].concat(ancestors);
            t = t.getParent();
        }
        return ancestors;
    },

    findAllTokenNodes: function(t, ttype) {
        return Trees.findAllNodes(t, ttype, true);
    },

    findAllRuleNodes: function(t, ruleIndex) {
        return Trees.findAllNodes(t, ruleIndex, false);
    },

    findAllNodes: function(t, index, findTokens) {
        const nodes = [];
        Trees._findAllNodes(t, index, findTokens, nodes);
        return nodes;
    },

    _findAllNodes: function(t, index, findTokens, nodes) {
        // check this node (the root) first
        if(findTokens && (t instanceof TerminalNode)) {
            if(t.symbol.type===index) {
                nodes.push(t);
            }
        } else if(!findTokens && (t instanceof RuleNode)) {
            if(t.ruleIndex===index) {
                nodes.push(t);
            }
        }
        // check children
        for(let i=0;i<t.getChildCount();i++) {
            Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
        }
    },

    descendants: function(t) {
        let nodes = [t];
        for(let i=0;i<t.getChildCount();i++) {
            nodes = nodes.concat(Trees.descendants(t.getChild(i)));
        }
        return nodes;
    }
}

module.exports = Trees;

},{"./../Token":15,"./../Utils":16,"./Tree":45}],47:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const Tree = require('./Tree');
const Trees = require('./Trees');
module.exports = {...Tree, Trees}

},{"./Tree":45,"./Trees":46}],48:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],49:[function(require,module,exports){

},{}],50:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":48,"buffer":50,"ieee754":51}],51:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],52:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],53:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.composeCollection = composeCollection;

var _Node = require("../nodes/Node.js");

var _Scalar = require("../nodes/Scalar.js");

var _resolveBlockMap = require("./resolve-block-map.js");

var _resolveBlockSeq = require("./resolve-block-seq.js");

var _resolveFlowCollection = require("./resolve-flow-collection.js");

function composeCollection(CN, ctx, token, tagToken, onError) {
  let coll;

  switch (token.type) {
    case 'block-map':
      {
        coll = (0, _resolveBlockMap.resolveBlockMap)(CN, ctx, token, onError);
        break;
      }

    case 'block-seq':
      {
        coll = (0, _resolveBlockSeq.resolveBlockSeq)(CN, ctx, token, onError);
        break;
      }

    case 'flow-collection':
      {
        coll = (0, _resolveFlowCollection.resolveFlowCollection)(CN, ctx, token, onError);
        break;
      }
  }

  if (!tagToken) return coll;
  const tagName = ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));
  if (!tagName) return coll; // Cast needed due to: https://github.com/Microsoft/TypeScript/issues/3841

  const Coll = coll.constructor;

  if (tagName === '!' || tagName === Coll.tagName) {
    coll.tag = Coll.tagName;
    return coll;
  }

  const expType = (0, _Node.isMap)(coll) ? 'map' : 'seq';
  let tag = ctx.schema.tags.find(t => t.collection === expType && t.tag === tagName);

  if (!tag) {
    const kt = ctx.schema.knownTags[tagName];

    if (kt && kt.collection === expType) {
      ctx.schema.tags.push(Object.assign({}, kt, {
        default: false
      }));
      tag = kt;
    } else {
      onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);
      coll.tag = tagName;
      return coll;
    }
  }

  const res = tag.resolve(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options);
  const node = (0, _Node.isNode)(res) ? res : new _Scalar.Scalar(res);
  node.range = coll.range;
  node.tag = tagName;
  if (tag === null || tag === void 0 ? void 0 : tag.format) node.format = tag.format;
  return node;
}

},{"../nodes/Node.js":78,"../nodes/Scalar.js":80,"./resolve-block-map.js":58,"./resolve-block-seq.js":60,"./resolve-flow-collection.js":62}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.composeDoc = composeDoc;

var _Document = require("../doc/Document.js");

var _composeNode = require("./compose-node.js");

var _resolveEnd = require("./resolve-end.js");

var _resolveProps = require("./resolve-props.js");

function composeDoc(options, directives, {
  offset,
  start,
  value,
  end
}, onError) {
  const opts = Object.assign({
    directives
  }, options);
  const doc = new _Document.Document(undefined, opts);
  const ctx = {
    directives: doc.directives,
    options: doc.options,
    schema: doc.schema
  };
  const props = (0, _resolveProps.resolveProps)(start, {
    indicator: 'doc-start',
    next: value || (end === null || end === void 0 ? void 0 : end[0]),
    offset,
    onError,
    startOnNewline: true
  });

  if (props.found) {
    doc.directives.marker = true;
    if (value && (value.type === 'block-map' || value.type === 'block-seq') && !props.hasNewline) onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');
  }

  doc.contents = value ? (0, _composeNode.composeNode)(ctx, value, props, onError) : (0, _composeNode.composeEmptyNode)(ctx, props.end, start, null, props, onError);
  const contentEnd = doc.contents.range[2];
  const re = (0, _resolveEnd.resolveEnd)(end, contentEnd, false, onError);
  if (re.comment) doc.comment = re.comment;
  doc.range = [offset, contentEnd, re.offset];
  return doc;
}

},{"../doc/Document.js":68,"./compose-node.js":55,"./resolve-end.js":61,"./resolve-props.js":64}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.composeEmptyNode = composeEmptyNode;
exports.composeNode = composeNode;

var _Alias = require("../nodes/Alias.js");

var _composeCollection = require("./compose-collection.js");

var _composeScalar = require("./compose-scalar.js");

var _resolveEnd = require("./resolve-end.js");

var _utilEmptyScalarPosition = require("./util-empty-scalar-position.js");

const CN = {
  composeNode,
  composeEmptyNode
};

function composeNode(ctx, token, props, onError) {
  const {
    spaceBefore,
    comment,
    anchor,
    tag
  } = props;
  let node;

  switch (token.type) {
    case 'alias':
      node = composeAlias(ctx, token, onError);
      if (anchor || tag) onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');
      break;

    case 'scalar':
    case 'single-quoted-scalar':
    case 'double-quoted-scalar':
    case 'block-scalar':
      node = (0, _composeScalar.composeScalar)(ctx, token, tag, onError);
      if (anchor) node.anchor = anchor.source.substring(1);
      break;

    case 'block-map':
    case 'block-seq':
    case 'flow-collection':
      node = (0, _composeCollection.composeCollection)(CN, ctx, token, tag, onError);
      if (anchor) node.anchor = anchor.source.substring(1);
      break;

    default:
      console.log(token);
      throw new Error(`Unsupporten token type: ${token.type}`);
  }

  if (anchor && node.anchor === '') onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');
  if (spaceBefore) node.spaceBefore = true;

  if (comment) {
    if (token.type === 'scalar' && token.source === '') node.comment = comment;else node.commentBefore = comment;
  }

  if (ctx.options.keepSourceTokens) node.srcToken = token;
  return node;
}

function composeEmptyNode(ctx, offset, before, pos, {
  spaceBefore,
  comment,
  anchor,
  tag
}, onError) {
  const token = {
    type: 'scalar',
    offset: (0, _utilEmptyScalarPosition.emptyScalarPosition)(offset, before, pos),
    indent: -1,
    source: ''
  };
  const node = (0, _composeScalar.composeScalar)(ctx, token, tag, onError);

  if (anchor) {
    node.anchor = anchor.source.substring(1);
    if (node.anchor === '') onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');
  }

  if (spaceBefore) node.spaceBefore = true;
  if (comment) node.comment = comment;
  return node;
}

function composeAlias({
  options
}, {
  offset,
  source,
  end
}, onError) {
  const alias = new _Alias.Alias(source.substring(1));
  if (alias.source === '') onError(offset, 'BAD_ALIAS', 'Alias cannot be an empty string');
  const valueEnd = offset + source.length;
  const re = (0, _resolveEnd.resolveEnd)(end, valueEnd, options.strict, onError);
  alias.range = [offset, valueEnd, re.offset];
  if (re.comment) alias.comment = re.comment;
  return alias;
}

},{"../nodes/Alias.js":76,"./compose-collection.js":53,"./compose-scalar.js":56,"./resolve-end.js":61,"./util-empty-scalar-position.js":66}],56:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.composeScalar = composeScalar;

var _Node = require("../nodes/Node.js");

var _Scalar = require("../nodes/Scalar.js");

var _resolveBlockScalar = require("./resolve-block-scalar.js");

var _resolveFlowScalar = require("./resolve-flow-scalar.js");

function composeScalar(ctx, token, tagToken, onError) {
  const {
    value,
    type,
    comment,
    range
  } = token.type === 'block-scalar' ? (0, _resolveBlockScalar.resolveBlockScalar)(token, ctx.options.strict, onError) : (0, _resolveFlowScalar.resolveFlowScalar)(token, ctx.options.strict, onError);
  const tagName = tagToken ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg)) : null;
  const tag = tagToken && tagName ? findScalarTagByName(ctx.schema, value, tagName, tagToken, onError) : findScalarTagByTest(ctx.schema, value, token.type === 'scalar');
  let scalar;

  try {
    const res = tag.resolve(value, msg => onError(tagToken || token, 'TAG_RESOLVE_FAILED', msg), ctx.options);
    scalar = (0, _Node.isScalar)(res) ? res : new _Scalar.Scalar(res);
  } catch (error) {
    const msg = error instanceof Error ? error.message : String(error);
    onError(tagToken || token, 'TAG_RESOLVE_FAILED', msg);
    scalar = new _Scalar.Scalar(value);
  }

  scalar.range = range;
  scalar.source = value;
  if (type) scalar.type = type;
  if (tagName) scalar.tag = tagName;
  if (tag.format) scalar.format = tag.format;
  if (comment) scalar.comment = comment;
  return scalar;
}

function findScalarTagByName(schema, value, tagName, tagToken, onError) {
  var _a;

  if (tagName === '!') return schema[_Node.SCALAR]; // non-specific tag

  const matchWithTest = [];

  for (const tag of schema.tags) {
    if (!tag.collection && tag.tag === tagName) {
      if (tag.default && tag.test) matchWithTest.push(tag);else return tag;
    }
  }

  for (const tag of matchWithTest) if ((_a = tag.test) === null || _a === void 0 ? void 0 : _a.test(value)) return tag;

  const kt = schema.knownTags[tagName];

  if (kt && !kt.collection) {
    // Ensure that the known tag is available for stringifying,
    // but does not get used by default.
    schema.tags.push(Object.assign({}, kt, {
      default: false,
      test: undefined
    }));
    return kt;
  }

  onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');
  return schema[_Node.SCALAR];
}

function findScalarTagByTest(schema, value, apply) {
  var _a;

  if (apply) {
    for (const tag of schema.tags) {
      if (tag.default && ((_a = tag.test) === null || _a === void 0 ? void 0 : _a.test(value))) return tag;
    }
  }

  return schema[_Node.SCALAR];
}

},{"../nodes/Node.js":78,"../nodes/Scalar.js":80,"./resolve-block-scalar.js":59,"./resolve-flow-scalar.js":63}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Composer = void 0;

var _directives = require("../doc/directives.js");

var _Document = require("../doc/Document.js");

var _errors = require("../errors.js");

var _Node = require("../nodes/Node.js");

var _options = require("../options.js");

var _composeDoc = require("./compose-doc.js");

var _resolveEnd = require("./resolve-end.js");

function getErrorPos(src) {
  if (typeof src === 'number') return [src, src + 1];
  if (Array.isArray(src)) return src.length === 2 ? src : [src[0], src[1]];
  const {
    offset,
    source
  } = src;
  return [offset, offset + (typeof source === 'string' ? source.length : 1)];
}

function parsePrelude(prelude) {
  var _a;

  let comment = '';
  let atComment = false;
  let afterEmptyLine = false;

  for (let i = 0; i < prelude.length; ++i) {
    const source = prelude[i];

    switch (source[0]) {
      case '#':
        comment += (comment === '' ? '' : afterEmptyLine ? '\n\n' : '\n') + (source.substring(1) || ' ');
        atComment = true;
        afterEmptyLine = false;
        break;

      case '%':
        if (((_a = prelude[i + 1]) === null || _a === void 0 ? void 0 : _a[0]) !== '#') i += 1;
        atComment = false;
        break;

      default:
        // This may be wrong after doc-end, but in that case it doesn't matter
        if (!atComment) afterEmptyLine = true;
        atComment = false;
    }
  }

  return {
    comment,
    afterEmptyLine
  };
}
/**
 * Compose a stream of CST nodes into a stream of YAML Documents.
 *
 * ```ts
 * import { Composer, Parser } from 'yaml'
 *
 * const src: string = ...
 * const tokens = new Parser().parse(src)
 * const docs = new Composer().compose(tokens)
 * ```
 */


class Composer {
  constructor(options = {}) {
    this.doc = null;
    this.atDirectives = false;
    this.prelude = [];
    this.errors = [];
    this.warnings = [];

    this.onError = (source, code, message, warning) => {
      const pos = getErrorPos(source);
      if (warning) this.warnings.push(new _errors.YAMLWarning(pos, code, message));else this.errors.push(new _errors.YAMLParseError(pos, code, message));
    };

    this.directives = new _directives.Directives({
      version: options.version || _options.defaultOptions.version
    });
    this.options = options;
  }

  decorate(doc, afterDoc) {
    const {
      comment,
      afterEmptyLine
    } = parsePrelude(this.prelude); //console.log({ dc: doc.comment, prelude, comment })

    if (comment) {
      const dc = doc.contents;

      if (afterDoc) {
        doc.comment = doc.comment ? `${doc.comment}\n${comment}` : comment;
      } else if (afterEmptyLine || doc.directives.marker || !dc) {
        doc.commentBefore = comment;
      } else if ((0, _Node.isCollection)(dc) && !dc.flow && dc.items.length > 0) {
        let it = dc.items[0];
        if ((0, _Node.isPair)(it)) it = it.key;
        const cb = it.commentBefore;
        it.commentBefore = cb ? `${comment}\n${cb}` : comment;
      } else {
        const cb = dc.commentBefore;
        dc.commentBefore = cb ? `${comment}\n${cb}` : comment;
      }
    }

    if (afterDoc) {
      Array.prototype.push.apply(doc.errors, this.errors);
      Array.prototype.push.apply(doc.warnings, this.warnings);
    } else {
      doc.errors = this.errors;
      doc.warnings = this.warnings;
    }

    this.prelude = [];
    this.errors = [];
    this.warnings = [];
  }
  /**
   * Current stream status information.
   *
   * Mostly useful at the end of input for an empty stream.
   */


  streamInfo() {
    return {
      comment: parsePrelude(this.prelude).comment,
      directives: this.directives,
      errors: this.errors,
      warnings: this.warnings
    };
  }
  /**
   * Compose tokens into documents.
   *
   * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
   * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
   */


  *compose(tokens, forceDoc = false, endOffset = -1) {
    for (const token of tokens) yield* this.next(token);

    yield* this.end(forceDoc, endOffset);
  }
  /** Advance the composer by one CST token. */


  *next(token) {
    switch (token.type) {
      case 'directive':
        this.directives.add(token.source, (offset, message, warning) => {
          const pos = getErrorPos(token);
          pos[0] += offset;
          this.onError(pos, 'BAD_DIRECTIVE', message, warning);
        });
        this.prelude.push(token.source);
        this.atDirectives = true;
        break;

      case 'document':
        {
          const doc = (0, _composeDoc.composeDoc)(this.options, this.directives, token, this.onError);
          if (this.atDirectives && !doc.directives.marker) this.onError(token, 'MISSING_CHAR', 'Missing directives-end indicator line');
          this.decorate(doc, false);
          if (this.doc) yield this.doc;
          this.doc = doc;
          this.atDirectives = false;
          break;
        }

      case 'byte-order-mark':
      case 'space':
        break;

      case 'comment':
      case 'newline':
        this.prelude.push(token.source);
        break;

      case 'error':
        {
          const msg = token.source ? `${token.message}: ${JSON.stringify(token.source)}` : token.message;
          const error = new _errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);
          if (this.atDirectives || !this.doc) this.errors.push(error);else this.doc.errors.push(error);
          break;
        }

      case 'doc-end':
        {
          if (!this.doc) {
            const msg = 'Unexpected doc-end without preceding document';
            this.errors.push(new _errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));
            break;
          }

          const end = (0, _resolveEnd.resolveEnd)(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
          this.decorate(this.doc, true);

          if (end.comment) {
            const dc = this.doc.comment;
            this.doc.comment = dc ? `${dc}\n${end.comment}` : end.comment;
          }

          this.doc.range[2] = end.offset;
          break;
        }

      default:
        this.errors.push(new _errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));
    }
  }
  /**
   * Call at end of input to yield any remaining document.
   *
   * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
   * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
   */


  *end(forceDoc = false, endOffset = -1) {
    if (this.doc) {
      this.decorate(this.doc, true);
      yield this.doc;
      this.doc = null;
    } else if (forceDoc) {
      const opts = Object.assign({
        directives: this.directives
      }, this.options);
      const doc = new _Document.Document(undefined, opts);
      if (this.atDirectives) this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');
      doc.range = [0, endOffset, endOffset];
      this.decorate(doc, false);
      yield doc;
    }
  }

}

exports.Composer = Composer;

},{"../doc/Document.js":68,"../doc/directives.js":72,"../errors.js":73,"../nodes/Node.js":78,"../options.js":85,"./compose-doc.js":54,"./resolve-end.js":61}],58:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveBlockMap = resolveBlockMap;

var _Pair = require("../nodes/Pair.js");

var _YAMLMap = require("../nodes/YAMLMap.js");

var _resolveProps = require("./resolve-props.js");

var _utilContainsNewline = require("./util-contains-newline.js");

var _utilMapIncludes = require("./util-map-includes.js");

const startColMsg = 'All mapping items must start at the same column';

function resolveBlockMap({
  composeNode,
  composeEmptyNode
}, ctx, bm, onError) {
  var _a;

  const map = new _YAMLMap.YAMLMap(ctx.schema);
  let offset = bm.offset;

  for (const collItem of bm.items) {
    const {
      start,
      key,
      sep,
      value
    } = collItem; // key properties

    const keyProps = (0, _resolveProps.resolveProps)(start, {
      indicator: 'explicit-key-ind',
      next: key || (sep === null || sep === void 0 ? void 0 : sep[0]),
      offset,
      onError,
      startOnNewline: true
    });
    const implicitKey = !keyProps.found;

    if (implicitKey) {
      if (key) {
        if (key.type === 'block-seq') onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');else if ('indent' in key && key.indent !== bm.indent) onError(offset, 'BAD_INDENT', startColMsg);
      }

      if (!keyProps.anchor && !keyProps.tag && !sep) {
        // TODO: assert being at last item?
        if (keyProps.comment) {
          if (map.comment) map.comment += '\n' + keyProps.comment;else map.comment = keyProps.comment;
        }

        continue;
      }
    } else if (((_a = keyProps.found) === null || _a === void 0 ? void 0 : _a.indent) !== bm.indent) onError(offset, 'BAD_INDENT', startColMsg);

    if (implicitKey && (0, _utilContainsNewline.containsNewline)(key)) onError(key, // checked by containsNewline()
    'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line'); // key value

    const keyStart = keyProps.end;
    const keyNode = key ? composeNode(ctx, key, keyProps, onError) : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);
    if ((0, _utilMapIncludes.mapIncludes)(ctx, map.items, keyNode)) onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique'); // value properties

    const valueProps = (0, _resolveProps.resolveProps)(sep || [], {
      indicator: 'map-value-ind',
      next: value,
      offset: keyNode.range[2],
      onError,
      startOnNewline: !key || key.type === 'block-scalar'
    });
    offset = valueProps.end;

    if (valueProps.found) {
      if (implicitKey) {
        if ((value === null || value === void 0 ? void 0 : value.type) === 'block-map' && !valueProps.hasNewline) onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');
        if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024) onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');
      } // value value


      const valueNode = value ? composeNode(ctx, value, valueProps, onError) : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);
      offset = valueNode.range[2];
      const pair = new _Pair.Pair(keyNode, valueNode);
      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;
      map.items.push(pair);
    } else {
      // key with no value
      if (implicitKey) onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');

      if (valueProps.comment) {
        if (keyNode.comment) keyNode.comment += '\n' + valueProps.comment;else keyNode.comment = valueProps.comment;
      }

      const pair = new _Pair.Pair(keyNode);
      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;
      map.items.push(pair);
    }
  }

  map.range = [bm.offset, offset, offset];
  return map;
}

},{"../nodes/Pair.js":79,"../nodes/YAMLMap.js":81,"./resolve-props.js":64,"./util-contains-newline.js":65,"./util-map-includes.js":67}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveBlockScalar = resolveBlockScalar;

var _Scalar = require("../nodes/Scalar.js");

function resolveBlockScalar(scalar, strict, onError) {
  const start = scalar.offset;
  const header = parseBlockScalarHeader(scalar, strict, onError);
  if (!header) return {
    value: '',
    type: null,
    comment: '',
    range: [start, start, start]
  };
  const type = header.mode === '>' ? _Scalar.Scalar.BLOCK_FOLDED : _Scalar.Scalar.BLOCK_LITERAL;
  const lines = scalar.source ? splitLines(scalar.source) : []; // determine the end of content & start of chomping

  let chompStart = lines.length;

  for (let i = lines.length - 1; i >= 0; --i) {
    const content = lines[i][1];
    if (content === '' || content === '\r') chompStart = i;else break;
  } // shortcut for empty contents


  if (!scalar.source || chompStart === 0) {
    const value = header.chomp === '+' ? '\n'.repeat(Math.max(0, lines.length - 1)) : '';
    let end = start + header.length;
    if (scalar.source) end += scalar.source.length;
    return {
      value,
      type,
      comment: header.comment,
      range: [start, end, end]
    };
  } // find the indentation level to trim from start


  let trimIndent = scalar.indent + header.indent;
  let offset = scalar.offset + header.length;
  let contentStart = 0;

  for (let i = 0; i < chompStart; ++i) {
    const [indent, content] = lines[i];

    if (content === '' || content === '\r') {
      if (header.indent === 0 && indent.length > trimIndent) trimIndent = indent.length;
    } else {
      if (indent.length < trimIndent) {
        const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';
        onError(offset + indent.length, 'MISSING_CHAR', message);
      }

      if (header.indent === 0) trimIndent = indent.length;
      contentStart = i;
      break;
    }

    offset += indent.length + content.length + 1;
  }

  let value = '';
  let sep = '';
  let prevMoreIndented = false; // leading whitespace is kept intact

  for (let i = 0; i < contentStart; ++i) value += lines[i][0].slice(trimIndent) + '\n';

  for (let i = contentStart; i < chompStart; ++i) {
    let [indent, content] = lines[i];
    offset += indent.length + content.length + 1;
    const crlf = content[content.length - 1] === '\r';
    if (crlf) content = content.slice(0, -1);
    /* istanbul ignore if already caught in lexer */

    if (content && indent.length < trimIndent) {
      const src = header.indent ? 'explicit indentation indicator' : 'first line';
      const message = `Block scalar lines must not be less indented than their ${src}`;
      onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);
      indent = '';
    }

    if (type === _Scalar.Scalar.BLOCK_LITERAL) {
      value += sep + indent.slice(trimIndent) + content;
      sep = '\n';
    } else if (indent.length > trimIndent || content[0] === '\t') {
      // more-indented content within a folded block
      if (sep === ' ') sep = '\n';else if (!prevMoreIndented && sep === '\n') sep = '\n\n';
      value += sep + indent.slice(trimIndent) + content;
      sep = '\n';
      prevMoreIndented = true;
    } else if (content === '') {
      // empty line
      if (sep === '\n') value += '\n';else sep = '\n';
    } else {
      value += sep + content;
      sep = ' ';
      prevMoreIndented = false;
    }
  }

  switch (header.chomp) {
    case '-':
      break;

    case '+':
      for (let i = chompStart; i < lines.length; ++i) value += '\n' + lines[i][0].slice(trimIndent);

      if (value[value.length - 1] !== '\n') value += '\n';
      break;

    default:
      value += '\n';
  }

  const end = start + header.length + scalar.source.length;
  return {
    value,
    type,
    comment: header.comment,
    range: [start, end, end]
  };
}

function parseBlockScalarHeader({
  offset,
  props
}, strict, onError) {
  /* istanbul ignore if should not happen */
  if (props[0].type !== 'block-scalar-header') {
    onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');
    return null;
  }

  const {
    source
  } = props[0];
  const mode = source[0];
  let indent = 0;
  let chomp = '';
  let error = -1;

  for (let i = 1; i < source.length; ++i) {
    const ch = source[i];
    if (!chomp && (ch === '-' || ch === '+')) chomp = ch;else {
      const n = Number(ch);
      if (!indent && n) indent = n;else if (error === -1) error = offset + i;
    }
  }

  if (error !== -1) onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);
  let hasSpace = false;
  let comment = '';
  let length = source.length;

  for (let i = 1; i < props.length; ++i) {
    const token = props[i];

    switch (token.type) {
      case 'space':
        hasSpace = true;
      // fallthrough

      case 'newline':
        length += token.source.length;
        break;

      case 'comment':
        if (strict && !hasSpace) {
          const message = 'Comments must be separated from other tokens by white space characters';
          onError(token, 'MISSING_CHAR', message);
        }

        length += token.source.length;
        comment = token.source.substring(1);
        break;

      case 'error':
        onError(token, 'UNEXPECTED_TOKEN', token.message);
        length += token.source.length;
        break;

      /* istanbul ignore next should not happen */

      default:
        {
          const message = `Unexpected token in block scalar header: ${token.type}`;
          onError(token, 'UNEXPECTED_TOKEN', message);
          const ts = token.source;
          if (ts && typeof ts === 'string') length += ts.length;
        }
    }
  }

  return {
    mode,
    indent,
    chomp,
    comment,
    length
  };
}
/** @returns Array of lines split up as `[indent, content]` */


function splitLines(source) {
  const split = source.split(/\n( *)/);
  const first = split[0];
  const m = first.match(/^( *)/);
  const line0 = m && m[1] ? [m[1], first.slice(m[1].length)] : ['', first];
  const lines = [line0];

  for (let i = 1; i < split.length; i += 2) lines.push([split[i], split[i + 1]]);

  return lines;
}

},{"../nodes/Scalar.js":80}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveBlockSeq = resolveBlockSeq;

var _YAMLSeq = require("../nodes/YAMLSeq.js");

var _resolveProps = require("./resolve-props.js");

function resolveBlockSeq({
  composeNode,
  composeEmptyNode
}, ctx, bs, onError) {
  const seq = new _YAMLSeq.YAMLSeq(ctx.schema);
  let offset = bs.offset;

  for (const {
    start,
    value
  } of bs.items) {
    const props = (0, _resolveProps.resolveProps)(start, {
      indicator: 'seq-item-ind',
      next: value,
      offset,
      onError,
      startOnNewline: true
    });
    offset = props.end;

    if (!props.found) {
      if (props.anchor || props.tag || value) {
        if (value && value.type === 'block-seq') onError(offset, 'BAD_INDENT', 'All sequence items must start at the same column');else onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');
      } else {
        // TODO: assert being at last item?
        if (props.comment) seq.comment = props.comment;
        continue;
      }
    }

    const node = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, offset, start, null, props, onError);
    offset = node.range[2];
    seq.items.push(node);
  }

  seq.range = [bs.offset, offset, offset];
  return seq;
}

},{"../nodes/YAMLSeq.js":82,"./resolve-props.js":64}],61:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveEnd = resolveEnd;

function resolveEnd(end, offset, reqSpace, onError) {
  let comment = '';

  if (end) {
    let hasSpace = false;
    let sep = '';

    for (const token of end) {
      const {
        source,
        type
      } = token;

      switch (type) {
        case 'space':
          hasSpace = true;
          break;

        case 'comment':
          {
            if (reqSpace && !hasSpace) onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');
            const cb = source.substring(1) || ' ';
            if (!comment) comment = cb;else comment += sep + cb;
            sep = '';
            break;
          }

        case 'newline':
          if (comment) sep += source;
          hasSpace = true;
          break;

        default:
          onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);
      }

      offset += source.length;
    }
  }

  return {
    comment,
    offset
  };
}

},{}],62:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveFlowCollection = resolveFlowCollection;

var _Node = require("../nodes/Node.js");

var _Pair = require("../nodes/Pair.js");

var _YAMLMap = require("../nodes/YAMLMap.js");

var _YAMLSeq = require("../nodes/YAMLSeq.js");

var _resolveEnd = require("./resolve-end.js");

var _resolveProps = require("./resolve-props.js");

var _utilContainsNewline = require("./util-contains-newline.js");

var _utilMapIncludes = require("./util-map-includes.js");

const blockMsg = 'Block collections are not allowed within flow collections';

const isBlock = token => token && (token.type === 'block-map' || token.type === 'block-seq');

function resolveFlowCollection({
  composeNode,
  composeEmptyNode
}, ctx, fc, onError) {
  const isMap = fc.start.source === '{';
  const fcName = isMap ? 'flow map' : 'flow sequence';
  const coll = isMap ? new _YAMLMap.YAMLMap(ctx.schema) : new _YAMLSeq.YAMLSeq(ctx.schema);
  coll.flow = true;
  let offset = fc.offset;

  for (let i = 0; i < fc.items.length; ++i) {
    const collItem = fc.items[i];
    const {
      start,
      key,
      sep,
      value
    } = collItem;
    const props = (0, _resolveProps.resolveProps)(start, {
      flow: fcName,
      indicator: 'explicit-key-ind',
      next: key || (sep === null || sep === void 0 ? void 0 : sep[0]),
      offset,
      onError,
      startOnNewline: false
    });

    if (!props.found) {
      if (!props.anchor && !props.tag && !sep && !value) {
        if (i === 0 && props.comma) onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);else if (i < fc.items.length - 1) onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);

        if (props.comment) {
          if (coll.comment) coll.comment += '\n' + props.comment;else coll.comment = props.comment;
        }

        continue;
      }

      if (!isMap && ctx.options.strict && (0, _utilContainsNewline.containsNewline)(key)) onError(key, // checked by containsNewline()
      'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');
    }

    if (i === 0) {
      if (props.comma) onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);
    } else {
      if (!props.comma) onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);

      if (props.comment) {
        let prevItemComment = '';

        loop: for (const st of start) {
          switch (st.type) {
            case 'comma':
            case 'space':
              break;

            case 'comment':
              prevItemComment = st.source.substring(1);
              break loop;

            default:
              break loop;
          }
        }

        if (prevItemComment) {
          let prev = coll.items[coll.items.length - 1];
          if ((0, _Node.isPair)(prev)) prev = prev.value || prev.key;
          if (prev.comment) prev.comment += '\n' + prevItemComment;else prev.comment = prevItemComment;
          props.comment = props.comment.substring(prevItemComment.length + 1);
        }
      }
    }

    if (!isMap && !sep && !props.found) {
      // item is a value in a seq
      // → key & sep are empty, start does not include ? or :
      const valueNode = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, sep, null, props, onError);
      coll.items.push(valueNode);
      offset = valueNode.range[2];
      if (isBlock(value)) onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);
    } else {
      // item is a key+value pair
      // key value
      const keyStart = props.end;
      const keyNode = key ? composeNode(ctx, key, props, onError) : composeEmptyNode(ctx, keyStart, start, null, props, onError);
      if (isBlock(key)) onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg); // value properties

      const valueProps = (0, _resolveProps.resolveProps)(sep || [], {
        flow: fcName,
        indicator: 'map-value-ind',
        next: value,
        offset: keyNode.range[2],
        onError,
        startOnNewline: false
      });

      if (valueProps.found) {
        if (!isMap && !props.found && ctx.options.strict) {
          if (sep) for (const st of sep) {
            if (st === valueProps.found) break;

            if (st.type === 'newline') {
              onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');
              break;
            }
          }
          if (props.start < valueProps.found.offset - 1024) onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');
        }
      } else if (value) {
        if ('source' in value && value.source && value.source[0] === ':') onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);else onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);
      } // value value


      const valueNode = value ? composeNode(ctx, value, valueProps, onError) : valueProps.found ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError) : null;

      if (valueNode) {
        if (isBlock(value)) onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);
      } else if (valueProps.comment) {
        if (keyNode.comment) keyNode.comment += '\n' + valueProps.comment;else keyNode.comment = valueProps.comment;
      }

      const pair = new _Pair.Pair(keyNode, valueNode);
      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;

      if (isMap) {
        const map = coll;
        if ((0, _utilMapIncludes.mapIncludes)(ctx, map.items, keyNode)) onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');
        map.items.push(pair);
      } else {
        const map = new _YAMLMap.YAMLMap(ctx.schema);
        map.flow = true;
        map.items.push(pair);
        coll.items.push(map);
      }

      offset = valueNode ? valueNode.range[2] : valueProps.end;
    }
  }

  const expectedEnd = isMap ? '}' : ']';
  const [ce, ...ee] = fc.end;
  let cePos = offset;
  if (ce && ce.source === expectedEnd) cePos = ce.offset + ce.source.length;else {
    onError(offset + 1, 'MISSING_CHAR', `Expected ${fcName} to end with ${expectedEnd}`);
    if (ce && ce.source.length !== 1) ee.unshift(ce);
  }

  if (ee.length > 0) {
    const end = (0, _resolveEnd.resolveEnd)(ee, cePos, ctx.options.strict, onError);

    if (end.comment) {
      if (coll.comment) coll.comment += '\n' + end.comment;else coll.comment = end.comment;
    }

    coll.range = [fc.offset, cePos, end.offset];
  } else {
    coll.range = [fc.offset, cePos, cePos];
  }

  return coll;
}

},{"../nodes/Node.js":78,"../nodes/Pair.js":79,"../nodes/YAMLMap.js":81,"../nodes/YAMLSeq.js":82,"./resolve-end.js":61,"./resolve-props.js":64,"./util-contains-newline.js":65,"./util-map-includes.js":67}],63:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveFlowScalar = resolveFlowScalar;

var _Scalar = require("../nodes/Scalar.js");

var _resolveEnd = require("./resolve-end.js");

function resolveFlowScalar(scalar, strict, onError) {
  const {
    offset,
    type,
    source,
    end
  } = scalar;

  let _type;

  let value;

  const _onError = (rel, code, msg) => onError(offset + rel, code, msg);

  switch (type) {
    case 'scalar':
      _type = _Scalar.Scalar.PLAIN;
      value = plainValue(source, _onError);
      break;

    case 'single-quoted-scalar':
      _type = _Scalar.Scalar.QUOTE_SINGLE;
      value = singleQuotedValue(source, _onError);
      break;

    case 'double-quoted-scalar':
      _type = _Scalar.Scalar.QUOTE_DOUBLE;
      value = doubleQuotedValue(source, _onError);
      break;

    /* istanbul ignore next should not happen */

    default:
      onError(scalar, 'UNEXPECTED_TOKEN', `Expected a flow scalar value, but found: ${type}`);
      return {
        value: '',
        type: null,
        comment: '',
        range: [offset, offset + source.length, offset + source.length]
      };
  }

  const valueEnd = offset + source.length;
  const re = (0, _resolveEnd.resolveEnd)(end, valueEnd, strict, onError);
  return {
    value,
    type: _type,
    comment: re.comment,
    range: [offset, valueEnd, re.offset]
  };
}

function plainValue(source, onError) {
  let badChar = '';

  switch (source[0]) {
    /* istanbul ignore next should not happen */
    case '\t':
      badChar = 'a tab character';
      break;

    case ',':
      badChar = 'flow indicator character ,';
      break;

    case '%':
      badChar = 'directive indicator character %';
      break;

    case '|':
    case '>':
      {
        badChar = `block scalar indicator ${source[0]}`;
        break;
      }

    case '@':
    case '`':
      {
        badChar = `reserved character ${source[0]}`;
        break;
      }
  }

  if (badChar) onError(0, 'BAD_SCALAR_START', `Plain value cannot start with ${badChar}`);
  return foldLines(source);
}

function singleQuotedValue(source, onError) {
  if (source[source.length - 1] !== "'" || source.length === 1) onError(source.length, 'MISSING_CHAR', "Missing closing 'quote");
  return foldLines(source.slice(1, -1)).replace(/''/g, "'");
}

function foldLines(source) {
  /**
   * The negative lookbehind here and in the `re` RegExp is to
   * prevent causing a polynomial search time in certain cases.
   *
   * The try-catch is for Safari, which doesn't support this yet:
   * https://caniuse.com/js-regexp-lookbehind
   */
  let first, line;

  try {
    first = new RegExp('(.*?)(?<![ \t])[ \t]*\r?\n', 'sy');
    line = new RegExp('[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n', 'sy');
  } catch (_) {
    first = /(.*?)[ \t]*\r?\n/sy;
    line = /[ \t]*(.*?)[ \t]*\r?\n/sy;
  }

  let match = first.exec(source);
  if (!match) return source;
  let res = match[1];
  let sep = ' ';
  let pos = first.lastIndex;
  line.lastIndex = pos;

  while (match = line.exec(source)) {
    if (match[1] === '') {
      if (sep === '\n') res += sep;else sep = '\n';
    } else {
      res += sep + match[1];
      sep = ' ';
    }

    pos = line.lastIndex;
  }

  const last = /[ \t]*(.*)/sy;
  last.lastIndex = pos;
  match = last.exec(source);
  return res + sep + (match && match[1] || '');
}

function doubleQuotedValue(source, onError) {
  let res = '';

  for (let i = 1; i < source.length - 1; ++i) {
    const ch = source[i];
    if (ch === '\r' && source[i + 1] === '\n') continue;

    if (ch === '\n') {
      const {
        fold,
        offset
      } = foldNewline(source, i);
      res += fold;
      i = offset;
    } else if (ch === '\\') {
      let next = source[++i];
      const cc = escapeCodes[next];
      if (cc) res += cc;else if (next === '\n') {
        // skip escaped newlines, but still trim the following line
        next = source[i + 1];

        while (next === ' ' || next === '\t') next = source[++i + 1];
      } else if (next === '\r' && source[i + 1] === '\n') {
        // skip escaped CRLF newlines, but still trim the following line
        next = source[++i + 1];

        while (next === ' ' || next === '\t') next = source[++i + 1];
      } else if (next === 'x' || next === 'u' || next === 'U') {
        const length = {
          x: 2,
          u: 4,
          U: 8
        }[next];
        res += parseCharCode(source, i + 1, length, onError);
        i += length;
      } else {
        const raw = source.substr(i - 1, 2);
        onError(i - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);
        res += raw;
      }
    } else if (ch === ' ' || ch === '\t') {
      // trim trailing whitespace
      const wsStart = i;
      let next = source[i + 1];

      while (next === ' ' || next === '\t') next = source[++i + 1];

      if (next !== '\n' && !(next === '\r' && source[i + 2] === '\n')) res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
    } else {
      res += ch;
    }
  }

  if (source[source.length - 1] !== '"' || source.length === 1) onError(source.length, 'MISSING_CHAR', 'Missing closing "quote');
  return res;
}
/**
 * Fold a single newline into a space, multiple newlines to N - 1 newlines.
 * Presumes `source[offset] === '\n'`
 */


function foldNewline(source, offset) {
  let fold = '';
  let ch = source[offset + 1];

  while (ch === ' ' || ch === '\t' || ch === '\n' || ch === '\r') {
    if (ch === '\r' && source[offset + 2] !== '\n') break;
    if (ch === '\n') fold += '\n';
    offset += 1;
    ch = source[offset + 1];
  }

  if (!fold) fold = ' ';
  return {
    fold,
    offset
  };
}

const escapeCodes = {
  '0': '\0',
  a: '\x07',
  b: '\b',
  e: '\x1b',
  f: '\f',
  n: '\n',
  r: '\r',
  t: '\t',
  v: '\v',
  N: '\u0085',
  _: '\u00a0',
  L: '\u2028',
  P: '\u2029',
  ' ': ' ',
  '"': '"',
  '/': '/',
  '\\': '\\',
  '\t': '\t'
};

function parseCharCode(source, offset, length, onError) {
  const cc = source.substr(offset, length);
  const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
  const code = ok ? parseInt(cc, 16) : NaN;

  if (isNaN(code)) {
    const raw = source.substr(offset - 2, length + 2);
    onError(offset - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);
    return raw;
  }

  return String.fromCodePoint(code);
}

},{"../nodes/Scalar.js":80,"./resolve-end.js":61}],64:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveProps = resolveProps;

function resolveProps(tokens, {
  flow,
  indicator,
  next,
  offset,
  onError,
  startOnNewline
}) {
  let spaceBefore = false;
  let atNewline = startOnNewline;
  let hasSpace = startOnNewline;
  let comment = '';
  let commentSep = '';
  let hasNewline = false;
  let reqSpace = false;
  let anchor = null;
  let tag = null;
  let comma = null;
  let found = null;
  let start = null;

  for (const token of tokens) {
    if (reqSpace) {
      if (token.type !== 'space' && token.type !== 'newline' && token.type !== 'comma') onError(token.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');
      reqSpace = false;
    }

    switch (token.type) {
      case 'space':
        // At the doc level, tabs at line start may be parsed
        // as leading white space rather than indentation.
        // In a flow collection, only the parser handles indent.
        if (!flow && atNewline && indicator !== 'doc-start' && token.source[0] === '\t') onError(token, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');
        hasSpace = true;
        break;

      case 'comment':
        {
          if (!hasSpace) onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');
          const cb = token.source.substring(1) || ' ';
          if (!comment) comment = cb;else comment += commentSep + cb;
          commentSep = '';
          atNewline = false;
          break;
        }

      case 'newline':
        if (atNewline) {
          if (comment) comment += token.source;else spaceBefore = true;
        } else commentSep += token.source;

        atNewline = true;
        hasNewline = true;
        hasSpace = true;
        break;

      case 'anchor':
        if (anchor) onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');
        anchor = token;
        if (start === null) start = token.offset;
        atNewline = false;
        hasSpace = false;
        reqSpace = true;
        break;

      case 'tag':
        {
          if (tag) onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');
          tag = token;
          if (start === null) start = token.offset;
          atNewline = false;
          hasSpace = false;
          reqSpace = true;
          break;
        }

      case indicator:
        // Could here handle preceding comments differently
        if (anchor || tag) onError(token, 'BAD_PROP_ORDER', `Anchors and tags must be after the ${token.source} indicator`);
        found = token;
        atNewline = false;
        hasSpace = false;
        break;

      case 'comma':
        if (flow) {
          if (comma) onError(token, 'UNEXPECTED_TOKEN', `Unexpected , in ${flow}`);
          comma = token;
          atNewline = false;
          hasSpace = false;
          break;
        }

      // else fallthrough

      default:
        onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.type} token`);
        atNewline = false;
        hasSpace = false;
    }
  }

  const last = tokens[tokens.length - 1];
  const end = last ? last.offset + last.source.length : offset;
  if (reqSpace && next && next.type !== 'space' && next.type !== 'newline' && next.type !== 'comma' && (next.type !== 'scalar' || next.source !== '')) onError(next.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');
  return {
    comma,
    found,
    spaceBefore,
    comment,
    hasNewline,
    anchor,
    tag,
    end,
    start: start !== null && start !== void 0 ? start : end
  };
}

},{}],65:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.containsNewline = containsNewline;

function containsNewline(key) {
  if (!key) return null;

  switch (key.type) {
    case 'alias':
    case 'scalar':
    case 'double-quoted-scalar':
    case 'single-quoted-scalar':
      if (key.source.includes('\n')) return true;
      if (key.end) for (const st of key.end) if (st.type === 'newline') return true;
      return false;

    case 'flow-collection':
      for (const it of key.items) {
        for (const st of it.start) if (st.type === 'newline') return true;

        if (it.sep) for (const st of it.sep) if (st.type === 'newline') return true;
        if (containsNewline(it.key) || containsNewline(it.value)) return true;
      }

      return false;

    default:
      return true;
  }
}

},{}],66:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emptyScalarPosition = emptyScalarPosition;

function emptyScalarPosition(offset, before, pos) {
  if (before) {
    if (pos === null) pos = before.length;

    for (let i = pos - 1; i >= 0; --i) {
      let st = before[i];

      switch (st.type) {
        case 'space':
        case 'comment':
        case 'newline':
          offset -= st.source.length;
          continue;
      } // Technically, an empty scalar is immediately after the last non-empty
      // node, but it's more useful to place it after any whitespace.


      st = before[++i];

      while ((st === null || st === void 0 ? void 0 : st.type) === 'space') {
        offset += st.source.length;
        st = before[++i];
      }

      break;
    }
  }

  return offset;
}

},{}],67:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapIncludes = mapIncludes;

var _Node = require("../nodes/Node.js");

function mapIncludes(ctx, items, search) {
  const {
    uniqueKeys
  } = ctx.options;
  if (uniqueKeys === false) return false;
  const isEqual = typeof uniqueKeys === 'function' ? uniqueKeys : (a, b) => a === b || (0, _Node.isScalar)(a) && (0, _Node.isScalar)(b) && a.value === b.value && !(a.value === '<<' && ctx.schema.merge);
  return items.some(pair => isEqual(pair.key, search));
}

},{"../nodes/Node.js":78}],68:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Document = void 0;

var _Alias = require("../nodes/Alias.js");

var _Collection = require("../nodes/Collection.js");

var _Node = require("../nodes/Node.js");

var _Pair = require("../nodes/Pair.js");

var _toJS = require("../nodes/toJS.js");

var _options2 = require("../options.js");

var _Schema = require("../schema/Schema.js");

var _stringify = require("../stringify/stringify.js");

var _stringifyDocument = require("../stringify/stringifyDocument.js");

var _anchors = require("./anchors.js");

var _applyReviver = require("./applyReviver.js");

var _createNode = require("./createNode.js");

var _directives = require("./directives.js");

class Document {
  constructor(value, replacer, options) {
    /** A comment before this Document */
    this.commentBefore = null;
    /** A comment immediately after this Document */

    this.comment = null;
    /** Errors encountered during parsing. */

    this.errors = [];
    /** Warnings encountered during parsing. */

    this.warnings = [];
    Object.defineProperty(this, _Node.NODE_TYPE, {
      value: _Node.DOC
    });
    let _replacer = null;

    if (typeof replacer === 'function' || Array.isArray(replacer)) {
      _replacer = replacer;
    } else if (options === undefined && replacer) {
      options = replacer;
      replacer = undefined;
    }

    const opt = Object.assign({}, _options2.defaultOptions, options);
    this.options = opt;
    let {
      version
    } = opt;

    if (options === null || options === void 0 ? void 0 : options.directives) {
      this.directives = options.directives.atDocument();
      if (this.directives.yaml.explicit) version = this.directives.yaml.version;
    } else this.directives = new _directives.Directives({
      version
    });

    this.setSchema(version, options);
    if (value === undefined) this.contents = null;else {
      this.contents = this.createNode(value, _replacer, options);
    }
  }
  /**
   * Create a deep copy of this Document and its contents.
   *
   * Custom Node values that inherit from `Object` still refer to their original instances.
   */


  clone() {
    const copy = Object.create(Document.prototype, {
      [_Node.NODE_TYPE]: {
        value: _Node.DOC
      }
    });
    copy.commentBefore = this.commentBefore;
    copy.comment = this.comment;
    copy.errors = this.errors.slice();
    copy.warnings = this.warnings.slice();
    copy.options = Object.assign({}, this.options);
    copy.directives = this.directives.clone();
    copy.schema = this.schema.clone();
    copy.contents = (0, _Node.isNode)(this.contents) ? this.contents.clone(copy.schema) : this.contents;
    if (this.range) copy.range = this.range.slice();
    return copy;
  }
  /** Adds a value to the document. */


  add(value) {
    if (assertCollection(this.contents)) this.contents.add(value);
  }
  /** Adds a value to the document. */


  addIn(path, value) {
    if (assertCollection(this.contents)) this.contents.addIn(path, value);
  }
  /**
   * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
   *
   * If `node` already has an anchor, `name` is ignored.
   * Otherwise, the `node.anchor` value will be set to `name`,
   * or if an anchor with that name is already present in the document,
   * `name` will be used as a prefix for a new unique anchor.
   * If `name` is undefined, the generated anchor will use 'a' as a prefix.
   */


  createAlias(node, name) {
    if (!node.anchor) {
      const prev = (0, _anchors.anchorNames)(this);
      node.anchor = !name || prev.has(name) ? (0, _anchors.findNewAnchor)(name || 'a', prev) : name;
    }

    return new _Alias.Alias(node.anchor);
  }

  createNode(value, replacer, options) {
    let _replacer = undefined;

    if (typeof replacer === 'function') {
      value = replacer.call({
        '': value
      }, '', value);
      _replacer = replacer;
    } else if (Array.isArray(replacer)) {
      const keyToStr = v => typeof v === 'number' || v instanceof String || v instanceof Number;

      const asStr = replacer.filter(keyToStr).map(String);
      if (asStr.length > 0) replacer = replacer.concat(asStr);
      _replacer = replacer;
    } else if (options === undefined && replacer) {
      options = replacer;
      replacer = undefined;
    }

    const {
      aliasDuplicateObjects,
      anchorPrefix,
      flow,
      keepUndefined,
      onTagObj,
      tag
    } = options || {};
    const {
      onAnchor,
      setAnchors,
      sourceObjects
    } = (0, _anchors.createNodeAnchors)(this, anchorPrefix || 'a');
    const ctx = {
      aliasDuplicateObjects: aliasDuplicateObjects !== null && aliasDuplicateObjects !== void 0 ? aliasDuplicateObjects : true,
      keepUndefined: keepUndefined !== null && keepUndefined !== void 0 ? keepUndefined : false,
      onAnchor,
      onTagObj,
      replacer: _replacer,
      schema: this.schema,
      sourceObjects
    };
    const node = (0, _createNode.createNode)(value, tag, ctx);
    if (flow && (0, _Node.isCollection)(node)) node.flow = true;
    setAnchors();
    return node;
  }
  /**
   * Convert a key and a value into a `Pair` using the current schema,
   * recursively wrapping all values as `Scalar` or `Collection` nodes.
   */


  createPair(key, value, options = {}) {
    const k = this.createNode(key, null, options);
    const v = this.createNode(value, null, options);
    return new _Pair.Pair(k, v);
  }
  /**
   * Removes a value from the document.
   * @returns `true` if the item was found and removed.
   */


  delete(key) {
    return assertCollection(this.contents) ? this.contents.delete(key) : false;
  }
  /**
   * Removes a value from the document.
   * @returns `true` if the item was found and removed.
   */


  deleteIn(path) {
    if ((0, _Collection.isEmptyPath)(path)) {
      if (this.contents == null) return false;
      this.contents = null;
      return true;
    }

    return assertCollection(this.contents) ? this.contents.deleteIn(path) : false;
  }
  /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */


  get(key, keepScalar) {
    return (0, _Node.isCollection)(this.contents) ? this.contents.get(key, keepScalar) : undefined;
  }
  /**
   * Returns item at `path`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */


  getIn(path, keepScalar) {
    if ((0, _Collection.isEmptyPath)(path)) return !keepScalar && (0, _Node.isScalar)(this.contents) ? this.contents.value : this.contents;
    return (0, _Node.isCollection)(this.contents) ? this.contents.getIn(path, keepScalar) : undefined;
  }
  /**
   * Checks if the document includes a value with the key `key`.
   */


  has(key) {
    return (0, _Node.isCollection)(this.contents) ? this.contents.has(key) : false;
  }
  /**
   * Checks if the document includes a value at `path`.
   */


  hasIn(path) {
    if ((0, _Collection.isEmptyPath)(path)) return this.contents !== undefined;
    return (0, _Node.isCollection)(this.contents) ? this.contents.hasIn(path) : false;
  }
  /**
   * Sets a value in this document. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */


  set(key, value) {
    if (this.contents == null) {
      this.contents = (0, _Collection.collectionFromPath)(this.schema, [key], value);
    } else if (assertCollection(this.contents)) {
      this.contents.set(key, value);
    }
  }
  /**
   * Sets a value in this document. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */


  setIn(path, value) {
    if ((0, _Collection.isEmptyPath)(path)) this.contents = value;else if (this.contents == null) {
      this.contents = (0, _Collection.collectionFromPath)(this.schema, Array.from(path), value);
    } else if (assertCollection(this.contents)) {
      this.contents.setIn(path, value);
    }
  }
  /**
   * Change the YAML version and schema used by the document.
   *
   * Overrides all previously set schema options
   */


  setSchema(version, options) {
    let _options;

    switch (String(version)) {
      case '1.1':
        this.directives.yaml.version = '1.1';
        _options = Object.assign({
          merge: true,
          resolveKnownTags: false,
          schema: 'yaml-1.1'
        }, options);
        break;

      case '1.2':
        this.directives.yaml.version = '1.2';
        _options = Object.assign({
          merge: false,
          resolveKnownTags: true,
          schema: 'core'
        }, options);
        break;

      default:
        {
          const sv = JSON.stringify(version);
          throw new Error(`Expected '1.1' or '1.2' as version, but found: ${sv}`);
        }
    }

    this.schema = new _Schema.Schema(_options);
  } // json & jsonArg are only used from toJSON()


  toJS({
    json,
    jsonArg,
    mapAsMap,
    maxAliasCount,
    onAnchor,
    reviver
  } = {}) {
    const ctx = {
      anchors: new Map(),
      doc: this,
      keep: !json,
      mapAsMap: mapAsMap === true,
      mapKeyWarned: false,
      maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100,
      stringify: _stringify.stringify
    };
    const res = (0, _toJS.toJS)(this.contents, jsonArg || '', ctx);
    if (typeof onAnchor === 'function') for (const {
      count,
      res
    } of ctx.anchors.values()) onAnchor(res, count);
    return typeof reviver === 'function' ? (0, _applyReviver.applyReviver)(reviver, {
      '': res
    }, '', res) : res;
  }
  /**
   * A JSON representation of the document `contents`.
   *
   * @param jsonArg Used by `JSON.stringify` to indicate the array index or
   *   property name.
   */


  toJSON(jsonArg, onAnchor) {
    return this.toJS({
      json: true,
      jsonArg,
      mapAsMap: false,
      onAnchor
    });
  }
  /** A YAML representation of the document. */


  toString(options = {}) {
    if (this.errors.length > 0) throw new Error('Document with errors cannot be stringified');

    if ('indent' in options && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
      const s = JSON.stringify(options.indent);
      throw new Error(`"indent" option must be a positive integer, not ${s}`);
    }

    return (0, _stringifyDocument.stringifyDocument)(this, options);
  }

}

exports.Document = Document;

function assertCollection(contents) {
  if ((0, _Node.isCollection)(contents)) return true;
  throw new Error('Expected a YAML collection as document contents');
}

},{"../nodes/Alias.js":76,"../nodes/Collection.js":77,"../nodes/Node.js":78,"../nodes/Pair.js":79,"../nodes/toJS.js":84,"../options.js":85,"../schema/Schema.js":94,"../stringify/stringify.js":115,"../stringify/stringifyDocument.js":118,"./anchors.js":69,"./applyReviver.js":70,"./createNode.js":71,"./directives.js":72}],69:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.anchorIsValid = anchorIsValid;
exports.anchorNames = anchorNames;
exports.createNodeAnchors = createNodeAnchors;
exports.findNewAnchor = findNewAnchor;

var _Node = require("../nodes/Node.js");

var _visit = require("../visit.js");

/**
 * Verify that the input string is a valid anchor.
 *
 * Will throw on errors.
 */
function anchorIsValid(anchor) {
  if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
    const sa = JSON.stringify(anchor);
    const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
    throw new Error(msg);
  }

  return true;
}

function anchorNames(root) {
  const anchors = new Set();
  (0, _visit.visit)(root, {
    Value(_key, node) {
      if (node.anchor) anchors.add(node.anchor);
    }

  });
  return anchors;
}
/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */


function findNewAnchor(prefix, exclude) {
  for (let i = 1; true; ++i) {
    const name = `${prefix}${i}`;
    if (!exclude.has(name)) return name;
  }
}

function createNodeAnchors(doc, prefix) {
  const aliasObjects = [];
  const sourceObjects = new Map();
  let prevAnchors = null;
  return {
    onAnchor(source) {
      aliasObjects.push(source);
      if (!prevAnchors) prevAnchors = anchorNames(doc);
      const anchor = findNewAnchor(prefix, prevAnchors);
      prevAnchors.add(anchor);
      return anchor;
    },

    /**
     * With circular references, the source node is only resolved after all
     * of its child nodes are. This is why anchors are set only after all of
     * the nodes have been created.
     */
    setAnchors() {
      for (const source of aliasObjects) {
        const ref = sourceObjects.get(source);

        if (typeof ref === 'object' && ref.anchor && ((0, _Node.isScalar)(ref.node) || (0, _Node.isCollection)(ref.node))) {
          ref.node.anchor = ref.anchor;
        } else {
          const error = new Error('Failed to resolve repeated object (this should not happen)');
          error.source = source;
          throw error;
        }
      }
    },

    sourceObjects
  };
}

},{"../nodes/Node.js":78,"../visit.js":122}],70:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyReviver = applyReviver;

/**
 * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,
 * in section 24.5.1.1 "Runtime Semantics: InternalizeJSONProperty" of the
 * 2021 edition: https://tc39.es/ecma262/#sec-json.parse
 *
 * Includes extensions for handling Map and Set objects.
 */
function applyReviver(reviver, obj, key, val) {
  if (val && typeof val === 'object') {
    if (Array.isArray(val)) {
      for (let i = 0, len = val.length; i < len; ++i) {
        const v0 = val[i];
        const v1 = applyReviver(reviver, val, String(i), v0);
        if (v1 === undefined) delete val[i];else if (v1 !== v0) val[i] = v1;
      }
    } else if (val instanceof Map) {
      for (const k of Array.from(val.keys())) {
        const v0 = val.get(k);
        const v1 = applyReviver(reviver, val, k, v0);
        if (v1 === undefined) val.delete(k);else if (v1 !== v0) val.set(k, v1);
      }
    } else if (val instanceof Set) {
      for (const v0 of Array.from(val)) {
        const v1 = applyReviver(reviver, val, v0, v0);
        if (v1 === undefined) val.delete(v0);else if (v1 !== v0) {
          val.delete(v0);
          val.add(v1);
        }
      }
    } else {
      for (const [k, v0] of Object.entries(val)) {
        const v1 = applyReviver(reviver, val, k, v0);
        if (v1 === undefined) delete val[k];else if (v1 !== v0) val[k] = v1;
      }
    }
  }

  return reviver.call(obj, key, val);
}

},{}],71:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNode = createNode;

var _Alias = require("../nodes/Alias.js");

var _Node = require("../nodes/Node.js");

var _Scalar = require("../nodes/Scalar.js");

const defaultTagPrefix = 'tag:yaml.org,2002:';

function findTagObject(value, tagName, tags) {
  if (tagName) {
    const match = tags.filter(t => t.tag === tagName);
    const tagObj = match.find(t => !t.format) || match[0];
    if (!tagObj) throw new Error(`Tag ${tagName} not found`);
    return tagObj;
  }

  return tags.find(t => t.identify && t.identify(value) && !t.format);
}

function createNode(value, tagName, ctx) {
  var _a, _b;

  if ((0, _Node.isDocument)(value)) value = value.contents;
  if ((0, _Node.isNode)(value)) return value;

  if ((0, _Node.isPair)(value)) {
    const map = (_b = (_a = ctx.schema[_Node.MAP]).createNode) === null || _b === void 0 ? void 0 : _b.call(_a, ctx.schema, null, ctx);
    map.items.push(value);
    return map;
  }

  if (value instanceof String || value instanceof Number || value instanceof Boolean || typeof BigInt === 'function' && value instanceof BigInt // not supported everywhere
  ) {
    // https://tc39.es/ecma262/#sec-serializejsonproperty
    value = value.valueOf();
  }

  const {
    aliasDuplicateObjects,
    onAnchor,
    onTagObj,
    schema,
    sourceObjects
  } = ctx; // Detect duplicate references to the same object & use Alias nodes for all
  // after first. The `ref` wrapper allows for circular references to resolve.

  let ref = undefined;

  if (aliasDuplicateObjects && value && typeof value === 'object') {
    ref = sourceObjects.get(value);

    if (ref) {
      if (!ref.anchor) ref.anchor = onAnchor(value);
      return new _Alias.Alias(ref.anchor);
    } else {
      ref = {
        anchor: null,
        node: null
      };
      sourceObjects.set(value, ref);
    }
  }

  if (tagName && tagName.startsWith('!!')) tagName = defaultTagPrefix + tagName.slice(2);
  let tagObj = findTagObject(value, tagName, schema.tags);

  if (!tagObj) {
    if (value && typeof value.toJSON === 'function') value = value.toJSON();

    if (!value || typeof value !== 'object') {
      const node = new _Scalar.Scalar(value);
      if (ref) ref.node = node;
      return node;
    }

    tagObj = value instanceof Map ? schema[_Node.MAP] : Symbol.iterator in Object(value) ? schema[_Node.SEQ] : schema[_Node.MAP];
  }

  if (onTagObj) {
    onTagObj(tagObj);
    delete ctx.onTagObj;
  }

  const node = (tagObj === null || tagObj === void 0 ? void 0 : tagObj.createNode) ? tagObj.createNode(ctx.schema, value, ctx) : new _Scalar.Scalar(value);
  if (tagName) node.tag = tagName;
  if (ref) ref.node = node;
  return node;
}

},{"../nodes/Alias.js":76,"../nodes/Node.js":78,"../nodes/Scalar.js":80}],72:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Directives = void 0;

var _Node = require("../nodes/Node.js");

var _visit = require("../visit.js");

const escapeChars = {
  '!': '%21',
  ',': '%2C',
  '[': '%5B',
  ']': '%5D',
  '{': '%7B',
  '}': '%7D'
};

const escapeTagName = tn => tn.replace(/[!,[\]{}]/g, ch => escapeChars[ch]);

class Directives {
  constructor(yaml, tags) {
    /**
     * The directives-end/doc-start marker `---`. If `null`, a marker may still be
     * included in the document's stringified representation.
     */
    this.marker = null;
    this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
    this.tags = Object.assign({}, Directives.defaultTags, tags);
  }

  clone() {
    const copy = new Directives(this.yaml, this.tags);
    copy.marker = this.marker;
    return copy;
  }
  /**
   * During parsing, get a Directives instance for the current document and
   * update the stream state according to the current version's spec.
   */


  atDocument() {
    const res = new Directives(this.yaml, this.tags);

    switch (this.yaml.version) {
      case '1.1':
        this.atNextDocument = true;
        break;

      case '1.2':
        this.atNextDocument = false;
        this.yaml = {
          explicit: Directives.defaultYaml.explicit,
          version: '1.2'
        };
        this.tags = Object.assign({}, Directives.defaultTags);
        break;
    }

    return res;
  }
  /**
   * @param onError - May be called even if the action was successful
   * @returns `true` on success
   */


  add(line, onError) {
    if (this.atNextDocument) {
      this.yaml = {
        explicit: Directives.defaultYaml.explicit,
        version: '1.1'
      };
      this.tags = Object.assign({}, Directives.defaultTags);
      this.atNextDocument = false;
    }

    const parts = line.trim().split(/[ \t]+/);
    const name = parts.shift();

    switch (name) {
      case '%TAG':
        {
          if (parts.length !== 2) {
            onError(0, '%TAG directive should contain exactly two parts');
            if (parts.length < 2) return false;
          }

          const [handle, prefix] = parts;
          this.tags[handle] = prefix;
          return true;
        }

      case '%YAML':
        {
          this.yaml.explicit = true;

          if (parts.length < 1) {
            onError(0, '%YAML directive should contain exactly one part');
            return false;
          }

          const [version] = parts;

          if (version === '1.1' || version === '1.2') {
            this.yaml.version = version;
            return true;
          } else {
            onError(6, `Unsupported YAML version ${version}`, true);
            return false;
          }
        }

      default:
        onError(0, `Unknown directive ${name}`, true);
        return false;
    }
  }
  /**
   * Resolves a tag, matching handles to those defined in %TAG directives.
   *
   * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
   *   `'!local'` tag, or `null` if unresolvable.
   */


  tagName(source, onError) {
    if (source === '!') return '!'; // non-specific tag

    if (source[0] !== '!') {
      onError(`Not a valid tag: ${source}`);
      return null;
    }

    if (source[1] === '<') {
      const verbatim = source.slice(2, -1);

      if (verbatim === '!' || verbatim === '!!') {
        onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
        return null;
      }

      if (source[source.length - 1] !== '>') onError('Verbatim tags must end with a >');
      return verbatim;
    }

    const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/);
    if (!suffix) onError(`The ${source} tag has no suffix`);
    const prefix = this.tags[handle];
    if (prefix) return prefix + decodeURIComponent(suffix);
    if (handle === '!') return source; // local tag

    onError(`Could not resolve tag: ${source}`);
    return null;
  }
  /**
   * Given a fully resolved tag, returns its printable string form,
   * taking into account current tag prefixes and defaults.
   */


  tagString(tag) {
    for (const [handle, prefix] of Object.entries(this.tags)) {
      if (tag.startsWith(prefix)) return handle + escapeTagName(tag.substring(prefix.length));
    }

    return tag[0] === '!' ? tag : `!<${tag}>`;
  }

  toString(doc) {
    const lines = this.yaml.explicit ? [`%YAML ${this.yaml.version || '1.2'}`] : [];
    const tagEntries = Object.entries(this.tags);
    let tagNames;

    if (doc && tagEntries.length > 0 && (0, _Node.isNode)(doc.contents)) {
      const tags = {};
      (0, _visit.visit)(doc.contents, (_key, node) => {
        if ((0, _Node.isNode)(node) && node.tag) tags[node.tag] = true;
      });
      tagNames = Object.keys(tags);
    } else tagNames = [];

    for (const [handle, prefix] of tagEntries) {
      if (handle === '!!' && prefix === 'tag:yaml.org,2002:') continue;
      if (!doc || tagNames.some(tn => tn.startsWith(prefix))) lines.push(`%TAG ${handle} ${prefix}`);
    }

    return lines.join('\n');
  }

}

exports.Directives = Directives;
Directives.defaultYaml = {
  explicit: false,
  version: '1.2'
};
Directives.defaultTags = {
  '!!': 'tag:yaml.org,2002:'
};

},{"../nodes/Node.js":78,"../visit.js":122}],73:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prettifyError = exports.YAMLWarning = exports.YAMLParseError = exports.YAMLError = void 0;

class YAMLError extends Error {
  constructor(name, pos, code, message) {
    super();
    this.name = name;
    this.code = code;
    this.message = message;
    this.pos = pos;
  }

}

exports.YAMLError = YAMLError;

class YAMLParseError extends YAMLError {
  constructor(pos, code, message) {
    super('YAMLParseError', pos, code, message);
  }

}

exports.YAMLParseError = YAMLParseError;

class YAMLWarning extends YAMLError {
  constructor(pos, code, message) {
    super('YAMLWarning', pos, code, message);
  }

}

exports.YAMLWarning = YAMLWarning;

const prettifyError = (src, lc) => error => {
  if (error.pos[0] === -1) return;
  error.linePos = error.pos.map(pos => lc.linePos(pos));
  const {
    line,
    col
  } = error.linePos[0];
  error.message += ` at line ${line}, column ${col}`;
  let ci = col - 1;
  let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, ''); // Trim to max 80 chars, keeping col position near the middle

  if (ci >= 60 && lineStr.length > 80) {
    const trimStart = Math.min(ci - 39, lineStr.length - 79);
    lineStr = '…' + lineStr.substring(trimStart);
    ci -= trimStart - 1;
  }

  if (lineStr.length > 80) lineStr = lineStr.substring(0, 79) + '…'; // Include previous line in context if pointing at line start

  if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
    // Regexp won't match if start is trimmed
    let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
    if (prev.length > 80) prev = prev.substring(0, 79) + '…\n';
    lineStr = prev + lineStr;
  }

  if (/[^ ]/.test(lineStr)) {
    let count = 1;
    const end = error.linePos[1];

    if (end && end.line === line && end.col > col) {
      count = Math.min(end.col - col, 80 - ci);
    }

    const pointer = ' '.repeat(ci) + '^'.repeat(count);
    error.message += `:\n\n${lineStr}\n${pointer}\n`;
  }
};

exports.prettifyError = prettifyError;

},{}],74:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Alias", {
  enumerable: true,
  get: function () {
    return _Alias.Alias;
  }
});
exports.CST = void 0;
Object.defineProperty(exports, "Composer", {
  enumerable: true,
  get: function () {
    return _composer.Composer;
  }
});
Object.defineProperty(exports, "Document", {
  enumerable: true,
  get: function () {
    return _Document.Document;
  }
});
Object.defineProperty(exports, "Lexer", {
  enumerable: true,
  get: function () {
    return _lexer.Lexer;
  }
});
Object.defineProperty(exports, "LineCounter", {
  enumerable: true,
  get: function () {
    return _lineCounter.LineCounter;
  }
});
Object.defineProperty(exports, "Pair", {
  enumerable: true,
  get: function () {
    return _Pair.Pair;
  }
});
Object.defineProperty(exports, "Parser", {
  enumerable: true,
  get: function () {
    return _parser.Parser;
  }
});
Object.defineProperty(exports, "Scalar", {
  enumerable: true,
  get: function () {
    return _Scalar.Scalar;
  }
});
Object.defineProperty(exports, "Schema", {
  enumerable: true,
  get: function () {
    return _Schema.Schema;
  }
});
Object.defineProperty(exports, "YAMLError", {
  enumerable: true,
  get: function () {
    return _errors.YAMLError;
  }
});
Object.defineProperty(exports, "YAMLMap", {
  enumerable: true,
  get: function () {
    return _YAMLMap.YAMLMap;
  }
});
Object.defineProperty(exports, "YAMLParseError", {
  enumerable: true,
  get: function () {
    return _errors.YAMLParseError;
  }
});
Object.defineProperty(exports, "YAMLSeq", {
  enumerable: true,
  get: function () {
    return _YAMLSeq.YAMLSeq;
  }
});
Object.defineProperty(exports, "YAMLWarning", {
  enumerable: true,
  get: function () {
    return _errors.YAMLWarning;
  }
});
Object.defineProperty(exports, "defaultOptions", {
  enumerable: true,
  get: function () {
    return _options.defaultOptions;
  }
});
Object.defineProperty(exports, "isAlias", {
  enumerable: true,
  get: function () {
    return _Node.isAlias;
  }
});
Object.defineProperty(exports, "isCollection", {
  enumerable: true,
  get: function () {
    return _Node.isCollection;
  }
});
Object.defineProperty(exports, "isDocument", {
  enumerable: true,
  get: function () {
    return _Node.isDocument;
  }
});
Object.defineProperty(exports, "isMap", {
  enumerable: true,
  get: function () {
    return _Node.isMap;
  }
});
Object.defineProperty(exports, "isNode", {
  enumerable: true,
  get: function () {
    return _Node.isNode;
  }
});
Object.defineProperty(exports, "isPair", {
  enumerable: true,
  get: function () {
    return _Node.isPair;
  }
});
Object.defineProperty(exports, "isScalar", {
  enumerable: true,
  get: function () {
    return _Node.isScalar;
  }
});
Object.defineProperty(exports, "isSeq", {
  enumerable: true,
  get: function () {
    return _Node.isSeq;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _publicApi.parse;
  }
});
Object.defineProperty(exports, "parseAllDocuments", {
  enumerable: true,
  get: function () {
    return _publicApi.parseAllDocuments;
  }
});
Object.defineProperty(exports, "parseDocument", {
  enumerable: true,
  get: function () {
    return _publicApi.parseDocument;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _publicApi.stringify;
  }
});
Object.defineProperty(exports, "visit", {
  enumerable: true,
  get: function () {
    return _visit.visit;
  }
});

var _composer = require("./compose/composer.js");

var _Document = require("./doc/Document.js");

var _Schema = require("./schema/Schema.js");

var _errors = require("./errors.js");

var _Alias = require("./nodes/Alias.js");

var _Node = require("./nodes/Node.js");

var _Pair = require("./nodes/Pair.js");

var _Scalar = require("./nodes/Scalar.js");

var _YAMLMap = require("./nodes/YAMLMap.js");

var _YAMLSeq = require("./nodes/YAMLSeq.js");

var _options = require("./options.js");

var cst = _interopRequireWildcard(require("./parse/cst.js"));

exports.CST = cst;

var _lexer = require("./parse/lexer.js");

var _lineCounter = require("./parse/line-counter.js");

var _parser = require("./parse/parser.js");

var _publicApi = require("./public-api.js");

var _visit = require("./visit.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

},{"./compose/composer.js":57,"./doc/Document.js":68,"./errors.js":73,"./nodes/Alias.js":76,"./nodes/Node.js":78,"./nodes/Pair.js":79,"./nodes/Scalar.js":80,"./nodes/YAMLMap.js":81,"./nodes/YAMLSeq.js":82,"./options.js":85,"./parse/cst.js":89,"./parse/lexer.js":90,"./parse/line-counter.js":91,"./parse/parser.js":92,"./public-api.js":93,"./schema/Schema.js":94,"./visit.js":122}],75:[function(require,module,exports){
(function (process){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debug = debug;
exports.warn = warn;

function debug(logLevel, ...messages) {
  if (logLevel === 'debug') console.log(...messages);
}

function warn(logLevel, warning) {
  if (logLevel === 'debug' || logLevel === 'warn') {
    if (typeof process !== 'undefined' && process.emitWarning) process.emitWarning(warning);else console.warn(warning);
  }
}

}).call(this)}).call(this,require('_process'))
},{"_process":52}],76:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Alias = void 0;

var _anchors = require("../doc/anchors.js");

var _visit = require("../visit.js");

var _Node = require("./Node.js");

class Alias extends _Node.NodeBase {
  constructor(source) {
    super(_Node.ALIAS);
    this.source = source;
    Object.defineProperty(this, 'tag', {
      set() {
        throw new Error('Alias nodes cannot have tags');
      }

    });
  }
  /**
   * Resolve the value of this alias within `doc`, finding the last
   * instance of the `source` anchor before this node.
   */


  resolve(doc) {
    let found = undefined;
    (0, _visit.visit)(doc, {
      Node: (_key, node) => {
        if (node === this) return _visit.visit.BREAK;
        if (node.anchor === this.source) found = node;
      }
    });
    return found;
  }

  toJSON(_arg, ctx) {
    if (!ctx) return {
      source: this.source
    };
    const {
      anchors,
      doc,
      maxAliasCount
    } = ctx;
    const source = this.resolve(doc);

    if (!source) {
      const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
      throw new ReferenceError(msg);
    }

    const data = anchors.get(source);
    /* istanbul ignore if */

    if (!data || data.res === undefined) {
      const msg = 'This should not happen: Alias anchor was not resolved?';
      throw new ReferenceError(msg);
    }

    if (maxAliasCount >= 0) {
      data.count += 1;
      if (data.aliasCount === 0) data.aliasCount = getAliasCount(doc, source, anchors);

      if (data.count * data.aliasCount > maxAliasCount) {
        const msg = 'Excessive alias count indicates a resource exhaustion attack';
        throw new ReferenceError(msg);
      }
    }

    return data.res;
  }

  toString(ctx, _onComment, _onChompKeep) {
    const src = `*${this.source}`;

    if (ctx) {
      (0, _anchors.anchorIsValid)(this.source);

      if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
        const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
        throw new Error(msg);
      }

      if (ctx.implicitKey) return `${src} `;
    }

    return src;
  }

}

exports.Alias = Alias;

function getAliasCount(doc, node, anchors) {
  if ((0, _Node.isAlias)(node)) {
    const source = node.resolve(doc);
    const anchor = anchors && source && anchors.get(source);
    return anchor ? anchor.count * anchor.aliasCount : 0;
  } else if ((0, _Node.isCollection)(node)) {
    let count = 0;

    for (const item of node.items) {
      const c = getAliasCount(doc, item, anchors);
      if (c > count) count = c;
    }

    return count;
  } else if ((0, _Node.isPair)(node)) {
    const kc = getAliasCount(doc, node.key, anchors);
    const vc = getAliasCount(doc, node.value, anchors);
    return Math.max(kc, vc);
  }

  return 1;
}

},{"../doc/anchors.js":69,"../visit.js":122,"./Node.js":78}],77:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collection = void 0;
exports.collectionFromPath = collectionFromPath;
exports.isEmptyPath = void 0;

var _createNode = require("../doc/createNode.js");

var _Node = require("./Node.js");

function collectionFromPath(schema, path, value) {
  let v = value;

  for (let i = path.length - 1; i >= 0; --i) {
    const k = path[i];

    if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {
      const a = [];
      a[k] = v;
      v = a;
    } else {
      v = new Map([[k, v]]);
    }
  }

  return (0, _createNode.createNode)(v, undefined, {
    aliasDuplicateObjects: false,
    keepUndefined: false,
    onAnchor: () => {
      throw new Error('This should not happen, please report a bug.');
    },
    schema,
    sourceObjects: new Map()
  });
} // null, undefined, or an empty non-string iterable (e.g. [])


const isEmptyPath = path => path == null || typeof path === 'object' && !!path[Symbol.iterator]().next().done;

exports.isEmptyPath = isEmptyPath;

class Collection extends _Node.NodeBase {
  constructor(type, schema) {
    super(type);
    Object.defineProperty(this, 'schema', {
      value: schema,
      configurable: true,
      enumerable: false,
      writable: true
    });
  }
  /**
   * Create a copy of this collection.
   *
   * @param schema - If defined, overwrites the original's schema
   */


  clone(schema) {
    const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
    if (schema) copy.schema = schema;
    copy.items = copy.items.map(it => (0, _Node.isNode)(it) || (0, _Node.isPair)(it) ? it.clone(schema) : it);
    if (this.range) copy.range = this.range.slice();
    return copy;
  }
  /**
   * Adds a value to the collection. For `!!map` and `!!omap` the value must
   * be a Pair instance or a `{ key, value }` object, which may not have a key
   * that already exists in the map.
   */


  addIn(path, value) {
    if (isEmptyPath(path)) this.add(value);else {
      const [key, ...rest] = path;
      const node = this.get(key, true);
      if ((0, _Node.isCollection)(node)) node.addIn(rest, value);else if (node === undefined && this.schema) this.set(key, collectionFromPath(this.schema, rest, value));else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
  }
  /**
   * Removes a value from the collection.
   * @returns `true` if the item was found and removed.
   */


  deleteIn(path) {
    const [key, ...rest] = path;
    if (rest.length === 0) return this.delete(key);
    const node = this.get(key, true);
    if ((0, _Node.isCollection)(node)) return node.deleteIn(rest);else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
  }
  /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */


  getIn(path, keepScalar) {
    const [key, ...rest] = path;
    const node = this.get(key, true);
    if (rest.length === 0) return !keepScalar && (0, _Node.isScalar)(node) ? node.value : node;else return (0, _Node.isCollection)(node) ? node.getIn(rest, keepScalar) : undefined;
  }

  hasAllNullValues(allowScalar) {
    return this.items.every(node => {
      if (!(0, _Node.isPair)(node)) return false;
      const n = node.value;
      return n == null || allowScalar && (0, _Node.isScalar)(n) && n.value == null && !n.commentBefore && !n.comment && !n.tag;
    });
  }
  /**
   * Checks if the collection includes a value with the key `key`.
   */


  hasIn(path) {
    const [key, ...rest] = path;
    if (rest.length === 0) return this.has(key);
    const node = this.get(key, true);
    return (0, _Node.isCollection)(node) ? node.hasIn(rest) : false;
  }
  /**
   * Sets a value in this collection. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */


  setIn(path, value) {
    const [key, ...rest] = path;

    if (rest.length === 0) {
      this.set(key, value);
    } else {
      const node = this.get(key, true);
      if ((0, _Node.isCollection)(node)) node.setIn(rest, value);else if (node === undefined && this.schema) this.set(key, collectionFromPath(this.schema, rest, value));else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
  }

}

exports.Collection = Collection;
Collection.maxFlowStringSingleLineLength = 60;

},{"../doc/createNode.js":71,"./Node.js":78}],78:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAlias = exports.hasAnchor = exports.SEQ = exports.SCALAR = exports.PAIR = exports.NodeBase = exports.NODE_TYPE = exports.MAP = exports.DOC = exports.ALIAS = void 0;
exports.isCollection = isCollection;
exports.isMap = exports.isDocument = void 0;
exports.isNode = isNode;
exports.isSeq = exports.isScalar = exports.isPair = void 0;
const ALIAS = Symbol.for('yaml.alias');
exports.ALIAS = ALIAS;
const DOC = Symbol.for('yaml.document');
exports.DOC = DOC;
const MAP = Symbol.for('yaml.map');
exports.MAP = MAP;
const PAIR = Symbol.for('yaml.pair');
exports.PAIR = PAIR;
const SCALAR = Symbol.for('yaml.scalar');
exports.SCALAR = SCALAR;
const SEQ = Symbol.for('yaml.seq');
exports.SEQ = SEQ;
const NODE_TYPE = Symbol.for('yaml.node.type');
exports.NODE_TYPE = NODE_TYPE;

const isAlias = node => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;

exports.isAlias = isAlias;

const isDocument = node => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;

exports.isDocument = isDocument;

const isMap = node => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;

exports.isMap = isMap;

const isPair = node => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;

exports.isPair = isPair;

const isScalar = node => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;

exports.isScalar = isScalar;

const isSeq = node => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;

exports.isSeq = isSeq;

function isCollection(node) {
  if (node && typeof node === 'object') switch (node[NODE_TYPE]) {
    case MAP:
    case SEQ:
      return true;
  }
  return false;
}

function isNode(node) {
  if (node && typeof node === 'object') switch (node[NODE_TYPE]) {
    case ALIAS:
    case MAP:
    case SCALAR:
    case SEQ:
      return true;
  }
  return false;
}

const hasAnchor = node => (isScalar(node) || isCollection(node)) && !!node.anchor;

exports.hasAnchor = hasAnchor;

class NodeBase {
  constructor(type) {
    Object.defineProperty(this, NODE_TYPE, {
      value: type
    });
  }
  /** Create a copy of this node.  */


  clone() {
    const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
    if (this.range) copy.range = this.range.slice();
    return copy;
  }

}

exports.NodeBase = NodeBase;

},{}],79:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pair = void 0;
exports.createPair = createPair;

var _createNode = require("../doc/createNode.js");

var _stringifyPair = require("../stringify/stringifyPair.js");

var _addPairToJSMap = require("./addPairToJSMap.js");

var _Node = require("./Node.js");

function createPair(key, value, ctx) {
  const k = (0, _createNode.createNode)(key, undefined, ctx);
  const v = (0, _createNode.createNode)(value, undefined, ctx);
  return new Pair(k, v);
}

class Pair {
  constructor(key, value = null) {
    Object.defineProperty(this, _Node.NODE_TYPE, {
      value: _Node.PAIR
    });
    this.key = key;
    this.value = value;
  }

  clone(schema) {
    let {
      key,
      value
    } = this;
    if ((0, _Node.isNode)(key)) key = key.clone(schema);
    if ((0, _Node.isNode)(value)) value = value.clone(schema);
    return new Pair(key, value);
  }

  toJSON(_, ctx) {
    const pair = ctx && ctx.mapAsMap ? new Map() : {};
    return (0, _addPairToJSMap.addPairToJSMap)(ctx, pair, this);
  }

  toString(ctx, onComment, onChompKeep) {
    return ctx && ctx.doc ? (0, _stringifyPair.stringifyPair)(this, ctx, onComment, onChompKeep) : JSON.stringify(this);
  }

}

exports.Pair = Pair;

},{"../doc/createNode.js":71,"../stringify/stringifyPair.js":120,"./Node.js":78,"./addPairToJSMap.js":83}],80:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isScalarValue = exports.Scalar = void 0;

var _Node = require("./Node.js");

var _toJS = require("./toJS.js");

const isScalarValue = value => !value || typeof value !== 'function' && typeof value !== 'object';

exports.isScalarValue = isScalarValue;

class Scalar extends _Node.NodeBase {
  constructor(value) {
    super(_Node.SCALAR);
    this.value = value;
  }

  toJSON(arg, ctx) {
    return ctx && ctx.keep ? this.value : (0, _toJS.toJS)(this.value, arg, ctx);
  }

  toString() {
    return String(this.value);
  }

}

exports.Scalar = Scalar;
Scalar.BLOCK_FOLDED = 'BLOCK_FOLDED';
Scalar.BLOCK_LITERAL = 'BLOCK_LITERAL';
Scalar.PLAIN = 'PLAIN';
Scalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';
Scalar.QUOTE_SINGLE = 'QUOTE_SINGLE';

},{"./Node.js":78,"./toJS.js":84}],81:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YAMLMap = void 0;
exports.findPair = findPair;

var _stringifyCollection = require("../stringify/stringifyCollection.js");

var _addPairToJSMap = require("./addPairToJSMap.js");

var _Collection = require("./Collection.js");

var _Node = require("./Node.js");

var _Pair = require("./Pair.js");

var _Scalar = require("./Scalar.js");

function findPair(items, key) {
  const k = (0, _Node.isScalar)(key) ? key.value : key;

  for (const it of items) {
    if ((0, _Node.isPair)(it)) {
      if (it.key === key || it.key === k) return it;
      if ((0, _Node.isScalar)(it.key) && it.key.value === k) return it;
    }
  }

  return undefined;
}

class YAMLMap extends _Collection.Collection {
  constructor(schema) {
    super(_Node.MAP, schema);
    this.items = [];
  }

  static get tagName() {
    return 'tag:yaml.org,2002:map';
  }
  /**
   * Adds a value to the collection.
   *
   * @param overwrite - If not set `true`, using a key that is already in the
   *   collection will throw. Otherwise, overwrites the previous value.
   */


  add(pair, overwrite) {
    let _pair;

    if ((0, _Node.isPair)(pair)) _pair = pair;else if (!pair || typeof pair !== 'object' || !('key' in pair)) {
      // In TypeScript, this never happens.
      _pair = new _Pair.Pair(pair, pair.value);
    } else _pair = new _Pair.Pair(pair.key, pair.value);
    const prev = findPair(this.items, _pair.key);
    const sortEntries = this.schema && this.schema.sortMapEntries;

    if (prev) {
      if (!overwrite) throw new Error(`Key ${_pair.key} already set`); // For scalars, keep the old node & its comments and anchors

      if ((0, _Node.isScalar)(prev.value) && (0, _Scalar.isScalarValue)(_pair.value)) prev.value.value = _pair.value;else prev.value = _pair.value;
    } else if (sortEntries) {
      const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);
      if (i === -1) this.items.push(_pair);else this.items.splice(i, 0, _pair);
    } else {
      this.items.push(_pair);
    }
  }

  delete(key) {
    const it = findPair(this.items, key);
    if (!it) return false;
    const del = this.items.splice(this.items.indexOf(it), 1);
    return del.length > 0;
  }

  get(key, keepScalar) {
    const it = findPair(this.items, key);
    const node = it && it.value;
    return !keepScalar && (0, _Node.isScalar)(node) ? node.value : node;
  }

  has(key) {
    return !!findPair(this.items, key);
  }

  set(key, value) {
    this.add(new _Pair.Pair(key, value), true);
  }
  /**
   * @param ctx - Conversion context, originally set in Document#toJS()
   * @param {Class} Type - If set, forces the returned collection type
   * @returns Instance of Type, Map, or Object
   */


  toJSON(_, ctx, Type) {
    const map = Type ? new Type() : ctx && ctx.mapAsMap ? new Map() : {};
    if (ctx && ctx.onCreate) ctx.onCreate(map);

    for (const item of this.items) (0, _addPairToJSMap.addPairToJSMap)(ctx, map, item);

    return map;
  }

  toString(ctx, onComment, onChompKeep) {
    if (!ctx) return JSON.stringify(this);

    for (const item of this.items) {
      if (!(0, _Node.isPair)(item)) throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
    }

    if (!ctx.allNullValues && this.hasAllNullValues(false)) ctx = Object.assign({}, ctx, {
      allNullValues: true
    });
    return (0, _stringifyCollection.stringifyCollection)(this, ctx, {
      blockItem: n => n.str,
      flowChars: {
        start: '{',
        end: '}'
      },
      itemIndent: ctx.indent || '',
      onChompKeep,
      onComment
    });
  }

}

exports.YAMLMap = YAMLMap;

},{"../stringify/stringifyCollection.js":116,"./Collection.js":77,"./Node.js":78,"./Pair.js":79,"./Scalar.js":80,"./addPairToJSMap.js":83}],82:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YAMLSeq = void 0;

var _stringifyCollection = require("../stringify/stringifyCollection.js");

var _Collection = require("./Collection.js");

var _Node = require("./Node.js");

var _Scalar = require("./Scalar.js");

var _toJS = require("./toJS.js");

class YAMLSeq extends _Collection.Collection {
  constructor(schema) {
    super(_Node.SEQ, schema);
    this.items = [];
  }

  static get tagName() {
    return 'tag:yaml.org,2002:seq';
  }

  add(value) {
    this.items.push(value);
  }
  /**
   * Removes a value from the collection.
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   *
   * @returns `true` if the item was found and removed.
   */


  delete(key) {
    const idx = asItemIndex(key);
    if (typeof idx !== 'number') return false;
    const del = this.items.splice(idx, 1);
    return del.length > 0;
  }
  /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   */


  get(key, keepScalar) {
    const idx = asItemIndex(key);
    if (typeof idx !== 'number') return undefined;
    const it = this.items[idx];
    return !keepScalar && (0, _Node.isScalar)(it) ? it.value : it;
  }
  /**
   * Checks if the collection includes a value with the key `key`.
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   */


  has(key) {
    const idx = asItemIndex(key);
    return typeof idx === 'number' && idx < this.items.length;
  }
  /**
   * Sets a value in this collection. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   *
   * If `key` does not contain a representation of an integer, this will throw.
   * It may be wrapped in a `Scalar`.
   */


  set(key, value) {
    const idx = asItemIndex(key);
    if (typeof idx !== 'number') throw new Error(`Expected a valid index, not ${key}.`);
    const prev = this.items[idx];
    if ((0, _Node.isScalar)(prev) && (0, _Scalar.isScalarValue)(value)) prev.value = value;else this.items[idx] = value;
  }

  toJSON(_, ctx) {
    const seq = [];
    if (ctx && ctx.onCreate) ctx.onCreate(seq);
    let i = 0;

    for (const item of this.items) seq.push((0, _toJS.toJS)(item, String(i++), ctx));

    return seq;
  }

  toString(ctx, onComment, onChompKeep) {
    if (!ctx) return JSON.stringify(this);
    return (0, _stringifyCollection.stringifyCollection)(this, ctx, {
      blockItem: n => n.comment ? n.str : `- ${n.str}`,
      flowChars: {
        start: '[',
        end: ']'
      },
      itemIndent: (ctx.indent || '') + '  ',
      onChompKeep,
      onComment
    });
  }

}

exports.YAMLSeq = YAMLSeq;

function asItemIndex(key) {
  let idx = (0, _Node.isScalar)(key) ? key.value : key;
  if (idx && typeof idx === 'string') idx = Number(idx);
  return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0 ? idx : null;
}

},{"../stringify/stringifyCollection.js":116,"./Collection.js":77,"./Node.js":78,"./Scalar.js":80,"./toJS.js":84}],83:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addPairToJSMap = addPairToJSMap;

var _log = require("../log.js");

var _stringify = require("../stringify/stringify.js");

var _Node = require("./Node.js");

var _Scalar = require("./Scalar.js");

var _toJS = require("./toJS.js");

const MERGE_KEY = '<<';

function addPairToJSMap(ctx, map, {
  key,
  value
}) {
  if (ctx && ctx.doc.schema.merge && isMergeKey(key)) {
    value = (0, _Node.isAlias)(value) ? value.resolve(ctx.doc) : value;
    if ((0, _Node.isSeq)(value)) for (const it of value.items) mergeToJSMap(ctx, map, it);else if (Array.isArray(value)) for (const it of value) mergeToJSMap(ctx, map, it);else mergeToJSMap(ctx, map, value);
  } else {
    const jsKey = (0, _toJS.toJS)(key, '', ctx);

    if (map instanceof Map) {
      map.set(jsKey, (0, _toJS.toJS)(value, jsKey, ctx));
    } else if (map instanceof Set) {
      map.add(jsKey);
    } else {
      const stringKey = stringifyKey(key, jsKey, ctx);
      const jsValue = (0, _toJS.toJS)(value, stringKey, ctx);
      if (stringKey in map) Object.defineProperty(map, stringKey, {
        value: jsValue,
        writable: true,
        enumerable: true,
        configurable: true
      });else map[stringKey] = jsValue;
    }
  }

  return map;
}

const isMergeKey = key => key === MERGE_KEY || (0, _Node.isScalar)(key) && key.value === MERGE_KEY && (!key.type || key.type === _Scalar.Scalar.PLAIN); // If the value associated with a merge key is a single mapping node, each of
// its key/value pairs is inserted into the current mapping, unless the key
// already exists in it. If the value associated with the merge key is a
// sequence, then this sequence is expected to contain mapping nodes and each
// of these nodes is merged in turn according to its order in the sequence.
// Keys in mapping nodes earlier in the sequence override keys specified in
// later mapping nodes. -- http://yaml.org/type/merge.html


function mergeToJSMap(ctx, map, value) {
  const source = ctx && (0, _Node.isAlias)(value) ? value.resolve(ctx.doc) : value;
  if (!(0, _Node.isMap)(source)) throw new Error('Merge sources must be maps or map aliases');
  const srcMap = source.toJSON(null, ctx, Map);

  for (const [key, value] of srcMap) {
    if (map instanceof Map) {
      if (!map.has(key)) map.set(key, value);
    } else if (map instanceof Set) {
      map.add(key);
    } else if (!Object.prototype.hasOwnProperty.call(map, key)) {
      Object.defineProperty(map, key, {
        value,
        writable: true,
        enumerable: true,
        configurable: true
      });
    }
  }

  return map;
}

function stringifyKey(key, jsKey, ctx) {
  if (jsKey === null) return '';
  if (typeof jsKey !== 'object') return String(jsKey);

  if ((0, _Node.isNode)(key) && ctx && ctx.doc) {
    const strCtx = (0, _stringify.createStringifyContext)(ctx.doc, {});
    strCtx.anchors = new Set();

    for (const node of ctx.anchors.keys()) strCtx.anchors.add(node.anchor);

    strCtx.inFlow = true;
    strCtx.inStringifyKey = true;
    const strKey = key.toString(strCtx);

    if (!ctx.mapKeyWarned) {
      let jsonStr = JSON.stringify(strKey);
      if (jsonStr.length > 40) jsonStr = jsonStr.substring(0, 36) + '..."';
      (0, _log.warn)(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
      ctx.mapKeyWarned = true;
    }

    return strKey;
  }

  return JSON.stringify(jsKey);
}

},{"../log.js":75,"../stringify/stringify.js":115,"./Node.js":78,"./Scalar.js":80,"./toJS.js":84}],84:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toJS = toJS;

var _Node = require("./Node.js");

/**
 * Recursively convert any node or its contents to native JavaScript
 *
 * @param value - The input value
 * @param arg - If `value` defines a `toJSON()` method, use this
 *   as its first argument
 * @param ctx - Conversion context, originally set in Document#toJS(). If
 *   `{ keep: true }` is not set, output should be suitable for JSON
 *   stringification.
 */
function toJS(value, arg, ctx) {
  if (Array.isArray(value)) return value.map((v, i) => toJS(v, String(i), ctx));

  if (value && typeof value.toJSON === 'function') {
    if (!ctx || !(0, _Node.hasAnchor)(value)) return value.toJSON(arg, ctx);
    const data = {
      aliasCount: 0,
      count: 1,
      res: undefined
    };
    ctx.anchors.set(value, data);

    ctx.onCreate = res => {
      data.res = res;
      delete ctx.onCreate;
    };

    const res = value.toJSON(arg, ctx);
    if (ctx.onCreate) ctx.onCreate(res);
    return res;
  }

  if (typeof value === 'bigint' && !(ctx && ctx.keep)) return Number(value);
  return value;
}

},{"./Node.js":78}],85:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultOptions = void 0;

/**
 * `yaml` defines document-specific options in three places: as an argument of
 * parse, create and stringify calls, in the values of `YAML.defaultOptions`,
 * and in the version-dependent `YAML.Document.defaults` object. Values set in
 * `YAML.defaultOptions` override version-dependent defaults, and argument
 * options override both.
 */
const defaultOptions = {
  intAsBigInt: false,
  keepSourceTokens: false,
  logLevel: 'warn',
  prettyErrors: true,
  strict: true,
  uniqueKeys: true,
  version: '1.2'
};
exports.defaultOptions = defaultOptions;

},{}],86:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createScalarToken = createScalarToken;
exports.resolveAsScalar = resolveAsScalar;
exports.setScalarValue = setScalarValue;

var _resolveBlockScalar = require("../compose/resolve-block-scalar.js");

var _resolveFlowScalar = require("../compose/resolve-flow-scalar.js");

var _errors = require("../errors.js");

var _stringifyString = require("../stringify/stringifyString.js");

function resolveAsScalar(token, strict = true, onError) {
  if (token) {
    const _onError = (pos, code, message) => {
      const offset = typeof pos === 'number' ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
      if (onError) onError(offset, code, message);else throw new _errors.YAMLParseError([offset, offset + 1], code, message);
    };

    switch (token.type) {
      case 'scalar':
      case 'single-quoted-scalar':
      case 'double-quoted-scalar':
        return (0, _resolveFlowScalar.resolveFlowScalar)(token, strict, _onError);

      case 'block-scalar':
        return (0, _resolveBlockScalar.resolveBlockScalar)(token, strict, _onError);
    }
  }

  return null;
}
/**
 * Create a new scalar token with `value`
 *
 * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,
 * as this function does not support any schema operations and won't check for such conflicts.
 *
 * @param value The string representation of the value, which will have its content properly indented.
 * @param context.end Comments and whitespace after the end of the value, or after the block scalar header. If undefined, a newline will be added.
 * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.
 * @param context.indent The indent level of the token.
 * @param context.inFlow Is this scalar within a flow collection? This may affect the resolved type of the token's value.
 * @param context.offset The offset position of the token.
 * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.
 */


function createScalarToken(value, context) {
  var _a;

  const {
    implicitKey = false,
    indent,
    inFlow = false,
    offset = -1,
    type = 'PLAIN'
  } = context;
  const source = (0, _stringifyString.stringifyString)({
    type,
    value
  }, {
    implicitKey,
    indent: indent > 0 ? ' '.repeat(indent) : '',
    inFlow,
    options: {
      blockQuote: true,
      lineWidth: -1
    }
  });
  const end = (_a = context.end) !== null && _a !== void 0 ? _a : [{
    type: 'newline',
    offset: -1,
    indent,
    source: '\n'
  }];

  switch (source[0]) {
    case '|':
    case '>':
      {
        const he = source.indexOf('\n');
        const head = source.substring(0, he);
        const body = source.substring(he + 1) + '\n';
        const props = [{
          type: 'block-scalar-header',
          offset,
          indent,
          source: head
        }];
        if (!addEndtoBlockProps(props, end)) props.push({
          type: 'newline',
          offset: -1,
          indent,
          source: '\n'
        });
        return {
          type: 'block-scalar',
          offset,
          indent,
          props,
          source: body
        };
      }

    case '"':
      return {
        type: 'double-quoted-scalar',
        offset,
        indent,
        source,
        end
      };

    case "'":
      return {
        type: 'single-quoted-scalar',
        offset,
        indent,
        source,
        end
      };

    default:
      return {
        type: 'scalar',
        offset,
        indent,
        source,
        end
      };
  }
}
/**
 * Set the value of `token` to the given string `value`, overwriting any previous contents and type that it may have.
 *
 * Best efforts are made to retain any comments previously associated with the `token`,
 * though all contents within a collection's `items` will be overwritten.
 *
 * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,
 * as this function does not support any schema operations and won't check for such conflicts.
 *
 * @param token Any token. If it does not include an `indent` value, the value will be stringified as if it were an implicit key.
 * @param value The string representation of the value, which will have its content properly indented.
 * @param context.afterKey In most cases, values after a key should have an additional level of indentation.
 * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.
 * @param context.inFlow Being within a flow collection may affect the resolved type of the token's value.
 * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.
 */


function setScalarValue(token, value, context = {}) {
  let {
    afterKey = false,
    implicitKey = false,
    inFlow = false,
    type
  } = context;
  let indent = 'indent' in token ? token.indent : null;
  if (afterKey && typeof indent === 'number') indent += 2;
  if (!type) switch (token.type) {
    case 'single-quoted-scalar':
      type = 'QUOTE_SINGLE';
      break;

    case 'double-quoted-scalar':
      type = 'QUOTE_DOUBLE';
      break;

    case 'block-scalar':
      {
        const header = token.props[0];
        if (header.type !== 'block-scalar-header') throw new Error('Invalid block scalar header');
        type = header.source[0] === '>' ? 'BLOCK_FOLDED' : 'BLOCK_LITERAL';
        break;
      }

    default:
      type = 'PLAIN';
  }
  const source = (0, _stringifyString.stringifyString)({
    type,
    value
  }, {
    implicitKey: implicitKey || indent === null,
    indent: indent !== null && indent > 0 ? ' '.repeat(indent) : '',
    inFlow,
    options: {
      blockQuote: true,
      lineWidth: -1
    }
  });

  switch (source[0]) {
    case '|':
    case '>':
      setBlockScalarValue(token, source);
      break;

    case '"':
      setFlowScalarValue(token, source, 'double-quoted-scalar');
      break;

    case "'":
      setFlowScalarValue(token, source, 'single-quoted-scalar');
      break;

    default:
      setFlowScalarValue(token, source, 'scalar');
  }
}

function setBlockScalarValue(token, source) {
  const he = source.indexOf('\n');
  const head = source.substring(0, he);
  const body = source.substring(he + 1) + '\n';

  if (token.type === 'block-scalar') {
    const header = token.props[0];
    if (header.type !== 'block-scalar-header') throw new Error('Invalid block scalar header');
    header.source = head;
    token.source = body;
  } else {
    const {
      offset
    } = token;
    const indent = 'indent' in token ? token.indent : -1;
    const props = [{
      type: 'block-scalar-header',
      offset,
      indent,
      source: head
    }];
    if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined)) props.push({
      type: 'newline',
      offset: -1,
      indent,
      source: '\n'
    });

    for (const key of Object.keys(token)) if (key !== 'type' && key !== 'offset') delete token[key];

    Object.assign(token, {
      type: 'block-scalar',
      indent,
      props,
      source: body
    });
  }
}
/** @returns `true` if last token is a newline */


function addEndtoBlockProps(props, end) {
  if (end) for (const st of end) switch (st.type) {
    case 'space':
    case 'comment':
      props.push(st);
      break;

    case 'newline':
      props.push(st);
      return true;
  }
  return false;
}

function setFlowScalarValue(token, source, type) {
  switch (token.type) {
    case 'scalar':
    case 'double-quoted-scalar':
    case 'single-quoted-scalar':
      token.type = type;
      token.source = source;
      break;

    case 'block-scalar':
      {
        const end = token.props.slice(1);
        let oa = source.length;
        if (token.props[0].type === 'block-scalar-header') oa -= token.props[0].source.length;

        for (const tok of end) tok.offset += oa;

        delete token.props;
        Object.assign(token, {
          type,
          source,
          end
        });
        break;
      }

    case 'block-map':
    case 'block-seq':
      {
        const offset = token.offset + source.length;
        const nl = {
          type: 'newline',
          offset,
          indent: token.indent,
          source: '\n'
        };
        delete token.items;
        Object.assign(token, {
          type,
          source,
          end: [nl]
        });
        break;
      }

    default:
      {
        const indent = 'indent' in token ? token.indent : -1;
        const end = 'end' in token && Array.isArray(token.end) ? token.end.filter(st => st.type === 'space' || st.type === 'comment' || st.type === 'newline') : [];

        for (const key of Object.keys(token)) if (key !== 'type' && key !== 'offset') delete token[key];

        Object.assign(token, {
          type,
          indent,
          source,
          end
        });
      }
  }
}

},{"../compose/resolve-block-scalar.js":59,"../compose/resolve-flow-scalar.js":63,"../errors.js":73,"../stringify/stringifyString.js":121}],87:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringify = void 0;

/**
 * Stringify a CST document, token, or collection item
 *
 * Fair warning: This applies no validation whatsoever, and
 * simply concatenates the sources in their logical order.
 */
const stringify = cst => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);

exports.stringify = stringify;

function stringifyToken(token) {
  switch (token.type) {
    case 'block-scalar':
      {
        let res = '';

        for (const tok of token.props) res += stringifyToken(tok);

        return res + token.source;
      }

    case 'block-map':
    case 'block-seq':
      {
        let res = '';

        for (const item of token.items) res += stringifyItem(item);

        return res;
      }

    case 'flow-collection':
      {
        let res = token.start.source;

        for (const item of token.items) res += stringifyItem(item);

        for (const st of token.end) res += st.source;

        return res;
      }

    case 'document':
      {
        let res = stringifyItem(token);
        if (token.end) for (const st of token.end) res += st.source;
        return res;
      }

    default:
      {
        let res = token.source;
        if ('end' in token && token.end) for (const st of token.end) res += st.source;
        return res;
      }
  }
}

function stringifyItem({
  start,
  key,
  sep,
  value
}) {
  let res = '';

  for (const st of start) res += st.source;

  if (key) res += stringifyToken(key);
  if (sep) for (const st of sep) res += st.source;
  if (value) res += stringifyToken(value);
  return res;
}

},{}],88:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visit = visit;
const BREAK = Symbol('break visit');
const SKIP = Symbol('skip children');
const REMOVE = Symbol('remove item');
/**
 * Apply a visitor to a CST document or item.
 *
 * Walks through the tree (depth-first) starting from the root, calling a
 * `visitor` function with two arguments when entering each item:
 *   - `item`: The current item, which included the following members:
 *     - `start: SourceToken[]` – Source tokens before the key or value,
 *       possibly including its anchor or tag.
 *     - `key?: Token | null` – Set for pair values. May then be `null`, if
 *       the key before the `:` separator is empty.
 *     - `sep?: SourceToken[]` – Source tokens between the key and the value,
 *       which should include the `:` map value indicator if `value` is set.
 *     - `value?: Token` – The value of a sequence item, or of a map pair.
 *   - `path`: The steps from the root to the current node, as an array of
 *     `['key' | 'value', number]` tuples.
 *
 * The return value of the visitor may be used to control the traversal:
 *   - `undefined` (default): Do nothing and continue
 *   - `visit.SKIP`: Do not visit the children of this token, continue with
 *      next sibling
 *   - `visit.BREAK`: Terminate traversal completely
 *   - `visit.REMOVE`: Remove the current item, then continue with the next one
 *   - `number`: Set the index of the next step. This is useful especially if
 *     the index of the current token has changed.
 *   - `function`: Define the next visitor for this item. After the original
 *     visitor is called on item entry, next visitors are called after handling
 *     a non-empty `key` and when exiting the item.
 */

function visit(cst, visitor) {
  if ('type' in cst && cst.type === 'document') cst = {
    start: cst.start,
    value: cst.value
  };

  _visit(Object.freeze([]), cst, visitor);
} // Without the `as symbol` casts, TS declares these in the `visit`
// namespace using `var`, but then complains about that because
// `unique symbol` must be `const`.

/** Terminate visit traversal completely */


visit.BREAK = BREAK;
/** Do not visit the children of the current item */

visit.SKIP = SKIP;
/** Remove the current item */

visit.REMOVE = REMOVE;
/** Find the item at `path` from `cst` as the root */

visit.itemAtPath = (cst, path) => {
  let item = cst;

  for (const [field, index] of path) {
    const tok = item && item[field];

    if (tok && 'items' in tok) {
      item = tok.items[index];
    } else return undefined;
  }

  return item;
};
/**
 * Get the immediate parent collection of the item at `path` from `cst` as the root.
 *
 * Throws an error if the collection is not found, which should never happen if the item itself exists.
 */


visit.parentCollection = (cst, path) => {
  const parent = visit.itemAtPath(cst, path.slice(0, -1));
  const field = path[path.length - 1][0];
  const coll = parent && parent[field];
  if (coll && 'items' in coll) return coll;
  throw new Error('Parent collection not found');
};

function _visit(path, item, visitor) {
  let ctrl = visitor(item, path);
  if (typeof ctrl === 'symbol') return ctrl;

  for (const field of ['key', 'value']) {
    const token = item[field];

    if (token && 'items' in token) {
      for (let i = 0; i < token.items.length; ++i) {
        const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);

        if (typeof ci === 'number') i = ci - 1;else if (ci === BREAK) return BREAK;else if (ci === REMOVE) {
          token.items.splice(i, 1);
          i -= 1;
        }
      }

      if (typeof ctrl === 'function' && field === 'key') ctrl = ctrl(item, path);
    }
  }

  return typeof ctrl === 'function' ? ctrl(item, path) : ctrl;
}

},{}],89:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SCALAR = exports.FLOW_END = exports.DOCUMENT = exports.BOM = void 0;
Object.defineProperty(exports, "createScalarToken", {
  enumerable: true,
  get: function () {
    return _cstScalar.createScalarToken;
  }
});
exports.isScalar = exports.isCollection = void 0;
exports.prettyToken = prettyToken;
Object.defineProperty(exports, "resolveAsScalar", {
  enumerable: true,
  get: function () {
    return _cstScalar.resolveAsScalar;
  }
});
Object.defineProperty(exports, "setScalarValue", {
  enumerable: true,
  get: function () {
    return _cstScalar.setScalarValue;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _cstStringify.stringify;
  }
});
exports.tokenType = tokenType;
Object.defineProperty(exports, "visit", {
  enumerable: true,
  get: function () {
    return _cstVisit.visit;
  }
});

var _cstScalar = require("./cst-scalar.js");

var _cstStringify = require("./cst-stringify.js");

var _cstVisit = require("./cst-visit.js");

/** The byte order mark */
const BOM = '\u{FEFF}';
/** Start of doc-mode */

exports.BOM = BOM;
const DOCUMENT = '\x02'; // C0: Start of Text

/** Unexpected end of flow-mode */

exports.DOCUMENT = DOCUMENT;
const FLOW_END = '\x18'; // C0: Cancel

/** Next token is a scalar value */

exports.FLOW_END = FLOW_END;
const SCALAR = '\x1f'; // C0: Unit Separator

/** @returns `true` if `token` is a flow or block collection */

exports.SCALAR = SCALAR;

const isCollection = token => !!token && 'items' in token;
/** @returns `true` if `token` is a flow or block scalar; not an alias */


exports.isCollection = isCollection;

const isScalar = token => !!token && (token.type === 'scalar' || token.type === 'single-quoted-scalar' || token.type === 'double-quoted-scalar' || token.type === 'block-scalar');
/* istanbul ignore next */

/** Get a printable representation of a lexer token */


exports.isScalar = isScalar;

function prettyToken(token) {
  switch (token) {
    case BOM:
      return '<BOM>';

    case DOCUMENT:
      return '<DOC>';

    case FLOW_END:
      return '<FLOW_END>';

    case SCALAR:
      return '<SCALAR>';

    default:
      return JSON.stringify(token);
  }
}
/** Identify the type of a lexer token. May return `null` for unknown tokens. */


function tokenType(source) {
  switch (source) {
    case BOM:
      return 'byte-order-mark';

    case DOCUMENT:
      return 'doc-mode';

    case FLOW_END:
      return 'flow-error-end';

    case SCALAR:
      return 'scalar';

    case '---':
      return 'doc-start';

    case '...':
      return 'doc-end';

    case '':
    case '\n':
    case '\r\n':
      return 'newline';

    case '-':
      return 'seq-item-ind';

    case '?':
      return 'explicit-key-ind';

    case ':':
      return 'map-value-ind';

    case '{':
      return 'flow-map-start';

    case '}':
      return 'flow-map-end';

    case '[':
      return 'flow-seq-start';

    case ']':
      return 'flow-seq-end';

    case ',':
      return 'comma';
  }

  switch (source[0]) {
    case ' ':
    case '\t':
      return 'space';

    case '#':
      return 'comment';

    case '%':
      return 'directive-line';

    case '*':
      return 'alias';

    case '&':
      return 'anchor';

    case '!':
      return 'tag';

    case "'":
      return 'single-quoted-scalar';

    case '"':
      return 'double-quoted-scalar';

    case '|':
    case '>':
      return 'block-scalar-header';
  }

  return null;
}

},{"./cst-scalar.js":86,"./cst-stringify.js":87,"./cst-visit.js":88}],90:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Lexer = void 0;

var _cst = require("./cst.js");

/*
START -> stream

stream
  directive -> line-end -> stream
  indent + line-end -> stream
  [else] -> line-start

line-end
  comment -> line-end
  newline -> .
  input-end -> END

line-start
  doc-start -> doc
  doc-end -> stream
  [else] -> indent -> block-start

block-start
  seq-item-start -> block-start
  explicit-key-start -> block-start
  map-value-start -> block-start
  [else] -> doc

doc
  line-end -> line-start
  spaces -> doc
  anchor -> doc
  tag -> doc
  flow-start -> flow -> doc
  flow-end -> error -> doc
  seq-item-start -> error -> doc
  explicit-key-start -> error -> doc
  map-value-start -> doc
  alias -> doc
  quote-start -> quoted-scalar -> doc
  block-scalar-header -> line-end -> block-scalar(min) -> line-start
  [else] -> plain-scalar(false, min) -> doc

flow
  line-end -> flow
  spaces -> flow
  anchor -> flow
  tag -> flow
  flow-start -> flow -> flow
  flow-end -> .
  seq-item-start -> error -> flow
  explicit-key-start -> flow
  map-value-start -> flow
  alias -> flow
  quote-start -> quoted-scalar -> flow
  comma -> flow
  [else] -> plain-scalar(true, 0) -> flow

quoted-scalar
  quote-end -> .
  [else] -> quoted-scalar

block-scalar(min)
  newline + peek(indent < min) -> .
  [else] -> block-scalar(min)

plain-scalar(is-flow, min)
  scalar-end(is-flow) -> .
  peek(newline + (indent < min)) -> .
  [else] -> plain-scalar(min)
*/
function isEmpty(ch) {
  switch (ch) {
    case undefined:
    case ' ':
    case '\n':
    case '\r':
    case '\t':
      return true;

    default:
      return false;
  }
}

const hexDigits = '0123456789ABCDEFabcdef'.split('');
const tagChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()".split('');
const invalidFlowScalarChars = ',[]{}'.split('');
const invalidAnchorChars = ' ,[]{}\n\r\t'.split('');

const isNotAnchorChar = ch => !ch || invalidAnchorChars.includes(ch);
/**
 * Splits an input string into lexical tokens, i.e. smaller strings that are
 * easily identifiable by `tokens.tokenType()`.
 *
 * Lexing starts always in a "stream" context. Incomplete input may be buffered
 * until a complete token can be emitted.
 *
 * In addition to slices of the original input, the following control characters
 * may also be emitted:
 *
 * - `\x02` (Start of Text): A document starts with the next token
 * - `\x18` (Cancel): Unexpected end of flow-mode (indicates an error)
 * - `\x1f` (Unit Separator): Next token is a scalar value
 * - `\u{FEFF}` (Byte order mark): Emitted separately outside documents
 */


class Lexer {
  constructor() {
    /**
     * Flag indicating whether the end of the current buffer marks the end of
     * all input
     */
    this.atEnd = false;
    /**
     * Explicit indent set in block scalar header, as an offset from the current
     * minimum indent, so e.g. set to 1 from a header `|2+`. Set to -1 if not
     * explicitly set.
     */

    this.blockScalarIndent = -1;
    /**
     * Block scalars that include a + (keep) chomping indicator in their header
     * include trailing empty lines, which are otherwise excluded from the
     * scalar's contents.
     */

    this.blockScalarKeep = false;
    /** Current input */

    this.buffer = '';
    /**
     * Flag noting whether the map value indicator : can immediately follow this
     * node within a flow context.
     */

    this.flowKey = false;
    /** Count of surrounding flow collection levels. */

    this.flowLevel = 0;
    /**
     * Minimum level of indentation required for next lines to be parsed as a
     * part of the current scalar value.
     */

    this.indentNext = 0;
    /** Indentation level of the current line. */

    this.indentValue = 0;
    /** Position of the next \n character. */

    this.lineEndPos = null;
    /** Stores the state of the lexer if reaching the end of incpomplete input */

    this.next = null;
    /** A pointer to `buffer`; the current position of the lexer. */

    this.pos = 0;
  }
  /**
   * Generate YAML tokens from the `source` string. If `incomplete`,
   * a part of the last line may be left as a buffer for the next call.
   *
   * @returns A generator of lexical tokens
   */


  *lex(source, incomplete = false) {
    if (source) {
      this.buffer = this.buffer ? this.buffer + source : source;
      this.lineEndPos = null;
    }

    this.atEnd = !incomplete;
    let next = this.next || 'stream';

    while (next && (incomplete || this.hasChars(1))) next = yield* this.parseNext(next);
  }

  atLineEnd() {
    let i = this.pos;
    let ch = this.buffer[i];

    while (ch === ' ' || ch === '\t') ch = this.buffer[++i];

    if (!ch || ch === '#' || ch === '\n') return true;
    if (ch === '\r') return this.buffer[i + 1] === '\n';
    return false;
  }

  charAt(n) {
    return this.buffer[this.pos + n];
  }

  continueScalar(offset) {
    let ch = this.buffer[offset];

    if (this.indentNext > 0) {
      let indent = 0;

      while (ch === ' ') ch = this.buffer[++indent + offset];

      if (ch === '\r') {
        const next = this.buffer[indent + offset + 1];
        if (next === '\n' || !next && !this.atEnd) return offset + indent + 1;
      }

      return ch === '\n' || indent >= this.indentNext || !ch && !this.atEnd ? offset + indent : -1;
    }

    if (ch === '-' || ch === '.') {
      const dt = this.buffer.substr(offset, 3);
      if ((dt === '---' || dt === '...') && isEmpty(this.buffer[offset + 3])) return -1;
    }

    return offset;
  }

  getLine() {
    let end = this.lineEndPos;

    if (typeof end !== 'number' || end !== -1 && end < this.pos) {
      end = this.buffer.indexOf('\n', this.pos);
      this.lineEndPos = end;
    }

    if (end === -1) return this.atEnd ? this.buffer.substring(this.pos) : null;
    if (this.buffer[end - 1] === '\r') end -= 1;
    return this.buffer.substring(this.pos, end);
  }

  hasChars(n) {
    return this.pos + n <= this.buffer.length;
  }

  setNext(state) {
    this.buffer = this.buffer.substring(this.pos);
    this.pos = 0;
    this.lineEndPos = null;
    this.next = state;
    return null;
  }

  peek(n) {
    return this.buffer.substr(this.pos, n);
  }

  *parseNext(next) {
    switch (next) {
      case 'stream':
        return yield* this.parseStream();

      case 'line-start':
        return yield* this.parseLineStart();

      case 'block-start':
        return yield* this.parseBlockStart();

      case 'doc':
        return yield* this.parseDocument();

      case 'flow':
        return yield* this.parseFlowCollection();

      case 'quoted-scalar':
        return yield* this.parseQuotedScalar();

      case 'block-scalar':
        return yield* this.parseBlockScalar();

      case 'plain-scalar':
        return yield* this.parsePlainScalar();
    }
  }

  *parseStream() {
    let line = this.getLine();
    if (line === null) return this.setNext('stream');

    if (line[0] === _cst.BOM) {
      yield* this.pushCount(1);
      line = line.substring(1);
    }

    if (line[0] === '%') {
      let dirEnd = line.length;
      const cs = line.indexOf('#');

      if (cs !== -1) {
        const ch = line[cs - 1];
        if (ch === ' ' || ch === '\t') dirEnd = cs - 1;
      }

      while (true) {
        const ch = line[dirEnd - 1];
        if (ch === ' ' || ch === '\t') dirEnd -= 1;else break;
      }

      const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
      yield* this.pushCount(line.length - n); // possible comment

      this.pushNewline();
      return 'stream';
    }

    if (this.atLineEnd()) {
      const sp = yield* this.pushSpaces(true);
      yield* this.pushCount(line.length - sp);
      yield* this.pushNewline();
      return 'stream';
    }

    yield _cst.DOCUMENT;
    return yield* this.parseLineStart();
  }

  *parseLineStart() {
    const ch = this.charAt(0);
    if (!ch && !this.atEnd) return this.setNext('line-start');

    if (ch === '-' || ch === '.') {
      if (!this.atEnd && !this.hasChars(4)) return this.setNext('line-start');
      const s = this.peek(3);

      if (s === '---' && isEmpty(this.charAt(3))) {
        yield* this.pushCount(3);
        this.indentValue = 0;
        this.indentNext = 0;
        return 'doc';
      } else if (s === '...' && isEmpty(this.charAt(3))) {
        yield* this.pushCount(3);
        return 'stream';
      }
    }

    this.indentValue = yield* this.pushSpaces(false);
    if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1))) this.indentNext = this.indentValue;
    return yield* this.parseBlockStart();
  }

  *parseBlockStart() {
    const [ch0, ch1] = this.peek(2);
    if (!ch1 && !this.atEnd) return this.setNext('block-start');

    if ((ch0 === '-' || ch0 === '?' || ch0 === ':') && isEmpty(ch1)) {
      const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
      this.indentNext = this.indentValue + 1;
      this.indentValue += n;
      return yield* this.parseBlockStart();
    }

    return 'doc';
  }

  *parseDocument() {
    yield* this.pushSpaces(true);
    const line = this.getLine();
    if (line === null) return this.setNext('doc');
    let n = yield* this.pushIndicators();

    switch (line[n]) {
      case '#':
        yield* this.pushCount(line.length - n);
      // fallthrough

      case undefined:
        yield* this.pushNewline();
        return yield* this.parseLineStart();

      case '{':
      case '[':
        yield* this.pushCount(1);
        this.flowKey = false;
        this.flowLevel = 1;
        return 'flow';

      case '}':
      case ']':
        // this is an error
        yield* this.pushCount(1);
        return 'doc';

      case '*':
        yield* this.pushUntil(isNotAnchorChar);
        return 'doc';

      case '"':
      case "'":
        return yield* this.parseQuotedScalar();

      case '|':
      case '>':
        n += yield* this.parseBlockScalarHeader();
        n += yield* this.pushSpaces(true);
        yield* this.pushCount(line.length - n);
        yield* this.pushNewline();
        return yield* this.parseBlockScalar();

      default:
        return yield* this.parsePlainScalar();
    }
  }

  *parseFlowCollection() {
    let nl, sp;
    let indent = -1;

    do {
      nl = yield* this.pushNewline();
      sp = yield* this.pushSpaces(true);
      if (nl > 0) this.indentValue = indent = sp;
    } while (nl + sp > 0);

    const line = this.getLine();
    if (line === null) return this.setNext('flow');

    if (indent !== -1 && indent < this.indentNext && line[0] !== '#' || indent === 0 && (line.startsWith('---') || line.startsWith('...')) && isEmpty(line[3])) {
      // Allowing for the terminal ] or } at the same (rather than greater)
      // indent level as the initial [ or { is technically invalid, but
      // failing here would be surprising to users.
      const atFlowEndMarker = indent === this.indentNext - 1 && this.flowLevel === 1 && (line[0] === ']' || line[0] === '}');

      if (!atFlowEndMarker) {
        // this is an error
        this.flowLevel = 0;
        yield _cst.FLOW_END;
        return yield* this.parseLineStart();
      }
    }

    let n = 0;

    while (line[n] === ',') {
      n += yield* this.pushCount(1);
      n += yield* this.pushSpaces(true);
      this.flowKey = false;
    }

    n += yield* this.pushIndicators();

    switch (line[n]) {
      case undefined:
        return 'flow';

      case '#':
        yield* this.pushCount(line.length - n);
        return 'flow';

      case '{':
      case '[':
        yield* this.pushCount(1);
        this.flowKey = false;
        this.flowLevel += 1;
        return 'flow';

      case '}':
      case ']':
        yield* this.pushCount(1);
        this.flowKey = true;
        this.flowLevel -= 1;
        return this.flowLevel ? 'flow' : 'doc';

      case '*':
        yield* this.pushUntil(isNotAnchorChar);
        return 'flow';

      case '"':
      case "'":
        this.flowKey = true;
        return yield* this.parseQuotedScalar();

      case ':':
        {
          const next = this.charAt(1);

          if (this.flowKey || isEmpty(next) || next === ',') {
            yield* this.pushCount(1);
            yield* this.pushSpaces(true);
            return 'flow';
          }
        }
      // fallthrough

      default:
        this.flowKey = false;
        return yield* this.parsePlainScalar();
    }
  }

  *parseQuotedScalar() {
    const quote = this.charAt(0);
    let end = this.buffer.indexOf(quote, this.pos + 1);

    if (quote === "'") {
      while (end !== -1 && this.buffer[end + 1] === "'") end = this.buffer.indexOf("'", end + 2);
    } else {
      // double-quote
      while (end !== -1) {
        let n = 0;

        while (this.buffer[end - 1 - n] === '\\') n += 1;

        if (n % 2 === 0) break;
        end = this.buffer.indexOf('"', end + 1);
      }
    } // Only looking for newlines within the quotes


    const qb = this.buffer.substring(0, end);
    let nl = qb.indexOf('\n', this.pos);

    if (nl !== -1) {
      while (nl !== -1) {
        const cs = this.continueScalar(nl + 1);
        if (cs === -1) break;
        nl = qb.indexOf('\n', cs);
      }

      if (nl !== -1) {
        // this is an error caused by an unexpected unindent
        end = nl - (qb[nl - 1] === '\r' ? 2 : 1);
      }
    }

    if (end === -1) {
      if (!this.atEnd) return this.setNext('quoted-scalar');
      end = this.buffer.length;
    }

    yield* this.pushToIndex(end + 1, false);
    return this.flowLevel ? 'flow' : 'doc';
  }

  *parseBlockScalarHeader() {
    this.blockScalarIndent = -1;
    this.blockScalarKeep = false;
    let i = this.pos;

    while (true) {
      const ch = this.buffer[++i];
      if (ch === '+') this.blockScalarKeep = true;else if (ch > '0' && ch <= '9') this.blockScalarIndent = Number(ch) - 1;else if (ch !== '-') break;
    }

    return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');
  }

  *parseBlockScalar() {
    let nl = this.pos - 1; // may be -1 if this.pos === 0

    let indent = 0;
    let ch;

    loop: for (let i = this.pos; ch = this.buffer[i]; ++i) {
      switch (ch) {
        case ' ':
          indent += 1;
          break;

        case '\n':
          nl = i;
          indent = 0;
          break;

        case '\r':
          {
            const next = this.buffer[i + 1];
            if (!next && !this.atEnd) return this.setNext('block-scalar');
            if (next === '\n') break;
          }
        // fallthrough

        default:
          break loop;
      }
    }

    if (!ch && !this.atEnd) return this.setNext('block-scalar');

    if (indent >= this.indentNext) {
      if (this.blockScalarIndent === -1) this.indentNext = indent;else this.indentNext += this.blockScalarIndent;

      do {
        const cs = this.continueScalar(nl + 1);
        if (cs === -1) break;
        nl = this.buffer.indexOf('\n', cs);
      } while (nl !== -1);

      if (nl === -1) {
        if (!this.atEnd) return this.setNext('block-scalar');
        nl = this.buffer.length;
      }
    }

    if (!this.blockScalarKeep) {
      do {
        let i = nl - 1;
        let ch = this.buffer[i];
        if (ch === '\r') ch = this.buffer[--i];

        while (ch === ' ' || ch === '\t') ch = this.buffer[--i];

        if (ch === '\n' && i >= this.pos) nl = i;else break;
      } while (true);
    }

    yield _cst.SCALAR;
    yield* this.pushToIndex(nl + 1, true);
    return yield* this.parseLineStart();
  }

  *parsePlainScalar() {
    const inFlow = this.flowLevel > 0;
    let end = this.pos - 1;
    let i = this.pos - 1;
    let ch;

    while (ch = this.buffer[++i]) {
      if (ch === ':') {
        const next = this.buffer[i + 1];
        if (isEmpty(next) || inFlow && next === ',') break;
        end = i;
      } else if (isEmpty(ch)) {
        let next = this.buffer[i + 1];

        if (ch === '\r') {
          if (next === '\n') {
            i += 1;
            ch = '\n';
            next = this.buffer[i + 1];
          } else end = i;
        }

        if (next === '#' || inFlow && invalidFlowScalarChars.includes(next)) break;

        if (ch === '\n') {
          const cs = this.continueScalar(i + 1);
          if (cs === -1) break;
          i = Math.max(i, cs - 2); // to advance, but still account for ' #'
        }
      } else {
        if (inFlow && invalidFlowScalarChars.includes(ch)) break;
        end = i;
      }
    }

    if (!ch && !this.atEnd) return this.setNext('plain-scalar');
    yield _cst.SCALAR;
    yield* this.pushToIndex(end + 1, true);
    return inFlow ? 'flow' : 'doc';
  }

  *pushCount(n) {
    if (n > 0) {
      yield this.buffer.substr(this.pos, n);
      this.pos += n;
      return n;
    }

    return 0;
  }

  *pushToIndex(i, allowEmpty) {
    const s = this.buffer.slice(this.pos, i);

    if (s) {
      yield s;
      this.pos += s.length;
      return s.length;
    } else if (allowEmpty) yield '';

    return 0;
  }

  *pushIndicators() {
    switch (this.charAt(0)) {
      case '!':
        return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());

      case '&':
        return (yield* this.pushUntil(isNotAnchorChar)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());

      case ':':
      case '?': // this is an error outside flow collections

      case '-':
        // this is an error
        if (isEmpty(this.charAt(1))) {
          if (this.flowLevel === 0) this.indentNext = this.indentValue + 1;
          return (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
        }

    }

    return 0;
  }

  *pushTag() {
    if (this.charAt(1) === '<') {
      let i = this.pos + 2;
      let ch = this.buffer[i];

      while (!isEmpty(ch) && ch !== '>') ch = this.buffer[++i];

      return yield* this.pushToIndex(ch === '>' ? i + 1 : i, false);
    } else {
      let i = this.pos + 1;
      let ch = this.buffer[i];

      while (ch) {
        if (tagChars.includes(ch)) ch = this.buffer[++i];else if (ch === '%' && hexDigits.includes(this.buffer[i + 1]) && hexDigits.includes(this.buffer[i + 2])) {
          ch = this.buffer[i += 3];
        } else break;
      }

      return yield* this.pushToIndex(i, false);
    }
  }

  *pushNewline() {
    const ch = this.buffer[this.pos];
    if (ch === '\n') return yield* this.pushCount(1);else if (ch === '\r' && this.charAt(1) === '\n') return yield* this.pushCount(2);else return 0;
  }

  *pushSpaces(allowTabs) {
    let i = this.pos - 1;
    let ch;

    do {
      ch = this.buffer[++i];
    } while (ch === ' ' || allowTabs && ch === '\t');

    const n = i - this.pos;

    if (n > 0) {
      yield this.buffer.substr(this.pos, n);
      this.pos = i;
    }

    return n;
  }

  *pushUntil(test) {
    let i = this.pos;
    let ch = this.buffer[i];

    while (!test(ch)) ch = this.buffer[++i];

    return yield* this.pushToIndex(i, false);
  }

}

exports.Lexer = Lexer;

},{"./cst.js":89}],91:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineCounter = void 0;

/**
 * Tracks newlines during parsing in order to provide an efficient API for
 * determining the one-indexed `{ line, col }` position for any offset
 * within the input.
 */
class LineCounter {
  constructor() {
    this.lineStarts = [];
    /**
     * Should be called in ascending order. Otherwise, call
     * `lineCounter.lineStarts.sort()` before calling `linePos()`.
     */

    this.addNewLine = offset => this.lineStarts.push(offset);
    /**
     * Performs a binary search and returns the 1-indexed { line, col }
     * position of `offset`. If `line === 0`, `addNewLine` has never been
     * called or `offset` is before the first known newline.
     */


    this.linePos = offset => {
      let low = 0;
      let high = this.lineStarts.length;

      while (low < high) {
        const mid = low + high >> 1; // Math.floor((low + high) / 2)

        if (this.lineStarts[mid] < offset) low = mid + 1;else high = mid;
      }

      if (this.lineStarts[low] === offset) return {
        line: low + 1,
        col: 1
      };
      if (low === 0) return {
        line: 0,
        col: offset
      };
      const start = this.lineStarts[low - 1];
      return {
        line: low,
        col: offset - start + 1
      };
    };
  }

}

exports.LineCounter = LineCounter;

},{}],92:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Parser = void 0;

var _cst = require("./cst.js");

var _lexer = require("./lexer.js");

function includesToken(list, type) {
  for (let i = 0; i < list.length; ++i) if (list[i].type === type) return true;

  return false;
}

function includesNonEmpty(list) {
  for (let i = 0; i < list.length; ++i) {
    switch (list[i].type) {
      case 'space':
      case 'comment':
      case 'newline':
        break;

      default:
        return true;
    }
  }

  return false;
}

function isFlowToken(token) {
  switch (token === null || token === void 0 ? void 0 : token.type) {
    case 'alias':
    case 'scalar':
    case 'single-quoted-scalar':
    case 'double-quoted-scalar':
    case 'flow-collection':
      return true;

    default:
      return false;
  }
}

function getPrevProps(parent) {
  switch (parent.type) {
    case 'document':
      return parent.start;

    case 'block-map':
      {
        const it = parent.items[parent.items.length - 1];
        return it.sep || it.start;
      }

    case 'block-seq':
      return parent.items[parent.items.length - 1].start;

    /* istanbul ignore next should not happen */

    default:
      return [];
  }
}
/** Note: May modify input array */


function getFirstKeyStartProps(prev) {
  var _a;

  if (prev.length === 0) return [];
  let i = prev.length;

  loop: while (--i >= 0) {
    switch (prev[i].type) {
      case 'doc-start':
      case 'explicit-key-ind':
      case 'map-value-ind':
      case 'seq-item-ind':
      case 'newline':
        break loop;
    }
  }

  while (((_a = prev[++i]) === null || _a === void 0 ? void 0 : _a.type) === 'space') {
    /* loop */
  }

  return prev.splice(i, prev.length);
}

function fixFlowSeqItems(fc) {
  if (fc.start.type === 'flow-seq-start') {
    for (const it of fc.items) {
      if (it.sep && !it.value && !includesToken(it.start, 'explicit-key-ind') && !includesToken(it.sep, 'map-value-ind')) {
        if (it.key) it.value = it.key;
        delete it.key;

        if (isFlowToken(it.value)) {
          if (it.value.end) Array.prototype.push.apply(it.value.end, it.sep);else it.value.end = it.sep;
        } else Array.prototype.push.apply(it.start, it.sep);

        delete it.sep;
      }
    }
  }
}
/**
 * A YAML concrete syntax tree (CST) parser
 *
 * ```ts
 * const src: string = ...
 * for (const token of new Parser().parse(src)) {
 *   // token: Token
 * }
 * ```
 *
 * To use the parser with a user-provided lexer:
 *
 * ```ts
 * function* parse(source: string, lexer: Lexer) {
 *   const parser = new Parser()
 *   for (const lexeme of lexer.lex(source))
 *     yield* parser.next(lexeme)
 *   yield* parser.end()
 * }
 *
 * const src: string = ...
 * const lexer = new Lexer()
 * for (const token of parse(src, lexer)) {
 *   // token: Token
 * }
 * ```
 */


class Parser {
  /**
   * @param onNewLine - If defined, called separately with the start position of
   *   each new line (in `parse()`, including the start of input).
   */
  constructor(onNewLine) {
    /** If true, space and sequence indicators count as indentation */
    this.atNewLine = true;
    /** If true, next token is a scalar value */

    this.atScalar = false;
    /** Current indentation level */

    this.indent = 0;
    /** Current offset since the start of parsing */

    this.offset = 0;
    /** On the same line with a block map key */

    this.onKeyLine = false;
    /** Top indicates the node that's currently being built */

    this.stack = [];
    /** The source of the current token, set in parse() */

    this.source = '';
    /** The type of the current token, set in parse() */

    this.type = ''; // Must be defined after `next()`

    this.lexer = new _lexer.Lexer();
    this.onNewLine = onNewLine;
  }
  /**
   * Parse `source` as a YAML stream.
   * If `incomplete`, a part of the last line may be left as a buffer for the next call.
   *
   * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
   *
   * @returns A generator of tokens representing each directive, document, and other structure.
   */


  *parse(source, incomplete = false) {
    if (this.onNewLine && this.offset === 0) this.onNewLine(0);

    for (const lexeme of this.lexer.lex(source, incomplete)) yield* this.next(lexeme);

    if (!incomplete) yield* this.end();
  }
  /**
   * Advance the parser by the `source` of one lexical token.
   */


  *next(source) {
    this.source = source;

    if (this.atScalar) {
      this.atScalar = false;
      yield* this.step();
      this.offset += source.length;
      return;
    }

    const type = (0, _cst.tokenType)(source);

    if (!type) {
      const message = `Not a YAML token: ${source}`;
      yield* this.pop({
        type: 'error',
        offset: this.offset,
        message,
        source
      });
      this.offset += source.length;
    } else if (type === 'scalar') {
      this.atNewLine = false;
      this.atScalar = true;
      this.type = 'scalar';
    } else {
      this.type = type;
      yield* this.step();

      switch (type) {
        case 'newline':
          this.atNewLine = true;
          this.indent = 0;
          if (this.onNewLine) this.onNewLine(this.offset + source.length);
          break;

        case 'space':
          if (this.atNewLine && source[0] === ' ') this.indent += source.length;
          break;

        case 'explicit-key-ind':
        case 'map-value-ind':
        case 'seq-item-ind':
          if (this.atNewLine) this.indent += source.length;
          break;

        case 'doc-mode':
          return;

        default:
          this.atNewLine = false;
      }

      this.offset += source.length;
    }
  }
  /** Call at end of input to push out any remaining constructions */


  *end() {
    while (this.stack.length > 0) yield* this.pop();
  }

  get sourceToken() {
    const st = {
      type: this.type,
      offset: this.offset,
      indent: this.indent,
      source: this.source
    };
    return st;
  }

  *step() {
    const top = this.peek(1);

    if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {
      while (this.stack.length > 0) yield* this.pop();

      this.stack.push({
        type: 'doc-end',
        offset: this.offset,
        source: this.source
      });
      return;
    }

    if (!top) return yield* this.stream();

    switch (top.type) {
      case 'document':
        return yield* this.document(top);

      case 'alias':
      case 'scalar':
      case 'single-quoted-scalar':
      case 'double-quoted-scalar':
        return yield* this.scalar(top);

      case 'block-scalar':
        return yield* this.blockScalar(top);

      case 'block-map':
        return yield* this.blockMap(top);

      case 'block-seq':
        return yield* this.blockSequence(top);

      case 'flow-collection':
        return yield* this.flowCollection(top);

      case 'doc-end':
        return yield* this.documentEnd(top);
    }
    /* istanbul ignore next should not happen */


    yield* this.pop();
  }

  peek(n) {
    return this.stack[this.stack.length - n];
  }

  *pop(error) {
    const token = error || this.stack.pop();
    /* istanbul ignore if should not happen */

    if (!token) {
      const message = 'Tried to pop an empty stack';
      yield {
        type: 'error',
        offset: this.offset,
        source: '',
        message
      };
    } else if (this.stack.length === 0) {
      yield token;
    } else {
      const top = this.peek(1); // For these, parent indent is needed instead of own

      if (token.type === 'block-scalar' || token.type === 'flow-collection') token.indent = 'indent' in top ? top.indent : -1;
      if (token.type === 'flow-collection') fixFlowSeqItems(token);

      switch (top.type) {
        case 'document':
          top.value = token;
          break;

        case 'block-scalar':
          top.props.push(token); // error

          break;

        case 'block-map':
          {
            const it = top.items[top.items.length - 1];

            if (it.value) {
              top.items.push({
                start: [],
                key: token,
                sep: []
              });
              this.onKeyLine = true;
              return;
            } else if (it.sep) {
              it.value = token;
            } else {
              Object.assign(it, {
                key: token,
                sep: []
              });
              this.onKeyLine = !includesToken(it.start, 'explicit-key-ind');
              return;
            }

            break;
          }

        case 'block-seq':
          {
            const it = top.items[top.items.length - 1];
            if (it.value) top.items.push({
              start: [],
              value: token
            });else it.value = token;
            break;
          }

        case 'flow-collection':
          {
            const it = top.items[top.items.length - 1];
            if (!it || it.value) top.items.push({
              start: [],
              key: token,
              sep: []
            });else if (it.sep) it.value = token;else Object.assign(it, {
              key: token,
              sep: []
            });
            return;
          }

        /* istanbul ignore next should not happen */

        default:
          yield* this.pop();
          yield* this.pop(token);
      }

      if ((top.type === 'document' || top.type === 'block-map' || top.type === 'block-seq') && (token.type === 'block-map' || token.type === 'block-seq')) {
        const last = token.items[token.items.length - 1];

        if (last && !last.sep && !last.value && last.start.length > 0 && !includesNonEmpty(last.start) && (token.indent === 0 || last.start.every(st => st.type !== 'comment' || st.indent < token.indent))) {
          if (top.type === 'document') top.end = last.start;else top.items.push({
            start: last.start
          });
          token.items.splice(-1, 1);
        }
      }
    }
  }

  *stream() {
    switch (this.type) {
      case 'directive-line':
        yield {
          type: 'directive',
          offset: this.offset,
          source: this.source
        };
        return;

      case 'byte-order-mark':
      case 'space':
      case 'comment':
      case 'newline':
        yield this.sourceToken;
        return;

      case 'doc-mode':
      case 'doc-start':
        {
          const doc = {
            type: 'document',
            offset: this.offset,
            start: []
          };
          if (this.type === 'doc-start') doc.start.push(this.sourceToken);
          this.stack.push(doc);
          return;
        }
    }

    yield {
      type: 'error',
      offset: this.offset,
      message: `Unexpected ${this.type} token in YAML stream`,
      source: this.source
    };
  }

  *document(doc) {
    if (doc.value) return yield* this.lineEnd(doc);

    switch (this.type) {
      case 'doc-start':
        {
          if (includesNonEmpty(doc.start)) {
            yield* this.pop();
            yield* this.step();
          } else doc.start.push(this.sourceToken);

          return;
        }

      case 'anchor':
      case 'tag':
      case 'space':
      case 'comment':
      case 'newline':
        doc.start.push(this.sourceToken);
        return;
    }

    const bv = this.startBlockValue(doc);
    if (bv) this.stack.push(bv);else {
      yield {
        type: 'error',
        offset: this.offset,
        message: `Unexpected ${this.type} token in YAML document`,
        source: this.source
      };
    }
  }

  *scalar(scalar) {
    if (this.type === 'map-value-ind') {
      const prev = getPrevProps(this.peek(2));
      const start = getFirstKeyStartProps(prev);
      let sep;

      if (scalar.end) {
        sep = scalar.end;
        sep.push(this.sourceToken);
        delete scalar.end;
      } else sep = [this.sourceToken];

      const map = {
        type: 'block-map',
        offset: scalar.offset,
        indent: scalar.indent,
        items: [{
          start,
          key: scalar,
          sep
        }]
      };
      this.onKeyLine = true;
      this.stack[this.stack.length - 1] = map;
    } else yield* this.lineEnd(scalar);
  }

  *blockScalar(scalar) {
    switch (this.type) {
      case 'space':
      case 'comment':
      case 'newline':
        scalar.props.push(this.sourceToken);
        return;

      case 'scalar':
        scalar.source = this.source; // block-scalar source includes trailing newline

        this.atNewLine = true;
        this.indent = 0;

        if (this.onNewLine) {
          let nl = this.source.indexOf('\n') + 1;

          while (nl !== 0) {
            this.onNewLine(this.offset + nl);
            nl = this.source.indexOf('\n', nl) + 1;
          }
        }

        yield* this.pop();
        break;

      /* istanbul ignore next should not happen */

      default:
        yield* this.pop();
        yield* this.step();
    }
  }

  *blockMap(map) {
    var _a;

    const it = map.items[map.items.length - 1]; // it.sep is true-ish if pair already has key or : separator

    switch (this.type) {
      case 'newline':
        this.onKeyLine = false;

        if (it.value) {
          const end = 'end' in it.value ? it.value.end : undefined;
          const last = Array.isArray(end) ? end[end.length - 1] : undefined;
          if ((last === null || last === void 0 ? void 0 : last.type) === 'comment') end === null || end === void 0 ? void 0 : end.push(this.sourceToken);else map.items.push({
            start: [this.sourceToken]
          });
        } else if (it.sep) it.sep.push(this.sourceToken);else it.start.push(this.sourceToken);

        return;

      case 'space':
      case 'comment':
        if (it.value) map.items.push({
          start: [this.sourceToken]
        });else if (it.sep) it.sep.push(this.sourceToken);else {
          if (this.atIndentedComment(it.start, map.indent)) {
            const prev = map.items[map.items.length - 2];
            const end = (_a = prev === null || prev === void 0 ? void 0 : prev.value) === null || _a === void 0 ? void 0 : _a.end;

            if (Array.isArray(end)) {
              Array.prototype.push.apply(end, it.start);
              end.push(this.sourceToken);
              map.items.pop();
              return;
            }
          }

          it.start.push(this.sourceToken);
        }
        return;
    }

    if (this.indent >= map.indent) {
      const atNextItem = !this.onKeyLine && this.indent === map.indent && (it.sep || includesNonEmpty(it.start));

      switch (this.type) {
        case 'anchor':
        case 'tag':
          if (atNextItem || it.value) {
            map.items.push({
              start: [this.sourceToken]
            });
            this.onKeyLine = true;
          } else if (it.sep) it.sep.push(this.sourceToken);else it.start.push(this.sourceToken);

          return;

        case 'explicit-key-ind':
          if (!it.sep && !includesToken(it.start, 'explicit-key-ind')) it.start.push(this.sourceToken);else if (atNextItem || it.value) map.items.push({
            start: [this.sourceToken]
          });else this.stack.push({
            type: 'block-map',
            offset: this.offset,
            indent: this.indent,
            items: [{
              start: [this.sourceToken]
            }]
          });
          this.onKeyLine = true;
          return;

        case 'map-value-ind':
          if (!it.sep) Object.assign(it, {
            key: null,
            sep: [this.sourceToken]
          });else if (it.value || atNextItem && !includesToken(it.start, 'explicit-key-ind')) map.items.push({
            start: [],
            key: null,
            sep: [this.sourceToken]
          });else if (includesToken(it.sep, 'map-value-ind')) this.stack.push({
            type: 'block-map',
            offset: this.offset,
            indent: this.indent,
            items: [{
              start: [],
              key: null,
              sep: [this.sourceToken]
            }]
          });else if (includesToken(it.start, 'explicit-key-ind') && isFlowToken(it.key) && !includesToken(it.sep, 'newline')) {
            const start = getFirstKeyStartProps(it.start);
            const key = it.key;
            const sep = it.sep;
            sep.push(this.sourceToken); // @ts-ignore type guard is wrong here

            delete it.key, delete it.sep;
            this.stack.push({
              type: 'block-map',
              offset: this.offset,
              indent: this.indent,
              items: [{
                start,
                key,
                sep
              }]
            });
          } else it.sep.push(this.sourceToken);
          this.onKeyLine = true;
          return;

        case 'alias':
        case 'scalar':
        case 'single-quoted-scalar':
        case 'double-quoted-scalar':
          {
            const fs = this.flowScalar(this.type);

            if (atNextItem || it.value) {
              map.items.push({
                start: [],
                key: fs,
                sep: []
              });
              this.onKeyLine = true;
            } else if (it.sep) {
              this.stack.push(fs);
            } else {
              Object.assign(it, {
                key: fs,
                sep: []
              });
              this.onKeyLine = true;
            }

            return;
          }

        default:
          {
            const bv = this.startBlockValue(map);

            if (bv) {
              if (atNextItem && bv.type !== 'block-seq' && includesToken(it.start, 'explicit-key-ind')) map.items.push({
                start: []
              });
              this.stack.push(bv);
              return;
            }
          }
      }
    }

    yield* this.pop();
    yield* this.step();
  }

  *blockSequence(seq) {
    var _a;

    const it = seq.items[seq.items.length - 1];

    switch (this.type) {
      case 'newline':
        if (it.value) {
          const end = 'end' in it.value ? it.value.end : undefined;
          const last = Array.isArray(end) ? end[end.length - 1] : undefined;
          if ((last === null || last === void 0 ? void 0 : last.type) === 'comment') end === null || end === void 0 ? void 0 : end.push(this.sourceToken);else seq.items.push({
            start: [this.sourceToken]
          });
        } else it.start.push(this.sourceToken);

        return;

      case 'space':
      case 'comment':
        if (it.value) seq.items.push({
          start: [this.sourceToken]
        });else {
          if (this.atIndentedComment(it.start, seq.indent)) {
            const prev = seq.items[seq.items.length - 2];
            const end = (_a = prev === null || prev === void 0 ? void 0 : prev.value) === null || _a === void 0 ? void 0 : _a.end;

            if (Array.isArray(end)) {
              Array.prototype.push.apply(end, it.start);
              end.push(this.sourceToken);
              seq.items.pop();
              return;
            }
          }

          it.start.push(this.sourceToken);
        }
        return;

      case 'anchor':
      case 'tag':
        if (it.value || this.indent <= seq.indent) break;
        it.start.push(this.sourceToken);
        return;

      case 'seq-item-ind':
        if (this.indent !== seq.indent) break;
        if (it.value || includesToken(it.start, 'seq-item-ind')) seq.items.push({
          start: [this.sourceToken]
        });else it.start.push(this.sourceToken);
        return;
    }

    if (this.indent > seq.indent) {
      const bv = this.startBlockValue(seq);

      if (bv) {
        this.stack.push(bv);
        return;
      }
    }

    yield* this.pop();
    yield* this.step();
  }

  *flowCollection(fc) {
    const it = fc.items[fc.items.length - 1];

    if (this.type === 'flow-error-end') {
      let top;

      do {
        yield* this.pop();
        top = this.peek(1);
      } while (top && top.type === 'flow-collection');
    } else if (fc.end.length === 0) {
      switch (this.type) {
        case 'comma':
        case 'explicit-key-ind':
          if (!it || it.sep) fc.items.push({
            start: [this.sourceToken]
          });else it.start.push(this.sourceToken);
          return;

        case 'map-value-ind':
          if (!it || it.value) fc.items.push({
            start: [],
            key: null,
            sep: [this.sourceToken]
          });else if (it.sep) it.sep.push(this.sourceToken);else Object.assign(it, {
            key: null,
            sep: [this.sourceToken]
          });
          return;

        case 'space':
        case 'comment':
        case 'newline':
        case 'anchor':
        case 'tag':
          if (!it || it.value) fc.items.push({
            start: [this.sourceToken]
          });else if (it.sep) it.sep.push(this.sourceToken);else it.start.push(this.sourceToken);
          return;

        case 'alias':
        case 'scalar':
        case 'single-quoted-scalar':
        case 'double-quoted-scalar':
          {
            const fs = this.flowScalar(this.type);
            if (!it || it.value) fc.items.push({
              start: [],
              key: fs,
              sep: []
            });else if (it.sep) this.stack.push(fs);else Object.assign(it, {
              key: fs,
              sep: []
            });
            return;
          }

        case 'flow-map-end':
        case 'flow-seq-end':
          fc.end.push(this.sourceToken);
          return;
      }

      const bv = this.startBlockValue(fc);
      /* istanbul ignore else should not happen */

      if (bv) this.stack.push(bv);else {
        yield* this.pop();
        yield* this.step();
      }
    } else {
      const parent = this.peek(2);

      if (parent.type === 'block-map' && (this.type === 'map-value-ind' || this.type === 'newline' && !parent.items[parent.items.length - 1].sep)) {
        yield* this.pop();
        yield* this.step();
      } else if (this.type === 'map-value-ind' && parent.type !== 'flow-collection') {
        const prev = getPrevProps(parent);
        const start = getFirstKeyStartProps(prev);
        fixFlowSeqItems(fc);
        const sep = fc.end.splice(1, fc.end.length);
        sep.push(this.sourceToken);
        const map = {
          type: 'block-map',
          offset: fc.offset,
          indent: fc.indent,
          items: [{
            start,
            key: fc,
            sep
          }]
        };
        this.onKeyLine = true;
        this.stack[this.stack.length - 1] = map;
      } else {
        yield* this.lineEnd(fc);
      }
    }
  }

  flowScalar(type) {
    if (this.onNewLine) {
      let nl = this.source.indexOf('\n') + 1;

      while (nl !== 0) {
        this.onNewLine(this.offset + nl);
        nl = this.source.indexOf('\n', nl) + 1;
      }
    }

    return {
      type,
      offset: this.offset,
      indent: this.indent,
      source: this.source
    };
  }

  startBlockValue(parent) {
    switch (this.type) {
      case 'alias':
      case 'scalar':
      case 'single-quoted-scalar':
      case 'double-quoted-scalar':
        return this.flowScalar(this.type);

      case 'block-scalar-header':
        return {
          type: 'block-scalar',
          offset: this.offset,
          indent: this.indent,
          props: [this.sourceToken],
          source: ''
        };

      case 'flow-map-start':
      case 'flow-seq-start':
        return {
          type: 'flow-collection',
          offset: this.offset,
          indent: this.indent,
          start: this.sourceToken,
          items: [],
          end: []
        };

      case 'seq-item-ind':
        return {
          type: 'block-seq',
          offset: this.offset,
          indent: this.indent,
          items: [{
            start: [this.sourceToken]
          }]
        };

      case 'explicit-key-ind':
        {
          this.onKeyLine = true;
          const prev = getPrevProps(parent);
          const start = getFirstKeyStartProps(prev);
          start.push(this.sourceToken);
          return {
            type: 'block-map',
            offset: this.offset,
            indent: this.indent,
            items: [{
              start
            }]
          };
        }

      case 'map-value-ind':
        {
          this.onKeyLine = true;
          const prev = getPrevProps(parent);
          const start = getFirstKeyStartProps(prev);
          return {
            type: 'block-map',
            offset: this.offset,
            indent: this.indent,
            items: [{
              start,
              key: null,
              sep: [this.sourceToken]
            }]
          };
        }
    }

    return null;
  }

  atIndentedComment(start, indent) {
    if (this.type !== 'comment') return false;
    if (this.indent <= indent) return false;
    return start.every(st => st.type === 'newline' || st.type === 'space');
  }

  *documentEnd(docEnd) {
    if (this.type !== 'doc-mode') {
      if (docEnd.end) docEnd.end.push(this.sourceToken);else docEnd.end = [this.sourceToken];
      if (this.type === 'newline') yield* this.pop();
    }
  }

  *lineEnd(token) {
    switch (this.type) {
      case 'comma':
      case 'doc-start':
      case 'doc-end':
      case 'flow-seq-end':
      case 'flow-map-end':
      case 'map-value-ind':
        yield* this.pop();
        yield* this.step();
        break;

      case 'newline':
        this.onKeyLine = false;
      // fallthrough

      case 'space':
      case 'comment':
      default:
        // all other values are errors
        if (token.end) token.end.push(this.sourceToken);else token.end = [this.sourceToken];
        if (this.type === 'newline') yield* this.pop();
    }
  }

}

exports.Parser = Parser;

},{"./cst.js":89,"./lexer.js":90}],93:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parse;
exports.parseAllDocuments = parseAllDocuments;
exports.parseDocument = parseDocument;
exports.stringify = stringify;

var _composer = require("./compose/composer.js");

var _Document = require("./doc/Document.js");

var _errors = require("./errors.js");

var _log = require("./log.js");

var _lineCounter = require("./parse/line-counter.js");

var _parser = require("./parse/parser.js");

function parseOptions(options) {
  const prettyErrors = !options || options.prettyErrors !== false;
  const lineCounter = options && options.lineCounter || prettyErrors && new _lineCounter.LineCounter() || null;
  return {
    lineCounter,
    prettyErrors
  };
}
/**
 * Parse the input as a stream of YAML documents.
 *
 * Documents should be separated from each other by `...` or `---` marker lines.
 *
 * @returns If an empty `docs` array is returned, it will be of type
 *   EmptyStream and contain additional stream information. In
 *   TypeScript, you should use `'empty' in docs` as a type guard for it.
 */


function parseAllDocuments(source, options = {}) {
  const {
    lineCounter,
    prettyErrors
  } = parseOptions(options);
  const parser = new _parser.Parser(lineCounter === null || lineCounter === void 0 ? void 0 : lineCounter.addNewLine);
  const composer = new _composer.Composer(options);
  const docs = Array.from(composer.compose(parser.parse(source)));
  if (prettyErrors && lineCounter) for (const doc of docs) {
    doc.errors.forEach((0, _errors.prettifyError)(source, lineCounter));
    doc.warnings.forEach((0, _errors.prettifyError)(source, lineCounter));
  }
  if (docs.length > 0) return docs;
  return Object.assign([], {
    empty: true
  }, composer.streamInfo());
}
/** Parse an input string into a single YAML.Document */


function parseDocument(source, options = {}) {
  const {
    lineCounter,
    prettyErrors
  } = parseOptions(options);
  const parser = new _parser.Parser(lineCounter === null || lineCounter === void 0 ? void 0 : lineCounter.addNewLine);
  const composer = new _composer.Composer(options); // `doc` is always set by compose.end(true) at the very latest

  let doc = null;

  for (const _doc of composer.compose(parser.parse(source), true, source.length)) {
    if (!doc) doc = _doc;else if (doc.options.logLevel !== 'silent') {
      doc.errors.push(new _errors.YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));
      break;
    }
  }

  if (prettyErrors && lineCounter) {
    doc.errors.forEach((0, _errors.prettifyError)(source, lineCounter));
    doc.warnings.forEach((0, _errors.prettifyError)(source, lineCounter));
  }

  return doc;
}

function parse(src, reviver, options) {
  let _reviver = undefined;

  if (typeof reviver === 'function') {
    _reviver = reviver;
  } else if (options === undefined && reviver && typeof reviver === 'object') {
    options = reviver;
  }

  const doc = parseDocument(src, options);
  if (!doc) return null;
  doc.warnings.forEach(warning => (0, _log.warn)(doc.options.logLevel, warning));

  if (doc.errors.length > 0) {
    if (doc.options.logLevel !== 'silent') throw doc.errors[0];else doc.errors = [];
  }

  return doc.toJS(Object.assign({
    reviver: _reviver
  }, options));
}

function stringify(value, replacer, options) {
  let _replacer = null;

  if (typeof replacer === 'function' || Array.isArray(replacer)) {
    _replacer = replacer;
  } else if (options === undefined && replacer) {
    options = replacer;
  }

  if (typeof options === 'string') options = options.length;

  if (typeof options === 'number') {
    const indent = Math.round(options);
    options = indent < 1 ? undefined : indent > 8 ? {
      indent: 8
    } : {
      indent
    };
  }

  if (value === undefined) {
    const {
      keepUndefined
    } = options || replacer || {};
    if (!keepUndefined) return undefined;
  }

  return new _Document.Document(value, _replacer, options).toString(options);
}

},{"./compose/composer.js":57,"./doc/Document.js":68,"./errors.js":73,"./log.js":75,"./parse/line-counter.js":91,"./parse/parser.js":92}],94:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Schema = void 0;

var _Node = require("../nodes/Node.js");

var _map = require("./common/map.js");

var _seq = require("./common/seq.js");

var _string = require("./common/string.js");

var _tags = require("./tags.js");

const sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;

class Schema {
  constructor({
    customTags,
    merge,
    resolveKnownTags,
    schema,
    sortMapEntries
  }) {
    this.merge = !!merge;
    this.name = schema || 'core';
    this.knownTags = resolveKnownTags ? _tags.coreKnownTags : {};
    this.tags = (0, _tags.getTags)(customTags, this.name);
    Object.defineProperty(this, _Node.MAP, {
      value: _map.map
    });
    Object.defineProperty(this, _Node.SCALAR, {
      value: _string.string
    });
    Object.defineProperty(this, _Node.SEQ, {
      value: _seq.seq
    }); // Used by createMap()

    this.sortMapEntries = sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null;
  }

  clone() {
    const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
    copy.tags = this.tags.slice();
    return copy;
  }

}

exports.Schema = Schema;

},{"../nodes/Node.js":78,"./common/map.js":95,"./common/seq.js":97,"./common/string.js":98,"./tags.js":104}],95:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = void 0;

var _Node = require("../../nodes/Node.js");

var _Pair = require("../../nodes/Pair.js");

var _YAMLMap = require("../../nodes/YAMLMap.js");

function createMap(schema, obj, ctx) {
  const {
    keepUndefined,
    replacer
  } = ctx;
  const map = new _YAMLMap.YAMLMap(schema);

  const add = (key, value) => {
    if (typeof replacer === 'function') value = replacer.call(obj, key, value);else if (Array.isArray(replacer) && !replacer.includes(key)) return;
    if (value !== undefined || keepUndefined) map.items.push((0, _Pair.createPair)(key, value, ctx));
  };

  if (obj instanceof Map) {
    for (const [key, value] of obj) add(key, value);
  } else if (obj && typeof obj === 'object') {
    for (const key of Object.keys(obj)) add(key, obj[key]);
  }

  if (typeof schema.sortMapEntries === 'function') {
    map.items.sort(schema.sortMapEntries);
  }

  return map;
}

const map = {
  collection: 'map',
  createNode: createMap,
  default: true,
  nodeClass: _YAMLMap.YAMLMap,
  tag: 'tag:yaml.org,2002:map',

  resolve(map, onError) {
    if (!(0, _Node.isMap)(map)) onError('Expected a mapping for this tag');
    return map;
  }

};
exports.map = map;

},{"../../nodes/Node.js":78,"../../nodes/Pair.js":79,"../../nodes/YAMLMap.js":81}],96:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullTag = void 0;

var _Scalar = require("../../nodes/Scalar.js");

const nullTag = {
  identify: value => value == null,
  createNode: () => new _Scalar.Scalar(null),
  default: true,
  tag: 'tag:yaml.org,2002:null',
  test: /^(?:~|[Nn]ull|NULL)?$/,
  resolve: () => new _Scalar.Scalar(null),
  stringify: ({
    source
  }, ctx) => source && nullTag.test.test(source) ? source : ctx.options.nullStr
};
exports.nullTag = nullTag;

},{"../../nodes/Scalar.js":80}],97:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seq = void 0;

var _createNode = require("../../doc/createNode.js");

var _Node = require("../../nodes/Node.js");

var _YAMLSeq = require("../../nodes/YAMLSeq.js");

function createSeq(schema, obj, ctx) {
  const {
    replacer
  } = ctx;
  const seq = new _YAMLSeq.YAMLSeq(schema);

  if (obj && Symbol.iterator in Object(obj)) {
    let i = 0;

    for (let it of obj) {
      if (typeof replacer === 'function') {
        const key = obj instanceof Set ? it : String(i++);
        it = replacer.call(obj, key, it);
      }

      seq.items.push((0, _createNode.createNode)(it, undefined, ctx));
    }
  }

  return seq;
}

const seq = {
  collection: 'seq',
  createNode: createSeq,
  default: true,
  nodeClass: _YAMLSeq.YAMLSeq,
  tag: 'tag:yaml.org,2002:seq',

  resolve(seq, onError) {
    if (!(0, _Node.isSeq)(seq)) onError('Expected a sequence for this tag');
    return seq;
  }

};
exports.seq = seq;

},{"../../doc/createNode.js":71,"../../nodes/Node.js":78,"../../nodes/YAMLSeq.js":82}],98:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.string = void 0;

var _stringifyString = require("../../stringify/stringifyString.js");

const string = {
  identify: value => typeof value === 'string',
  default: true,
  tag: 'tag:yaml.org,2002:str',
  resolve: str => str,

  stringify(item, ctx, onComment, onChompKeep) {
    ctx = Object.assign({
      actualString: true
    }, ctx);
    return (0, _stringifyString.stringifyString)(item, ctx, onComment, onChompKeep);
  }

};
exports.string = string;

},{"../../stringify/stringifyString.js":121}],99:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.boolTag = void 0;

var _Scalar = require("../../nodes/Scalar.js");

const boolTag = {
  identify: value => typeof value === 'boolean',
  default: true,
  tag: 'tag:yaml.org,2002:bool',
  test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
  resolve: str => new _Scalar.Scalar(str[0] === 't' || str[0] === 'T'),

  stringify({
    source,
    value
  }, ctx) {
    if (source && boolTag.test.test(source)) {
      const sv = source[0] === 't' || source[0] === 'T';
      if (value === sv) return source;
    }

    return value ? ctx.options.trueStr : ctx.options.falseStr;
  }

};
exports.boolTag = boolTag;

},{"../../nodes/Scalar.js":80}],100:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floatNaN = exports.floatExp = exports.float = void 0;

var _Scalar = require("../../nodes/Scalar.js");

var _stringifyNumber = require("../../stringify/stringifyNumber.js");

const floatNaN = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  test: /^(?:[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN))$/,
  resolve: str => str.slice(-3).toLowerCase() === 'nan' ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
  stringify: _stringifyNumber.stringifyNumber
};
exports.floatNaN = floatNaN;
const floatExp = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  format: 'EXP',
  test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
  resolve: str => parseFloat(str),
  stringify: ({
    value
  }) => Number(value).toExponential()
};
exports.floatExp = floatExp;
const float = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,

  resolve(str) {
    const node = new _Scalar.Scalar(parseFloat(str));
    const dot = str.indexOf('.');
    if (dot !== -1 && str[str.length - 1] === '0') node.minFractionDigits = str.length - dot - 1;
    return node;
  },

  stringify: _stringifyNumber.stringifyNumber
};
exports.float = float;

},{"../../nodes/Scalar.js":80,"../../stringify/stringifyNumber.js":119}],101:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.intOct = exports.intHex = exports.int = void 0;

var _stringifyNumber = require("../../stringify/stringifyNumber.js");

const intIdentify = value => typeof value === 'bigint' || Number.isInteger(value);

const intResolve = (str, offset, radix, {
  intAsBigInt
}) => intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);

function intStringify(node, radix, prefix) {
  const {
    value
  } = node;
  if (intIdentify(value) && value >= 0) return prefix + value.toString(radix);
  return (0, _stringifyNumber.stringifyNumber)(node);
}

const intOct = {
  identify: value => intIdentify(value) && value >= 0,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'OCT',
  test: /^0o[0-7]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),
  stringify: node => intStringify(node, 8, '0o')
};
exports.intOct = intOct;
const int = {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  test: /^[-+]?[0-9]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
  stringify: _stringifyNumber.stringifyNumber
};
exports.int = int;
const intHex = {
  identify: value => intIdentify(value) && value >= 0,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'HEX',
  test: /^0x[0-9a-fA-F]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
  stringify: node => intStringify(node, 16, '0x')
};
exports.intHex = intHex;

},{"../../stringify/stringifyNumber.js":119}],102:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = void 0;

var _map = require("../common/map.js");

var _null = require("../common/null.js");

var _seq = require("../common/seq.js");

var _string = require("../common/string.js");

var _bool = require("./bool.js");

var _float = require("./float.js");

var _int = require("./int.js");

const schema = [_map.map, _seq.seq, _string.string, _null.nullTag, _bool.boolTag, _int.intOct, _int.int, _int.intHex, _float.floatNaN, _float.floatExp, _float.float];
exports.schema = schema;

},{"../common/map.js":95,"../common/null.js":96,"../common/seq.js":97,"../common/string.js":98,"./bool.js":99,"./float.js":100,"./int.js":101}],103:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = void 0;

var _Scalar = require("../../nodes/Scalar.js");

var _map = require("../common/map.js");

var _seq = require("../common/seq.js");

function intIdentify(value) {
  return typeof value === 'bigint' || Number.isInteger(value);
}

const stringifyJSON = ({
  value
}) => JSON.stringify(value);

const jsonScalars = [{
  identify: value => typeof value === 'string',
  default: true,
  tag: 'tag:yaml.org,2002:str',
  resolve: str => str,
  stringify: stringifyJSON
}, {
  identify: value => value == null,
  createNode: () => new _Scalar.Scalar(null),
  default: true,
  tag: 'tag:yaml.org,2002:null',
  test: /^null$/,
  resolve: () => null,
  stringify: stringifyJSON
}, {
  identify: value => typeof value === 'boolean',
  default: true,
  tag: 'tag:yaml.org,2002:bool',
  test: /^true|false$/,
  resolve: str => str === 'true',
  stringify: stringifyJSON
}, {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  test: /^-?(?:0|[1-9][0-9]*)$/,
  resolve: (str, _onError, {
    intAsBigInt
  }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
  stringify: ({
    value
  }) => intIdentify(value) ? value.toString() : JSON.stringify(value)
}, {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
  resolve: str => parseFloat(str),
  stringify: stringifyJSON
}];
const jsonError = {
  default: true,
  tag: '',
  test: /^/,

  resolve(str, onError) {
    onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
    return str;
  }

};
const schema = [_map.map, _seq.seq].concat(jsonScalars, jsonError);
exports.schema = schema;

},{"../../nodes/Scalar.js":80,"../common/map.js":95,"../common/seq.js":97}],104:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coreKnownTags = void 0;
exports.getTags = getTags;

var _map = require("./common/map.js");

var _null = require("./common/null.js");

var _seq = require("./common/seq.js");

var _string = require("./common/string.js");

var _bool = require("./core/bool.js");

var _float = require("./core/float.js");

var _int = require("./core/int.js");

var _schema = require("./core/schema.js");

var _schema2 = require("./json/schema.js");

var _binary = require("./yaml-1.1/binary.js");

var _omap = require("./yaml-1.1/omap.js");

var _pairs = require("./yaml-1.1/pairs.js");

var _schema3 = require("./yaml-1.1/schema.js");

var _set = require("./yaml-1.1/set.js");

var _timestamp = require("./yaml-1.1/timestamp.js");

const schemas = {
  core: _schema.schema,
  failsafe: [_map.map, _seq.seq, _string.string],
  json: _schema2.schema,
  yaml11: _schema3.schema,
  'yaml-1.1': _schema3.schema
};
const tagsByName = {
  binary: _binary.binary,
  bool: _bool.boolTag,
  float: _float.float,
  floatExp: _float.floatExp,
  floatNaN: _float.floatNaN,
  floatTime: _timestamp.floatTime,
  int: _int.int,
  intHex: _int.intHex,
  intOct: _int.intOct,
  intTime: _timestamp.intTime,
  map: _map.map,
  null: _null.nullTag,
  omap: _omap.omap,
  pairs: _pairs.pairs,
  seq: _seq.seq,
  set: _set.set,
  timestamp: _timestamp.timestamp
};
const coreKnownTags = {
  'tag:yaml.org,2002:binary': _binary.binary,
  'tag:yaml.org,2002:omap': _omap.omap,
  'tag:yaml.org,2002:pairs': _pairs.pairs,
  'tag:yaml.org,2002:set': _set.set,
  'tag:yaml.org,2002:timestamp': _timestamp.timestamp
};
exports.coreKnownTags = coreKnownTags;

function getTags(customTags, schemaName) {
  let tags = schemas[schemaName];

  if (!tags) {
    if (Array.isArray(customTags)) tags = [];else {
      const keys = Object.keys(schemas).filter(key => key !== 'yaml11').map(key => JSON.stringify(key)).join(', ');
      throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
    }
  }

  if (Array.isArray(customTags)) {
    for (const tag of customTags) tags = tags.concat(tag);
  } else if (typeof customTags === 'function') {
    tags = customTags(tags.slice());
  }

  return tags.map(tag => {
    if (typeof tag !== 'string') return tag;
    const tagObj = tagsByName[tag];
    if (tagObj) return tagObj;
    const keys = Object.keys(tagsByName).map(key => JSON.stringify(key)).join(', ');
    throw new Error(`Unknown custom tag "${tag}"; use one of ${keys}`);
  });
}

},{"./common/map.js":95,"./common/null.js":96,"./common/seq.js":97,"./common/string.js":98,"./core/bool.js":99,"./core/float.js":100,"./core/int.js":101,"./core/schema.js":102,"./json/schema.js":103,"./yaml-1.1/binary.js":105,"./yaml-1.1/omap.js":109,"./yaml-1.1/pairs.js":110,"./yaml-1.1/schema.js":111,"./yaml-1.1/set.js":112,"./yaml-1.1/timestamp.js":113}],105:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.binary = void 0;

var _Scalar = require("../../nodes/Scalar.js");

var _stringifyString = require("../../stringify/stringifyString.js");

const binary = {
  identify: value => value instanceof Uint8Array,
  default: false,
  tag: 'tag:yaml.org,2002:binary',

  /**
   * Returns a Buffer in node and an Uint8Array in browsers
   *
   * To use the resulting buffer as an image, you'll want to do something like:
   *
   *   const blob = new Blob([buffer], { type: 'image/jpeg' })
   *   document.querySelector('#photo').src = URL.createObjectURL(blob)
   */
  resolve(src, onError) {
    if (typeof Buffer === 'function') {
      return Buffer.from(src, 'base64');
    } else if (typeof atob === 'function') {
      // On IE 11, atob() can't handle newlines
      const str = atob(src.replace(/[\n\r]/g, ''));
      const buffer = new Uint8Array(str.length);

      for (let i = 0; i < str.length; ++i) buffer[i] = str.charCodeAt(i);

      return buffer;
    } else {
      onError('This environment does not support reading binary tags; either Buffer or atob is required');
      return src;
    }
  },

  stringify({
    comment,
    type,
    value
  }, ctx, onComment, onChompKeep) {
    const buf = value; // checked earlier by binary.identify()

    let str;

    if (typeof Buffer === 'function') {
      str = buf instanceof Buffer ? buf.toString('base64') : Buffer.from(buf.buffer).toString('base64');
    } else if (typeof btoa === 'function') {
      let s = '';

      for (let i = 0; i < buf.length; ++i) s += String.fromCharCode(buf[i]);

      str = btoa(s);
    } else {
      throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');
    }

    if (!type) type = _Scalar.Scalar.BLOCK_LITERAL;

    if (type !== _Scalar.Scalar.QUOTE_DOUBLE) {
      const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
      const n = Math.ceil(str.length / lineWidth);
      const lines = new Array(n);

      for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
        lines[i] = str.substr(o, lineWidth);
      }

      str = lines.join(type === _Scalar.Scalar.BLOCK_LITERAL ? '\n' : ' ');
    }

    return (0, _stringifyString.stringifyString)({
      comment,
      type,
      value: str
    }, ctx, onComment, onChompKeep);
  }

};
exports.binary = binary;

}).call(this)}).call(this,require("buffer").Buffer)
},{"../../nodes/Scalar.js":80,"../../stringify/stringifyString.js":121,"buffer":50}],106:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trueTag = exports.falseTag = void 0;

var _Scalar = require("../../nodes/Scalar.js");

function boolStringify({
  value,
  source
}, ctx) {
  const boolObj = value ? trueTag : falseTag;
  if (source && boolObj.test.test(source)) return source;
  return value ? ctx.options.trueStr : ctx.options.falseStr;
}

const trueTag = {
  identify: value => value === true,
  default: true,
  tag: 'tag:yaml.org,2002:bool',
  test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
  resolve: () => new _Scalar.Scalar(true),
  stringify: boolStringify
};
exports.trueTag = trueTag;
const falseTag = {
  identify: value => value === false,
  default: true,
  tag: 'tag:yaml.org,2002:bool',
  test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
  resolve: () => new _Scalar.Scalar(false),
  stringify: boolStringify
};
exports.falseTag = falseTag;

},{"../../nodes/Scalar.js":80}],107:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floatNaN = exports.floatExp = exports.float = void 0;

var _Scalar = require("../../nodes/Scalar.js");

var _stringifyNumber = require("../../stringify/stringifyNumber.js");

const floatNaN = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  test: /^[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN)$/,
  resolve: str => str.slice(-3).toLowerCase() === 'nan' ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
  stringify: _stringifyNumber.stringifyNumber
};
exports.floatNaN = floatNaN;
const floatExp = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  format: 'EXP',
  test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
  resolve: str => parseFloat(str.replace(/_/g, '')),
  stringify: ({
    value
  }) => Number(value).toExponential()
};
exports.floatExp = floatExp;
const float = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,

  resolve(str) {
    const node = new _Scalar.Scalar(parseFloat(str.replace(/_/g, '')));
    const dot = str.indexOf('.');

    if (dot !== -1) {
      const f = str.substring(dot + 1).replace(/_/g, '');
      if (f[f.length - 1] === '0') node.minFractionDigits = f.length;
    }

    return node;
  },

  stringify: _stringifyNumber.stringifyNumber
};
exports.float = float;

},{"../../nodes/Scalar.js":80,"../../stringify/stringifyNumber.js":119}],108:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.intOct = exports.intHex = exports.intBin = exports.int = void 0;

var _stringifyNumber = require("../../stringify/stringifyNumber.js");

const intIdentify = value => typeof value === 'bigint' || Number.isInteger(value);

function intResolve(str, offset, radix, {
  intAsBigInt
}) {
  const sign = str[0];
  if (sign === '-' || sign === '+') offset += 1;
  str = str.substring(offset).replace(/_/g, '');

  if (intAsBigInt) {
    switch (radix) {
      case 2:
        str = `0b${str}`;
        break;

      case 8:
        str = `0o${str}`;
        break;

      case 16:
        str = `0x${str}`;
        break;
    }

    const n = BigInt(str);
    return sign === '-' ? BigInt(-1) * n : n;
  }

  const n = parseInt(str, radix);
  return sign === '-' ? -1 * n : n;
}

function intStringify(node, radix, prefix) {
  const {
    value
  } = node;

  if (intIdentify(value)) {
    const str = value.toString(radix);
    return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;
  }

  return (0, _stringifyNumber.stringifyNumber)(node);
}

const intBin = {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'BIN',
  test: /^[-+]?0b[0-1_]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),
  stringify: node => intStringify(node, 2, '0b')
};
exports.intBin = intBin;
const intOct = {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'OCT',
  test: /^[-+]?0[0-7_]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),
  stringify: node => intStringify(node, 8, '0')
};
exports.intOct = intOct;
const int = {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  test: /^[-+]?[0-9][0-9_]*$/,
  resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
  stringify: _stringifyNumber.stringifyNumber
};
exports.int = int;
const intHex = {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'HEX',
  test: /^[-+]?0x[0-9a-fA-F_]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
  stringify: node => intStringify(node, 16, '0x')
};
exports.intHex = intHex;

},{"../../stringify/stringifyNumber.js":119}],109:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.omap = exports.YAMLOMap = void 0;

var _YAMLSeq = require("../../nodes/YAMLSeq.js");

var _toJS = require("../../nodes/toJS.js");

var _Node = require("../../nodes/Node.js");

var _YAMLMap = require("../../nodes/YAMLMap.js");

var _pairs = require("./pairs.js");

class YAMLOMap extends _YAMLSeq.YAMLSeq {
  constructor() {
    super();
    this.add = _YAMLMap.YAMLMap.prototype.add.bind(this);
    this.delete = _YAMLMap.YAMLMap.prototype.delete.bind(this);
    this.get = _YAMLMap.YAMLMap.prototype.get.bind(this);
    this.has = _YAMLMap.YAMLMap.prototype.has.bind(this);
    this.set = _YAMLMap.YAMLMap.prototype.set.bind(this);
    this.tag = YAMLOMap.tag;
  }
  /**
   * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
   * but TypeScript won't allow widening the signature of a child method.
   */


  toJSON(_, ctx) {
    if (!ctx) return super.toJSON(_);
    const map = new Map();
    if (ctx && ctx.onCreate) ctx.onCreate(map);

    for (const pair of this.items) {
      let key, value;

      if ((0, _Node.isPair)(pair)) {
        key = (0, _toJS.toJS)(pair.key, '', ctx);
        value = (0, _toJS.toJS)(pair.value, key, ctx);
      } else {
        key = (0, _toJS.toJS)(pair, '', ctx);
      }

      if (map.has(key)) throw new Error('Ordered maps must not include duplicate keys');
      map.set(key, value);
    }

    return map;
  }

}

exports.YAMLOMap = YAMLOMap;
YAMLOMap.tag = 'tag:yaml.org,2002:omap';
const omap = {
  collection: 'seq',
  identify: value => value instanceof Map,
  nodeClass: YAMLOMap,
  default: false,
  tag: 'tag:yaml.org,2002:omap',

  resolve(seq, onError) {
    const pairs = (0, _pairs.resolvePairs)(seq, onError);
    const seenKeys = [];

    for (const {
      key
    } of pairs.items) {
      if ((0, _Node.isScalar)(key)) {
        if (seenKeys.includes(key.value)) {
          onError(`Ordered maps must not include duplicate keys: ${key.value}`);
        } else {
          seenKeys.push(key.value);
        }
      }
    }

    return Object.assign(new YAMLOMap(), pairs);
  },

  createNode(schema, iterable, ctx) {
    const pairs = (0, _pairs.createPairs)(schema, iterable, ctx);
    const omap = new YAMLOMap();
    omap.items = pairs.items;
    return omap;
  }

};
exports.omap = omap;

},{"../../nodes/Node.js":78,"../../nodes/YAMLMap.js":81,"../../nodes/YAMLSeq.js":82,"../../nodes/toJS.js":84,"./pairs.js":110}],110:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPairs = createPairs;
exports.pairs = void 0;
exports.resolvePairs = resolvePairs;

var _Node = require("../../nodes/Node.js");

var _Pair = require("../../nodes/Pair.js");

var _Scalar = require("../../nodes/Scalar.js");

var _YAMLSeq = require("../../nodes/YAMLSeq.js");

function resolvePairs(seq, onError) {
  if ((0, _Node.isSeq)(seq)) {
    for (let i = 0; i < seq.items.length; ++i) {
      let item = seq.items[i];
      if ((0, _Node.isPair)(item)) continue;else if ((0, _Node.isMap)(item)) {
        if (item.items.length > 1) onError('Each pair must have its own sequence indicator');
        const pair = item.items[0] || new _Pair.Pair(new _Scalar.Scalar(null));
        if (item.commentBefore) pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}\n${pair.key.commentBefore}` : item.commentBefore;

        if (item.comment) {
          const cn = pair.value || pair.key;
          cn.comment = cn.comment ? `${item.comment}\n${cn.comment}` : item.comment;
        }

        item = pair;
      }
      seq.items[i] = (0, _Node.isPair)(item) ? item : new _Pair.Pair(item);
    }
  } else onError('Expected a sequence for this tag');

  return seq;
}

function createPairs(schema, iterable, ctx) {
  const {
    replacer
  } = ctx;
  const pairs = new _YAMLSeq.YAMLSeq(schema);
  pairs.tag = 'tag:yaml.org,2002:pairs';
  let i = 0;
  if (iterable && Symbol.iterator in Object(iterable)) for (let it of iterable) {
    if (typeof replacer === 'function') it = replacer.call(iterable, String(i++), it);
    let key, value;

    if (Array.isArray(it)) {
      if (it.length === 2) {
        key = it[0];
        value = it[1];
      } else throw new TypeError(`Expected [key, value] tuple: ${it}`);
    } else if (it && it instanceof Object) {
      const keys = Object.keys(it);

      if (keys.length === 1) {
        key = keys[0];
        value = it[key];
      } else throw new TypeError(`Expected { key: value } tuple: ${it}`);
    } else {
      key = it;
    }

    pairs.items.push((0, _Pair.createPair)(key, value, ctx));
  }
  return pairs;
}

const pairs = {
  collection: 'seq',
  default: false,
  tag: 'tag:yaml.org,2002:pairs',
  resolve: resolvePairs,
  createNode: createPairs
};
exports.pairs = pairs;

},{"../../nodes/Node.js":78,"../../nodes/Pair.js":79,"../../nodes/Scalar.js":80,"../../nodes/YAMLSeq.js":82}],111:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = void 0;

var _map = require("../common/map.js");

var _null = require("../common/null.js");

var _seq = require("../common/seq.js");

var _string = require("../common/string.js");

var _binary = require("./binary.js");

var _bool = require("./bool.js");

var _float = require("./float.js");

var _int = require("./int.js");

var _omap = require("./omap.js");

var _pairs = require("./pairs.js");

var _set = require("./set.js");

var _timestamp = require("./timestamp.js");

const schema = [_map.map, _seq.seq, _string.string, _null.nullTag, _bool.trueTag, _bool.falseTag, _int.intBin, _int.intOct, _int.int, _int.intHex, _float.floatNaN, _float.floatExp, _float.float, _binary.binary, _omap.omap, _pairs.pairs, _set.set, _timestamp.intTime, _timestamp.floatTime, _timestamp.timestamp];
exports.schema = schema;

},{"../common/map.js":95,"../common/null.js":96,"../common/seq.js":97,"../common/string.js":98,"./binary.js":105,"./bool.js":106,"./float.js":107,"./int.js":108,"./omap.js":109,"./pairs.js":110,"./set.js":112,"./timestamp.js":113}],112:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.set = exports.YAMLSet = void 0;

var _Node = require("../../nodes/Node.js");

var _Pair = require("../../nodes/Pair.js");

var _YAMLMap = require("../../nodes/YAMLMap.js");

class YAMLSet extends _YAMLMap.YAMLMap {
  constructor(schema) {
    super(schema);
    this.tag = YAMLSet.tag;
  }

  add(key) {
    let pair;
    if ((0, _Node.isPair)(key)) pair = key;else if (typeof key === 'object' && 'key' in key && 'value' in key && key.value === null) pair = new _Pair.Pair(key.key, null);else pair = new _Pair.Pair(key, null);
    const prev = (0, _YAMLMap.findPair)(this.items, pair.key);
    if (!prev) this.items.push(pair);
  }

  get(key, keepPair) {
    const pair = (0, _YAMLMap.findPair)(this.items, key);
    return !keepPair && (0, _Node.isPair)(pair) ? (0, _Node.isScalar)(pair.key) ? pair.key.value : pair.key : pair;
  }

  set(key, value) {
    if (typeof value !== 'boolean') throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
    const prev = (0, _YAMLMap.findPair)(this.items, key);

    if (prev && !value) {
      this.items.splice(this.items.indexOf(prev), 1);
    } else if (!prev && value) {
      this.items.push(new _Pair.Pair(key));
    }
  }

  toJSON(_, ctx) {
    return super.toJSON(_, ctx, Set);
  }

  toString(ctx, onComment, onChompKeep) {
    if (!ctx) return JSON.stringify(this);
    if (this.hasAllNullValues(true)) return super.toString(Object.assign({}, ctx, {
      allNullValues: true
    }), onComment, onChompKeep);else throw new Error('Set items must all have null values');
  }

}

exports.YAMLSet = YAMLSet;
YAMLSet.tag = 'tag:yaml.org,2002:set';
const set = {
  collection: 'map',
  identify: value => value instanceof Set,
  nodeClass: YAMLSet,
  default: false,
  tag: 'tag:yaml.org,2002:set',

  resolve(map, onError) {
    if ((0, _Node.isMap)(map)) {
      if (map.hasAllNullValues(true)) return Object.assign(new YAMLSet(), map);else onError('Set items must all have null values');
    } else onError('Expected a mapping for this tag');

    return map;
  },

  createNode(schema, iterable, ctx) {
    const {
      replacer
    } = ctx;
    const set = new YAMLSet(schema);
    if (iterable && Symbol.iterator in Object(iterable)) for (let value of iterable) {
      if (typeof replacer === 'function') value = replacer.call(iterable, value, value);
      set.items.push((0, _Pair.createPair)(value, null, ctx));
    }
    return set;
  }

};
exports.set = set;

},{"../../nodes/Node.js":78,"../../nodes/Pair.js":79,"../../nodes/YAMLMap.js":81}],113:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timestamp = exports.intTime = exports.floatTime = void 0;

var _stringifyNumber = require("../../stringify/stringifyNumber.js");

/** Internal types handle bigint as number, because TS can't figure it out. */
function parseSexagesimal(str, asBigInt) {
  const sign = str[0];
  const parts = sign === '-' || sign === '+' ? str.substring(1) : str;

  const num = n => asBigInt ? BigInt(n) : Number(n);

  const res = parts.replace(/_/g, '').split(':').reduce((res, p) => res * num(60) + num(p), num(0));
  return sign === '-' ? num(-1) * res : res;
}
/**
 * hhhh:mm:ss.sss
 *
 * Internal types handle bigint as number, because TS can't figure it out.
 */


function stringifySexagesimal(node) {
  let {
    value
  } = node;

  let num = n => n;

  if (typeof value === 'bigint') num = n => BigInt(n);else if (isNaN(value) || !isFinite(value)) return (0, _stringifyNumber.stringifyNumber)(node);
  let sign = '';

  if (value < 0) {
    sign = '-';
    value *= num(-1);
  }

  const _60 = num(60);

  const parts = [value % _60]; // seconds, including ms

  if (value < 60) {
    parts.unshift(0); // at least one : is required
  } else {
    value = (value - parts[0]) / _60;
    parts.unshift(value % _60); // minutes

    if (value >= 60) {
      value = (value - parts[0]) / _60;
      parts.unshift(value); // hours
    }
  }

  return sign + parts.map(n => n < 10 ? '0' + String(n) : String(n)).join(':').replace(/000000\d*$/, '') // % 60 may introduce error
  ;
}

const intTime = {
  identify: value => typeof value === 'bigint' || Number.isInteger(value),
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'TIME',
  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
  resolve: (str, _onError, {
    intAsBigInt
  }) => parseSexagesimal(str, intAsBigInt),
  stringify: stringifySexagesimal
};
exports.intTime = intTime;
const floatTime = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  format: 'TIME',
  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
  resolve: str => parseSexagesimal(str, false),
  stringify: stringifySexagesimal
};
exports.floatTime = floatTime;
const timestamp = {
  identify: value => value instanceof Date,
  default: true,
  tag: 'tag:yaml.org,2002:timestamp',
  // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
  // may be omitted altogether, resulting in a date format. In such a case, the time part is
  // assumed to be 00:00:00Z (start of day, UTC).
  test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd
  '(?:' + // time is optional
  '(?:t|T|[ \\t]+)' + // t | T | whitespace
  '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?
  '(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30
  ')?$'),

  resolve(str) {
    const match = str.match(timestamp.test);
    if (!match) throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');
    const [, year, month, day, hour, minute, second] = match.map(Number);
    const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;
    let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
    const tz = match[8];

    if (tz && tz !== 'Z') {
      let d = parseSexagesimal(tz, false);
      if (Math.abs(d) < 30) d *= 60;
      date -= 60000 * d;
    }

    return new Date(date);
  },

  stringify: ({
    value
  }) => value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, '')
};
exports.timestamp = timestamp;

},{"../../stringify/stringifyNumber.js":119}],114:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FOLD_QUOTED = exports.FOLD_FLOW = exports.FOLD_BLOCK = void 0;
exports.foldFlowLines = foldFlowLines;
const FOLD_FLOW = 'flow';
exports.FOLD_FLOW = FOLD_FLOW;
const FOLD_BLOCK = 'block';
exports.FOLD_BLOCK = FOLD_BLOCK;
const FOLD_QUOTED = 'quoted';
/**
 * Tries to keep input at up to `lineWidth` characters, splitting only on spaces
 * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are
 * terminated with `\n` and started with `indent`.
 */

exports.FOLD_QUOTED = FOLD_QUOTED;

function foldFlowLines(text, indent, mode = 'flow', {
  indentAtStart,
  lineWidth = 80,
  minContentWidth = 20,
  onFold,
  onOverflow
} = {}) {
  if (!lineWidth || lineWidth < 0) return text;
  const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
  if (text.length <= endStep) return text;
  const folds = [];
  const escapedFolds = {};
  let end = lineWidth - indent.length;

  if (typeof indentAtStart === 'number') {
    if (indentAtStart > lineWidth - Math.max(2, minContentWidth)) folds.push(0);else end = lineWidth - indentAtStart;
  }

  let split = undefined;
  let prev = undefined;
  let overflow = false;
  let i = -1;
  let escStart = -1;
  let escEnd = -1;

  if (mode === FOLD_BLOCK) {
    i = consumeMoreIndentedLines(text, i);
    if (i !== -1) end = i + endStep;
  }

  for (let ch; ch = text[i += 1];) {
    if (mode === FOLD_QUOTED && ch === '\\') {
      escStart = i;

      switch (text[i + 1]) {
        case 'x':
          i += 3;
          break;

        case 'u':
          i += 5;
          break;

        case 'U':
          i += 9;
          break;

        default:
          i += 1;
      }

      escEnd = i;
    }

    if (ch === '\n') {
      if (mode === FOLD_BLOCK) i = consumeMoreIndentedLines(text, i);
      end = i + endStep;
      split = undefined;
    } else {
      if (ch === ' ' && prev && prev !== ' ' && prev !== '\n' && prev !== '\t') {
        // space surrounded by non-space can be replaced with newline + indent
        const next = text[i + 1];
        if (next && next !== ' ' && next !== '\n' && next !== '\t') split = i;
      }

      if (i >= end) {
        if (split) {
          folds.push(split);
          end = split + endStep;
          split = undefined;
        } else if (mode === FOLD_QUOTED) {
          // white-space collected at end may stretch past lineWidth
          while (prev === ' ' || prev === '\t') {
            prev = ch;
            ch = text[i += 1];
            overflow = true;
          } // Account for newline escape, but don't break preceding escape


          const j = i > escEnd + 1 ? i - 2 : escStart - 1; // Bail out if lineWidth & minContentWidth are shorter than an escape string

          if (escapedFolds[j]) return text;
          folds.push(j);
          escapedFolds[j] = true;
          end = j + endStep;
          split = undefined;
        } else {
          overflow = true;
        }
      }
    }

    prev = ch;
  }

  if (overflow && onOverflow) onOverflow();
  if (folds.length === 0) return text;
  if (onFold) onFold();
  let res = text.slice(0, folds[0]);

  for (let i = 0; i < folds.length; ++i) {
    const fold = folds[i];
    const end = folds[i + 1] || text.length;
    if (fold === 0) res = `\n${indent}${text.slice(0, end)}`;else {
      if (mode === FOLD_QUOTED && escapedFolds[fold]) res += `${text[fold]}\\`;
      res += `\n${indent}${text.slice(fold + 1, end)}`;
    }
  }

  return res;
}
/**
 * Presumes `i + 1` is at the start of a line
 * @returns index of last newline in more-indented block
 */


function consumeMoreIndentedLines(text, i) {
  let ch = text[i + 1];

  while (ch === ' ' || ch === '\t') {
    do {
      ch = text[i += 1];
    } while (ch && ch !== '\n');

    ch = text[i + 1];
  }

  return i;
}

},{}],115:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStringifyContext = void 0;
exports.stringify = stringify;

var _anchors = require("../doc/anchors.js");

var _Node = require("../nodes/Node.js");

var _stringifyString = require("./stringifyString.js");

const createStringifyContext = (doc, options) => ({
  anchors: new Set(),
  doc,
  indent: '',
  indentStep: typeof options.indent === 'number' ? ' '.repeat(options.indent) : '  ',
  options: Object.assign({
    blockQuote: true,
    defaultKeyType: null,
    defaultStringType: 'PLAIN',
    directives: null,
    doubleQuotedAsJSON: false,
    doubleQuotedMinMultiLineLength: 40,
    falseStr: 'false',
    indentSeq: true,
    lineWidth: 80,
    minContentWidth: 20,
    nullStr: 'null',
    simpleKeys: false,
    singleQuote: null,
    trueStr: 'true',
    verifyAliasOrder: true
  }, options)
});

exports.createStringifyContext = createStringifyContext;

function getTagObject(tags, item) {
  if (item.tag) {
    const match = tags.filter(t => t.tag === item.tag);
    if (match.length > 0) return match.find(t => t.format === item.format) || match[0];
  }

  let tagObj = undefined;
  let obj;

  if ((0, _Node.isScalar)(item)) {
    obj = item.value;
    const match = tags.filter(t => t.identify && t.identify(obj));
    tagObj = match.find(t => t.format === item.format) || match.find(t => !t.format);
  } else {
    obj = item;
    tagObj = tags.find(t => t.nodeClass && obj instanceof t.nodeClass);
  }

  if (!tagObj) {
    // @ts-ignore
    const name = obj && obj.constructor ? obj.constructor.name : typeof obj;
    throw new Error(`Tag not resolved for ${name} value`);
  }

  return tagObj;
} // needs to be called before value stringifier to allow for circular anchor refs


function stringifyProps(node, tagObj, {
  anchors,
  doc
}) {
  const props = [];
  const anchor = ((0, _Node.isScalar)(node) || (0, _Node.isCollection)(node)) && node.anchor;

  if (anchor && (0, _anchors.anchorIsValid)(anchor)) {
    anchors.add(anchor);
    props.push(`&${anchor}`);
  }

  if (node.tag) {
    props.push(doc.directives.tagString(node.tag));
  } else if (!tagObj.default) {
    props.push(doc.directives.tagString(tagObj.tag));
  }

  return props.join(' ');
}

function stringify(item, ctx, onComment, onChompKeep) {
  if ((0, _Node.isPair)(item)) return item.toString(ctx, onComment, onChompKeep);
  if ((0, _Node.isAlias)(item)) return item.toString(ctx);
  let tagObj = undefined;
  const node = (0, _Node.isNode)(item) ? item : ctx.doc.createNode(item, {
    onTagObj: o => tagObj = o
  });
  if (!tagObj) tagObj = getTagObject(ctx.doc.schema.tags, node);
  const props = stringifyProps(node, tagObj, ctx);
  if (props.length > 0) ctx.indentAtStart = (ctx.indentAtStart || 0) + props.length + 1;
  const str = typeof tagObj.stringify === 'function' ? tagObj.stringify(node, ctx, onComment, onChompKeep) : (0, _Node.isScalar)(node) ? (0, _stringifyString.stringifyString)(node, ctx, onComment, onChompKeep) : node.toString(ctx, onComment, onChompKeep);
  if (!props) return str;
  return (0, _Node.isScalar)(node) || str[0] === '{' || str[0] === '[' ? `${props} ${str}` : `${props}\n${ctx.indent}${str}`;
}

},{"../doc/anchors.js":69,"../nodes/Node.js":78,"./stringifyString.js":121}],116:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringifyCollection = stringifyCollection;

var _Collection = require("../nodes/Collection.js");

var _Node = require("../nodes/Node.js");

var _stringify = require("./stringify.js");

var _stringifyComment = require("./stringifyComment.js");

function stringifyCollection({
  comment,
  flow,
  items
}, ctx, {
  blockItem,
  flowChars,
  itemIndent,
  onChompKeep,
  onComment
}) {
  const {
    indent,
    indentStep
  } = ctx;
  const inFlow = flow || ctx.inFlow;
  if (inFlow) itemIndent += indentStep;
  ctx = Object.assign({}, ctx, {
    indent: itemIndent,
    inFlow,
    type: null
  });
  let singleLineOutput = true;
  let chompKeep = false; // flag for the preceding node's status

  const nodes = items.reduce((nodes, item, i) => {
    let comment = null;

    if ((0, _Node.isNode)(item)) {
      if (!chompKeep && item.spaceBefore) nodes.push({
        comment: true,
        str: ''
      });
      let cb = item.commentBefore;
      if (cb && chompKeep) cb = cb.replace(/^\n+/, '');

      if (cb) {
        if (/^\n+$/.test(cb)) cb = cb.substring(1); // This match will always succeed on a non-empty string

        for (const line of cb.match(/^.*$/gm)) {
          const str = line === ' ' ? '#' : line ? `#${line}` : '';
          nodes.push({
            comment: true,
            str
          });
        }
      }

      if (item.comment) {
        comment = item.comment;
        singleLineOutput = false;
      }
    } else if ((0, _Node.isPair)(item)) {
      const ik = (0, _Node.isNode)(item.key) ? item.key : null;

      if (ik) {
        if (!chompKeep && ik.spaceBefore) nodes.push({
          comment: true,
          str: ''
        });
        let cb = ik.commentBefore;
        if (cb && chompKeep) cb = cb.replace(/^\n+/, '');

        if (cb) {
          if (/^\n+$/.test(cb)) cb = cb.substring(1); // This match will always succeed on a non-empty string

          for (const line of cb.match(/^.*$/gm)) {
            const str = line === ' ' ? '#' : line ? `#${line}` : '';
            nodes.push({
              comment: true,
              str
            });
          }
        }

        if (ik.comment) singleLineOutput = false;
      }

      if (inFlow) {
        const iv = (0, _Node.isNode)(item.value) ? item.value : null;

        if (iv) {
          if (iv.comment) comment = iv.comment;
          if (iv.comment || iv.commentBefore) singleLineOutput = false;
        } else if (item.value == null && ik && ik.comment) {
          comment = ik.comment;
        }
      }
    }

    chompKeep = false;
    let str = (0, _stringify.stringify)(item, ctx, () => comment = null, () => chompKeep = true);
    if (inFlow && i < items.length - 1) str += ',';
    str = (0, _stringifyComment.addComment)(str, itemIndent, comment);
    if (chompKeep && (comment || inFlow)) chompKeep = false;
    nodes.push({
      comment: false,
      str
    });
    return nodes;
  }, []);
  let str;

  if (nodes.length === 0) {
    str = flowChars.start + flowChars.end;
  } else if (inFlow) {
    const {
      start,
      end
    } = flowChars;
    const strings = nodes.map(n => n.str);
    let singleLineLength = 2;

    for (const node of nodes) {
      if (node.comment || node.str.includes('\n')) {
        singleLineOutput = false;
        break;
      }

      singleLineLength += node.str.length + 2;
    }

    if (!singleLineOutput || singleLineLength > _Collection.Collection.maxFlowStringSingleLineLength) {
      str = start;

      for (const s of strings) {
        str += s ? `\n${indentStep}${indent}${s}` : '\n';
      }

      str += `\n${indent}${end}`;
    } else {
      str = `${start} ${strings.join(' ')} ${end}`;
    }
  } else {
    const strings = nodes.map(blockItem);
    str = strings.shift() || '';

    for (const s of strings) str += s ? `\n${indent}${s}` : '\n';
  }

  if (comment) {
    str += '\n' + (0, _stringifyComment.stringifyComment)(comment, indent);
    if (onComment) onComment();
  } else if (chompKeep && onChompKeep) onChompKeep();

  return str;
}

},{"../nodes/Collection.js":77,"../nodes/Node.js":78,"./stringify.js":115,"./stringifyComment.js":117}],117:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addComment = addComment;
exports.stringifyComment = void 0;

const stringifyComment = (comment, indent) => /^\n+$/.test(comment) ? comment.substring(1) : comment.replace(/^(?!$)(?: $)?/gm, `${indent}#`);

exports.stringifyComment = stringifyComment;

function addComment(str, indent, comment) {
  return !comment ? str : comment.includes('\n') ? `${str}\n` + stringifyComment(comment, indent) : str.endsWith(' ') ? `${str}#${comment}` : `${str} #${comment}`;
}

},{}],118:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringifyDocument = stringifyDocument;

var _Node = require("../nodes/Node.js");

var _stringify = require("./stringify.js");

var _stringifyComment = require("./stringifyComment.js");

function stringifyDocument(doc, options) {
  const lines = [];
  let hasDirectives = options.directives === true;

  if (options.directives !== false) {
    const dir = doc.directives.toString(doc);

    if (dir) {
      lines.push(dir);
      hasDirectives = true;
    } else if (doc.directives.marker) hasDirectives = true;
  }

  if (hasDirectives) lines.push('---');

  if (doc.commentBefore) {
    if (lines.length !== 1) lines.unshift('');
    lines.unshift((0, _stringifyComment.stringifyComment)(doc.commentBefore, ''));
  }

  const ctx = (0, _stringify.createStringifyContext)(doc, options);
  let chompKeep = false;
  let contentComment = null;

  if (doc.contents) {
    if ((0, _Node.isNode)(doc.contents)) {
      if (doc.contents.spaceBefore && hasDirectives) lines.push('');
      if (doc.contents.commentBefore) lines.push((0, _stringifyComment.stringifyComment)(doc.contents.commentBefore, '')); // top-level block scalars need to be indented if followed by a comment

      ctx.forceBlockIndent = !!doc.comment;
      contentComment = doc.contents.comment;
    }

    const onChompKeep = contentComment ? undefined : () => chompKeep = true;
    let body = (0, _stringify.stringify)(doc.contents, ctx, () => contentComment = null, onChompKeep);
    if (contentComment) body = (0, _stringifyComment.addComment)(body, '', contentComment);

    if ((body[0] === '|' || body[0] === '>') && lines[lines.length - 1] === '---') {
      // Top-level block scalars with a preceding doc marker ought to use the
      // same line for their header.
      lines[lines.length - 1] = `--- ${body}`;
    } else lines.push(body);
  } else {
    lines.push((0, _stringify.stringify)(doc.contents, ctx));
  }

  let dc = doc.comment;
  if (dc && chompKeep) dc = dc.replace(/^\n+/, '');

  if (dc) {
    if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '') lines.push('');
    lines.push((0, _stringifyComment.stringifyComment)(dc, ''));
  }

  return lines.join('\n') + '\n';
}

},{"../nodes/Node.js":78,"./stringify.js":115,"./stringifyComment.js":117}],119:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringifyNumber = stringifyNumber;

function stringifyNumber({
  format,
  minFractionDigits,
  tag,
  value
}) {
  if (typeof value === 'bigint') return String(value);
  const num = typeof value === 'number' ? value : Number(value);
  if (!isFinite(num)) return isNaN(num) ? '.nan' : num < 0 ? '-.inf' : '.inf';
  let n = JSON.stringify(value);

  if (!format && minFractionDigits && (!tag || tag === 'tag:yaml.org,2002:float') && /^\d/.test(n)) {
    let i = n.indexOf('.');

    if (i < 0) {
      i = n.length;
      n += '.';
    }

    let d = minFractionDigits - (n.length - i - 1);

    while (d-- > 0) n += '0';
  }

  return n;
}

},{}],120:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringifyPair = stringifyPair;

var _Node = require("../nodes/Node.js");

var _Scalar = require("../nodes/Scalar.js");

var _stringify = require("./stringify.js");

var _stringifyComment = require("./stringifyComment.js");

function stringifyPair({
  key,
  value
}, ctx, onComment, onChompKeep) {
  const {
    allNullValues,
    doc,
    indent,
    indentStep,
    options: {
      indentSeq,
      simpleKeys
    }
  } = ctx;
  let keyComment = (0, _Node.isNode)(key) && key.comment || null;

  if (simpleKeys) {
    if (keyComment) {
      throw new Error('With simple keys, key nodes cannot have comments');
    }

    if ((0, _Node.isCollection)(key)) {
      const msg = 'With simple keys, collection cannot be used as a key value';
      throw new Error(msg);
    }
  }

  let explicitKey = !simpleKeys && (!key || keyComment && value == null && !ctx.inFlow || (0, _Node.isCollection)(key) || ((0, _Node.isScalar)(key) ? key.type === _Scalar.Scalar.BLOCK_FOLDED || key.type === _Scalar.Scalar.BLOCK_LITERAL : typeof key === 'object'));
  ctx = Object.assign({}, ctx, {
    allNullValues: false,
    implicitKey: !explicitKey && (simpleKeys || !allNullValues),
    indent: indent + indentStep
  });
  let keyCommentDone = false;
  let chompKeep = false;
  let str = (0, _stringify.stringify)(key, ctx, () => keyCommentDone = true, () => chompKeep = true);

  if (!explicitKey && !ctx.inFlow && str.length > 1024) {
    if (simpleKeys) throw new Error('With simple keys, single line scalar must not span more than 1024 characters');
    explicitKey = true;
  }

  if (ctx.inFlow) {
    if (allNullValues || value == null) {
      if (keyCommentDone && onComment) onComment();
      return explicitKey ? `? ${str}` : str;
    }
  } else if (allNullValues && !simpleKeys || value == null && explicitKey) {
    if (keyCommentDone) keyComment = null;
    if (chompKeep && !keyComment && onChompKeep) onChompKeep();
    return (0, _stringifyComment.addComment)(`? ${str}`, ctx.indent, keyComment);
  }

  if (keyCommentDone) keyComment = null;
  str = explicitKey ? `? ${(0, _stringifyComment.addComment)(str, ctx.indent, keyComment)}\n${indent}:` : (0, _stringifyComment.addComment)(`${str}:`, ctx.indent, keyComment);
  let vcb = '';
  let valueComment = null;

  if ((0, _Node.isNode)(value)) {
    if (value.spaceBefore) vcb = '\n';
    if (value.commentBefore) vcb += `\n${(0, _stringifyComment.stringifyComment)(value.commentBefore, ctx.indent)}`;
    valueComment = value.comment;
  } else if (value && typeof value === 'object') {
    value = doc.createNode(value);
  }

  ctx.implicitKey = false;
  if (!explicitKey && !keyComment && (0, _Node.isScalar)(value)) ctx.indentAtStart = str.length + 1;
  chompKeep = false;

  if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && (0, _Node.isSeq)(value) && !value.flow && !value.tag && !value.anchor) {
    // If indentSeq === false, consider '- ' as part of indentation where possible
    ctx.indent = ctx.indent.substr(2);
  }

  let valueCommentDone = false;
  const valueStr = (0, _stringify.stringify)(value, ctx, () => valueCommentDone = true, () => chompKeep = true);
  let ws = ' ';

  if (vcb || keyComment) {
    ws = valueStr === '' && !ctx.inFlow ? vcb : `${vcb}\n${ctx.indent}`;
  } else if (!explicitKey && (0, _Node.isCollection)(value)) {
    const flow = valueStr[0] === '[' || valueStr[0] === '{';
    if (!flow || valueStr.includes('\n')) ws = `\n${ctx.indent}`;
  } else if (valueStr === '' || valueStr[0] === '\n') ws = '';

  if (ctx.inFlow) {
    if (valueCommentDone && onComment) onComment();
    return str + ws + valueStr;
  } else {
    if (valueCommentDone) valueComment = null;
    if (chompKeep && !valueComment && onChompKeep) onChompKeep();
    return (0, _stringifyComment.addComment)(str + ws + valueStr, ctx.indent, valueComment);
  }
}

},{"../nodes/Node.js":78,"../nodes/Scalar.js":80,"./stringify.js":115,"./stringifyComment.js":117}],121:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringifyString = stringifyString;

var _Scalar = require("../nodes/Scalar.js");

var _foldFlowLines = require("./foldFlowLines.js");

const getFoldOptions = ctx => ({
  indentAtStart: ctx.indentAtStart,
  lineWidth: ctx.options.lineWidth,
  minContentWidth: ctx.options.minContentWidth
}); // Also checks for lines starting with %, as parsing the output as YAML 1.1 will
// presume that's starting a new document.


const containsDocumentMarker = str => /^(%|---|\.\.\.)/m.test(str);

function lineLengthOverLimit(str, lineWidth, indentLength) {
  if (!lineWidth || lineWidth < 0) return false;
  const limit = lineWidth - indentLength;
  const strLen = str.length;
  if (strLen <= limit) return false;

  for (let i = 0, start = 0; i < strLen; ++i) {
    if (str[i] === '\n') {
      if (i - start > limit) return true;
      start = i + 1;
      if (strLen - start <= limit) return false;
    }
  }

  return true;
}

function doubleQuotedString(value, ctx) {
  const json = JSON.stringify(value);
  if (ctx.options.doubleQuotedAsJSON) return json;
  const {
    implicitKey
  } = ctx;
  const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
  const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');
  let str = '';
  let start = 0;

  for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
    if (ch === ' ' && json[i + 1] === '\\' && json[i + 2] === 'n') {
      // space before newline needs to be escaped to not be folded
      str += json.slice(start, i) + '\\ ';
      i += 1;
      start = i;
      ch = '\\';
    }

    if (ch === '\\') switch (json[i + 1]) {
      case 'u':
        {
          str += json.slice(start, i);
          const code = json.substr(i + 2, 4);

          switch (code) {
            case '0000':
              str += '\\0';
              break;

            case '0007':
              str += '\\a';
              break;

            case '000b':
              str += '\\v';
              break;

            case '001b':
              str += '\\e';
              break;

            case '0085':
              str += '\\N';
              break;

            case '00a0':
              str += '\\_';
              break;

            case '2028':
              str += '\\L';
              break;

            case '2029':
              str += '\\P';
              break;

            default:
              if (code.substr(0, 2) === '00') str += '\\x' + code.substr(2);else str += json.substr(i, 6);
          }

          i += 5;
          start = i + 1;
        }
        break;

      case 'n':
        if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
          i += 1;
        } else {
          // folding will eat first newline
          str += json.slice(start, i) + '\n\n';

          while (json[i + 2] === '\\' && json[i + 3] === 'n' && json[i + 4] !== '"') {
            str += '\n';
            i += 2;
          }

          str += indent; // space after newline needs to be escaped to not be folded

          if (json[i + 2] === ' ') str += '\\';
          i += 1;
          start = i + 1;
        }

        break;

      default:
        i += 1;
    }
  }

  str = start ? str + json.slice(start) : json;
  return implicitKey ? str : (0, _foldFlowLines.foldFlowLines)(str, indent, _foldFlowLines.FOLD_QUOTED, getFoldOptions(ctx));
}

function singleQuotedString(value, ctx) {
  if (ctx.options.singleQuote === false || ctx.implicitKey && value.includes('\n') || /[ \t]\n|\n[ \t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline
  ) return doubleQuotedString(value, ctx);
  const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');
  const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&\n${indent}`) + "'";
  return ctx.implicitKey ? res : (0, _foldFlowLines.foldFlowLines)(res, indent, _foldFlowLines.FOLD_FLOW, getFoldOptions(ctx));
}

function quotedString(value, ctx) {
  const {
    singleQuote
  } = ctx.options;
  let qs;
  if (singleQuote === false) qs = doubleQuotedString;else {
    const hasDouble = value.includes('"');
    const hasSingle = value.includes("'");
    if (hasDouble && !hasSingle) qs = singleQuotedString;else if (hasSingle && !hasDouble) qs = doubleQuotedString;else qs = singleQuote ? singleQuotedString : doubleQuotedString;
  }
  return qs(value, ctx);
}

function blockString({
  comment,
  type,
  value
}, ctx, onComment, onChompKeep) {
  const {
    lineWidth,
    blockQuote
  } = ctx.options; // 1. Block can't end in whitespace unless the last line is non-empty.
  // 2. Strings consisting of only whitespace are best rendered explicitly.

  if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
    return quotedString(value, ctx);
  }

  const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');
  const literal = blockQuote === 'literal' ? true : blockQuote === 'folded' || type === _Scalar.Scalar.BLOCK_FOLDED ? false : type === _Scalar.Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, lineWidth, indent.length);
  if (!value) return literal ? '|\n' : '>\n'; // determine chomping from whitespace at value end

  let chomp;
  let endStart;

  for (endStart = value.length; endStart > 0; --endStart) {
    const ch = value[endStart - 1];
    if (ch !== '\n' && ch !== '\t' && ch !== ' ') break;
  }

  let end = value.substring(endStart);
  const endNlPos = end.indexOf('\n');

  if (endNlPos === -1) {
    chomp = '-'; // strip
  } else if (value === end || endNlPos !== end.length - 1) {
    chomp = '+'; // keep

    if (onChompKeep) onChompKeep();
  } else {
    chomp = ''; // clip
  }

  if (end) {
    value = value.slice(0, -end.length);
    if (end[end.length - 1] === '\n') end = end.slice(0, -1);
    end = end.replace(/\n+(?!\n|$)/g, `$&${indent}`);
  } // determine indent indicator from whitespace at value start


  let startWithSpace = false;
  let startEnd;
  let startNlPos = -1;

  for (startEnd = 0; startEnd < value.length; ++startEnd) {
    const ch = value[startEnd];
    if (ch === ' ') startWithSpace = true;else if (ch === '\n') startNlPos = startEnd;else break;
  }

  let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);

  if (start) {
    value = value.substring(start.length);
    start = start.replace(/\n+/g, `$&${indent}`);
  }

  const indentSize = indent ? '2' : '1'; // root is at -1

  let header = (literal ? '|' : '>') + (startWithSpace ? indentSize : '') + chomp;

  if (comment) {
    header += ' #' + comment.replace(/ ?[\r\n]+/g, ' ');
    if (onComment) onComment();
  }

  if (literal) {
    value = value.replace(/\n+/g, `$&${indent}`);
    return `${header}\n${indent}${start}${value}${end}`;
  }

  value = value.replace(/\n+/g, '\n$&').replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, '$1$2') // more-indented lines aren't folded
  //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent
  .replace(/\n+/g, `$&${indent}`);
  const body = (0, _foldFlowLines.foldFlowLines)(`${start}${value}${end}`, indent, _foldFlowLines.FOLD_BLOCK, getFoldOptions(ctx));
  return `${header}\n${indent}${body}`;
}

function plainString(item, ctx, onComment, onChompKeep) {
  var _a;

  const {
    type,
    value
  } = item;
  const {
    actualString,
    implicitKey,
    indent,
    inFlow
  } = ctx;

  if (implicitKey && /[\n[\]{},]/.test(value) || inFlow && /[[\]{},]/.test(value)) {
    return quotedString(value, ctx);
  }

  if (!value || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
    // not allowed:
    // - empty string, '-' or '?'
    // - start with an indicator character (except [?:-]) or /[?-] /
    // - '\n ', ': ' or ' \n' anywhere
    // - '#' not preceded by a non-space char
    // - end with ' ' or ':'
    return implicitKey || inFlow || value.indexOf('\n') === -1 ? quotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);
  }

  if (!implicitKey && !inFlow && type !== _Scalar.Scalar.PLAIN && value.indexOf('\n') !== -1) {
    // Where allowed & type not set explicitly, prefer block style for multiline strings
    return blockString(item, ctx, onComment, onChompKeep);
  }

  if (indent === '' && containsDocumentMarker(value)) {
    ctx.forceBlockIndent = true;
    return blockString(item, ctx, onComment, onChompKeep);
  }

  const str = value.replace(/\n+/g, `$&\n${indent}`); // Verify that output will be parsed as a string, as e.g. plain numbers and
  // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),
  // and others in v1.1.

  if (actualString) {
    for (const tag of ctx.doc.schema.tags) {
      if (tag.default && tag.tag !== 'tag:yaml.org,2002:str' && ((_a = tag.test) === null || _a === void 0 ? void 0 : _a.test(str))) return quotedString(value, ctx);
    }
  }

  return implicitKey ? str : (0, _foldFlowLines.foldFlowLines)(str, indent, _foldFlowLines.FOLD_FLOW, getFoldOptions(ctx));
}

function stringifyString(item, ctx, onComment, onChompKeep) {
  const {
    implicitKey,
    inFlow
  } = ctx;
  const ss = typeof item.value === 'string' ? item : Object.assign({}, item, {
    value: String(item.value)
  });
  let {
    type
  } = item;

  if (type !== _Scalar.Scalar.QUOTE_DOUBLE) {
    // force double quotes on control characters & unpaired surrogates
    if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value)) type = _Scalar.Scalar.QUOTE_DOUBLE;
  }

  const _stringify = _type => {
    switch (_type) {
      case _Scalar.Scalar.BLOCK_FOLDED:
      case _Scalar.Scalar.BLOCK_LITERAL:
        return implicitKey || inFlow ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers
        : blockString(ss, ctx, onComment, onChompKeep);

      case _Scalar.Scalar.QUOTE_DOUBLE:
        return doubleQuotedString(ss.value, ctx);

      case _Scalar.Scalar.QUOTE_SINGLE:
        return singleQuotedString(ss.value, ctx);

      case _Scalar.Scalar.PLAIN:
        return plainString(ss, ctx, onComment, onChompKeep);

      default:
        return null;
    }
  };

  let res = _stringify(type);

  if (res === null) {
    const {
      defaultKeyType,
      defaultStringType
    } = ctx.options;
    const t = implicitKey && defaultKeyType || defaultStringType;
    res = _stringify(t);
    if (res === null) throw new Error(`Unsupported default string type ${t}`);
  }

  return res;
}

},{"../nodes/Scalar.js":80,"./foldFlowLines.js":114}],122:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visit = visit;

var _Node = require("./nodes/Node.js");

const BREAK = Symbol('break visit');
const SKIP = Symbol('skip children');
const REMOVE = Symbol('remove node');
/**
 * Apply a visitor to an AST node or document.
 *
 * Walks through the tree (depth-first) starting from `node`, calling a
 * `visitor` function with three arguments:
 *   - `key`: For sequence values and map `Pair`, the node's index in the
 *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.
 *     `null` for the root node.
 *   - `node`: The current node.
 *   - `path`: The ancestry of the current node.
 *
 * The return value of the visitor may be used to control the traversal:
 *   - `undefined` (default): Do nothing and continue
 *   - `visit.SKIP`: Do not visit the children of this node, continue with next
 *     sibling
 *   - `visit.BREAK`: Terminate traversal completely
 *   - `visit.REMOVE`: Remove the current node, then continue with the next one
 *   - `Node`: Replace the current node, then continue by visiting it
 *   - `number`: While iterating the items of a sequence or map, set the index
 *     of the next step. This is useful especially if the index of the current
 *     node has changed.
 *
 * If `visitor` is a single function, it will be called with all values
 * encountered in the tree, including e.g. `null` values. Alternatively,
 * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,
 * `Alias` and `Scalar` node. To define the same visitor function for more than
 * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)
 * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most
 * specific defined one will be used for each node.
 */

function visit(node, visitor) {
  if (typeof visitor === 'object' && (visitor.Collection || visitor.Node || visitor.Value)) {
    visitor = Object.assign({
      Alias: visitor.Node,
      Map: visitor.Node,
      Scalar: visitor.Node,
      Seq: visitor.Node
    }, visitor.Value && {
      Map: visitor.Value,
      Scalar: visitor.Value,
      Seq: visitor.Value
    }, visitor.Collection && {
      Map: visitor.Collection,
      Seq: visitor.Collection
    }, visitor);
  }

  if ((0, _Node.isDocument)(node)) {
    const cd = _visit(null, node.contents, visitor, Object.freeze([node]));

    if (cd === REMOVE) node.contents = null;
  } else _visit(null, node, visitor, Object.freeze([]));
} // Without the `as symbol` casts, TS declares these in the `visit`
// namespace using `var`, but then complains about that because
// `unique symbol` must be `const`.

/** Terminate visit traversal completely */


visit.BREAK = BREAK;
/** Do not visit the children of the current node */

visit.SKIP = SKIP;
/** Remove the current node */

visit.REMOVE = REMOVE;

function _visit(key, node, visitor, path) {
  let ctrl = undefined;
  if (typeof visitor === 'function') ctrl = visitor(key, node, path);else if ((0, _Node.isMap)(node)) {
    if (visitor.Map) ctrl = visitor.Map(key, node, path);
  } else if ((0, _Node.isSeq)(node)) {
    if (visitor.Seq) ctrl = visitor.Seq(key, node, path);
  } else if ((0, _Node.isPair)(node)) {
    if (visitor.Pair) ctrl = visitor.Pair(key, node, path);
  } else if ((0, _Node.isScalar)(node)) {
    if (visitor.Scalar) ctrl = visitor.Scalar(key, node, path);
  } else if ((0, _Node.isAlias)(node)) {
    if (visitor.Alias) ctrl = visitor.Alias(key, node, path);
  }

  if ((0, _Node.isNode)(ctrl) || (0, _Node.isPair)(ctrl)) {
    const parent = path[path.length - 1];

    if ((0, _Node.isCollection)(parent)) {
      parent.items[key] = ctrl;
    } else if ((0, _Node.isPair)(parent)) {
      if (key === 'key') parent.key = ctrl;else parent.value = ctrl;
    } else if ((0, _Node.isDocument)(parent)) {
      parent.contents = ctrl;
    } else {
      const pt = (0, _Node.isAlias)(parent) ? 'alias' : 'scalar';
      throw new Error(`Cannot replace node with ${pt} parent`);
    }

    return _visit(key, ctrl, visitor, path);
  }

  if (typeof ctrl !== 'symbol') {
    if ((0, _Node.isCollection)(node)) {
      path = Object.freeze(path.concat(node));

      for (let i = 0; i < node.items.length; ++i) {
        const ci = _visit(i, node.items[i], visitor, path);

        if (typeof ci === 'number') i = ci - 1;else if (ci === BREAK) return BREAK;else if (ci === REMOVE) {
          node.items.splice(i, 1);
          i -= 1;
        }
      }
    } else if ((0, _Node.isPair)(node)) {
      path = Object.freeze(path.concat(node));

      const ck = _visit('key', node.key, visitor, path);

      if (ck === BREAK) return BREAK;else if (ck === REMOVE) node.key = null;

      const cv = _visit('value', node.value, visitor, path);

      if (cv === BREAK) return BREAK;else if (cv === REMOVE) node.value = null;
    }
  }

  return ctrl;
}

},{"./nodes/Node.js":78}],123:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
exports.default = void 0;

var YAML = _interopRequireWildcard(require("./dist/index.js"));

Object.keys(YAML).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === YAML[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return YAML[key];
    }
  });
});

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// `export * as default from ...` fails on Webpack v4
// https://github.com/eemeli/yaml/issues/228
var _default = YAML;
exports.default = _default;

},{"./dist/index.js":74}],124:[function(require,module,exports){

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _JavaScriptLexer = _interopRequireDefault(require("./lib/JavaScriptLexer.js"));

var _JavaScriptParser = _interopRequireDefault(require("./lib/JavaScriptParser.js"));

var _JavaScriptAWSListener = _interopRequireDefault(require("./lib/JavaScriptAWSListener.js"));

var _Python3Lexer = _interopRequireDefault(require("./lib/Python3Lexer.js"));

var _Python3Parser = _interopRequireDefault(require("./lib/Python3Parser.js"));

var _Python3AWSListener = _interopRequireDefault(require("./lib/Python3AWSListener.js"));

var _JavaLexer = _interopRequireDefault(require("./lib/JavaLexer.js"));

var _JavaParser = _interopRequireDefault(require("./lib/JavaParser.js"));

var _JavaAWSListener = _interopRequireDefault(require("./lib/JavaAWSListener.js"));

var _CPP14Lexer = _interopRequireDefault(require("./lib/CPP14Lexer.js"));

var _CPP14Parser = _interopRequireDefault(require("./lib/CPP14Parser.js"));

var _CPP14AWSListener = _interopRequireDefault(require("./lib/CPP14AWSListener.js"));

var _GoLexer = _interopRequireDefault(require("./lib/GoLexer.js"));

var _GoParser = _interopRequireDefault(require("./lib/GoParser.js"));

var _GoAWSListener = _interopRequireDefault(require("./lib/GoAWSListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class AWSParser {
  constructor() {
    this.client_calls = [];
  }

  treeWalker(tree, depth) {
    console.log(" ".repeat(depth * 2) + tree.constructor.name + " - " + tree.getText().substr(0, 50));

    if (tree.children) {
      for (let child of tree.children) {
        this.treeWalker(child, depth + 1);
      }
    }
  }

  ParseInput(input, language) {
    let lexer, tokens, parser, tree, listener;
    input += "\n";
    let chars = new _antlr.default.InputStream(input);

    switch (language) {
      case 'js':
        lexer = new _JavaScriptLexer.default(chars);
        lexer.strictMode = false;
        tokens = new _antlr.default.CommonTokenStream(lexer);
        parser = new _JavaScriptParser.default(tokens);
        parser.buildParseTrees = true;
        tree = parser.program(); //this.treeWalker(tree, 0);

        listener = new _JavaScriptAWSListener.default();

        _antlr.default.tree.ParseTreeWalker.DEFAULT.walk(listener, tree);

        this.client_calls = listener.ClientCalls; //console.log(listener.SDKDeclarations);
        //console.log(listener.ClientDeclarations);
        //console.log(listener.VariableDeclarations);
        //console.log(listener.ClientCalls);

        break;

      case 'python':
        lexer = new _Python3Lexer.default(chars);
        lexer.strictMode = false;
        tokens = new _antlr.default.CommonTokenStream(lexer);
        parser = new _Python3Parser.default(tokens);
        parser.buildParseTrees = true;
        tree = parser.file_input();
        listener = new _Python3AWSListener.default();

        _antlr.default.tree.ParseTreeWalker.DEFAULT.walk(listener, tree);

        this.client_calls = listener.ClientCalls;
        break;

      case 'java':
        lexer = new _JavaLexer.default(chars);
        lexer.strictMode = false;
        tokens = new _antlr.default.CommonTokenStream(lexer);
        parser = new _JavaParser.default(tokens);
        parser.buildParseTrees = true;
        tree = parser.compilationUnit();
        listener = new _JavaAWSListener.default();

        _antlr.default.tree.ParseTreeWalker.DEFAULT.walk(listener, tree);

        this.client_calls = listener.ClientCalls;
        break;

      case 'go':
        lexer = new _GoLexer.default(chars);
        lexer.strictMode = false;
        tokens = new _antlr.default.CommonTokenStream(lexer);
        parser = new _GoParser.default(tokens);
        parser.buildParseTrees = true;
        tree = parser.sourceFile();
        listener = new _GoAWSListener.default();

        _antlr.default.tree.ParseTreeWalker.DEFAULT.walk(listener, tree);

        this.client_calls = listener.ClientCalls;
        break;

      case 'cplusplus':
        lexer = new _CPP14Lexer.default(chars);
        lexer.strictMode = false;
        tokens = new _antlr.default.CommonTokenStream(lexer);
        parser = new _CPP14Parser.default(tokens);
        parser.buildParseTrees = true;
        tree = parser.translationUnit();
        listener = new _CPP14AWSListener.default();

        _antlr.default.tree.ParseTreeWalker.DEFAULT.walk(listener, tree);

        this.client_calls = listener.ClientCalls;
        break;

      default:
        throw "Unknown language";
    }
  }

  GetNormalizedServiceCalls() {
    let calls = [];

    for (let client_call of this.client_calls) {
      let method = client_call.method.substr(0, 1).toUpperCase() + client_call.method.substr(1).replace(/_([a-z0-9])/g, (match, p1) => p1.toUpperCase());
      calls.push({
        'service': client_call.client.type.toLowerCase(),
        'method': method,
        'params': client_call.args
      });
    }

    return calls;
  }

}

exports.default = AWSParser;

},{"./lib/CPP14AWSListener.js":126,"./lib/CPP14Lexer.js":127,"./lib/CPP14Parser.js":128,"./lib/GoAWSListener.js":131,"./lib/GoLexer.js":132,"./lib/GoParser.js":133,"./lib/JavaAWSListener.js":137,"./lib/JavaLexer.js":138,"./lib/JavaParser.js":139,"./lib/JavaScriptAWSListener.js":142,"./lib/JavaScriptLexer.js":143,"./lib/JavaScriptParser.js":145,"./lib/Python3AWSListener.js":149,"./lib/Python3Lexer.js":150,"./lib/Python3Parser.js":152,"antlr4":42}],125:[function(require,module,exports){

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _yaml = _interopRequireDefault(require("yaml"));

var _AWSParser = _interopRequireDefault(require("./AWSParser.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const fs = require("fs");

class IAMFast {
  constructor(aws_partition, aws_region, aws_accountid) {
    this.aws_partition = aws_partition || 'aws';
    this.aws_region = aws_region || 'us-east-1';
    this.aws_accountid = aws_accountid || '123456789012';
    this.tracked_environment_variables = [];
    this.iam_def = JSON.parse(fs.readFileSync('./lib/iam_definition.json'));
    this.mappings = JSON.parse(fs.readFileSync('./lib/map.json'));
  }

  resolveSpecials(arn, call, mandatory, mapped_priv) {
    let start_index = arn.indexOf("%%");
    let end_index = arn.lastIndexOf("%%");
    let arns = [];

    if (start_index > -1 && end_index != start_index) {
      let parts = arn.substr(start_index + 2, end_index - start_index + 2).split("%");

      if (parts.length < 2) {
        return [arn.substr(0, startIndex) + "*" + arn.substr(end_index + 2)];
      }

      switch (parts[0]) {
        case "iftruthy":
          if (parts.length == 3) {
            // weird bug for empty string false values
            parts.push("");
          }

          if (parts.length != 4) {
            return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
          }

          arns = this.subSARARN(parts[1], call['params'], mapped_priv);

          if (arns.length < 1 || arns[0] == "") {
            if (parts[3] == "") {
              if (mandatory) {
                return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
              }

              return [arn.substr(0, start_index) + arn.substr(end_index + 2)];
            }

            return [arn.substr(0, start_index) + parts[3] + arn.substr(end_index + 2)];
          }

          if (parts[2] == "" && mandatory) {
            return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
          }

          return [arn.substr(0, start_index) + parts[2] + arn.substr(end_index + 2)];

        case "urlencode":
          if (parts.length != 2) {
            return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
          }

          arns = this.subSARARN(parts[1], call['params'], mapped_priv);

          if (arns.length < 1 || arns[0] == "") {
            if (mandatory) {
              return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
            }

            return [arn.substr(0, start_index) + arn.substr(end_index + 2)];
          }

          return [arn.substr(0, start_index) + encodeURIComponent(arns[0]) + arn.substr(end_index + 2)];

        case "iftemplatematch":
          if (parts.length != 2) {
            return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
          }

          arns = this.subSARARN(parts[1], call['params'], mapped_priv);

          if (arns.length < 1 || arns[0] == "") {
            if (mandatory) {
              return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
            }

            return [arn.substr(0, start_index) + arn.substr(end_index + 2)];
          }
          /*
          template := regexp.MustCompile(`\\\$\\\{.+?\\\}`).ReplaceAllString(regexp.QuoteMeta(*resourceArnTemplate), ".*?")
                           if regexp.MustCompile(template).MatchString(arns[0]) {
                  return []string{arn[0:startIndex] + arns[0] + arn[endIndex+2:]}
              }
          */


          return [arn.substr(0, start_index) + arn.substr(end_index + 2)];

        case "many":
          let many_parts = [];

          for (let part of parts.slice(1)) {
            arns = this.subSARARN(part, call['params'], mapped_priv);

            if (arns.length < 1 || arns[0] == "") {
              if (mandatory) {
                return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
              }

              return [arn.substr(0, start_index) + arn.substr(end_index + 2)];
            }

            many_parts.push(arns[0]);
          }

          return many_parts;

        case "regex":
          if (parts.length != 3) {
            return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
          }

          arns = this.subSARARN(parts[1], call['params'], mapped_priv);

          if (arns.length < 1 || arns[0] == "") {
            if (mandatory) {
              return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
            }

            return [arn.substr(0, start_index) + arn.substr(end_index + 2)];
          }

          if (parts[2][0] == "/") {
            parts[2] = parts[2].substr(1, -2);
          }

          let groups = parts[2].matchAll(arns[0].replace(/\$/g, "$$"));

          if (groups.length < 2 || groups[1] == "") {
            if (mandatory) {
              return [arn.substr(0, start_index) + "*" + arn.substr(end_index + 2)];
            }

            return [arn.substr(0, start_index) + arn.substr(end_index + 2)];
          }

          return [arn.substr(0, start_index) + groups[1] + arn.substr(end_index + 2)];

        default:
          throw "Unknown special function: " + parts[0];
      }
    }

    return [arn];
  }

  subSARARN(arn, params, mapped_priv) {
    if (mapped_priv && mapped_priv.resource_mappings) {
      for (let param of Object.keys(mapped_priv.resource_mappings)) {
        let r = new RegExp("\\$\\{" + param + "\\}", "gi");
        arn = arn.replace(r, mapped_priv.resource_mappings[param].template);
      }
    }

    for (let param of Object.keys(params)) {
      let r = new RegExp("\\$\\{" + param + "\\}", "gi");
      arn = arn.replace(r, params[param]);
    }

    return arn.replace(/\$\{Partition\}/g, this.aws_partition).replace(/\$\{Region\}/g, this.aws_region).replace(/\$\{Account\}/g, this.aws_accountid).replace(/\$\{.*\}/g, "*");
  }

  toIAMPolicy(privs) {
    let policy = {
      'Version': '2012-10-17',
      'Statement': []
    }; // dedup

    let byAction = {};

    for (let priv of privs) {
      if (!byAction[priv.action]) {
        byAction[priv.action] = [];
      }

      byAction[priv.action] = byAction[priv.action].concat(priv.resource);
    }

    for (let k of Object.keys(byAction)) {
      policy.Statement.push({
        'Effect': 'Allow',
        'Action': k,
        'Resource': [...new Set(byAction[k])]
      });
    }

    return JSON.stringify(policy, null, 4);
  }

  mapServicePrefix(prefix) {
    if (this.mappings['sdk_service_mappings'][prefix]) {
      return this.mappings['sdk_service_mappings'][prefix];
    }

    return prefix;
  }

  mapCallToPrivilegeArray(service, call) {
    let lower_priv = `${call.service}.${call.method}`;
    let privileges = []; // check if it's in the mapping

    for (let mappingkey of Object.keys(this.mappings.sdk_method_iam_mappings)) {
      if (lower_priv == mappingkey.toLowerCase()) {
        for (var mapped_priv of this.mappings.sdk_method_iam_mappings[mappingkey]) {
          for (let privilege of service.privileges) {
            if (this.mapServicePrefix(service.prefix).toLowerCase() + ":" + privilege.privilege.toLowerCase() == mapped_priv.action.toLowerCase()) {
              privileges.push({
                'sarpriv': privilege,
                'mappedpriv': mapped_priv
              });
              break;
            }
          }
        }

        return privileges;
      }
    } // last resort check the SAR directly


    if (!privileges.length) {
      for (let privilege of service.privileges) {
        if (call.method.toLowerCase() == privilege.privilege.toLowerCase()) {
          return [{
            'sarpriv': privilege,
            'mappedpriv': null
          }];
        }
      }
    }

    return [];
  }

  GenerateSAMTemplate(code, language) {
    const custom_tags = {
      customTags: [{
        identify: value => value,
        tag: '!Ref',
        resolve: str => str
      }, {
        identify: value => value,
        tag: '!Sub',
        resolve: str => str
      }]
    };

    let sam_template = _yaml.default.parseDocument(`
            AWSTemplateFormatVersion: '2010-09-09'
            Transform: AWS::Serverless-2016-10-31

            Parameters:
                "%%$": ""
            
            Resources:
                LambdaFunction:
                    Type: AWS::Serverless::Function
                    Properties:
                        Handler: index.handler
                        Runtime: nodejs10.x
                        CodeUri: .
                        MemorySize: 128
                        Timeout: 10
                        Environment:
                            Variables:
                                "%%$": ""
                        Policies:
                          - {}
        `, custom_tags);

    this.aws_region = `\${AWS::Region}`;
    this.aws_partition = `aws`;
    this.aws_accountid = `\${AWS::AccountId}`;
    let iam_policy = JSON.parse(this.GenerateIAMPolicy(code, language));
    sam_template.addIn(['Resources', 'LambdaFunction', 'Properties', 'Policies'], new _yaml.default.Document(iam_policy));
    this.tracked_environment_variables.forEach(env => {
      let envkey = env.name[0].toUpperCase() + env.name.substr(1) || env;
      envkey = envkey.replaceAll(/[^a-zA-Z0-9]/g, '');

      if (!sam_template.hasIn(['Resources', 'LambdaFunction', 'Properties', 'Environment', 'Variables', env.name])) {
        sam_template.addIn(['Resources', 'LambdaFunction', 'Properties', 'Environment', 'Variables'], sam_template.createPair(env.name, sam_template.createNode(envkey, null, {
          tag: "!Ref",
          flow: true
        }), {
          flow: true
        }));
      }

      if (!sam_template.hasIn(['Parameters', envkey])) {
        sam_template.addIn(['Parameters'], sam_template.createPair(envkey, new _yaml.default.Document({
          "Type": "String"
        })));
      }
    });
    sam_template.deleteIn(['Parameters', '%%$']);
    sam_template.deleteIn(['Resources', 'LambdaFunction', 'Properties', 'Environment', 'Variables', '%%$']);
    sam_template.deleteIn(['Resources', 'LambdaFunction', 'Properties', 'Policies', 0]);

    if (sam_template.get('Parameters').items.length < 1) {
      sam_template.deleteIn(['Parameters']);
      sam_template.deleteIn(['Resources', 'LambdaFunction', 'Properties', 'Environment']);
    }

    return _yaml.default.stringify(sam_template, custom_tags);
  }

  GenerateIAMPolicy(code, language) {
    const GENERIC_SERVICE_METHODS = new Set(["endpoint", "defineservice", "makerequest", "makeunauthenticatedrequest", "setuprequestlisteners", "waitfor"]);
    let privs = [];

    if (code.trim()[0] == '#') {
      let lines = code.split("\n");
      lines.shift();
      code = lines.join("\n");
    }

    let parser = new _AWSParser.default();
    parser.ParseInput(code, language);
    let tracked_calls = parser.GetNormalizedServiceCalls();

    for (let tracked_call of tracked_calls) {
      let found_match = false;

      for (let service of this.iam_def) {
        if (this.mapServicePrefix(service.prefix).toLowerCase() == tracked_call.service) {
          let privilege_array = this.mapCallToPrivilegeArray(service, tracked_call);

          for (let privilege of privilege_array) {
            found_match = true;
            let resource_arns = []; //  initialize with resource_arns = ["*"];, so we don't need to have the check

            for (let resource_type of privilege.sarpriv.resource_types) {
              for (let resource of service.resources) {
                if (resource.resource.toLowerCase() == resource_type.resource_type.replace(/\*/g, "").toLowerCase() && resource.resource != "") {
                  let subbed_arn = this.subSARARN(resource.arn, tracked_call.params, privilege.mappedpriv);

                  if (resource_type.resource_type.endsWith("*") || !subbed_arn.endsWith("*")) {
                    resource_arns = resource_arns.concat(this.resolveSpecials(subbed_arn, tracked_call, false, privilege.mappedpriv));
                  }
                }
              }
            }

            if (resource_arns.length == 0) {
              resource_arns = ["*"];
            }

            privs.push({
              'action': this.mapServicePrefix(service.prefix) + ":" + privilege.sarpriv.privilege,
              'explanation': privilege.sarpriv.description,
              'resource': resource_arns
            });
          }
        }
      }

      if (!found_match && !GENERIC_SERVICE_METHODS.has(tracked_call.method)) {
        console.warn(`WARNING: Could not find privilege match for ${tracked_call.service}:${tracked_call.method}`);
      }
    }

    return this.toIAMPolicy(privs);
  }

}

exports.default = IAMFast;

},{"./AWSParser.js":124,"fs":49,"yaml":123}],126:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _CPP14Parser = _interopRequireDefault(require("./CPP14Parser.js"));

var _CPP14ParserListener = _interopRequireDefault(require("./CPP14ParserListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CPP14AWSListener extends _CPP14ParserListener.default {
  constructor() {
    super();
    this.SDKDeclarations = [];
    this.ClientDeclarations = [];
    this.ClientCalls = [];
    this.VariableDeclarations = [];
    this.SDKDeclarations.push({
      'variable': 'Aws'
    });
  }

  exitSimpleDeclaration(ctx) {
    if (ctx.children.length == 3 && ctx.children[0] instanceof _CPP14Parser.default.DeclSpecifierSeqContext && ctx.children[1] instanceof _CPP14Parser.default.InitDeclaratorListContext && ctx.children[2].getText() == ";") {
      let matchString = ctx.children[0].getText().match(/^Aws::([a-zA-Z0-9]+)::(([a-zA-Z0-9]+)Client)$/);

      if (matchString) {
        for (let declerator of ctx.children[1].children) {
          if (declerator instanceof _CPP14Parser.default.InitDeclaratorContext && declerator.getText().match(/^[a-zA-Z0-9-_]+$/)) {
            if (matchString[1].toLowerCase() == matchString[3].toLowerCase()) {
              this.ClientDeclarations.push({
                'type': matchString[1].toLowerCase(),
                'variable': declerator.getText(),
                'argsRaw': null,
                'sdk': this.SDKDeclarations[0]
              });
            }
          }
        }
      }
    }
  }

  exitPostfixExpression(ctx) {
    if (ctx.children.length == 4 && ctx.children[0] instanceof _CPP14Parser.default.PostfixExpressionContext && ctx.children[1].getText() == "(" && ctx.children[3].getText() == ")") {
      let argsRaw = ctx.children[2];

      if (ctx.children[0].children.length == 3 && ctx.children[0].children[0] instanceof _CPP14Parser.default.PostfixExpressionContext && ctx.children[0].children[0].children.length == 1 && ctx.children[0].children[0].children[0] instanceof _CPP14Parser.default.PrimaryExpressionContext && ctx.children[0].children[0].children[0].children.length == 1 && ctx.children[0].children[0].children[0].children[0] instanceof _CPP14Parser.default.IdExpressionContext && ctx.children[0].children[1].getText() == "." && ctx.children[0].children[2] instanceof _CPP14Parser.default.IdExpressionContext) {
        let namespace = ctx.children[0].children[0];
        let method = ctx.children[0].children[2];

        for (let clientDeclaration of this.ClientDeclarations) {
          if (namespace.getText() == clientDeclaration['variable']) {
            this.ClientCalls.push({
              'client': clientDeclaration,
              'method': method.getText(),
              'argsRaw': argsRaw,
              'args': null
            });
            break;
          }
        }
      }
    }
  }

}

exports.default = CPP14AWSListener;

},{"./CPP14Parser.js":128,"./CPP14ParserListener.js":129}],127:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/CPP14Lexer.g4 by ANTLR 4.9.2
// jshint ignore: start
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786", "\u5964\u0002\u0093\u05b6\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003", "\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007", "\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004", "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010", "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013", "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017", "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a", "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e", "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#", "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004", "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004", "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004", "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004", "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004", "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004", "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004", "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004", "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004", "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004", "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004", "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004", "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004", "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004", "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t", "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004", "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t", "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004", "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t", "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004", "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t", "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004", "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t", "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004", "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t", "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004", "\u00ac\t\u00ac\u0003\u0002\u0003\u0002\u0005\u0002\u015c\n\u0002\u0003", "\u0002\u0003\u0002\u0005\u0002\u0160\n\u0002\u0003\u0002\u0003\u0002", "\u0005\u0002\u0164\n\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u0168", "\n\u0002\u0005\u0002\u016a\n\u0002\u0003\u0003\u0005\u0003\u016d\n\u0003", "\u0003\u0003\u0003\u0003\u0006\u0003\u0171\n\u0003\r\u0003\u000e\u0003", "\u0172\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u0179", "\n\u0004\u0003\u0004\u0005\u0004\u017c\n\u0004\u0003\u0004\u0003\u0004", "\u0003\u0004\u0005\u0004\u0181\n\u0004\u0005\u0004\u0183\n\u0004\u0003", "\u0005\u0005\u0005\u0186\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005", "\u0007\u0005\u018b\n\u0005\f\u0005\u000e\u0005\u018e\u000b\u0005\u0003", "\u0005\u0005\u0005\u0191\n\u0005\u0003\u0006\u0003\u0006\u0005\u0006", "\u0195\n\u0006\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003", "\b\u0005\b\u019d\n\b\u0003\t\u0003\t\u0007\t\u01a1\n\t\f\t\u000e\t\u01a4", "\u000b\t\u0003\t\u0003\t\u0005\t\u01a8\n\t\u0003\t\u0006\t\u01ab\n\t", "\r\t\u000e\t\u01ac\u0003\t\u0006\t\u01b0\n\t\r\t\u000e\t\u01b1\u0003", "\t\u0003\t\u0003\n\u0003\n\u0007\n\u01b8\n\n\f\n\u000e\n\u01bb\u000b", "\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003", "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003", "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003", "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003", "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003", "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003", "\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003", "\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003", "\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003", "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003", "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003", "\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003", "\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003", "\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003", "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003", "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003", "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003", "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003", "\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003", "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003", "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003", "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003", "\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003", "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003", " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003", " \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003", "\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#", "\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003", "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003", "&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003", "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003", "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003", "+\u0003+\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003", "-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003", "/\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00031\u0003", "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00032\u0003", "2\u00032\u00032\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003", "3\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003", "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00036\u0003", "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00037\u00037\u0003", "7\u00037\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00038\u0003", "8\u00038\u00038\u00038\u00038\u00038\u00039\u00039\u00039\u00039\u0003", "9\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003", ":\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003", "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003", "=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003?\u0003", "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003", "@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003", "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003", "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003C\u0003", "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003", "D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003", "E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003", "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003", "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003", "I\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003K\u0003K\u0003", "K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003", "M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003N\u0003", "N\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003O\u0003", "O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003", "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003", "R\u0003R\u0003R\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003", "S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003", "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003W\u0003W\u0003", "X\u0003X\u0003Y\u0003Y\u0003Z\u0003Z\u0003[\u0003[\u0003\\\u0003\\\u0003", "]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003`\u0003`\u0003a\u0003a\u0003", "b\u0003b\u0003c\u0003c\u0003d\u0003d\u0003e\u0003e\u0003e\u0003e\u0005", "e\u0407\ne\u0003f\u0003f\u0003g\u0003g\u0003h\u0003h\u0003i\u0003i\u0003", "i\u0003j\u0003j\u0003j\u0003k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003", "m\u0003m\u0003m\u0003n\u0003n\u0003n\u0003o\u0003o\u0003o\u0003p\u0003", "p\u0003p\u0003q\u0003q\u0003q\u0003q\u0003r\u0003r\u0003r\u0003r\u0003", "s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003u\u0003u\u0003u\u0003v\u0003", "v\u0003v\u0003w\u0003w\u0003w\u0003w\u0003w\u0005w\u0440\nw\u0003x\u0003", "x\u0003x\u0003x\u0005x\u0446\nx\u0003y\u0003y\u0003y\u0003z\u0003z\u0003", "z\u0003{\u0003{\u0003|\u0003|\u0003|\u0003|\u0003}\u0003}\u0003}\u0003", "~\u0003~\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0080", "\u0003\u0081\u0003\u0081\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083", "\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0085", "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0086\u0003\u0086", "\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086", "\u0003\u0086\u0003\u0086\u0005\u0086\u0478\n\u0086\u0003\u0087\u0003", "\u0087\u0003\u0087\u0007\u0087\u047d\n\u0087\f\u0087\u000e\u0087\u0480", "\u000b\u0087\u0003\u0088\u0003\u0088\u0005\u0088\u0484\n\u0088\u0003", "\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0005", "\u008b\u048c\n\u008b\u0003\u008b\u0007\u008b\u048f\n\u008b\f\u008b\u000e", "\u008b\u0492\u000b\u008b\u0003\u008c\u0003\u008c\u0005\u008c\u0496\n", "\u008c\u0003\u008c\u0007\u008c\u0499\n\u008c\f\u008c\u000e\u008c\u049c", "\u000b\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0005\u008d", "\u04a2\n\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u04a6\n\u008d\u0003", "\u008d\u0007\u008d\u04a9\n\u008d\f\u008d\u000e\u008d\u04ac\u000b\u008d", "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0005\u008e\u04b2\n", "\u008e\u0003\u008e\u0003\u008e\u0005\u008e\u04b6\n\u008e\u0003\u008e", "\u0007\u008e\u04b9\n\u008e\f\u008e\u000e\u008e\u04bc\u000b\u008e\u0003", "\u008f\u0003\u008f\u0003\u0090\u0003\u0090\u0003\u0091\u0003\u0091\u0003", "\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0005\u0093\u04c8\n\u0093", "\u0003\u0093\u0003\u0093\u0005\u0093\u04cc\n\u0093\u0003\u0093\u0003", "\u0093\u0005\u0093\u04d0\n\u0093\u0003\u0093\u0003\u0093\u0005\u0093", "\u04d4\n\u0093\u0005\u0093\u04d6\n\u0093\u0003\u0094\u0003\u0094\u0003", "\u0095\u0003\u0095\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0005", "\u0096\u04e0\n\u0096\u0003\u0097\u0003\u0097\u0003\u0097\u0005\u0097", "\u04e5\n\u0097\u0003\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u04ea", "\n\u0098\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099", "\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099", "\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099", "\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u0501\n", "\u0099\u0003\u0099\u0005\u0099\u0504\n\u0099\u0003\u0099\u0003\u0099", "\u0003\u0099\u0003\u0099\u0005\u0099\u050a\n\u0099\u0003\u009a\u0003", "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003", "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0517\n\u009a", "\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0006\u009b\u051d\n", "\u009b\r\u009b\u000e\u009b\u051e\u0003\u009c\u0005\u009c\u0522\n\u009c", "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c", "\u0529\n\u009c\u0003\u009d\u0003\u009d\u0005\u009d\u052d\n\u009d\u0003", "\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0532\n\u009d\u0003\u009d", "\u0005\u009d\u0535\n\u009d\u0003\u009e\u0003\u009e\u0003\u009f\u0003", "\u009f\u0005\u009f\u053b\n\u009f\u0003\u009f\u0007\u009f\u053e\n\u009f", "\f\u009f\u000e\u009f\u0541\u000b\u009f\u0003\u00a0\u0003\u00a0\u0003", "\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u0548\n\u00a1\u0003\u00a2", "\u0003\u00a2\u0003\u00a2\u0005\u00a2\u054d\n\u00a2\u0003\u00a3\u0003", "\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0007\u00a3\u0555", "\n\u00a3\f\u00a3\u000e\u00a3\u0558\u000b\u00a3\u0003\u00a3\u0003\u00a3", "\u0007\u00a3\u055c\n\u00a3\f\u00a3\u000e\u00a3\u055f\u000b\u00a3\u0003", "\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0007\u00a3\u0565\n\u00a3", "\f\u00a3\u000e\u00a3\u0568\u000b\u00a3\u0003\u00a3\u0003\u00a3\u0003", "\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003", "\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0005", "\u00a4\u0578\n\u00a4\u0003\u00a5\u0003\u00a5\u0005\u00a5\u057c\n\u00a5", "\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5", "\u0005\u00a5\u0584\n\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003", "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0006", "\u00a9\u058f\n\u00a9\r\u00a9\u000e\u00a9\u0590\u0003\u00a9\u0003\u00a9", "\u0003\u00aa\u0003\u00aa\u0005\u00aa\u0597\n\u00aa\u0003\u00aa\u0005", "\u00aa\u059a\n\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab", "\u0003\u00ab\u0003\u00ab\u0007\u00ab\u05a2\n\u00ab\f\u00ab\u000e\u00ab", "\u05a5\u000b\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003", "\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0007\u00ac\u05b0", "\n\u00ac\f\u00ac\u000e\u00ac\u05b3\u000b\u00ac\u0003\u00ac\u0003\u00ac", "\u0007\u01a2\u0556\u055d\u0566\u05a3\u0002\u00ad\u0003\u0003\u0005\u0004", "\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015", "\f\u0017\r\u0019\u000e\u001b\u000f\u001d\u0010\u001f\u0011!\u0012#\u0013", "%\u0014\'\u0015)\u0016+\u0017-\u0018/\u00191\u001a3\u001b5\u001c7\u001d", "9\u001e;\u001f= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o", "9q:s;u<w=y>{?}@\u007fA\u0081B\u0083C\u0085D\u0087E\u0089F\u008bG\u008d", "H\u008fI\u0091J\u0093K\u0095L\u0097M\u0099N\u009bO\u009dP\u009fQ\u00a1", "R\u00a3S\u00a5T\u00a7U\u00a9V\u00abW\u00adX\u00afY\u00b1Z\u00b3[\u00b5", "\\\u00b7]\u00b9^\u00bb_\u00bd`\u00bfa\u00c1b\u00c3c\u00c5d\u00c7e\u00c9", "f\u00cbg\u00cdh\u00cfi\u00d1j\u00d3k\u00d5l\u00d7m\u00d9n\u00dbo\u00dd", "p\u00dfq\u00e1r\u00e3s\u00e5t\u00e7u\u00e9v\u00ebw\u00edx\u00efy\u00f1", "z\u00f3{\u00f5|\u00f7}\u00f9~\u00fb\u007f\u00fd\u0080\u00ff\u0081\u0101", "\u0082\u0103\u0083\u0105\u0084\u0107\u0085\u0109\u0002\u010b\u0002\u010d", "\u0086\u010f\u0002\u0111\u0002\u0113\u0002\u0115\u0087\u0117\u0088\u0119", "\u0089\u011b\u008a\u011d\u0002\u011f\u0002\u0121\u0002\u0123\u0002\u0125", "\u008b\u0127\u0002\u0129\u0002\u012b\u0002\u012d\u0002\u012f\u0002\u0131", "\u0002\u0133\u0002\u0135\u0002\u0137\u0002\u0139\u0002\u013b\u0002\u013d", "\u0002\u013f\u0002\u0141\u0002\u0143\u0002\u0145\u0002\u0147\u008c\u0149", "\u008d\u014b\u008e\u014d\u008f\u014f\u0002\u0151\u0090\u0153\u0091\u0155", "\u0092\u0157\u0093\u0003\u0002\u0016\u0005\u0002NNWWww\u0003\u0002\f", "\f\u0005\u0002C\\aac|\u0003\u00022;\u0003\u00023;\u0003\u000229\u0005", "\u00022;CHch\u0003\u000223\u0004\u0002WWww\u0004\u0002NNnn\u0006\u0002", "\f\f\u000f\u000f))^^\u0004\u0002--//\u0006\u0002HHNNhhnn\u0006\u0002", "\f\f\u000f\u000f$$^^\u0004\u0002$$*+\u0006\u0002\f\f\u000f\u000f\"\"", "**\u0003\u0002++\u0006\u0002\f\f\u000f\u000f\"\"$$\u0004\u0002\u000b", "\u000b\"\"\u0004\u0002\f\f\u000f\u000f\u0002\u05fa\u0002\u0003\u0003", "\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003", "\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003", "\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003", "\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003", "\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003", "\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003", "\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003", "\u0002\u0002\u0002\u0002!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002", "\u0002\u0002\u0002%\u0003\u0002\u0002\u0002\u0002\'\u0003\u0002\u0002", "\u0002\u0002)\u0003\u0002\u0002\u0002\u0002+\u0003\u0002\u0002\u0002", "\u0002-\u0003\u0002\u0002\u0002\u0002/\u0003\u0002\u0002\u0002\u0002", "1\u0003\u0002\u0002\u0002\u00023\u0003\u0002\u0002\u0002\u00025\u0003", "\u0002\u0002\u0002\u00027\u0003\u0002\u0002\u0002\u00029\u0003\u0002", "\u0002\u0002\u0002;\u0003\u0002\u0002\u0002\u0002=\u0003\u0002\u0002", "\u0002\u0002?\u0003\u0002\u0002\u0002\u0002A\u0003\u0002\u0002\u0002", "\u0002C\u0003\u0002\u0002\u0002\u0002E\u0003\u0002\u0002\u0002\u0002", "G\u0003\u0002\u0002\u0002\u0002I\u0003\u0002\u0002\u0002\u0002K\u0003", "\u0002\u0002\u0002\u0002M\u0003\u0002\u0002\u0002\u0002O\u0003\u0002", "\u0002\u0002\u0002Q\u0003\u0002\u0002\u0002\u0002S\u0003\u0002\u0002", "\u0002\u0002U\u0003\u0002\u0002\u0002\u0002W\u0003\u0002\u0002\u0002", "\u0002Y\u0003\u0002\u0002\u0002\u0002[\u0003\u0002\u0002\u0002\u0002", "]\u0003\u0002\u0002\u0002\u0002_\u0003\u0002\u0002\u0002\u0002a\u0003", "\u0002\u0002\u0002\u0002c\u0003\u0002\u0002\u0002\u0002e\u0003\u0002", "\u0002\u0002\u0002g\u0003\u0002\u0002\u0002\u0002i\u0003\u0002\u0002", "\u0002\u0002k\u0003\u0002\u0002\u0002\u0002m\u0003\u0002\u0002\u0002", "\u0002o\u0003\u0002\u0002\u0002\u0002q\u0003\u0002\u0002\u0002\u0002", "s\u0003\u0002\u0002\u0002\u0002u\u0003\u0002\u0002\u0002\u0002w\u0003", "\u0002\u0002\u0002\u0002y\u0003\u0002\u0002\u0002\u0002{\u0003\u0002", "\u0002\u0002\u0002}\u0003\u0002\u0002\u0002\u0002\u007f\u0003\u0002", "\u0002\u0002\u0002\u0081\u0003\u0002\u0002\u0002\u0002\u0083\u0003\u0002", "\u0002\u0002\u0002\u0085\u0003\u0002\u0002\u0002\u0002\u0087\u0003\u0002", "\u0002\u0002\u0002\u0089\u0003\u0002\u0002\u0002\u0002\u008b\u0003\u0002", "\u0002\u0002\u0002\u008d\u0003\u0002\u0002\u0002\u0002\u008f\u0003\u0002", "\u0002\u0002\u0002\u0091\u0003\u0002\u0002\u0002\u0002\u0093\u0003\u0002", "\u0002\u0002\u0002\u0095\u0003\u0002\u0002\u0002\u0002\u0097\u0003\u0002", "\u0002\u0002\u0002\u0099\u0003\u0002\u0002\u0002\u0002\u009b\u0003\u0002", "\u0002\u0002\u0002\u009d\u0003\u0002\u0002\u0002\u0002\u009f\u0003\u0002", "\u0002\u0002\u0002\u00a1\u0003\u0002\u0002\u0002\u0002\u00a3\u0003\u0002", "\u0002\u0002\u0002\u00a5\u0003\u0002\u0002\u0002\u0002\u00a7\u0003\u0002", "\u0002\u0002\u0002\u00a9\u0003\u0002\u0002\u0002\u0002\u00ab\u0003\u0002", "\u0002\u0002\u0002\u00ad\u0003\u0002\u0002\u0002\u0002\u00af\u0003\u0002", "\u0002\u0002\u0002\u00b1\u0003\u0002\u0002\u0002\u0002\u00b3\u0003\u0002", "\u0002\u0002\u0002\u00b5\u0003\u0002\u0002\u0002\u0002\u00b7\u0003\u0002", "\u0002\u0002\u0002\u00b9\u0003\u0002\u0002\u0002\u0002\u00bb\u0003\u0002", "\u0002\u0002\u0002\u00bd\u0003\u0002\u0002\u0002\u0002\u00bf\u0003\u0002", "\u0002\u0002\u0002\u00c1\u0003\u0002\u0002\u0002\u0002\u00c3\u0003\u0002", "\u0002\u0002\u0002\u00c5\u0003\u0002\u0002\u0002\u0002\u00c7\u0003\u0002", "\u0002\u0002\u0002\u00c9\u0003\u0002\u0002\u0002\u0002\u00cb\u0003\u0002", "\u0002\u0002\u0002\u00cd\u0003\u0002\u0002\u0002\u0002\u00cf\u0003\u0002", "\u0002\u0002\u0002\u00d1\u0003\u0002\u0002\u0002\u0002\u00d3\u0003\u0002", "\u0002\u0002\u0002\u00d5\u0003\u0002\u0002\u0002\u0002\u00d7\u0003\u0002", "\u0002\u0002\u0002\u00d9\u0003\u0002\u0002\u0002\u0002\u00db\u0003\u0002", "\u0002\u0002\u0002\u00dd\u0003\u0002\u0002\u0002\u0002\u00df\u0003\u0002", "\u0002\u0002\u0002\u00e1\u0003\u0002\u0002\u0002\u0002\u00e3\u0003\u0002", "\u0002\u0002\u0002\u00e5\u0003\u0002\u0002\u0002\u0002\u00e7\u0003\u0002", "\u0002\u0002\u0002\u00e9\u0003\u0002\u0002\u0002\u0002\u00eb\u0003\u0002", "\u0002\u0002\u0002\u00ed\u0003\u0002\u0002\u0002\u0002\u00ef\u0003\u0002", "\u0002\u0002\u0002\u00f1\u0003\u0002\u0002\u0002\u0002\u00f3\u0003\u0002", "\u0002\u0002\u0002\u00f5\u0003\u0002\u0002\u0002\u0002\u00f7\u0003\u0002", "\u0002\u0002\u0002\u00f9\u0003\u0002\u0002\u0002\u0002\u00fb\u0003\u0002", "\u0002\u0002\u0002\u00fd\u0003\u0002\u0002\u0002\u0002\u00ff\u0003\u0002", "\u0002\u0002\u0002\u0101\u0003\u0002\u0002\u0002\u0002\u0103\u0003\u0002", "\u0002\u0002\u0002\u0105\u0003\u0002\u0002\u0002\u0002\u0107\u0003\u0002", "\u0002\u0002\u0002\u010d\u0003\u0002\u0002\u0002\u0002\u0115\u0003\u0002", "\u0002\u0002\u0002\u0117\u0003\u0002\u0002\u0002\u0002\u0119\u0003\u0002", "\u0002\u0002\u0002\u011b\u0003\u0002\u0002\u0002\u0002\u0125\u0003\u0002", "\u0002\u0002\u0002\u0147\u0003\u0002\u0002\u0002\u0002\u0149\u0003\u0002", "\u0002\u0002\u0002\u014b\u0003\u0002\u0002\u0002\u0002\u014d\u0003\u0002", "\u0002\u0002\u0002\u0151\u0003\u0002\u0002\u0002\u0002\u0153\u0003\u0002", "\u0002\u0002\u0002\u0155\u0003\u0002\u0002\u0002\u0002\u0157\u0003\u0002", "\u0002\u0002\u0003\u0169\u0003\u0002\u0002\u0002\u0005\u016c\u0003\u0002", "\u0002\u0002\u0007\u0182\u0003\u0002\u0002\u0002\t\u0185\u0003\u0002", "\u0002\u0002\u000b\u0194\u0003\u0002\u0002\u0002\r\u0196\u0003\u0002", "\u0002\u0002\u000f\u019c\u0003\u0002\u0002\u0002\u0011\u019e\u0003\u0002", "\u0002\u0002\u0013\u01b5\u0003\u0002\u0002\u0002\u0015\u01be\u0003\u0002", "\u0002\u0002\u0017\u01c6\u0003\u0002\u0002\u0002\u0019\u01ce\u0003\u0002", "\u0002\u0002\u001b\u01d2\u0003\u0002\u0002\u0002\u001d\u01d7\u0003\u0002", "\u0002\u0002\u001f\u01dc\u0003\u0002\u0002\u0002!\u01e2\u0003\u0002", "\u0002\u0002#\u01e7\u0003\u0002\u0002\u0002%\u01ed\u0003\u0002\u0002", "\u0002\'\u01f2\u0003\u0002\u0002\u0002)\u01fb\u0003\u0002\u0002\u0002", "+\u0204\u0003\u0002\u0002\u0002-\u020a\u0003\u0002\u0002\u0002/\u0210", "\u0003\u0002\u0002\u00021\u021a\u0003\u0002\u0002\u00023\u0225\u0003", "\u0002\u0002\u00025\u022e\u0003\u0002\u0002\u00027\u0237\u0003\u0002", "\u0002\u00029\u023f\u0003\u0002\u0002\u0002;\u0246\u0003\u0002\u0002", "\u0002=\u0249\u0003\u0002\u0002\u0002?\u0250\u0003\u0002\u0002\u0002", "A\u025d\u0003\u0002\u0002\u0002C\u0262\u0003\u0002\u0002\u0002E\u0267", "\u0003\u0002\u0002\u0002G\u0270\u0003\u0002\u0002\u0002I\u0277\u0003", "\u0002\u0002\u0002K\u027e\u0003\u0002\u0002\u0002M\u0284\u0003\u0002", "\u0002\u0002O\u028a\u0003\u0002\u0002\u0002Q\u0290\u0003\u0002\u0002", "\u0002S\u0294\u0003\u0002\u0002\u0002U\u029b\u0003\u0002\u0002\u0002", "W\u02a0\u0003\u0002\u0002\u0002Y\u02a3\u0003\u0002\u0002\u0002[\u02aa", "\u0003\u0002\u0002\u0002]\u02ae\u0003\u0002\u0002\u0002_\u02b3\u0003", "\u0002\u0002\u0002a\u02bb\u0003\u0002\u0002\u0002c\u02c5\u0003\u0002", "\u0002\u0002e\u02c9\u0003\u0002\u0002\u0002g\u02d2\u0003\u0002\u0002", "\u0002i\u02da\u0003\u0002\u0002\u0002k\u02e3\u0003\u0002\u0002\u0002", "m\u02ec\u0003\u0002\u0002\u0002o\u02f4\u0003\u0002\u0002\u0002q\u02fe", "\u0003\u0002\u0002\u0002s\u0305\u0003\u0002\u0002\u0002u\u030e\u0003", "\u0002\u0002\u0002w\u031f\u0003\u0002\u0002\u0002y\u0326\u0003\u0002", "\u0002\u0002{\u032c\u0003\u0002\u0002\u0002}\u0333\u0003\u0002\u0002", "\u0002\u007f\u033a\u0003\u0002\u0002\u0002\u0081\u0341\u0003\u0002\u0002", "\u0002\u0083\u034f\u0003\u0002\u0002\u0002\u0085\u035b\u0003\u0002\u0002", "\u0002\u0087\u0362\u0003\u0002\u0002\u0002\u0089\u0369\u0003\u0002\u0002", "\u0002\u008b\u0372\u0003\u0002\u0002\u0002\u008d\u0377\u0003\u0002\u0002", "\u0002\u008f\u0384\u0003\u0002\u0002\u0002\u0091\u038a\u0003\u0002\u0002", "\u0002\u0093\u038f\u0003\u0002\u0002\u0002\u0095\u0393\u0003\u0002\u0002", "\u0002\u0097\u039b\u0003\u0002\u0002\u0002\u0099\u03a2\u0003\u0002\u0002", "\u0002\u009b\u03ab\u0003\u0002\u0002\u0002\u009d\u03b1\u0003\u0002\u0002", "\u0002\u009f\u03ba\u0003\u0002\u0002\u0002\u00a1\u03c0\u0003\u0002\u0002", "\u0002\u00a3\u03c8\u0003\u0002\u0002\u0002\u00a5\u03cd\u0003\u0002\u0002", "\u0002\u00a7\u03d6\u0003\u0002\u0002\u0002\u00a9\u03de\u0003\u0002\u0002", "\u0002\u00ab\u03e4\u0003\u0002\u0002\u0002\u00ad\u03e6\u0003\u0002\u0002", "\u0002\u00af\u03e8\u0003\u0002\u0002\u0002\u00b1\u03ea\u0003\u0002\u0002", "\u0002\u00b3\u03ec\u0003\u0002\u0002\u0002\u00b5\u03ee\u0003\u0002\u0002", "\u0002\u00b7\u03f0\u0003\u0002\u0002\u0002\u00b9\u03f2\u0003\u0002\u0002", "\u0002\u00bb\u03f4\u0003\u0002\u0002\u0002\u00bd\u03f6\u0003\u0002\u0002", "\u0002\u00bf\u03f8\u0003\u0002\u0002\u0002\u00c1\u03fa\u0003\u0002\u0002", "\u0002\u00c3\u03fc\u0003\u0002\u0002\u0002\u00c5\u03fe\u0003\u0002\u0002", "\u0002\u00c7\u0400\u0003\u0002\u0002\u0002\u00c9\u0406\u0003\u0002\u0002", "\u0002\u00cb\u0408\u0003\u0002\u0002\u0002\u00cd\u040a\u0003\u0002\u0002", "\u0002\u00cf\u040c\u0003\u0002\u0002\u0002\u00d1\u040e\u0003\u0002\u0002", "\u0002\u00d3\u0411\u0003\u0002\u0002\u0002\u00d5\u0414\u0003\u0002\u0002", "\u0002\u00d7\u0417\u0003\u0002\u0002\u0002\u00d9\u041a\u0003\u0002\u0002", "\u0002\u00db\u041d\u0003\u0002\u0002\u0002\u00dd\u0420\u0003\u0002\u0002", "\u0002\u00df\u0423\u0003\u0002\u0002\u0002\u00e1\u0426\u0003\u0002\u0002", "\u0002\u00e3\u042a\u0003\u0002\u0002\u0002\u00e5\u042e\u0003\u0002\u0002", "\u0002\u00e7\u0431\u0003\u0002\u0002\u0002\u00e9\u0434\u0003\u0002\u0002", "\u0002\u00eb\u0437\u0003\u0002\u0002\u0002\u00ed\u043f\u0003\u0002\u0002", "\u0002\u00ef\u0445\u0003\u0002\u0002\u0002\u00f1\u0447\u0003\u0002\u0002", "\u0002\u00f3\u044a\u0003\u0002\u0002\u0002\u00f5\u044d\u0003\u0002\u0002", "\u0002\u00f7\u044f\u0003\u0002\u0002\u0002\u00f9\u0453\u0003\u0002\u0002", "\u0002\u00fb\u0456\u0003\u0002\u0002\u0002\u00fd\u0458\u0003\u0002\u0002", "\u0002\u00ff\u045a\u0003\u0002\u0002\u0002\u0101\u045d\u0003\u0002\u0002", "\u0002\u0103\u045f\u0003\u0002\u0002\u0002\u0105\u0461\u0003\u0002\u0002", "\u0002\u0107\u0464\u0003\u0002\u0002\u0002\u0109\u0468\u0003\u0002\u0002", "\u0002\u010b\u0477\u0003\u0002\u0002\u0002\u010d\u0479\u0003\u0002\u0002", "\u0002\u010f\u0483\u0003\u0002\u0002\u0002\u0111\u0485\u0003\u0002\u0002", "\u0002\u0113\u0487\u0003\u0002\u0002\u0002\u0115\u0489\u0003\u0002\u0002", "\u0002\u0117\u0493\u0003\u0002\u0002\u0002\u0119\u04a1\u0003\u0002\u0002", "\u0002\u011b\u04b1\u0003\u0002\u0002\u0002\u011d\u04bd\u0003\u0002\u0002", "\u0002\u011f\u04bf\u0003\u0002\u0002\u0002\u0121\u04c1\u0003\u0002\u0002", "\u0002\u0123\u04c3\u0003\u0002\u0002\u0002\u0125\u04d5\u0003\u0002\u0002", "\u0002\u0127\u04d7\u0003\u0002\u0002\u0002\u0129\u04d9\u0003\u0002\u0002", "\u0002\u012b\u04df\u0003\u0002\u0002\u0002\u012d\u04e4\u0003\u0002\u0002", "\u0002\u012f\u04e9\u0003\u0002\u0002\u0002\u0131\u0509\u0003\u0002\u0002", "\u0002\u0133\u0516\u0003\u0002\u0002\u0002\u0135\u0518\u0003\u0002\u0002", "\u0002\u0137\u0528\u0003\u0002\u0002\u0002\u0139\u0534\u0003\u0002\u0002", "\u0002\u013b\u0536\u0003\u0002\u0002\u0002\u013d\u0538\u0003\u0002\u0002", "\u0002\u013f\u0542\u0003\u0002\u0002\u0002\u0141\u0547\u0003\u0002\u0002", "\u0002\u0143\u054c\u0003\u0002\u0002\u0002\u0145\u054e\u0003\u0002\u0002", "\u0002\u0147\u0577\u0003\u0002\u0002\u0002\u0149\u0583\u0003\u0002\u0002", "\u0002\u014b\u0585\u0003\u0002\u0002\u0002\u014d\u0588\u0003\u0002\u0002", "\u0002\u014f\u058b\u0003\u0002\u0002\u0002\u0151\u058e\u0003\u0002\u0002", "\u0002\u0153\u0599\u0003\u0002\u0002\u0002\u0155\u059d\u0003\u0002\u0002", "\u0002\u0157\u05ab\u0003\u0002\u0002\u0002\u0159\u015b\u0005\u0115\u008b", "\u0002\u015a\u015c\u0005\u0125\u0093\u0002\u015b\u015a\u0003\u0002\u0002", "\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c\u016a\u0003\u0002\u0002", "\u0002\u015d\u015f\u0005\u0117\u008c\u0002\u015e\u0160\u0005\u0125\u0093", "\u0002\u015f\u015e\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002", "\u0002\u0160\u016a\u0003\u0002\u0002\u0002\u0161\u0163\u0005\u0119\u008d", "\u0002\u0162\u0164\u0005\u0125\u0093\u0002\u0163\u0162\u0003\u0002\u0002", "\u0002\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u016a\u0003\u0002\u0002", "\u0002\u0165\u0167\u0005\u011b\u008e\u0002\u0166\u0168\u0005\u0125\u0093", "\u0002\u0167\u0166\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002", "\u0002\u0168\u016a\u0003\u0002\u0002\u0002\u0169\u0159\u0003\u0002\u0002", "\u0002\u0169\u015d\u0003\u0002\u0002\u0002\u0169\u0161\u0003\u0002\u0002", "\u0002\u0169\u0165\u0003\u0002\u0002\u0002\u016a\u0004\u0003\u0002\u0002", "\u0002\u016b\u016d\t\u0002\u0002\u0002\u016c\u016b\u0003\u0002\u0002", "\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u016e\u0003\u0002\u0002", "\u0002\u016e\u0170\u0007)\u0002\u0002\u016f\u0171\u0005\u012d\u0097", "\u0002\u0170\u016f\u0003\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002", "\u0002\u0172\u0170\u0003\u0002\u0002\u0002\u0172\u0173\u0003\u0002\u0002", "\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174\u0175\u0007)\u0002", "\u0002\u0175\u0006\u0003\u0002\u0002\u0002\u0176\u0178\u0005\u0137\u009c", "\u0002\u0177\u0179\u0005\u0139\u009d\u0002\u0178\u0177\u0003\u0002\u0002", "\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017b\u0003\u0002\u0002", "\u0002\u017a\u017c\u0005\u013f\u00a0\u0002\u017b\u017a\u0003\u0002\u0002", "\u0002\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u0183\u0003\u0002\u0002", "\u0002\u017d\u017e\u0005\u013d\u009f\u0002\u017e\u0180\u0005\u0139\u009d", "\u0002\u017f\u0181\u0005\u013f\u00a0\u0002\u0180\u017f\u0003\u0002\u0002", "\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0183\u0003\u0002\u0002", "\u0002\u0182\u0176\u0003\u0002\u0002\u0002\u0182\u017d\u0003\u0002\u0002", "\u0002\u0183\b\u0003\u0002\u0002\u0002\u0184\u0186\u0005\u0141\u00a1", "\u0002\u0185\u0184\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002", "\u0002\u0186\u0190\u0003\u0002\u0002\u0002\u0187\u0191\u0005\u0145\u00a3", "\u0002\u0188\u018c\u0007$\u0002\u0002\u0189\u018b\u0005\u0143\u00a2", "\u0002\u018a\u0189\u0003\u0002\u0002\u0002\u018b\u018e\u0003\u0002\u0002", "\u0002\u018c\u018a\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002", "\u0002\u018d\u018f\u0003\u0002\u0002\u0002\u018e\u018c\u0003\u0002\u0002", "\u0002\u018f\u0191\u0007$\u0002\u0002\u0190\u0187\u0003\u0002\u0002", "\u0002\u0190\u0188\u0003\u0002\u0002\u0002\u0191\n\u0003\u0002\u0002", "\u0002\u0192\u0195\u0005K&\u0002\u0193\u0195\u0005\u0091I\u0002\u0194", "\u0192\u0003\u0002\u0002\u0002\u0194\u0193\u0003\u0002\u0002\u0002\u0195", "\f\u0003\u0002\u0002\u0002\u0196\u0197\u0005g4\u0002\u0197\u000e\u0003", "\u0002\u0002\u0002\u0198\u019d\u0005\u0147\u00a4\u0002\u0199\u019d\u0005", "\u0149\u00a5\u0002\u019a\u019d\u0005\u014b\u00a6\u0002\u019b\u019d\u0005", "\u014d\u00a7\u0002\u019c\u0198\u0003\u0002\u0002\u0002\u019c\u0199\u0003", "\u0002\u0002\u0002\u019c\u019a\u0003\u0002\u0002\u0002\u019c\u019b\u0003", "\u0002\u0002\u0002\u019d\u0010\u0003\u0002\u0002\u0002\u019e\u01aa\u0007", "%\u0002\u0002\u019f\u01a1\n\u0003\u0002\u0002\u01a0\u019f\u0003\u0002", "\u0002\u0002\u01a1\u01a4\u0003\u0002\u0002\u0002\u01a2\u01a3\u0003\u0002", "\u0002\u0002\u01a2\u01a0\u0003\u0002\u0002\u0002\u01a3\u01a5\u0003\u0002", "\u0002\u0002\u01a4\u01a2\u0003\u0002\u0002\u0002\u01a5\u01a7\u0007^", "\u0002\u0002\u01a6\u01a8\u0007\u000f\u0002\u0002\u01a7\u01a6\u0003\u0002", "\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002", "\u0002\u0002\u01a9\u01ab\u0007\f\u0002\u0002\u01aa\u01a2\u0003\u0002", "\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002\u0002\u01ac\u01aa\u0003\u0002", "\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01af\u0003\u0002", "\u0002\u0002\u01ae\u01b0\n\u0003\u0002\u0002\u01af\u01ae\u0003\u0002", "\u0002\u0002\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u01af\u0003\u0002", "\u0002\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002", "\u0002\u0002\u01b3\u01b4\b\t\u0002\u0002\u01b4\u0012\u0003\u0002\u0002", "\u0002\u01b5\u01b9\u0007%\u0002\u0002\u01b6\u01b8\n\u0003\u0002\u0002", "\u01b7\u01b6\u0003\u0002\u0002\u0002\u01b8\u01bb\u0003\u0002\u0002\u0002", "\u01b9\u01b7\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002", "\u01ba\u01bc\u0003\u0002\u0002\u0002\u01bb\u01b9\u0003\u0002\u0002\u0002", "\u01bc\u01bd\b\n\u0002\u0002\u01bd\u0014\u0003\u0002\u0002\u0002\u01be", "\u01bf\u0007c\u0002\u0002\u01bf\u01c0\u0007n\u0002\u0002\u01c0\u01c1", "\u0007k\u0002\u0002\u01c1\u01c2\u0007i\u0002\u0002\u01c2\u01c3\u0007", "p\u0002\u0002\u01c3\u01c4\u0007c\u0002\u0002\u01c4\u01c5\u0007u\u0002", "\u0002\u01c5\u0016\u0003\u0002\u0002\u0002\u01c6\u01c7\u0007c\u0002", "\u0002\u01c7\u01c8\u0007n\u0002\u0002\u01c8\u01c9\u0007k\u0002\u0002", "\u01c9\u01ca\u0007i\u0002\u0002\u01ca\u01cb\u0007p\u0002\u0002\u01cb", "\u01cc\u0007q\u0002\u0002\u01cc\u01cd\u0007h\u0002\u0002\u01cd\u0018", "\u0003\u0002\u0002\u0002\u01ce\u01cf\u0007c\u0002\u0002\u01cf\u01d0", "\u0007u\u0002\u0002\u01d0\u01d1\u0007o\u0002\u0002\u01d1\u001a\u0003", "\u0002\u0002\u0002\u01d2\u01d3\u0007c\u0002\u0002\u01d3\u01d4\u0007", "w\u0002\u0002\u01d4\u01d5\u0007v\u0002\u0002\u01d5\u01d6\u0007q\u0002", "\u0002\u01d6\u001c\u0003\u0002\u0002\u0002\u01d7\u01d8\u0007d\u0002", "\u0002\u01d8\u01d9\u0007q\u0002\u0002\u01d9\u01da\u0007q\u0002\u0002", "\u01da\u01db\u0007n\u0002\u0002\u01db\u001e\u0003\u0002\u0002\u0002", "\u01dc\u01dd\u0007d\u0002\u0002\u01dd\u01de\u0007t\u0002\u0002\u01de", "\u01df\u0007g\u0002\u0002\u01df\u01e0\u0007c\u0002\u0002\u01e0\u01e1", "\u0007m\u0002\u0002\u01e1 \u0003\u0002\u0002\u0002\u01e2\u01e3\u0007", "e\u0002\u0002\u01e3\u01e4\u0007c\u0002\u0002\u01e4\u01e5\u0007u\u0002", "\u0002\u01e5\u01e6\u0007g\u0002\u0002\u01e6\"\u0003\u0002\u0002\u0002", "\u01e7\u01e8\u0007e\u0002\u0002\u01e8\u01e9\u0007c\u0002\u0002\u01e9", "\u01ea\u0007v\u0002\u0002\u01ea\u01eb\u0007e\u0002\u0002\u01eb\u01ec", "\u0007j\u0002\u0002\u01ec$\u0003\u0002\u0002\u0002\u01ed\u01ee\u0007", "e\u0002\u0002\u01ee\u01ef\u0007j\u0002\u0002\u01ef\u01f0\u0007c\u0002", "\u0002\u01f0\u01f1\u0007t\u0002\u0002\u01f1&\u0003\u0002\u0002\u0002", "\u01f2\u01f3\u0007e\u0002\u0002\u01f3\u01f4\u0007j\u0002\u0002\u01f4", "\u01f5\u0007c\u0002\u0002\u01f5\u01f6\u0007t\u0002\u0002\u01f6\u01f7", "\u00073\u0002\u0002\u01f7\u01f8\u00078\u0002\u0002\u01f8\u01f9\u0007", "a\u0002\u0002\u01f9\u01fa\u0007v\u0002\u0002\u01fa(\u0003\u0002\u0002", "\u0002\u01fb\u01fc\u0007e\u0002\u0002\u01fc\u01fd\u0007j\u0002\u0002", "\u01fd\u01fe\u0007c\u0002\u0002\u01fe\u01ff\u0007t\u0002\u0002\u01ff", "\u0200\u00075\u0002\u0002\u0200\u0201\u00074\u0002\u0002\u0201\u0202", "\u0007a\u0002\u0002\u0202\u0203\u0007v\u0002\u0002\u0203*\u0003\u0002", "\u0002\u0002\u0204\u0205\u0007e\u0002\u0002\u0205\u0206\u0007n\u0002", "\u0002\u0206\u0207\u0007c\u0002\u0002\u0207\u0208\u0007u\u0002\u0002", "\u0208\u0209\u0007u\u0002\u0002\u0209,\u0003\u0002\u0002\u0002\u020a", "\u020b\u0007e\u0002\u0002\u020b\u020c\u0007q\u0002\u0002\u020c\u020d", "\u0007p\u0002\u0002\u020d\u020e\u0007u\u0002\u0002\u020e\u020f\u0007", "v\u0002\u0002\u020f.\u0003\u0002\u0002\u0002\u0210\u0211\u0007e\u0002", "\u0002\u0211\u0212\u0007q\u0002\u0002\u0212\u0213\u0007p\u0002\u0002", "\u0213\u0214\u0007u\u0002\u0002\u0214\u0215\u0007v\u0002\u0002\u0215", "\u0216\u0007g\u0002\u0002\u0216\u0217\u0007z\u0002\u0002\u0217\u0218", "\u0007r\u0002\u0002\u0218\u0219\u0007t\u0002\u0002\u02190\u0003\u0002", "\u0002\u0002\u021a\u021b\u0007e\u0002\u0002\u021b\u021c\u0007q\u0002", "\u0002\u021c\u021d\u0007p\u0002\u0002\u021d\u021e\u0007u\u0002\u0002", "\u021e\u021f\u0007v\u0002\u0002\u021f\u0220\u0007a\u0002\u0002\u0220", "\u0221\u0007e\u0002\u0002\u0221\u0222\u0007c\u0002\u0002\u0222\u0223", "\u0007u\u0002\u0002\u0223\u0224\u0007v\u0002\u0002\u02242\u0003\u0002", "\u0002\u0002\u0225\u0226\u0007e\u0002\u0002\u0226\u0227\u0007q\u0002", "\u0002\u0227\u0228\u0007p\u0002\u0002\u0228\u0229\u0007v\u0002\u0002", "\u0229\u022a\u0007k\u0002\u0002\u022a\u022b\u0007p\u0002\u0002\u022b", "\u022c\u0007w\u0002\u0002\u022c\u022d\u0007g\u0002\u0002\u022d4\u0003", "\u0002\u0002\u0002\u022e\u022f\u0007f\u0002\u0002\u022f\u0230\u0007", "g\u0002\u0002\u0230\u0231\u0007e\u0002\u0002\u0231\u0232\u0007n\u0002", "\u0002\u0232\u0233\u0007v\u0002\u0002\u0233\u0234\u0007{\u0002\u0002", "\u0234\u0235\u0007r\u0002\u0002\u0235\u0236\u0007g\u0002\u0002\u0236", "6\u0003\u0002\u0002\u0002\u0237\u0238\u0007f\u0002\u0002\u0238\u0239", "\u0007g\u0002\u0002\u0239\u023a\u0007h\u0002\u0002\u023a\u023b\u0007", "c\u0002\u0002\u023b\u023c\u0007w\u0002\u0002\u023c\u023d\u0007n\u0002", "\u0002\u023d\u023e\u0007v\u0002\u0002\u023e8\u0003\u0002\u0002\u0002", "\u023f\u0240\u0007f\u0002\u0002\u0240\u0241\u0007g\u0002\u0002\u0241", "\u0242\u0007n\u0002\u0002\u0242\u0243\u0007g\u0002\u0002\u0243\u0244", "\u0007v\u0002\u0002\u0244\u0245\u0007g\u0002\u0002\u0245:\u0003\u0002", "\u0002\u0002\u0246\u0247\u0007f\u0002\u0002\u0247\u0248\u0007q\u0002", "\u0002\u0248<\u0003\u0002\u0002\u0002\u0249\u024a\u0007f\u0002\u0002", "\u024a\u024b\u0007q\u0002\u0002\u024b\u024c\u0007w\u0002\u0002\u024c", "\u024d\u0007d\u0002\u0002\u024d\u024e\u0007n\u0002\u0002\u024e\u024f", "\u0007g\u0002\u0002\u024f>\u0003\u0002\u0002\u0002\u0250\u0251\u0007", "f\u0002\u0002\u0251\u0252\u0007{\u0002\u0002\u0252\u0253\u0007p\u0002", "\u0002\u0253\u0254\u0007c\u0002\u0002\u0254\u0255\u0007o\u0002\u0002", "\u0255\u0256\u0007k\u0002\u0002\u0256\u0257\u0007e\u0002\u0002\u0257", "\u0258\u0007a\u0002\u0002\u0258\u0259\u0007e\u0002\u0002\u0259\u025a", "\u0007c\u0002\u0002\u025a\u025b\u0007u\u0002\u0002\u025b\u025c\u0007", "v\u0002\u0002\u025c@\u0003\u0002\u0002\u0002\u025d\u025e\u0007g\u0002", "\u0002\u025e\u025f\u0007n\u0002\u0002\u025f\u0260\u0007u\u0002\u0002", "\u0260\u0261\u0007g\u0002\u0002\u0261B\u0003\u0002\u0002\u0002\u0262", "\u0263\u0007g\u0002\u0002\u0263\u0264\u0007p\u0002\u0002\u0264\u0265", "\u0007w\u0002\u0002\u0265\u0266\u0007o\u0002\u0002\u0266D\u0003\u0002", "\u0002\u0002\u0267\u0268\u0007g\u0002\u0002\u0268\u0269\u0007z\u0002", "\u0002\u0269\u026a\u0007r\u0002\u0002\u026a\u026b\u0007n\u0002\u0002", "\u026b\u026c\u0007k\u0002\u0002\u026c\u026d\u0007e\u0002\u0002\u026d", "\u026e\u0007k\u0002\u0002\u026e\u026f\u0007v\u0002\u0002\u026fF\u0003", "\u0002\u0002\u0002\u0270\u0271\u0007g\u0002\u0002\u0271\u0272\u0007", "z\u0002\u0002\u0272\u0273\u0007r\u0002\u0002\u0273\u0274\u0007q\u0002", "\u0002\u0274\u0275\u0007t\u0002\u0002\u0275\u0276\u0007v\u0002\u0002", "\u0276H\u0003\u0002\u0002\u0002\u0277\u0278\u0007g\u0002\u0002\u0278", "\u0279\u0007z\u0002\u0002\u0279\u027a\u0007v\u0002\u0002\u027a\u027b", "\u0007g\u0002\u0002\u027b\u027c\u0007t\u0002\u0002\u027c\u027d\u0007", "p\u0002\u0002\u027dJ\u0003\u0002\u0002\u0002\u027e\u027f\u0007h\u0002", "\u0002\u027f\u0280\u0007c\u0002\u0002\u0280\u0281\u0007n\u0002\u0002", "\u0281\u0282\u0007u\u0002\u0002\u0282\u0283\u0007g\u0002\u0002\u0283", "L\u0003\u0002\u0002\u0002\u0284\u0285\u0007h\u0002\u0002\u0285\u0286", "\u0007k\u0002\u0002\u0286\u0287\u0007p\u0002\u0002\u0287\u0288\u0007", "c\u0002\u0002\u0288\u0289\u0007n\u0002\u0002\u0289N\u0003\u0002\u0002", "\u0002\u028a\u028b\u0007h\u0002\u0002\u028b\u028c\u0007n\u0002\u0002", "\u028c\u028d\u0007q\u0002\u0002\u028d\u028e\u0007c\u0002\u0002\u028e", "\u028f\u0007v\u0002\u0002\u028fP\u0003\u0002\u0002\u0002\u0290\u0291", "\u0007h\u0002\u0002\u0291\u0292\u0007q\u0002\u0002\u0292\u0293\u0007", "t\u0002\u0002\u0293R\u0003\u0002\u0002\u0002\u0294\u0295\u0007h\u0002", "\u0002\u0295\u0296\u0007t\u0002\u0002\u0296\u0297\u0007k\u0002\u0002", "\u0297\u0298\u0007g\u0002\u0002\u0298\u0299\u0007p\u0002\u0002\u0299", "\u029a\u0007f\u0002\u0002\u029aT\u0003\u0002\u0002\u0002\u029b\u029c", "\u0007i\u0002\u0002\u029c\u029d\u0007q\u0002\u0002\u029d\u029e\u0007", "v\u0002\u0002\u029e\u029f\u0007q\u0002\u0002\u029fV\u0003\u0002\u0002", "\u0002\u02a0\u02a1\u0007k\u0002\u0002\u02a1\u02a2\u0007h\u0002\u0002", "\u02a2X\u0003\u0002\u0002\u0002\u02a3\u02a4\u0007k\u0002\u0002\u02a4", "\u02a5\u0007p\u0002\u0002\u02a5\u02a6\u0007n\u0002\u0002\u02a6\u02a7", "\u0007k\u0002\u0002\u02a7\u02a8\u0007p\u0002\u0002\u02a8\u02a9\u0007", "g\u0002\u0002\u02a9Z\u0003\u0002\u0002\u0002\u02aa\u02ab\u0007k\u0002", "\u0002\u02ab\u02ac\u0007p\u0002\u0002\u02ac\u02ad\u0007v\u0002\u0002", "\u02ad\\\u0003\u0002\u0002\u0002\u02ae\u02af\u0007n\u0002\u0002\u02af", "\u02b0\u0007q\u0002\u0002\u02b0\u02b1\u0007p\u0002\u0002\u02b1\u02b2", "\u0007i\u0002\u0002\u02b2^\u0003\u0002\u0002\u0002\u02b3\u02b4\u0007", "o\u0002\u0002\u02b4\u02b5\u0007w\u0002\u0002\u02b5\u02b6\u0007v\u0002", "\u0002\u02b6\u02b7\u0007c\u0002\u0002\u02b7\u02b8\u0007d\u0002\u0002", "\u02b8\u02b9\u0007n\u0002\u0002\u02b9\u02ba\u0007g\u0002\u0002\u02ba", "`\u0003\u0002\u0002\u0002\u02bb\u02bc\u0007p\u0002\u0002\u02bc\u02bd", "\u0007c\u0002\u0002\u02bd\u02be\u0007o\u0002\u0002\u02be\u02bf\u0007", "g\u0002\u0002\u02bf\u02c0\u0007u\u0002\u0002\u02c0\u02c1\u0007r\u0002", "\u0002\u02c1\u02c2\u0007c\u0002\u0002\u02c2\u02c3\u0007e\u0002\u0002", "\u02c3\u02c4\u0007g\u0002\u0002\u02c4b\u0003\u0002\u0002\u0002\u02c5", "\u02c6\u0007p\u0002\u0002\u02c6\u02c7\u0007g\u0002\u0002\u02c7\u02c8", "\u0007y\u0002\u0002\u02c8d\u0003\u0002\u0002\u0002\u02c9\u02ca\u0007", "p\u0002\u0002\u02ca\u02cb\u0007q\u0002\u0002\u02cb\u02cc\u0007g\u0002", "\u0002\u02cc\u02cd\u0007z\u0002\u0002\u02cd\u02ce\u0007e\u0002\u0002", "\u02ce\u02cf\u0007g\u0002\u0002\u02cf\u02d0\u0007r\u0002\u0002\u02d0", "\u02d1\u0007v\u0002\u0002\u02d1f\u0003\u0002\u0002\u0002\u02d2\u02d3", "\u0007p\u0002\u0002\u02d3\u02d4\u0007w\u0002\u0002\u02d4\u02d5\u0007", "n\u0002\u0002\u02d5\u02d6\u0007n\u0002\u0002\u02d6\u02d7\u0007r\u0002", "\u0002\u02d7\u02d8\u0007v\u0002\u0002\u02d8\u02d9\u0007t\u0002\u0002", "\u02d9h\u0003\u0002\u0002\u0002\u02da\u02db\u0007q\u0002\u0002\u02db", "\u02dc\u0007r\u0002\u0002\u02dc\u02dd\u0007g\u0002\u0002\u02dd\u02de", "\u0007t\u0002\u0002\u02de\u02df\u0007c\u0002\u0002\u02df\u02e0\u0007", "v\u0002\u0002\u02e0\u02e1\u0007q\u0002\u0002\u02e1\u02e2\u0007t\u0002", "\u0002\u02e2j\u0003\u0002\u0002\u0002\u02e3\u02e4\u0007q\u0002\u0002", "\u02e4\u02e5\u0007x\u0002\u0002\u02e5\u02e6\u0007g\u0002\u0002\u02e6", "\u02e7\u0007t\u0002\u0002\u02e7\u02e8\u0007t\u0002\u0002\u02e8\u02e9", "\u0007k\u0002\u0002\u02e9\u02ea\u0007f\u0002\u0002\u02ea\u02eb\u0007", "g\u0002\u0002\u02ebl\u0003\u0002\u0002\u0002\u02ec\u02ed\u0007r\u0002", "\u0002\u02ed\u02ee\u0007t\u0002\u0002\u02ee\u02ef\u0007k\u0002\u0002", "\u02ef\u02f0\u0007x\u0002\u0002\u02f0\u02f1\u0007c\u0002\u0002\u02f1", "\u02f2\u0007v\u0002\u0002\u02f2\u02f3\u0007g\u0002\u0002\u02f3n\u0003", "\u0002\u0002\u0002\u02f4\u02f5\u0007r\u0002\u0002\u02f5\u02f6\u0007", "t\u0002\u0002\u02f6\u02f7\u0007q\u0002\u0002\u02f7\u02f8\u0007v\u0002", "\u0002\u02f8\u02f9\u0007g\u0002\u0002\u02f9\u02fa\u0007e\u0002\u0002", "\u02fa\u02fb\u0007v\u0002\u0002\u02fb\u02fc\u0007g\u0002\u0002\u02fc", "\u02fd\u0007f\u0002\u0002\u02fdp\u0003\u0002\u0002\u0002\u02fe\u02ff", "\u0007r\u0002\u0002\u02ff\u0300\u0007w\u0002\u0002\u0300\u0301\u0007", "d\u0002\u0002\u0301\u0302\u0007n\u0002\u0002\u0302\u0303\u0007k\u0002", "\u0002\u0303\u0304\u0007e\u0002\u0002\u0304r\u0003\u0002\u0002\u0002", "\u0305\u0306\u0007t\u0002\u0002\u0306\u0307\u0007g\u0002\u0002\u0307", "\u0308\u0007i\u0002\u0002\u0308\u0309\u0007k\u0002\u0002\u0309\u030a", "\u0007u\u0002\u0002\u030a\u030b\u0007v\u0002\u0002\u030b\u030c\u0007", "g\u0002\u0002\u030c\u030d\u0007t\u0002\u0002\u030dt\u0003\u0002\u0002", "\u0002\u030e\u030f\u0007t\u0002\u0002\u030f\u0310\u0007g\u0002\u0002", "\u0310\u0311\u0007k\u0002\u0002\u0311\u0312\u0007p\u0002\u0002\u0312", "\u0313\u0007v\u0002\u0002\u0313\u0314\u0007g\u0002\u0002\u0314\u0315", "\u0007t\u0002\u0002\u0315\u0316\u0007r\u0002\u0002\u0316\u0317\u0007", "t\u0002\u0002\u0317\u0318\u0007g\u0002\u0002\u0318\u0319\u0007v\u0002", "\u0002\u0319\u031a\u0007a\u0002\u0002\u031a\u031b\u0007e\u0002\u0002", "\u031b\u031c\u0007c\u0002\u0002\u031c\u031d\u0007u\u0002\u0002\u031d", "\u031e\u0007v\u0002\u0002\u031ev\u0003\u0002\u0002\u0002\u031f\u0320", "\u0007t\u0002\u0002\u0320\u0321\u0007g\u0002\u0002\u0321\u0322\u0007", "v\u0002\u0002\u0322\u0323\u0007w\u0002\u0002\u0323\u0324\u0007t\u0002", "\u0002\u0324\u0325\u0007p\u0002\u0002\u0325x\u0003\u0002\u0002\u0002", "\u0326\u0327\u0007u\u0002\u0002\u0327\u0328\u0007j\u0002\u0002\u0328", "\u0329\u0007q\u0002\u0002\u0329\u032a\u0007t\u0002\u0002\u032a\u032b", "\u0007v\u0002\u0002\u032bz\u0003\u0002\u0002\u0002\u032c\u032d\u0007", "u\u0002\u0002\u032d\u032e\u0007k\u0002\u0002\u032e\u032f\u0007i\u0002", "\u0002\u032f\u0330\u0007p\u0002\u0002\u0330\u0331\u0007g\u0002\u0002", "\u0331\u0332\u0007f\u0002\u0002\u0332|\u0003\u0002\u0002\u0002\u0333", "\u0334\u0007u\u0002\u0002\u0334\u0335\u0007k\u0002\u0002\u0335\u0336", "\u0007|\u0002\u0002\u0336\u0337\u0007g\u0002\u0002\u0337\u0338\u0007", "q\u0002\u0002\u0338\u0339\u0007h\u0002\u0002\u0339~\u0003\u0002\u0002", "\u0002\u033a\u033b\u0007u\u0002\u0002\u033b\u033c\u0007v\u0002\u0002", "\u033c\u033d\u0007c\u0002\u0002\u033d\u033e\u0007v\u0002\u0002\u033e", "\u033f\u0007k\u0002\u0002\u033f\u0340\u0007e\u0002\u0002\u0340\u0080", "\u0003\u0002\u0002\u0002\u0341\u0342\u0007u\u0002\u0002\u0342\u0343", "\u0007v\u0002\u0002\u0343\u0344\u0007c\u0002\u0002\u0344\u0345\u0007", "v\u0002\u0002\u0345\u0346\u0007k\u0002\u0002\u0346\u0347\u0007e\u0002", "\u0002\u0347\u0348\u0007a\u0002\u0002\u0348\u0349\u0007c\u0002\u0002", "\u0349\u034a\u0007u\u0002\u0002\u034a\u034b\u0007u\u0002\u0002\u034b", "\u034c\u0007g\u0002\u0002\u034c\u034d\u0007t\u0002\u0002\u034d\u034e", "\u0007v\u0002\u0002\u034e\u0082\u0003\u0002\u0002\u0002\u034f\u0350", "\u0007u\u0002\u0002\u0350\u0351\u0007v\u0002\u0002\u0351\u0352\u0007", "c\u0002\u0002\u0352\u0353\u0007v\u0002\u0002\u0353\u0354\u0007k\u0002", "\u0002\u0354\u0355\u0007e\u0002\u0002\u0355\u0356\u0007a\u0002\u0002", "\u0356\u0357\u0007e\u0002\u0002\u0357\u0358\u0007c\u0002\u0002\u0358", "\u0359\u0007u\u0002\u0002\u0359\u035a\u0007v\u0002\u0002\u035a\u0084", "\u0003\u0002\u0002\u0002\u035b\u035c\u0007u\u0002\u0002\u035c\u035d", "\u0007v\u0002\u0002\u035d\u035e\u0007t\u0002\u0002\u035e\u035f\u0007", "w\u0002\u0002\u035f\u0360\u0007e\u0002\u0002\u0360\u0361\u0007v\u0002", "\u0002\u0361\u0086\u0003\u0002\u0002\u0002\u0362\u0363\u0007u\u0002", "\u0002\u0363\u0364\u0007y\u0002\u0002\u0364\u0365\u0007k\u0002\u0002", "\u0365\u0366\u0007v\u0002\u0002\u0366\u0367\u0007e\u0002\u0002\u0367", "\u0368\u0007j\u0002\u0002\u0368\u0088\u0003\u0002\u0002\u0002\u0369", "\u036a\u0007v\u0002\u0002\u036a\u036b\u0007g\u0002\u0002\u036b\u036c", "\u0007o\u0002\u0002\u036c\u036d\u0007r\u0002\u0002\u036d\u036e\u0007", "n\u0002\u0002\u036e\u036f\u0007c\u0002\u0002\u036f\u0370\u0007v\u0002", "\u0002\u0370\u0371\u0007g\u0002\u0002\u0371\u008a\u0003\u0002\u0002", "\u0002\u0372\u0373\u0007v\u0002\u0002\u0373\u0374\u0007j\u0002\u0002", "\u0374\u0375\u0007k\u0002\u0002\u0375\u0376\u0007u\u0002\u0002\u0376", "\u008c\u0003\u0002\u0002\u0002\u0377\u0378\u0007v\u0002\u0002\u0378", "\u0379\u0007j\u0002\u0002\u0379\u037a\u0007t\u0002\u0002\u037a\u037b", "\u0007g\u0002\u0002\u037b\u037c\u0007c\u0002\u0002\u037c\u037d\u0007", "f\u0002\u0002\u037d\u037e\u0007a\u0002\u0002\u037e\u037f\u0007n\u0002", "\u0002\u037f\u0380\u0007q\u0002\u0002\u0380\u0381\u0007e\u0002\u0002", "\u0381\u0382\u0007c\u0002\u0002\u0382\u0383\u0007n\u0002\u0002\u0383", "\u008e\u0003\u0002\u0002\u0002\u0384\u0385\u0007v\u0002\u0002\u0385", "\u0386\u0007j\u0002\u0002\u0386\u0387\u0007t\u0002\u0002\u0387\u0388", "\u0007q\u0002\u0002\u0388\u0389\u0007y\u0002\u0002\u0389\u0090\u0003", "\u0002\u0002\u0002\u038a\u038b\u0007v\u0002\u0002\u038b\u038c\u0007", "t\u0002\u0002\u038c\u038d\u0007w\u0002\u0002\u038d\u038e\u0007g\u0002", "\u0002\u038e\u0092\u0003\u0002\u0002\u0002\u038f\u0390\u0007v\u0002", "\u0002\u0390\u0391\u0007t\u0002\u0002\u0391\u0392\u0007{\u0002\u0002", "\u0392\u0094\u0003\u0002\u0002\u0002\u0393\u0394\u0007v\u0002\u0002", "\u0394\u0395\u0007{\u0002\u0002\u0395\u0396\u0007r\u0002\u0002\u0396", "\u0397\u0007g\u0002\u0002\u0397\u0398\u0007f\u0002\u0002\u0398\u0399", "\u0007g\u0002\u0002\u0399\u039a\u0007h\u0002\u0002\u039a\u0096\u0003", "\u0002\u0002\u0002\u039b\u039c\u0007v\u0002\u0002\u039c\u039d\u0007", "{\u0002\u0002\u039d\u039e\u0007r\u0002\u0002\u039e\u039f\u0007g\u0002", "\u0002\u039f\u03a0\u0007k\u0002\u0002\u03a0\u03a1\u0007f\u0002\u0002", "\u03a1\u0098\u0003\u0002\u0002\u0002\u03a2\u03a3\u0007v\u0002\u0002", "\u03a3\u03a4\u0007{\u0002\u0002\u03a4\u03a5\u0007r\u0002\u0002\u03a5", "\u03a6\u0007g\u0002\u0002\u03a6\u03a7\u0007p\u0002\u0002\u03a7\u03a8", "\u0007c\u0002\u0002\u03a8\u03a9\u0007o\u0002\u0002\u03a9\u03aa\u0007", "g\u0002\u0002\u03aa\u009a\u0003\u0002\u0002\u0002\u03ab\u03ac\u0007", "w\u0002\u0002\u03ac\u03ad\u0007p\u0002\u0002\u03ad\u03ae\u0007k\u0002", "\u0002\u03ae\u03af\u0007q\u0002\u0002\u03af\u03b0\u0007p\u0002\u0002", "\u03b0\u009c\u0003\u0002\u0002\u0002\u03b1\u03b2\u0007w\u0002\u0002", "\u03b2\u03b3\u0007p\u0002\u0002\u03b3\u03b4\u0007u\u0002\u0002\u03b4", "\u03b5\u0007k\u0002\u0002\u03b5\u03b6\u0007i\u0002\u0002\u03b6\u03b7", "\u0007p\u0002\u0002\u03b7\u03b8\u0007g\u0002\u0002\u03b8\u03b9\u0007", "f\u0002\u0002\u03b9\u009e\u0003\u0002\u0002\u0002\u03ba\u03bb\u0007", "w\u0002\u0002\u03bb\u03bc\u0007u\u0002\u0002\u03bc\u03bd\u0007k\u0002", "\u0002\u03bd\u03be\u0007p\u0002\u0002\u03be\u03bf\u0007i\u0002\u0002", "\u03bf\u00a0\u0003\u0002\u0002\u0002\u03c0\u03c1\u0007x\u0002\u0002", "\u03c1\u03c2\u0007k\u0002\u0002\u03c2\u03c3\u0007t\u0002\u0002\u03c3", "\u03c4\u0007v\u0002\u0002\u03c4\u03c5\u0007w\u0002\u0002\u03c5\u03c6", "\u0007c\u0002\u0002\u03c6\u03c7\u0007n\u0002\u0002\u03c7\u00a2\u0003", "\u0002\u0002\u0002\u03c8\u03c9\u0007x\u0002\u0002\u03c9\u03ca\u0007", "q\u0002\u0002\u03ca\u03cb\u0007k\u0002\u0002\u03cb\u03cc\u0007f\u0002", "\u0002\u03cc\u00a4\u0003\u0002\u0002\u0002\u03cd\u03ce\u0007x\u0002", "\u0002\u03ce\u03cf\u0007q\u0002\u0002\u03cf\u03d0\u0007n\u0002\u0002", "\u03d0\u03d1\u0007c\u0002\u0002\u03d1\u03d2\u0007v\u0002\u0002\u03d2", "\u03d3\u0007k\u0002\u0002\u03d3\u03d4\u0007n\u0002\u0002\u03d4\u03d5", "\u0007g\u0002\u0002\u03d5\u00a6\u0003\u0002\u0002\u0002\u03d6\u03d7", "\u0007y\u0002\u0002\u03d7\u03d8\u0007e\u0002\u0002\u03d8\u03d9\u0007", "j\u0002\u0002\u03d9\u03da\u0007c\u0002\u0002\u03da\u03db\u0007t\u0002", "\u0002\u03db\u03dc\u0007a\u0002\u0002\u03dc\u03dd\u0007v\u0002\u0002", "\u03dd\u00a8\u0003\u0002\u0002\u0002\u03de\u03df\u0007y\u0002\u0002", "\u03df\u03e0\u0007j\u0002\u0002\u03e0\u03e1\u0007k\u0002\u0002\u03e1", "\u03e2\u0007n\u0002\u0002\u03e2\u03e3\u0007g\u0002\u0002\u03e3\u00aa", "\u0003\u0002\u0002\u0002\u03e4\u03e5\u0007*\u0002\u0002\u03e5\u00ac", "\u0003\u0002\u0002\u0002\u03e6\u03e7\u0007+\u0002\u0002\u03e7\u00ae", "\u0003\u0002\u0002\u0002\u03e8\u03e9\u0007]\u0002\u0002\u03e9\u00b0", "\u0003\u0002\u0002\u0002\u03ea\u03eb\u0007_\u0002\u0002\u03eb\u00b2", "\u0003\u0002\u0002\u0002\u03ec\u03ed\u0007}\u0002\u0002\u03ed\u00b4", "\u0003\u0002\u0002\u0002\u03ee\u03ef\u0007\u007f\u0002\u0002\u03ef\u00b6", "\u0003\u0002\u0002\u0002\u03f0\u03f1\u0007-\u0002\u0002\u03f1\u00b8", "\u0003\u0002\u0002\u0002\u03f2\u03f3\u0007/\u0002\u0002\u03f3\u00ba", "\u0003\u0002\u0002\u0002\u03f4\u03f5\u0007,\u0002\u0002\u03f5\u00bc", "\u0003\u0002\u0002\u0002\u03f6\u03f7\u00071\u0002\u0002\u03f7\u00be", "\u0003\u0002\u0002\u0002\u03f8\u03f9\u0007\'\u0002\u0002\u03f9\u00c0", "\u0003\u0002\u0002\u0002\u03fa\u03fb\u0007`\u0002\u0002\u03fb\u00c2", "\u0003\u0002\u0002\u0002\u03fc\u03fd\u0007(\u0002\u0002\u03fd\u00c4", "\u0003\u0002\u0002\u0002\u03fe\u03ff\u0007~\u0002\u0002\u03ff\u00c6", "\u0003\u0002\u0002\u0002\u0400\u0401\u0007\u0080\u0002\u0002\u0401\u00c8", "\u0003\u0002\u0002\u0002\u0402\u0407\u0007#\u0002\u0002\u0403\u0404", "\u0007p\u0002\u0002\u0404\u0405\u0007q\u0002\u0002\u0405\u0407\u0007", "v\u0002\u0002\u0406\u0402\u0003\u0002\u0002\u0002\u0406\u0403\u0003", "\u0002\u0002\u0002\u0407\u00ca\u0003\u0002\u0002\u0002\u0408\u0409\u0007", "?\u0002\u0002\u0409\u00cc\u0003\u0002\u0002\u0002\u040a\u040b\u0007", ">\u0002\u0002\u040b\u00ce\u0003\u0002\u0002\u0002\u040c\u040d\u0007", "@\u0002\u0002\u040d\u00d0\u0003\u0002\u0002\u0002\u040e\u040f\u0007", "-\u0002\u0002\u040f\u0410\u0007?\u0002\u0002\u0410\u00d2\u0003\u0002", "\u0002\u0002\u0411\u0412\u0007/\u0002\u0002\u0412\u0413\u0007?\u0002", "\u0002\u0413\u00d4\u0003\u0002\u0002\u0002\u0414\u0415\u0007,\u0002", "\u0002\u0415\u0416\u0007?\u0002\u0002\u0416\u00d6\u0003\u0002\u0002", "\u0002\u0417\u0418\u00071\u0002\u0002\u0418\u0419\u0007?\u0002\u0002", "\u0419\u00d8\u0003\u0002\u0002\u0002\u041a\u041b\u0007\'\u0002\u0002", "\u041b\u041c\u0007?\u0002\u0002\u041c\u00da\u0003\u0002\u0002\u0002", "\u041d\u041e\u0007`\u0002\u0002\u041e\u041f\u0007?\u0002\u0002\u041f", "\u00dc\u0003\u0002\u0002\u0002\u0420\u0421\u0007(\u0002\u0002\u0421", "\u0422\u0007?\u0002\u0002\u0422\u00de\u0003\u0002\u0002\u0002\u0423", "\u0424\u0007~\u0002\u0002\u0424\u0425\u0007?\u0002\u0002\u0425\u00e0", "\u0003\u0002\u0002\u0002\u0426\u0427\u0007>\u0002\u0002\u0427\u0428", "\u0007>\u0002\u0002\u0428\u0429\u0007?\u0002\u0002\u0429\u00e2\u0003", "\u0002\u0002\u0002\u042a\u042b\u0007@\u0002\u0002\u042b\u042c\u0007", "@\u0002\u0002\u042c\u042d\u0007?\u0002\u0002\u042d\u00e4\u0003\u0002", "\u0002\u0002\u042e\u042f\u0007?\u0002\u0002\u042f\u0430\u0007?\u0002", "\u0002\u0430\u00e6\u0003\u0002\u0002\u0002\u0431\u0432\u0007#\u0002", "\u0002\u0432\u0433\u0007?\u0002\u0002\u0433\u00e8\u0003\u0002\u0002", "\u0002\u0434\u0435\u0007>\u0002\u0002\u0435\u0436\u0007?\u0002\u0002", "\u0436\u00ea\u0003\u0002\u0002\u0002\u0437\u0438\u0007@\u0002\u0002", "\u0438\u0439\u0007?\u0002\u0002\u0439\u00ec\u0003\u0002\u0002\u0002", "\u043a\u043b\u0007(\u0002\u0002\u043b\u0440\u0007(\u0002\u0002\u043c", "\u043d\u0007c\u0002\u0002\u043d\u043e\u0007p\u0002\u0002\u043e\u0440", "\u0007f\u0002\u0002\u043f\u043a\u0003\u0002\u0002\u0002\u043f\u043c", "\u0003\u0002\u0002\u0002\u0440\u00ee\u0003\u0002\u0002\u0002\u0441\u0442", "\u0007~\u0002\u0002\u0442\u0446\u0007~\u0002\u0002\u0443\u0444\u0007", "q\u0002\u0002\u0444\u0446\u0007t\u0002\u0002\u0445\u0441\u0003\u0002", "\u0002\u0002\u0445\u0443\u0003\u0002\u0002\u0002\u0446\u00f0\u0003\u0002", "\u0002\u0002\u0447\u0448\u0007-\u0002\u0002\u0448\u0449\u0007-\u0002", "\u0002\u0449\u00f2\u0003\u0002\u0002\u0002\u044a\u044b\u0007/\u0002", "\u0002\u044b\u044c\u0007/\u0002\u0002\u044c\u00f4\u0003\u0002\u0002", "\u0002\u044d\u044e\u0007.\u0002\u0002\u044e\u00f6\u0003\u0002\u0002", "\u0002\u044f\u0450\u0007/\u0002\u0002\u0450\u0451\u0007@\u0002\u0002", "\u0451\u0452\u0007,\u0002\u0002\u0452\u00f8\u0003\u0002\u0002\u0002", "\u0453\u0454\u0007/\u0002\u0002\u0454\u0455\u0007@\u0002\u0002\u0455", "\u00fa\u0003\u0002\u0002\u0002\u0456\u0457\u0007A\u0002\u0002\u0457", "\u00fc\u0003\u0002\u0002\u0002\u0458\u0459\u0007<\u0002\u0002\u0459", "\u00fe\u0003\u0002\u0002\u0002\u045a\u045b\u0007<\u0002\u0002\u045b", "\u045c\u0007<\u0002\u0002\u045c\u0100\u0003\u0002\u0002\u0002\u045d", "\u045e\u0007=\u0002\u0002\u045e\u0102\u0003\u0002\u0002\u0002\u045f", "\u0460\u00070\u0002\u0002\u0460\u0104\u0003\u0002\u0002\u0002\u0461", "\u0462\u00070\u0002\u0002\u0462\u0463\u0007,\u0002\u0002\u0463\u0106", "\u0003\u0002\u0002\u0002\u0464\u0465\u00070\u0002\u0002\u0465\u0466", "\u00070\u0002\u0002\u0466\u0467\u00070\u0002\u0002\u0467\u0108\u0003", "\u0002\u0002\u0002\u0468\u0469\u0005\u0121\u0091\u0002\u0469\u046a\u0005", "\u0121\u0091\u0002\u046a\u046b\u0005\u0121\u0091\u0002\u046b\u046c\u0005", "\u0121\u0091\u0002\u046c\u010a\u0003\u0002\u0002\u0002\u046d\u046e\u0007", "^\u0002\u0002\u046e\u046f\u0007w\u0002\u0002\u046f\u0470\u0003\u0002", "\u0002\u0002\u0470\u0478\u0005\u0109\u0085\u0002\u0471\u0472\u0007^", "\u0002\u0002\u0472\u0473\u0007W\u0002\u0002\u0473\u0474\u0003\u0002", "\u0002\u0002\u0474\u0475\u0005\u0109\u0085\u0002\u0475\u0476\u0005\u0109", "\u0085\u0002\u0476\u0478\u0003\u0002\u0002\u0002\u0477\u046d\u0003\u0002", "\u0002\u0002\u0477\u0471\u0003\u0002\u0002\u0002\u0478\u010c\u0003\u0002", "\u0002\u0002\u0479\u047e\u0005\u010f\u0088\u0002\u047a\u047d\u0005\u010f", "\u0088\u0002\u047b\u047d\u0005\u0113\u008a\u0002\u047c\u047a\u0003\u0002", "\u0002\u0002\u047c\u047b\u0003\u0002\u0002\u0002\u047d\u0480\u0003\u0002", "\u0002\u0002\u047e\u047c\u0003\u0002\u0002\u0002\u047e\u047f\u0003\u0002", "\u0002\u0002\u047f\u010e\u0003\u0002\u0002\u0002\u0480\u047e\u0003\u0002", "\u0002\u0002\u0481\u0484\u0005\u0111\u0089\u0002\u0482\u0484\u0005\u010b", "\u0086\u0002\u0483\u0481\u0003\u0002\u0002\u0002\u0483\u0482\u0003\u0002", "\u0002\u0002\u0484\u0110\u0003\u0002\u0002\u0002\u0485\u0486\t\u0004", "\u0002\u0002\u0486\u0112\u0003\u0002\u0002\u0002\u0487\u0488\t\u0005", "\u0002\u0002\u0488\u0114\u0003\u0002\u0002\u0002\u0489\u0490\u0005\u011d", "\u008f\u0002\u048a\u048c\u0007)\u0002\u0002\u048b\u048a\u0003\u0002", "\u0002\u0002\u048b\u048c\u0003\u0002\u0002\u0002\u048c\u048d\u0003\u0002", "\u0002\u0002\u048d\u048f\u0005\u0113\u008a\u0002\u048e\u048b\u0003\u0002", "\u0002\u0002\u048f\u0492\u0003\u0002\u0002\u0002\u0490\u048e\u0003\u0002", "\u0002\u0002\u0490\u0491\u0003\u0002\u0002\u0002\u0491\u0116\u0003\u0002", "\u0002\u0002\u0492\u0490\u0003\u0002\u0002\u0002\u0493\u049a\u00072", "\u0002\u0002\u0494\u0496\u0007)\u0002\u0002\u0495\u0494\u0003\u0002", "\u0002\u0002\u0495\u0496\u0003\u0002\u0002\u0002\u0496\u0497\u0003\u0002", "\u0002\u0002\u0497\u0499\u0005\u011f\u0090\u0002\u0498\u0495\u0003\u0002", "\u0002\u0002\u0499\u049c\u0003\u0002\u0002\u0002\u049a\u0498\u0003\u0002", "\u0002\u0002\u049a\u049b\u0003\u0002\u0002\u0002\u049b\u0118\u0003\u0002", "\u0002\u0002\u049c\u049a\u0003\u0002\u0002\u0002\u049d\u049e\u00072", "\u0002\u0002\u049e\u04a2\u0007z\u0002\u0002\u049f\u04a0\u00072\u0002", "\u0002\u04a0\u04a2\u0007Z\u0002\u0002\u04a1\u049d\u0003\u0002\u0002", "\u0002\u04a1\u049f\u0003\u0002\u0002\u0002\u04a2\u04a3\u0003\u0002\u0002", "\u0002\u04a3\u04aa\u0005\u0121\u0091\u0002\u04a4\u04a6\u0007)\u0002", "\u0002\u04a5\u04a4\u0003\u0002\u0002\u0002\u04a5\u04a6\u0003\u0002\u0002", "\u0002\u04a6\u04a7\u0003\u0002\u0002\u0002\u04a7\u04a9\u0005\u0121\u0091", "\u0002\u04a8\u04a5\u0003\u0002\u0002\u0002\u04a9\u04ac\u0003\u0002\u0002", "\u0002\u04aa\u04a8\u0003\u0002\u0002\u0002\u04aa\u04ab\u0003\u0002\u0002", "\u0002\u04ab\u011a\u0003\u0002\u0002\u0002\u04ac\u04aa\u0003\u0002\u0002", "\u0002\u04ad\u04ae\u00072\u0002\u0002\u04ae\u04b2\u0007d\u0002\u0002", "\u04af\u04b0\u00072\u0002\u0002\u04b0\u04b2\u0007D\u0002\u0002\u04b1", "\u04ad\u0003\u0002\u0002\u0002\u04b1\u04af\u0003\u0002\u0002\u0002\u04b2", "\u04b3\u0003\u0002\u0002\u0002\u04b3\u04ba\u0005\u0123\u0092\u0002\u04b4", "\u04b6\u0007)\u0002\u0002\u04b5\u04b4\u0003\u0002\u0002\u0002\u04b5", "\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b7\u0003\u0002\u0002\u0002\u04b7", "\u04b9\u0005\u0123\u0092\u0002\u04b8\u04b5\u0003\u0002\u0002\u0002\u04b9", "\u04bc\u0003\u0002\u0002\u0002\u04ba\u04b8\u0003\u0002\u0002\u0002\u04ba", "\u04bb\u0003\u0002\u0002\u0002\u04bb\u011c\u0003\u0002\u0002\u0002\u04bc", "\u04ba\u0003\u0002\u0002\u0002\u04bd\u04be\t\u0006\u0002\u0002\u04be", "\u011e\u0003\u0002\u0002\u0002\u04bf\u04c0\t\u0007\u0002\u0002\u04c0", "\u0120\u0003\u0002\u0002\u0002\u04c1\u04c2\t\b\u0002\u0002\u04c2\u0122", "\u0003\u0002\u0002\u0002\u04c3\u04c4\t\t\u0002\u0002\u04c4\u0124\u0003", "\u0002\u0002\u0002\u04c5\u04c7\u0005\u0127\u0094\u0002\u04c6\u04c8\u0005", "\u0129\u0095\u0002\u04c7\u04c6\u0003\u0002\u0002\u0002\u04c7\u04c8\u0003", "\u0002\u0002\u0002\u04c8\u04d6\u0003\u0002\u0002\u0002\u04c9\u04cb\u0005", "\u0127\u0094\u0002\u04ca\u04cc\u0005\u012b\u0096\u0002\u04cb\u04ca\u0003", "\u0002\u0002\u0002\u04cb\u04cc\u0003\u0002\u0002\u0002\u04cc\u04d6\u0003", "\u0002\u0002\u0002\u04cd\u04cf\u0005\u0129\u0095\u0002\u04ce\u04d0\u0005", "\u0127\u0094\u0002\u04cf\u04ce\u0003\u0002\u0002\u0002\u04cf\u04d0\u0003", "\u0002\u0002\u0002\u04d0\u04d6\u0003\u0002\u0002\u0002\u04d1\u04d3\u0005", "\u012b\u0096\u0002\u04d2\u04d4\u0005\u0127\u0094\u0002\u04d3\u04d2\u0003", "\u0002\u0002\u0002\u04d3\u04d4\u0003\u0002\u0002\u0002\u04d4\u04d6\u0003", "\u0002\u0002\u0002\u04d5\u04c5\u0003\u0002\u0002\u0002\u04d5\u04c9\u0003", "\u0002\u0002\u0002\u04d5\u04cd\u0003\u0002\u0002\u0002\u04d5\u04d1\u0003", "\u0002\u0002\u0002\u04d6\u0126\u0003\u0002\u0002\u0002\u04d7\u04d8\t", "\n\u0002\u0002\u04d8\u0128\u0003\u0002\u0002\u0002\u04d9\u04da\t\u000b", "\u0002\u0002\u04da\u012a\u0003\u0002\u0002\u0002\u04db\u04dc\u0007n", "\u0002\u0002\u04dc\u04e0\u0007n\u0002\u0002\u04dd\u04de\u0007N\u0002", "\u0002\u04de\u04e0\u0007N\u0002\u0002\u04df\u04db\u0003\u0002\u0002", "\u0002\u04df\u04dd\u0003\u0002\u0002\u0002\u04e0\u012c\u0003\u0002\u0002", "\u0002\u04e1\u04e5\n\f\u0002\u0002\u04e2\u04e5\u0005\u012f\u0098\u0002", "\u04e3\u04e5\u0005\u010b\u0086\u0002\u04e4\u04e1\u0003\u0002\u0002\u0002", "\u04e4\u04e2\u0003\u0002\u0002\u0002\u04e4\u04e3\u0003\u0002\u0002\u0002", "\u04e5\u012e\u0003\u0002\u0002\u0002\u04e6\u04ea\u0005\u0131\u0099\u0002", "\u04e7\u04ea\u0005\u0133\u009a\u0002\u04e8\u04ea\u0005\u0135\u009b\u0002", "\u04e9\u04e6\u0003\u0002\u0002\u0002\u04e9\u04e7\u0003\u0002\u0002\u0002", "\u04e9\u04e8\u0003\u0002\u0002\u0002\u04ea\u0130\u0003\u0002\u0002\u0002", "\u04eb\u04ec\u0007^\u0002\u0002\u04ec\u050a\u0007)\u0002\u0002\u04ed", "\u04ee\u0007^\u0002\u0002\u04ee\u050a\u0007$\u0002\u0002\u04ef\u04f0", "\u0007^\u0002\u0002\u04f0\u050a\u0007A\u0002\u0002\u04f1\u04f2\u0007", "^\u0002\u0002\u04f2\u050a\u0007^\u0002\u0002\u04f3\u04f4\u0007^\u0002", "\u0002\u04f4\u050a\u0007c\u0002\u0002\u04f5\u04f6\u0007^\u0002\u0002", "\u04f6\u050a\u0007d\u0002\u0002\u04f7\u04f8\u0007^\u0002\u0002\u04f8", "\u050a\u0007h\u0002\u0002\u04f9\u04fa\u0007^\u0002\u0002\u04fa\u050a", "\u0007p\u0002\u0002\u04fb\u04fc\u0007^\u0002\u0002\u04fc\u050a\u0007", "t\u0002\u0002\u04fd\u0503\u0007^\u0002\u0002\u04fe\u0500\u0007\u000f", "\u0002\u0002\u04ff\u0501\u0007\f\u0002\u0002\u0500\u04ff\u0003\u0002", "\u0002\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501\u0504\u0003\u0002", "\u0002\u0002\u0502\u0504\u0007\f\u0002\u0002\u0503\u04fe\u0003\u0002", "\u0002\u0002\u0503\u0502\u0003\u0002\u0002\u0002\u0504\u050a\u0003\u0002", "\u0002\u0002\u0505\u0506\u0007^\u0002\u0002\u0506\u050a\u0007v\u0002", "\u0002\u0507\u0508\u0007^\u0002\u0002\u0508\u050a\u0007x\u0002\u0002", "\u0509\u04eb\u0003\u0002\u0002\u0002\u0509\u04ed\u0003\u0002\u0002\u0002", "\u0509\u04ef\u0003\u0002\u0002\u0002\u0509\u04f1\u0003\u0002\u0002\u0002", "\u0509\u04f3\u0003\u0002\u0002\u0002\u0509\u04f5\u0003\u0002\u0002\u0002", "\u0509\u04f7\u0003\u0002\u0002\u0002\u0509\u04f9\u0003\u0002\u0002\u0002", "\u0509\u04fb\u0003\u0002\u0002\u0002\u0509\u04fd\u0003\u0002\u0002\u0002", "\u0509\u0505\u0003\u0002\u0002\u0002\u0509\u0507\u0003\u0002\u0002\u0002", "\u050a\u0132\u0003\u0002\u0002\u0002\u050b\u050c\u0007^\u0002\u0002", "\u050c\u0517\u0005\u011f\u0090\u0002\u050d\u050e\u0007^\u0002\u0002", "\u050e\u050f\u0005\u011f\u0090\u0002\u050f\u0510\u0005\u011f\u0090\u0002", "\u0510\u0517\u0003\u0002\u0002\u0002\u0511\u0512\u0007^\u0002\u0002", "\u0512\u0513\u0005\u011f\u0090\u0002\u0513\u0514\u0005\u011f\u0090\u0002", "\u0514\u0515\u0005\u011f\u0090\u0002\u0515\u0517\u0003\u0002\u0002\u0002", "\u0516\u050b\u0003\u0002\u0002\u0002\u0516\u050d\u0003\u0002\u0002\u0002", "\u0516\u0511\u0003\u0002\u0002\u0002\u0517\u0134\u0003\u0002\u0002\u0002", "\u0518\u0519\u0007^\u0002\u0002\u0519\u051a\u0007z\u0002\u0002\u051a", "\u051c\u0003\u0002\u0002\u0002\u051b\u051d\u0005\u0121\u0091\u0002\u051c", "\u051b\u0003\u0002\u0002\u0002\u051d\u051e\u0003\u0002\u0002\u0002\u051e", "\u051c\u0003\u0002\u0002\u0002\u051e\u051f\u0003\u0002\u0002\u0002\u051f", "\u0136\u0003\u0002\u0002\u0002\u0520\u0522\u0005\u013d\u009f\u0002\u0521", "\u0520\u0003\u0002\u0002\u0002\u0521\u0522\u0003\u0002\u0002\u0002\u0522", "\u0523\u0003\u0002\u0002\u0002\u0523\u0524\u00070\u0002\u0002\u0524", "\u0529\u0005\u013d\u009f\u0002\u0525\u0526\u0005\u013d\u009f\u0002\u0526", "\u0527\u00070\u0002\u0002\u0527\u0529\u0003\u0002\u0002\u0002\u0528", "\u0521\u0003\u0002\u0002\u0002\u0528\u0525\u0003\u0002\u0002\u0002\u0529", "\u0138\u0003\u0002\u0002\u0002\u052a\u052c\u0007g\u0002\u0002\u052b", "\u052d\u0005\u013b\u009e\u0002\u052c\u052b\u0003\u0002\u0002\u0002\u052c", "\u052d\u0003\u0002\u0002\u0002\u052d\u052e\u0003\u0002\u0002\u0002\u052e", "\u0535\u0005\u013d\u009f\u0002\u052f\u0531\u0007G\u0002\u0002\u0530", "\u0532\u0005\u013b\u009e\u0002\u0531\u0530\u0003\u0002\u0002\u0002\u0531", "\u0532\u0003\u0002\u0002\u0002\u0532\u0533\u0003\u0002\u0002\u0002\u0533", "\u0535\u0005\u013d\u009f\u0002\u0534\u052a\u0003\u0002\u0002\u0002\u0534", "\u052f\u0003\u0002\u0002\u0002\u0535\u013a\u0003\u0002\u0002\u0002\u0536", "\u0537\t\r\u0002\u0002\u0537\u013c\u0003\u0002\u0002\u0002\u0538\u053f", "\u0005\u0113\u008a\u0002\u0539\u053b\u0007)\u0002\u0002\u053a\u0539", "\u0003\u0002\u0002\u0002\u053a\u053b\u0003\u0002\u0002\u0002\u053b\u053c", "\u0003\u0002\u0002\u0002\u053c\u053e\u0005\u0113\u008a\u0002\u053d\u053a", "\u0003\u0002\u0002\u0002\u053e\u0541\u0003\u0002\u0002\u0002\u053f\u053d", "\u0003\u0002\u0002\u0002\u053f\u0540\u0003\u0002\u0002\u0002\u0540\u013e", "\u0003\u0002\u0002\u0002\u0541\u053f\u0003\u0002\u0002\u0002\u0542\u0543", "\t\u000e\u0002\u0002\u0543\u0140\u0003\u0002\u0002\u0002\u0544\u0545", "\u0007w\u0002\u0002\u0545\u0548\u0007:\u0002\u0002\u0546\u0548\t\u0002", "\u0002\u0002\u0547\u0544\u0003\u0002\u0002\u0002\u0547\u0546\u0003\u0002", "\u0002\u0002\u0548\u0142\u0003\u0002\u0002\u0002\u0549\u054d\n\u000f", "\u0002\u0002\u054a\u054d\u0005\u012f\u0098\u0002\u054b\u054d\u0005\u010b", "\u0086\u0002\u054c\u0549\u0003\u0002\u0002\u0002\u054c\u054a\u0003\u0002", "\u0002\u0002\u054c\u054b\u0003\u0002\u0002\u0002\u054d\u0144\u0003\u0002", "\u0002\u0002\u054e\u054f\u0007T\u0002\u0002\u054f\u0550\u0007$\u0002", "\u0002\u0550\u0556\u0003\u0002\u0002\u0002\u0551\u0552\u0007^\u0002", "\u0002\u0552\u0555\t\u0010\u0002\u0002\u0553\u0555\n\u0011\u0002\u0002", "\u0554\u0551\u0003\u0002\u0002\u0002\u0554\u0553\u0003\u0002\u0002\u0002", "\u0555\u0558\u0003\u0002\u0002\u0002\u0556\u0557\u0003\u0002\u0002\u0002", "\u0556\u0554\u0003\u0002\u0002\u0002\u0557\u0559\u0003\u0002\u0002\u0002", "\u0558\u0556\u0003\u0002\u0002\u0002\u0559\u055d\u0007*\u0002\u0002", "\u055a\u055c\n\u0012\u0002\u0002\u055b\u055a\u0003\u0002\u0002\u0002", "\u055c\u055f\u0003\u0002\u0002\u0002\u055d\u055e\u0003\u0002\u0002\u0002", "\u055d\u055b\u0003\u0002\u0002\u0002\u055e\u0560\u0003\u0002\u0002\u0002", "\u055f\u055d\u0003\u0002\u0002\u0002\u0560\u0566\u0007+\u0002\u0002", "\u0561\u0562\u0007^\u0002\u0002\u0562\u0565\t\u0010\u0002\u0002\u0563", "\u0565\n\u0013\u0002\u0002\u0564\u0561\u0003\u0002\u0002\u0002\u0564", "\u0563\u0003\u0002\u0002\u0002\u0565\u0568\u0003\u0002\u0002\u0002\u0566", "\u0567\u0003\u0002\u0002\u0002\u0566\u0564\u0003\u0002\u0002\u0002\u0567", "\u0569\u0003\u0002\u0002\u0002\u0568\u0566\u0003\u0002\u0002\u0002\u0569", "\u056a\u0007$\u0002\u0002\u056a\u0146\u0003\u0002\u0002\u0002\u056b", "\u056c\u0005\u0115\u008b\u0002\u056c\u056d\u0005\u014f\u00a8\u0002\u056d", "\u0578\u0003\u0002\u0002\u0002\u056e\u056f\u0005\u0117\u008c\u0002\u056f", "\u0570\u0005\u014f\u00a8\u0002\u0570\u0578\u0003\u0002\u0002\u0002\u0571", "\u0572\u0005\u0119\u008d\u0002\u0572\u0573\u0005\u014f\u00a8\u0002\u0573", "\u0578\u0003\u0002\u0002\u0002\u0574\u0575\u0005\u011b\u008e\u0002\u0575", "\u0576\u0005\u014f\u00a8\u0002\u0576\u0578\u0003\u0002\u0002\u0002\u0577", "\u056b\u0003\u0002\u0002\u0002\u0577\u056e\u0003\u0002\u0002\u0002\u0577", "\u0571\u0003\u0002\u0002\u0002\u0577\u0574\u0003\u0002\u0002\u0002\u0578", "\u0148\u0003\u0002\u0002\u0002\u0579\u057b\u0005\u0137\u009c\u0002\u057a", "\u057c\u0005\u0139\u009d\u0002\u057b\u057a\u0003\u0002\u0002\u0002\u057b", "\u057c\u0003\u0002\u0002\u0002\u057c\u057d\u0003\u0002\u0002\u0002\u057d", "\u057e\u0005\u014f\u00a8\u0002\u057e\u0584\u0003\u0002\u0002\u0002\u057f", "\u0580\u0005\u013d\u009f\u0002\u0580\u0581\u0005\u0139\u009d\u0002\u0581", "\u0582\u0005\u014f\u00a8\u0002\u0582\u0584\u0003\u0002\u0002\u0002\u0583", "\u0579\u0003\u0002\u0002\u0002\u0583\u057f\u0003\u0002\u0002\u0002\u0584", "\u014a\u0003\u0002\u0002\u0002\u0585\u0586\u0005\t\u0005\u0002\u0586", "\u0587\u0005\u014f\u00a8\u0002\u0587\u014c\u0003\u0002\u0002\u0002\u0588", "\u0589\u0005\u0005\u0003\u0002\u0589\u058a\u0005\u014f\u00a8\u0002\u058a", "\u014e\u0003\u0002\u0002\u0002\u058b\u058c\u0005\u010d\u0087\u0002\u058c", "\u0150\u0003\u0002\u0002\u0002\u058d\u058f\t\u0014\u0002\u0002\u058e", "\u058d\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002\u0590", "\u058e\u0003\u0002\u0002\u0002\u0590\u0591\u0003\u0002\u0002\u0002\u0591", "\u0592\u0003\u0002\u0002\u0002\u0592\u0593\b\u00a9\u0003\u0002\u0593", "\u0152\u0003\u0002\u0002\u0002\u0594\u0596\u0007\u000f\u0002\u0002\u0595", "\u0597\u0007\f\u0002\u0002\u0596\u0595\u0003\u0002\u0002\u0002\u0596", "\u0597\u0003\u0002\u0002\u0002\u0597\u059a\u0003\u0002\u0002\u0002\u0598", "\u059a\u0007\f\u0002\u0002\u0599\u0594\u0003\u0002\u0002\u0002\u0599", "\u0598\u0003\u0002\u0002\u0002\u059a\u059b\u0003\u0002\u0002\u0002\u059b", "\u059c\b\u00aa\u0003\u0002\u059c\u0154\u0003\u0002\u0002\u0002\u059d", "\u059e\u00071\u0002\u0002\u059e\u059f\u0007,\u0002\u0002\u059f\u05a3", "\u0003\u0002\u0002\u0002\u05a0\u05a2\u000b\u0002\u0002\u0002\u05a1\u05a0", "\u0003\u0002\u0002\u0002\u05a2\u05a5\u0003\u0002\u0002\u0002\u05a3\u05a4", "\u0003\u0002\u0002\u0002\u05a3\u05a1\u0003\u0002\u0002\u0002\u05a4\u05a6", "\u0003\u0002\u0002\u0002\u05a5\u05a3\u0003\u0002\u0002\u0002\u05a6\u05a7", "\u0007,\u0002\u0002\u05a7\u05a8\u00071\u0002\u0002\u05a8\u05a9\u0003", "\u0002\u0002\u0002\u05a9\u05aa\b\u00ab\u0003\u0002\u05aa\u0156\u0003", "\u0002\u0002\u0002\u05ab\u05ac\u00071\u0002\u0002\u05ac\u05ad\u0007", "1\u0002\u0002\u05ad\u05b1\u0003\u0002\u0002\u0002\u05ae\u05b0\n\u0015", "\u0002\u0002\u05af\u05ae\u0003\u0002\u0002\u0002\u05b0\u05b3\u0003\u0002", "\u0002\u0002\u05b1\u05af\u0003\u0002\u0002\u0002\u05b1\u05b2\u0003\u0002", "\u0002\u0002\u05b2\u05b4\u0003\u0002\u0002\u0002\u05b3\u05b1\u0003\u0002", "\u0002\u0002\u05b4\u05b5\b\u00ac\u0003\u0002\u05b5\u0158\u0003\u0002", "\u0002\u0002L\u0002\u015b\u015f\u0163\u0167\u0169\u016c\u0172\u0178", "\u017b\u0180\u0182\u0185\u018c\u0190\u0194\u019c\u01a2\u01a7\u01ac\u01b1", "\u01b9\u0406\u043f\u0445\u0477\u047c\u047e\u0483\u048b\u0490\u0495\u049a", "\u04a1\u04a5\u04aa\u04b1\u04b5\u04ba\u04c7\u04cb\u04cf\u04d3\u04d5\u04df", "\u04e4\u04e9\u0500\u0503\u0509\u0516\u051e\u0521\u0528\u052c\u0531\u0534", "\u053a\u053f\u0547\u054c\u0554\u0556\u055d\u0564\u0566\u0577\u057b\u0583", "\u0590\u0596\u0599\u05a3\u05b1\u0004\u0002\u0003\u0002\b\u0002\u0002"].join("");
const atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new _antlr.default.dfa.DFA(ds, index));

class CPP14Lexer extends _antlr.default.Lexer {
  static grammarFileName = "CPP14Lexer.g4";
  static channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];
  static modeNames = ["DEFAULT_MODE"];
  static literalNames = [null, null, null, null, null, null, null, null, null, null, "'alignas'", "'alignof'", "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", "'constexpr'", "'const_cast'", "'continue'", "'decltype'", "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", "'else'", "'enum'", "'explicit'", "'export'", "'extern'", "'false'", "'final'", "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", "'int'", "'long'", "'mutable'", "'namespace'", "'new'", "'noexcept'", "'nullptr'", "'operator'", "'override'", "'private'", "'protected'", "'public'", "'register'", "'reinterpret_cast'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", "'static_cast'", "'struct'", "'switch'", "'template'", "'this'", "'thread_local'", "'throw'", "'true'", "'try'", "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", null, "'='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<='", "'>>='", "'=='", "'!='", "'<='", "'>='", null, null, "'++'", "'--'", "','", "'->*'", "'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'", "'...'"];
  static symbolicNames = [null, "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", "BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "MultiLineMacro", "Directive", "Alignas", "Alignof", "Asm", "Auto", "Bool", "Break", "Case", "Catch", "Char", "Char16", "Char32", "Class", "Const", "Constexpr", "Const_cast", "Continue", "Decltype", "Default", "Delete", "Do", "Double", "Dynamic_cast", "Else", "Enum", "Explicit", "Export", "Extern", "False_", "Final", "Float", "For", "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", "Namespace", "New", "Noexcept", "Nullptr", "Operator", "Override", "Private", "Protected", "Public", "Register", "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", "Static", "Static_assert", "Static_cast", "Struct", "Switch", "Template", "This", "Thread_local", "Throw", "True_", "Try", "Typedef", "Typeid_", "Typename_", "Union", "Unsigned", "Using", "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign", "MinusAssign", "StarAssign", "DivAssign", "ModAssign", "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign", "RightShiftAssign", "Equal", "NotEqual", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", "Identifier", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", "Integersuffix", "UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", "Whitespace", "Newline", "BlockComment", "LineComment"];
  static ruleNames = ["IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", "BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "MultiLineMacro", "Directive", "Alignas", "Alignof", "Asm", "Auto", "Bool", "Break", "Case", "Catch", "Char", "Char16", "Char32", "Class", "Const", "Constexpr", "Const_cast", "Continue", "Decltype", "Default", "Delete", "Do", "Double", "Dynamic_cast", "Else", "Enum", "Explicit", "Export", "Extern", "False_", "Final", "Float", "For", "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", "Namespace", "New", "Noexcept", "Nullptr", "Operator", "Override", "Private", "Protected", "Public", "Register", "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", "Static", "Static_assert", "Static_cast", "Struct", "Switch", "Template", "This", "Thread_local", "Throw", "True_", "Try", "Typedef", "Typeid_", "Typename_", "Union", "Unsigned", "Using", "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign", "MinusAssign", "StarAssign", "DivAssign", "ModAssign", "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign", "RightShiftAssign", "Equal", "NotEqual", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", "Hexquad", "Universalcharactername", "Identifier", "Identifiernondigit", "NONDIGIT", "DIGIT", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", "NONZERODIGIT", "OCTALDIGIT", "HEXADECIMALDIGIT", "BINARYDIGIT", "Integersuffix", "Unsignedsuffix", "Longsuffix", "Longlongsuffix", "Cchar", "Escapesequence", "Simpleescapesequence", "Octalescapesequence", "Hexadecimalescapesequence", "Fractionalconstant", "Exponentpart", "SIGN", "Digitsequence", "Floatingsuffix", "Encodingprefix", "Schar", "Rawstring", "UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", "Udsuffix", "Whitespace", "Newline", "BlockComment", "LineComment"];

  constructor(input) {
    super(input);
    this._interp = new _antlr.default.atn.LexerATNSimulator(this, atn, decisionsToDFA, new _antlr.default.PredictionContextCache());
  }

  get atn() {
    return atn;
  }

}

exports.default = CPP14Lexer;
CPP14Lexer.EOF = _antlr.default.Token.EOF;
CPP14Lexer.IntegerLiteral = 1;
CPP14Lexer.CharacterLiteral = 2;
CPP14Lexer.FloatingLiteral = 3;
CPP14Lexer.StringLiteral = 4;
CPP14Lexer.BooleanLiteral = 5;
CPP14Lexer.PointerLiteral = 6;
CPP14Lexer.UserDefinedLiteral = 7;
CPP14Lexer.MultiLineMacro = 8;
CPP14Lexer.Directive = 9;
CPP14Lexer.Alignas = 10;
CPP14Lexer.Alignof = 11;
CPP14Lexer.Asm = 12;
CPP14Lexer.Auto = 13;
CPP14Lexer.Bool = 14;
CPP14Lexer.Break = 15;
CPP14Lexer.Case = 16;
CPP14Lexer.Catch = 17;
CPP14Lexer.Char = 18;
CPP14Lexer.Char16 = 19;
CPP14Lexer.Char32 = 20;
CPP14Lexer.Class = 21;
CPP14Lexer.Const = 22;
CPP14Lexer.Constexpr = 23;
CPP14Lexer.Const_cast = 24;
CPP14Lexer.Continue = 25;
CPP14Lexer.Decltype = 26;
CPP14Lexer.Default = 27;
CPP14Lexer.Delete = 28;
CPP14Lexer.Do = 29;
CPP14Lexer.Double = 30;
CPP14Lexer.Dynamic_cast = 31;
CPP14Lexer.Else = 32;
CPP14Lexer.Enum = 33;
CPP14Lexer.Explicit = 34;
CPP14Lexer.Export = 35;
CPP14Lexer.Extern = 36;
CPP14Lexer.False_ = 37;
CPP14Lexer.Final = 38;
CPP14Lexer.Float = 39;
CPP14Lexer.For = 40;
CPP14Lexer.Friend = 41;
CPP14Lexer.Goto = 42;
CPP14Lexer.If = 43;
CPP14Lexer.Inline = 44;
CPP14Lexer.Int = 45;
CPP14Lexer.Long = 46;
CPP14Lexer.Mutable = 47;
CPP14Lexer.Namespace = 48;
CPP14Lexer.New = 49;
CPP14Lexer.Noexcept = 50;
CPP14Lexer.Nullptr = 51;
CPP14Lexer.Operator = 52;
CPP14Lexer.Override = 53;
CPP14Lexer.Private = 54;
CPP14Lexer.Protected = 55;
CPP14Lexer.Public = 56;
CPP14Lexer.Register = 57;
CPP14Lexer.Reinterpret_cast = 58;
CPP14Lexer.Return = 59;
CPP14Lexer.Short = 60;
CPP14Lexer.Signed = 61;
CPP14Lexer.Sizeof = 62;
CPP14Lexer.Static = 63;
CPP14Lexer.Static_assert = 64;
CPP14Lexer.Static_cast = 65;
CPP14Lexer.Struct = 66;
CPP14Lexer.Switch = 67;
CPP14Lexer.Template = 68;
CPP14Lexer.This = 69;
CPP14Lexer.Thread_local = 70;
CPP14Lexer.Throw = 71;
CPP14Lexer.True_ = 72;
CPP14Lexer.Try = 73;
CPP14Lexer.Typedef = 74;
CPP14Lexer.Typeid_ = 75;
CPP14Lexer.Typename_ = 76;
CPP14Lexer.Union = 77;
CPP14Lexer.Unsigned = 78;
CPP14Lexer.Using = 79;
CPP14Lexer.Virtual = 80;
CPP14Lexer.Void = 81;
CPP14Lexer.Volatile = 82;
CPP14Lexer.Wchar = 83;
CPP14Lexer.While = 84;
CPP14Lexer.LeftParen = 85;
CPP14Lexer.RightParen = 86;
CPP14Lexer.LeftBracket = 87;
CPP14Lexer.RightBracket = 88;
CPP14Lexer.LeftBrace = 89;
CPP14Lexer.RightBrace = 90;
CPP14Lexer.Plus = 91;
CPP14Lexer.Minus = 92;
CPP14Lexer.Star = 93;
CPP14Lexer.Div = 94;
CPP14Lexer.Mod = 95;
CPP14Lexer.Caret = 96;
CPP14Lexer.And = 97;
CPP14Lexer.Or = 98;
CPP14Lexer.Tilde = 99;
CPP14Lexer.Not = 100;
CPP14Lexer.Assign = 101;
CPP14Lexer.Less = 102;
CPP14Lexer.Greater = 103;
CPP14Lexer.PlusAssign = 104;
CPP14Lexer.MinusAssign = 105;
CPP14Lexer.StarAssign = 106;
CPP14Lexer.DivAssign = 107;
CPP14Lexer.ModAssign = 108;
CPP14Lexer.XorAssign = 109;
CPP14Lexer.AndAssign = 110;
CPP14Lexer.OrAssign = 111;
CPP14Lexer.LeftShiftAssign = 112;
CPP14Lexer.RightShiftAssign = 113;
CPP14Lexer.Equal = 114;
CPP14Lexer.NotEqual = 115;
CPP14Lexer.LessEqual = 116;
CPP14Lexer.GreaterEqual = 117;
CPP14Lexer.AndAnd = 118;
CPP14Lexer.OrOr = 119;
CPP14Lexer.PlusPlus = 120;
CPP14Lexer.MinusMinus = 121;
CPP14Lexer.Comma = 122;
CPP14Lexer.ArrowStar = 123;
CPP14Lexer.Arrow = 124;
CPP14Lexer.Question = 125;
CPP14Lexer.Colon = 126;
CPP14Lexer.Doublecolon = 127;
CPP14Lexer.Semi = 128;
CPP14Lexer.Dot = 129;
CPP14Lexer.DotStar = 130;
CPP14Lexer.Ellipsis = 131;
CPP14Lexer.Identifier = 132;
CPP14Lexer.DecimalLiteral = 133;
CPP14Lexer.OctalLiteral = 134;
CPP14Lexer.HexadecimalLiteral = 135;
CPP14Lexer.BinaryLiteral = 136;
CPP14Lexer.Integersuffix = 137;
CPP14Lexer.UserDefinedIntegerLiteral = 138;
CPP14Lexer.UserDefinedFloatingLiteral = 139;
CPP14Lexer.UserDefinedStringLiteral = 140;
CPP14Lexer.UserDefinedCharacterLiteral = 141;
CPP14Lexer.Whitespace = 142;
CPP14Lexer.Newline = 143;
CPP14Lexer.BlockComment = 144;
CPP14Lexer.LineComment = 145;

},{"antlr4":42}],128:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _antlr=_interopRequireDefault(require("antlr4"));var _CPP14ParserListener=_interopRequireDefault(require("./CPP14ParserListener.js"));var _CPP14ParserVisitor=_interopRequireDefault(require("./CPP14ParserVisitor.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// Generated from grammars/CPP14Parser.g4 by ANTLR 4.9.2
// jshint ignore: start
const serializedATN=["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786","\u5964\u0003\u0093\u0840\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004","\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t","\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004","\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010","\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013","\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017","\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a","\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e","\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#","\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004","*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004","1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004","8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004","?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004","F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004","M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004","T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004","[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004","b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004","i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004","p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004","w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004","~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004","\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t","\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004","\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t","\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004","\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t","\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004","\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t","\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004","\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t","\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004","\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t","\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004","\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t","\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004","\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t","\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004","\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t","\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0003","\u0002\u0005\u0002\u0182\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003","\u0006\u0003\u0187\n\u0003\r\u0003\u000e\u0003\u0188\u0003\u0003\u0003","\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005","\u0003\u0192\n\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u0196\n\u0004","\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005","\u0003\u0005\u0005\u0005\u019f\n\u0005\u0003\u0005\u0005\u0005\u01a2","\n\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u01a6\n\u0006\u0003\u0006","\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007","\u01ae\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003","\u0007\u0005\u0007\u01b5\n\u0007\u0003\u0007\u0005\u0007\u01b8\n\u0007","\u0003\u0007\u0007\u0007\u01bb\n\u0007\f\u0007\u000e\u0007\u01be\u000b","\u0007\u0003\b\u0003\b\u0005\b\u01c2\n\b\u0003\b\u0003\b\u0003\t\u0003","\t\u0005\t\u01c8\n\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n","\u0005\n\u01d0\n\n\u0005\n\u01d2\n\n\u0003\u000b\u0003\u000b\u0003\f","\u0003\f\u0003\f\u0007\f\u01d9\n\f\f\f\u000e\f\u01dc\u000b\f\u0003\f","\u0005\f\u01df\n\f\u0003\r\u0003\r\u0005\r\u01e3\n\r\u0003\u000e\u0005","\u000e\u01e6\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u01ea\n\u000e","\u0003\u000f\u0005\u000f\u01ed\n\u000f\u0003\u000f\u0003\u000f\u0003","\u000f\u0003\u0010\u0003\u0010\u0005\u0010\u01f4\n\u0010\u0003\u0010","\u0003\u0010\u0005\u0010\u01f8\n\u0010\u0003\u0010\u0005\u0010\u01fb","\n\u0010\u0003\u0010\u0005\u0010\u01fe\n\u0010\u0003\u0010\u0005\u0010","\u0201\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005","\u0011\u0207\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u020b\n\u0011","\u0003\u0011\u0003\u0011\u0005\u0011\u020f\n\u0011\u0003\u0011\u0003","\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003","\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u021d","\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0221\n\u0011\u0003\u0011","\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0227\n\u0011\u0003","\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u022e","\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011","\u0234\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0238\n\u0011\u0003","\u0011\u0003\u0011\u0007\u0011\u023c\n\u0011\f\u0011\u000e\u0011\u023f","\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0014","\u0005\u0014\u0246\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005","\u0014\u024b\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014","\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014","\u0003\u0014\u0005\u0014\u0258\n\u0014\u0003\u0015\u0003\u0015\u0003","\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u025f\n\u0015\u0003\u0015","\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015","\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u026b\n\u0015\u0003","\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003","\u0015\u0003\u0015\u0005\u0015\u0275\n\u0015\u0003\u0016\u0003\u0016","\u0003\u0017\u0005\u0017\u027a\n\u0017\u0003\u0017\u0003\u0017\u0005","\u0017\u027e\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017","\u0003\u0017\u0005\u0017\u0285\n\u0017\u0003\u0017\u0005\u0017\u0288","\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019","\u0003\u0019\u0005\u0019\u0290\n\u0019\u0003\u001a\u0003\u001a\u0005","\u001a\u0294\n\u001a\u0003\u001a\u0005\u001a\u0297\n\u001a\u0003\u001b","\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u029e\n","\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005","\u001b\u02a5\n\u001b\u0007\u001b\u02a7\n\u001b\f\u001b\u000e\u001b\u02aa","\u000b\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u02ae\n\u001c\u0003","\u001c\u0003\u001c\u0005\u001c\u02b2\n\u001c\u0003\u001d\u0005\u001d","\u02b5\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u02ba","\n\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e","\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f","\u0003\u001f\u0003\u001f\u0005\u001f\u02c9\n\u001f\u0003 \u0003 \u0003"," \u0007 \u02ce\n \f \u000e \u02d1\u000b \u0003!\u0003!\u0003!\u0007","!\u02d6\n!\f!\u000e!\u02d9\u000b!\u0003\"\u0003\"\u0003\"\u0007\"\u02de","\n\"\f\"\u000e\"\u02e1\u000b\"\u0003#\u0003#\u0003#\u0003#\u0007#\u02e7","\n#\f#\u000e#\u02ea\u000b#\u0003$\u0003$\u0003$\u0003$\u0005$\u02f0","\n$\u0003%\u0003%\u0003%\u0007%\u02f5\n%\f%\u000e%\u02f8\u000b%\u0003","&\u0003&\u0003&\u0007&\u02fd\n&\f&\u000e&\u0300\u000b&\u0003\'\u0003","\'\u0003\'\u0007\'\u0305\n\'\f\'\u000e\'\u0308\u000b\'\u0003(\u0003","(\u0003(\u0007(\u030d\n(\f(\u000e(\u0310\u000b(\u0003)\u0003)\u0003",")\u0007)\u0315\n)\f)\u000e)\u0318\u000b)\u0003*\u0003*\u0003*\u0007","*\u031d\n*\f*\u000e*\u0320\u000b*\u0003+\u0003+\u0003+\u0007+\u0325","\n+\f+\u000e+\u0328\u000b+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",",\u0005,\u0330\n,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0338","\n-\u0003.\u0003.\u0003/\u0003/\u0003/\u0007/\u033f\n/\f/\u000e/\u0342","\u000b/\u00030\u00030\u00031\u00031\u00031\u00051\u0349\n1\u00031\u0003","1\u00031\u00031\u00031\u00031\u00051\u0351\n1\u00051\u0353\n1\u0003","2\u00052\u0356\n2\u00032\u00032\u00032\u00032\u00052\u035c\n2\u0003","2\u00032\u00032\u00033\u00053\u0362\n3\u00033\u00033\u00034\u00034\u0005","4\u0368\n4\u00034\u00034\u00035\u00065\u036d\n5\r5\u000e5\u036e\u0003","6\u00036\u00036\u00036\u00036\u00036\u00036\u00056\u0378\n6\u00036\u0003","6\u00036\u00036\u00036\u00036\u00056\u0380\n6\u00037\u00037\u00057\u0384","\n7\u00037\u00037\u00037\u00037\u00037\u00057\u038b\n7\u00057\u038d","\n7\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003","8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00058\u03a1","\n8\u00038\u00038\u00058\u03a5\n8\u00038\u00038\u00038\u00038\u0005","8\u03ab\n8\u00038\u00038\u00038\u00058\u03b0\n8\u00039\u00039\u0005","9\u03b4\n9\u0003:\u0005:\u03b7\n:\u0003:\u0003:\u0003:\u0003;\u0003",";\u0005;\u03be\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u03c5\n","<\u0003<\u0003<\u0005<\u03c9\n<\u0003<\u0003<\u0003=\u0003=\u0003>\u0006",">\u03d0\n>\r>\u000e>\u03d1\u0003?\u0003?\u0003?\u0003?\u0003?\u0003","?\u0003?\u0003?\u0003?\u0005?\u03dd\n?\u0003@\u0003@\u0003@\u0003@\u0003","@\u0003@\u0003@\u0003@\u0005@\u03e7\n@\u0003A\u0003A\u0003A\u0005A\u03ec","\nA\u0003A\u0003A\u0003A\u0003A\u0003B\u0005B\u03f3\nB\u0003B\u0005","B\u03f6\nB\u0003B\u0003B\u0003B\u0005B\u03fb\nB\u0003B\u0003B\u0003","B\u0005B\u0400\nB\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003","C\u0003D\u0003D\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003","F\u0003F\u0005F\u0415\nF\u0003G\u0006G\u0418\nG\rG\u000eG\u0419\u0003","G\u0005G\u041d\nG\u0003H\u0003H\u0003I\u0003I\u0003J\u0003J\u0003K\u0003","K\u0003K\u0005K\u0428\nK\u0003L\u0003L\u0003L\u0003L\u0005L\u042e\n","L\u0003M\u0006M\u0431\nM\rM\u000eM\u0432\u0003M\u0005M\u0436\nM\u0003","N\u0006N\u0439\nN\rN\u000eN\u043a\u0003N\u0005N\u043e\nN\u0003O\u0003","O\u0003P\u0003P\u0003Q\u0005Q\u0445\nQ\u0003Q\u0003Q\u0003Q\u0003Q\u0003","Q\u0003Q\u0003Q\u0005Q\u044e\nQ\u0003Q\u0006Q\u0451\nQ\rQ\u000eQ\u0452","\u0003Q\u0005Q\u0456\nQ\u0003Q\u0003Q\u0005Q\u045a\nQ\u0003Q\u0003Q","\u0005Q\u045e\nQ\u0003Q\u0003Q\u0005Q\u0462\nQ\u0003Q\u0003Q\u0003Q","\u0005Q\u0467\nQ\u0003Q\u0007Q\u046a\nQ\fQ\u000eQ\u046d\u000bQ\u0003","Q\u0003Q\u0003Q\u0005Q\u0472\nQ\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u0478","\nQ\u0003R\u0003R\u0003R\u0003R\u0005R\u047e\nR\u0003S\u0003S\u0003","S\u0003S\u0005S\u0484\nS\u0003S\u0003S\u0003T\u0003T\u0005T\u048a\n","T\u0003T\u0005T\u048d\nT\u0003T\u0003T\u0003T\u0003T\u0005T\u0493\n","T\u0003T\u0003T\u0005T\u0497\nT\u0003T\u0003T\u0005T\u049b\nT\u0003","T\u0005T\u049e\nT\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0005V\u04a6","\nV\u0005V\u04a8\nV\u0003V\u0003V\u0003W\u0003W\u0005W\u04ae\nW\u0003","W\u0005W\u04b1\nW\u0003W\u0005W\u04b4\nW\u0003W\u0005W\u04b7\nW\u0003","X\u0003X\u0005X\u04bb\nX\u0003X\u0003X\u0005X\u04bf\nX\u0003X\u0003","X\u0003Y\u0003Y\u0005Y\u04c5\nY\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003","[\u0007[\u04cd\n[\f[\u000e[\u04d0\u000b[\u0003\\\u0003\\\u0003\\\u0005","\\\u04d5\n\\\u0003]\u0003]\u0003^\u0003^\u0005^\u04db\n^\u0003_\u0003","_\u0003`\u0005`\u04e0\n`\u0003`\u0003`\u0003`\u0005`\u04e5\n`\u0003","`\u0003`\u0005`\u04e9\n`\u0003`\u0003`\u0003a\u0003a\u0003b\u0003b\u0003","b\u0003b\u0003b\u0003b\u0003c\u0005c\u04f6\nc\u0003c\u0003c\u0003d\u0003","d\u0005d\u04fc\nd\u0003d\u0003d\u0005d\u0500\nd\u0003d\u0003d\u0003","d\u0003e\u0005e\u0506\ne\u0003e\u0003e\u0003e\u0005e\u050b\ne\u0003","e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003g\u0003","g\u0003g\u0003g\u0005g\u051a\ng\u0003g\u0003g\u0005g\u051e\ng\u0003","h\u0006h\u0521\nh\rh\u000eh\u0522\u0003i\u0003i\u0003i\u0005i\u0528","\ni\u0003i\u0003i\u0003i\u0005i\u052d\ni\u0003j\u0003j\u0003j\u0003","j\u0005j\u0533\nj\u0003j\u0005j\u0536\nj\u0003j\u0003j\u0003k\u0003","k\u0003k\u0007k\u053d\nk\fk\u000ek\u0540\u000bk\u0003k\u0005k\u0543","\nk\u0003l\u0003l\u0003l\u0005l\u0548\nl\u0003l\u0003l\u0005l\u054c","\nl\u0003m\u0003m\u0003n\u0003n\u0005n\u0552\nn\u0003n\u0003n\u0003","o\u0006o\u0557\no\ro\u000eo\u0558\u0003p\u0003p\u0003p\u0003p\u0003","p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0006p\u0568","\np\rp\u000ep\u0569\u0005p\u056c\np\u0003q\u0003q\u0003q\u0007q\u0571","\nq\fq\u000eq\u0574\u000bq\u0003r\u0003r\u0005r\u0578\nr\u0003s\u0003","s\u0003s\u0003s\u0003s\u0005s\u057f\ns\u0003t\u0003t\u0005t\u0583\n","t\u0007t\u0585\nt\ft\u000et\u0588\u000bt\u0003t\u0003t\u0003u\u0003","u\u0003u\u0005u\u058f\nu\u0003u\u0003u\u0003u\u0003u\u0005u\u0595\n","u\u0003u\u0003u\u0003u\u0003u\u0005u\u059b\nu\u0003u\u0003u\u0005u\u059f","\nu\u0005u\u05a1\nu\u0007u\u05a3\nu\fu\u000eu\u05a6\u000bu\u0003v\u0003","v\u0005v\u05aa\nv\u0003v\u0003v\u0005v\u05ae\nv\u0003v\u0005v\u05b1","\nv\u0003v\u0005v\u05b4\nv\u0003v\u0005v\u05b7\nv\u0003w\u0003w\u0003","w\u0005w\u05bc\nw\u0003x\u0003x\u0005x\u05c0\nx\u0003x\u0005x\u05c3","\nx\u0003x\u0003x\u0005x\u05c7\nx\u0003x\u0005x\u05ca\nx\u0005x\u05cc","\nx\u0003y\u0006y\u05cf\ny\ry\u000ey\u05d0\u0003z\u0003z\u0003{\u0003","{\u0003|\u0005|\u05d8\n|\u0003|\u0003|\u0003}\u0003}\u0005}\u05de\n","}\u0003~\u0003~\u0005~\u05e2\n~\u0003~\u0003~\u0003~\u0003~\u0005~\u05e8","\n~\u0003\u007f\u0003\u007f\u0006\u007f\u05ec\n\u007f\r\u007f\u000e","\u007f\u05ed\u0003\u007f\u0005\u007f\u05f1\n\u007f\u0005\u007f\u05f3","\n\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080","\u05f9\n\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u05fd\n\u0080\u0003","\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u0603\n\u0080","\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080","\u060a\n\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u060e\n\u0080\u0005","\u0080\u0610\n\u0080\u0007\u0080\u0612\n\u0080\f\u0080\u000e\u0080\u0615","\u000b\u0080\u0003\u0081\u0007\u0081\u0618\n\u0081\f\u0081\u000e\u0081","\u061b\u000b\u0081\u0003\u0081\u0003\u0081\u0003\u0082\u0003\u0082\u0003","\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0005\u0082\u0626","\n\u0082\u0003\u0082\u0003\u0082\u0005\u0082\u062a\n\u0082\u0005\u0082","\u062c\n\u0082\u0007\u0082\u062e\n\u0082\f\u0082\u000e\u0082\u0631\u000b","\u0082\u0003\u0083\u0003\u0083\u0005\u0083\u0635\n\u0083\u0003\u0083","\u0005\u0083\u0638\n\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0007","\u0084\u063d\n\u0084\f\u0084\u000e\u0084\u0640\u000b\u0084\u0003\u0085","\u0005\u0085\u0643\n\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0005","\u0085\u0648\n\u0085\u0005\u0085\u064a\n\u0085\u0003\u0085\u0003\u0085","\u0005\u0085\u064e\n\u0085\u0003\u0086\u0005\u0086\u0651\n\u0086\u0003","\u0086\u0005\u0086\u0654\n\u0086\u0003\u0086\u0003\u0086\u0005\u0086","\u0658\n\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0005\u0087\u065d","\n\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087","\u0005\u0087\u0664\n\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0003","\u0088\u0003\u0088\u0005\u0088\u066b\n\u0088\u0003\u0089\u0003\u0089","\u0003\u0089\u0005\u0089\u0670\n\u0089\u0003\u008a\u0003\u008a\u0005","\u008a\u0674\n\u008a\u0003\u008b\u0003\u008b\u0005\u008b\u0678\n\u008b","\u0003\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u067d\n\u008b\u0007","\u008b\u067f\n\u008b\f\u008b\u000e\u008b\u0682\u000b\u008b\u0003\u008c","\u0003\u008c\u0003\u008c\u0005\u008c\u0687\n\u008c\u0005\u008c\u0689","\n\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0003\u008d\u0005\u008d","\u068f\n\u008d\u0003\u008e\u0003\u008e\u0003\u008e\u0005\u008e\u0694","\n\u008e\u0003\u008e\u0003\u008e\u0003\u008f\u0003\u008f\u0005\u008f","\u069a\n\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u069e\n\u008f\u0005","\u008f\u06a0\n\u008f\u0003\u008f\u0005\u008f\u06a3\n\u008f\u0003\u008f","\u0003\u008f\u0005\u008f\u06a7\n\u008f\u0003\u008f\u0003\u008f\u0005","\u008f\u06ab\n\u008f\u0005\u008f\u06ad\n\u008f\u0005\u008f\u06af\n\u008f","\u0003\u0090\u0005\u0090\u06b2\n\u0090\u0003\u0090\u0003\u0090\u0003","\u0091\u0003\u0091\u0003\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0003","\u0093\u0003\u0093\u0006\u0093\u06be\n\u0093\r\u0093\u000e\u0093\u06bf","\u0003\u0094\u0005\u0094\u06c3\n\u0094\u0003\u0094\u0005\u0094\u06c6","\n\u0094\u0003\u0094\u0005\u0094\u06c9\n\u0094\u0003\u0094\u0003\u0094","\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094","\u06d2\n\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0007\u0095\u06d7","\n\u0095\f\u0095\u000e\u0095\u06da\u000b\u0095\u0003\u0096\u0003\u0096","\u0005\u0096\u06de\n\u0096\u0003\u0096\u0005\u0096\u06e1\n\u0096\u0003","\u0096\u0005\u0096\u06e4\n\u0096\u0005\u0096\u06e6\n\u0096\u0003\u0096","\u0005\u0096\u06e9\n\u0096\u0003\u0096\u0005\u0096\u06ec\n\u0096\u0003","\u0096\u0003\u0096\u0005\u0096\u06f0\n\u0096\u0003\u0097\u0006\u0097","\u06f3\n\u0097\r\u0097\u000e\u0097\u06f4\u0003\u0098\u0003\u0098\u0003","\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u009a\u0003\u009a\u0003","\u009a\u0003\u009b\u0003\u009b\u0005\u009b\u0702\n\u009b\u0003\u009b","\u0003\u009b\u0003\u009b\u0005\u009b\u0707\n\u009b\u0007\u009b\u0709","\n\u009b\f\u009b\u000e\u009b\u070c\u000b\u009b\u0003\u009c\u0005\u009c","\u070f\n\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u0714","\n\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u0719\n\u009c","\u0003\u009c\u0003\u009c\u0005\u009c\u071d\n\u009c\u0003\u009d\u0005","\u009d\u0720\n\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0724\n\u009d","\u0003\u009e\u0003\u009e\u0003\u009f\u0003\u009f\u0003\u00a0\u0003\u00a0","\u0003\u00a0\u0003\u00a1\u0003\u00a1\u0005\u00a1\u072f\n\u00a1\u0003","\u00a2\u0003\u00a2\u0005\u00a2\u0733\n\u00a2\u0003\u00a3\u0003\u00a3","\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0005\u00a4\u073a\n\u00a4\u0003","\u00a4\u0003\u00a4\u0003\u00a4\u0005\u00a4\u073f\n\u00a4\u0007\u00a4","\u0741\n\u00a4\f\u00a4\u000e\u00a4\u0744\u000b\u00a4\u0003\u00a5\u0003","\u00a5\u0003\u00a5\u0005\u00a5\u0749\n\u00a5\u0003\u00a5\u0003\u00a5","\u0005\u00a5\u074d\n\u00a5\u0003\u00a6\u0003\u00a6\u0005\u00a6\u0751","\n\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8","\u0003\u00a8\u0003\u00a8\u0005\u00a8\u075a\n\u00a8\u0003\u00a9\u0003","\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003","\u00aa\u0003\u00aa\u0007\u00aa\u0765\n\u00aa\f\u00aa\u000e\u00aa\u0768","\u000b\u00aa\u0003\u00ab\u0003\u00ab\u0005\u00ab\u076c\n\u00ab\u0003","\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0773","\n\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0777\n\u00ac\u0003\u00ac","\u0005\u00ac\u077a\n\u00ac\u0003\u00ac\u0005\u00ac\u077d\n\u00ac\u0003","\u00ac\u0005\u00ac\u0780\n\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac","\u0784\n\u00ac\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0005\u00ad\u0789","\n\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae","\u0005\u00ae\u0790\n\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u0794","\n\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u0798\n\u00ae\u0003\u00af","\u0003\u00af\u0003\u00b0\u0003\u00b0\u0005\u00b0\u079e\n\u00b0\u0003","\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u07a3\n\u00b0\u0007\u00b0","\u07a5\n\u00b0\f\u00b0\u000e\u00b0\u07a8\u000b\u00b0\u0003\u00b1\u0003","\u00b1\u0003\u00b1\u0005\u00b1\u07ad\n\u00b1\u0003\u00b2\u0003\u00b2","\u0003\u00b2\u0003\u00b2\u0005\u00b2\u07b3\n\u00b2\u0003\u00b2\u0005","\u00b2\u07b6\n\u00b2\u0003\u00b3\u0005\u00b3\u07b9\n\u00b3\u0003\u00b3","\u0003\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4","\u0003\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b6","\u0003\u00b6\u0005\u00b6\u07c9\n\u00b6\u0003\u00b6\u0003\u00b6\u0003","\u00b6\u0003\u00b7\u0006\u00b7\u07cf\n\u00b7\r\u00b7\u000e\u00b7\u07d0","\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8","\u0003\u00b9\u0005\u00b9\u07da\n\u00b9\u0003\u00b9\u0003\u00b9\u0003","\u00b9\u0005\u00b9\u07df\n\u00b9\u0003\u00b9\u0005\u00b9\u07e2\n\u00b9","\u0003\u00ba\u0003\u00ba\u0005\u00ba\u07e6\n\u00ba\u0003\u00bb\u0003","\u00bb\u0005\u00bb\u07ea\n\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc","\u0005\u00bc\u07ef\n\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bd\u0003","\u00bd\u0005\u00bd\u07f5\n\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd","\u0005\u00bd\u07fa\n\u00bd\u0007\u00bd\u07fc\n\u00bd\f\u00bd\u000e\u00bd","\u07ff\u000b\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003","\u00be\u0003\u00be\u0005\u00be\u0807\n\u00be\u0003\u00bf\u0003\u00bf","\u0003\u00bf\u0005\u00bf\u080c\n\u00bf\u0003\u00bf\u0003\u00bf\u0003","\u00bf\u0005\u00bf\u0811\n\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf","\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf","\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf","\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf","\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf","\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf","\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf","\u0003\u00bf\u0003\u00bf\u0005\u00bf\u083c\n\u00bf\u0003\u00c0\u0003","\u00c0\u0003\u00c0\u0003\u0419\b\f 4\u00e8\u00fe\u0102\u00c1\u0002\u0004","\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ","\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084","\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c","\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4","\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc","\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4","\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc","\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114","\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c","\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144","\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c","\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174","\u0176\u0178\u017a\u017c\u017e\u0002\u0019\u0004\u0002ccgg\u0006\u0002","\u001a\u001a!!<<CC\u0004\u0002~~\u0083\u0083\u0003\u0002z{\u0004\u0002","]_cf\u0004\u0002}}\u0084\u0084\u0003\u0002_a\u0003\u0002]^\u0004\u0002","hivw\u0003\u0002tu\u0004\u0002ggjs\u0007\u0002&&11;;AAHH\u0005\u0002","$$..RR\u0004\u000200>>\u0004\u0002??PP\u0004\u0002\u0017\u0017DD\u0003","\u0002W\\\u0004\u0002ccxx\u0004\u0002\u0018\u0018TT\u0003\u0002\u001d","\u001e\u0004\u0002((77\u0003\u00028:\u0003\u0002\u0003\t\u0002\u0929","\u0002\u0181\u0003\u0002\u0002\u0002\u0004\u0191\u0003\u0002\u0002\u0002","\u0006\u0195\u0003\u0002\u0002\u0002\b\u01a1\u0003\u0002\u0002\u0002","\n\u01a3\u0003\u0002\u0002\u0002\f\u01a9\u0003\u0002\u0002\u0002\u000e","\u01bf\u0003\u0002\u0002\u0002\u0010\u01c5\u0003\u0002\u0002\u0002\u0012","\u01d1\u0003\u0002\u0002\u0002\u0014\u01d3\u0003\u0002\u0002\u0002\u0016","\u01d5\u0003\u0002\u0002\u0002\u0018\u01e2\u0003\u0002\u0002\u0002\u001a","\u01e9\u0003\u0002\u0002\u0002\u001c\u01ec\u0003\u0002\u0002\u0002\u001e","\u01f1\u0003\u0002\u0002\u0002 \u0220\u0003\u0002\u0002\u0002\"\u0240","\u0003\u0002\u0002\u0002$\u0242\u0003\u0002\u0002\u0002&\u0257\u0003","\u0002\u0002\u0002(\u0274\u0003\u0002\u0002\u0002*\u0276\u0003\u0002","\u0002\u0002,\u0279\u0003\u0002\u0002\u0002.\u0289\u0003\u0002\u0002","\u00020\u028d\u0003\u0002\u0002\u00022\u0296\u0003\u0002\u0002\u0002","4\u0298\u0003\u0002\u0002\u00026\u02b1\u0003\u0002\u0002\u00028\u02b4","\u0003\u0002\u0002\u0002:\u02bd\u0003\u0002\u0002\u0002<\u02c8\u0003","\u0002\u0002\u0002>\u02ca\u0003\u0002\u0002\u0002@\u02d2\u0003\u0002","\u0002\u0002B\u02da\u0003\u0002\u0002\u0002D\u02e2\u0003\u0002\u0002","\u0002F\u02ef\u0003\u0002\u0002\u0002H\u02f1\u0003\u0002\u0002\u0002","J\u02f9\u0003\u0002\u0002\u0002L\u0301\u0003\u0002\u0002\u0002N\u0309","\u0003\u0002\u0002\u0002P\u0311\u0003\u0002\u0002\u0002R\u0319\u0003","\u0002\u0002\u0002T\u0321\u0003\u0002\u0002\u0002V\u0329\u0003\u0002","\u0002\u0002X\u0337\u0003\u0002\u0002\u0002Z\u0339\u0003\u0002\u0002","\u0002\\\u033b\u0003\u0002\u0002\u0002^\u0343\u0003\u0002\u0002\u0002","`\u0352\u0003\u0002\u0002\u0002b\u0355\u0003\u0002\u0002\u0002d\u0361","\u0003\u0002\u0002\u0002f\u0365\u0003\u0002\u0002\u0002h\u036c\u0003","\u0002\u0002\u0002j\u037f\u0003\u0002\u0002\u0002l\u038c\u0003\u0002","\u0002\u0002n\u03af\u0003\u0002\u0002\u0002p\u03b3\u0003\u0002\u0002","\u0002r\u03b6\u0003\u0002\u0002\u0002t\u03bd\u0003\u0002\u0002\u0002","v\u03c8\u0003\u0002\u0002\u0002x\u03cc\u0003\u0002\u0002\u0002z\u03cf","\u0003\u0002\u0002\u0002|\u03dc\u0003\u0002\u0002\u0002~\u03e6\u0003","\u0002\u0002\u0002\u0080\u03e8\u0003\u0002\u0002\u0002\u0082\u03ff\u0003","\u0002\u0002\u0002\u0084\u0401\u0003\u0002\u0002\u0002\u0086\u0409\u0003","\u0002\u0002\u0002\u0088\u040b\u0003\u0002\u0002\u0002\u008a\u0414\u0003","\u0002\u0002\u0002\u008c\u0417\u0003\u0002\u0002\u0002\u008e\u041e\u0003","\u0002\u0002\u0002\u0090\u0420\u0003\u0002\u0002\u0002\u0092\u0422\u0003","\u0002\u0002\u0002\u0094\u0427\u0003\u0002\u0002\u0002\u0096\u042d\u0003","\u0002\u0002\u0002\u0098\u0430\u0003\u0002\u0002\u0002\u009a\u0438\u0003","\u0002\u0002\u0002\u009c\u043f\u0003\u0002\u0002\u0002\u009e\u0441\u0003","\u0002\u0002\u0002\u00a0\u0477\u0003\u0002\u0002\u0002\u00a2\u047d\u0003","\u0002\u0002\u0002\u00a4\u047f\u0003\u0002\u0002\u0002\u00a6\u049d\u0003","\u0002\u0002\u0002\u00a8\u049f\u0003\u0002\u0002\u0002\u00aa\u04a1\u0003","\u0002\u0002\u0002\u00ac\u04ab\u0003\u0002\u0002\u0002\u00ae\u04b8\u0003","\u0002\u0002\u0002\u00b0\u04c2\u0003\u0002\u0002\u0002\u00b2\u04c6\u0003","\u0002\u0002\u0002\u00b4\u04c9\u0003\u0002\u0002\u0002\u00b6\u04d1\u0003","\u0002\u0002\u0002\u00b8\u04d6\u0003\u0002\u0002\u0002\u00ba\u04da\u0003","\u0002\u0002\u0002\u00bc\u04dc\u0003\u0002\u0002\u0002\u00be\u04df\u0003","\u0002\u0002\u0002\u00c0\u04ec\u0003\u0002\u0002\u0002\u00c2\u04ee\u0003","\u0002\u0002\u0002\u00c4\u04f5\u0003\u0002\u0002\u0002\u00c6\u04f9\u0003","\u0002\u0002\u0002\u00c8\u0505\u0003\u0002\u0002\u0002\u00ca\u050f\u0003","\u0002\u0002\u0002\u00cc\u0515\u0003\u0002\u0002\u0002\u00ce\u0520\u0003","\u0002\u0002\u0002\u00d0\u052c\u0003\u0002\u0002\u0002\u00d2\u052e\u0003","\u0002\u0002\u0002\u00d4\u0539\u0003\u0002\u0002\u0002\u00d6\u0547\u0003","\u0002\u0002\u0002\u00d8\u054d\u0003\u0002\u0002\u0002\u00da\u054f\u0003","\u0002\u0002\u0002\u00dc\u0556\u0003\u0002\u0002\u0002\u00de\u056b\u0003","\u0002\u0002\u0002\u00e0\u056d\u0003\u0002\u0002\u0002\u00e2\u0575\u0003","\u0002\u0002\u0002\u00e4\u057e\u0003\u0002\u0002\u0002\u00e6\u0586\u0003","\u0002\u0002\u0002\u00e8\u0594\u0003\u0002\u0002\u0002\u00ea\u05a7\u0003","\u0002\u0002\u0002\u00ec\u05b8\u0003\u0002\u0002\u0002\u00ee\u05cb\u0003","\u0002\u0002\u0002\u00f0\u05ce\u0003\u0002\u0002\u0002\u00f2\u05d2\u0003","\u0002\u0002\u0002\u00f4\u05d4\u0003\u0002\u0002\u0002\u00f6\u05d7\u0003","\u0002\u0002\u0002\u00f8\u05db\u0003\u0002\u0002\u0002\u00fa\u05e7\u0003","\u0002\u0002\u0002\u00fc\u05f2\u0003\u0002\u0002\u0002\u00fe\u0602\u0003","\u0002\u0002\u0002\u0100\u0619\u0003\u0002\u0002\u0002\u0102\u061e\u0003","\u0002\u0002\u0002\u0104\u0632\u0003\u0002\u0002\u0002\u0106\u0639\u0003","\u0002\u0002\u0002\u0108\u0642\u0003\u0002\u0002\u0002\u010a\u0650\u0003","\u0002\u0002\u0002\u010c\u0663\u0003\u0002\u0002\u0002\u010e\u066a\u0003","\u0002\u0002\u0002\u0110\u066f\u0003\u0002\u0002\u0002\u0112\u0673\u0003","\u0002\u0002\u0002\u0114\u0675\u0003\u0002\u0002\u0002\u0116\u0683\u0003","\u0002\u0002\u0002\u0118\u068e\u0003\u0002\u0002\u0002\u011a\u0690\u0003","\u0002\u0002\u0002\u011c\u06ae\u0003\u0002\u0002\u0002\u011e\u06b1\u0003","\u0002\u0002\u0002\u0120\u06b5\u0003\u0002\u0002\u0002\u0122\u06b7\u0003","\u0002\u0002\u0002\u0124\u06bd\u0003\u0002\u0002\u0002\u0126\u06d1\u0003","\u0002\u0002\u0002\u0128\u06d3\u0003\u0002\u0002\u0002\u012a\u06ef\u0003","\u0002\u0002\u0002\u012c\u06f2\u0003\u0002\u0002\u0002\u012e\u06f6\u0003","\u0002\u0002\u0002\u0130\u06f8\u0003\u0002\u0002\u0002\u0132\u06fc\u0003","\u0002\u0002\u0002\u0134\u06ff\u0003\u0002\u0002\u0002\u0136\u070e\u0003","\u0002\u0002\u0002\u0138\u0723\u0003\u0002\u0002\u0002\u013a\u0725\u0003","\u0002\u0002\u0002\u013c\u0727\u0003\u0002\u0002\u0002\u013e\u0729\u0003","\u0002\u0002\u0002\u0140\u072c\u0003\u0002\u0002\u0002\u0142\u0730\u0003","\u0002\u0002\u0002\u0144\u0734\u0003\u0002\u0002\u0002\u0146\u0737\u0003","\u0002\u0002\u0002\u0148\u0745\u0003\u0002\u0002\u0002\u014a\u0750\u0003","\u0002\u0002\u0002\u014c\u0752\u0003\u0002\u0002\u0002\u014e\u0755\u0003","\u0002\u0002\u0002\u0150\u075b\u0003\u0002\u0002\u0002\u0152\u0761\u0003","\u0002\u0002\u0002\u0154\u076b\u0003\u0002\u0002\u0002\u0156\u0776\u0003","\u0002\u0002\u0002\u0158\u0785\u0003\u0002\u0002\u0002\u015a\u0797\u0003","\u0002\u0002\u0002\u015c\u0799\u0003\u0002\u0002\u0002\u015e\u079b\u0003","\u0002\u0002\u0002\u0160\u07ac\u0003\u0002\u0002\u0002\u0162\u07ae\u0003","\u0002\u0002\u0002\u0164\u07b8\u0003\u0002\u0002\u0002\u0166\u07bd\u0003","\u0002\u0002\u0002\u0168\u07c2\u0003\u0002\u0002\u0002\u016a\u07c6\u0003","\u0002\u0002\u0002\u016c\u07ce\u0003\u0002\u0002\u0002\u016e\u07d2\u0003","\u0002\u0002\u0002\u0170\u07e1\u0003\u0002\u0002\u0002\u0172\u07e3\u0003","\u0002\u0002\u0002\u0174\u07e9\u0003\u0002\u0002\u0002\u0176\u07eb\u0003","\u0002\u0002\u0002\u0178\u07f2\u0003\u0002\u0002\u0002\u017a\u0806\u0003","\u0002\u0002\u0002\u017c\u083b\u0003\u0002\u0002\u0002\u017e\u083d\u0003","\u0002\u0002\u0002\u0180\u0182\u0005z>\u0002\u0181\u0180\u0003\u0002","\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0183\u0003\u0002","\u0002\u0002\u0183\u0184\u0007\u0002\u0002\u0003\u0184\u0003\u0003\u0002","\u0002\u0002\u0185\u0187\u0005\u017e\u00c0\u0002\u0186\u0185\u0003\u0002","\u0002\u0002\u0187\u0188\u0003\u0002\u0002\u0002\u0188\u0186\u0003\u0002","\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189\u0192\u0003\u0002","\u0002\u0002\u018a\u0192\u0007G\u0002\u0002\u018b\u018c\u0007W\u0002","\u0002\u018c\u018d\u0005\\/\u0002\u018d\u018e\u0007X\u0002\u0002\u018e","\u0192\u0003\u0002\u0002\u0002\u018f\u0192\u0005\u0006\u0004\u0002\u0190","\u0192\u0005\u000e\b\u0002\u0191\u0186\u0003\u0002\u0002\u0002\u0191","\u018a\u0003\u0002\u0002\u0002\u0191\u018b\u0003\u0002\u0002\u0002\u0191","\u018f\u0003\u0002\u0002\u0002\u0191\u0190\u0003\u0002\u0002\u0002\u0192","\u0005\u0003\u0002\u0002\u0002\u0193\u0196\u0005\b\u0005\u0002\u0194","\u0196\u0005\n\u0006\u0002\u0195\u0193\u0003\u0002\u0002\u0002\u0195","\u0194\u0003\u0002\u0002\u0002\u0196\u0007\u0003\u0002\u0002\u0002\u0197","\u01a2\u0007\u0086\u0002\u0002\u0198\u01a2\u0005\u014c\u00a7\u0002\u0199","\u01a2\u0005\u013e\u00a0\u0002\u019a\u01a2\u0005\u014e\u00a8\u0002\u019b","\u019e\u0007e\u0002\u0002\u019c\u019f\u0005\u0118\u008d\u0002\u019d","\u019f\u0005\u00a4S\u0002\u019e\u019c\u0003\u0002\u0002\u0002\u019e","\u019d\u0003\u0002\u0002\u0002\u019f\u01a2\u0003\u0002\u0002\u0002\u01a0","\u01a2\u0005\u015a\u00ae\u0002\u01a1\u0197\u0003\u0002\u0002\u0002\u01a1","\u0198\u0003\u0002\u0002\u0002\u01a1\u0199\u0003\u0002\u0002\u0002\u01a1","\u019a\u0003\u0002\u0002\u0002\u01a1\u019b\u0003\u0002\u0002\u0002\u01a1","\u01a0\u0003\u0002\u0002\u0002\u01a2\t\u0003\u0002\u0002\u0002\u01a3","\u01a5\u0005\f\u0007\u0002\u01a4\u01a6\u0007F\u0002\u0002\u01a5\u01a4","\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a7","\u0003\u0002\u0002\u0002\u01a7\u01a8\u0005\b\u0005\u0002\u01a8\u000b","\u0003\u0002\u0002\u0002\u01a9\u01ad\b\u0007\u0001\u0002\u01aa\u01ae","\u0005\u00a2R\u0002\u01ab\u01ae\u0005\u00ba^\u0002\u01ac\u01ae\u0005","\u00a4S\u0002\u01ad\u01aa\u0003\u0002\u0002\u0002\u01ad\u01ab\u0003","\u0002\u0002\u0002\u01ad\u01ac\u0003\u0002\u0002\u0002\u01ad\u01ae\u0003","\u0002\u0002\u0002\u01ae\u01af\u0003\u0002\u0002\u0002\u01af\u01b0\u0007","\u0081\u0002\u0002\u01b0\u01bc\u0003\u0002\u0002\u0002\u01b1\u01b7\f","\u0003\u0002\u0002\u01b2\u01b8\u0007\u0086\u0002\u0002\u01b3\u01b5\u0007","F\u0002\u0002\u01b4\u01b3\u0003\u0002\u0002\u0002\u01b4\u01b5\u0003","\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002\u01b6\u01b8\u0005","\u0158\u00ad\u0002\u01b7\u01b2\u0003\u0002\u0002\u0002\u01b7\u01b4\u0003","\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9\u01bb\u0007","\u0081\u0002\u0002\u01ba\u01b1\u0003\u0002\u0002\u0002\u01bb\u01be\u0003","\u0002\u0002\u0002\u01bc\u01ba\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003","\u0002\u0002\u0002\u01bd\r\u0003\u0002\u0002\u0002\u01be\u01bc\u0003","\u0002\u0002\u0002\u01bf\u01c1\u0005\u0010\t\u0002\u01c0\u01c2\u0005","\u001e\u0010\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003","\u0002\u0002\u0002\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c4\u0005","f4\u0002\u01c4\u000f\u0003\u0002\u0002\u0002\u01c5\u01c7\u0007Y\u0002","\u0002\u01c6\u01c8\u0005\u0012\n\u0002\u01c7\u01c6\u0003\u0002\u0002","\u0002\u01c7\u01c8\u0003\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002","\u0002\u01c9\u01ca\u0007Z\u0002\u0002\u01ca\u0011\u0003\u0002\u0002","\u0002\u01cb\u01d2\u0005\u0016\f\u0002\u01cc\u01cf\u0005\u0014\u000b","\u0002\u01cd\u01ce\u0007|\u0002\u0002\u01ce\u01d0\u0005\u0016\f\u0002","\u01cf\u01cd\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002","\u01d0\u01d2\u0003\u0002\u0002\u0002\u01d1\u01cb\u0003\u0002\u0002\u0002","\u01d1\u01cc\u0003\u0002\u0002\u0002\u01d2\u0013\u0003\u0002\u0002\u0002","\u01d3\u01d4\t\u0002\u0002\u0002\u01d4\u0015\u0003\u0002\u0002\u0002","\u01d5\u01da\u0005\u0018\r\u0002\u01d6\u01d7\u0007|\u0002\u0002\u01d7","\u01d9\u0005\u0018\r\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002\u01d9","\u01dc\u0003\u0002\u0002\u0002\u01da\u01d8\u0003\u0002\u0002\u0002\u01da","\u01db\u0003\u0002\u0002\u0002\u01db\u01de\u0003\u0002\u0002\u0002\u01dc","\u01da\u0003\u0002\u0002\u0002\u01dd\u01df\u0007\u0085\u0002\u0002\u01de","\u01dd\u0003\u0002\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002\u01df","\u0017\u0003\u0002\u0002\u0002\u01e0\u01e3\u0005\u001a\u000e\u0002\u01e1","\u01e3\u0005\u001c\u000f\u0002\u01e2\u01e0\u0003\u0002\u0002\u0002\u01e2","\u01e1\u0003\u0002\u0002\u0002\u01e3\u0019\u0003\u0002\u0002\u0002\u01e4","\u01e6\u0007c\u0002\u0002\u01e5\u01e4\u0003\u0002\u0002\u0002\u01e5","\u01e6\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7","\u01ea\u0007\u0086\u0002\u0002\u01e8\u01ea\u0007G\u0002\u0002\u01e9","\u01e5\u0003\u0002\u0002\u0002\u01e9\u01e8\u0003\u0002\u0002\u0002\u01ea","\u001b\u0003\u0002\u0002\u0002\u01eb\u01ed\u0007c\u0002\u0002\u01ec","\u01eb\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed","\u01ee\u0003\u0002\u0002\u0002\u01ee\u01ef\u0007\u0086\u0002\u0002\u01ef","\u01f0\u0005\u010e\u0088\u0002\u01f0\u001d\u0003\u0002\u0002\u0002\u01f1","\u01f3\u0007W\u0002\u0002\u01f2\u01f4\u0005\u0104\u0083\u0002\u01f3","\u01f2\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002\u01f4","\u01f5\u0003\u0002\u0002\u0002\u01f5\u01f7\u0007X\u0002\u0002\u01f6","\u01f8\u00071\u0002\u0002\u01f7\u01f6\u0003\u0002\u0002\u0002\u01f7","\u01f8\u0003\u0002\u0002\u0002\u01f8\u01fa\u0003\u0002\u0002\u0002\u01f9","\u01fb\u0005\u0174\u00bb\u0002\u01fa\u01f9\u0003\u0002\u0002\u0002\u01fa","\u01fb\u0003\u0002\u0002\u0002\u01fb\u01fd\u0003\u0002\u0002\u0002\u01fc","\u01fe\u0005\u00ceh\u0002\u01fd\u01fc\u0003\u0002\u0002\u0002\u01fd","\u01fe\u0003\u0002\u0002\u0002\u01fe\u0200\u0003\u0002\u0002\u0002\u01ff","\u0201\u0005\u00ecw\u0002\u0200\u01ff\u0003\u0002\u0002\u0002\u0200","\u0201\u0003\u0002\u0002\u0002\u0201\u001f\u0003\u0002\u0002\u0002\u0202","\u0203\b\u0011\u0001\u0002\u0203\u0221\u0005\u0004\u0003\u0002\u0204","\u0207\u0005\u00a0Q\u0002\u0205\u0207\u0005\u0162\u00b2\u0002\u0206","\u0204\u0003\u0002\u0002\u0002\u0206\u0205\u0003\u0002\u0002\u0002\u0207","\u020e\u0003\u0002\u0002\u0002\u0208\u020a\u0007W\u0002\u0002\u0209","\u020b\u0005$\u0013\u0002\u020a\u0209\u0003\u0002\u0002\u0002\u020a","\u020b\u0003\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c","\u020f\u0007X\u0002\u0002\u020d\u020f\u0005\u0116\u008c\u0002\u020e","\u0208\u0003\u0002\u0002\u0002\u020e\u020d\u0003\u0002\u0002\u0002\u020f","\u0221\u0003\u0002\u0002\u0002\u0210\u0211\t\u0003\u0002\u0002\u0211","\u0212\u0007h\u0002\u0002\u0212\u0213\u0005\u00f8}\u0002\u0213\u0214","\u0007i\u0002\u0002\u0214\u0215\u0007W\u0002\u0002\u0215\u0216\u0005","\\/\u0002\u0216\u0217\u0007X\u0002\u0002\u0217\u0221\u0003\u0002\u0002","\u0002\u0218\u0219\u0005\"\u0012\u0002\u0219\u021c\u0007W\u0002\u0002","\u021a\u021d\u0005\\/\u0002\u021b\u021d\u0005\u00f8}\u0002\u021c\u021a","\u0003\u0002\u0002\u0002\u021c\u021b\u0003\u0002\u0002\u0002\u021d\u021e","\u0003\u0002\u0002\u0002\u021e\u021f\u0007X\u0002\u0002\u021f\u0221","\u0003\u0002\u0002\u0002\u0220\u0202\u0003\u0002\u0002\u0002\u0220\u0206","\u0003\u0002\u0002\u0002\u0220\u0210\u0003\u0002\u0002\u0002\u0220\u0218","\u0003\u0002\u0002\u0002\u0221\u023d\u0003\u0002\u0002\u0002\u0222\u0223","\f\t\u0002\u0002\u0223\u0226\u0007Y\u0002\u0002\u0224\u0227\u0005\\","/\u0002\u0225\u0227\u0005\u0116\u008c\u0002\u0226\u0224\u0003\u0002","\u0002\u0002\u0226\u0225\u0003\u0002\u0002\u0002\u0227\u0228\u0003\u0002","\u0002\u0002\u0228\u0229\u0007Z\u0002\u0002\u0229\u023c\u0003\u0002","\u0002\u0002\u022a\u022b\f\b\u0002\u0002\u022b\u022d\u0007W\u0002\u0002","\u022c\u022e\u0005$\u0013\u0002\u022d\u022c\u0003\u0002\u0002\u0002","\u022d\u022e\u0003\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002","\u022f\u023c\u0007X\u0002\u0002\u0230\u0231\f\u0006\u0002\u0002\u0231","\u0237\t\u0004\u0002\u0002\u0232\u0234\u0007F\u0002\u0002\u0233\u0232","\u0003\u0002\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002\u0234\u0235","\u0003\u0002\u0002\u0002\u0235\u0238\u0005\u0006\u0004\u0002\u0236\u0238","\u0005&\u0014\u0002\u0237\u0233\u0003\u0002\u0002\u0002\u0237\u0236","\u0003\u0002\u0002\u0002\u0238\u023c\u0003\u0002\u0002\u0002\u0239\u023a","\f\u0005\u0002\u0002\u023a\u023c\t\u0005\u0002\u0002\u023b\u0222\u0003","\u0002\u0002\u0002\u023b\u022a\u0003\u0002\u0002\u0002\u023b\u0230\u0003","\u0002\u0002\u0002\u023b\u0239\u0003\u0002\u0002\u0002\u023c\u023f\u0003","\u0002\u0002\u0002\u023d\u023b\u0003\u0002\u0002\u0002\u023d\u023e\u0003","\u0002\u0002\u0002\u023e!\u0003\u0002\u0002\u0002\u023f\u023d\u0003","\u0002\u0002\u0002\u0240\u0241\u0007M\u0002\u0002\u0241#\u0003\u0002","\u0002\u0002\u0242\u0243\u0005\u0114\u008b\u0002\u0243%\u0003\u0002","\u0002\u0002\u0244\u0246\u0005\f\u0007\u0002\u0245\u0244\u0003\u0002","\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u024a\u0003\u0002","\u0002\u0002\u0247\u0248\u0005\u00a2R\u0002\u0248\u0249\u0007\u0081","\u0002\u0002\u0249\u024b\u0003\u0002\u0002\u0002\u024a\u0247\u0003\u0002","\u0002\u0002\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002","\u0002\u0002\u024c\u024d\u0007e\u0002\u0002\u024d\u0258\u0005\u00a2","R\u0002\u024e\u024f\u0005\f\u0007\u0002\u024f\u0250\u0007F\u0002\u0002","\u0250\u0251\u0005\u0158\u00ad\u0002\u0251\u0252\u0007\u0081\u0002\u0002","\u0252\u0253\u0007e\u0002\u0002\u0253\u0254\u0005\u00a2R\u0002\u0254","\u0258\u0003\u0002\u0002\u0002\u0255\u0256\u0007e\u0002\u0002\u0256","\u0258\u0005\u00a4S\u0002\u0257\u0245\u0003\u0002\u0002\u0002\u0257","\u024e\u0003\u0002\u0002\u0002\u0257\u0255\u0003\u0002\u0002\u0002\u0258","\'\u0003\u0002\u0002\u0002\u0259\u0275\u0005 \u0011\u0002\u025a\u025f","\u0007z\u0002\u0002\u025b\u025f\u0007{\u0002\u0002\u025c\u025f\u0005","*\u0016\u0002\u025d\u025f\u0007@\u0002\u0002\u025e\u025a\u0003\u0002","\u0002\u0002\u025e\u025b\u0003\u0002\u0002\u0002\u025e\u025c\u0003\u0002","\u0002\u0002\u025e\u025d\u0003\u0002\u0002\u0002\u025f\u0260\u0003\u0002","\u0002\u0002\u0260\u0275\u0005(\u0015\u0002\u0261\u026a\u0007@\u0002","\u0002\u0262\u0263\u0007W\u0002\u0002\u0263\u0264\u0005\u00f8}\u0002","\u0264\u0265\u0007X\u0002\u0002\u0265\u026b\u0003\u0002\u0002\u0002","\u0266\u0267\u0007\u0085\u0002\u0002\u0267\u0268\u0007W\u0002\u0002","\u0268\u0269\u0007\u0086\u0002\u0002\u0269\u026b\u0007X\u0002\u0002","\u026a\u0262\u0003\u0002\u0002\u0002\u026a\u0266\u0003\u0002\u0002\u0002","\u026b\u0275\u0003\u0002\u0002\u0002\u026c\u026d\u0007\r\u0002\u0002","\u026d\u026e\u0007W\u0002\u0002\u026e\u026f\u0005\u00f8}\u0002\u026f","\u0270\u0007X\u0002\u0002\u0270\u0275\u0003\u0002\u0002\u0002\u0271","\u0275\u0005:\u001e\u0002\u0272\u0275\u0005,\u0017\u0002\u0273\u0275","\u00058\u001d\u0002\u0274\u0259\u0003\u0002\u0002\u0002\u0274\u025e","\u0003\u0002\u0002\u0002\u0274\u0261\u0003\u0002\u0002\u0002\u0274\u026c","\u0003\u0002\u0002\u0002\u0274\u0271\u0003\u0002\u0002\u0002\u0274\u0272","\u0003\u0002\u0002\u0002\u0274\u0273\u0003\u0002\u0002\u0002\u0275)","\u0003\u0002\u0002\u0002\u0276\u0277\t\u0006\u0002\u0002\u0277+\u0003","\u0002\u0002\u0002\u0278\u027a\u0007\u0081\u0002\u0002\u0279\u0278\u0003","\u0002\u0002\u0002\u0279\u027a\u0003\u0002\u0002\u0002\u027a\u027b\u0003","\u0002\u0002\u0002\u027b\u027d\u00073\u0002\u0002\u027c\u027e\u0005",".\u0018\u0002\u027d\u027c\u0003\u0002\u0002\u0002\u027d\u027e\u0003","\u0002\u0002\u0002\u027e\u0284\u0003\u0002\u0002\u0002\u027f\u0285\u0005","0\u0019\u0002\u0280\u0281\u0007W\u0002\u0002\u0281\u0282\u0005\u00f8","}\u0002\u0282\u0283\u0007X\u0002\u0002\u0283\u0285\u0003\u0002\u0002","\u0002\u0284\u027f\u0003\u0002\u0002\u0002\u0284\u0280\u0003\u0002\u0002","\u0002\u0285\u0287\u0003\u0002\u0002\u0002\u0286\u0288\u00056\u001c","\u0002\u0287\u0286\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002","\u0002\u0288-\u0003\u0002\u0002\u0002\u0289\u028a\u0007W\u0002\u0002","\u028a\u028b\u0005$\u0013\u0002\u028b\u028c\u0007X\u0002\u0002\u028c","/\u0003\u0002\u0002\u0002\u028d\u028f\u0005\u0098M\u0002\u028e\u0290","\u00052\u001a\u0002\u028f\u028e\u0003\u0002\u0002\u0002\u028f\u0290","\u0003\u0002\u0002\u0002\u02901\u0003\u0002\u0002\u0002\u0291\u0293","\u0005\u00eex\u0002\u0292\u0294\u00052\u001a\u0002\u0293\u0292\u0003","\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294\u0297\u0003","\u0002\u0002\u0002\u0295\u0297\u00054\u001b\u0002\u0296\u0291\u0003","\u0002\u0002\u0002\u0296\u0295\u0003\u0002\u0002\u0002\u02973\u0003","\u0002\u0002\u0002\u0298\u0299\b\u001b\u0001\u0002\u0299\u029a\u0007","Y\u0002\u0002\u029a\u029b\u0005\\/\u0002\u029b\u029d\u0007Z\u0002\u0002","\u029c\u029e\u0005\u00ceh\u0002\u029d\u029c\u0003\u0002\u0002\u0002","\u029d\u029e\u0003\u0002\u0002\u0002\u029e\u02a8\u0003\u0002\u0002\u0002","\u029f\u02a0\f\u0003\u0002\u0002\u02a0\u02a1\u0007Y\u0002\u0002\u02a1","\u02a2\u0005^0\u0002\u02a2\u02a4\u0007Z\u0002\u0002\u02a3\u02a5\u0005","\u00ceh\u0002\u02a4\u02a3\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003","\u0002\u0002\u0002\u02a5\u02a7\u0003\u0002\u0002\u0002\u02a6\u029f\u0003","\u0002\u0002\u0002\u02a7\u02aa\u0003\u0002\u0002\u0002\u02a8\u02a6\u0003","\u0002\u0002\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a95\u0003","\u0002\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002\u02ab\u02ad\u0007","W\u0002\u0002\u02ac\u02ae\u0005$\u0013\u0002\u02ad\u02ac\u0003\u0002","\u0002\u0002\u02ad\u02ae\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002","\u0002\u0002\u02af\u02b2\u0007X\u0002\u0002\u02b0\u02b2\u0005\u0116","\u008c\u0002\u02b1\u02ab\u0003\u0002\u0002\u0002\u02b1\u02b0\u0003\u0002","\u0002\u0002\u02b27\u0003\u0002\u0002\u0002\u02b3\u02b5\u0007\u0081","\u0002\u0002\u02b4\u02b3\u0003\u0002\u0002\u0002\u02b4\u02b5\u0003\u0002","\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6\u02b9\u0007\u001e","\u0002\u0002\u02b7\u02b8\u0007Y\u0002\u0002\u02b8\u02ba\u0007Z\u0002","\u0002\u02b9\u02b7\u0003\u0002\u0002\u0002\u02b9\u02ba\u0003\u0002\u0002","\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bc\u0005<\u001f","\u0002\u02bc9\u0003\u0002\u0002\u0002\u02bd\u02be\u00074\u0002\u0002","\u02be\u02bf\u0007W\u0002\u0002\u02bf\u02c0\u0005\\/\u0002\u02c0\u02c1","\u0007X\u0002\u0002\u02c1;\u0003\u0002\u0002\u0002\u02c2\u02c9\u0005","(\u0015\u0002\u02c3\u02c4\u0007W\u0002\u0002\u02c4\u02c5\u0005\u00f8","}\u0002\u02c5\u02c6\u0007X\u0002\u0002\u02c6\u02c7\u0005<\u001f\u0002","\u02c7\u02c9\u0003\u0002\u0002\u0002\u02c8\u02c2\u0003\u0002\u0002\u0002","\u02c8\u02c3\u0003\u0002\u0002\u0002\u02c9=\u0003\u0002\u0002\u0002","\u02ca\u02cf\u0005<\u001f\u0002\u02cb\u02cc\t\u0007\u0002\u0002\u02cc","\u02ce\u0005<\u001f\u0002\u02cd\u02cb\u0003\u0002\u0002\u0002\u02ce","\u02d1\u0003\u0002\u0002\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002\u02cf","\u02d0\u0003\u0002\u0002\u0002\u02d0?\u0003\u0002\u0002\u0002\u02d1","\u02cf\u0003\u0002\u0002\u0002\u02d2\u02d7\u0005> \u0002\u02d3\u02d4","\t\b\u0002\u0002\u02d4\u02d6\u0005> \u0002\u02d5\u02d3\u0003\u0002\u0002","\u0002\u02d6\u02d9\u0003\u0002\u0002\u0002\u02d7\u02d5\u0003\u0002\u0002","\u0002\u02d7\u02d8\u0003\u0002\u0002\u0002\u02d8A\u0003\u0002\u0002","\u0002\u02d9\u02d7\u0003\u0002\u0002\u0002\u02da\u02df\u0005@!\u0002","\u02db\u02dc\t\t\u0002\u0002\u02dc\u02de\u0005@!\u0002\u02dd\u02db\u0003","\u0002\u0002\u0002\u02de\u02e1\u0003\u0002\u0002\u0002\u02df\u02dd\u0003","\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0C\u0003","\u0002\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e2\u02e8\u0005","B\"\u0002\u02e3\u02e4\u0005F$\u0002\u02e4\u02e5\u0005B\"\u0002\u02e5","\u02e7\u0003\u0002\u0002\u0002\u02e6\u02e3\u0003\u0002\u0002\u0002\u02e7","\u02ea\u0003\u0002\u0002\u0002\u02e8\u02e6\u0003\u0002\u0002\u0002\u02e8","\u02e9\u0003\u0002\u0002\u0002\u02e9E\u0003\u0002\u0002\u0002\u02ea","\u02e8\u0003\u0002\u0002\u0002\u02eb\u02ec\u0007i\u0002\u0002\u02ec","\u02f0\u0007i\u0002\u0002\u02ed\u02ee\u0007h\u0002\u0002\u02ee\u02f0","\u0007h\u0002\u0002\u02ef\u02eb\u0003\u0002\u0002\u0002\u02ef\u02ed","\u0003\u0002\u0002\u0002\u02f0G\u0003\u0002\u0002\u0002\u02f1\u02f6","\u0005D#\u0002\u02f2\u02f3\t\n\u0002\u0002\u02f3\u02f5\u0005D#\u0002","\u02f4\u02f2\u0003\u0002\u0002\u0002\u02f5\u02f8\u0003\u0002\u0002\u0002","\u02f6\u02f4\u0003\u0002\u0002\u0002\u02f6\u02f7\u0003\u0002\u0002\u0002","\u02f7I\u0003\u0002\u0002\u0002\u02f8\u02f6\u0003\u0002\u0002\u0002","\u02f9\u02fe\u0005H%\u0002\u02fa\u02fb\t\u000b\u0002\u0002\u02fb\u02fd","\u0005H%\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fd\u0300\u0003","\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe\u02ff\u0003","\u0002\u0002\u0002\u02ffK\u0003\u0002\u0002\u0002\u0300\u02fe\u0003","\u0002\u0002\u0002\u0301\u0306\u0005J&\u0002\u0302\u0303\u0007c\u0002","\u0002\u0303\u0305\u0005J&\u0002\u0304\u0302\u0003\u0002\u0002\u0002","\u0305\u0308\u0003\u0002\u0002\u0002\u0306\u0304\u0003\u0002\u0002\u0002","\u0306\u0307\u0003\u0002\u0002\u0002\u0307M\u0003\u0002\u0002\u0002","\u0308\u0306\u0003\u0002\u0002\u0002\u0309\u030e\u0005L\'\u0002\u030a","\u030b\u0007b\u0002\u0002\u030b\u030d\u0005L\'\u0002\u030c\u030a\u0003","\u0002\u0002\u0002\u030d\u0310\u0003\u0002\u0002\u0002\u030e\u030c\u0003","\u0002\u0002\u0002\u030e\u030f\u0003\u0002\u0002\u0002\u030fO\u0003","\u0002\u0002\u0002\u0310\u030e\u0003\u0002\u0002\u0002\u0311\u0316\u0005","N(\u0002\u0312\u0313\u0007d\u0002\u0002\u0313\u0315\u0005N(\u0002\u0314","\u0312\u0003\u0002\u0002\u0002\u0315\u0318\u0003\u0002\u0002\u0002\u0316","\u0314\u0003\u0002\u0002\u0002\u0316\u0317\u0003\u0002\u0002\u0002\u0317","Q\u0003\u0002\u0002\u0002\u0318\u0316\u0003\u0002\u0002\u0002\u0319","\u031e\u0005P)\u0002\u031a\u031b\u0007x\u0002\u0002\u031b\u031d\u0005","P)\u0002\u031c\u031a\u0003\u0002\u0002\u0002\u031d\u0320\u0003\u0002","\u0002\u0002\u031e\u031c\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002","\u0002\u0002\u031fS\u0003\u0002\u0002\u0002\u0320\u031e\u0003\u0002","\u0002\u0002\u0321\u0326\u0005R*\u0002\u0322\u0323\u0007y\u0002\u0002","\u0323\u0325\u0005R*\u0002\u0324\u0322\u0003\u0002\u0002\u0002\u0325","\u0328\u0003\u0002\u0002\u0002\u0326\u0324\u0003\u0002\u0002\u0002\u0326","\u0327\u0003\u0002\u0002\u0002\u0327U\u0003\u0002\u0002\u0002\u0328","\u0326\u0003\u0002\u0002\u0002\u0329\u032f\u0005T+\u0002\u032a\u032b","\u0007\u007f\u0002\u0002\u032b\u032c\u0005\\/\u0002\u032c\u032d\u0007","\u0080\u0002\u0002\u032d\u032e\u0005X-\u0002\u032e\u0330\u0003\u0002","\u0002\u0002\u032f\u032a\u0003\u0002\u0002\u0002\u032f\u0330\u0003\u0002","\u0002\u0002\u0330W\u0003\u0002\u0002\u0002\u0331\u0338\u0005V,\u0002","\u0332\u0333\u0005T+\u0002\u0333\u0334\u0005Z.\u0002\u0334\u0335\u0005","\u0112\u008a\u0002\u0335\u0338\u0003\u0002\u0002\u0002\u0336\u0338\u0005","\u0172\u00ba\u0002\u0337\u0331\u0003\u0002\u0002\u0002\u0337\u0332\u0003","\u0002\u0002\u0002\u0337\u0336\u0003\u0002\u0002\u0002\u0338Y\u0003","\u0002\u0002\u0002\u0339\u033a\t\f\u0002\u0002\u033a[\u0003\u0002\u0002","\u0002\u033b\u0340\u0005X-\u0002\u033c\u033d\u0007|\u0002\u0002\u033d","\u033f\u0005X-\u0002\u033e\u033c\u0003\u0002\u0002\u0002\u033f\u0342","\u0003\u0002\u0002\u0002\u0340\u033e\u0003\u0002\u0002\u0002\u0340\u0341","\u0003\u0002\u0002\u0002\u0341]\u0003\u0002\u0002\u0002\u0342\u0340","\u0003\u0002\u0002\u0002\u0343\u0344\u0005V,\u0002\u0344_\u0003\u0002","\u0002\u0002\u0345\u0353\u0005b2\u0002\u0346\u0353\u0005x=\u0002\u0347","\u0349\u0005\u00ceh\u0002\u0348\u0347\u0003\u0002\u0002\u0002\u0348","\u0349\u0003\u0002\u0002\u0002\u0349\u0350\u0003\u0002\u0002\u0002\u034a","\u0351\u0005d3\u0002\u034b\u0351\u0005f4\u0002\u034c\u0351\u0005j6\u0002","\u034d\u0351\u0005n8\u0002\u034e\u0351\u0005v<\u0002\u034f\u0351\u0005","\u0168\u00b5\u0002\u0350\u034a\u0003\u0002\u0002\u0002\u0350\u034b\u0003","\u0002\u0002\u0002\u0350\u034c\u0003\u0002\u0002\u0002\u0350\u034d\u0003","\u0002\u0002\u0002\u0350\u034e\u0003\u0002\u0002\u0002\u0350\u034f\u0003","\u0002\u0002\u0002\u0351\u0353\u0003\u0002\u0002\u0002\u0352\u0345\u0003","\u0002\u0002\u0002\u0352\u0346\u0003\u0002\u0002\u0002\u0352\u0348\u0003","\u0002\u0002\u0002\u0353a\u0003\u0002\u0002\u0002\u0354\u0356\u0005","\u00ceh\u0002\u0355\u0354\u0003\u0002\u0002\u0002\u0355\u0356\u0003","\u0002\u0002\u0002\u0356\u035b\u0003\u0002\u0002\u0002\u0357\u035c\u0007","\u0086\u0002\u0002\u0358\u0359\u0007\u0012\u0002\u0002\u0359\u035c\u0005","^0\u0002\u035a\u035c\u0007\u001d\u0002\u0002\u035b\u0357\u0003\u0002","\u0002\u0002\u035b\u0358\u0003\u0002\u0002\u0002\u035b\u035a\u0003\u0002","\u0002\u0002\u035c\u035d\u0003\u0002\u0002\u0002\u035d\u035e\u0007\u0080","\u0002\u0002\u035e\u035f\u0005`1\u0002\u035fc\u0003\u0002\u0002\u0002","\u0360\u0362\u0005\\/\u0002\u0361\u0360\u0003\u0002\u0002\u0002\u0361","\u0362\u0003\u0002\u0002\u0002\u0362\u0363\u0003\u0002\u0002\u0002\u0363","\u0364\u0007\u0082\u0002\u0002\u0364e\u0003\u0002\u0002\u0002\u0365","\u0367\u0007[\u0002\u0002\u0366\u0368\u0005h5\u0002\u0367\u0366\u0003","\u0002\u0002\u0002\u0367\u0368\u0003\u0002\u0002\u0002\u0368\u0369\u0003","\u0002\u0002\u0002\u0369\u036a\u0007\\\u0002\u0002\u036ag\u0003\u0002","\u0002\u0002\u036b\u036d\u0005`1\u0002\u036c\u036b\u0003\u0002\u0002","\u0002\u036d\u036e\u0003\u0002\u0002\u0002\u036e\u036c\u0003\u0002\u0002","\u0002\u036e\u036f\u0003\u0002\u0002\u0002\u036fi\u0003\u0002\u0002","\u0002\u0370\u0371\u0007-\u0002\u0002\u0371\u0372\u0007W\u0002\u0002","\u0372\u0373\u0005l7\u0002\u0373\u0374\u0007X\u0002\u0002\u0374\u0377","\u0005`1\u0002\u0375\u0376\u0007\"\u0002\u0002\u0376\u0378\u0005`1\u0002","\u0377\u0375\u0003\u0002\u0002\u0002\u0377\u0378\u0003\u0002\u0002\u0002","\u0378\u0380\u0003\u0002\u0002\u0002\u0379\u037a\u0007E\u0002\u0002","\u037a\u037b\u0007W\u0002\u0002\u037b\u037c\u0005l7\u0002\u037c\u037d","\u0007X\u0002\u0002\u037d\u037e\u0005`1\u0002\u037e\u0380\u0003\u0002","\u0002\u0002\u037f\u0370\u0003\u0002\u0002\u0002\u037f\u0379\u0003\u0002","\u0002\u0002\u0380k\u0003\u0002\u0002\u0002\u0381\u038d\u0005\\/\u0002","\u0382\u0384\u0005\u00ceh\u0002\u0383\u0382\u0003\u0002\u0002\u0002","\u0383\u0384\u0003\u0002\u0002\u0002\u0384\u0385\u0003\u0002\u0002\u0002","\u0385\u0386\u0005\u008cG\u0002\u0386\u038a\u0005\u00e4s\u0002\u0387","\u0388\u0007g\u0002\u0002\u0388\u038b\u0005\u0112\u008a\u0002\u0389","\u038b\u0005\u0116\u008c\u0002\u038a\u0387\u0003\u0002\u0002\u0002\u038a","\u0389\u0003\u0002\u0002\u0002\u038b\u038d\u0003\u0002\u0002\u0002\u038c","\u0381\u0003\u0002\u0002\u0002\u038c\u0383\u0003\u0002\u0002\u0002\u038d","m\u0003\u0002\u0002\u0002\u038e\u038f\u0007V\u0002\u0002\u038f\u0390","\u0007W\u0002\u0002\u0390\u0391\u0005l7\u0002\u0391\u0392\u0007X\u0002","\u0002\u0392\u0393\u0005`1\u0002\u0393\u03b0\u0003\u0002\u0002\u0002","\u0394\u0395\u0007\u001f\u0002\u0002\u0395\u0396\u0005`1\u0002\u0396","\u0397\u0007V\u0002\u0002\u0397\u0398\u0007W\u0002\u0002\u0398\u0399","\u0005\\/\u0002\u0399\u039a\u0007X\u0002\u0002\u039a\u039b\u0007\u0082","\u0002\u0002\u039b\u03b0\u0003\u0002\u0002\u0002\u039c\u039d\u0007*","\u0002\u0002\u039d\u03aa\u0007W\u0002\u0002\u039e\u03a0\u0005p9\u0002","\u039f\u03a1\u0005l7\u0002\u03a0\u039f\u0003\u0002\u0002\u0002\u03a0","\u03a1\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002\u03a2","\u03a4\u0007\u0082\u0002\u0002\u03a3\u03a5\u0005\\/\u0002\u03a4\u03a3","\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5\u03ab","\u0003\u0002\u0002\u0002\u03a6\u03a7\u0005r:\u0002\u03a7\u03a8\u0007","\u0080\u0002\u0002\u03a8\u03a9\u0005t;\u0002\u03a9\u03ab\u0003\u0002","\u0002\u0002\u03aa\u039e\u0003\u0002\u0002\u0002\u03aa\u03a6\u0003\u0002","\u0002\u0002\u03ab\u03ac\u0003\u0002\u0002\u0002\u03ac\u03ad\u0007X","\u0002\u0002\u03ad\u03ae\u0005`1\u0002\u03ae\u03b0\u0003\u0002\u0002","\u0002\u03af\u038e\u0003\u0002\u0002\u0002\u03af\u0394\u0003\u0002\u0002","\u0002\u03af\u039c\u0003\u0002\u0002\u0002\u03b0o\u0003\u0002\u0002","\u0002\u03b1\u03b4\u0005d3\u0002\u03b2\u03b4\u0005\u0082B\u0002\u03b3","\u03b1\u0003\u0002\u0002\u0002\u03b3\u03b2\u0003\u0002\u0002\u0002\u03b4","q\u0003\u0002\u0002\u0002\u03b5\u03b7\u0005\u00ceh\u0002\u03b6\u03b5","\u0003\u0002\u0002\u0002\u03b6\u03b7\u0003\u0002\u0002\u0002\u03b7\u03b8","\u0003\u0002\u0002\u0002\u03b8\u03b9\u0005\u008cG\u0002\u03b9\u03ba","\u0005\u00e4s\u0002\u03bas\u0003\u0002\u0002\u0002\u03bb\u03be\u0005","\\/\u0002\u03bc\u03be\u0005\u0116\u008c\u0002\u03bd\u03bb\u0003\u0002","\u0002\u0002\u03bd\u03bc\u0003\u0002\u0002\u0002\u03beu\u0003\u0002","\u0002\u0002\u03bf\u03c9\u0007\u0011\u0002\u0002\u03c0\u03c9\u0007\u001b","\u0002\u0002\u03c1\u03c4\u0007=\u0002\u0002\u03c2\u03c5\u0005\\/\u0002","\u03c3\u03c5\u0005\u0116\u008c\u0002\u03c4\u03c2\u0003\u0002\u0002\u0002","\u03c4\u03c3\u0003\u0002\u0002\u0002\u03c4\u03c5\u0003\u0002\u0002\u0002","\u03c5\u03c9\u0003\u0002\u0002\u0002\u03c6\u03c7\u0007,\u0002\u0002","\u03c7\u03c9\u0007\u0086\u0002\u0002\u03c8\u03bf\u0003\u0002\u0002\u0002","\u03c8\u03c0\u0003\u0002\u0002\u0002\u03c8\u03c1\u0003\u0002\u0002\u0002","\u03c8\u03c6\u0003\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002","\u03ca\u03cb\u0007\u0082\u0002\u0002\u03cbw\u0003\u0002\u0002\u0002","\u03cc\u03cd\u0005~@\u0002\u03cdy\u0003\u0002\u0002\u0002\u03ce\u03d0","\u0005|?\u0002\u03cf\u03ce\u0003\u0002\u0002\u0002\u03d0\u03d1\u0003","\u0002\u0002\u0002\u03d1\u03cf\u0003\u0002\u0002\u0002\u03d1\u03d2\u0003","\u0002\u0002\u0002\u03d2{\u0003\u0002\u0002\u0002\u03d3\u03dd\u0005","~@\u0002\u03d4\u03dd\u0005\u010a\u0086\u0002\u03d5\u03dd\u0005\u0150","\u00a9\u0002\u03d6\u03dd\u0005\u0164\u00b3\u0002\u03d7\u03dd\u0005\u0166","\u00b4\u0002\u03d8\u03dd\u0005\u00ccg\u0002\u03d9\u03dd\u0005\u00be","`\u0002\u03da\u03dd\u0005\u0086D\u0002\u03db\u03dd\u0005\u0088E\u0002","\u03dc\u03d3\u0003\u0002\u0002\u0002\u03dc\u03d4\u0003\u0002\u0002\u0002","\u03dc\u03d5\u0003\u0002\u0002\u0002\u03dc\u03d6\u0003\u0002\u0002\u0002","\u03dc\u03d7\u0003\u0002\u0002\u0002\u03dc\u03d8\u0003\u0002\u0002\u0002","\u03dc\u03d9\u0003\u0002\u0002\u0002\u03dc\u03da\u0003\u0002\u0002\u0002","\u03dc\u03db\u0003\u0002\u0002\u0002\u03dd}\u0003\u0002\u0002\u0002","\u03de\u03e7\u0005\u0082B\u0002\u03df\u03e7\u0005\u00caf\u0002\u03e0","\u03e7\u0005\u00c2b\u0002\u03e1\u03e7\u0005\u00c6d\u0002\u03e2\u03e7","\u0005\u00c8e\u0002\u03e3\u03e7\u0005\u0084C\u0002\u03e4\u03e7\u0005","\u0080A\u0002\u03e5\u03e7\u0005\u00aeX\u0002\u03e6\u03de\u0003\u0002","\u0002\u0002\u03e6\u03df\u0003\u0002\u0002\u0002\u03e6\u03e0\u0003\u0002","\u0002\u0002\u03e6\u03e1\u0003\u0002\u0002\u0002\u03e6\u03e2\u0003\u0002","\u0002\u0002\u03e6\u03e3\u0003\u0002\u0002\u0002\u03e6\u03e4\u0003\u0002","\u0002\u0002\u03e6\u03e5\u0003\u0002\u0002\u0002\u03e7\u007f\u0003\u0002","\u0002\u0002\u03e8\u03e9\u0007Q\u0002\u0002\u03e9\u03eb\u0007\u0086","\u0002\u0002\u03ea\u03ec\u0005\u00ceh\u0002\u03eb\u03ea\u0003\u0002","\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec\u03ed\u0003\u0002","\u0002\u0002\u03ed\u03ee\u0007g\u0002\u0002\u03ee\u03ef\u0005\u00f8","}\u0002\u03ef\u03f0\u0007\u0082\u0002\u0002\u03f0\u0081\u0003\u0002","\u0002\u0002\u03f1\u03f3\u0005\u008cG\u0002\u03f2\u03f1\u0003\u0002","\u0002\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3\u03f5\u0003\u0002","\u0002\u0002\u03f4\u03f6\u0005\u00e0q\u0002\u03f5\u03f4\u0003\u0002","\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6\u03f7\u0003\u0002","\u0002\u0002\u03f7\u0400\u0007\u0082\u0002\u0002\u03f8\u03fa\u0005\u00ce","h\u0002\u03f9\u03fb\u0005\u008cG\u0002\u03fa\u03f9\u0003\u0002\u0002","\u0002\u03fa\u03fb\u0003\u0002\u0002\u0002\u03fb\u03fc\u0003\u0002\u0002","\u0002\u03fc\u03fd\u0005\u00e0q\u0002\u03fd\u03fe\u0007\u0082\u0002","\u0002\u03fe\u0400\u0003\u0002\u0002\u0002\u03ff\u03f2\u0003\u0002\u0002","\u0002\u03ff\u03f8\u0003\u0002\u0002\u0002\u0400\u0083\u0003\u0002\u0002","\u0002\u0401\u0402\u0007B\u0002\u0002\u0402\u0403\u0007W\u0002\u0002","\u0403\u0404\u0005^0\u0002\u0404\u0405\u0007|\u0002\u0002\u0405\u0406","\u0007\u0006\u0002\u0002\u0406\u0407\u0007X\u0002\u0002\u0407\u0408","\u0007\u0082\u0002\u0002\u0408\u0085\u0003\u0002\u0002\u0002\u0409\u040a","\u0007\u0082\u0002\u0002\u040a\u0087\u0003\u0002\u0002\u0002\u040b\u040c","\u0005\u00ceh\u0002\u040c\u040d\u0007\u0082\u0002\u0002\u040d\u0089","\u0003\u0002\u0002\u0002\u040e\u0415\u0005\u008eH\u0002\u040f\u0415","\u0005\u0094K\u0002\u0410\u0415\u0005\u0090I\u0002\u0411\u0415\u0007","+\u0002\u0002\u0412\u0415\u0007L\u0002\u0002\u0413\u0415\u0007\u0019","\u0002\u0002\u0414\u040e\u0003\u0002\u0002\u0002\u0414\u040f\u0003\u0002","\u0002\u0002\u0414\u0410\u0003\u0002\u0002\u0002\u0414\u0411\u0003\u0002","\u0002\u0002\u0414\u0412\u0003\u0002\u0002\u0002\u0414\u0413\u0003\u0002","\u0002\u0002\u0415\u008b\u0003\u0002\u0002\u0002\u0416\u0418\u0005\u008a","F\u0002\u0417\u0416\u0003\u0002\u0002\u0002\u0418\u0419\u0003\u0002","\u0002\u0002\u0419\u041a\u0003\u0002\u0002\u0002\u0419\u0417\u0003\u0002","\u0002\u0002\u041a\u041c\u0003\u0002\u0002\u0002\u041b\u041d\u0005\u00ce","h\u0002\u041c\u041b\u0003\u0002\u0002\u0002\u041c\u041d\u0003\u0002","\u0002\u0002\u041d\u008d\u0003\u0002\u0002\u0002\u041e\u041f\t\r\u0002","\u0002\u041f\u008f\u0003\u0002\u0002\u0002\u0420\u0421\t\u000e\u0002","\u0002\u0421\u0091\u0003\u0002\u0002\u0002\u0422\u0423\u0007\u0086\u0002","\u0002\u0423\u0093\u0003\u0002\u0002\u0002\u0424\u0428\u0005\u0096L","\u0002\u0425\u0428\u0005\u011a\u008e\u0002\u0426\u0428\u0005\u00aaV","\u0002\u0427\u0424\u0003\u0002\u0002\u0002\u0427\u0425\u0003\u0002\u0002","\u0002\u0427\u0426\u0003\u0002\u0002\u0002\u0428\u0095\u0003\u0002\u0002","\u0002\u0429\u042e\u0005\u00a0Q\u0002\u042a\u042e\u0005\u00a6T\u0002","\u042b\u042e\u0005\u0162\u00b2\u0002\u042c\u042e\u0005\u00f2z\u0002","\u042d\u0429\u0003\u0002\u0002\u0002\u042d\u042a\u0003\u0002\u0002\u0002","\u042d\u042b\u0003\u0002\u0002\u0002\u042d\u042c\u0003\u0002\u0002\u0002","\u042e\u0097\u0003\u0002\u0002\u0002\u042f\u0431\u0005\u0094K\u0002","\u0430\u042f\u0003\u0002\u0002\u0002\u0431\u0432\u0003\u0002\u0002\u0002","\u0432\u0430\u0003\u0002\u0002\u0002\u0432\u0433\u0003\u0002\u0002\u0002","\u0433\u0435\u0003\u0002\u0002\u0002\u0434\u0436\u0005\u00ceh\u0002","\u0435\u0434\u0003\u0002\u0002\u0002\u0435\u0436\u0003\u0002\u0002\u0002","\u0436\u0099\u0003\u0002\u0002\u0002\u0437\u0439\u0005\u0096L\u0002","\u0438\u0437\u0003\u0002\u0002\u0002\u0439\u043a\u0003\u0002\u0002\u0002","\u043a\u0438\u0003\u0002\u0002\u0002\u043a\u043b\u0003\u0002\u0002\u0002","\u043b\u043d\u0003\u0002\u0002\u0002\u043c\u043e\u0005\u00ceh\u0002","\u043d\u043c\u0003\u0002\u0002\u0002\u043d\u043e\u0003\u0002\u0002\u0002","\u043e\u009b\u0003\u0002\u0002\u0002\u043f\u0440\t\u000f\u0002\u0002","\u0440\u009d\u0003\u0002\u0002\u0002\u0441\u0442\t\u0010\u0002\u0002","\u0442\u009f\u0003\u0002\u0002\u0002\u0443\u0445\u0005\f\u0007\u0002","\u0444\u0443\u0003\u0002\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002","\u0445\u0446\u0003\u0002\u0002\u0002\u0446\u0478\u0005\u00a2R\u0002","\u0447\u0448\u0005\f\u0007\u0002\u0448\u0449\u0007F\u0002\u0002\u0449","\u044a\u0005\u0158\u00ad\u0002\u044a\u0478\u0003\u0002\u0002\u0002\u044b","\u0478\u0005\u009eP\u0002\u044c\u044e\u0005\u009eP\u0002\u044d\u044c","\u0003\u0002\u0002\u0002\u044d\u044e\u0003\u0002\u0002\u0002\u044e\u0450","\u0003\u0002\u0002\u0002\u044f\u0451\u0005\u009cO\u0002\u0450\u044f","\u0003\u0002\u0002\u0002\u0451\u0452\u0003\u0002\u0002\u0002\u0452\u0450","\u0003\u0002\u0002\u0002\u0452\u0453\u0003\u0002\u0002\u0002\u0453\u0478","\u0003\u0002\u0002\u0002\u0454\u0456\u0005\u009eP\u0002\u0455\u0454","\u0003\u0002\u0002\u0002\u0455\u0456\u0003\u0002\u0002\u0002\u0456\u0457","\u0003\u0002\u0002\u0002\u0457\u0478\u0007\u0014\u0002\u0002\u0458\u045a","\u0005\u009eP\u0002\u0459\u0458\u0003\u0002\u0002\u0002\u0459\u045a","\u0003\u0002\u0002\u0002\u045a\u045b\u0003\u0002\u0002\u0002\u045b\u0478","\u0007\u0015\u0002\u0002\u045c\u045e\u0005\u009eP\u0002\u045d\u045c","\u0003\u0002\u0002\u0002\u045d\u045e\u0003\u0002\u0002\u0002\u045e\u045f","\u0003\u0002\u0002\u0002\u045f\u0478\u0007\u0016\u0002\u0002\u0460\u0462","\u0005\u009eP\u0002\u0461\u0460\u0003\u0002\u0002\u0002\u0461\u0462","\u0003\u0002\u0002\u0002\u0462\u0463\u0003\u0002\u0002\u0002\u0463\u0478","\u0007U\u0002\u0002\u0464\u0478\u0007\u0010\u0002\u0002\u0465\u0467","\u0005\u009eP\u0002\u0466\u0465\u0003\u0002\u0002\u0002\u0466\u0467","\u0003\u0002\u0002\u0002\u0467\u046b\u0003\u0002\u0002\u0002\u0468\u046a","\u0005\u009cO\u0002\u0469\u0468\u0003\u0002\u0002\u0002\u046a\u046d","\u0003\u0002\u0002\u0002\u046b\u0469\u0003\u0002\u0002\u0002\u046b\u046c","\u0003\u0002\u0002\u0002\u046c\u046e\u0003\u0002\u0002\u0002\u046d\u046b","\u0003\u0002\u0002\u0002\u046e\u0478\u0007/\u0002\u0002\u046f\u0478","\u0007)\u0002\u0002\u0470\u0472\u0005\u009cO\u0002\u0471\u0470\u0003","\u0002\u0002\u0002\u0471\u0472\u0003\u0002\u0002\u0002\u0472\u0473\u0003","\u0002\u0002\u0002\u0473\u0478\u0007 \u0002\u0002\u0474\u0478\u0007","S\u0002\u0002\u0475\u0478\u0007\u000f\u0002\u0002\u0476\u0478\u0005","\u00a4S\u0002\u0477\u0444\u0003\u0002\u0002\u0002\u0477\u0447\u0003","\u0002\u0002\u0002\u0477\u044b\u0003\u0002\u0002\u0002\u0477\u044d\u0003","\u0002\u0002\u0002\u0477\u0455\u0003\u0002\u0002\u0002\u0477\u0459\u0003","\u0002\u0002\u0002\u0477\u045d\u0003\u0002\u0002\u0002\u0477\u0461\u0003","\u0002\u0002\u0002\u0477\u0464\u0003\u0002\u0002\u0002\u0477\u0466\u0003","\u0002\u0002\u0002\u0477\u046f\u0003\u0002\u0002\u0002\u0477\u0471\u0003","\u0002\u0002\u0002\u0477\u0474\u0003\u0002\u0002\u0002\u0477\u0475\u0003","\u0002\u0002\u0002\u0477\u0476\u0003\u0002\u0002\u0002\u0478\u00a1\u0003","\u0002\u0002\u0002\u0479\u047e\u0005\u0118\u008d\u0002\u047a\u047e\u0005","\u00a8U\u0002\u047b\u047e\u0005\u0092J\u0002\u047c\u047e\u0005\u0158","\u00ad\u0002\u047d\u0479\u0003\u0002\u0002\u0002\u047d\u047a\u0003\u0002","\u0002\u0002\u047d\u047b\u0003\u0002\u0002\u0002\u047d\u047c\u0003\u0002","\u0002\u0002\u047e\u00a3\u0003\u0002\u0002\u0002\u047f\u0480\u0007\u001c","\u0002\u0002\u0480\u0483\u0007W\u0002\u0002\u0481\u0484\u0005\\/\u0002","\u0482\u0484\u0007\u000f\u0002\u0002\u0483\u0481\u0003\u0002\u0002\u0002","\u0483\u0482\u0003\u0002\u0002\u0002\u0484\u0485\u0003\u0002\u0002\u0002","\u0485\u0486\u0007X\u0002\u0002\u0486\u00a5\u0003\u0002\u0002\u0002","\u0487\u0496\u0005\u0122\u0092\u0002\u0488\u048a\u0005\u00ceh\u0002","\u0489\u0488\u0003\u0002\u0002\u0002\u0489\u048a\u0003\u0002\u0002\u0002","\u048a\u048c\u0003\u0002\u0002\u0002\u048b\u048d\u0005\f\u0007\u0002","\u048c\u048b\u0003\u0002\u0002\u0002\u048c\u048d\u0003\u0002\u0002\u0002","\u048d\u048e\u0003\u0002\u0002\u0002\u048e\u0497\u0007\u0086\u0002\u0002","\u048f\u0497\u0005\u0158\u00ad\u0002\u0490\u0492\u0005\f\u0007\u0002","\u0491\u0493\u0007F\u0002\u0002\u0492\u0491\u0003\u0002\u0002\u0002","\u0492\u0493\u0003\u0002\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002","\u0494\u0495\u0005\u0158\u00ad\u0002\u0495\u0497\u0003\u0002\u0002\u0002","\u0496\u0489\u0003\u0002\u0002\u0002\u0496\u048f\u0003\u0002\u0002\u0002","\u0496\u0490\u0003\u0002\u0002\u0002\u0497\u049e\u0003\u0002\u0002\u0002","\u0498\u049a\u0007#\u0002\u0002\u0499\u049b\u0005\f\u0007\u0002\u049a","\u0499\u0003\u0002\u0002\u0002\u049a\u049b\u0003\u0002\u0002\u0002\u049b","\u049c\u0003\u0002\u0002\u0002\u049c\u049e\u0007\u0086\u0002\u0002\u049d","\u0487\u0003\u0002\u0002\u0002\u049d\u0498\u0003\u0002\u0002\u0002\u049e","\u00a7\u0003\u0002\u0002\u0002\u049f\u04a0\u0007\u0086\u0002\u0002\u04a0","\u00a9\u0003\u0002\u0002\u0002\u04a1\u04a2\u0005\u00acW\u0002\u04a2","\u04a7\u0007[\u0002\u0002\u04a3\u04a5\u0005\u00b4[\u0002\u04a4\u04a6","\u0007|\u0002\u0002\u04a5\u04a4\u0003\u0002\u0002\u0002\u04a5\u04a6","\u0003\u0002\u0002\u0002\u04a6\u04a8\u0003\u0002\u0002\u0002\u04a7\u04a3","\u0003\u0002\u0002\u0002\u04a7\u04a8\u0003\u0002\u0002\u0002\u04a8\u04a9","\u0003\u0002\u0002\u0002\u04a9\u04aa\u0007\\\u0002\u0002\u04aa\u00ab","\u0003\u0002\u0002\u0002\u04ab\u04ad\u0005\u00b0Y\u0002\u04ac\u04ae","\u0005\u00ceh\u0002\u04ad\u04ac\u0003\u0002\u0002\u0002\u04ad\u04ae","\u0003\u0002\u0002\u0002\u04ae\u04b3\u0003\u0002\u0002\u0002\u04af\u04b1","\u0005\f\u0007\u0002\u04b0\u04af\u0003\u0002\u0002\u0002\u04b0\u04b1","\u0003\u0002\u0002\u0002\u04b1\u04b2\u0003\u0002\u0002\u0002\u04b2\u04b4","\u0007\u0086\u0002\u0002\u04b3\u04b0\u0003\u0002\u0002\u0002\u04b3\u04b4","\u0003\u0002\u0002\u0002\u04b4\u04b6\u0003\u0002\u0002\u0002\u04b5\u04b7","\u0005\u00b2Z\u0002\u04b6\u04b5\u0003\u0002\u0002\u0002\u04b6\u04b7","\u0003\u0002\u0002\u0002\u04b7\u00ad\u0003\u0002\u0002\u0002\u04b8\u04ba","\u0005\u00b0Y\u0002\u04b9\u04bb\u0005\u00ceh\u0002\u04ba\u04b9\u0003","\u0002\u0002\u0002\u04ba\u04bb\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003","\u0002\u0002\u0002\u04bc\u04be\u0007\u0086\u0002\u0002\u04bd\u04bf\u0005","\u00b2Z\u0002\u04be\u04bd\u0003\u0002\u0002\u0002\u04be\u04bf\u0003","\u0002\u0002\u0002\u04bf\u04c0\u0003\u0002\u0002\u0002\u04c0\u04c1\u0007","\u0082\u0002\u0002\u04c1\u00af\u0003\u0002\u0002\u0002\u04c2\u04c4\u0007","#\u0002\u0002\u04c3\u04c5\t\u0011\u0002\u0002\u04c4\u04c3\u0003\u0002","\u0002\u0002\u04c4\u04c5\u0003\u0002\u0002\u0002\u04c5\u00b1\u0003\u0002","\u0002\u0002\u04c6\u04c7\u0007\u0080\u0002\u0002\u04c7\u04c8\u0005\u0098","M\u0002\u04c8\u00b3\u0003\u0002\u0002\u0002\u04c9\u04ce\u0005\u00b6","\\\u0002\u04ca\u04cb\u0007|\u0002\u0002\u04cb\u04cd\u0005\u00b6\\\u0002","\u04cc\u04ca\u0003\u0002\u0002\u0002\u04cd\u04d0\u0003\u0002\u0002\u0002","\u04ce\u04cc\u0003\u0002\u0002\u0002\u04ce\u04cf\u0003\u0002\u0002\u0002","\u04cf\u00b5\u0003\u0002\u0002\u0002\u04d0\u04ce\u0003\u0002\u0002\u0002","\u04d1\u04d4\u0005\u00b8]\u0002\u04d2\u04d3\u0007g\u0002\u0002\u04d3","\u04d5\u0005^0\u0002\u04d4\u04d2\u0003\u0002\u0002\u0002\u04d4\u04d5","\u0003\u0002\u0002\u0002\u04d5\u00b7\u0003\u0002\u0002\u0002\u04d6\u04d7","\u0007\u0086\u0002\u0002\u04d7\u00b9\u0003\u0002\u0002\u0002\u04d8\u04db","\u0005\u00bc_\u0002\u04d9\u04db\u0005\u00c0a\u0002\u04da\u04d8\u0003","\u0002\u0002\u0002\u04da\u04d9\u0003\u0002\u0002\u0002\u04db\u00bb\u0003","\u0002\u0002\u0002\u04dc\u04dd\u0007\u0086\u0002\u0002\u04dd\u00bd\u0003","\u0002\u0002\u0002\u04de\u04e0\u0007.\u0002\u0002\u04df\u04de\u0003","\u0002\u0002\u0002\u04df\u04e0\u0003\u0002\u0002\u0002\u04e0\u04e1\u0003","\u0002\u0002\u0002\u04e1\u04e4\u00072\u0002\u0002\u04e2\u04e5\u0007","\u0086\u0002\u0002\u04e3\u04e5\u0005\u00bc_\u0002\u04e4\u04e2\u0003","\u0002\u0002\u0002\u04e4\u04e3\u0003\u0002\u0002\u0002\u04e4\u04e5\u0003","\u0002\u0002\u0002\u04e5\u04e6\u0003\u0002\u0002\u0002\u04e6\u04e8\u0007","[\u0002\u0002\u04e7\u04e9\u0005z>\u0002\u04e8\u04e7\u0003\u0002\u0002","\u0002\u04e8\u04e9\u0003\u0002\u0002\u0002\u04e9\u04ea\u0003\u0002\u0002","\u0002\u04ea\u04eb\u0007\\\u0002\u0002\u04eb\u00bf\u0003\u0002\u0002","\u0002\u04ec\u04ed\u0007\u0086\u0002\u0002\u04ed\u00c1\u0003\u0002\u0002","\u0002\u04ee\u04ef\u00072\u0002\u0002\u04ef\u04f0\u0007\u0086\u0002","\u0002\u04f0\u04f1\u0007g\u0002\u0002\u04f1\u04f2\u0005\u00c4c\u0002","\u04f2\u04f3\u0007\u0082\u0002\u0002\u04f3\u00c3\u0003\u0002\u0002\u0002","\u04f4\u04f6\u0005\f\u0007\u0002\u04f5\u04f4\u0003\u0002\u0002\u0002","\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f7\u0003\u0002\u0002\u0002","\u04f7\u04f8\u0005\u00ba^\u0002\u04f8\u00c5\u0003\u0002\u0002\u0002","\u04f9\u04ff\u0007Q\u0002\u0002\u04fa\u04fc\u0007N\u0002\u0002\u04fb","\u04fa\u0003\u0002\u0002\u0002\u04fb\u04fc\u0003\u0002\u0002\u0002\u04fc","\u04fd\u0003\u0002\u0002\u0002\u04fd\u0500\u0005\f\u0007\u0002\u04fe","\u0500\u0007\u0081\u0002\u0002\u04ff\u04fb\u0003\u0002\u0002\u0002\u04ff","\u04fe\u0003\u0002\u0002\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501","\u0502\u0005\b\u0005\u0002\u0502\u0503\u0007\u0082\u0002\u0002\u0503","\u00c7\u0003\u0002\u0002\u0002\u0504\u0506\u0005\u00ceh\u0002\u0505","\u0504\u0003\u0002\u0002\u0002\u0505\u0506\u0003\u0002\u0002\u0002\u0506","\u0507\u0003\u0002\u0002\u0002\u0507\u0508\u0007Q\u0002\u0002\u0508","\u050a\u00072\u0002\u0002\u0509\u050b\u0005\f\u0007\u0002\u050a\u0509","\u0003\u0002\u0002\u0002\u050a\u050b\u0003\u0002\u0002\u0002\u050b\u050c","\u0003\u0002\u0002\u0002\u050c\u050d\u0005\u00ba^\u0002\u050d\u050e","\u0007\u0082\u0002\u0002\u050e\u00c9\u0003\u0002\u0002\u0002\u050f\u0510","\u0007\u000e\u0002\u0002\u0510\u0511\u0007W\u0002\u0002\u0511\u0512","\u0007\u0006\u0002\u0002\u0512\u0513\u0007X\u0002\u0002\u0513\u0514","\u0007\u0082\u0002\u0002\u0514\u00cb\u0003\u0002\u0002\u0002\u0515\u0516","\u0007&\u0002\u0002\u0516\u051d\u0007\u0006\u0002\u0002\u0517\u0519","\u0007[\u0002\u0002\u0518\u051a\u0005z>\u0002\u0519\u0518\u0003\u0002","\u0002\u0002\u0519\u051a\u0003\u0002\u0002\u0002\u051a\u051b\u0003\u0002","\u0002\u0002\u051b\u051e\u0007\\\u0002\u0002\u051c\u051e\u0005|?\u0002","\u051d\u0517\u0003\u0002\u0002\u0002\u051d\u051c\u0003\u0002\u0002\u0002","\u051e\u00cd\u0003\u0002\u0002\u0002\u051f\u0521\u0005\u00d0i\u0002","\u0520\u051f\u0003\u0002\u0002\u0002\u0521\u0522\u0003\u0002\u0002\u0002","\u0522\u0520\u0003\u0002\u0002\u0002\u0522\u0523\u0003\u0002\u0002\u0002","\u0523\u00cf\u0003\u0002\u0002\u0002\u0524\u0525\u0007Y\u0002\u0002","\u0525\u0527\u0007Y\u0002\u0002\u0526\u0528\u0005\u00d4k\u0002\u0527","\u0526\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002\u0002\u0002\u0528","\u0529\u0003\u0002\u0002\u0002\u0529\u052a\u0007Z\u0002\u0002\u052a","\u052d\u0007Z\u0002\u0002\u052b\u052d\u0005\u00d2j\u0002\u052c\u0524","\u0003\u0002\u0002\u0002\u052c\u052b\u0003\u0002\u0002\u0002\u052d\u00d1","\u0003\u0002\u0002\u0002\u052e\u052f\u0007\f\u0002\u0002\u052f\u0532","\u0007W\u0002\u0002\u0530\u0533\u0005\u00f8}\u0002\u0531\u0533\u0005","^0\u0002\u0532\u0530\u0003\u0002\u0002\u0002\u0532\u0531\u0003\u0002","\u0002\u0002\u0533\u0535\u0003\u0002\u0002\u0002\u0534\u0536\u0007\u0085","\u0002\u0002\u0535\u0534\u0003\u0002\u0002\u0002\u0535\u0536\u0003\u0002","\u0002\u0002\u0536\u0537\u0003\u0002\u0002\u0002\u0537\u0538\u0007X","\u0002\u0002\u0538\u00d3\u0003\u0002\u0002\u0002\u0539\u053e\u0005\u00d6","l\u0002\u053a\u053b\u0007|\u0002\u0002\u053b\u053d\u0005\u00d6l\u0002","\u053c\u053a\u0003\u0002\u0002\u0002\u053d\u0540\u0003\u0002\u0002\u0002","\u053e\u053c\u0003\u0002\u0002\u0002\u053e\u053f\u0003\u0002\u0002\u0002","\u053f\u0542\u0003\u0002\u0002\u0002\u0540\u053e\u0003\u0002\u0002\u0002","\u0541\u0543\u0007\u0085\u0002\u0002\u0542\u0541\u0003\u0002\u0002\u0002","\u0542\u0543\u0003\u0002\u0002\u0002\u0543\u00d5\u0003\u0002\u0002\u0002","\u0544\u0545\u0005\u00d8m\u0002\u0545\u0546\u0007\u0081\u0002\u0002","\u0546\u0548\u0003\u0002\u0002\u0002\u0547\u0544\u0003\u0002\u0002\u0002","\u0547\u0548\u0003\u0002\u0002\u0002\u0548\u0549\u0003\u0002\u0002\u0002","\u0549\u054b\u0007\u0086\u0002\u0002\u054a\u054c\u0005\u00dan\u0002","\u054b\u054a\u0003\u0002\u0002\u0002\u054b\u054c\u0003\u0002\u0002\u0002","\u054c\u00d7\u0003\u0002\u0002\u0002\u054d\u054e\u0007\u0086\u0002\u0002","\u054e\u00d9\u0003\u0002\u0002\u0002\u054f\u0551\u0007W\u0002\u0002","\u0550\u0552\u0005\u00dco\u0002\u0551\u0550\u0003\u0002\u0002\u0002","\u0551\u0552\u0003\u0002\u0002\u0002\u0552\u0553\u0003\u0002\u0002\u0002","\u0553\u0554\u0007X\u0002\u0002\u0554\u00db\u0003\u0002\u0002\u0002","\u0555\u0557\u0005\u00dep\u0002\u0556\u0555\u0003\u0002\u0002\u0002","\u0557\u0558\u0003\u0002\u0002\u0002\u0558\u0556\u0003\u0002\u0002\u0002","\u0558\u0559\u0003\u0002\u0002\u0002\u0559\u00dd\u0003\u0002\u0002\u0002","\u055a\u055b\u0007W\u0002\u0002\u055b\u055c\u0005\u00dco\u0002\u055c","\u055d\u0007X\u0002\u0002\u055d\u056c\u0003\u0002\u0002\u0002\u055e","\u055f\u0007Y\u0002\u0002\u055f\u0560\u0005\u00dco\u0002\u0560\u0561","\u0007Z\u0002\u0002\u0561\u056c\u0003\u0002\u0002\u0002\u0562\u0563","\u0007[\u0002\u0002\u0563\u0564\u0005\u00dco\u0002\u0564\u0565\u0007","\\\u0002\u0002\u0565\u056c\u0003\u0002\u0002\u0002\u0566\u0568\n\u0012","\u0002\u0002\u0567\u0566\u0003\u0002\u0002\u0002\u0568\u0569\u0003\u0002","\u0002\u0002\u0569\u0567\u0003\u0002\u0002\u0002\u0569\u056a\u0003\u0002","\u0002\u0002\u056a\u056c\u0003\u0002\u0002\u0002\u056b\u055a\u0003\u0002","\u0002\u0002\u056b\u055e\u0003\u0002\u0002\u0002\u056b\u0562\u0003\u0002","\u0002\u0002\u056b\u0567\u0003\u0002\u0002\u0002\u056c\u00df\u0003\u0002","\u0002\u0002\u056d\u0572\u0005\u00e2r\u0002\u056e\u056f\u0007|\u0002","\u0002\u056f\u0571\u0005\u00e2r\u0002\u0570\u056e\u0003\u0002\u0002","\u0002\u0571\u0574\u0003\u0002\u0002\u0002\u0572\u0570\u0003\u0002\u0002","\u0002\u0572\u0573\u0003\u0002\u0002\u0002\u0573\u00e1\u0003\u0002\u0002","\u0002\u0574\u0572\u0003\u0002\u0002\u0002\u0575\u0577\u0005\u00e4s","\u0002\u0576\u0578\u0005\u010e\u0088\u0002\u0577\u0576\u0003\u0002\u0002","\u0002\u0577\u0578\u0003\u0002\u0002\u0002\u0578\u00e3\u0003\u0002\u0002","\u0002\u0579\u057f\u0005\u00e6t\u0002\u057a\u057b\u0005\u00e8u\u0002","\u057b\u057c\u0005\u00eav\u0002\u057c\u057d\u0005\u00ecw\u0002\u057d","\u057f\u0003\u0002\u0002\u0002\u057e\u0579\u0003\u0002\u0002\u0002\u057e","\u057a\u0003\u0002\u0002\u0002\u057f\u00e5\u0003\u0002\u0002\u0002\u0580","\u0582\u0005\u00eex\u0002\u0581\u0583\u0007\u0018\u0002\u0002\u0582","\u0581\u0003\u0002\u0002\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583","\u0585\u0003\u0002\u0002\u0002\u0584\u0580\u0003\u0002\u0002\u0002\u0585","\u0588\u0003\u0002\u0002\u0002\u0586\u0584\u0003\u0002\u0002\u0002\u0586","\u0587\u0003\u0002\u0002\u0002\u0587\u0589\u0003\u0002\u0002\u0002\u0588","\u0586\u0003\u0002\u0002\u0002\u0589\u058a\u0005\u00e8u\u0002\u058a","\u00e7\u0003\u0002\u0002\u0002\u058b\u058c\bu\u0001\u0002\u058c\u058e","\u0005\u00f6|\u0002\u058d\u058f\u0005\u00ceh\u0002\u058e\u058d\u0003","\u0002\u0002\u0002\u058e\u058f\u0003\u0002\u0002\u0002\u058f\u0595\u0003","\u0002\u0002\u0002\u0590\u0591\u0007W\u0002\u0002\u0591\u0592\u0005","\u00e6t\u0002\u0592\u0593\u0007X\u0002\u0002\u0593\u0595\u0003\u0002","\u0002\u0002\u0594\u058b\u0003\u0002\u0002\u0002\u0594\u0590\u0003\u0002","\u0002\u0002\u0595\u05a4\u0003\u0002\u0002\u0002\u0596\u05a0\f\u0004","\u0002\u0002\u0597\u05a1\u0005\u00eav\u0002\u0598\u059a\u0007Y\u0002","\u0002\u0599\u059b\u0005^0\u0002\u059a\u0599\u0003\u0002\u0002\u0002","\u059a\u059b\u0003\u0002\u0002\u0002\u059b\u059c\u0003\u0002\u0002\u0002","\u059c\u059e\u0007Z\u0002\u0002\u059d\u059f\u0005\u00ceh\u0002\u059e","\u059d\u0003\u0002\u0002\u0002\u059e\u059f\u0003\u0002\u0002\u0002\u059f","\u05a1\u0003\u0002\u0002\u0002\u05a0\u0597\u0003\u0002\u0002\u0002\u05a0","\u0598\u0003\u0002\u0002\u0002\u05a1\u05a3\u0003\u0002\u0002\u0002\u05a2","\u0596\u0003\u0002\u0002\u0002\u05a3\u05a6\u0003\u0002\u0002\u0002\u05a4","\u05a2\u0003\u0002\u0002\u0002\u05a4\u05a5\u0003\u0002\u0002\u0002\u05a5","\u00e9\u0003\u0002\u0002\u0002\u05a6\u05a4\u0003\u0002\u0002\u0002\u05a7","\u05a9\u0007W\u0002\u0002\u05a8\u05aa\u0005\u0104\u0083\u0002\u05a9","\u05a8\u0003\u0002\u0002\u0002\u05a9\u05aa\u0003\u0002\u0002\u0002\u05aa","\u05ab\u0003\u0002\u0002\u0002\u05ab\u05ad\u0007X\u0002\u0002\u05ac","\u05ae\u0005\u00f0y\u0002\u05ad\u05ac\u0003\u0002\u0002\u0002\u05ad","\u05ae\u0003\u0002\u0002\u0002\u05ae\u05b0\u0003\u0002\u0002\u0002\u05af","\u05b1\u0005\u00f4{\u0002\u05b0\u05af\u0003\u0002\u0002\u0002\u05b0","\u05b1\u0003\u0002\u0002\u0002\u05b1\u05b3\u0003\u0002\u0002\u0002\u05b2","\u05b4\u0005\u0174\u00bb\u0002\u05b3\u05b2\u0003\u0002\u0002\u0002\u05b3","\u05b4\u0003\u0002\u0002\u0002\u05b4\u05b6\u0003\u0002\u0002\u0002\u05b5","\u05b7\u0005\u00ceh\u0002\u05b6\u05b5\u0003\u0002\u0002\u0002\u05b6","\u05b7\u0003\u0002\u0002\u0002\u05b7\u00eb\u0003\u0002\u0002\u0002\u05b8","\u05b9\u0007~\u0002\u0002\u05b9\u05bb\u0005\u009aN\u0002\u05ba\u05bc","\u0005\u00fa~\u0002\u05bb\u05ba\u0003\u0002\u0002\u0002\u05bb\u05bc","\u0003\u0002\u0002\u0002\u05bc\u00ed\u0003\u0002\u0002\u0002\u05bd\u05bf","\t\u0013\u0002\u0002\u05be\u05c0\u0005\u00ceh\u0002\u05bf\u05be\u0003","\u0002\u0002\u0002\u05bf\u05c0\u0003\u0002\u0002\u0002\u05c0\u05cc\u0003","\u0002\u0002\u0002\u05c1\u05c3\u0005\f\u0007\u0002\u05c2\u05c1\u0003","\u0002\u0002\u0002\u05c2\u05c3\u0003\u0002\u0002\u0002\u05c3\u05c4\u0003","\u0002\u0002\u0002\u05c4\u05c6\u0007_\u0002\u0002\u05c5\u05c7\u0005","\u00ceh\u0002\u05c6\u05c5\u0003\u0002\u0002\u0002\u05c6\u05c7\u0003","\u0002\u0002\u0002\u05c7\u05c9\u0003\u0002\u0002\u0002\u05c8\u05ca\u0005","\u00f0y\u0002\u05c9\u05c8\u0003\u0002\u0002\u0002\u05c9\u05ca\u0003","\u0002\u0002\u0002\u05ca\u05cc\u0003\u0002\u0002\u0002\u05cb\u05bd\u0003","\u0002\u0002\u0002\u05cb\u05c2\u0003\u0002\u0002\u0002\u05cc\u00ef\u0003","\u0002\u0002\u0002\u05cd\u05cf\u0005\u00f2z\u0002\u05ce\u05cd\u0003","\u0002\u0002\u0002\u05cf\u05d0\u0003\u0002\u0002\u0002\u05d0\u05ce\u0003","\u0002\u0002\u0002\u05d0\u05d1\u0003\u0002\u0002\u0002\u05d1\u00f1\u0003","\u0002\u0002\u0002\u05d2\u05d3\t\u0014\u0002\u0002\u05d3\u00f3\u0003","\u0002\u0002\u0002\u05d4\u05d5\t\u0013\u0002\u0002\u05d5\u00f5\u0003","\u0002\u0002\u0002\u05d6\u05d8\u0007\u0085\u0002\u0002\u05d7\u05d6\u0003","\u0002\u0002\u0002\u05d7\u05d8\u0003\u0002\u0002\u0002\u05d8\u05d9\u0003","\u0002\u0002\u0002\u05d9\u05da\u0005\u0006\u0004\u0002\u05da\u00f7\u0003","\u0002\u0002\u0002\u05db\u05dd\u0005\u0098M\u0002\u05dc\u05de\u0005","\u00fa~\u0002\u05dd\u05dc\u0003\u0002\u0002\u0002\u05dd\u05de\u0003","\u0002\u0002\u0002\u05de\u00f9\u0003\u0002\u0002\u0002\u05df\u05e8\u0005","\u00fc\u007f\u0002\u05e0\u05e2\u0005\u00fe\u0080\u0002\u05e1\u05e0\u0003","\u0002\u0002\u0002\u05e1\u05e2\u0003\u0002\u0002\u0002\u05e2\u05e3\u0003","\u0002\u0002\u0002\u05e3\u05e4\u0005\u00eav\u0002\u05e4\u05e5\u0005","\u00ecw\u0002\u05e5\u05e8\u0003\u0002\u0002\u0002\u05e6\u05e8\u0005","\u0100\u0081\u0002\u05e7\u05df\u0003\u0002\u0002\u0002\u05e7\u05e1\u0003","\u0002\u0002\u0002\u05e7\u05e6\u0003\u0002\u0002\u0002\u05e8\u00fb\u0003","\u0002\u0002\u0002\u05e9\u05f3\u0005\u00fe\u0080\u0002\u05ea\u05ec\u0005","\u00eex\u0002\u05eb\u05ea\u0003\u0002\u0002\u0002\u05ec\u05ed\u0003","\u0002\u0002\u0002\u05ed\u05eb\u0003\u0002\u0002\u0002\u05ed\u05ee\u0003","\u0002\u0002\u0002\u05ee\u05f0\u0003\u0002\u0002\u0002\u05ef\u05f1\u0005","\u00fe\u0080\u0002\u05f0\u05ef\u0003\u0002\u0002\u0002\u05f0\u05f1\u0003","\u0002\u0002\u0002\u05f1\u05f3\u0003\u0002\u0002\u0002\u05f2\u05e9\u0003","\u0002\u0002\u0002\u05f2\u05eb\u0003\u0002\u0002\u0002\u05f3\u00fd\u0003","\u0002\u0002\u0002\u05f4\u05f5\b\u0080\u0001\u0002\u05f5\u0603\u0005","\u00eav\u0002\u05f6\u05f8\u0007Y\u0002\u0002\u05f7\u05f9\u0005^0\u0002","\u05f8\u05f7\u0003\u0002\u0002\u0002\u05f8\u05f9\u0003\u0002\u0002\u0002","\u05f9\u05fa\u0003\u0002\u0002\u0002\u05fa\u05fc\u0007Z\u0002\u0002","\u05fb\u05fd\u0005\u00ceh\u0002\u05fc\u05fb\u0003\u0002\u0002\u0002","\u05fc\u05fd\u0003\u0002\u0002\u0002\u05fd\u0603\u0003\u0002\u0002\u0002","\u05fe\u05ff\u0007W\u0002\u0002\u05ff\u0600\u0005\u00fc\u007f\u0002","\u0600\u0601\u0007X\u0002\u0002\u0601\u0603\u0003\u0002\u0002\u0002","\u0602\u05f4\u0003\u0002\u0002\u0002\u0602\u05f6\u0003\u0002\u0002\u0002","\u0602\u05fe\u0003\u0002\u0002\u0002\u0603\u0613\u0003\u0002\u0002\u0002","\u0604\u060f\f\u0006\u0002\u0002\u0605\u0610\u0005\u00eav\u0002\u0606","\u0607\u0005\u00fe\u0080\u0002\u0607\u0609\u0007Y\u0002\u0002\u0608","\u060a\u0005^0\u0002\u0609\u0608\u0003\u0002\u0002\u0002\u0609\u060a","\u0003\u0002\u0002\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b\u060d","\u0007Z\u0002\u0002\u060c\u060e\u0005\u00ceh\u0002\u060d\u060c\u0003","\u0002\u0002\u0002\u060d\u060e\u0003\u0002\u0002\u0002\u060e\u0610\u0003","\u0002\u0002\u0002\u060f\u0605\u0003\u0002\u0002\u0002\u060f\u0606\u0003","\u0002\u0002\u0002\u0610\u0612\u0003\u0002\u0002\u0002\u0611\u0604\u0003","\u0002\u0002\u0002\u0612\u0615\u0003\u0002\u0002\u0002\u0613\u0611\u0003","\u0002\u0002\u0002\u0613\u0614\u0003\u0002\u0002\u0002\u0614\u00ff\u0003","\u0002\u0002\u0002\u0615\u0613\u0003\u0002\u0002\u0002\u0616\u0618\u0005","\u00eex\u0002\u0617\u0616\u0003\u0002\u0002\u0002\u0618\u061b\u0003","\u0002\u0002\u0002\u0619\u0617\u0003\u0002\u0002\u0002\u0619\u061a\u0003","\u0002\u0002\u0002\u061a\u061c\u0003\u0002\u0002\u0002\u061b\u0619\u0003","\u0002\u0002\u0002\u061c\u061d\u0005\u0102\u0082\u0002\u061d\u0101\u0003","\u0002\u0002\u0002\u061e\u061f\b\u0082\u0001\u0002\u061f\u0620\u0007","\u0085\u0002\u0002\u0620\u062f\u0003\u0002\u0002\u0002\u0621\u062b\f","\u0004\u0002\u0002\u0622\u062c\u0005\u00eav\u0002\u0623\u0625\u0007","Y\u0002\u0002\u0624\u0626\u0005^0\u0002\u0625\u0624\u0003\u0002\u0002","\u0002\u0625\u0626\u0003\u0002\u0002\u0002\u0626\u0627\u0003\u0002\u0002","\u0002\u0627\u0629\u0007Z\u0002\u0002\u0628\u062a\u0005\u00ceh\u0002","\u0629\u0628\u0003\u0002\u0002\u0002\u0629\u062a\u0003\u0002\u0002\u0002","\u062a\u062c\u0003\u0002\u0002\u0002\u062b\u0622\u0003\u0002\u0002\u0002","\u062b\u0623\u0003\u0002\u0002\u0002\u062c\u062e\u0003\u0002\u0002\u0002","\u062d\u0621\u0003\u0002\u0002\u0002\u062e\u0631\u0003\u0002\u0002\u0002","\u062f\u062d\u0003\u0002\u0002\u0002\u062f\u0630\u0003\u0002\u0002\u0002","\u0630\u0103\u0003\u0002\u0002\u0002\u0631\u062f\u0003\u0002\u0002\u0002","\u0632\u0637\u0005\u0106\u0084\u0002\u0633\u0635\u0007|\u0002\u0002","\u0634\u0633\u0003\u0002\u0002\u0002\u0634\u0635\u0003\u0002\u0002\u0002","\u0635\u0636\u0003\u0002\u0002\u0002\u0636\u0638\u0007\u0085\u0002\u0002","\u0637\u0634\u0003\u0002\u0002\u0002\u0637\u0638\u0003\u0002\u0002\u0002","\u0638\u0105\u0003\u0002\u0002\u0002\u0639\u063e\u0005\u0108\u0085\u0002","\u063a\u063b\u0007|\u0002\u0002\u063b\u063d\u0005\u0108\u0085\u0002","\u063c\u063a\u0003\u0002\u0002\u0002\u063d\u0640\u0003\u0002\u0002\u0002","\u063e\u063c\u0003\u0002\u0002\u0002\u063e\u063f\u0003\u0002\u0002\u0002","\u063f\u0107\u0003\u0002\u0002\u0002\u0640\u063e\u0003\u0002\u0002\u0002","\u0641\u0643\u0005\u00ceh\u0002\u0642\u0641\u0003\u0002\u0002\u0002","\u0642\u0643\u0003\u0002\u0002\u0002\u0643\u0644\u0003\u0002\u0002\u0002","\u0644\u0649\u0005\u008cG\u0002\u0645\u064a\u0005\u00e4s\u0002\u0646","\u0648\u0005\u00fa~\u0002\u0647\u0646\u0003\u0002\u0002\u0002\u0647","\u0648\u0003\u0002\u0002\u0002\u0648\u064a\u0003\u0002\u0002\u0002\u0649","\u0645\u0003\u0002\u0002\u0002\u0649\u0647\u0003\u0002\u0002\u0002\u064a","\u064d\u0003\u0002\u0002\u0002\u064b\u064c\u0007g\u0002\u0002\u064c","\u064e\u0005\u0112\u008a\u0002\u064d\u064b\u0003\u0002\u0002\u0002\u064d","\u064e\u0003\u0002\u0002\u0002\u064e\u0109\u0003\u0002\u0002\u0002\u064f","\u0651\u0005\u00ceh\u0002\u0650\u064f\u0003\u0002\u0002\u0002\u0650","\u0651\u0003\u0002\u0002\u0002\u0651\u0653\u0003\u0002\u0002\u0002\u0652","\u0654\u0005\u008cG\u0002\u0653\u0652\u0003\u0002\u0002\u0002\u0653","\u0654\u0003\u0002\u0002\u0002\u0654\u0655\u0003\u0002\u0002\u0002\u0655","\u0657\u0005\u00e4s\u0002\u0656\u0658\u0005\u012c\u0097\u0002\u0657","\u0656\u0003\u0002\u0002\u0002\u0657\u0658\u0003\u0002\u0002\u0002\u0658","\u0659\u0003\u0002\u0002\u0002\u0659\u065a\u0005\u010c\u0087\u0002\u065a","\u010b\u0003\u0002\u0002\u0002\u065b\u065d\u0005\u0144\u00a3\u0002\u065c","\u065b\u0003\u0002\u0002\u0002\u065c\u065d\u0003\u0002\u0002\u0002\u065d","\u065e\u0003\u0002\u0002\u0002\u065e\u0664\u0005f4\u0002\u065f\u0664","\u0005\u016a\u00b6\u0002\u0660\u0661\u0007g\u0002\u0002\u0661\u0662","\t\u0015\u0002\u0002\u0662\u0664\u0007\u0082\u0002\u0002\u0663\u065c","\u0003\u0002\u0002\u0002\u0663\u065f\u0003\u0002\u0002\u0002\u0663\u0660","\u0003\u0002\u0002\u0002\u0664\u010d\u0003\u0002\u0002\u0002\u0665\u066b","\u0005\u0110\u0089\u0002\u0666\u0667\u0007W\u0002\u0002\u0667\u0668","\u0005$\u0013\u0002\u0668\u0669\u0007X\u0002\u0002\u0669\u066b\u0003","\u0002\u0002\u0002\u066a\u0665\u0003\u0002\u0002\u0002\u066a\u0666\u0003","\u0002\u0002\u0002\u066b\u010f\u0003\u0002\u0002\u0002\u066c\u066d\u0007","g\u0002\u0002\u066d\u0670\u0005\u0112\u008a\u0002\u066e\u0670\u0005","\u0116\u008c\u0002\u066f\u066c\u0003\u0002\u0002\u0002\u066f\u066e\u0003","\u0002\u0002\u0002\u0670\u0111\u0003\u0002\u0002\u0002\u0671\u0674\u0005","X-\u0002\u0672\u0674\u0005\u0116\u008c\u0002\u0673\u0671\u0003\u0002","\u0002\u0002\u0673\u0672\u0003\u0002\u0002\u0002\u0674\u0113\u0003\u0002","\u0002\u0002\u0675\u0677\u0005\u0112\u008a\u0002\u0676\u0678\u0007\u0085","\u0002\u0002\u0677\u0676\u0003\u0002\u0002\u0002\u0677\u0678\u0003\u0002","\u0002\u0002\u0678\u0680\u0003\u0002\u0002\u0002\u0679\u067a\u0007|","\u0002\u0002\u067a\u067c\u0005\u0112\u008a\u0002\u067b\u067d\u0007\u0085","\u0002\u0002\u067c\u067b\u0003\u0002\u0002\u0002\u067c\u067d\u0003\u0002","\u0002\u0002\u067d\u067f\u0003\u0002\u0002\u0002\u067e\u0679\u0003\u0002","\u0002\u0002\u067f\u0682\u0003\u0002\u0002\u0002\u0680\u067e\u0003\u0002","\u0002\u0002\u0680\u0681\u0003\u0002\u0002\u0002\u0681\u0115\u0003\u0002","\u0002\u0002\u0682\u0680\u0003\u0002\u0002\u0002\u0683\u0688\u0007[","\u0002\u0002\u0684\u0686\u0005\u0114\u008b\u0002\u0685\u0687\u0007|","\u0002\u0002\u0686\u0685\u0003\u0002\u0002\u0002\u0686\u0687\u0003\u0002","\u0002\u0002\u0687\u0689\u0003\u0002\u0002\u0002\u0688\u0684\u0003\u0002","\u0002\u0002\u0688\u0689\u0003\u0002\u0002\u0002\u0689\u068a\u0003\u0002","\u0002\u0002\u068a\u068b\u0007\\\u0002\u0002\u068b\u0117\u0003\u0002","\u0002\u0002\u068c\u068f\u0007\u0086\u0002\u0002\u068d\u068f\u0005\u0158","\u00ad\u0002\u068e\u068c\u0003\u0002\u0002\u0002\u068e\u068d\u0003\u0002","\u0002\u0002\u068f\u0119\u0003\u0002\u0002\u0002\u0690\u0691\u0005\u011c","\u008f\u0002\u0691\u0693\u0007[\u0002\u0002\u0692\u0694\u0005\u0124","\u0093\u0002\u0693\u0692\u0003\u0002\u0002\u0002\u0693\u0694\u0003\u0002","\u0002\u0002\u0694\u0695\u0003\u0002\u0002\u0002\u0695\u0696\u0007\\","\u0002\u0002\u0696\u011b\u0003\u0002\u0002\u0002\u0697\u0699\u0005\u0122","\u0092\u0002\u0698\u069a\u0005\u00ceh\u0002\u0699\u0698\u0003\u0002","\u0002\u0002\u0699\u069a\u0003\u0002\u0002\u0002\u069a\u069f\u0003\u0002","\u0002\u0002\u069b\u069d\u0005\u011e\u0090\u0002\u069c\u069e\u0005\u0120","\u0091\u0002\u069d\u069c\u0003\u0002\u0002\u0002\u069d\u069e\u0003\u0002","\u0002\u0002\u069e\u06a0\u0003\u0002\u0002\u0002\u069f\u069b\u0003\u0002","\u0002\u0002\u069f\u06a0\u0003\u0002\u0002\u0002\u06a0\u06a2\u0003\u0002","\u0002\u0002\u06a1\u06a3\u0005\u0132\u009a\u0002\u06a2\u06a1\u0003\u0002","\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002\u06a3\u06af\u0003\u0002","\u0002\u0002\u06a4\u06a6\u0007O\u0002\u0002\u06a5\u06a7\u0005\u00ce","h\u0002\u06a6\u06a5\u0003\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002","\u0002\u0002\u06a7\u06ac\u0003\u0002\u0002\u0002\u06a8\u06aa\u0005\u011e","\u0090\u0002\u06a9\u06ab\u0005\u0120\u0091\u0002\u06aa\u06a9\u0003\u0002","\u0002\u0002\u06aa\u06ab\u0003\u0002\u0002\u0002\u06ab\u06ad\u0003\u0002","\u0002\u0002\u06ac\u06a8\u0003\u0002\u0002\u0002\u06ac\u06ad\u0003\u0002","\u0002\u0002\u06ad\u06af\u0003\u0002\u0002\u0002\u06ae\u0697\u0003\u0002","\u0002\u0002\u06ae\u06a4\u0003\u0002\u0002\u0002\u06af\u011d\u0003\u0002","\u0002\u0002\u06b0\u06b2\u0005\f\u0007\u0002\u06b1\u06b0\u0003\u0002","\u0002\u0002\u06b1\u06b2\u0003\u0002\u0002\u0002\u06b2\u06b3\u0003\u0002","\u0002\u0002\u06b3\u06b4\u0005\u0118\u008d\u0002\u06b4\u011f\u0003\u0002","\u0002\u0002\u06b5\u06b6\u0007(\u0002\u0002\u06b6\u0121\u0003\u0002","\u0002\u0002\u06b7\u06b8\t\u0011\u0002\u0002\u06b8\u0123\u0003\u0002","\u0002\u0002\u06b9\u06be\u0005\u0126\u0094\u0002\u06ba\u06bb\u0005\u013c","\u009f\u0002\u06bb\u06bc\u0007\u0080\u0002\u0002\u06bc\u06be\u0003\u0002","\u0002\u0002\u06bd\u06b9\u0003\u0002\u0002\u0002\u06bd\u06ba\u0003\u0002","\u0002\u0002\u06be\u06bf\u0003\u0002\u0002\u0002\u06bf\u06bd\u0003\u0002","\u0002\u0002\u06bf\u06c0\u0003\u0002\u0002\u0002\u06c0\u0125\u0003\u0002","\u0002\u0002\u06c1\u06c3\u0005\u00ceh\u0002\u06c2\u06c1\u0003\u0002","\u0002\u0002\u06c2\u06c3\u0003\u0002\u0002\u0002\u06c3\u06c5\u0003\u0002","\u0002\u0002\u06c4\u06c6\u0005\u008cG\u0002\u06c5\u06c4\u0003\u0002","\u0002\u0002\u06c5\u06c6\u0003\u0002\u0002\u0002\u06c6\u06c8\u0003\u0002","\u0002\u0002\u06c7\u06c9\u0005\u0128\u0095\u0002\u06c8\u06c7\u0003\u0002","\u0002\u0002\u06c8\u06c9\u0003\u0002\u0002\u0002\u06c9\u06ca\u0003\u0002","\u0002\u0002\u06ca\u06d2\u0007\u0082\u0002\u0002\u06cb\u06d2\u0005\u010a","\u0086\u0002\u06cc\u06d2\u0005\u00c6d\u0002\u06cd\u06d2\u0005\u0084","C\u0002\u06ce\u06d2\u0005\u0150\u00a9\u0002\u06cf\u06d2\u0005\u0080","A\u0002\u06d0\u06d2\u0005\u0086D\u0002\u06d1\u06c2\u0003\u0002\u0002","\u0002\u06d1\u06cb\u0003\u0002\u0002\u0002\u06d1\u06cc\u0003\u0002\u0002","\u0002\u06d1\u06cd\u0003\u0002\u0002\u0002\u06d1\u06ce\u0003\u0002\u0002","\u0002\u06d1\u06cf\u0003\u0002\u0002\u0002\u06d1\u06d0\u0003\u0002\u0002","\u0002\u06d2\u0127\u0003\u0002\u0002\u0002\u06d3\u06d8\u0005\u012a\u0096","\u0002\u06d4\u06d5\u0007|\u0002\u0002\u06d5\u06d7\u0005\u012a\u0096","\u0002\u06d6\u06d4\u0003\u0002\u0002\u0002\u06d7\u06da\u0003\u0002\u0002","\u0002\u06d8\u06d6\u0003\u0002\u0002\u0002\u06d8\u06d9\u0003\u0002\u0002","\u0002\u06d9\u0129\u0003\u0002\u0002\u0002\u06da\u06d8\u0003\u0002\u0002","\u0002\u06db\u06e5\u0005\u00e4s\u0002\u06dc\u06de\u0005\u012c\u0097","\u0002\u06dd\u06dc\u0003\u0002\u0002\u0002\u06dd\u06de\u0003\u0002\u0002","\u0002\u06de\u06e0\u0003\u0002\u0002\u0002\u06df\u06e1\u0005\u0130\u0099","\u0002\u06e0\u06df\u0003\u0002\u0002\u0002\u06e0\u06e1\u0003\u0002\u0002","\u0002\u06e1\u06e6\u0003\u0002\u0002\u0002\u06e2\u06e4\u0005\u0110\u0089","\u0002\u06e3\u06e2\u0003\u0002\u0002\u0002\u06e3\u06e4\u0003\u0002\u0002","\u0002\u06e4\u06e6\u0003\u0002\u0002\u0002\u06e5\u06dd\u0003\u0002\u0002","\u0002\u06e5\u06e3\u0003\u0002\u0002\u0002\u06e6\u06f0\u0003\u0002\u0002","\u0002\u06e7\u06e9\u0007\u0086\u0002\u0002\u06e8\u06e7\u0003\u0002\u0002","\u0002\u06e8\u06e9\u0003\u0002\u0002\u0002\u06e9\u06eb\u0003\u0002\u0002","\u0002\u06ea\u06ec\u0005\u00ceh\u0002\u06eb\u06ea\u0003\u0002\u0002","\u0002\u06eb\u06ec\u0003\u0002\u0002\u0002\u06ec\u06ed\u0003\u0002\u0002","\u0002\u06ed\u06ee\u0007\u0080\u0002\u0002\u06ee\u06f0\u0005^0\u0002","\u06ef\u06db\u0003\u0002\u0002\u0002\u06ef\u06e8\u0003\u0002\u0002\u0002","\u06f0\u012b\u0003\u0002\u0002\u0002\u06f1\u06f3\u0005\u012e\u0098\u0002","\u06f2\u06f1\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003\u0002\u0002\u0002","\u06f4\u06f2\u0003\u0002\u0002\u0002\u06f4\u06f5\u0003\u0002\u0002\u0002","\u06f5\u012d\u0003\u0002\u0002\u0002\u06f6\u06f7\t\u0016\u0002\u0002","\u06f7\u012f\u0003\u0002\u0002\u0002\u06f8\u06f9\u0007g\u0002\u0002","\u06f9\u06fa\u0007\u0088\u0002\u0002\u06fa\u06fb\b\u0099\u0001\u0002","\u06fb\u0131\u0003\u0002\u0002\u0002\u06fc\u06fd\u0007\u0080\u0002\u0002","\u06fd\u06fe\u0005\u0134\u009b\u0002\u06fe\u0133\u0003\u0002\u0002\u0002","\u06ff\u0701\u0005\u0136\u009c\u0002\u0700\u0702\u0007\u0085\u0002\u0002","\u0701\u0700\u0003\u0002\u0002\u0002\u0701\u0702\u0003\u0002\u0002\u0002","\u0702\u070a\u0003\u0002\u0002\u0002\u0703\u0704\u0007|\u0002\u0002","\u0704\u0706\u0005\u0136\u009c\u0002\u0705\u0707\u0007\u0085\u0002\u0002","\u0706\u0705\u0003\u0002\u0002\u0002\u0706\u0707\u0003\u0002\u0002\u0002","\u0707\u0709\u0003\u0002\u0002\u0002\u0708\u0703\u0003\u0002\u0002\u0002","\u0709\u070c\u0003\u0002\u0002\u0002\u070a\u0708\u0003\u0002\u0002\u0002","\u070a\u070b\u0003\u0002\u0002\u0002\u070b\u0135\u0003\u0002\u0002\u0002","\u070c\u070a\u0003\u0002\u0002\u0002\u070d\u070f\u0005\u00ceh\u0002","\u070e\u070d\u0003\u0002\u0002\u0002\u070e\u070f\u0003\u0002\u0002\u0002","\u070f\u071c\u0003\u0002\u0002\u0002\u0710\u071d\u0005\u013a\u009e\u0002","\u0711\u0713\u0007R\u0002\u0002\u0712\u0714\u0005\u013c\u009f\u0002","\u0713\u0712\u0003\u0002\u0002\u0002\u0713\u0714\u0003\u0002\u0002\u0002","\u0714\u0715\u0003\u0002\u0002\u0002\u0715\u071d\u0005\u013a\u009e\u0002","\u0716\u0718\u0005\u013c\u009f\u0002\u0717\u0719\u0007R\u0002\u0002","\u0718\u0717\u0003\u0002\u0002\u0002\u0718\u0719\u0003\u0002\u0002\u0002","\u0719\u071a\u0003\u0002\u0002\u0002\u071a\u071b\u0005\u013a\u009e\u0002","\u071b\u071d\u0003\u0002\u0002\u0002\u071c\u0710\u0003\u0002\u0002\u0002","\u071c\u0711\u0003\u0002\u0002\u0002\u071c\u0716\u0003\u0002\u0002\u0002","\u071d\u0137\u0003\u0002\u0002\u0002\u071e\u0720\u0005\f\u0007\u0002","\u071f\u071e\u0003\u0002\u0002\u0002\u071f\u0720\u0003\u0002\u0002\u0002","\u0720\u0721\u0003\u0002\u0002\u0002\u0721\u0724\u0005\u0118\u008d\u0002","\u0722\u0724\u0005\u00a4S\u0002\u0723\u071f\u0003\u0002\u0002\u0002","\u0723\u0722\u0003\u0002\u0002\u0002\u0724\u0139\u0003\u0002\u0002\u0002","\u0725\u0726\u0005\u0138\u009d\u0002\u0726\u013b\u0003\u0002\u0002\u0002","\u0727\u0728\t\u0017\u0002\u0002\u0728\u013d\u0003\u0002\u0002\u0002","\u0729\u072a\u00076\u0002\u0002\u072a\u072b\u0005\u0140\u00a1\u0002","\u072b\u013f\u0003\u0002\u0002\u0002\u072c\u072e\u0005\u0098M\u0002","\u072d\u072f\u0005\u0142\u00a2\u0002\u072e\u072d\u0003\u0002\u0002\u0002","\u072e\u072f\u0003\u0002\u0002\u0002\u072f\u0141\u0003\u0002\u0002\u0002","\u0730\u0732\u0005\u00eex\u0002\u0731\u0733\u0005\u0142\u00a2\u0002","\u0732\u0731\u0003\u0002\u0002\u0002\u0732\u0733\u0003\u0002\u0002\u0002","\u0733\u0143\u0003\u0002\u0002\u0002\u0734\u0735\u0007\u0080\u0002\u0002","\u0735\u0736\u0005\u0146\u00a4\u0002\u0736\u0145\u0003\u0002\u0002\u0002","\u0737\u0739\u0005\u0148\u00a5\u0002\u0738\u073a\u0007\u0085\u0002\u0002","\u0739\u0738\u0003\u0002\u0002\u0002\u0739\u073a\u0003\u0002\u0002\u0002","\u073a\u0742\u0003\u0002\u0002\u0002\u073b\u073c\u0007|\u0002\u0002","\u073c\u073e\u0005\u0148\u00a5\u0002\u073d\u073f\u0007\u0085\u0002\u0002","\u073e\u073d\u0003\u0002\u0002\u0002\u073e\u073f\u0003\u0002\u0002\u0002","\u073f\u0741\u0003\u0002\u0002\u0002\u0740\u073b\u0003\u0002\u0002\u0002","\u0741\u0744\u0003\u0002\u0002\u0002\u0742\u0740\u0003\u0002\u0002\u0002","\u0742\u0743\u0003\u0002\u0002\u0002\u0743\u0147\u0003\u0002\u0002\u0002","\u0744\u0742\u0003\u0002\u0002\u0002\u0745\u074c\u0005\u014a\u00a6\u0002","\u0746\u0748\u0007W\u0002\u0002\u0747\u0749\u0005$\u0013\u0002\u0748","\u0747\u0003\u0002\u0002\u0002\u0748\u0749\u0003\u0002\u0002\u0002\u0749","\u074a\u0003\u0002\u0002\u0002\u074a\u074d\u0007X\u0002\u0002\u074b","\u074d\u0005\u0116\u008c\u0002\u074c\u0746\u0003\u0002\u0002\u0002\u074c","\u074b\u0003\u0002\u0002\u0002\u074d\u0149\u0003\u0002\u0002\u0002\u074e","\u0751\u0005\u0138\u009d\u0002\u074f\u0751\u0007\u0086\u0002\u0002\u0750","\u074e\u0003\u0002\u0002\u0002\u0750\u074f\u0003\u0002\u0002\u0002\u0751","\u014b\u0003\u0002\u0002\u0002\u0752\u0753\u00076\u0002\u0002\u0753","\u0754\u0005\u017c\u00bf\u0002\u0754\u014d\u0003\u0002\u0002\u0002\u0755","\u0759\u00076\u0002\u0002\u0756\u0757\u0007\u0006\u0002\u0002\u0757","\u075a\u0007\u0086\u0002\u0002\u0758\u075a\u0007\u008e\u0002\u0002\u0759","\u0756\u0003\u0002\u0002\u0002\u0759\u0758\u0003\u0002\u0002\u0002\u075a","\u014f\u0003\u0002\u0002\u0002\u075b\u075c\u0007F\u0002\u0002\u075c","\u075d\u0007h\u0002\u0002\u075d\u075e\u0005\u0152\u00aa\u0002\u075e","\u075f\u0007i\u0002\u0002\u075f\u0760\u0005|?\u0002\u0760\u0151\u0003","\u0002\u0002\u0002\u0761\u0766\u0005\u0154\u00ab\u0002\u0762\u0763\u0007","|\u0002\u0002\u0763\u0765\u0005\u0154\u00ab\u0002\u0764\u0762\u0003","\u0002\u0002\u0002\u0765\u0768\u0003\u0002\u0002\u0002\u0766\u0764\u0003","\u0002\u0002\u0002\u0766\u0767\u0003\u0002\u0002\u0002\u0767\u0153\u0003","\u0002\u0002\u0002\u0768\u0766\u0003\u0002\u0002\u0002\u0769\u076c\u0005","\u0156\u00ac\u0002\u076a\u076c\u0005\u0108\u0085\u0002\u076b\u0769\u0003","\u0002\u0002\u0002\u076b\u076a\u0003\u0002\u0002\u0002\u076c\u0155\u0003","\u0002\u0002\u0002\u076d\u076e\u0007F\u0002\u0002\u076e\u076f\u0007","h\u0002\u0002\u076f\u0770\u0005\u0152\u00aa\u0002\u0770\u0771\u0007","i\u0002\u0002\u0771\u0773\u0003\u0002\u0002\u0002\u0772\u076d\u0003","\u0002\u0002\u0002\u0772\u0773\u0003\u0002\u0002\u0002\u0773\u0774\u0003","\u0002\u0002\u0002\u0774\u0777\u0007\u0017\u0002\u0002\u0775\u0777\u0007","N\u0002\u0002\u0776\u0772\u0003\u0002\u0002\u0002\u0776\u0775\u0003","\u0002\u0002\u0002\u0777\u0783\u0003\u0002\u0002\u0002\u0778\u077a\u0007","\u0085\u0002\u0002\u0779\u0778\u0003\u0002\u0002\u0002\u0779\u077a\u0003","\u0002\u0002\u0002\u077a\u077c\u0003\u0002\u0002\u0002\u077b\u077d\u0007","\u0086\u0002\u0002\u077c\u077b\u0003\u0002\u0002\u0002\u077c\u077d\u0003","\u0002\u0002\u0002\u077d\u0784\u0003\u0002\u0002\u0002\u077e\u0780\u0007","\u0086\u0002\u0002\u077f\u077e\u0003\u0002\u0002\u0002\u077f\u0780\u0003","\u0002\u0002\u0002\u0780\u0781\u0003\u0002\u0002\u0002\u0781\u0782\u0007","g\u0002\u0002\u0782\u0784\u0005\u00f8}\u0002\u0783\u0779\u0003\u0002","\u0002\u0002\u0783\u077f\u0003\u0002\u0002\u0002\u0784\u0157\u0003\u0002","\u0002\u0002\u0785\u0786\u0005\u015c\u00af\u0002\u0786\u0788\u0007h","\u0002\u0002\u0787\u0789\u0005\u015e\u00b0\u0002\u0788\u0787\u0003\u0002","\u0002\u0002\u0788\u0789\u0003\u0002\u0002\u0002\u0789\u078a\u0003\u0002","\u0002\u0002\u078a\u078b\u0007i\u0002\u0002\u078b\u0159\u0003\u0002","\u0002\u0002\u078c\u0798\u0005\u0158\u00ad\u0002\u078d\u0790\u0005\u014c","\u00a7\u0002\u078e\u0790\u0005\u014e\u00a8\u0002\u078f\u078d\u0003\u0002","\u0002\u0002\u078f\u078e\u0003\u0002\u0002\u0002\u0790\u0791\u0003\u0002","\u0002\u0002\u0791\u0793\u0007h\u0002\u0002\u0792\u0794\u0005\u015e","\u00b0\u0002\u0793\u0792\u0003\u0002\u0002\u0002\u0793\u0794\u0003\u0002","\u0002\u0002\u0794\u0795\u0003\u0002\u0002\u0002\u0795\u0796\u0007i","\u0002\u0002\u0796\u0798\u0003\u0002\u0002\u0002\u0797\u078c\u0003\u0002","\u0002\u0002\u0797\u078f\u0003\u0002\u0002\u0002\u0798\u015b\u0003\u0002","\u0002\u0002\u0799\u079a\u0007\u0086\u0002\u0002\u079a\u015d\u0003\u0002","\u0002\u0002\u079b\u079d\u0005\u0160\u00b1\u0002\u079c\u079e\u0007\u0085","\u0002\u0002\u079d\u079c\u0003\u0002\u0002\u0002\u079d\u079e\u0003\u0002","\u0002\u0002\u079e\u07a6\u0003\u0002\u0002\u0002\u079f\u07a0\u0007|","\u0002\u0002\u07a0\u07a2\u0005\u0160\u00b1\u0002\u07a1\u07a3\u0007\u0085","\u0002\u0002\u07a2\u07a1\u0003\u0002\u0002\u0002\u07a2\u07a3\u0003\u0002","\u0002\u0002\u07a3\u07a5\u0003\u0002\u0002\u0002\u07a4\u079f\u0003\u0002","\u0002\u0002\u07a5\u07a8\u0003\u0002\u0002\u0002\u07a6\u07a4\u0003\u0002","\u0002\u0002\u07a6\u07a7\u0003\u0002\u0002\u0002\u07a7\u015f\u0003\u0002","\u0002\u0002\u07a8\u07a6\u0003\u0002\u0002\u0002\u07a9\u07ad\u0005\u00f8","}\u0002\u07aa\u07ad\u0005^0\u0002\u07ab\u07ad\u0005\u0006\u0004\u0002","\u07ac\u07a9\u0003\u0002\u0002\u0002\u07ac\u07aa\u0003\u0002\u0002\u0002","\u07ac\u07ab\u0003\u0002\u0002\u0002\u07ad\u0161\u0003\u0002\u0002\u0002","\u07ae\u07af\u0007N\u0002\u0002\u07af\u07b5\u0005\f\u0007\u0002\u07b0","\u07b6\u0007\u0086\u0002\u0002\u07b1\u07b3\u0007F\u0002\u0002\u07b2","\u07b1\u0003\u0002\u0002\u0002\u07b2\u07b3\u0003\u0002\u0002\u0002\u07b3","\u07b4\u0003\u0002\u0002\u0002\u07b4\u07b6\u0005\u0158\u00ad\u0002\u07b5","\u07b0\u0003\u0002\u0002\u0002\u07b5\u07b2\u0003\u0002\u0002\u0002\u07b6","\u0163\u0003\u0002\u0002\u0002\u07b7\u07b9\u0007&\u0002\u0002\u07b8","\u07b7\u0003\u0002\u0002\u0002\u07b8\u07b9\u0003\u0002\u0002\u0002\u07b9","\u07ba\u0003\u0002\u0002\u0002\u07ba\u07bb\u0007F\u0002\u0002\u07bb","\u07bc\u0005|?\u0002\u07bc\u0165\u0003\u0002\u0002\u0002\u07bd\u07be","\u0007F\u0002\u0002\u07be\u07bf\u0007h\u0002\u0002\u07bf\u07c0\u0007","i\u0002\u0002\u07c0\u07c1\u0005|?\u0002\u07c1\u0167\u0003\u0002\u0002","\u0002\u07c2\u07c3\u0007K\u0002\u0002\u07c3\u07c4\u0005f4\u0002\u07c4","\u07c5\u0005\u016c\u00b7\u0002\u07c5\u0169\u0003\u0002\u0002\u0002\u07c6","\u07c8\u0007K\u0002\u0002\u07c7\u07c9\u0005\u0144\u00a3\u0002\u07c8","\u07c7\u0003\u0002\u0002\u0002\u07c8\u07c9\u0003\u0002\u0002\u0002\u07c9","\u07ca\u0003\u0002\u0002\u0002\u07ca\u07cb\u0005f4\u0002\u07cb\u07cc","\u0005\u016c\u00b7\u0002\u07cc\u016b\u0003\u0002\u0002\u0002\u07cd\u07cf","\u0005\u016e\u00b8\u0002\u07ce\u07cd\u0003\u0002\u0002\u0002\u07cf\u07d0","\u0003\u0002\u0002\u0002\u07d0\u07ce\u0003\u0002\u0002\u0002\u07d0\u07d1","\u0003\u0002\u0002\u0002\u07d1\u016d\u0003\u0002\u0002\u0002\u07d2\u07d3","\u0007\u0013\u0002\u0002\u07d3\u07d4\u0007W\u0002\u0002\u07d4\u07d5","\u0005\u0170\u00b9\u0002\u07d5\u07d6\u0007X\u0002\u0002\u07d6\u07d7","\u0005f4\u0002\u07d7\u016f\u0003\u0002\u0002\u0002\u07d8\u07da\u0005","\u00ceh\u0002\u07d9\u07d8\u0003\u0002\u0002\u0002\u07d9\u07da\u0003","\u0002\u0002\u0002\u07da\u07db\u0003\u0002\u0002\u0002\u07db\u07de\u0005","\u0098M\u0002\u07dc\u07df\u0005\u00e4s\u0002\u07dd\u07df\u0005\u00fa","~\u0002\u07de\u07dc\u0003\u0002\u0002\u0002\u07de\u07dd\u0003\u0002","\u0002\u0002\u07de\u07df\u0003\u0002\u0002\u0002\u07df\u07e2\u0003\u0002","\u0002\u0002\u07e0\u07e2\u0007\u0085\u0002\u0002\u07e1\u07d9\u0003\u0002","\u0002\u0002\u07e1\u07e0\u0003\u0002\u0002\u0002\u07e2\u0171\u0003\u0002","\u0002\u0002\u07e3\u07e5\u0007I\u0002\u0002\u07e4\u07e6\u0005X-\u0002","\u07e5\u07e4\u0003\u0002\u0002\u0002\u07e5\u07e6\u0003\u0002\u0002\u0002","\u07e6\u0173\u0003\u0002\u0002\u0002\u07e7\u07ea\u0005\u0176\u00bc\u0002","\u07e8\u07ea\u0005\u017a\u00be\u0002\u07e9\u07e7\u0003\u0002\u0002\u0002","\u07e9\u07e8\u0003\u0002\u0002\u0002\u07ea\u0175\u0003\u0002\u0002\u0002","\u07eb\u07ec\u0007I\u0002\u0002\u07ec\u07ee\u0007W\u0002\u0002\u07ed","\u07ef\u0005\u0178\u00bd\u0002\u07ee\u07ed\u0003\u0002\u0002\u0002\u07ee","\u07ef\u0003\u0002\u0002\u0002\u07ef\u07f0\u0003\u0002\u0002\u0002\u07f0","\u07f1\u0007X\u0002\u0002\u07f1\u0177\u0003\u0002\u0002\u0002\u07f2","\u07f4\u0005\u00f8}\u0002\u07f3\u07f5\u0007\u0085\u0002\u0002\u07f4","\u07f3\u0003\u0002\u0002\u0002\u07f4\u07f5\u0003\u0002\u0002\u0002\u07f5","\u07fd\u0003\u0002\u0002\u0002\u07f6\u07f7\u0007|\u0002\u0002\u07f7","\u07f9\u0005\u00f8}\u0002\u07f8\u07fa\u0007\u0085\u0002\u0002\u07f9","\u07f8\u0003\u0002\u0002\u0002\u07f9\u07fa\u0003\u0002\u0002\u0002\u07fa","\u07fc\u0003\u0002\u0002\u0002\u07fb\u07f6\u0003\u0002\u0002\u0002\u07fc","\u07ff\u0003\u0002\u0002\u0002\u07fd\u07fb\u0003\u0002\u0002\u0002\u07fd","\u07fe\u0003\u0002\u0002\u0002\u07fe\u0179\u0003\u0002\u0002\u0002\u07ff","\u07fd\u0003\u0002\u0002\u0002\u0800\u0801\u00074\u0002\u0002\u0801","\u0802\u0007W\u0002\u0002\u0802\u0803\u0005^0\u0002\u0803\u0804\u0007","X\u0002\u0002\u0804\u0807\u0003\u0002\u0002\u0002\u0805\u0807\u0007","4\u0002\u0002\u0806\u0800\u0003\u0002\u0002\u0002\u0806\u0805\u0003","\u0002\u0002\u0002\u0807\u017b\u0003\u0002\u0002\u0002\u0808\u080b\u0007","3\u0002\u0002\u0809\u080a\u0007Y\u0002\u0002\u080a\u080c\u0007Z\u0002","\u0002\u080b\u0809\u0003\u0002\u0002\u0002\u080b\u080c\u0003\u0002\u0002","\u0002\u080c\u083c\u0003\u0002\u0002\u0002\u080d\u0810\u0007\u001e\u0002","\u0002\u080e\u080f\u0007Y\u0002\u0002\u080f\u0811\u0007Z\u0002\u0002","\u0810\u080e\u0003\u0002\u0002\u0002\u0810\u0811\u0003\u0002\u0002\u0002","\u0811\u083c\u0003\u0002\u0002\u0002\u0812\u083c\u0007]\u0002\u0002","\u0813\u083c\u0007^\u0002\u0002\u0814\u083c\u0007_\u0002\u0002\u0815","\u083c\u0007`\u0002\u0002\u0816\u083c\u0007a\u0002\u0002\u0817\u083c","\u0007b\u0002\u0002\u0818\u083c\u0007c\u0002\u0002\u0819\u083c\u0007","d\u0002\u0002\u081a\u083c\u0007e\u0002\u0002\u081b\u083c\u0007f\u0002","\u0002\u081c\u083c\u0007g\u0002\u0002\u081d\u083c\u0007i\u0002\u0002","\u081e\u083c\u0007h\u0002\u0002\u081f\u083c\u0007w\u0002\u0002\u0820","\u083c\u0007j\u0002\u0002\u0821\u083c\u0007k\u0002\u0002\u0822\u083c","\u0007l\u0002\u0002\u0823\u083c\u0007n\u0002\u0002\u0824\u083c\u0007","o\u0002\u0002\u0825\u083c\u0007p\u0002\u0002\u0826\u083c\u0007q\u0002","\u0002\u0827\u0828\u0007h\u0002\u0002\u0828\u083c\u0007h\u0002\u0002","\u0829\u082a\u0007i\u0002\u0002\u082a\u083c\u0007i\u0002\u0002\u082b","\u083c\u0007s\u0002\u0002\u082c\u083c\u0007r\u0002\u0002\u082d\u083c","\u0007t\u0002\u0002\u082e\u083c\u0007u\u0002\u0002\u082f\u083c\u0007","v\u0002\u0002\u0830\u083c\u0007x\u0002\u0002\u0831\u083c\u0007y\u0002","\u0002\u0832\u083c\u0007z\u0002\u0002\u0833\u083c\u0007{\u0002\u0002","\u0834\u083c\u0007|\u0002\u0002\u0835\u083c\u0007}\u0002\u0002\u0836","\u083c\u0007~\u0002\u0002\u0837\u0838\u0007W\u0002\u0002\u0838\u083c","\u0007X\u0002\u0002\u0839\u083a\u0007Y\u0002\u0002\u083a\u083c\u0007","Z\u0002\u0002\u083b\u0808\u0003\u0002\u0002\u0002\u083b\u080d\u0003","\u0002\u0002\u0002\u083b\u0812\u0003\u0002\u0002\u0002\u083b\u0813\u0003","\u0002\u0002\u0002\u083b\u0814\u0003\u0002\u0002\u0002\u083b\u0815\u0003","\u0002\u0002\u0002\u083b\u0816\u0003\u0002\u0002\u0002\u083b\u0817\u0003","\u0002\u0002\u0002\u083b\u0818\u0003\u0002\u0002\u0002\u083b\u0819\u0003","\u0002\u0002\u0002\u083b\u081a\u0003\u0002\u0002\u0002\u083b\u081b\u0003","\u0002\u0002\u0002\u083b\u081c\u0003\u0002\u0002\u0002\u083b\u081d\u0003","\u0002\u0002\u0002\u083b\u081e\u0003\u0002\u0002\u0002\u083b\u081f\u0003","\u0002\u0002\u0002\u083b\u0820\u0003\u0002\u0002\u0002\u083b\u0821\u0003","\u0002\u0002\u0002\u083b\u0822\u0003\u0002\u0002\u0002\u083b\u0823\u0003","\u0002\u0002\u0002\u083b\u0824\u0003\u0002\u0002\u0002\u083b\u0825\u0003","\u0002\u0002\u0002\u083b\u0826\u0003\u0002\u0002\u0002\u083b\u0827\u0003","\u0002\u0002\u0002\u083b\u0829\u0003\u0002\u0002\u0002\u083b\u082b\u0003","\u0002\u0002\u0002\u083b\u082c\u0003\u0002\u0002\u0002\u083b\u082d\u0003","\u0002\u0002\u0002\u083b\u082e\u0003\u0002\u0002\u0002\u083b\u082f\u0003","\u0002\u0002\u0002\u083b\u0830\u0003\u0002\u0002\u0002\u083b\u0831\u0003","\u0002\u0002\u0002\u083b\u0832\u0003\u0002\u0002\u0002\u083b\u0833\u0003","\u0002\u0002\u0002\u083b\u0834\u0003\u0002\u0002\u0002\u083b\u0835\u0003","\u0002\u0002\u0002\u083b\u0836\u0003\u0002\u0002\u0002\u083b\u0837\u0003","\u0002\u0002\u0002\u083b\u0839\u0003\u0002\u0002\u0002\u083c\u017d\u0003","\u0002\u0002\u0002\u083d\u083e\t\u0018\u0002\u0002\u083e\u017f\u0003","\u0002\u0002\u0002\u0134\u0181\u0188\u0191\u0195\u019e\u01a1\u01a5\u01ad","\u01b4\u01b7\u01bc\u01c1\u01c7\u01cf\u01d1\u01da\u01de\u01e2\u01e5\u01e9","\u01ec\u01f3\u01f7\u01fa\u01fd\u0200\u0206\u020a\u020e\u021c\u0220\u0226","\u022d\u0233\u0237\u023b\u023d\u0245\u024a\u0257\u025e\u026a\u0274\u0279","\u027d\u0284\u0287\u028f\u0293\u0296\u029d\u02a4\u02a8\u02ad\u02b1\u02b4","\u02b9\u02c8\u02cf\u02d7\u02df\u02e8\u02ef\u02f6\u02fe\u0306\u030e\u0316","\u031e\u0326\u032f\u0337\u0340\u0348\u0350\u0352\u0355\u035b\u0361\u0367","\u036e\u0377\u037f\u0383\u038a\u038c\u03a0\u03a4\u03aa\u03af\u03b3\u03b6","\u03bd\u03c4\u03c8\u03d1\u03dc\u03e6\u03eb\u03f2\u03f5\u03fa\u03ff\u0414","\u0419\u041c\u0427\u042d\u0432\u0435\u043a\u043d\u0444\u044d\u0452\u0455","\u0459\u045d\u0461\u0466\u046b\u0471\u0477\u047d\u0483\u0489\u048c\u0492","\u0496\u049a\u049d\u04a5\u04a7\u04ad\u04b0\u04b3\u04b6\u04ba\u04be\u04c4","\u04ce\u04d4\u04da\u04df\u04e4\u04e8\u04f5\u04fb\u04ff\u0505\u050a\u0519","\u051d\u0522\u0527\u052c\u0532\u0535\u053e\u0542\u0547\u054b\u0551\u0558","\u0569\u056b\u0572\u0577\u057e\u0582\u0586\u058e\u0594\u059a\u059e\u05a0","\u05a4\u05a9\u05ad\u05b0\u05b3\u05b6\u05bb\u05bf\u05c2\u05c6\u05c9\u05cb","\u05d0\u05d7\u05dd\u05e1\u05e7\u05ed\u05f0\u05f2\u05f8\u05fc\u0602\u0609","\u060d\u060f\u0613\u0619\u0625\u0629\u062b\u062f\u0634\u0637\u063e\u0642","\u0647\u0649\u064d\u0650\u0653\u0657\u065c\u0663\u066a\u066f\u0673\u0677","\u067c\u0680\u0686\u0688\u068e\u0693\u0699\u069d\u069f\u06a2\u06a6\u06aa","\u06ac\u06ae\u06b1\u06bd\u06bf\u06c2\u06c5\u06c8\u06d1\u06d8\u06dd\u06e0","\u06e3\u06e5\u06e8\u06eb\u06ef\u06f4\u0701\u0706\u070a\u070e\u0713\u0718","\u071c\u071f\u0723\u072e\u0732\u0739\u073e\u0742\u0748\u074c\u0750\u0759","\u0766\u076b\u0772\u0776\u0779\u077c\u077f\u0783\u0788\u078f\u0793\u0797","\u079d\u07a2\u07a6\u07ac\u07b2\u07b5\u07b8\u07c8\u07d0\u07d9\u07de\u07e1","\u07e5\u07e9\u07ee\u07f4\u07f9\u07fd\u0806\u080b\u0810\u083b"].join("");const atn=new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);const decisionsToDFA=atn.decisionToState.map((ds,index)=>new _antlr.default.dfa.DFA(ds,index));const sharedContextCache=new _antlr.default.PredictionContextCache();class CPP14Parser extends _antlr.default.Parser{static grammarFileName="CPP14Parser.g4";static literalNames=[null,null,null,null,null,null,null,null,null,null,"'alignas'","'alignof'","'asm'","'auto'","'bool'","'break'","'case'","'catch'","'char'","'char16_t'","'char32_t'","'class'","'const'","'constexpr'","'const_cast'","'continue'","'decltype'","'default'","'delete'","'do'","'double'","'dynamic_cast'","'else'","'enum'","'explicit'","'export'","'extern'","'false'","'final'","'float'","'for'","'friend'","'goto'","'if'","'inline'","'int'","'long'","'mutable'","'namespace'","'new'","'noexcept'","'nullptr'","'operator'","'override'","'private'","'protected'","'public'","'register'","'reinterpret_cast'","'return'","'short'","'signed'","'sizeof'","'static'","'static_assert'","'static_cast'","'struct'","'switch'","'template'","'this'","'thread_local'","'throw'","'true'","'try'","'typedef'","'typeid'","'typename'","'union'","'unsigned'","'using'","'virtual'","'void'","'volatile'","'wchar_t'","'while'","'('","')'","'['","']'","'{'","'}'","'+'","'-'","'*'","'/'","'%'","'^'","'&'","'|'","'~'",null,"'='","'<'","'>'","'+='","'-='","'*='","'/='","'%='","'^='","'&='","'|='","'<<='","'>>='","'=='","'!='","'<='","'>='",null,null,"'++'","'--'","','","'->*'","'->'","'?'","':'","'::'","';'","'.'","'.*'","'...'"];static symbolicNames=[null,"IntegerLiteral","CharacterLiteral","FloatingLiteral","StringLiteral","BooleanLiteral","PointerLiteral","UserDefinedLiteral","MultiLineMacro","Directive","Alignas","Alignof","Asm","Auto","Bool","Break","Case","Catch","Char","Char16","Char32","Class","Const","Constexpr","Const_cast","Continue","Decltype","Default","Delete","Do","Double","Dynamic_cast","Else","Enum","Explicit","Export","Extern","False_","Final","Float","For","Friend","Goto","If","Inline","Int","Long","Mutable","Namespace","New","Noexcept","Nullptr","Operator","Override","Private","Protected","Public","Register","Reinterpret_cast","Return","Short","Signed","Sizeof","Static","Static_assert","Static_cast","Struct","Switch","Template","This","Thread_local","Throw","True_","Try","Typedef","Typeid_","Typename_","Union","Unsigned","Using","Virtual","Void","Volatile","Wchar","While","LeftParen","RightParen","LeftBracket","RightBracket","LeftBrace","RightBrace","Plus","Minus","Star","Div","Mod","Caret","And","Or","Tilde","Not","Assign","Less","Greater","PlusAssign","MinusAssign","StarAssign","DivAssign","ModAssign","XorAssign","AndAssign","OrAssign","LeftShiftAssign","RightShiftAssign","Equal","NotEqual","LessEqual","GreaterEqual","AndAnd","OrOr","PlusPlus","MinusMinus","Comma","ArrowStar","Arrow","Question","Colon","Doublecolon","Semi","Dot","DotStar","Ellipsis","Identifier","DecimalLiteral","OctalLiteral","HexadecimalLiteral","BinaryLiteral","Integersuffix","UserDefinedIntegerLiteral","UserDefinedFloatingLiteral","UserDefinedStringLiteral","UserDefinedCharacterLiteral","Whitespace","Newline","BlockComment","LineComment"];static ruleNames=["translationUnit","primaryExpression","idExpression","unqualifiedId","qualifiedId","nestedNameSpecifier","lambdaExpression","lambdaIntroducer","lambdaCapture","captureDefault","captureList","capture","simpleCapture","initcapture","lambdaDeclarator","postfixExpression","typeIdOfTheTypeId","expressionList","pseudoDestructorName","unaryExpression","unaryOperator","newExpression","newPlacement","newTypeId","newDeclarator","noPointerNewDeclarator","newInitializer","deleteExpression","noExceptExpression","castExpression","pointerMemberExpression","multiplicativeExpression","additiveExpression","shiftExpression","shiftOperator","relationalExpression","equalityExpression","andExpression","exclusiveOrExpression","inclusiveOrExpression","logicalAndExpression","logicalOrExpression","conditionalExpression","assignmentExpression","assignmentOperator","expression","constantExpression","statement","labeledStatement","expressionStatement","compoundStatement","statementSeq","selectionStatement","condition","iterationStatement","forInitStatement","forRangeDeclaration","forRangeInitializer","jumpStatement","declarationStatement","declarationseq","declaration","blockDeclaration","aliasDeclaration","simpleDeclaration","staticAssertDeclaration","emptyDeclaration","attributeDeclaration","declSpecifier","declSpecifierSeq","storageClassSpecifier","functionSpecifier","typedefName","typeSpecifier","trailingTypeSpecifier","typeSpecifierSeq","trailingTypeSpecifierSeq","simpleTypeLengthModifier","simpleTypeSignednessModifier","simpleTypeSpecifier","theTypeName","decltypeSpecifier","elaboratedTypeSpecifier","enumName","enumSpecifier","enumHead","opaqueEnumDeclaration","enumkey","enumbase","enumeratorList","enumeratorDefinition","enumerator","namespaceName","originalNamespaceName","namespaceDefinition","namespaceAlias","namespaceAliasDefinition","qualifiednamespacespecifier","usingDeclaration","usingDirective","asmDefinition","linkageSpecification","attributeSpecifierSeq","attributeSpecifier","alignmentspecifier","attributeList","attribute","attributeNamespace","attributeArgumentClause","balancedTokenSeq","balancedtoken","initDeclaratorList","initDeclarator","declarator","pointerDeclarator","noPointerDeclarator","parametersAndQualifiers","trailingReturnType","pointerOperator","cvqualifierseq","cvQualifier","refqualifier","declaratorid","theTypeId","abstractDeclarator","pointerAbstractDeclarator","noPointerAbstractDeclarator","abstractPackDeclarator","noPointerAbstractPackDeclarator","parameterDeclarationClause","parameterDeclarationList","parameterDeclaration","functionDefinition","functionBody","initializer","braceOrEqualInitializer","initializerClause","initializerList","bracedInitList","className","classSpecifier","classHead","classHeadName","classVirtSpecifier","classKey","memberSpecification","memberdeclaration","memberDeclaratorList","memberDeclarator","virtualSpecifierSeq","virtualSpecifier","pureSpecifier","baseClause","baseSpecifierList","baseSpecifier","classOrDeclType","baseTypeSpecifier","accessSpecifier","conversionFunctionId","conversionTypeId","conversionDeclarator","constructorInitializer","memInitializerList","memInitializer","meminitializerid","operatorFunctionId","literalOperatorId","templateDeclaration","templateparameterList","templateParameter","typeParameter","simpleTemplateId","templateId","templateName","templateArgumentList","templateArgument","typeNameSpecifier","explicitInstantiation","explicitSpecialization","tryBlock","functionTryBlock","handlerSeq","handler","exceptionDeclaration","throwExpression","exceptionSpecification","dynamicExceptionSpecification","typeIdList","noeExceptSpecification","theOperator","literal"];constructor(input){super(input);this._interp=new _antlr.default.atn.ParserATNSimulator(this,atn,decisionsToDFA,sharedContextCache);this.ruleNames=CPP14Parser.ruleNames;this.literalNames=CPP14Parser.literalNames;this.symbolicNames=CPP14Parser.symbolicNames;}get atn(){return atn;}sempred(localctx,ruleIndex,predIndex){switch(ruleIndex){case 5:return this.nestedNameSpecifier_sempred(localctx,predIndex);case 15:return this.postfixExpression_sempred(localctx,predIndex);case 25:return this.noPointerNewDeclarator_sempred(localctx,predIndex);case 115:return this.noPointerDeclarator_sempred(localctx,predIndex);case 126:return this.noPointerAbstractDeclarator_sempred(localctx,predIndex);case 128:return this.noPointerAbstractPackDeclarator_sempred(localctx,predIndex);default:throw"No predicate with index:"+ruleIndex;}}nestedNameSpecifier_sempred(localctx,predIndex){switch(predIndex){case 0:return this.precpred(this._ctx,1);default:throw"No predicate with index:"+predIndex;}}postfixExpression_sempred(localctx,predIndex){switch(predIndex){case 1:return this.precpred(this._ctx,7);case 2:return this.precpred(this._ctx,6);case 3:return this.precpred(this._ctx,4);case 4:return this.precpred(this._ctx,3);default:throw"No predicate with index:"+predIndex;}}noPointerNewDeclarator_sempred(localctx,predIndex){switch(predIndex){case 5:return this.precpred(this._ctx,1);default:throw"No predicate with index:"+predIndex;}}noPointerDeclarator_sempred(localctx,predIndex){switch(predIndex){case 6:return this.precpred(this._ctx,2);default:throw"No predicate with index:"+predIndex;}}noPointerAbstractDeclarator_sempred(localctx,predIndex){switch(predIndex){case 7:return this.precpred(this._ctx,4);default:throw"No predicate with index:"+predIndex;}}noPointerAbstractPackDeclarator_sempred(localctx,predIndex){switch(predIndex){case 8:return this.precpred(this._ctx,2);default:throw"No predicate with index:"+predIndex;}}translationUnit(){let localctx=new TranslationUnitContext(this,this._ctx,this.state);this.enterRule(localctx,0,CPP14Parser.RULE_translationUnit);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=383;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-10&~0x1f)==0&&(1<<_la-10&(1<<CPP14Parser.Alignas-10|1<<CPP14Parser.Asm-10|1<<CPP14Parser.Auto-10|1<<CPP14Parser.Bool-10|1<<CPP14Parser.Char-10|1<<CPP14Parser.Char16-10|1<<CPP14Parser.Char32-10|1<<CPP14Parser.Class-10|1<<CPP14Parser.Const-10|1<<CPP14Parser.Constexpr-10|1<<CPP14Parser.Decltype-10|1<<CPP14Parser.Double-10|1<<CPP14Parser.Enum-10|1<<CPP14Parser.Explicit-10|1<<CPP14Parser.Extern-10|1<<CPP14Parser.Float-10|1<<CPP14Parser.Friend-10))!==0||(_la-44&~0x1f)==0&&(1<<_la-44&(1<<CPP14Parser.Inline-44|1<<CPP14Parser.Int-44|1<<CPP14Parser.Long-44|1<<CPP14Parser.Mutable-44|1<<CPP14Parser.Namespace-44|1<<CPP14Parser.Operator-44|1<<CPP14Parser.Register-44|1<<CPP14Parser.Short-44|1<<CPP14Parser.Signed-44|1<<CPP14Parser.Static-44|1<<CPP14Parser.Static_assert-44|1<<CPP14Parser.Struct-44|1<<CPP14Parser.Template-44|1<<CPP14Parser.Thread_local-44|1<<CPP14Parser.Typedef-44))!==0||(_la-76&~0x1f)==0&&(1<<_la-76&(1<<CPP14Parser.Typename_-76|1<<CPP14Parser.Union-76|1<<CPP14Parser.Unsigned-76|1<<CPP14Parser.Using-76|1<<CPP14Parser.Virtual-76|1<<CPP14Parser.Void-76|1<<CPP14Parser.Volatile-76|1<<CPP14Parser.Wchar-76|1<<CPP14Parser.LeftParen-76|1<<CPP14Parser.LeftBracket-76|1<<CPP14Parser.Star-76|1<<CPP14Parser.And-76|1<<CPP14Parser.Tilde-76))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CPP14Parser.AndAnd-118|1<<CPP14Parser.Doublecolon-118|1<<CPP14Parser.Semi-118|1<<CPP14Parser.Ellipsis-118|1<<CPP14Parser.Identifier-118))!==0){this.state=382;this.declarationseq();}this.state=385;this.match(CPP14Parser.EOF);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}primaryExpression(){let localctx=new PrimaryExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,2,CPP14Parser.RULE_primaryExpression);try{this.state=399;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.IntegerLiteral:case CPP14Parser.CharacterLiteral:case CPP14Parser.FloatingLiteral:case CPP14Parser.StringLiteral:case CPP14Parser.BooleanLiteral:case CPP14Parser.PointerLiteral:case CPP14Parser.UserDefinedLiteral:this.enterOuterAlt(localctx,1);this.state=388;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=387;this.literal();break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=390;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,1,this._ctx);}while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER);break;case CPP14Parser.This:this.enterOuterAlt(localctx,2);this.state=392;this.match(CPP14Parser.This);break;case CPP14Parser.LeftParen:this.enterOuterAlt(localctx,3);this.state=393;this.match(CPP14Parser.LeftParen);this.state=394;this.expression();this.state=395;this.match(CPP14Parser.RightParen);break;case CPP14Parser.Decltype:case CPP14Parser.Operator:case CPP14Parser.Tilde:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,4);this.state=397;this.idExpression();break;case CPP14Parser.LeftBracket:this.enterOuterAlt(localctx,5);this.state=398;this.lambdaExpression();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}idExpression(){let localctx=new IdExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,4,CPP14Parser.RULE_idExpression);try{this.state=403;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,3,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=401;this.unqualifiedId();break;case 2:this.enterOuterAlt(localctx,2);this.state=402;this.qualifiedId();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}unqualifiedId(){let localctx=new UnqualifiedIdContext(this,this._ctx,this.state);this.enterRule(localctx,6,CPP14Parser.RULE_unqualifiedId);try{this.state=415;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,5,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=405;this.match(CPP14Parser.Identifier);break;case 2:this.enterOuterAlt(localctx,2);this.state=406;this.operatorFunctionId();break;case 3:this.enterOuterAlt(localctx,3);this.state=407;this.conversionFunctionId();break;case 4:this.enterOuterAlt(localctx,4);this.state=408;this.literalOperatorId();break;case 5:this.enterOuterAlt(localctx,5);this.state=409;this.match(CPP14Parser.Tilde);this.state=412;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Identifier:this.state=410;this.className();break;case CPP14Parser.Decltype:this.state=411;this.decltypeSpecifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}break;case 6:this.enterOuterAlt(localctx,6);this.state=414;this.templateId();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}qualifiedId(){let localctx=new QualifiedIdContext(this,this._ctx,this.state);this.enterRule(localctx,8,CPP14Parser.RULE_qualifiedId);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=417;this.nestedNameSpecifier(0);this.state=419;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Template){this.state=418;this.match(CPP14Parser.Template);}this.state=421;this.unqualifiedId();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}nestedNameSpecifier(_p){if(_p===undefined){_p=0;}const _parentctx=this._ctx;const _parentState=this.state;let localctx=new NestedNameSpecifierContext(this,this._ctx,_parentState);let _prevctx=localctx;const _startState=10;this.enterRecursionRule(localctx,10,CPP14Parser.RULE_nestedNameSpecifier,_p);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=427;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,7,this._ctx);if(la_===1){this.state=424;this.theTypeName();}else if(la_===2){this.state=425;this.namespaceName();}else if(la_===3){this.state=426;this.decltypeSpecifier();}this.state=429;this.match(CPP14Parser.Doublecolon);this._ctx.stop=this._input.LT(-1);this.state=442;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,10,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new NestedNameSpecifierContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,CPP14Parser.RULE_nestedNameSpecifier);this.state=431;if(!this.precpred(this._ctx,1)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 1)");}this.state=437;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,9,this._ctx);switch(la_){case 1:this.state=432;this.match(CPP14Parser.Identifier);break;case 2:this.state=434;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Template){this.state=433;this.match(CPP14Parser.Template);}this.state=436;this.simpleTemplateId();break;}this.state=439;this.match(CPP14Parser.Doublecolon);}this.state=444;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,10,this._ctx);}}catch(error){if(error instanceof _antlr.default.error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}lambdaExpression(){let localctx=new LambdaExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,12,CPP14Parser.RULE_lambdaExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=445;this.lambdaIntroducer();this.state=447;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.LeftParen){this.state=446;this.lambdaDeclarator();}this.state=449;this.compoundStatement();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}lambdaIntroducer(){let localctx=new LambdaIntroducerContext(this,this._ctx,this.state);this.enterRule(localctx,14,CPP14Parser.RULE_lambdaIntroducer);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=451;this.match(CPP14Parser.LeftBracket);this.state=453;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.This||_la===CPP14Parser.And||_la===CPP14Parser.Assign||_la===CPP14Parser.Identifier){this.state=452;this.lambdaCapture();}this.state=455;this.match(CPP14Parser.RightBracket);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}lambdaCapture(){let localctx=new LambdaCaptureContext(this,this._ctx,this.state);this.enterRule(localctx,16,CPP14Parser.RULE_lambdaCapture);var _la=0;// Token type
try{this.state=463;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,14,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=457;this.captureList();break;case 2:this.enterOuterAlt(localctx,2);this.state=458;this.captureDefault();this.state=461;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Comma){this.state=459;this.match(CPP14Parser.Comma);this.state=460;this.captureList();}break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}captureDefault(){let localctx=new CaptureDefaultContext(this,this._ctx,this.state);this.enterRule(localctx,18,CPP14Parser.RULE_captureDefault);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=465;_la=this._input.LA(1);if(!(_la===CPP14Parser.And||_la===CPP14Parser.Assign)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}captureList(){let localctx=new CaptureListContext(this,this._ctx,this.state);this.enterRule(localctx,20,CPP14Parser.RULE_captureList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=467;this.capture();this.state=472;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Comma){this.state=468;this.match(CPP14Parser.Comma);this.state=469;this.capture();this.state=474;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=476;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=475;this.match(CPP14Parser.Ellipsis);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}capture(){let localctx=new CaptureContext(this,this._ctx,this.state);this.enterRule(localctx,22,CPP14Parser.RULE_capture);try{this.state=480;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,17,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=478;this.simpleCapture();break;case 2:this.enterOuterAlt(localctx,2);this.state=479;this.initcapture();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}simpleCapture(){let localctx=new SimpleCaptureContext(this,this._ctx,this.state);this.enterRule(localctx,24,CPP14Parser.RULE_simpleCapture);var _la=0;// Token type
try{this.state=487;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.And:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,1);this.state=483;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.And){this.state=482;this.match(CPP14Parser.And);}this.state=485;this.match(CPP14Parser.Identifier);break;case CPP14Parser.This:this.enterOuterAlt(localctx,2);this.state=486;this.match(CPP14Parser.This);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}initcapture(){let localctx=new InitcaptureContext(this,this._ctx,this.state);this.enterRule(localctx,26,CPP14Parser.RULE_initcapture);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=490;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.And){this.state=489;this.match(CPP14Parser.And);}this.state=492;this.match(CPP14Parser.Identifier);this.state=493;this.initializer();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}lambdaDeclarator(){let localctx=new LambdaDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,28,CPP14Parser.RULE_lambdaDeclarator);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=495;this.match(CPP14Parser.LeftParen);this.state=497;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.Alignas|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Class|1<<CPP14Parser.Const|1<<CPP14Parser.Constexpr|1<<CPP14Parser.Decltype|1<<CPP14Parser.Double))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<CPP14Parser.Enum-33|1<<CPP14Parser.Explicit-33|1<<CPP14Parser.Extern-33|1<<CPP14Parser.Float-33|1<<CPP14Parser.Friend-33|1<<CPP14Parser.Inline-33|1<<CPP14Parser.Int-33|1<<CPP14Parser.Long-33|1<<CPP14Parser.Mutable-33|1<<CPP14Parser.Register-33|1<<CPP14Parser.Short-33|1<<CPP14Parser.Signed-33|1<<CPP14Parser.Static-33))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CPP14Parser.Struct-66|1<<CPP14Parser.Thread_local-66|1<<CPP14Parser.Typedef-66|1<<CPP14Parser.Typename_-66|1<<CPP14Parser.Union-66|1<<CPP14Parser.Unsigned-66|1<<CPP14Parser.Virtual-66|1<<CPP14Parser.Void-66|1<<CPP14Parser.Volatile-66|1<<CPP14Parser.Wchar-66|1<<CPP14Parser.LeftBracket-66))!==0||_la===CPP14Parser.Doublecolon||_la===CPP14Parser.Identifier){this.state=496;this.parameterDeclarationClause();}this.state=499;this.match(CPP14Parser.RightParen);this.state=501;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Mutable){this.state=500;this.match(CPP14Parser.Mutable);}this.state=504;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Noexcept||_la===CPP14Parser.Throw){this.state=503;this.exceptionSpecification();}this.state=507;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=506;this.attributeSpecifierSeq();}this.state=510;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Arrow){this.state=509;this.trailingReturnType();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}postfixExpression(_p){if(_p===undefined){_p=0;}const _parentctx=this._ctx;const _parentState=this.state;let localctx=new PostfixExpressionContext(this,this._ctx,_parentState);let _prevctx=localctx;const _startState=30;this.enterRecursionRule(localctx,30,CPP14Parser.RULE_postfixExpression,_p);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=542;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,30,this._ctx);switch(la_){case 1:this.state=513;this.primaryExpression();break;case 2:this.state=516;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Decltype:case CPP14Parser.Double:case CPP14Parser.Float:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Unsigned:case CPP14Parser.Void:case CPP14Parser.Wchar:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.state=514;this.simpleTypeSpecifier();break;case CPP14Parser.Typename_:this.state=515;this.typeNameSpecifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=524;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftParen:this.state=518;this.match(CPP14Parser.LeftParen);this.state=520;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-71&~0x1f)==0&&(1<<_la-71&(1<<CPP14Parser.Throw-71|1<<CPP14Parser.Typeid_-71|1<<CPP14Parser.Typename_-71|1<<CPP14Parser.Unsigned-71|1<<CPP14Parser.Void-71|1<<CPP14Parser.Wchar-71|1<<CPP14Parser.LeftParen-71|1<<CPP14Parser.LeftBracket-71|1<<CPP14Parser.LeftBrace-71|1<<CPP14Parser.Plus-71|1<<CPP14Parser.Minus-71|1<<CPP14Parser.Star-71|1<<CPP14Parser.And-71|1<<CPP14Parser.Or-71|1<<CPP14Parser.Tilde-71|1<<CPP14Parser.Not-71))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=519;this.expressionList();}this.state=522;this.match(CPP14Parser.RightParen);break;case CPP14Parser.LeftBrace:this.state=523;this.bracedInitList();break;default:throw new _antlr.default.error.NoViableAltException(this);}break;case 3:this.state=526;_la=this._input.LA(1);if(!(_la===CPP14Parser.Const_cast||_la===CPP14Parser.Dynamic_cast||_la===CPP14Parser.Reinterpret_cast||_la===CPP14Parser.Static_cast)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=527;this.match(CPP14Parser.Less);this.state=528;this.theTypeId();this.state=529;this.match(CPP14Parser.Greater);this.state=530;this.match(CPP14Parser.LeftParen);this.state=531;this.expression();this.state=532;this.match(CPP14Parser.RightParen);break;case 4:this.state=534;this.typeIdOfTheTypeId();this.state=535;this.match(CPP14Parser.LeftParen);this.state=538;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,29,this._ctx);switch(la_){case 1:this.state=536;this.expression();break;case 2:this.state=537;this.theTypeId();break;}this.state=540;this.match(CPP14Parser.RightParen);break;}this._ctx.stop=this._input.LT(-1);this.state=571;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,36,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;this.state=569;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,35,this._ctx);switch(la_){case 1:localctx=new PostfixExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,CPP14Parser.RULE_postfixExpression);this.state=544;if(!this.precpred(this._ctx,7)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 7)");}this.state=545;this.match(CPP14Parser.LeftBracket);this.state=548;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.IntegerLiteral:case CPP14Parser.CharacterLiteral:case CPP14Parser.FloatingLiteral:case CPP14Parser.StringLiteral:case CPP14Parser.BooleanLiteral:case CPP14Parser.PointerLiteral:case CPP14Parser.UserDefinedLiteral:case CPP14Parser.Alignof:case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Const_cast:case CPP14Parser.Decltype:case CPP14Parser.Delete:case CPP14Parser.Double:case CPP14Parser.Dynamic_cast:case CPP14Parser.Float:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.New:case CPP14Parser.Noexcept:case CPP14Parser.Operator:case CPP14Parser.Reinterpret_cast:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Sizeof:case CPP14Parser.Static_cast:case CPP14Parser.This:case CPP14Parser.Throw:case CPP14Parser.Typeid_:case CPP14Parser.Typename_:case CPP14Parser.Unsigned:case CPP14Parser.Void:case CPP14Parser.Wchar:case CPP14Parser.LeftParen:case CPP14Parser.LeftBracket:case CPP14Parser.Plus:case CPP14Parser.Minus:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.Or:case CPP14Parser.Tilde:case CPP14Parser.Not:case CPP14Parser.PlusPlus:case CPP14Parser.MinusMinus:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.state=546;this.expression();break;case CPP14Parser.LeftBrace:this.state=547;this.bracedInitList();break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=550;this.match(CPP14Parser.RightBracket);break;case 2:localctx=new PostfixExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,CPP14Parser.RULE_postfixExpression);this.state=552;if(!this.precpred(this._ctx,6)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 6)");}this.state=553;this.match(CPP14Parser.LeftParen);this.state=555;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-71&~0x1f)==0&&(1<<_la-71&(1<<CPP14Parser.Throw-71|1<<CPP14Parser.Typeid_-71|1<<CPP14Parser.Typename_-71|1<<CPP14Parser.Unsigned-71|1<<CPP14Parser.Void-71|1<<CPP14Parser.Wchar-71|1<<CPP14Parser.LeftParen-71|1<<CPP14Parser.LeftBracket-71|1<<CPP14Parser.LeftBrace-71|1<<CPP14Parser.Plus-71|1<<CPP14Parser.Minus-71|1<<CPP14Parser.Star-71|1<<CPP14Parser.And-71|1<<CPP14Parser.Or-71|1<<CPP14Parser.Tilde-71|1<<CPP14Parser.Not-71))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=554;this.expressionList();}this.state=557;this.match(CPP14Parser.RightParen);break;case 3:localctx=new PostfixExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,CPP14Parser.RULE_postfixExpression);this.state=558;if(!this.precpred(this._ctx,4)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 4)");}this.state=559;_la=this._input.LA(1);if(!(_la===CPP14Parser.Arrow||_la===CPP14Parser.Dot)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=565;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,34,this._ctx);switch(la_){case 1:this.state=561;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Template){this.state=560;this.match(CPP14Parser.Template);}this.state=563;this.idExpression();break;case 2:this.state=564;this.pseudoDestructorName();break;}break;case 4:localctx=new PostfixExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,CPP14Parser.RULE_postfixExpression);this.state=567;if(!this.precpred(this._ctx,3)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 3)");}this.state=568;_la=this._input.LA(1);if(!(_la===CPP14Parser.PlusPlus||_la===CPP14Parser.MinusMinus)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}break;}}this.state=573;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,36,this._ctx);}}catch(error){if(error instanceof _antlr.default.error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}typeIdOfTheTypeId(){let localctx=new TypeIdOfTheTypeIdContext(this,this._ctx,this.state);this.enterRule(localctx,32,CPP14Parser.RULE_typeIdOfTheTypeId);try{this.enterOuterAlt(localctx,1);this.state=574;this.match(CPP14Parser.Typeid_);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}expressionList(){let localctx=new ExpressionListContext(this,this._ctx,this.state);this.enterRule(localctx,34,CPP14Parser.RULE_expressionList);try{this.enterOuterAlt(localctx,1);this.state=576;this.initializerList();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}pseudoDestructorName(){let localctx=new PseudoDestructorNameContext(this,this._ctx,this.state);this.enterRule(localctx,36,CPP14Parser.RULE_pseudoDestructorName);var _la=0;// Token type
try{this.state=597;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,39,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=579;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,37,this._ctx);if(la_===1){this.state=578;this.nestedNameSpecifier(0);}this.state=584;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Identifier){this.state=581;this.theTypeName();this.state=582;this.match(CPP14Parser.Doublecolon);}this.state=586;this.match(CPP14Parser.Tilde);this.state=587;this.theTypeName();break;case 2:this.enterOuterAlt(localctx,2);this.state=588;this.nestedNameSpecifier(0);this.state=589;this.match(CPP14Parser.Template);this.state=590;this.simpleTemplateId();this.state=591;this.match(CPP14Parser.Doublecolon);this.state=592;this.match(CPP14Parser.Tilde);this.state=593;this.theTypeName();break;case 3:this.enterOuterAlt(localctx,3);this.state=595;this.match(CPP14Parser.Tilde);this.state=596;this.decltypeSpecifier();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}unaryExpression(){let localctx=new UnaryExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,38,CPP14Parser.RULE_unaryExpression);try{this.state=626;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,42,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=599;this.postfixExpression(0);break;case 2:this.enterOuterAlt(localctx,2);this.state=604;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.PlusPlus:this.state=600;this.match(CPP14Parser.PlusPlus);break;case CPP14Parser.MinusMinus:this.state=601;this.match(CPP14Parser.MinusMinus);break;case CPP14Parser.Plus:case CPP14Parser.Minus:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.Or:case CPP14Parser.Tilde:case CPP14Parser.Not:this.state=602;this.unaryOperator();break;case CPP14Parser.Sizeof:this.state=603;this.match(CPP14Parser.Sizeof);break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=606;this.unaryExpression();break;case 3:this.enterOuterAlt(localctx,3);this.state=607;this.match(CPP14Parser.Sizeof);this.state=616;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftParen:this.state=608;this.match(CPP14Parser.LeftParen);this.state=609;this.theTypeId();this.state=610;this.match(CPP14Parser.RightParen);break;case CPP14Parser.Ellipsis:this.state=612;this.match(CPP14Parser.Ellipsis);this.state=613;this.match(CPP14Parser.LeftParen);this.state=614;this.match(CPP14Parser.Identifier);this.state=615;this.match(CPP14Parser.RightParen);break;default:throw new _antlr.default.error.NoViableAltException(this);}break;case 4:this.enterOuterAlt(localctx,4);this.state=618;this.match(CPP14Parser.Alignof);this.state=619;this.match(CPP14Parser.LeftParen);this.state=620;this.theTypeId();this.state=621;this.match(CPP14Parser.RightParen);break;case 5:this.enterOuterAlt(localctx,5);this.state=623;this.noExceptExpression();break;case 6:this.enterOuterAlt(localctx,6);this.state=624;this.newExpression();break;case 7:this.enterOuterAlt(localctx,7);this.state=625;this.deleteExpression();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}unaryOperator(){let localctx=new UnaryOperatorContext(this,this._ctx,this.state);this.enterRule(localctx,40,CPP14Parser.RULE_unaryOperator);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=628;_la=this._input.LA(1);if(!((_la-91&~0x1f)==0&&(1<<_la-91&(1<<CPP14Parser.Plus-91|1<<CPP14Parser.Minus-91|1<<CPP14Parser.Star-91|1<<CPP14Parser.And-91|1<<CPP14Parser.Or-91|1<<CPP14Parser.Tilde-91|1<<CPP14Parser.Not-91))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}newExpression(){let localctx=new NewExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,42,CPP14Parser.RULE_newExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=631;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Doublecolon){this.state=630;this.match(CPP14Parser.Doublecolon);}this.state=633;this.match(CPP14Parser.New);this.state=635;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,44,this._ctx);if(la_===1){this.state=634;this.newPlacement();}this.state=642;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Class:case CPP14Parser.Const:case CPP14Parser.Decltype:case CPP14Parser.Double:case CPP14Parser.Enum:case CPP14Parser.Float:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Struct:case CPP14Parser.Typename_:case CPP14Parser.Union:case CPP14Parser.Unsigned:case CPP14Parser.Void:case CPP14Parser.Volatile:case CPP14Parser.Wchar:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.state=637;this.newTypeId();break;case CPP14Parser.LeftParen:this.state=638;this.match(CPP14Parser.LeftParen);this.state=639;this.theTypeId();this.state=640;this.match(CPP14Parser.RightParen);break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=645;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.LeftParen||_la===CPP14Parser.LeftBrace){this.state=644;this.newInitializer();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}newPlacement(){let localctx=new NewPlacementContext(this,this._ctx,this.state);this.enterRule(localctx,44,CPP14Parser.RULE_newPlacement);try{this.enterOuterAlt(localctx,1);this.state=647;this.match(CPP14Parser.LeftParen);this.state=648;this.expressionList();this.state=649;this.match(CPP14Parser.RightParen);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}newTypeId(){let localctx=new NewTypeIdContext(this,this._ctx,this.state);this.enterRule(localctx,46,CPP14Parser.RULE_newTypeId);try{this.enterOuterAlt(localctx,1);this.state=651;this.typeSpecifierSeq();this.state=653;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,47,this._ctx);if(la_===1){this.state=652;this.newDeclarator();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}newDeclarator(){let localctx=new NewDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,48,CPP14Parser.RULE_newDeclarator);try{this.state=660;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Decltype:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.AndAnd:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,1);this.state=655;this.pointerOperator();this.state=657;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,48,this._ctx);if(la_===1){this.state=656;this.newDeclarator();}break;case CPP14Parser.LeftBracket:this.enterOuterAlt(localctx,2);this.state=659;this.noPointerNewDeclarator(0);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}noPointerNewDeclarator(_p){if(_p===undefined){_p=0;}const _parentctx=this._ctx;const _parentState=this.state;let localctx=new NoPointerNewDeclaratorContext(this,this._ctx,_parentState);let _prevctx=localctx;const _startState=50;this.enterRecursionRule(localctx,50,CPP14Parser.RULE_noPointerNewDeclarator,_p);try{this.enterOuterAlt(localctx,1);this.state=663;this.match(CPP14Parser.LeftBracket);this.state=664;this.expression();this.state=665;this.match(CPP14Parser.RightBracket);this.state=667;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,50,this._ctx);if(la_===1){this.state=666;this.attributeSpecifierSeq();}this._ctx.stop=this._input.LT(-1);this.state=678;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,52,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new NoPointerNewDeclaratorContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,CPP14Parser.RULE_noPointerNewDeclarator);this.state=669;if(!this.precpred(this._ctx,1)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 1)");}this.state=670;this.match(CPP14Parser.LeftBracket);this.state=671;this.constantExpression();this.state=672;this.match(CPP14Parser.RightBracket);this.state=674;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,51,this._ctx);if(la_===1){this.state=673;this.attributeSpecifierSeq();}}this.state=680;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,52,this._ctx);}}catch(error){if(error instanceof _antlr.default.error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}newInitializer(){let localctx=new NewInitializerContext(this,this._ctx,this.state);this.enterRule(localctx,52,CPP14Parser.RULE_newInitializer);var _la=0;// Token type
try{this.state=687;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftParen:this.enterOuterAlt(localctx,1);this.state=681;this.match(CPP14Parser.LeftParen);this.state=683;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-71&~0x1f)==0&&(1<<_la-71&(1<<CPP14Parser.Throw-71|1<<CPP14Parser.Typeid_-71|1<<CPP14Parser.Typename_-71|1<<CPP14Parser.Unsigned-71|1<<CPP14Parser.Void-71|1<<CPP14Parser.Wchar-71|1<<CPP14Parser.LeftParen-71|1<<CPP14Parser.LeftBracket-71|1<<CPP14Parser.LeftBrace-71|1<<CPP14Parser.Plus-71|1<<CPP14Parser.Minus-71|1<<CPP14Parser.Star-71|1<<CPP14Parser.And-71|1<<CPP14Parser.Or-71|1<<CPP14Parser.Tilde-71|1<<CPP14Parser.Not-71))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=682;this.expressionList();}this.state=685;this.match(CPP14Parser.RightParen);break;case CPP14Parser.LeftBrace:this.enterOuterAlt(localctx,2);this.state=686;this.bracedInitList();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}deleteExpression(){let localctx=new DeleteExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,54,CPP14Parser.RULE_deleteExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=690;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Doublecolon){this.state=689;this.match(CPP14Parser.Doublecolon);}this.state=692;this.match(CPP14Parser.Delete);this.state=695;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,56,this._ctx);if(la_===1){this.state=693;this.match(CPP14Parser.LeftBracket);this.state=694;this.match(CPP14Parser.RightBracket);}this.state=697;this.castExpression();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}noExceptExpression(){let localctx=new NoExceptExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,56,CPP14Parser.RULE_noExceptExpression);try{this.enterOuterAlt(localctx,1);this.state=699;this.match(CPP14Parser.Noexcept);this.state=700;this.match(CPP14Parser.LeftParen);this.state=701;this.expression();this.state=702;this.match(CPP14Parser.RightParen);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}castExpression(){let localctx=new CastExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,58,CPP14Parser.RULE_castExpression);try{this.state=710;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,57,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=704;this.unaryExpression();break;case 2:this.enterOuterAlt(localctx,2);this.state=705;this.match(CPP14Parser.LeftParen);this.state=706;this.theTypeId();this.state=707;this.match(CPP14Parser.RightParen);this.state=708;this.castExpression();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}pointerMemberExpression(){let localctx=new PointerMemberExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,60,CPP14Parser.RULE_pointerMemberExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=712;this.castExpression();this.state=717;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.ArrowStar||_la===CPP14Parser.DotStar){this.state=713;_la=this._input.LA(1);if(!(_la===CPP14Parser.ArrowStar||_la===CPP14Parser.DotStar)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=714;this.castExpression();this.state=719;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}multiplicativeExpression(){let localctx=new MultiplicativeExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,62,CPP14Parser.RULE_multiplicativeExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=720;this.pointerMemberExpression();this.state=725;this._errHandler.sync(this);_la=this._input.LA(1);while((_la-93&~0x1f)==0&&(1<<_la-93&(1<<CPP14Parser.Star-93|1<<CPP14Parser.Div-93|1<<CPP14Parser.Mod-93))!==0){this.state=721;_la=this._input.LA(1);if(!((_la-93&~0x1f)==0&&(1<<_la-93&(1<<CPP14Parser.Star-93|1<<CPP14Parser.Div-93|1<<CPP14Parser.Mod-93))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=722;this.pointerMemberExpression();this.state=727;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}additiveExpression(){let localctx=new AdditiveExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,64,CPP14Parser.RULE_additiveExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=728;this.multiplicativeExpression();this.state=733;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Plus||_la===CPP14Parser.Minus){this.state=729;_la=this._input.LA(1);if(!(_la===CPP14Parser.Plus||_la===CPP14Parser.Minus)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=730;this.multiplicativeExpression();this.state=735;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}shiftExpression(){let localctx=new ShiftExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,66,CPP14Parser.RULE_shiftExpression);try{this.enterOuterAlt(localctx,1);this.state=736;this.additiveExpression();this.state=742;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,61,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=737;this.shiftOperator();this.state=738;this.additiveExpression();}this.state=744;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,61,this._ctx);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}shiftOperator(){let localctx=new ShiftOperatorContext(this,this._ctx,this.state);this.enterRule(localctx,68,CPP14Parser.RULE_shiftOperator);try{this.state=749;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Greater:this.enterOuterAlt(localctx,1);this.state=745;this.match(CPP14Parser.Greater);this.state=746;this.match(CPP14Parser.Greater);break;case CPP14Parser.Less:this.enterOuterAlt(localctx,2);this.state=747;this.match(CPP14Parser.Less);this.state=748;this.match(CPP14Parser.Less);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}relationalExpression(){let localctx=new RelationalExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,70,CPP14Parser.RULE_relationalExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=751;this.shiftExpression();this.state=756;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,63,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=752;_la=this._input.LA(1);if(!((_la-102&~0x1f)==0&&(1<<_la-102&(1<<CPP14Parser.Less-102|1<<CPP14Parser.Greater-102|1<<CPP14Parser.LessEqual-102|1<<CPP14Parser.GreaterEqual-102))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=753;this.shiftExpression();}this.state=758;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,63,this._ctx);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}equalityExpression(){let localctx=new EqualityExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,72,CPP14Parser.RULE_equalityExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=759;this.relationalExpression();this.state=764;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Equal||_la===CPP14Parser.NotEqual){this.state=760;_la=this._input.LA(1);if(!(_la===CPP14Parser.Equal||_la===CPP14Parser.NotEqual)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=761;this.relationalExpression();this.state=766;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}andExpression(){let localctx=new AndExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,74,CPP14Parser.RULE_andExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=767;this.equalityExpression();this.state=772;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.And){this.state=768;this.match(CPP14Parser.And);this.state=769;this.equalityExpression();this.state=774;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}exclusiveOrExpression(){let localctx=new ExclusiveOrExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,76,CPP14Parser.RULE_exclusiveOrExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=775;this.andExpression();this.state=780;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Caret){this.state=776;this.match(CPP14Parser.Caret);this.state=777;this.andExpression();this.state=782;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}inclusiveOrExpression(){let localctx=new InclusiveOrExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,78,CPP14Parser.RULE_inclusiveOrExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=783;this.exclusiveOrExpression();this.state=788;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Or){this.state=784;this.match(CPP14Parser.Or);this.state=785;this.exclusiveOrExpression();this.state=790;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}logicalAndExpression(){let localctx=new LogicalAndExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,80,CPP14Parser.RULE_logicalAndExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=791;this.inclusiveOrExpression();this.state=796;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.AndAnd){this.state=792;this.match(CPP14Parser.AndAnd);this.state=793;this.inclusiveOrExpression();this.state=798;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}logicalOrExpression(){let localctx=new LogicalOrExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,82,CPP14Parser.RULE_logicalOrExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=799;this.logicalAndExpression();this.state=804;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.OrOr){this.state=800;this.match(CPP14Parser.OrOr);this.state=801;this.logicalAndExpression();this.state=806;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}conditionalExpression(){let localctx=new ConditionalExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,84,CPP14Parser.RULE_conditionalExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=807;this.logicalOrExpression();this.state=813;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Question){this.state=808;this.match(CPP14Parser.Question);this.state=809;this.expression();this.state=810;this.match(CPP14Parser.Colon);this.state=811;this.assignmentExpression();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}assignmentExpression(){let localctx=new AssignmentExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,86,CPP14Parser.RULE_assignmentExpression);try{this.state=821;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,71,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=815;this.conditionalExpression();break;case 2:this.enterOuterAlt(localctx,2);this.state=816;this.logicalOrExpression();this.state=817;this.assignmentOperator();this.state=818;this.initializerClause();break;case 3:this.enterOuterAlt(localctx,3);this.state=820;this.throwExpression();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}assignmentOperator(){let localctx=new AssignmentOperatorContext(this,this._ctx,this.state);this.enterRule(localctx,88,CPP14Parser.RULE_assignmentOperator);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=823;_la=this._input.LA(1);if(!((_la-101&~0x1f)==0&&(1<<_la-101&(1<<CPP14Parser.Assign-101|1<<CPP14Parser.PlusAssign-101|1<<CPP14Parser.MinusAssign-101|1<<CPP14Parser.StarAssign-101|1<<CPP14Parser.DivAssign-101|1<<CPP14Parser.ModAssign-101|1<<CPP14Parser.XorAssign-101|1<<CPP14Parser.AndAssign-101|1<<CPP14Parser.OrAssign-101|1<<CPP14Parser.LeftShiftAssign-101|1<<CPP14Parser.RightShiftAssign-101))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}expression(){let localctx=new ExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,90,CPP14Parser.RULE_expression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=825;this.assignmentExpression();this.state=830;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Comma){this.state=826;this.match(CPP14Parser.Comma);this.state=827;this.assignmentExpression();this.state=832;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}constantExpression(){let localctx=new ConstantExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,92,CPP14Parser.RULE_constantExpression);try{this.enterOuterAlt(localctx,1);this.state=833;this.conditionalExpression();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}statement(){let localctx=new StatementContext(this,this._ctx,this.state);this.enterRule(localctx,94,CPP14Parser.RULE_statement);try{this.state=848;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,75,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=835;this.labeledStatement();break;case 2:this.enterOuterAlt(localctx,2);this.state=836;this.declarationStatement();break;case 3:this.enterOuterAlt(localctx,3);this.state=838;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,73,this._ctx);if(la_===1){this.state=837;this.attributeSpecifierSeq();}this.state=846;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.IntegerLiteral:case CPP14Parser.CharacterLiteral:case CPP14Parser.FloatingLiteral:case CPP14Parser.StringLiteral:case CPP14Parser.BooleanLiteral:case CPP14Parser.PointerLiteral:case CPP14Parser.UserDefinedLiteral:case CPP14Parser.Alignof:case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Const_cast:case CPP14Parser.Decltype:case CPP14Parser.Delete:case CPP14Parser.Double:case CPP14Parser.Dynamic_cast:case CPP14Parser.Float:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.New:case CPP14Parser.Noexcept:case CPP14Parser.Operator:case CPP14Parser.Reinterpret_cast:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Sizeof:case CPP14Parser.Static_cast:case CPP14Parser.This:case CPP14Parser.Throw:case CPP14Parser.Typeid_:case CPP14Parser.Typename_:case CPP14Parser.Unsigned:case CPP14Parser.Void:case CPP14Parser.Wchar:case CPP14Parser.LeftParen:case CPP14Parser.LeftBracket:case CPP14Parser.Plus:case CPP14Parser.Minus:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.Or:case CPP14Parser.Tilde:case CPP14Parser.Not:case CPP14Parser.PlusPlus:case CPP14Parser.MinusMinus:case CPP14Parser.Doublecolon:case CPP14Parser.Semi:case CPP14Parser.Identifier:this.state=840;this.expressionStatement();break;case CPP14Parser.LeftBrace:this.state=841;this.compoundStatement();break;case CPP14Parser.If:case CPP14Parser.Switch:this.state=842;this.selectionStatement();break;case CPP14Parser.Do:case CPP14Parser.For:case CPP14Parser.While:this.state=843;this.iterationStatement();break;case CPP14Parser.Break:case CPP14Parser.Continue:case CPP14Parser.Goto:case CPP14Parser.Return:this.state=844;this.jumpStatement();break;case CPP14Parser.Try:this.state=845;this.tryBlock();break;default:throw new _antlr.default.error.NoViableAltException(this);}break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}labeledStatement(){let localctx=new LabeledStatementContext(this,this._ctx,this.state);this.enterRule(localctx,96,CPP14Parser.RULE_labeledStatement);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=851;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=850;this.attributeSpecifierSeq();}this.state=857;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Identifier:this.state=853;this.match(CPP14Parser.Identifier);break;case CPP14Parser.Case:this.state=854;this.match(CPP14Parser.Case);this.state=855;this.constantExpression();break;case CPP14Parser.Default:this.state=856;this.match(CPP14Parser.Default);break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=859;this.match(CPP14Parser.Colon);this.state=860;this.statement();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}expressionStatement(){let localctx=new ExpressionStatementContext(this,this._ctx,this.state);this.enterRule(localctx,98,CPP14Parser.RULE_expressionStatement);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=863;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-71&~0x1f)==0&&(1<<_la-71&(1<<CPP14Parser.Throw-71|1<<CPP14Parser.Typeid_-71|1<<CPP14Parser.Typename_-71|1<<CPP14Parser.Unsigned-71|1<<CPP14Parser.Void-71|1<<CPP14Parser.Wchar-71|1<<CPP14Parser.LeftParen-71|1<<CPP14Parser.LeftBracket-71|1<<CPP14Parser.Plus-71|1<<CPP14Parser.Minus-71|1<<CPP14Parser.Star-71|1<<CPP14Parser.And-71|1<<CPP14Parser.Or-71|1<<CPP14Parser.Tilde-71|1<<CPP14Parser.Not-71))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=862;this.expression();}this.state=865;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}compoundStatement(){let localctx=new CompoundStatementContext(this,this._ctx,this.state);this.enterRule(localctx,100,CPP14Parser.RULE_compoundStatement);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=867;this.match(CPP14Parser.LeftBrace);this.state=869;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignas|1<<CPP14Parser.Alignof|1<<CPP14Parser.Asm|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Break|1<<CPP14Parser.Case|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Class|1<<CPP14Parser.Const|1<<CPP14Parser.Constexpr|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Continue|1<<CPP14Parser.Decltype|1<<CPP14Parser.Default|1<<CPP14Parser.Delete|1<<CPP14Parser.Do|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<CPP14Parser.Enum-33|1<<CPP14Parser.Explicit-33|1<<CPP14Parser.Extern-33|1<<CPP14Parser.Float-33|1<<CPP14Parser.For-33|1<<CPP14Parser.Friend-33|1<<CPP14Parser.Goto-33|1<<CPP14Parser.If-33|1<<CPP14Parser.Inline-33|1<<CPP14Parser.Int-33|1<<CPP14Parser.Long-33|1<<CPP14Parser.Mutable-33|1<<CPP14Parser.Namespace-33|1<<CPP14Parser.New-33|1<<CPP14Parser.Noexcept-33|1<<CPP14Parser.Operator-33|1<<CPP14Parser.Register-33|1<<CPP14Parser.Reinterpret_cast-33|1<<CPP14Parser.Return-33|1<<CPP14Parser.Short-33|1<<CPP14Parser.Signed-33|1<<CPP14Parser.Sizeof-33|1<<CPP14Parser.Static-33|1<<CPP14Parser.Static_assert-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<CPP14Parser.Static_cast-65|1<<CPP14Parser.Struct-65|1<<CPP14Parser.Switch-65|1<<CPP14Parser.This-65|1<<CPP14Parser.Thread_local-65|1<<CPP14Parser.Throw-65|1<<CPP14Parser.Try-65|1<<CPP14Parser.Typedef-65|1<<CPP14Parser.Typeid_-65|1<<CPP14Parser.Typename_-65|1<<CPP14Parser.Union-65|1<<CPP14Parser.Unsigned-65|1<<CPP14Parser.Using-65|1<<CPP14Parser.Virtual-65|1<<CPP14Parser.Void-65|1<<CPP14Parser.Volatile-65|1<<CPP14Parser.Wchar-65|1<<CPP14Parser.While-65|1<<CPP14Parser.LeftParen-65|1<<CPP14Parser.LeftBracket-65|1<<CPP14Parser.LeftBrace-65|1<<CPP14Parser.Plus-65|1<<CPP14Parser.Minus-65|1<<CPP14Parser.Star-65))!==0||(_la-97&~0x1f)==0&&(1<<_la-97&(1<<CPP14Parser.And-97|1<<CPP14Parser.Or-97|1<<CPP14Parser.Tilde-97|1<<CPP14Parser.Not-97|1<<CPP14Parser.AndAnd-97|1<<CPP14Parser.PlusPlus-97|1<<CPP14Parser.MinusMinus-97|1<<CPP14Parser.Doublecolon-97|1<<CPP14Parser.Semi-97))!==0||_la===CPP14Parser.Ellipsis||_la===CPP14Parser.Identifier){this.state=868;this.statementSeq();}this.state=871;this.match(CPP14Parser.RightBrace);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}statementSeq(){let localctx=new StatementSeqContext(this,this._ctx,this.state);this.enterRule(localctx,102,CPP14Parser.RULE_statementSeq);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=874;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=873;this.statement();this.state=876;this._errHandler.sync(this);_la=this._input.LA(1);}while((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignas|1<<CPP14Parser.Alignof|1<<CPP14Parser.Asm|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Break|1<<CPP14Parser.Case|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Class|1<<CPP14Parser.Const|1<<CPP14Parser.Constexpr|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Continue|1<<CPP14Parser.Decltype|1<<CPP14Parser.Default|1<<CPP14Parser.Delete|1<<CPP14Parser.Do|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<CPP14Parser.Enum-33|1<<CPP14Parser.Explicit-33|1<<CPP14Parser.Extern-33|1<<CPP14Parser.Float-33|1<<CPP14Parser.For-33|1<<CPP14Parser.Friend-33|1<<CPP14Parser.Goto-33|1<<CPP14Parser.If-33|1<<CPP14Parser.Inline-33|1<<CPP14Parser.Int-33|1<<CPP14Parser.Long-33|1<<CPP14Parser.Mutable-33|1<<CPP14Parser.Namespace-33|1<<CPP14Parser.New-33|1<<CPP14Parser.Noexcept-33|1<<CPP14Parser.Operator-33|1<<CPP14Parser.Register-33|1<<CPP14Parser.Reinterpret_cast-33|1<<CPP14Parser.Return-33|1<<CPP14Parser.Short-33|1<<CPP14Parser.Signed-33|1<<CPP14Parser.Sizeof-33|1<<CPP14Parser.Static-33|1<<CPP14Parser.Static_assert-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<CPP14Parser.Static_cast-65|1<<CPP14Parser.Struct-65|1<<CPP14Parser.Switch-65|1<<CPP14Parser.This-65|1<<CPP14Parser.Thread_local-65|1<<CPP14Parser.Throw-65|1<<CPP14Parser.Try-65|1<<CPP14Parser.Typedef-65|1<<CPP14Parser.Typeid_-65|1<<CPP14Parser.Typename_-65|1<<CPP14Parser.Union-65|1<<CPP14Parser.Unsigned-65|1<<CPP14Parser.Using-65|1<<CPP14Parser.Virtual-65|1<<CPP14Parser.Void-65|1<<CPP14Parser.Volatile-65|1<<CPP14Parser.Wchar-65|1<<CPP14Parser.While-65|1<<CPP14Parser.LeftParen-65|1<<CPP14Parser.LeftBracket-65|1<<CPP14Parser.LeftBrace-65|1<<CPP14Parser.Plus-65|1<<CPP14Parser.Minus-65|1<<CPP14Parser.Star-65))!==0||(_la-97&~0x1f)==0&&(1<<_la-97&(1<<CPP14Parser.And-97|1<<CPP14Parser.Or-97|1<<CPP14Parser.Tilde-97|1<<CPP14Parser.Not-97|1<<CPP14Parser.AndAnd-97|1<<CPP14Parser.PlusPlus-97|1<<CPP14Parser.MinusMinus-97|1<<CPP14Parser.Doublecolon-97|1<<CPP14Parser.Semi-97))!==0||_la===CPP14Parser.Ellipsis||_la===CPP14Parser.Identifier);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}selectionStatement(){let localctx=new SelectionStatementContext(this,this._ctx,this.state);this.enterRule(localctx,104,CPP14Parser.RULE_selectionStatement);try{this.state=893;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.If:this.enterOuterAlt(localctx,1);this.state=878;this.match(CPP14Parser.If);this.state=879;this.match(CPP14Parser.LeftParen);this.state=880;this.condition();this.state=881;this.match(CPP14Parser.RightParen);this.state=882;this.statement();this.state=885;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,81,this._ctx);if(la_===1){this.state=883;this.match(CPP14Parser.Else);this.state=884;this.statement();}break;case CPP14Parser.Switch:this.enterOuterAlt(localctx,2);this.state=887;this.match(CPP14Parser.Switch);this.state=888;this.match(CPP14Parser.LeftParen);this.state=889;this.condition();this.state=890;this.match(CPP14Parser.RightParen);this.state=891;this.statement();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}condition(){let localctx=new ConditionContext(this,this._ctx,this.state);this.enterRule(localctx,106,CPP14Parser.RULE_condition);var _la=0;// Token type
try{this.state=906;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,85,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=895;this.expression();break;case 2:this.enterOuterAlt(localctx,2);this.state=897;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=896;this.attributeSpecifierSeq();}this.state=899;this.declSpecifierSeq();this.state=900;this.declarator();this.state=904;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Assign:this.state=901;this.match(CPP14Parser.Assign);this.state=902;this.initializerClause();break;case CPP14Parser.LeftBrace:this.state=903;this.bracedInitList();break;default:throw new _antlr.default.error.NoViableAltException(this);}break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}iterationStatement(){let localctx=new IterationStatementContext(this,this._ctx,this.state);this.enterRule(localctx,108,CPP14Parser.RULE_iterationStatement);var _la=0;// Token type
try{this.state=941;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.While:this.enterOuterAlt(localctx,1);this.state=908;this.match(CPP14Parser.While);this.state=909;this.match(CPP14Parser.LeftParen);this.state=910;this.condition();this.state=911;this.match(CPP14Parser.RightParen);this.state=912;this.statement();break;case CPP14Parser.Do:this.enterOuterAlt(localctx,2);this.state=914;this.match(CPP14Parser.Do);this.state=915;this.statement();this.state=916;this.match(CPP14Parser.While);this.state=917;this.match(CPP14Parser.LeftParen);this.state=918;this.expression();this.state=919;this.match(CPP14Parser.RightParen);this.state=920;this.match(CPP14Parser.Semi);break;case CPP14Parser.For:this.enterOuterAlt(localctx,3);this.state=922;this.match(CPP14Parser.For);this.state=923;this.match(CPP14Parser.LeftParen);this.state=936;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,88,this._ctx);switch(la_){case 1:this.state=924;this.forInitStatement();this.state=926;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignas|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Class|1<<CPP14Parser.Const|1<<CPP14Parser.Constexpr|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<CPP14Parser.Enum-33|1<<CPP14Parser.Explicit-33|1<<CPP14Parser.Extern-33|1<<CPP14Parser.Float-33|1<<CPP14Parser.Friend-33|1<<CPP14Parser.Inline-33|1<<CPP14Parser.Int-33|1<<CPP14Parser.Long-33|1<<CPP14Parser.Mutable-33|1<<CPP14Parser.New-33|1<<CPP14Parser.Noexcept-33|1<<CPP14Parser.Operator-33|1<<CPP14Parser.Register-33|1<<CPP14Parser.Reinterpret_cast-33|1<<CPP14Parser.Short-33|1<<CPP14Parser.Signed-33|1<<CPP14Parser.Sizeof-33|1<<CPP14Parser.Static-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<CPP14Parser.Static_cast-65|1<<CPP14Parser.Struct-65|1<<CPP14Parser.This-65|1<<CPP14Parser.Thread_local-65|1<<CPP14Parser.Throw-65|1<<CPP14Parser.Typedef-65|1<<CPP14Parser.Typeid_-65|1<<CPP14Parser.Typename_-65|1<<CPP14Parser.Union-65|1<<CPP14Parser.Unsigned-65|1<<CPP14Parser.Virtual-65|1<<CPP14Parser.Void-65|1<<CPP14Parser.Volatile-65|1<<CPP14Parser.Wchar-65|1<<CPP14Parser.LeftParen-65|1<<CPP14Parser.LeftBracket-65|1<<CPP14Parser.Plus-65|1<<CPP14Parser.Minus-65|1<<CPP14Parser.Star-65))!==0||(_la-97&~0x1f)==0&&(1<<_la-97&(1<<CPP14Parser.And-97|1<<CPP14Parser.Or-97|1<<CPP14Parser.Tilde-97|1<<CPP14Parser.Not-97|1<<CPP14Parser.PlusPlus-97|1<<CPP14Parser.MinusMinus-97|1<<CPP14Parser.Doublecolon-97))!==0||_la===CPP14Parser.Identifier){this.state=925;this.condition();}this.state=928;this.match(CPP14Parser.Semi);this.state=930;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-71&~0x1f)==0&&(1<<_la-71&(1<<CPP14Parser.Throw-71|1<<CPP14Parser.Typeid_-71|1<<CPP14Parser.Typename_-71|1<<CPP14Parser.Unsigned-71|1<<CPP14Parser.Void-71|1<<CPP14Parser.Wchar-71|1<<CPP14Parser.LeftParen-71|1<<CPP14Parser.LeftBracket-71|1<<CPP14Parser.Plus-71|1<<CPP14Parser.Minus-71|1<<CPP14Parser.Star-71|1<<CPP14Parser.And-71|1<<CPP14Parser.Or-71|1<<CPP14Parser.Tilde-71|1<<CPP14Parser.Not-71))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=929;this.expression();}break;case 2:this.state=932;this.forRangeDeclaration();this.state=933;this.match(CPP14Parser.Colon);this.state=934;this.forRangeInitializer();break;}this.state=938;this.match(CPP14Parser.RightParen);this.state=939;this.statement();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}forInitStatement(){let localctx=new ForInitStatementContext(this,this._ctx,this.state);this.enterRule(localctx,110,CPP14Parser.RULE_forInitStatement);try{this.state=945;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,90,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=943;this.expressionStatement();break;case 2:this.enterOuterAlt(localctx,2);this.state=944;this.simpleDeclaration();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}forRangeDeclaration(){let localctx=new ForRangeDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,112,CPP14Parser.RULE_forRangeDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=948;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=947;this.attributeSpecifierSeq();}this.state=950;this.declSpecifierSeq();this.state=951;this.declarator();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}forRangeInitializer(){let localctx=new ForRangeInitializerContext(this,this._ctx,this.state);this.enterRule(localctx,114,CPP14Parser.RULE_forRangeInitializer);try{this.state=955;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.IntegerLiteral:case CPP14Parser.CharacterLiteral:case CPP14Parser.FloatingLiteral:case CPP14Parser.StringLiteral:case CPP14Parser.BooleanLiteral:case CPP14Parser.PointerLiteral:case CPP14Parser.UserDefinedLiteral:case CPP14Parser.Alignof:case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Const_cast:case CPP14Parser.Decltype:case CPP14Parser.Delete:case CPP14Parser.Double:case CPP14Parser.Dynamic_cast:case CPP14Parser.Float:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.New:case CPP14Parser.Noexcept:case CPP14Parser.Operator:case CPP14Parser.Reinterpret_cast:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Sizeof:case CPP14Parser.Static_cast:case CPP14Parser.This:case CPP14Parser.Throw:case CPP14Parser.Typeid_:case CPP14Parser.Typename_:case CPP14Parser.Unsigned:case CPP14Parser.Void:case CPP14Parser.Wchar:case CPP14Parser.LeftParen:case CPP14Parser.LeftBracket:case CPP14Parser.Plus:case CPP14Parser.Minus:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.Or:case CPP14Parser.Tilde:case CPP14Parser.Not:case CPP14Parser.PlusPlus:case CPP14Parser.MinusMinus:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,1);this.state=953;this.expression();break;case CPP14Parser.LeftBrace:this.enterOuterAlt(localctx,2);this.state=954;this.bracedInitList();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}jumpStatement(){let localctx=new JumpStatementContext(this,this._ctx,this.state);this.enterRule(localctx,116,CPP14Parser.RULE_jumpStatement);try{this.enterOuterAlt(localctx,1);this.state=966;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Break:this.state=957;this.match(CPP14Parser.Break);break;case CPP14Parser.Continue:this.state=958;this.match(CPP14Parser.Continue);break;case CPP14Parser.Return:this.state=959;this.match(CPP14Parser.Return);this.state=962;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.IntegerLiteral:case CPP14Parser.CharacterLiteral:case CPP14Parser.FloatingLiteral:case CPP14Parser.StringLiteral:case CPP14Parser.BooleanLiteral:case CPP14Parser.PointerLiteral:case CPP14Parser.UserDefinedLiteral:case CPP14Parser.Alignof:case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Const_cast:case CPP14Parser.Decltype:case CPP14Parser.Delete:case CPP14Parser.Double:case CPP14Parser.Dynamic_cast:case CPP14Parser.Float:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.New:case CPP14Parser.Noexcept:case CPP14Parser.Operator:case CPP14Parser.Reinterpret_cast:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Sizeof:case CPP14Parser.Static_cast:case CPP14Parser.This:case CPP14Parser.Throw:case CPP14Parser.Typeid_:case CPP14Parser.Typename_:case CPP14Parser.Unsigned:case CPP14Parser.Void:case CPP14Parser.Wchar:case CPP14Parser.LeftParen:case CPP14Parser.LeftBracket:case CPP14Parser.Plus:case CPP14Parser.Minus:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.Or:case CPP14Parser.Tilde:case CPP14Parser.Not:case CPP14Parser.PlusPlus:case CPP14Parser.MinusMinus:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.state=960;this.expression();break;case CPP14Parser.LeftBrace:this.state=961;this.bracedInitList();break;case CPP14Parser.Semi:break;default:break;}break;case CPP14Parser.Goto:this.state=964;this.match(CPP14Parser.Goto);this.state=965;this.match(CPP14Parser.Identifier);break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=968;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}declarationStatement(){let localctx=new DeclarationStatementContext(this,this._ctx,this.state);this.enterRule(localctx,118,CPP14Parser.RULE_declarationStatement);try{this.enterOuterAlt(localctx,1);this.state=970;this.blockDeclaration();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}declarationseq(){let localctx=new DeclarationseqContext(this,this._ctx,this.state);this.enterRule(localctx,120,CPP14Parser.RULE_declarationseq);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=973;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=972;this.declaration();this.state=975;this._errHandler.sync(this);_la=this._input.LA(1);}while((_la-10&~0x1f)==0&&(1<<_la-10&(1<<CPP14Parser.Alignas-10|1<<CPP14Parser.Asm-10|1<<CPP14Parser.Auto-10|1<<CPP14Parser.Bool-10|1<<CPP14Parser.Char-10|1<<CPP14Parser.Char16-10|1<<CPP14Parser.Char32-10|1<<CPP14Parser.Class-10|1<<CPP14Parser.Const-10|1<<CPP14Parser.Constexpr-10|1<<CPP14Parser.Decltype-10|1<<CPP14Parser.Double-10|1<<CPP14Parser.Enum-10|1<<CPP14Parser.Explicit-10|1<<CPP14Parser.Extern-10|1<<CPP14Parser.Float-10|1<<CPP14Parser.Friend-10))!==0||(_la-44&~0x1f)==0&&(1<<_la-44&(1<<CPP14Parser.Inline-44|1<<CPP14Parser.Int-44|1<<CPP14Parser.Long-44|1<<CPP14Parser.Mutable-44|1<<CPP14Parser.Namespace-44|1<<CPP14Parser.Operator-44|1<<CPP14Parser.Register-44|1<<CPP14Parser.Short-44|1<<CPP14Parser.Signed-44|1<<CPP14Parser.Static-44|1<<CPP14Parser.Static_assert-44|1<<CPP14Parser.Struct-44|1<<CPP14Parser.Template-44|1<<CPP14Parser.Thread_local-44|1<<CPP14Parser.Typedef-44))!==0||(_la-76&~0x1f)==0&&(1<<_la-76&(1<<CPP14Parser.Typename_-76|1<<CPP14Parser.Union-76|1<<CPP14Parser.Unsigned-76|1<<CPP14Parser.Using-76|1<<CPP14Parser.Virtual-76|1<<CPP14Parser.Void-76|1<<CPP14Parser.Volatile-76|1<<CPP14Parser.Wchar-76|1<<CPP14Parser.LeftParen-76|1<<CPP14Parser.LeftBracket-76|1<<CPP14Parser.Star-76|1<<CPP14Parser.And-76|1<<CPP14Parser.Tilde-76))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CPP14Parser.AndAnd-118|1<<CPP14Parser.Doublecolon-118|1<<CPP14Parser.Semi-118|1<<CPP14Parser.Ellipsis-118|1<<CPP14Parser.Identifier-118))!==0);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}declaration(){let localctx=new DeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,122,CPP14Parser.RULE_declaration);try{this.state=986;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,96,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=977;this.blockDeclaration();break;case 2:this.enterOuterAlt(localctx,2);this.state=978;this.functionDefinition();break;case 3:this.enterOuterAlt(localctx,3);this.state=979;this.templateDeclaration();break;case 4:this.enterOuterAlt(localctx,4);this.state=980;this.explicitInstantiation();break;case 5:this.enterOuterAlt(localctx,5);this.state=981;this.explicitSpecialization();break;case 6:this.enterOuterAlt(localctx,6);this.state=982;this.linkageSpecification();break;case 7:this.enterOuterAlt(localctx,7);this.state=983;this.namespaceDefinition();break;case 8:this.enterOuterAlt(localctx,8);this.state=984;this.emptyDeclaration();break;case 9:this.enterOuterAlt(localctx,9);this.state=985;this.attributeDeclaration();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}blockDeclaration(){let localctx=new BlockDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,124,CPP14Parser.RULE_blockDeclaration);try{this.state=996;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,97,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=988;this.simpleDeclaration();break;case 2:this.enterOuterAlt(localctx,2);this.state=989;this.asmDefinition();break;case 3:this.enterOuterAlt(localctx,3);this.state=990;this.namespaceAliasDefinition();break;case 4:this.enterOuterAlt(localctx,4);this.state=991;this.usingDeclaration();break;case 5:this.enterOuterAlt(localctx,5);this.state=992;this.usingDirective();break;case 6:this.enterOuterAlt(localctx,6);this.state=993;this.staticAssertDeclaration();break;case 7:this.enterOuterAlt(localctx,7);this.state=994;this.aliasDeclaration();break;case 8:this.enterOuterAlt(localctx,8);this.state=995;this.opaqueEnumDeclaration();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}aliasDeclaration(){let localctx=new AliasDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,126,CPP14Parser.RULE_aliasDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=998;this.match(CPP14Parser.Using);this.state=999;this.match(CPP14Parser.Identifier);this.state=1001;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1000;this.attributeSpecifierSeq();}this.state=1003;this.match(CPP14Parser.Assign);this.state=1004;this.theTypeId();this.state=1005;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}simpleDeclaration(){let localctx=new SimpleDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,128,CPP14Parser.RULE_simpleDeclaration);var _la=0;// Token type
try{this.state=1021;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Class:case CPP14Parser.Const:case CPP14Parser.Constexpr:case CPP14Parser.Decltype:case CPP14Parser.Double:case CPP14Parser.Enum:case CPP14Parser.Explicit:case CPP14Parser.Extern:case CPP14Parser.Float:case CPP14Parser.Friend:case CPP14Parser.Inline:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.Mutable:case CPP14Parser.Operator:case CPP14Parser.Register:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Static:case CPP14Parser.Struct:case CPP14Parser.Thread_local:case CPP14Parser.Typedef:case CPP14Parser.Typename_:case CPP14Parser.Union:case CPP14Parser.Unsigned:case CPP14Parser.Virtual:case CPP14Parser.Void:case CPP14Parser.Volatile:case CPP14Parser.Wchar:case CPP14Parser.LeftParen:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.Tilde:case CPP14Parser.AndAnd:case CPP14Parser.Doublecolon:case CPP14Parser.Semi:case CPP14Parser.Ellipsis:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,1);this.state=1008;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,99,this._ctx);if(la_===1){this.state=1007;this.declSpecifierSeq();}this.state=1011;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Decltype||_la===CPP14Parser.Operator||(_la-85&~0x1f)==0&&(1<<_la-85&(1<<CPP14Parser.LeftParen-85|1<<CPP14Parser.Star-85|1<<CPP14Parser.And-85|1<<CPP14Parser.Tilde-85))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CPP14Parser.AndAnd-118|1<<CPP14Parser.Doublecolon-118|1<<CPP14Parser.Ellipsis-118|1<<CPP14Parser.Identifier-118))!==0){this.state=1010;this.initDeclaratorList();}this.state=1013;this.match(CPP14Parser.Semi);break;case CPP14Parser.Alignas:case CPP14Parser.LeftBracket:this.enterOuterAlt(localctx,2);this.state=1014;this.attributeSpecifierSeq();this.state=1016;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,101,this._ctx);if(la_===1){this.state=1015;this.declSpecifierSeq();}this.state=1018;this.initDeclaratorList();this.state=1019;this.match(CPP14Parser.Semi);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}staticAssertDeclaration(){let localctx=new StaticAssertDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,130,CPP14Parser.RULE_staticAssertDeclaration);try{this.enterOuterAlt(localctx,1);this.state=1023;this.match(CPP14Parser.Static_assert);this.state=1024;this.match(CPP14Parser.LeftParen);this.state=1025;this.constantExpression();this.state=1026;this.match(CPP14Parser.Comma);this.state=1027;this.match(CPP14Parser.StringLiteral);this.state=1028;this.match(CPP14Parser.RightParen);this.state=1029;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}emptyDeclaration(){let localctx=new EmptyDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,132,CPP14Parser.RULE_emptyDeclaration);try{this.enterOuterAlt(localctx,1);this.state=1031;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}attributeDeclaration(){let localctx=new AttributeDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,134,CPP14Parser.RULE_attributeDeclaration);try{this.enterOuterAlt(localctx,1);this.state=1033;this.attributeSpecifierSeq();this.state=1034;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}declSpecifier(){let localctx=new DeclSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,136,CPP14Parser.RULE_declSpecifier);try{this.state=1042;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Extern:case CPP14Parser.Mutable:case CPP14Parser.Register:case CPP14Parser.Static:case CPP14Parser.Thread_local:this.enterOuterAlt(localctx,1);this.state=1036;this.storageClassSpecifier();break;case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Class:case CPP14Parser.Const:case CPP14Parser.Decltype:case CPP14Parser.Double:case CPP14Parser.Enum:case CPP14Parser.Float:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Struct:case CPP14Parser.Typename_:case CPP14Parser.Union:case CPP14Parser.Unsigned:case CPP14Parser.Void:case CPP14Parser.Volatile:case CPP14Parser.Wchar:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,2);this.state=1037;this.typeSpecifier();break;case CPP14Parser.Explicit:case CPP14Parser.Inline:case CPP14Parser.Virtual:this.enterOuterAlt(localctx,3);this.state=1038;this.functionSpecifier();break;case CPP14Parser.Friend:this.enterOuterAlt(localctx,4);this.state=1039;this.match(CPP14Parser.Friend);break;case CPP14Parser.Typedef:this.enterOuterAlt(localctx,5);this.state=1040;this.match(CPP14Parser.Typedef);break;case CPP14Parser.Constexpr:this.enterOuterAlt(localctx,6);this.state=1041;this.match(CPP14Parser.Constexpr);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}declSpecifierSeq(){let localctx=new DeclSpecifierSeqContext(this,this._ctx,this.state);this.enterRule(localctx,138,CPP14Parser.RULE_declSpecifierSeq);try{this.enterOuterAlt(localctx,1);this.state=1045;this._errHandler.sync(this);var _alt=1+1;do{switch(_alt){case 1+1:this.state=1044;this.declSpecifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=1047;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,104,this._ctx);}while(_alt!=1&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER);this.state=1050;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,105,this._ctx);if(la_===1){this.state=1049;this.attributeSpecifierSeq();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}storageClassSpecifier(){let localctx=new StorageClassSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,140,CPP14Parser.RULE_storageClassSpecifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1052;_la=this._input.LA(1);if(!((_la-36&~0x1f)==0&&(1<<_la-36&(1<<CPP14Parser.Extern-36|1<<CPP14Parser.Mutable-36|1<<CPP14Parser.Register-36|1<<CPP14Parser.Static-36))!==0||_la===CPP14Parser.Thread_local)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}functionSpecifier(){let localctx=new FunctionSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,142,CPP14Parser.RULE_functionSpecifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1054;_la=this._input.LA(1);if(!(_la===CPP14Parser.Explicit||_la===CPP14Parser.Inline||_la===CPP14Parser.Virtual)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typedefName(){let localctx=new TypedefNameContext(this,this._ctx,this.state);this.enterRule(localctx,144,CPP14Parser.RULE_typedefName);try{this.enterOuterAlt(localctx,1);this.state=1056;this.match(CPP14Parser.Identifier);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeSpecifier(){let localctx=new TypeSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,146,CPP14Parser.RULE_typeSpecifier);try{this.state=1061;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,106,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1058;this.trailingTypeSpecifier();break;case 2:this.enterOuterAlt(localctx,2);this.state=1059;this.classSpecifier();break;case 3:this.enterOuterAlt(localctx,3);this.state=1060;this.enumSpecifier();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}trailingTypeSpecifier(){let localctx=new TrailingTypeSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,148,CPP14Parser.RULE_trailingTypeSpecifier);try{this.state=1067;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Decltype:case CPP14Parser.Double:case CPP14Parser.Float:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Unsigned:case CPP14Parser.Void:case CPP14Parser.Wchar:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,1);this.state=1063;this.simpleTypeSpecifier();break;case CPP14Parser.Class:case CPP14Parser.Enum:case CPP14Parser.Struct:this.enterOuterAlt(localctx,2);this.state=1064;this.elaboratedTypeSpecifier();break;case CPP14Parser.Typename_:this.enterOuterAlt(localctx,3);this.state=1065;this.typeNameSpecifier();break;case CPP14Parser.Const:case CPP14Parser.Volatile:this.enterOuterAlt(localctx,4);this.state=1066;this.cvQualifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeSpecifierSeq(){let localctx=new TypeSpecifierSeqContext(this,this._ctx,this.state);this.enterRule(localctx,150,CPP14Parser.RULE_typeSpecifierSeq);try{this.enterOuterAlt(localctx,1);this.state=1070;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=1069;this.typeSpecifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=1072;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,108,this._ctx);}while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER);this.state=1075;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,109,this._ctx);if(la_===1){this.state=1074;this.attributeSpecifierSeq();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}trailingTypeSpecifierSeq(){let localctx=new TrailingTypeSpecifierSeqContext(this,this._ctx,this.state);this.enterRule(localctx,152,CPP14Parser.RULE_trailingTypeSpecifierSeq);try{this.enterOuterAlt(localctx,1);this.state=1078;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=1077;this.trailingTypeSpecifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=1080;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,110,this._ctx);}while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER);this.state=1083;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,111,this._ctx);if(la_===1){this.state=1082;this.attributeSpecifierSeq();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}simpleTypeLengthModifier(){let localctx=new SimpleTypeLengthModifierContext(this,this._ctx,this.state);this.enterRule(localctx,154,CPP14Parser.RULE_simpleTypeLengthModifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1085;_la=this._input.LA(1);if(!(_la===CPP14Parser.Long||_la===CPP14Parser.Short)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}simpleTypeSignednessModifier(){let localctx=new SimpleTypeSignednessModifierContext(this,this._ctx,this.state);this.enterRule(localctx,156,CPP14Parser.RULE_simpleTypeSignednessModifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1087;_la=this._input.LA(1);if(!(_la===CPP14Parser.Signed||_la===CPP14Parser.Unsigned)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}simpleTypeSpecifier(){let localctx=new SimpleTypeSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,158,CPP14Parser.RULE_simpleTypeSpecifier);var _la=0;// Token type
try{this.state=1141;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,122,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1090;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,112,this._ctx);if(la_===1){this.state=1089;this.nestedNameSpecifier(0);}this.state=1092;this.theTypeName();break;case 2:this.enterOuterAlt(localctx,2);this.state=1093;this.nestedNameSpecifier(0);this.state=1094;this.match(CPP14Parser.Template);this.state=1095;this.simpleTemplateId();break;case 3:this.enterOuterAlt(localctx,3);this.state=1097;this.simpleTypeSignednessModifier();break;case 4:this.enterOuterAlt(localctx,4);this.state=1099;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Signed||_la===CPP14Parser.Unsigned){this.state=1098;this.simpleTypeSignednessModifier();}this.state=1102;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=1101;this.simpleTypeLengthModifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=1104;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,114,this._ctx);}while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER);break;case 5:this.enterOuterAlt(localctx,5);this.state=1107;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Signed||_la===CPP14Parser.Unsigned){this.state=1106;this.simpleTypeSignednessModifier();}this.state=1109;this.match(CPP14Parser.Char);break;case 6:this.enterOuterAlt(localctx,6);this.state=1111;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Signed||_la===CPP14Parser.Unsigned){this.state=1110;this.simpleTypeSignednessModifier();}this.state=1113;this.match(CPP14Parser.Char16);break;case 7:this.enterOuterAlt(localctx,7);this.state=1115;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Signed||_la===CPP14Parser.Unsigned){this.state=1114;this.simpleTypeSignednessModifier();}this.state=1117;this.match(CPP14Parser.Char32);break;case 8:this.enterOuterAlt(localctx,8);this.state=1119;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Signed||_la===CPP14Parser.Unsigned){this.state=1118;this.simpleTypeSignednessModifier();}this.state=1121;this.match(CPP14Parser.Wchar);break;case 9:this.enterOuterAlt(localctx,9);this.state=1122;this.match(CPP14Parser.Bool);break;case 10:this.enterOuterAlt(localctx,10);this.state=1124;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Signed||_la===CPP14Parser.Unsigned){this.state=1123;this.simpleTypeSignednessModifier();}this.state=1129;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Long||_la===CPP14Parser.Short){this.state=1126;this.simpleTypeLengthModifier();this.state=1131;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1132;this.match(CPP14Parser.Int);break;case 11:this.enterOuterAlt(localctx,11);this.state=1133;this.match(CPP14Parser.Float);break;case 12:this.enterOuterAlt(localctx,12);this.state=1135;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Long||_la===CPP14Parser.Short){this.state=1134;this.simpleTypeLengthModifier();}this.state=1137;this.match(CPP14Parser.Double);break;case 13:this.enterOuterAlt(localctx,13);this.state=1138;this.match(CPP14Parser.Void);break;case 14:this.enterOuterAlt(localctx,14);this.state=1139;this.match(CPP14Parser.Auto);break;case 15:this.enterOuterAlt(localctx,15);this.state=1140;this.decltypeSpecifier();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}theTypeName(){let localctx=new TheTypeNameContext(this,this._ctx,this.state);this.enterRule(localctx,160,CPP14Parser.RULE_theTypeName);try{this.state=1147;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,123,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1143;this.className();break;case 2:this.enterOuterAlt(localctx,2);this.state=1144;this.enumName();break;case 3:this.enterOuterAlt(localctx,3);this.state=1145;this.typedefName();break;case 4:this.enterOuterAlt(localctx,4);this.state=1146;this.simpleTemplateId();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}decltypeSpecifier(){let localctx=new DecltypeSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,162,CPP14Parser.RULE_decltypeSpecifier);try{this.enterOuterAlt(localctx,1);this.state=1149;this.match(CPP14Parser.Decltype);this.state=1150;this.match(CPP14Parser.LeftParen);this.state=1153;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,124,this._ctx);switch(la_){case 1:this.state=1151;this.expression();break;case 2:this.state=1152;this.match(CPP14Parser.Auto);break;}this.state=1155;this.match(CPP14Parser.RightParen);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}elaboratedTypeSpecifier(){let localctx=new ElaboratedTypeSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,164,CPP14Parser.RULE_elaboratedTypeSpecifier);var _la=0;// Token type
try{this.state=1179;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Class:case CPP14Parser.Struct:this.enterOuterAlt(localctx,1);this.state=1157;this.classKey();this.state=1172;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,128,this._ctx);switch(la_){case 1:this.state=1159;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1158;this.attributeSpecifierSeq();}this.state=1162;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,126,this._ctx);if(la_===1){this.state=1161;this.nestedNameSpecifier(0);}this.state=1164;this.match(CPP14Parser.Identifier);break;case 2:this.state=1165;this.simpleTemplateId();break;case 3:this.state=1166;this.nestedNameSpecifier(0);this.state=1168;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Template){this.state=1167;this.match(CPP14Parser.Template);}this.state=1170;this.simpleTemplateId();break;}break;case CPP14Parser.Enum:this.enterOuterAlt(localctx,2);this.state=1174;this.match(CPP14Parser.Enum);this.state=1176;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,129,this._ctx);if(la_===1){this.state=1175;this.nestedNameSpecifier(0);}this.state=1178;this.match(CPP14Parser.Identifier);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumName(){let localctx=new EnumNameContext(this,this._ctx,this.state);this.enterRule(localctx,166,CPP14Parser.RULE_enumName);try{this.enterOuterAlt(localctx,1);this.state=1181;this.match(CPP14Parser.Identifier);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumSpecifier(){let localctx=new EnumSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,168,CPP14Parser.RULE_enumSpecifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1183;this.enumHead();this.state=1184;this.match(CPP14Parser.LeftBrace);this.state=1189;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Identifier){this.state=1185;this.enumeratorList();this.state=1187;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Comma){this.state=1186;this.match(CPP14Parser.Comma);}}this.state=1191;this.match(CPP14Parser.RightBrace);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumHead(){let localctx=new EnumHeadContext(this,this._ctx,this.state);this.enterRule(localctx,170,CPP14Parser.RULE_enumHead);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1193;this.enumkey();this.state=1195;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1194;this.attributeSpecifierSeq();}this.state=1201;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Decltype||_la===CPP14Parser.Doublecolon||_la===CPP14Parser.Identifier){this.state=1198;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,134,this._ctx);if(la_===1){this.state=1197;this.nestedNameSpecifier(0);}this.state=1200;this.match(CPP14Parser.Identifier);}this.state=1204;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Colon){this.state=1203;this.enumbase();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}opaqueEnumDeclaration(){let localctx=new OpaqueEnumDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,172,CPP14Parser.RULE_opaqueEnumDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1206;this.enumkey();this.state=1208;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1207;this.attributeSpecifierSeq();}this.state=1210;this.match(CPP14Parser.Identifier);this.state=1212;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Colon){this.state=1211;this.enumbase();}this.state=1214;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumkey(){let localctx=new EnumkeyContext(this,this._ctx,this.state);this.enterRule(localctx,174,CPP14Parser.RULE_enumkey);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1216;this.match(CPP14Parser.Enum);this.state=1218;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Class||_la===CPP14Parser.Struct){this.state=1217;_la=this._input.LA(1);if(!(_la===CPP14Parser.Class||_la===CPP14Parser.Struct)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumbase(){let localctx=new EnumbaseContext(this,this._ctx,this.state);this.enterRule(localctx,176,CPP14Parser.RULE_enumbase);try{this.enterOuterAlt(localctx,1);this.state=1220;this.match(CPP14Parser.Colon);this.state=1221;this.typeSpecifierSeq();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumeratorList(){let localctx=new EnumeratorListContext(this,this._ctx,this.state);this.enterRule(localctx,178,CPP14Parser.RULE_enumeratorList);try{this.enterOuterAlt(localctx,1);this.state=1223;this.enumeratorDefinition();this.state=1228;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,140,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1224;this.match(CPP14Parser.Comma);this.state=1225;this.enumeratorDefinition();}this.state=1230;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,140,this._ctx);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumeratorDefinition(){let localctx=new EnumeratorDefinitionContext(this,this._ctx,this.state);this.enterRule(localctx,180,CPP14Parser.RULE_enumeratorDefinition);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1231;this.enumerator();this.state=1234;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Assign){this.state=1232;this.match(CPP14Parser.Assign);this.state=1233;this.constantExpression();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumerator(){let localctx=new EnumeratorContext(this,this._ctx,this.state);this.enterRule(localctx,182,CPP14Parser.RULE_enumerator);try{this.enterOuterAlt(localctx,1);this.state=1236;this.match(CPP14Parser.Identifier);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}namespaceName(){let localctx=new NamespaceNameContext(this,this._ctx,this.state);this.enterRule(localctx,184,CPP14Parser.RULE_namespaceName);try{this.state=1240;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,142,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1238;this.originalNamespaceName();break;case 2:this.enterOuterAlt(localctx,2);this.state=1239;this.namespaceAlias();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}originalNamespaceName(){let localctx=new OriginalNamespaceNameContext(this,this._ctx,this.state);this.enterRule(localctx,186,CPP14Parser.RULE_originalNamespaceName);try{this.enterOuterAlt(localctx,1);this.state=1242;this.match(CPP14Parser.Identifier);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}namespaceDefinition(){let localctx=new NamespaceDefinitionContext(this,this._ctx,this.state);this.enterRule(localctx,188,CPP14Parser.RULE_namespaceDefinition);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1245;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Inline){this.state=1244;this.match(CPP14Parser.Inline);}this.state=1247;this.match(CPP14Parser.Namespace);this.state=1250;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,144,this._ctx);if(la_===1){this.state=1248;this.match(CPP14Parser.Identifier);}else if(la_===2){this.state=1249;this.originalNamespaceName();}this.state=1252;this.match(CPP14Parser.LeftBrace);this.state=1254;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-10&~0x1f)==0&&(1<<_la-10&(1<<CPP14Parser.Alignas-10|1<<CPP14Parser.Asm-10|1<<CPP14Parser.Auto-10|1<<CPP14Parser.Bool-10|1<<CPP14Parser.Char-10|1<<CPP14Parser.Char16-10|1<<CPP14Parser.Char32-10|1<<CPP14Parser.Class-10|1<<CPP14Parser.Const-10|1<<CPP14Parser.Constexpr-10|1<<CPP14Parser.Decltype-10|1<<CPP14Parser.Double-10|1<<CPP14Parser.Enum-10|1<<CPP14Parser.Explicit-10|1<<CPP14Parser.Extern-10|1<<CPP14Parser.Float-10|1<<CPP14Parser.Friend-10))!==0||(_la-44&~0x1f)==0&&(1<<_la-44&(1<<CPP14Parser.Inline-44|1<<CPP14Parser.Int-44|1<<CPP14Parser.Long-44|1<<CPP14Parser.Mutable-44|1<<CPP14Parser.Namespace-44|1<<CPP14Parser.Operator-44|1<<CPP14Parser.Register-44|1<<CPP14Parser.Short-44|1<<CPP14Parser.Signed-44|1<<CPP14Parser.Static-44|1<<CPP14Parser.Static_assert-44|1<<CPP14Parser.Struct-44|1<<CPP14Parser.Template-44|1<<CPP14Parser.Thread_local-44|1<<CPP14Parser.Typedef-44))!==0||(_la-76&~0x1f)==0&&(1<<_la-76&(1<<CPP14Parser.Typename_-76|1<<CPP14Parser.Union-76|1<<CPP14Parser.Unsigned-76|1<<CPP14Parser.Using-76|1<<CPP14Parser.Virtual-76|1<<CPP14Parser.Void-76|1<<CPP14Parser.Volatile-76|1<<CPP14Parser.Wchar-76|1<<CPP14Parser.LeftParen-76|1<<CPP14Parser.LeftBracket-76|1<<CPP14Parser.Star-76|1<<CPP14Parser.And-76|1<<CPP14Parser.Tilde-76))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CPP14Parser.AndAnd-118|1<<CPP14Parser.Doublecolon-118|1<<CPP14Parser.Semi-118|1<<CPP14Parser.Ellipsis-118|1<<CPP14Parser.Identifier-118))!==0){this.state=1253;localctx.namespaceBody=this.declarationseq();}this.state=1256;this.match(CPP14Parser.RightBrace);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}namespaceAlias(){let localctx=new NamespaceAliasContext(this,this._ctx,this.state);this.enterRule(localctx,190,CPP14Parser.RULE_namespaceAlias);try{this.enterOuterAlt(localctx,1);this.state=1258;this.match(CPP14Parser.Identifier);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}namespaceAliasDefinition(){let localctx=new NamespaceAliasDefinitionContext(this,this._ctx,this.state);this.enterRule(localctx,192,CPP14Parser.RULE_namespaceAliasDefinition);try{this.enterOuterAlt(localctx,1);this.state=1260;this.match(CPP14Parser.Namespace);this.state=1261;this.match(CPP14Parser.Identifier);this.state=1262;this.match(CPP14Parser.Assign);this.state=1263;this.qualifiednamespacespecifier();this.state=1264;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}qualifiednamespacespecifier(){let localctx=new QualifiednamespacespecifierContext(this,this._ctx,this.state);this.enterRule(localctx,194,CPP14Parser.RULE_qualifiednamespacespecifier);try{this.enterOuterAlt(localctx,1);this.state=1267;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,146,this._ctx);if(la_===1){this.state=1266;this.nestedNameSpecifier(0);}this.state=1269;this.namespaceName();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}usingDeclaration(){let localctx=new UsingDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,196,CPP14Parser.RULE_usingDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1271;this.match(CPP14Parser.Using);this.state=1277;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,148,this._ctx);switch(la_){case 1:this.state=1273;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Typename_){this.state=1272;this.match(CPP14Parser.Typename_);}this.state=1275;this.nestedNameSpecifier(0);break;case 2:this.state=1276;this.match(CPP14Parser.Doublecolon);break;}this.state=1279;this.unqualifiedId();this.state=1280;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}usingDirective(){let localctx=new UsingDirectiveContext(this,this._ctx,this.state);this.enterRule(localctx,198,CPP14Parser.RULE_usingDirective);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1283;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1282;this.attributeSpecifierSeq();}this.state=1285;this.match(CPP14Parser.Using);this.state=1286;this.match(CPP14Parser.Namespace);this.state=1288;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,150,this._ctx);if(la_===1){this.state=1287;this.nestedNameSpecifier(0);}this.state=1290;this.namespaceName();this.state=1291;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}asmDefinition(){let localctx=new AsmDefinitionContext(this,this._ctx,this.state);this.enterRule(localctx,200,CPP14Parser.RULE_asmDefinition);try{this.enterOuterAlt(localctx,1);this.state=1293;this.match(CPP14Parser.Asm);this.state=1294;this.match(CPP14Parser.LeftParen);this.state=1295;this.match(CPP14Parser.StringLiteral);this.state=1296;this.match(CPP14Parser.RightParen);this.state=1297;this.match(CPP14Parser.Semi);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}linkageSpecification(){let localctx=new LinkageSpecificationContext(this,this._ctx,this.state);this.enterRule(localctx,202,CPP14Parser.RULE_linkageSpecification);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1299;this.match(CPP14Parser.Extern);this.state=1300;this.match(CPP14Parser.StringLiteral);this.state=1307;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftBrace:this.state=1301;this.match(CPP14Parser.LeftBrace);this.state=1303;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-10&~0x1f)==0&&(1<<_la-10&(1<<CPP14Parser.Alignas-10|1<<CPP14Parser.Asm-10|1<<CPP14Parser.Auto-10|1<<CPP14Parser.Bool-10|1<<CPP14Parser.Char-10|1<<CPP14Parser.Char16-10|1<<CPP14Parser.Char32-10|1<<CPP14Parser.Class-10|1<<CPP14Parser.Const-10|1<<CPP14Parser.Constexpr-10|1<<CPP14Parser.Decltype-10|1<<CPP14Parser.Double-10|1<<CPP14Parser.Enum-10|1<<CPP14Parser.Explicit-10|1<<CPP14Parser.Extern-10|1<<CPP14Parser.Float-10|1<<CPP14Parser.Friend-10))!==0||(_la-44&~0x1f)==0&&(1<<_la-44&(1<<CPP14Parser.Inline-44|1<<CPP14Parser.Int-44|1<<CPP14Parser.Long-44|1<<CPP14Parser.Mutable-44|1<<CPP14Parser.Namespace-44|1<<CPP14Parser.Operator-44|1<<CPP14Parser.Register-44|1<<CPP14Parser.Short-44|1<<CPP14Parser.Signed-44|1<<CPP14Parser.Static-44|1<<CPP14Parser.Static_assert-44|1<<CPP14Parser.Struct-44|1<<CPP14Parser.Template-44|1<<CPP14Parser.Thread_local-44|1<<CPP14Parser.Typedef-44))!==0||(_la-76&~0x1f)==0&&(1<<_la-76&(1<<CPP14Parser.Typename_-76|1<<CPP14Parser.Union-76|1<<CPP14Parser.Unsigned-76|1<<CPP14Parser.Using-76|1<<CPP14Parser.Virtual-76|1<<CPP14Parser.Void-76|1<<CPP14Parser.Volatile-76|1<<CPP14Parser.Wchar-76|1<<CPP14Parser.LeftParen-76|1<<CPP14Parser.LeftBracket-76|1<<CPP14Parser.Star-76|1<<CPP14Parser.And-76|1<<CPP14Parser.Tilde-76))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CPP14Parser.AndAnd-118|1<<CPP14Parser.Doublecolon-118|1<<CPP14Parser.Semi-118|1<<CPP14Parser.Ellipsis-118|1<<CPP14Parser.Identifier-118))!==0){this.state=1302;this.declarationseq();}this.state=1305;this.match(CPP14Parser.RightBrace);break;case CPP14Parser.Alignas:case CPP14Parser.Asm:case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Class:case CPP14Parser.Const:case CPP14Parser.Constexpr:case CPP14Parser.Decltype:case CPP14Parser.Double:case CPP14Parser.Enum:case CPP14Parser.Explicit:case CPP14Parser.Extern:case CPP14Parser.Float:case CPP14Parser.Friend:case CPP14Parser.Inline:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.Mutable:case CPP14Parser.Namespace:case CPP14Parser.Operator:case CPP14Parser.Register:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Static:case CPP14Parser.Static_assert:case CPP14Parser.Struct:case CPP14Parser.Template:case CPP14Parser.Thread_local:case CPP14Parser.Typedef:case CPP14Parser.Typename_:case CPP14Parser.Union:case CPP14Parser.Unsigned:case CPP14Parser.Using:case CPP14Parser.Virtual:case CPP14Parser.Void:case CPP14Parser.Volatile:case CPP14Parser.Wchar:case CPP14Parser.LeftParen:case CPP14Parser.LeftBracket:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.Tilde:case CPP14Parser.AndAnd:case CPP14Parser.Doublecolon:case CPP14Parser.Semi:case CPP14Parser.Ellipsis:case CPP14Parser.Identifier:this.state=1306;this.declaration();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}attributeSpecifierSeq(){let localctx=new AttributeSpecifierSeqContext(this,this._ctx,this.state);this.enterRule(localctx,204,CPP14Parser.RULE_attributeSpecifierSeq);try{this.enterOuterAlt(localctx,1);this.state=1310;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=1309;this.attributeSpecifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=1312;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,153,this._ctx);}while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}attributeSpecifier(){let localctx=new AttributeSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,206,CPP14Parser.RULE_attributeSpecifier);var _la=0;// Token type
try{this.state=1322;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftBracket:this.enterOuterAlt(localctx,1);this.state=1314;this.match(CPP14Parser.LeftBracket);this.state=1315;this.match(CPP14Parser.LeftBracket);this.state=1317;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Identifier){this.state=1316;this.attributeList();}this.state=1319;this.match(CPP14Parser.RightBracket);this.state=1320;this.match(CPP14Parser.RightBracket);break;case CPP14Parser.Alignas:this.enterOuterAlt(localctx,2);this.state=1321;this.alignmentspecifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}alignmentspecifier(){let localctx=new AlignmentspecifierContext(this,this._ctx,this.state);this.enterRule(localctx,208,CPP14Parser.RULE_alignmentspecifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1324;this.match(CPP14Parser.Alignas);this.state=1325;this.match(CPP14Parser.LeftParen);this.state=1328;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,156,this._ctx);switch(la_){case 1:this.state=1326;this.theTypeId();break;case 2:this.state=1327;this.constantExpression();break;}this.state=1331;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1330;this.match(CPP14Parser.Ellipsis);}this.state=1333;this.match(CPP14Parser.RightParen);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}attributeList(){let localctx=new AttributeListContext(this,this._ctx,this.state);this.enterRule(localctx,210,CPP14Parser.RULE_attributeList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1335;this.attribute();this.state=1340;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Comma){this.state=1336;this.match(CPP14Parser.Comma);this.state=1337;this.attribute();this.state=1342;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1344;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1343;this.match(CPP14Parser.Ellipsis);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}attribute(){let localctx=new AttributeContext(this,this._ctx,this.state);this.enterRule(localctx,212,CPP14Parser.RULE_attribute);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1349;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,160,this._ctx);if(la_===1){this.state=1346;this.attributeNamespace();this.state=1347;this.match(CPP14Parser.Doublecolon);}this.state=1351;this.match(CPP14Parser.Identifier);this.state=1353;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.LeftParen){this.state=1352;this.attributeArgumentClause();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}attributeNamespace(){let localctx=new AttributeNamespaceContext(this,this._ctx,this.state);this.enterRule(localctx,214,CPP14Parser.RULE_attributeNamespace);try{this.enterOuterAlt(localctx,1);this.state=1355;this.match(CPP14Parser.Identifier);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}attributeArgumentClause(){let localctx=new AttributeArgumentClauseContext(this,this._ctx,this.state);this.enterRule(localctx,216,CPP14Parser.RULE_attributeArgumentClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1357;this.match(CPP14Parser.LeftParen);this.state=1359;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.MultiLineMacro|1<<CPP14Parser.Directive|1<<CPP14Parser.Alignas|1<<CPP14Parser.Alignof|1<<CPP14Parser.Asm|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Break|1<<CPP14Parser.Case|1<<CPP14Parser.Catch|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Class|1<<CPP14Parser.Const|1<<CPP14Parser.Constexpr|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Continue|1<<CPP14Parser.Decltype|1<<CPP14Parser.Default|1<<CPP14Parser.Delete|1<<CPP14Parser.Do|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-32&~0x1f)==0&&(1<<_la-32&(1<<CPP14Parser.Else-32|1<<CPP14Parser.Enum-32|1<<CPP14Parser.Explicit-32|1<<CPP14Parser.Export-32|1<<CPP14Parser.Extern-32|1<<CPP14Parser.False_-32|1<<CPP14Parser.Final-32|1<<CPP14Parser.Float-32|1<<CPP14Parser.For-32|1<<CPP14Parser.Friend-32|1<<CPP14Parser.Goto-32|1<<CPP14Parser.If-32|1<<CPP14Parser.Inline-32|1<<CPP14Parser.Int-32|1<<CPP14Parser.Long-32|1<<CPP14Parser.Mutable-32|1<<CPP14Parser.Namespace-32|1<<CPP14Parser.New-32|1<<CPP14Parser.Noexcept-32|1<<CPP14Parser.Nullptr-32|1<<CPP14Parser.Operator-32|1<<CPP14Parser.Override-32|1<<CPP14Parser.Private-32|1<<CPP14Parser.Protected-32|1<<CPP14Parser.Public-32|1<<CPP14Parser.Register-32|1<<CPP14Parser.Reinterpret_cast-32|1<<CPP14Parser.Return-32|1<<CPP14Parser.Short-32|1<<CPP14Parser.Signed-32|1<<CPP14Parser.Sizeof-32|1<<CPP14Parser.Static-32))!==0||(_la-64&~0x1f)==0&&(1<<_la-64&(1<<CPP14Parser.Static_assert-64|1<<CPP14Parser.Static_cast-64|1<<CPP14Parser.Struct-64|1<<CPP14Parser.Switch-64|1<<CPP14Parser.Template-64|1<<CPP14Parser.This-64|1<<CPP14Parser.Thread_local-64|1<<CPP14Parser.Throw-64|1<<CPP14Parser.True_-64|1<<CPP14Parser.Try-64|1<<CPP14Parser.Typedef-64|1<<CPP14Parser.Typeid_-64|1<<CPP14Parser.Typename_-64|1<<CPP14Parser.Union-64|1<<CPP14Parser.Unsigned-64|1<<CPP14Parser.Using-64|1<<CPP14Parser.Virtual-64|1<<CPP14Parser.Void-64|1<<CPP14Parser.Volatile-64|1<<CPP14Parser.Wchar-64|1<<CPP14Parser.While-64|1<<CPP14Parser.LeftParen-64|1<<CPP14Parser.LeftBracket-64|1<<CPP14Parser.LeftBrace-64|1<<CPP14Parser.Plus-64|1<<CPP14Parser.Minus-64|1<<CPP14Parser.Star-64|1<<CPP14Parser.Div-64|1<<CPP14Parser.Mod-64))!==0||(_la-96&~0x1f)==0&&(1<<_la-96&(1<<CPP14Parser.Caret-96|1<<CPP14Parser.And-96|1<<CPP14Parser.Or-96|1<<CPP14Parser.Tilde-96|1<<CPP14Parser.Not-96|1<<CPP14Parser.Assign-96|1<<CPP14Parser.Less-96|1<<CPP14Parser.Greater-96|1<<CPP14Parser.PlusAssign-96|1<<CPP14Parser.MinusAssign-96|1<<CPP14Parser.StarAssign-96|1<<CPP14Parser.DivAssign-96|1<<CPP14Parser.ModAssign-96|1<<CPP14Parser.XorAssign-96|1<<CPP14Parser.AndAssign-96|1<<CPP14Parser.OrAssign-96|1<<CPP14Parser.LeftShiftAssign-96|1<<CPP14Parser.RightShiftAssign-96|1<<CPP14Parser.Equal-96|1<<CPP14Parser.NotEqual-96|1<<CPP14Parser.LessEqual-96|1<<CPP14Parser.GreaterEqual-96|1<<CPP14Parser.AndAnd-96|1<<CPP14Parser.OrOr-96|1<<CPP14Parser.PlusPlus-96|1<<CPP14Parser.MinusMinus-96|1<<CPP14Parser.Comma-96|1<<CPP14Parser.ArrowStar-96|1<<CPP14Parser.Arrow-96|1<<CPP14Parser.Question-96|1<<CPP14Parser.Colon-96|1<<CPP14Parser.Doublecolon-96))!==0||(_la-128&~0x1f)==0&&(1<<_la-128&(1<<CPP14Parser.Semi-128|1<<CPP14Parser.Dot-128|1<<CPP14Parser.DotStar-128|1<<CPP14Parser.Ellipsis-128|1<<CPP14Parser.Identifier-128|1<<CPP14Parser.DecimalLiteral-128|1<<CPP14Parser.OctalLiteral-128|1<<CPP14Parser.HexadecimalLiteral-128|1<<CPP14Parser.BinaryLiteral-128|1<<CPP14Parser.Integersuffix-128|1<<CPP14Parser.UserDefinedIntegerLiteral-128|1<<CPP14Parser.UserDefinedFloatingLiteral-128|1<<CPP14Parser.UserDefinedStringLiteral-128|1<<CPP14Parser.UserDefinedCharacterLiteral-128|1<<CPP14Parser.Whitespace-128|1<<CPP14Parser.Newline-128|1<<CPP14Parser.BlockComment-128|1<<CPP14Parser.LineComment-128))!==0){this.state=1358;this.balancedTokenSeq();}this.state=1361;this.match(CPP14Parser.RightParen);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}balancedTokenSeq(){let localctx=new BalancedTokenSeqContext(this,this._ctx,this.state);this.enterRule(localctx,218,CPP14Parser.RULE_balancedTokenSeq);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1364;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=1363;this.balancedtoken();this.state=1366;this._errHandler.sync(this);_la=this._input.LA(1);}while((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.MultiLineMacro|1<<CPP14Parser.Directive|1<<CPP14Parser.Alignas|1<<CPP14Parser.Alignof|1<<CPP14Parser.Asm|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Break|1<<CPP14Parser.Case|1<<CPP14Parser.Catch|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Class|1<<CPP14Parser.Const|1<<CPP14Parser.Constexpr|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Continue|1<<CPP14Parser.Decltype|1<<CPP14Parser.Default|1<<CPP14Parser.Delete|1<<CPP14Parser.Do|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-32&~0x1f)==0&&(1<<_la-32&(1<<CPP14Parser.Else-32|1<<CPP14Parser.Enum-32|1<<CPP14Parser.Explicit-32|1<<CPP14Parser.Export-32|1<<CPP14Parser.Extern-32|1<<CPP14Parser.False_-32|1<<CPP14Parser.Final-32|1<<CPP14Parser.Float-32|1<<CPP14Parser.For-32|1<<CPP14Parser.Friend-32|1<<CPP14Parser.Goto-32|1<<CPP14Parser.If-32|1<<CPP14Parser.Inline-32|1<<CPP14Parser.Int-32|1<<CPP14Parser.Long-32|1<<CPP14Parser.Mutable-32|1<<CPP14Parser.Namespace-32|1<<CPP14Parser.New-32|1<<CPP14Parser.Noexcept-32|1<<CPP14Parser.Nullptr-32|1<<CPP14Parser.Operator-32|1<<CPP14Parser.Override-32|1<<CPP14Parser.Private-32|1<<CPP14Parser.Protected-32|1<<CPP14Parser.Public-32|1<<CPP14Parser.Register-32|1<<CPP14Parser.Reinterpret_cast-32|1<<CPP14Parser.Return-32|1<<CPP14Parser.Short-32|1<<CPP14Parser.Signed-32|1<<CPP14Parser.Sizeof-32|1<<CPP14Parser.Static-32))!==0||(_la-64&~0x1f)==0&&(1<<_la-64&(1<<CPP14Parser.Static_assert-64|1<<CPP14Parser.Static_cast-64|1<<CPP14Parser.Struct-64|1<<CPP14Parser.Switch-64|1<<CPP14Parser.Template-64|1<<CPP14Parser.This-64|1<<CPP14Parser.Thread_local-64|1<<CPP14Parser.Throw-64|1<<CPP14Parser.True_-64|1<<CPP14Parser.Try-64|1<<CPP14Parser.Typedef-64|1<<CPP14Parser.Typeid_-64|1<<CPP14Parser.Typename_-64|1<<CPP14Parser.Union-64|1<<CPP14Parser.Unsigned-64|1<<CPP14Parser.Using-64|1<<CPP14Parser.Virtual-64|1<<CPP14Parser.Void-64|1<<CPP14Parser.Volatile-64|1<<CPP14Parser.Wchar-64|1<<CPP14Parser.While-64|1<<CPP14Parser.LeftParen-64|1<<CPP14Parser.LeftBracket-64|1<<CPP14Parser.LeftBrace-64|1<<CPP14Parser.Plus-64|1<<CPP14Parser.Minus-64|1<<CPP14Parser.Star-64|1<<CPP14Parser.Div-64|1<<CPP14Parser.Mod-64))!==0||(_la-96&~0x1f)==0&&(1<<_la-96&(1<<CPP14Parser.Caret-96|1<<CPP14Parser.And-96|1<<CPP14Parser.Or-96|1<<CPP14Parser.Tilde-96|1<<CPP14Parser.Not-96|1<<CPP14Parser.Assign-96|1<<CPP14Parser.Less-96|1<<CPP14Parser.Greater-96|1<<CPP14Parser.PlusAssign-96|1<<CPP14Parser.MinusAssign-96|1<<CPP14Parser.StarAssign-96|1<<CPP14Parser.DivAssign-96|1<<CPP14Parser.ModAssign-96|1<<CPP14Parser.XorAssign-96|1<<CPP14Parser.AndAssign-96|1<<CPP14Parser.OrAssign-96|1<<CPP14Parser.LeftShiftAssign-96|1<<CPP14Parser.RightShiftAssign-96|1<<CPP14Parser.Equal-96|1<<CPP14Parser.NotEqual-96|1<<CPP14Parser.LessEqual-96|1<<CPP14Parser.GreaterEqual-96|1<<CPP14Parser.AndAnd-96|1<<CPP14Parser.OrOr-96|1<<CPP14Parser.PlusPlus-96|1<<CPP14Parser.MinusMinus-96|1<<CPP14Parser.Comma-96|1<<CPP14Parser.ArrowStar-96|1<<CPP14Parser.Arrow-96|1<<CPP14Parser.Question-96|1<<CPP14Parser.Colon-96|1<<CPP14Parser.Doublecolon-96))!==0||(_la-128&~0x1f)==0&&(1<<_la-128&(1<<CPP14Parser.Semi-128|1<<CPP14Parser.Dot-128|1<<CPP14Parser.DotStar-128|1<<CPP14Parser.Ellipsis-128|1<<CPP14Parser.Identifier-128|1<<CPP14Parser.DecimalLiteral-128|1<<CPP14Parser.OctalLiteral-128|1<<CPP14Parser.HexadecimalLiteral-128|1<<CPP14Parser.BinaryLiteral-128|1<<CPP14Parser.Integersuffix-128|1<<CPP14Parser.UserDefinedIntegerLiteral-128|1<<CPP14Parser.UserDefinedFloatingLiteral-128|1<<CPP14Parser.UserDefinedStringLiteral-128|1<<CPP14Parser.UserDefinedCharacterLiteral-128|1<<CPP14Parser.Whitespace-128|1<<CPP14Parser.Newline-128|1<<CPP14Parser.BlockComment-128|1<<CPP14Parser.LineComment-128))!==0);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}balancedtoken(){let localctx=new BalancedtokenContext(this,this._ctx,this.state);this.enterRule(localctx,220,CPP14Parser.RULE_balancedtoken);var _la=0;// Token type
try{this.state=1385;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftParen:this.enterOuterAlt(localctx,1);this.state=1368;this.match(CPP14Parser.LeftParen);this.state=1369;this.balancedTokenSeq();this.state=1370;this.match(CPP14Parser.RightParen);break;case CPP14Parser.LeftBracket:this.enterOuterAlt(localctx,2);this.state=1372;this.match(CPP14Parser.LeftBracket);this.state=1373;this.balancedTokenSeq();this.state=1374;this.match(CPP14Parser.RightBracket);break;case CPP14Parser.LeftBrace:this.enterOuterAlt(localctx,3);this.state=1376;this.match(CPP14Parser.LeftBrace);this.state=1377;this.balancedTokenSeq();this.state=1378;this.match(CPP14Parser.RightBrace);break;case CPP14Parser.IntegerLiteral:case CPP14Parser.CharacterLiteral:case CPP14Parser.FloatingLiteral:case CPP14Parser.StringLiteral:case CPP14Parser.BooleanLiteral:case CPP14Parser.PointerLiteral:case CPP14Parser.UserDefinedLiteral:case CPP14Parser.MultiLineMacro:case CPP14Parser.Directive:case CPP14Parser.Alignas:case CPP14Parser.Alignof:case CPP14Parser.Asm:case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Break:case CPP14Parser.Case:case CPP14Parser.Catch:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Class:case CPP14Parser.Const:case CPP14Parser.Constexpr:case CPP14Parser.Const_cast:case CPP14Parser.Continue:case CPP14Parser.Decltype:case CPP14Parser.Default:case CPP14Parser.Delete:case CPP14Parser.Do:case CPP14Parser.Double:case CPP14Parser.Dynamic_cast:case CPP14Parser.Else:case CPP14Parser.Enum:case CPP14Parser.Explicit:case CPP14Parser.Export:case CPP14Parser.Extern:case CPP14Parser.False_:case CPP14Parser.Final:case CPP14Parser.Float:case CPP14Parser.For:case CPP14Parser.Friend:case CPP14Parser.Goto:case CPP14Parser.If:case CPP14Parser.Inline:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.Mutable:case CPP14Parser.Namespace:case CPP14Parser.New:case CPP14Parser.Noexcept:case CPP14Parser.Nullptr:case CPP14Parser.Operator:case CPP14Parser.Override:case CPP14Parser.Private:case CPP14Parser.Protected:case CPP14Parser.Public:case CPP14Parser.Register:case CPP14Parser.Reinterpret_cast:case CPP14Parser.Return:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Sizeof:case CPP14Parser.Static:case CPP14Parser.Static_assert:case CPP14Parser.Static_cast:case CPP14Parser.Struct:case CPP14Parser.Switch:case CPP14Parser.Template:case CPP14Parser.This:case CPP14Parser.Thread_local:case CPP14Parser.Throw:case CPP14Parser.True_:case CPP14Parser.Try:case CPP14Parser.Typedef:case CPP14Parser.Typeid_:case CPP14Parser.Typename_:case CPP14Parser.Union:case CPP14Parser.Unsigned:case CPP14Parser.Using:case CPP14Parser.Virtual:case CPP14Parser.Void:case CPP14Parser.Volatile:case CPP14Parser.Wchar:case CPP14Parser.While:case CPP14Parser.Plus:case CPP14Parser.Minus:case CPP14Parser.Star:case CPP14Parser.Div:case CPP14Parser.Mod:case CPP14Parser.Caret:case CPP14Parser.And:case CPP14Parser.Or:case CPP14Parser.Tilde:case CPP14Parser.Not:case CPP14Parser.Assign:case CPP14Parser.Less:case CPP14Parser.Greater:case CPP14Parser.PlusAssign:case CPP14Parser.MinusAssign:case CPP14Parser.StarAssign:case CPP14Parser.DivAssign:case CPP14Parser.ModAssign:case CPP14Parser.XorAssign:case CPP14Parser.AndAssign:case CPP14Parser.OrAssign:case CPP14Parser.LeftShiftAssign:case CPP14Parser.RightShiftAssign:case CPP14Parser.Equal:case CPP14Parser.NotEqual:case CPP14Parser.LessEqual:case CPP14Parser.GreaterEqual:case CPP14Parser.AndAnd:case CPP14Parser.OrOr:case CPP14Parser.PlusPlus:case CPP14Parser.MinusMinus:case CPP14Parser.Comma:case CPP14Parser.ArrowStar:case CPP14Parser.Arrow:case CPP14Parser.Question:case CPP14Parser.Colon:case CPP14Parser.Doublecolon:case CPP14Parser.Semi:case CPP14Parser.Dot:case CPP14Parser.DotStar:case CPP14Parser.Ellipsis:case CPP14Parser.Identifier:case CPP14Parser.DecimalLiteral:case CPP14Parser.OctalLiteral:case CPP14Parser.HexadecimalLiteral:case CPP14Parser.BinaryLiteral:case CPP14Parser.Integersuffix:case CPP14Parser.UserDefinedIntegerLiteral:case CPP14Parser.UserDefinedFloatingLiteral:case CPP14Parser.UserDefinedStringLiteral:case CPP14Parser.UserDefinedCharacterLiteral:case CPP14Parser.Whitespace:case CPP14Parser.Newline:case CPP14Parser.BlockComment:case CPP14Parser.LineComment:this.enterOuterAlt(localctx,4);this.state=1381;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=1380;_la=this._input.LA(1);if(_la<=0||(_la-85&~0x1f)==0&&(1<<_la-85&(1<<CPP14Parser.LeftParen-85|1<<CPP14Parser.RightParen-85|1<<CPP14Parser.LeftBracket-85|1<<CPP14Parser.RightBracket-85|1<<CPP14Parser.LeftBrace-85|1<<CPP14Parser.RightBrace-85))!==0){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=1383;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,164,this._ctx);}while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}initDeclaratorList(){let localctx=new InitDeclaratorListContext(this,this._ctx,this.state);this.enterRule(localctx,222,CPP14Parser.RULE_initDeclaratorList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1387;this.initDeclarator();this.state=1392;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Comma){this.state=1388;this.match(CPP14Parser.Comma);this.state=1389;this.initDeclarator();this.state=1394;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}initDeclarator(){let localctx=new InitDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,224,CPP14Parser.RULE_initDeclarator);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1395;this.declarator();this.state=1397;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-85&~0x1f)==0&&(1<<_la-85&(1<<CPP14Parser.LeftParen-85|1<<CPP14Parser.LeftBrace-85|1<<CPP14Parser.Assign-85))!==0){this.state=1396;this.initializer();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}declarator(){let localctx=new DeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,226,CPP14Parser.RULE_declarator);try{this.state=1404;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,168,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1399;this.pointerDeclarator();break;case 2:this.enterOuterAlt(localctx,2);this.state=1400;this.noPointerDeclarator(0);this.state=1401;this.parametersAndQualifiers();this.state=1402;this.trailingReturnType();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}pointerDeclarator(){let localctx=new PointerDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,228,CPP14Parser.RULE_pointerDeclarator);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1412;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,170,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1406;this.pointerOperator();this.state=1408;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Const){this.state=1407;this.match(CPP14Parser.Const);}}this.state=1414;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,170,this._ctx);}this.state=1415;this.noPointerDeclarator(0);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}noPointerDeclarator(_p){if(_p===undefined){_p=0;}const _parentctx=this._ctx;const _parentState=this.state;let localctx=new NoPointerDeclaratorContext(this,this._ctx,_parentState);let _prevctx=localctx;const _startState=230;this.enterRecursionRule(localctx,230,CPP14Parser.RULE_noPointerDeclarator,_p);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1426;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Decltype:case CPP14Parser.Operator:case CPP14Parser.Tilde:case CPP14Parser.Doublecolon:case CPP14Parser.Ellipsis:case CPP14Parser.Identifier:this.state=1418;this.declaratorid();this.state=1420;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,171,this._ctx);if(la_===1){this.state=1419;this.attributeSpecifierSeq();}break;case CPP14Parser.LeftParen:this.state=1422;this.match(CPP14Parser.LeftParen);this.state=1423;this.pointerDeclarator();this.state=1424;this.match(CPP14Parser.RightParen);break;default:throw new _antlr.default.error.NoViableAltException(this);}this._ctx.stop=this._input.LT(-1);this.state=1442;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,176,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new NoPointerDeclaratorContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,CPP14Parser.RULE_noPointerDeclarator);this.state=1428;if(!this.precpred(this._ctx,2)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 2)");}this.state=1438;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftParen:this.state=1429;this.parametersAndQualifiers();break;case CPP14Parser.LeftBracket:this.state=1430;this.match(CPP14Parser.LeftBracket);this.state=1432;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-75&~0x1f)==0&&(1<<_la-75&(1<<CPP14Parser.Typeid_-75|1<<CPP14Parser.Typename_-75|1<<CPP14Parser.Unsigned-75|1<<CPP14Parser.Void-75|1<<CPP14Parser.Wchar-75|1<<CPP14Parser.LeftParen-75|1<<CPP14Parser.LeftBracket-75|1<<CPP14Parser.Plus-75|1<<CPP14Parser.Minus-75|1<<CPP14Parser.Star-75|1<<CPP14Parser.And-75|1<<CPP14Parser.Or-75|1<<CPP14Parser.Tilde-75|1<<CPP14Parser.Not-75))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=1431;this.constantExpression();}this.state=1434;this.match(CPP14Parser.RightBracket);this.state=1436;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,174,this._ctx);if(la_===1){this.state=1435;this.attributeSpecifierSeq();}break;default:throw new _antlr.default.error.NoViableAltException(this);}}this.state=1444;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,176,this._ctx);}}catch(error){if(error instanceof _antlr.default.error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}parametersAndQualifiers(){let localctx=new ParametersAndQualifiersContext(this,this._ctx,this.state);this.enterRule(localctx,232,CPP14Parser.RULE_parametersAndQualifiers);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1445;this.match(CPP14Parser.LeftParen);this.state=1447;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.Alignas|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Class|1<<CPP14Parser.Const|1<<CPP14Parser.Constexpr|1<<CPP14Parser.Decltype|1<<CPP14Parser.Double))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<CPP14Parser.Enum-33|1<<CPP14Parser.Explicit-33|1<<CPP14Parser.Extern-33|1<<CPP14Parser.Float-33|1<<CPP14Parser.Friend-33|1<<CPP14Parser.Inline-33|1<<CPP14Parser.Int-33|1<<CPP14Parser.Long-33|1<<CPP14Parser.Mutable-33|1<<CPP14Parser.Register-33|1<<CPP14Parser.Short-33|1<<CPP14Parser.Signed-33|1<<CPP14Parser.Static-33))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CPP14Parser.Struct-66|1<<CPP14Parser.Thread_local-66|1<<CPP14Parser.Typedef-66|1<<CPP14Parser.Typename_-66|1<<CPP14Parser.Union-66|1<<CPP14Parser.Unsigned-66|1<<CPP14Parser.Virtual-66|1<<CPP14Parser.Void-66|1<<CPP14Parser.Volatile-66|1<<CPP14Parser.Wchar-66|1<<CPP14Parser.LeftBracket-66))!==0||_la===CPP14Parser.Doublecolon||_la===CPP14Parser.Identifier){this.state=1446;this.parameterDeclarationClause();}this.state=1449;this.match(CPP14Parser.RightParen);this.state=1451;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,178,this._ctx);if(la_===1){this.state=1450;this.cvqualifierseq();}this.state=1454;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,179,this._ctx);if(la_===1){this.state=1453;this.refqualifier();}this.state=1457;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,180,this._ctx);if(la_===1){this.state=1456;this.exceptionSpecification();}this.state=1460;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,181,this._ctx);if(la_===1){this.state=1459;this.attributeSpecifierSeq();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}trailingReturnType(){let localctx=new TrailingReturnTypeContext(this,this._ctx,this.state);this.enterRule(localctx,234,CPP14Parser.RULE_trailingReturnType);try{this.enterOuterAlt(localctx,1);this.state=1462;this.match(CPP14Parser.Arrow);this.state=1463;this.trailingTypeSpecifierSeq();this.state=1465;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,182,this._ctx);if(la_===1){this.state=1464;this.abstractDeclarator();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}pointerOperator(){let localctx=new PointerOperatorContext(this,this._ctx,this.state);this.enterRule(localctx,236,CPP14Parser.RULE_pointerOperator);var _la=0;// Token type
try{this.state=1481;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.And:case CPP14Parser.AndAnd:this.enterOuterAlt(localctx,1);this.state=1467;_la=this._input.LA(1);if(!(_la===CPP14Parser.And||_la===CPP14Parser.AndAnd)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1469;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,183,this._ctx);if(la_===1){this.state=1468;this.attributeSpecifierSeq();}break;case CPP14Parser.Decltype:case CPP14Parser.Star:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,2);this.state=1472;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Decltype||_la===CPP14Parser.Doublecolon||_la===CPP14Parser.Identifier){this.state=1471;this.nestedNameSpecifier(0);}this.state=1474;this.match(CPP14Parser.Star);this.state=1476;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,185,this._ctx);if(la_===1){this.state=1475;this.attributeSpecifierSeq();}this.state=1479;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,186,this._ctx);if(la_===1){this.state=1478;this.cvqualifierseq();}break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}cvqualifierseq(){let localctx=new CvqualifierseqContext(this,this._ctx,this.state);this.enterRule(localctx,238,CPP14Parser.RULE_cvqualifierseq);try{this.enterOuterAlt(localctx,1);this.state=1484;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=1483;this.cvQualifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=1486;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,188,this._ctx);}while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}cvQualifier(){let localctx=new CvQualifierContext(this,this._ctx,this.state);this.enterRule(localctx,240,CPP14Parser.RULE_cvQualifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1488;_la=this._input.LA(1);if(!(_la===CPP14Parser.Const||_la===CPP14Parser.Volatile)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}refqualifier(){let localctx=new RefqualifierContext(this,this._ctx,this.state);this.enterRule(localctx,242,CPP14Parser.RULE_refqualifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1490;_la=this._input.LA(1);if(!(_la===CPP14Parser.And||_la===CPP14Parser.AndAnd)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}declaratorid(){let localctx=new DeclaratoridContext(this,this._ctx,this.state);this.enterRule(localctx,244,CPP14Parser.RULE_declaratorid);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1493;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1492;this.match(CPP14Parser.Ellipsis);}this.state=1495;this.idExpression();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}theTypeId(){let localctx=new TheTypeIdContext(this,this._ctx,this.state);this.enterRule(localctx,246,CPP14Parser.RULE_theTypeId);try{this.enterOuterAlt(localctx,1);this.state=1497;this.typeSpecifierSeq();this.state=1499;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,190,this._ctx);if(la_===1){this.state=1498;this.abstractDeclarator();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}abstractDeclarator(){let localctx=new AbstractDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,248,CPP14Parser.RULE_abstractDeclarator);try{this.state=1509;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,192,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1501;this.pointerAbstractDeclarator();break;case 2:this.enterOuterAlt(localctx,2);this.state=1503;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,191,this._ctx);if(la_===1){this.state=1502;this.noPointerAbstractDeclarator(0);}this.state=1505;this.parametersAndQualifiers();this.state=1506;this.trailingReturnType();break;case 3:this.enterOuterAlt(localctx,3);this.state=1508;this.abstractPackDeclarator();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}pointerAbstractDeclarator(){let localctx=new PointerAbstractDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,250,CPP14Parser.RULE_pointerAbstractDeclarator);var _la=0;// Token type
try{this.state=1520;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftParen:case CPP14Parser.LeftBracket:this.enterOuterAlt(localctx,1);this.state=1511;this.noPointerAbstractDeclarator(0);break;case CPP14Parser.Decltype:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.AndAnd:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,2);this.state=1513;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=1512;this.pointerOperator();this.state=1515;this._errHandler.sync(this);_la=this._input.LA(1);}while(_la===CPP14Parser.Decltype||(_la-93&~0x1f)==0&&(1<<_la-93&(1<<CPP14Parser.Star-93|1<<CPP14Parser.And-93|1<<CPP14Parser.AndAnd-93))!==0||_la===CPP14Parser.Doublecolon||_la===CPP14Parser.Identifier);this.state=1518;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,194,this._ctx);if(la_===1){this.state=1517;this.noPointerAbstractDeclarator(0);}break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}noPointerAbstractDeclarator(_p){if(_p===undefined){_p=0;}const _parentctx=this._ctx;const _parentState=this.state;let localctx=new NoPointerAbstractDeclaratorContext(this,this._ctx,_parentState);let _prevctx=localctx;const _startState=252;this.enterRecursionRule(localctx,252,CPP14Parser.RULE_noPointerAbstractDeclarator,_p);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1536;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,198,this._ctx);switch(la_){case 1:this.state=1523;this.parametersAndQualifiers();break;case 2:this.state=1524;this.match(CPP14Parser.LeftBracket);this.state=1526;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-75&~0x1f)==0&&(1<<_la-75&(1<<CPP14Parser.Typeid_-75|1<<CPP14Parser.Typename_-75|1<<CPP14Parser.Unsigned-75|1<<CPP14Parser.Void-75|1<<CPP14Parser.Wchar-75|1<<CPP14Parser.LeftParen-75|1<<CPP14Parser.LeftBracket-75|1<<CPP14Parser.Plus-75|1<<CPP14Parser.Minus-75|1<<CPP14Parser.Star-75|1<<CPP14Parser.And-75|1<<CPP14Parser.Or-75|1<<CPP14Parser.Tilde-75|1<<CPP14Parser.Not-75))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=1525;this.constantExpression();}this.state=1528;this.match(CPP14Parser.RightBracket);this.state=1530;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,197,this._ctx);if(la_===1){this.state=1529;this.attributeSpecifierSeq();}break;case 3:this.state=1532;this.match(CPP14Parser.LeftParen);this.state=1533;this.pointerAbstractDeclarator();this.state=1534;this.match(CPP14Parser.RightParen);break;}this._ctx.stop=this._input.LT(-1);this.state=1553;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,202,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new NoPointerAbstractDeclaratorContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,CPP14Parser.RULE_noPointerAbstractDeclarator);this.state=1538;if(!this.precpred(this._ctx,4)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 4)");}this.state=1549;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,201,this._ctx);switch(la_){case 1:this.state=1539;this.parametersAndQualifiers();break;case 2:this.state=1540;this.noPointerAbstractDeclarator(0);this.state=1541;this.match(CPP14Parser.LeftBracket);this.state=1543;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-75&~0x1f)==0&&(1<<_la-75&(1<<CPP14Parser.Typeid_-75|1<<CPP14Parser.Typename_-75|1<<CPP14Parser.Unsigned-75|1<<CPP14Parser.Void-75|1<<CPP14Parser.Wchar-75|1<<CPP14Parser.LeftParen-75|1<<CPP14Parser.LeftBracket-75|1<<CPP14Parser.Plus-75|1<<CPP14Parser.Minus-75|1<<CPP14Parser.Star-75|1<<CPP14Parser.And-75|1<<CPP14Parser.Or-75|1<<CPP14Parser.Tilde-75|1<<CPP14Parser.Not-75))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=1542;this.constantExpression();}this.state=1545;this.match(CPP14Parser.RightBracket);this.state=1547;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,200,this._ctx);if(la_===1){this.state=1546;this.attributeSpecifierSeq();}break;}}this.state=1555;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,202,this._ctx);}}catch(error){if(error instanceof _antlr.default.error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}abstractPackDeclarator(){let localctx=new AbstractPackDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,254,CPP14Parser.RULE_abstractPackDeclarator);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1559;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Decltype||(_la-93&~0x1f)==0&&(1<<_la-93&(1<<CPP14Parser.Star-93|1<<CPP14Parser.And-93|1<<CPP14Parser.AndAnd-93))!==0||_la===CPP14Parser.Doublecolon||_la===CPP14Parser.Identifier){this.state=1556;this.pointerOperator();this.state=1561;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1562;this.noPointerAbstractPackDeclarator(0);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}noPointerAbstractPackDeclarator(_p){if(_p===undefined){_p=0;}const _parentctx=this._ctx;const _parentState=this.state;let localctx=new NoPointerAbstractPackDeclaratorContext(this,this._ctx,_parentState);let _prevctx=localctx;const _startState=256;this.enterRecursionRule(localctx,256,CPP14Parser.RULE_noPointerAbstractPackDeclarator,_p);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1565;this.match(CPP14Parser.Ellipsis);this._ctx.stop=this._input.LT(-1);this.state=1581;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,207,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new NoPointerAbstractPackDeclaratorContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,CPP14Parser.RULE_noPointerAbstractPackDeclarator);this.state=1567;if(!this.precpred(this._ctx,2)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 2)");}this.state=1577;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftParen:this.state=1568;this.parametersAndQualifiers();break;case CPP14Parser.LeftBracket:this.state=1569;this.match(CPP14Parser.LeftBracket);this.state=1571;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-75&~0x1f)==0&&(1<<_la-75&(1<<CPP14Parser.Typeid_-75|1<<CPP14Parser.Typename_-75|1<<CPP14Parser.Unsigned-75|1<<CPP14Parser.Void-75|1<<CPP14Parser.Wchar-75|1<<CPP14Parser.LeftParen-75|1<<CPP14Parser.LeftBracket-75|1<<CPP14Parser.Plus-75|1<<CPP14Parser.Minus-75|1<<CPP14Parser.Star-75|1<<CPP14Parser.And-75|1<<CPP14Parser.Or-75|1<<CPP14Parser.Tilde-75|1<<CPP14Parser.Not-75))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=1570;this.constantExpression();}this.state=1573;this.match(CPP14Parser.RightBracket);this.state=1575;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,205,this._ctx);if(la_===1){this.state=1574;this.attributeSpecifierSeq();}break;default:throw new _antlr.default.error.NoViableAltException(this);}}this.state=1583;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,207,this._ctx);}}catch(error){if(error instanceof _antlr.default.error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}parameterDeclarationClause(){let localctx=new ParameterDeclarationClauseContext(this,this._ctx,this.state);this.enterRule(localctx,258,CPP14Parser.RULE_parameterDeclarationClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1584;this.parameterDeclarationList();this.state=1589;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Comma||_la===CPP14Parser.Ellipsis){this.state=1586;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Comma){this.state=1585;this.match(CPP14Parser.Comma);}this.state=1588;this.match(CPP14Parser.Ellipsis);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}parameterDeclarationList(){let localctx=new ParameterDeclarationListContext(this,this._ctx,this.state);this.enterRule(localctx,260,CPP14Parser.RULE_parameterDeclarationList);try{this.enterOuterAlt(localctx,1);this.state=1591;this.parameterDeclaration();this.state=1596;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,210,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1592;this.match(CPP14Parser.Comma);this.state=1593;this.parameterDeclaration();}this.state=1598;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,210,this._ctx);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}parameterDeclaration(){let localctx=new ParameterDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,262,CPP14Parser.RULE_parameterDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1600;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1599;this.attributeSpecifierSeq();}this.state=1602;this.declSpecifierSeq();this.state=1607;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,213,this._ctx);switch(la_){case 1:this.state=1603;this.declarator();break;case 2:this.state=1605;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,212,this._ctx);if(la_===1){this.state=1604;this.abstractDeclarator();}break;}this.state=1611;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Assign){this.state=1609;this.match(CPP14Parser.Assign);this.state=1610;this.initializerClause();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}functionDefinition(){let localctx=new FunctionDefinitionContext(this,this._ctx,this.state);this.enterRule(localctx,264,CPP14Parser.RULE_functionDefinition);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1614;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1613;this.attributeSpecifierSeq();}this.state=1617;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,216,this._ctx);if(la_===1){this.state=1616;this.declSpecifierSeq();}this.state=1619;this.declarator();this.state=1621;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Final||_la===CPP14Parser.Override){this.state=1620;this.virtualSpecifierSeq();}this.state=1623;this.functionBody();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}functionBody(){let localctx=new FunctionBodyContext(this,this._ctx,this.state);this.enterRule(localctx,266,CPP14Parser.RULE_functionBody);var _la=0;// Token type
try{this.state=1633;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftBrace:case CPP14Parser.Colon:this.enterOuterAlt(localctx,1);this.state=1626;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Colon){this.state=1625;this.constructorInitializer();}this.state=1628;this.compoundStatement();break;case CPP14Parser.Try:this.enterOuterAlt(localctx,2);this.state=1629;this.functionTryBlock();break;case CPP14Parser.Assign:this.enterOuterAlt(localctx,3);this.state=1630;this.match(CPP14Parser.Assign);this.state=1631;_la=this._input.LA(1);if(!(_la===CPP14Parser.Default||_la===CPP14Parser.Delete)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1632;this.match(CPP14Parser.Semi);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}initializer(){let localctx=new InitializerContext(this,this._ctx,this.state);this.enterRule(localctx,268,CPP14Parser.RULE_initializer);try{this.state=1640;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftBrace:case CPP14Parser.Assign:this.enterOuterAlt(localctx,1);this.state=1635;this.braceOrEqualInitializer();break;case CPP14Parser.LeftParen:this.enterOuterAlt(localctx,2);this.state=1636;this.match(CPP14Parser.LeftParen);this.state=1637;this.expressionList();this.state=1638;this.match(CPP14Parser.RightParen);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}braceOrEqualInitializer(){let localctx=new BraceOrEqualInitializerContext(this,this._ctx,this.state);this.enterRule(localctx,270,CPP14Parser.RULE_braceOrEqualInitializer);try{this.state=1645;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Assign:this.enterOuterAlt(localctx,1);this.state=1642;this.match(CPP14Parser.Assign);this.state=1643;this.initializerClause();break;case CPP14Parser.LeftBrace:this.enterOuterAlt(localctx,2);this.state=1644;this.bracedInitList();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}initializerClause(){let localctx=new InitializerClauseContext(this,this._ctx,this.state);this.enterRule(localctx,272,CPP14Parser.RULE_initializerClause);try{this.state=1649;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.IntegerLiteral:case CPP14Parser.CharacterLiteral:case CPP14Parser.FloatingLiteral:case CPP14Parser.StringLiteral:case CPP14Parser.BooleanLiteral:case CPP14Parser.PointerLiteral:case CPP14Parser.UserDefinedLiteral:case CPP14Parser.Alignof:case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Const_cast:case CPP14Parser.Decltype:case CPP14Parser.Delete:case CPP14Parser.Double:case CPP14Parser.Dynamic_cast:case CPP14Parser.Float:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.New:case CPP14Parser.Noexcept:case CPP14Parser.Operator:case CPP14Parser.Reinterpret_cast:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Sizeof:case CPP14Parser.Static_cast:case CPP14Parser.This:case CPP14Parser.Throw:case CPP14Parser.Typeid_:case CPP14Parser.Typename_:case CPP14Parser.Unsigned:case CPP14Parser.Void:case CPP14Parser.Wchar:case CPP14Parser.LeftParen:case CPP14Parser.LeftBracket:case CPP14Parser.Plus:case CPP14Parser.Minus:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.Or:case CPP14Parser.Tilde:case CPP14Parser.Not:case CPP14Parser.PlusPlus:case CPP14Parser.MinusMinus:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,1);this.state=1647;this.assignmentExpression();break;case CPP14Parser.LeftBrace:this.enterOuterAlt(localctx,2);this.state=1648;this.bracedInitList();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}initializerList(){let localctx=new InitializerListContext(this,this._ctx,this.state);this.enterRule(localctx,274,CPP14Parser.RULE_initializerList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1651;this.initializerClause();this.state=1653;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1652;this.match(CPP14Parser.Ellipsis);}this.state=1662;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,225,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1655;this.match(CPP14Parser.Comma);this.state=1656;this.initializerClause();this.state=1658;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1657;this.match(CPP14Parser.Ellipsis);}}this.state=1664;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,225,this._ctx);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}bracedInitList(){let localctx=new BracedInitListContext(this,this._ctx,this.state);this.enterRule(localctx,276,CPP14Parser.RULE_bracedInitList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1665;this.match(CPP14Parser.LeftBrace);this.state=1670;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-71&~0x1f)==0&&(1<<_la-71&(1<<CPP14Parser.Throw-71|1<<CPP14Parser.Typeid_-71|1<<CPP14Parser.Typename_-71|1<<CPP14Parser.Unsigned-71|1<<CPP14Parser.Void-71|1<<CPP14Parser.Wchar-71|1<<CPP14Parser.LeftParen-71|1<<CPP14Parser.LeftBracket-71|1<<CPP14Parser.LeftBrace-71|1<<CPP14Parser.Plus-71|1<<CPP14Parser.Minus-71|1<<CPP14Parser.Star-71|1<<CPP14Parser.And-71|1<<CPP14Parser.Or-71|1<<CPP14Parser.Tilde-71|1<<CPP14Parser.Not-71))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=1666;this.initializerList();this.state=1668;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Comma){this.state=1667;this.match(CPP14Parser.Comma);}}this.state=1672;this.match(CPP14Parser.RightBrace);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}className(){let localctx=new ClassNameContext(this,this._ctx,this.state);this.enterRule(localctx,278,CPP14Parser.RULE_className);try{this.state=1676;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,228,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1674;this.match(CPP14Parser.Identifier);break;case 2:this.enterOuterAlt(localctx,2);this.state=1675;this.simpleTemplateId();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classSpecifier(){let localctx=new ClassSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,280,CPP14Parser.RULE_classSpecifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1678;this.classHead();this.state=1679;this.match(CPP14Parser.LeftBrace);this.state=1681;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-10&~0x1f)==0&&(1<<_la-10&(1<<CPP14Parser.Alignas-10|1<<CPP14Parser.Auto-10|1<<CPP14Parser.Bool-10|1<<CPP14Parser.Char-10|1<<CPP14Parser.Char16-10|1<<CPP14Parser.Char32-10|1<<CPP14Parser.Class-10|1<<CPP14Parser.Const-10|1<<CPP14Parser.Constexpr-10|1<<CPP14Parser.Decltype-10|1<<CPP14Parser.Double-10|1<<CPP14Parser.Enum-10|1<<CPP14Parser.Explicit-10|1<<CPP14Parser.Extern-10|1<<CPP14Parser.Float-10|1<<CPP14Parser.Friend-10))!==0||(_la-44&~0x1f)==0&&(1<<_la-44&(1<<CPP14Parser.Inline-44|1<<CPP14Parser.Int-44|1<<CPP14Parser.Long-44|1<<CPP14Parser.Mutable-44|1<<CPP14Parser.Operator-44|1<<CPP14Parser.Private-44|1<<CPP14Parser.Protected-44|1<<CPP14Parser.Public-44|1<<CPP14Parser.Register-44|1<<CPP14Parser.Short-44|1<<CPP14Parser.Signed-44|1<<CPP14Parser.Static-44|1<<CPP14Parser.Static_assert-44|1<<CPP14Parser.Struct-44|1<<CPP14Parser.Template-44|1<<CPP14Parser.Thread_local-44|1<<CPP14Parser.Typedef-44))!==0||(_la-76&~0x1f)==0&&(1<<_la-76&(1<<CPP14Parser.Typename_-76|1<<CPP14Parser.Union-76|1<<CPP14Parser.Unsigned-76|1<<CPP14Parser.Using-76|1<<CPP14Parser.Virtual-76|1<<CPP14Parser.Void-76|1<<CPP14Parser.Volatile-76|1<<CPP14Parser.Wchar-76|1<<CPP14Parser.LeftParen-76|1<<CPP14Parser.LeftBracket-76|1<<CPP14Parser.Star-76|1<<CPP14Parser.And-76|1<<CPP14Parser.Tilde-76))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CPP14Parser.AndAnd-118|1<<CPP14Parser.Colon-118|1<<CPP14Parser.Doublecolon-118|1<<CPP14Parser.Semi-118|1<<CPP14Parser.Ellipsis-118|1<<CPP14Parser.Identifier-118))!==0){this.state=1680;this.memberSpecification();}this.state=1683;this.match(CPP14Parser.RightBrace);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classHead(){let localctx=new ClassHeadContext(this,this._ctx,this.state);this.enterRule(localctx,282,CPP14Parser.RULE_classHead);var _la=0;// Token type
try{this.state=1708;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Class:case CPP14Parser.Struct:this.enterOuterAlt(localctx,1);this.state=1685;this.classKey();this.state=1687;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1686;this.attributeSpecifierSeq();}this.state=1693;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Decltype||_la===CPP14Parser.Doublecolon||_la===CPP14Parser.Identifier){this.state=1689;this.classHeadName();this.state=1691;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Final){this.state=1690;this.classVirtSpecifier();}}this.state=1696;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Colon){this.state=1695;this.baseClause();}break;case CPP14Parser.Union:this.enterOuterAlt(localctx,2);this.state=1698;this.match(CPP14Parser.Union);this.state=1700;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1699;this.attributeSpecifierSeq();}this.state=1706;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Decltype||_la===CPP14Parser.Doublecolon||_la===CPP14Parser.Identifier){this.state=1702;this.classHeadName();this.state=1704;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Final){this.state=1703;this.classVirtSpecifier();}}break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classHeadName(){let localctx=new ClassHeadNameContext(this,this._ctx,this.state);this.enterRule(localctx,284,CPP14Parser.RULE_classHeadName);try{this.enterOuterAlt(localctx,1);this.state=1711;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,238,this._ctx);if(la_===1){this.state=1710;this.nestedNameSpecifier(0);}this.state=1713;this.className();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classVirtSpecifier(){let localctx=new ClassVirtSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,286,CPP14Parser.RULE_classVirtSpecifier);try{this.enterOuterAlt(localctx,1);this.state=1715;this.match(CPP14Parser.Final);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classKey(){let localctx=new ClassKeyContext(this,this._ctx,this.state);this.enterRule(localctx,288,CPP14Parser.RULE_classKey);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1717;_la=this._input.LA(1);if(!(_la===CPP14Parser.Class||_la===CPP14Parser.Struct)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}memberSpecification(){let localctx=new MemberSpecificationContext(this,this._ctx,this.state);this.enterRule(localctx,290,CPP14Parser.RULE_memberSpecification);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1723;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=1723;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Alignas:case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Class:case CPP14Parser.Const:case CPP14Parser.Constexpr:case CPP14Parser.Decltype:case CPP14Parser.Double:case CPP14Parser.Enum:case CPP14Parser.Explicit:case CPP14Parser.Extern:case CPP14Parser.Float:case CPP14Parser.Friend:case CPP14Parser.Inline:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.Mutable:case CPP14Parser.Operator:case CPP14Parser.Register:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Static:case CPP14Parser.Static_assert:case CPP14Parser.Struct:case CPP14Parser.Template:case CPP14Parser.Thread_local:case CPP14Parser.Typedef:case CPP14Parser.Typename_:case CPP14Parser.Union:case CPP14Parser.Unsigned:case CPP14Parser.Using:case CPP14Parser.Virtual:case CPP14Parser.Void:case CPP14Parser.Volatile:case CPP14Parser.Wchar:case CPP14Parser.LeftParen:case CPP14Parser.LeftBracket:case CPP14Parser.Star:case CPP14Parser.And:case CPP14Parser.Tilde:case CPP14Parser.AndAnd:case CPP14Parser.Colon:case CPP14Parser.Doublecolon:case CPP14Parser.Semi:case CPP14Parser.Ellipsis:case CPP14Parser.Identifier:this.state=1719;this.memberdeclaration();break;case CPP14Parser.Private:case CPP14Parser.Protected:case CPP14Parser.Public:this.state=1720;this.accessSpecifier();this.state=1721;this.match(CPP14Parser.Colon);break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=1725;this._errHandler.sync(this);_la=this._input.LA(1);}while((_la-10&~0x1f)==0&&(1<<_la-10&(1<<CPP14Parser.Alignas-10|1<<CPP14Parser.Auto-10|1<<CPP14Parser.Bool-10|1<<CPP14Parser.Char-10|1<<CPP14Parser.Char16-10|1<<CPP14Parser.Char32-10|1<<CPP14Parser.Class-10|1<<CPP14Parser.Const-10|1<<CPP14Parser.Constexpr-10|1<<CPP14Parser.Decltype-10|1<<CPP14Parser.Double-10|1<<CPP14Parser.Enum-10|1<<CPP14Parser.Explicit-10|1<<CPP14Parser.Extern-10|1<<CPP14Parser.Float-10|1<<CPP14Parser.Friend-10))!==0||(_la-44&~0x1f)==0&&(1<<_la-44&(1<<CPP14Parser.Inline-44|1<<CPP14Parser.Int-44|1<<CPP14Parser.Long-44|1<<CPP14Parser.Mutable-44|1<<CPP14Parser.Operator-44|1<<CPP14Parser.Private-44|1<<CPP14Parser.Protected-44|1<<CPP14Parser.Public-44|1<<CPP14Parser.Register-44|1<<CPP14Parser.Short-44|1<<CPP14Parser.Signed-44|1<<CPP14Parser.Static-44|1<<CPP14Parser.Static_assert-44|1<<CPP14Parser.Struct-44|1<<CPP14Parser.Template-44|1<<CPP14Parser.Thread_local-44|1<<CPP14Parser.Typedef-44))!==0||(_la-76&~0x1f)==0&&(1<<_la-76&(1<<CPP14Parser.Typename_-76|1<<CPP14Parser.Union-76|1<<CPP14Parser.Unsigned-76|1<<CPP14Parser.Using-76|1<<CPP14Parser.Virtual-76|1<<CPP14Parser.Void-76|1<<CPP14Parser.Volatile-76|1<<CPP14Parser.Wchar-76|1<<CPP14Parser.LeftParen-76|1<<CPP14Parser.LeftBracket-76|1<<CPP14Parser.Star-76|1<<CPP14Parser.And-76|1<<CPP14Parser.Tilde-76))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CPP14Parser.AndAnd-118|1<<CPP14Parser.Colon-118|1<<CPP14Parser.Doublecolon-118|1<<CPP14Parser.Semi-118|1<<CPP14Parser.Ellipsis-118|1<<CPP14Parser.Identifier-118))!==0);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}memberdeclaration(){let localctx=new MemberdeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,292,CPP14Parser.RULE_memberdeclaration);var _la=0;// Token type
try{this.state=1743;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,244,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1728;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,241,this._ctx);if(la_===1){this.state=1727;this.attributeSpecifierSeq();}this.state=1731;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,242,this._ctx);if(la_===1){this.state=1730;this.declSpecifierSeq();}this.state=1734;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.Decltype||_la===CPP14Parser.Operator||(_la-85&~0x1f)==0&&(1<<_la-85&(1<<CPP14Parser.LeftParen-85|1<<CPP14Parser.LeftBracket-85|1<<CPP14Parser.Star-85|1<<CPP14Parser.And-85|1<<CPP14Parser.Tilde-85))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CPP14Parser.AndAnd-118|1<<CPP14Parser.Colon-118|1<<CPP14Parser.Doublecolon-118|1<<CPP14Parser.Ellipsis-118|1<<CPP14Parser.Identifier-118))!==0){this.state=1733;this.memberDeclaratorList();}this.state=1736;this.match(CPP14Parser.Semi);break;case 2:this.enterOuterAlt(localctx,2);this.state=1737;this.functionDefinition();break;case 3:this.enterOuterAlt(localctx,3);this.state=1738;this.usingDeclaration();break;case 4:this.enterOuterAlt(localctx,4);this.state=1739;this.staticAssertDeclaration();break;case 5:this.enterOuterAlt(localctx,5);this.state=1740;this.templateDeclaration();break;case 6:this.enterOuterAlt(localctx,6);this.state=1741;this.aliasDeclaration();break;case 7:this.enterOuterAlt(localctx,7);this.state=1742;this.emptyDeclaration();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}memberDeclaratorList(){let localctx=new MemberDeclaratorListContext(this,this._ctx,this.state);this.enterRule(localctx,294,CPP14Parser.RULE_memberDeclaratorList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1745;this.memberDeclarator();this.state=1750;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Comma){this.state=1746;this.match(CPP14Parser.Comma);this.state=1747;this.memberDeclarator();this.state=1752;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}memberDeclarator(){let localctx=new MemberDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,296,CPP14Parser.RULE_memberDeclarator);var _la=0;// Token type
try{this.state=1773;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,252,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1753;this.declarator();this.state=1763;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,249,this._ctx);switch(la_){case 1:this.state=1755;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Final||_la===CPP14Parser.Override){this.state=1754;this.virtualSpecifierSeq();}this.state=1758;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Assign){this.state=1757;this.pureSpecifier();}break;case 2:this.state=1761;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.LeftBrace||_la===CPP14Parser.Assign){this.state=1760;this.braceOrEqualInitializer();}break;}break;case 2:this.enterOuterAlt(localctx,2);this.state=1766;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Identifier){this.state=1765;this.match(CPP14Parser.Identifier);}this.state=1769;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1768;this.attributeSpecifierSeq();}this.state=1771;this.match(CPP14Parser.Colon);this.state=1772;this.constantExpression();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}virtualSpecifierSeq(){let localctx=new VirtualSpecifierSeqContext(this,this._ctx,this.state);this.enterRule(localctx,298,CPP14Parser.RULE_virtualSpecifierSeq);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1776;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=1775;this.virtualSpecifier();this.state=1778;this._errHandler.sync(this);_la=this._input.LA(1);}while(_la===CPP14Parser.Final||_la===CPP14Parser.Override);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}virtualSpecifier(){let localctx=new VirtualSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,300,CPP14Parser.RULE_virtualSpecifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1780;_la=this._input.LA(1);if(!(_la===CPP14Parser.Final||_la===CPP14Parser.Override)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}pureSpecifier(){let localctx=new PureSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,302,CPP14Parser.RULE_pureSpecifier);try{this.enterOuterAlt(localctx,1);this.state=1782;this.match(CPP14Parser.Assign);this.state=1783;localctx.val=this.match(CPP14Parser.OctalLiteral);if((localctx.val===null?null:localctx.val.text).compareTo("0")!=0)throw new InputMismatchException(this);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}baseClause(){let localctx=new BaseClauseContext(this,this._ctx,this.state);this.enterRule(localctx,304,CPP14Parser.RULE_baseClause);try{this.enterOuterAlt(localctx,1);this.state=1786;this.match(CPP14Parser.Colon);this.state=1787;this.baseSpecifierList();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}baseSpecifierList(){let localctx=new BaseSpecifierListContext(this,this._ctx,this.state);this.enterRule(localctx,306,CPP14Parser.RULE_baseSpecifierList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1789;this.baseSpecifier();this.state=1791;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1790;this.match(CPP14Parser.Ellipsis);}this.state=1800;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Comma){this.state=1793;this.match(CPP14Parser.Comma);this.state=1794;this.baseSpecifier();this.state=1796;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1795;this.match(CPP14Parser.Ellipsis);}this.state=1802;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}baseSpecifier(){let localctx=new BaseSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,308,CPP14Parser.RULE_baseSpecifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1804;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=1803;this.attributeSpecifierSeq();}this.state=1818;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Decltype:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.state=1806;this.baseTypeSpecifier();break;case CPP14Parser.Virtual:this.state=1807;this.match(CPP14Parser.Virtual);this.state=1809;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CPP14Parser.Private-54|1<<CPP14Parser.Protected-54|1<<CPP14Parser.Public-54))!==0){this.state=1808;this.accessSpecifier();}this.state=1811;this.baseTypeSpecifier();break;case CPP14Parser.Private:case CPP14Parser.Protected:case CPP14Parser.Public:this.state=1812;this.accessSpecifier();this.state=1814;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Virtual){this.state=1813;this.match(CPP14Parser.Virtual);}this.state=1816;this.baseTypeSpecifier();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classOrDeclType(){let localctx=new ClassOrDeclTypeContext(this,this._ctx,this.state);this.enterRule(localctx,310,CPP14Parser.RULE_classOrDeclType);try{this.state=1825;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,262,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1821;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,261,this._ctx);if(la_===1){this.state=1820;this.nestedNameSpecifier(0);}this.state=1823;this.className();break;case 2:this.enterOuterAlt(localctx,2);this.state=1824;this.decltypeSpecifier();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}baseTypeSpecifier(){let localctx=new BaseTypeSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,312,CPP14Parser.RULE_baseTypeSpecifier);try{this.enterOuterAlt(localctx,1);this.state=1827;this.classOrDeclType();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}accessSpecifier(){let localctx=new AccessSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,314,CPP14Parser.RULE_accessSpecifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1829;_la=this._input.LA(1);if(!((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CPP14Parser.Private-54|1<<CPP14Parser.Protected-54|1<<CPP14Parser.Public-54))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}conversionFunctionId(){let localctx=new ConversionFunctionIdContext(this,this._ctx,this.state);this.enterRule(localctx,316,CPP14Parser.RULE_conversionFunctionId);try{this.enterOuterAlt(localctx,1);this.state=1831;this.match(CPP14Parser.Operator);this.state=1832;this.conversionTypeId();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}conversionTypeId(){let localctx=new ConversionTypeIdContext(this,this._ctx,this.state);this.enterRule(localctx,318,CPP14Parser.RULE_conversionTypeId);try{this.enterOuterAlt(localctx,1);this.state=1834;this.typeSpecifierSeq();this.state=1836;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,263,this._ctx);if(la_===1){this.state=1835;this.conversionDeclarator();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}conversionDeclarator(){let localctx=new ConversionDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,320,CPP14Parser.RULE_conversionDeclarator);try{this.enterOuterAlt(localctx,1);this.state=1838;this.pointerOperator();this.state=1840;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,264,this._ctx);if(la_===1){this.state=1839;this.conversionDeclarator();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}constructorInitializer(){let localctx=new ConstructorInitializerContext(this,this._ctx,this.state);this.enterRule(localctx,322,CPP14Parser.RULE_constructorInitializer);try{this.enterOuterAlt(localctx,1);this.state=1842;this.match(CPP14Parser.Colon);this.state=1843;this.memInitializerList();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}memInitializerList(){let localctx=new MemInitializerListContext(this,this._ctx,this.state);this.enterRule(localctx,324,CPP14Parser.RULE_memInitializerList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1845;this.memInitializer();this.state=1847;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1846;this.match(CPP14Parser.Ellipsis);}this.state=1856;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Comma){this.state=1849;this.match(CPP14Parser.Comma);this.state=1850;this.memInitializer();this.state=1852;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1851;this.match(CPP14Parser.Ellipsis);}this.state=1858;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}memInitializer(){let localctx=new MemInitializerContext(this,this._ctx,this.state);this.enterRule(localctx,326,CPP14Parser.RULE_memInitializer);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1859;this.meminitializerid();this.state=1866;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.LeftParen:this.state=1860;this.match(CPP14Parser.LeftParen);this.state=1862;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-71&~0x1f)==0&&(1<<_la-71&(1<<CPP14Parser.Throw-71|1<<CPP14Parser.Typeid_-71|1<<CPP14Parser.Typename_-71|1<<CPP14Parser.Unsigned-71|1<<CPP14Parser.Void-71|1<<CPP14Parser.Wchar-71|1<<CPP14Parser.LeftParen-71|1<<CPP14Parser.LeftBracket-71|1<<CPP14Parser.LeftBrace-71|1<<CPP14Parser.Plus-71|1<<CPP14Parser.Minus-71|1<<CPP14Parser.Star-71|1<<CPP14Parser.And-71|1<<CPP14Parser.Or-71|1<<CPP14Parser.Tilde-71|1<<CPP14Parser.Not-71))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=1861;this.expressionList();}this.state=1864;this.match(CPP14Parser.RightParen);break;case CPP14Parser.LeftBrace:this.state=1865;this.bracedInitList();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}meminitializerid(){let localctx=new MeminitializeridContext(this,this._ctx,this.state);this.enterRule(localctx,328,CPP14Parser.RULE_meminitializerid);try{this.state=1870;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,270,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1868;this.classOrDeclType();break;case 2:this.enterOuterAlt(localctx,2);this.state=1869;this.match(CPP14Parser.Identifier);break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}operatorFunctionId(){let localctx=new OperatorFunctionIdContext(this,this._ctx,this.state);this.enterRule(localctx,330,CPP14Parser.RULE_operatorFunctionId);try{this.enterOuterAlt(localctx,1);this.state=1872;this.match(CPP14Parser.Operator);this.state=1873;this.theOperator();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}literalOperatorId(){let localctx=new LiteralOperatorIdContext(this,this._ctx,this.state);this.enterRule(localctx,332,CPP14Parser.RULE_literalOperatorId);try{this.enterOuterAlt(localctx,1);this.state=1875;this.match(CPP14Parser.Operator);this.state=1879;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.StringLiteral:this.state=1876;this.match(CPP14Parser.StringLiteral);this.state=1877;this.match(CPP14Parser.Identifier);break;case CPP14Parser.UserDefinedStringLiteral:this.state=1878;this.match(CPP14Parser.UserDefinedStringLiteral);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}templateDeclaration(){let localctx=new TemplateDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,334,CPP14Parser.RULE_templateDeclaration);try{this.enterOuterAlt(localctx,1);this.state=1881;this.match(CPP14Parser.Template);this.state=1882;this.match(CPP14Parser.Less);this.state=1883;this.templateparameterList();this.state=1884;this.match(CPP14Parser.Greater);this.state=1885;this.declaration();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}templateparameterList(){let localctx=new TemplateparameterListContext(this,this._ctx,this.state);this.enterRule(localctx,336,CPP14Parser.RULE_templateparameterList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1887;this.templateParameter();this.state=1892;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Comma){this.state=1888;this.match(CPP14Parser.Comma);this.state=1889;this.templateParameter();this.state=1894;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}templateParameter(){let localctx=new TemplateParameterContext(this,this._ctx,this.state);this.enterRule(localctx,338,CPP14Parser.RULE_templateParameter);try{this.state=1897;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,273,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1895;this.typeParameter();break;case 2:this.enterOuterAlt(localctx,2);this.state=1896;this.parameterDeclaration();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeParameter(){let localctx=new TypeParameterContext(this,this._ctx,this.state);this.enterRule(localctx,340,CPP14Parser.RULE_typeParameter);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1908;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Class:case CPP14Parser.Template:this.state=1904;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Template){this.state=1899;this.match(CPP14Parser.Template);this.state=1900;this.match(CPP14Parser.Less);this.state=1901;this.templateparameterList();this.state=1902;this.match(CPP14Parser.Greater);}this.state=1906;this.match(CPP14Parser.Class);break;case CPP14Parser.Typename_:this.state=1907;this.match(CPP14Parser.Typename_);break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=1921;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,279,this._ctx);switch(la_){case 1:this.state=1911;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1910;this.match(CPP14Parser.Ellipsis);}this.state=1914;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Identifier){this.state=1913;this.match(CPP14Parser.Identifier);}break;case 2:this.state=1917;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Identifier){this.state=1916;this.match(CPP14Parser.Identifier);}this.state=1919;this.match(CPP14Parser.Assign);this.state=1920;this.theTypeId();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}simpleTemplateId(){let localctx=new SimpleTemplateIdContext(this,this._ctx,this.state);this.enterRule(localctx,342,CPP14Parser.RULE_simpleTemplateId);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1923;this.templateName();this.state=1924;this.match(CPP14Parser.Less);this.state=1926;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Class|1<<CPP14Parser.Const|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<CPP14Parser.Enum-33|1<<CPP14Parser.Float-33|1<<CPP14Parser.Int-33|1<<CPP14Parser.Long-33|1<<CPP14Parser.New-33|1<<CPP14Parser.Noexcept-33|1<<CPP14Parser.Operator-33|1<<CPP14Parser.Reinterpret_cast-33|1<<CPP14Parser.Short-33|1<<CPP14Parser.Signed-33|1<<CPP14Parser.Sizeof-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<CPP14Parser.Static_cast-65|1<<CPP14Parser.Struct-65|1<<CPP14Parser.This-65|1<<CPP14Parser.Typeid_-65|1<<CPP14Parser.Typename_-65|1<<CPP14Parser.Union-65|1<<CPP14Parser.Unsigned-65|1<<CPP14Parser.Void-65|1<<CPP14Parser.Volatile-65|1<<CPP14Parser.Wchar-65|1<<CPP14Parser.LeftParen-65|1<<CPP14Parser.LeftBracket-65|1<<CPP14Parser.Plus-65|1<<CPP14Parser.Minus-65|1<<CPP14Parser.Star-65))!==0||(_la-97&~0x1f)==0&&(1<<_la-97&(1<<CPP14Parser.And-97|1<<CPP14Parser.Or-97|1<<CPP14Parser.Tilde-97|1<<CPP14Parser.Not-97|1<<CPP14Parser.PlusPlus-97|1<<CPP14Parser.MinusMinus-97|1<<CPP14Parser.Doublecolon-97))!==0||_la===CPP14Parser.Identifier){this.state=1925;this.templateArgumentList();}this.state=1928;this.match(CPP14Parser.Greater);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}templateId(){let localctx=new TemplateIdContext(this,this._ctx,this.state);this.enterRule(localctx,344,CPP14Parser.RULE_templateId);var _la=0;// Token type
try{this.state=1941;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Identifier:this.enterOuterAlt(localctx,1);this.state=1930;this.simpleTemplateId();break;case CPP14Parser.Operator:this.enterOuterAlt(localctx,2);this.state=1933;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,281,this._ctx);switch(la_){case 1:this.state=1931;this.operatorFunctionId();break;case 2:this.state=1932;this.literalOperatorId();break;}this.state=1935;this.match(CPP14Parser.Less);this.state=1937;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Class|1<<CPP14Parser.Const|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<CPP14Parser.Enum-33|1<<CPP14Parser.Float-33|1<<CPP14Parser.Int-33|1<<CPP14Parser.Long-33|1<<CPP14Parser.New-33|1<<CPP14Parser.Noexcept-33|1<<CPP14Parser.Operator-33|1<<CPP14Parser.Reinterpret_cast-33|1<<CPP14Parser.Short-33|1<<CPP14Parser.Signed-33|1<<CPP14Parser.Sizeof-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<CPP14Parser.Static_cast-65|1<<CPP14Parser.Struct-65|1<<CPP14Parser.This-65|1<<CPP14Parser.Typeid_-65|1<<CPP14Parser.Typename_-65|1<<CPP14Parser.Union-65|1<<CPP14Parser.Unsigned-65|1<<CPP14Parser.Void-65|1<<CPP14Parser.Volatile-65|1<<CPP14Parser.Wchar-65|1<<CPP14Parser.LeftParen-65|1<<CPP14Parser.LeftBracket-65|1<<CPP14Parser.Plus-65|1<<CPP14Parser.Minus-65|1<<CPP14Parser.Star-65))!==0||(_la-97&~0x1f)==0&&(1<<_la-97&(1<<CPP14Parser.And-97|1<<CPP14Parser.Or-97|1<<CPP14Parser.Tilde-97|1<<CPP14Parser.Not-97|1<<CPP14Parser.PlusPlus-97|1<<CPP14Parser.MinusMinus-97|1<<CPP14Parser.Doublecolon-97))!==0||_la===CPP14Parser.Identifier){this.state=1936;this.templateArgumentList();}this.state=1939;this.match(CPP14Parser.Greater);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}templateName(){let localctx=new TemplateNameContext(this,this._ctx,this.state);this.enterRule(localctx,346,CPP14Parser.RULE_templateName);try{this.enterOuterAlt(localctx,1);this.state=1943;this.match(CPP14Parser.Identifier);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}templateArgumentList(){let localctx=new TemplateArgumentListContext(this,this._ctx,this.state);this.enterRule(localctx,348,CPP14Parser.RULE_templateArgumentList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1945;this.templateArgument();this.state=1947;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1946;this.match(CPP14Parser.Ellipsis);}this.state=1956;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Comma){this.state=1949;this.match(CPP14Parser.Comma);this.state=1950;this.templateArgument();this.state=1952;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=1951;this.match(CPP14Parser.Ellipsis);}this.state=1958;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}templateArgument(){let localctx=new TemplateArgumentContext(this,this._ctx,this.state);this.enterRule(localctx,350,CPP14Parser.RULE_templateArgument);try{this.state=1962;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,287,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1959;this.theTypeId();break;case 2:this.enterOuterAlt(localctx,2);this.state=1960;this.constantExpression();break;case 3:this.enterOuterAlt(localctx,3);this.state=1961;this.idExpression();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeNameSpecifier(){let localctx=new TypeNameSpecifierContext(this,this._ctx,this.state);this.enterRule(localctx,352,CPP14Parser.RULE_typeNameSpecifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1964;this.match(CPP14Parser.Typename_);this.state=1965;this.nestedNameSpecifier(0);this.state=1971;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,289,this._ctx);switch(la_){case 1:this.state=1966;this.match(CPP14Parser.Identifier);break;case 2:this.state=1968;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Template){this.state=1967;this.match(CPP14Parser.Template);}this.state=1970;this.simpleTemplateId();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}explicitInstantiation(){let localctx=new ExplicitInstantiationContext(this,this._ctx,this.state);this.enterRule(localctx,354,CPP14Parser.RULE_explicitInstantiation);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1974;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Extern){this.state=1973;this.match(CPP14Parser.Extern);}this.state=1976;this.match(CPP14Parser.Template);this.state=1977;this.declaration();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}explicitSpecialization(){let localctx=new ExplicitSpecializationContext(this,this._ctx,this.state);this.enterRule(localctx,356,CPP14Parser.RULE_explicitSpecialization);try{this.enterOuterAlt(localctx,1);this.state=1979;this.match(CPP14Parser.Template);this.state=1980;this.match(CPP14Parser.Less);this.state=1981;this.match(CPP14Parser.Greater);this.state=1982;this.declaration();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}tryBlock(){let localctx=new TryBlockContext(this,this._ctx,this.state);this.enterRule(localctx,358,CPP14Parser.RULE_tryBlock);try{this.enterOuterAlt(localctx,1);this.state=1984;this.match(CPP14Parser.Try);this.state=1985;this.compoundStatement();this.state=1986;this.handlerSeq();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}functionTryBlock(){let localctx=new FunctionTryBlockContext(this,this._ctx,this.state);this.enterRule(localctx,360,CPP14Parser.RULE_functionTryBlock);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1988;this.match(CPP14Parser.Try);this.state=1990;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Colon){this.state=1989;this.constructorInitializer();}this.state=1992;this.compoundStatement();this.state=1993;this.handlerSeq();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}handlerSeq(){let localctx=new HandlerSeqContext(this,this._ctx,this.state);this.enterRule(localctx,362,CPP14Parser.RULE_handlerSeq);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1996;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=1995;this.handler();this.state=1998;this._errHandler.sync(this);_la=this._input.LA(1);}while(_la===CPP14Parser.Catch);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}handler(){let localctx=new HandlerContext(this,this._ctx,this.state);this.enterRule(localctx,364,CPP14Parser.RULE_handler);try{this.enterOuterAlt(localctx,1);this.state=2000;this.match(CPP14Parser.Catch);this.state=2001;this.match(CPP14Parser.LeftParen);this.state=2002;this.exceptionDeclaration();this.state=2003;this.match(CPP14Parser.RightParen);this.state=2004;this.compoundStatement();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}exceptionDeclaration(){let localctx=new ExceptionDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,366,CPP14Parser.RULE_exceptionDeclaration);var _la=0;// Token type
try{this.state=2015;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Alignas:case CPP14Parser.Auto:case CPP14Parser.Bool:case CPP14Parser.Char:case CPP14Parser.Char16:case CPP14Parser.Char32:case CPP14Parser.Class:case CPP14Parser.Const:case CPP14Parser.Decltype:case CPP14Parser.Double:case CPP14Parser.Enum:case CPP14Parser.Float:case CPP14Parser.Int:case CPP14Parser.Long:case CPP14Parser.Short:case CPP14Parser.Signed:case CPP14Parser.Struct:case CPP14Parser.Typename_:case CPP14Parser.Union:case CPP14Parser.Unsigned:case CPP14Parser.Void:case CPP14Parser.Volatile:case CPP14Parser.Wchar:case CPP14Parser.LeftBracket:case CPP14Parser.Doublecolon:case CPP14Parser.Identifier:this.enterOuterAlt(localctx,1);this.state=2007;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Alignas||_la===CPP14Parser.LeftBracket){this.state=2006;this.attributeSpecifierSeq();}this.state=2009;this.typeSpecifierSeq();this.state=2012;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,294,this._ctx);if(la_===1){this.state=2010;this.declarator();}else if(la_===2){this.state=2011;this.abstractDeclarator();}break;case CPP14Parser.Ellipsis:this.enterOuterAlt(localctx,2);this.state=2014;this.match(CPP14Parser.Ellipsis);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}throwExpression(){let localctx=new ThrowExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,368,CPP14Parser.RULE_throwExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2017;this.match(CPP14Parser.Throw);this.state=2019;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral|1<<CPP14Parser.Alignof|1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Const_cast|1<<CPP14Parser.Decltype|1<<CPP14Parser.Delete|1<<CPP14Parser.Double|1<<CPP14Parser.Dynamic_cast))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<CPP14Parser.Float-39|1<<CPP14Parser.Int-39|1<<CPP14Parser.Long-39|1<<CPP14Parser.New-39|1<<CPP14Parser.Noexcept-39|1<<CPP14Parser.Operator-39|1<<CPP14Parser.Reinterpret_cast-39|1<<CPP14Parser.Short-39|1<<CPP14Parser.Signed-39|1<<CPP14Parser.Sizeof-39|1<<CPP14Parser.Static_cast-39|1<<CPP14Parser.This-39))!==0||(_la-71&~0x1f)==0&&(1<<_la-71&(1<<CPP14Parser.Throw-71|1<<CPP14Parser.Typeid_-71|1<<CPP14Parser.Typename_-71|1<<CPP14Parser.Unsigned-71|1<<CPP14Parser.Void-71|1<<CPP14Parser.Wchar-71|1<<CPP14Parser.LeftParen-71|1<<CPP14Parser.LeftBracket-71|1<<CPP14Parser.Plus-71|1<<CPP14Parser.Minus-71|1<<CPP14Parser.Star-71|1<<CPP14Parser.And-71|1<<CPP14Parser.Or-71|1<<CPP14Parser.Tilde-71|1<<CPP14Parser.Not-71))!==0||(_la-120&~0x1f)==0&&(1<<_la-120&(1<<CPP14Parser.PlusPlus-120|1<<CPP14Parser.MinusMinus-120|1<<CPP14Parser.Doublecolon-120|1<<CPP14Parser.Identifier-120))!==0){this.state=2018;this.assignmentExpression();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}exceptionSpecification(){let localctx=new ExceptionSpecificationContext(this,this._ctx,this.state);this.enterRule(localctx,370,CPP14Parser.RULE_exceptionSpecification);try{this.state=2023;this._errHandler.sync(this);switch(this._input.LA(1)){case CPP14Parser.Throw:this.enterOuterAlt(localctx,1);this.state=2021;this.dynamicExceptionSpecification();break;case CPP14Parser.Noexcept:this.enterOuterAlt(localctx,2);this.state=2022;this.noeExceptSpecification();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}dynamicExceptionSpecification(){let localctx=new DynamicExceptionSpecificationContext(this,this._ctx,this.state);this.enterRule(localctx,372,CPP14Parser.RULE_dynamicExceptionSpecification);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2025;this.match(CPP14Parser.Throw);this.state=2026;this.match(CPP14Parser.LeftParen);this.state=2028;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.Auto|1<<CPP14Parser.Bool|1<<CPP14Parser.Char|1<<CPP14Parser.Char16|1<<CPP14Parser.Char32|1<<CPP14Parser.Class|1<<CPP14Parser.Const|1<<CPP14Parser.Decltype|1<<CPP14Parser.Double))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<CPP14Parser.Enum-33|1<<CPP14Parser.Float-33|1<<CPP14Parser.Int-33|1<<CPP14Parser.Long-33|1<<CPP14Parser.Short-33|1<<CPP14Parser.Signed-33))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CPP14Parser.Struct-66|1<<CPP14Parser.Typename_-66|1<<CPP14Parser.Union-66|1<<CPP14Parser.Unsigned-66|1<<CPP14Parser.Void-66|1<<CPP14Parser.Volatile-66|1<<CPP14Parser.Wchar-66))!==0||_la===CPP14Parser.Doublecolon||_la===CPP14Parser.Identifier){this.state=2027;this.typeIdList();}this.state=2030;this.match(CPP14Parser.RightParen);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeIdList(){let localctx=new TypeIdListContext(this,this._ctx,this.state);this.enterRule(localctx,374,CPP14Parser.RULE_typeIdList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2032;this.theTypeId();this.state=2034;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=2033;this.match(CPP14Parser.Ellipsis);}this.state=2043;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CPP14Parser.Comma){this.state=2036;this.match(CPP14Parser.Comma);this.state=2037;this.theTypeId();this.state=2039;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CPP14Parser.Ellipsis){this.state=2038;this.match(CPP14Parser.Ellipsis);}this.state=2045;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}noeExceptSpecification(){let localctx=new NoeExceptSpecificationContext(this,this._ctx,this.state);this.enterRule(localctx,376,CPP14Parser.RULE_noeExceptSpecification);try{this.state=2052;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,302,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=2046;this.match(CPP14Parser.Noexcept);this.state=2047;this.match(CPP14Parser.LeftParen);this.state=2048;this.constantExpression();this.state=2049;this.match(CPP14Parser.RightParen);break;case 2:this.enterOuterAlt(localctx,2);this.state=2051;this.match(CPP14Parser.Noexcept);break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}theOperator(){let localctx=new TheOperatorContext(this,this._ctx,this.state);this.enterRule(localctx,378,CPP14Parser.RULE_theOperator);try{this.state=2105;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,305,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=2054;this.match(CPP14Parser.New);this.state=2057;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,303,this._ctx);if(la_===1){this.state=2055;this.match(CPP14Parser.LeftBracket);this.state=2056;this.match(CPP14Parser.RightBracket);}break;case 2:this.enterOuterAlt(localctx,2);this.state=2059;this.match(CPP14Parser.Delete);this.state=2062;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,304,this._ctx);if(la_===1){this.state=2060;this.match(CPP14Parser.LeftBracket);this.state=2061;this.match(CPP14Parser.RightBracket);}break;case 3:this.enterOuterAlt(localctx,3);this.state=2064;this.match(CPP14Parser.Plus);break;case 4:this.enterOuterAlt(localctx,4);this.state=2065;this.match(CPP14Parser.Minus);break;case 5:this.enterOuterAlt(localctx,5);this.state=2066;this.match(CPP14Parser.Star);break;case 6:this.enterOuterAlt(localctx,6);this.state=2067;this.match(CPP14Parser.Div);break;case 7:this.enterOuterAlt(localctx,7);this.state=2068;this.match(CPP14Parser.Mod);break;case 8:this.enterOuterAlt(localctx,8);this.state=2069;this.match(CPP14Parser.Caret);break;case 9:this.enterOuterAlt(localctx,9);this.state=2070;this.match(CPP14Parser.And);break;case 10:this.enterOuterAlt(localctx,10);this.state=2071;this.match(CPP14Parser.Or);break;case 11:this.enterOuterAlt(localctx,11);this.state=2072;this.match(CPP14Parser.Tilde);break;case 12:this.enterOuterAlt(localctx,12);this.state=2073;this.match(CPP14Parser.Not);break;case 13:this.enterOuterAlt(localctx,13);this.state=2074;this.match(CPP14Parser.Assign);break;case 14:this.enterOuterAlt(localctx,14);this.state=2075;this.match(CPP14Parser.Greater);break;case 15:this.enterOuterAlt(localctx,15);this.state=2076;this.match(CPP14Parser.Less);break;case 16:this.enterOuterAlt(localctx,16);this.state=2077;this.match(CPP14Parser.GreaterEqual);break;case 17:this.enterOuterAlt(localctx,17);this.state=2078;this.match(CPP14Parser.PlusAssign);break;case 18:this.enterOuterAlt(localctx,18);this.state=2079;this.match(CPP14Parser.MinusAssign);break;case 19:this.enterOuterAlt(localctx,19);this.state=2080;this.match(CPP14Parser.StarAssign);break;case 20:this.enterOuterAlt(localctx,20);this.state=2081;this.match(CPP14Parser.ModAssign);break;case 21:this.enterOuterAlt(localctx,21);this.state=2082;this.match(CPP14Parser.XorAssign);break;case 22:this.enterOuterAlt(localctx,22);this.state=2083;this.match(CPP14Parser.AndAssign);break;case 23:this.enterOuterAlt(localctx,23);this.state=2084;this.match(CPP14Parser.OrAssign);break;case 24:this.enterOuterAlt(localctx,24);this.state=2085;this.match(CPP14Parser.Less);this.state=2086;this.match(CPP14Parser.Less);break;case 25:this.enterOuterAlt(localctx,25);this.state=2087;this.match(CPP14Parser.Greater);this.state=2088;this.match(CPP14Parser.Greater);break;case 26:this.enterOuterAlt(localctx,26);this.state=2089;this.match(CPP14Parser.RightShiftAssign);break;case 27:this.enterOuterAlt(localctx,27);this.state=2090;this.match(CPP14Parser.LeftShiftAssign);break;case 28:this.enterOuterAlt(localctx,28);this.state=2091;this.match(CPP14Parser.Equal);break;case 29:this.enterOuterAlt(localctx,29);this.state=2092;this.match(CPP14Parser.NotEqual);break;case 30:this.enterOuterAlt(localctx,30);this.state=2093;this.match(CPP14Parser.LessEqual);break;case 31:this.enterOuterAlt(localctx,31);this.state=2094;this.match(CPP14Parser.AndAnd);break;case 32:this.enterOuterAlt(localctx,32);this.state=2095;this.match(CPP14Parser.OrOr);break;case 33:this.enterOuterAlt(localctx,33);this.state=2096;this.match(CPP14Parser.PlusPlus);break;case 34:this.enterOuterAlt(localctx,34);this.state=2097;this.match(CPP14Parser.MinusMinus);break;case 35:this.enterOuterAlt(localctx,35);this.state=2098;this.match(CPP14Parser.Comma);break;case 36:this.enterOuterAlt(localctx,36);this.state=2099;this.match(CPP14Parser.ArrowStar);break;case 37:this.enterOuterAlt(localctx,37);this.state=2100;this.match(CPP14Parser.Arrow);break;case 38:this.enterOuterAlt(localctx,38);this.state=2101;this.match(CPP14Parser.LeftParen);this.state=2102;this.match(CPP14Parser.RightParen);break;case 39:this.enterOuterAlt(localctx,39);this.state=2103;this.match(CPP14Parser.LeftBracket);this.state=2104;this.match(CPP14Parser.RightBracket);break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}literal(){let localctx=new LiteralContext(this,this._ctx,this.state);this.enterRule(localctx,380,CPP14Parser.RULE_literal);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2107;_la=this._input.LA(1);if(!((_la&~0x1f)==0&&(1<<_la&(1<<CPP14Parser.IntegerLiteral|1<<CPP14Parser.CharacterLiteral|1<<CPP14Parser.FloatingLiteral|1<<CPP14Parser.StringLiteral|1<<CPP14Parser.BooleanLiteral|1<<CPP14Parser.PointerLiteral|1<<CPP14Parser.UserDefinedLiteral))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}}exports.default=CPP14Parser;CPP14Parser.EOF=_antlr.default.Token.EOF;CPP14Parser.IntegerLiteral=1;CPP14Parser.CharacterLiteral=2;CPP14Parser.FloatingLiteral=3;CPP14Parser.StringLiteral=4;CPP14Parser.BooleanLiteral=5;CPP14Parser.PointerLiteral=6;CPP14Parser.UserDefinedLiteral=7;CPP14Parser.MultiLineMacro=8;CPP14Parser.Directive=9;CPP14Parser.Alignas=10;CPP14Parser.Alignof=11;CPP14Parser.Asm=12;CPP14Parser.Auto=13;CPP14Parser.Bool=14;CPP14Parser.Break=15;CPP14Parser.Case=16;CPP14Parser.Catch=17;CPP14Parser.Char=18;CPP14Parser.Char16=19;CPP14Parser.Char32=20;CPP14Parser.Class=21;CPP14Parser.Const=22;CPP14Parser.Constexpr=23;CPP14Parser.Const_cast=24;CPP14Parser.Continue=25;CPP14Parser.Decltype=26;CPP14Parser.Default=27;CPP14Parser.Delete=28;CPP14Parser.Do=29;CPP14Parser.Double=30;CPP14Parser.Dynamic_cast=31;CPP14Parser.Else=32;CPP14Parser.Enum=33;CPP14Parser.Explicit=34;CPP14Parser.Export=35;CPP14Parser.Extern=36;CPP14Parser.False_=37;CPP14Parser.Final=38;CPP14Parser.Float=39;CPP14Parser.For=40;CPP14Parser.Friend=41;CPP14Parser.Goto=42;CPP14Parser.If=43;CPP14Parser.Inline=44;CPP14Parser.Int=45;CPP14Parser.Long=46;CPP14Parser.Mutable=47;CPP14Parser.Namespace=48;CPP14Parser.New=49;CPP14Parser.Noexcept=50;CPP14Parser.Nullptr=51;CPP14Parser.Operator=52;CPP14Parser.Override=53;CPP14Parser.Private=54;CPP14Parser.Protected=55;CPP14Parser.Public=56;CPP14Parser.Register=57;CPP14Parser.Reinterpret_cast=58;CPP14Parser.Return=59;CPP14Parser.Short=60;CPP14Parser.Signed=61;CPP14Parser.Sizeof=62;CPP14Parser.Static=63;CPP14Parser.Static_assert=64;CPP14Parser.Static_cast=65;CPP14Parser.Struct=66;CPP14Parser.Switch=67;CPP14Parser.Template=68;CPP14Parser.This=69;CPP14Parser.Thread_local=70;CPP14Parser.Throw=71;CPP14Parser.True_=72;CPP14Parser.Try=73;CPP14Parser.Typedef=74;CPP14Parser.Typeid_=75;CPP14Parser.Typename_=76;CPP14Parser.Union=77;CPP14Parser.Unsigned=78;CPP14Parser.Using=79;CPP14Parser.Virtual=80;CPP14Parser.Void=81;CPP14Parser.Volatile=82;CPP14Parser.Wchar=83;CPP14Parser.While=84;CPP14Parser.LeftParen=85;CPP14Parser.RightParen=86;CPP14Parser.LeftBracket=87;CPP14Parser.RightBracket=88;CPP14Parser.LeftBrace=89;CPP14Parser.RightBrace=90;CPP14Parser.Plus=91;CPP14Parser.Minus=92;CPP14Parser.Star=93;CPP14Parser.Div=94;CPP14Parser.Mod=95;CPP14Parser.Caret=96;CPP14Parser.And=97;CPP14Parser.Or=98;CPP14Parser.Tilde=99;CPP14Parser.Not=100;CPP14Parser.Assign=101;CPP14Parser.Less=102;CPP14Parser.Greater=103;CPP14Parser.PlusAssign=104;CPP14Parser.MinusAssign=105;CPP14Parser.StarAssign=106;CPP14Parser.DivAssign=107;CPP14Parser.ModAssign=108;CPP14Parser.XorAssign=109;CPP14Parser.AndAssign=110;CPP14Parser.OrAssign=111;CPP14Parser.LeftShiftAssign=112;CPP14Parser.RightShiftAssign=113;CPP14Parser.Equal=114;CPP14Parser.NotEqual=115;CPP14Parser.LessEqual=116;CPP14Parser.GreaterEqual=117;CPP14Parser.AndAnd=118;CPP14Parser.OrOr=119;CPP14Parser.PlusPlus=120;CPP14Parser.MinusMinus=121;CPP14Parser.Comma=122;CPP14Parser.ArrowStar=123;CPP14Parser.Arrow=124;CPP14Parser.Question=125;CPP14Parser.Colon=126;CPP14Parser.Doublecolon=127;CPP14Parser.Semi=128;CPP14Parser.Dot=129;CPP14Parser.DotStar=130;CPP14Parser.Ellipsis=131;CPP14Parser.Identifier=132;CPP14Parser.DecimalLiteral=133;CPP14Parser.OctalLiteral=134;CPP14Parser.HexadecimalLiteral=135;CPP14Parser.BinaryLiteral=136;CPP14Parser.Integersuffix=137;CPP14Parser.UserDefinedIntegerLiteral=138;CPP14Parser.UserDefinedFloatingLiteral=139;CPP14Parser.UserDefinedStringLiteral=140;CPP14Parser.UserDefinedCharacterLiteral=141;CPP14Parser.Whitespace=142;CPP14Parser.Newline=143;CPP14Parser.BlockComment=144;CPP14Parser.LineComment=145;CPP14Parser.RULE_translationUnit=0;CPP14Parser.RULE_primaryExpression=1;CPP14Parser.RULE_idExpression=2;CPP14Parser.RULE_unqualifiedId=3;CPP14Parser.RULE_qualifiedId=4;CPP14Parser.RULE_nestedNameSpecifier=5;CPP14Parser.RULE_lambdaExpression=6;CPP14Parser.RULE_lambdaIntroducer=7;CPP14Parser.RULE_lambdaCapture=8;CPP14Parser.RULE_captureDefault=9;CPP14Parser.RULE_captureList=10;CPP14Parser.RULE_capture=11;CPP14Parser.RULE_simpleCapture=12;CPP14Parser.RULE_initcapture=13;CPP14Parser.RULE_lambdaDeclarator=14;CPP14Parser.RULE_postfixExpression=15;CPP14Parser.RULE_typeIdOfTheTypeId=16;CPP14Parser.RULE_expressionList=17;CPP14Parser.RULE_pseudoDestructorName=18;CPP14Parser.RULE_unaryExpression=19;CPP14Parser.RULE_unaryOperator=20;CPP14Parser.RULE_newExpression=21;CPP14Parser.RULE_newPlacement=22;CPP14Parser.RULE_newTypeId=23;CPP14Parser.RULE_newDeclarator=24;CPP14Parser.RULE_noPointerNewDeclarator=25;CPP14Parser.RULE_newInitializer=26;CPP14Parser.RULE_deleteExpression=27;CPP14Parser.RULE_noExceptExpression=28;CPP14Parser.RULE_castExpression=29;CPP14Parser.RULE_pointerMemberExpression=30;CPP14Parser.RULE_multiplicativeExpression=31;CPP14Parser.RULE_additiveExpression=32;CPP14Parser.RULE_shiftExpression=33;CPP14Parser.RULE_shiftOperator=34;CPP14Parser.RULE_relationalExpression=35;CPP14Parser.RULE_equalityExpression=36;CPP14Parser.RULE_andExpression=37;CPP14Parser.RULE_exclusiveOrExpression=38;CPP14Parser.RULE_inclusiveOrExpression=39;CPP14Parser.RULE_logicalAndExpression=40;CPP14Parser.RULE_logicalOrExpression=41;CPP14Parser.RULE_conditionalExpression=42;CPP14Parser.RULE_assignmentExpression=43;CPP14Parser.RULE_assignmentOperator=44;CPP14Parser.RULE_expression=45;CPP14Parser.RULE_constantExpression=46;CPP14Parser.RULE_statement=47;CPP14Parser.RULE_labeledStatement=48;CPP14Parser.RULE_expressionStatement=49;CPP14Parser.RULE_compoundStatement=50;CPP14Parser.RULE_statementSeq=51;CPP14Parser.RULE_selectionStatement=52;CPP14Parser.RULE_condition=53;CPP14Parser.RULE_iterationStatement=54;CPP14Parser.RULE_forInitStatement=55;CPP14Parser.RULE_forRangeDeclaration=56;CPP14Parser.RULE_forRangeInitializer=57;CPP14Parser.RULE_jumpStatement=58;CPP14Parser.RULE_declarationStatement=59;CPP14Parser.RULE_declarationseq=60;CPP14Parser.RULE_declaration=61;CPP14Parser.RULE_blockDeclaration=62;CPP14Parser.RULE_aliasDeclaration=63;CPP14Parser.RULE_simpleDeclaration=64;CPP14Parser.RULE_staticAssertDeclaration=65;CPP14Parser.RULE_emptyDeclaration=66;CPP14Parser.RULE_attributeDeclaration=67;CPP14Parser.RULE_declSpecifier=68;CPP14Parser.RULE_declSpecifierSeq=69;CPP14Parser.RULE_storageClassSpecifier=70;CPP14Parser.RULE_functionSpecifier=71;CPP14Parser.RULE_typedefName=72;CPP14Parser.RULE_typeSpecifier=73;CPP14Parser.RULE_trailingTypeSpecifier=74;CPP14Parser.RULE_typeSpecifierSeq=75;CPP14Parser.RULE_trailingTypeSpecifierSeq=76;CPP14Parser.RULE_simpleTypeLengthModifier=77;CPP14Parser.RULE_simpleTypeSignednessModifier=78;CPP14Parser.RULE_simpleTypeSpecifier=79;CPP14Parser.RULE_theTypeName=80;CPP14Parser.RULE_decltypeSpecifier=81;CPP14Parser.RULE_elaboratedTypeSpecifier=82;CPP14Parser.RULE_enumName=83;CPP14Parser.RULE_enumSpecifier=84;CPP14Parser.RULE_enumHead=85;CPP14Parser.RULE_opaqueEnumDeclaration=86;CPP14Parser.RULE_enumkey=87;CPP14Parser.RULE_enumbase=88;CPP14Parser.RULE_enumeratorList=89;CPP14Parser.RULE_enumeratorDefinition=90;CPP14Parser.RULE_enumerator=91;CPP14Parser.RULE_namespaceName=92;CPP14Parser.RULE_originalNamespaceName=93;CPP14Parser.RULE_namespaceDefinition=94;CPP14Parser.RULE_namespaceAlias=95;CPP14Parser.RULE_namespaceAliasDefinition=96;CPP14Parser.RULE_qualifiednamespacespecifier=97;CPP14Parser.RULE_usingDeclaration=98;CPP14Parser.RULE_usingDirective=99;CPP14Parser.RULE_asmDefinition=100;CPP14Parser.RULE_linkageSpecification=101;CPP14Parser.RULE_attributeSpecifierSeq=102;CPP14Parser.RULE_attributeSpecifier=103;CPP14Parser.RULE_alignmentspecifier=104;CPP14Parser.RULE_attributeList=105;CPP14Parser.RULE_attribute=106;CPP14Parser.RULE_attributeNamespace=107;CPP14Parser.RULE_attributeArgumentClause=108;CPP14Parser.RULE_balancedTokenSeq=109;CPP14Parser.RULE_balancedtoken=110;CPP14Parser.RULE_initDeclaratorList=111;CPP14Parser.RULE_initDeclarator=112;CPP14Parser.RULE_declarator=113;CPP14Parser.RULE_pointerDeclarator=114;CPP14Parser.RULE_noPointerDeclarator=115;CPP14Parser.RULE_parametersAndQualifiers=116;CPP14Parser.RULE_trailingReturnType=117;CPP14Parser.RULE_pointerOperator=118;CPP14Parser.RULE_cvqualifierseq=119;CPP14Parser.RULE_cvQualifier=120;CPP14Parser.RULE_refqualifier=121;CPP14Parser.RULE_declaratorid=122;CPP14Parser.RULE_theTypeId=123;CPP14Parser.RULE_abstractDeclarator=124;CPP14Parser.RULE_pointerAbstractDeclarator=125;CPP14Parser.RULE_noPointerAbstractDeclarator=126;CPP14Parser.RULE_abstractPackDeclarator=127;CPP14Parser.RULE_noPointerAbstractPackDeclarator=128;CPP14Parser.RULE_parameterDeclarationClause=129;CPP14Parser.RULE_parameterDeclarationList=130;CPP14Parser.RULE_parameterDeclaration=131;CPP14Parser.RULE_functionDefinition=132;CPP14Parser.RULE_functionBody=133;CPP14Parser.RULE_initializer=134;CPP14Parser.RULE_braceOrEqualInitializer=135;CPP14Parser.RULE_initializerClause=136;CPP14Parser.RULE_initializerList=137;CPP14Parser.RULE_bracedInitList=138;CPP14Parser.RULE_className=139;CPP14Parser.RULE_classSpecifier=140;CPP14Parser.RULE_classHead=141;CPP14Parser.RULE_classHeadName=142;CPP14Parser.RULE_classVirtSpecifier=143;CPP14Parser.RULE_classKey=144;CPP14Parser.RULE_memberSpecification=145;CPP14Parser.RULE_memberdeclaration=146;CPP14Parser.RULE_memberDeclaratorList=147;CPP14Parser.RULE_memberDeclarator=148;CPP14Parser.RULE_virtualSpecifierSeq=149;CPP14Parser.RULE_virtualSpecifier=150;CPP14Parser.RULE_pureSpecifier=151;CPP14Parser.RULE_baseClause=152;CPP14Parser.RULE_baseSpecifierList=153;CPP14Parser.RULE_baseSpecifier=154;CPP14Parser.RULE_classOrDeclType=155;CPP14Parser.RULE_baseTypeSpecifier=156;CPP14Parser.RULE_accessSpecifier=157;CPP14Parser.RULE_conversionFunctionId=158;CPP14Parser.RULE_conversionTypeId=159;CPP14Parser.RULE_conversionDeclarator=160;CPP14Parser.RULE_constructorInitializer=161;CPP14Parser.RULE_memInitializerList=162;CPP14Parser.RULE_memInitializer=163;CPP14Parser.RULE_meminitializerid=164;CPP14Parser.RULE_operatorFunctionId=165;CPP14Parser.RULE_literalOperatorId=166;CPP14Parser.RULE_templateDeclaration=167;CPP14Parser.RULE_templateparameterList=168;CPP14Parser.RULE_templateParameter=169;CPP14Parser.RULE_typeParameter=170;CPP14Parser.RULE_simpleTemplateId=171;CPP14Parser.RULE_templateId=172;CPP14Parser.RULE_templateName=173;CPP14Parser.RULE_templateArgumentList=174;CPP14Parser.RULE_templateArgument=175;CPP14Parser.RULE_typeNameSpecifier=176;CPP14Parser.RULE_explicitInstantiation=177;CPP14Parser.RULE_explicitSpecialization=178;CPP14Parser.RULE_tryBlock=179;CPP14Parser.RULE_functionTryBlock=180;CPP14Parser.RULE_handlerSeq=181;CPP14Parser.RULE_handler=182;CPP14Parser.RULE_exceptionDeclaration=183;CPP14Parser.RULE_throwExpression=184;CPP14Parser.RULE_exceptionSpecification=185;CPP14Parser.RULE_dynamicExceptionSpecification=186;CPP14Parser.RULE_typeIdList=187;CPP14Parser.RULE_noeExceptSpecification=188;CPP14Parser.RULE_theOperator=189;CPP14Parser.RULE_literal=190;class TranslationUnitContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_translationUnit;}EOF(){return this.getToken(CPP14Parser.EOF,0);}declarationseq(){return this.getTypedRuleContext(DeclarationseqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTranslationUnit(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTranslationUnit(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTranslationUnit(this);}else{return visitor.visitChildren(this);}}}class PrimaryExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_primaryExpression;}literal=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(LiteralContext);}else{return this.getTypedRuleContext(LiteralContext,i);}};This(){return this.getToken(CPP14Parser.This,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}idExpression(){return this.getTypedRuleContext(IdExpressionContext,0);}lambdaExpression(){return this.getTypedRuleContext(LambdaExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterPrimaryExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitPrimaryExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitPrimaryExpression(this);}else{return visitor.visitChildren(this);}}}class IdExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_idExpression;}unqualifiedId(){return this.getTypedRuleContext(UnqualifiedIdContext,0);}qualifiedId(){return this.getTypedRuleContext(QualifiedIdContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterIdExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitIdExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitIdExpression(this);}else{return visitor.visitChildren(this);}}}class UnqualifiedIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_unqualifiedId;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}operatorFunctionId(){return this.getTypedRuleContext(OperatorFunctionIdContext,0);}conversionFunctionId(){return this.getTypedRuleContext(ConversionFunctionIdContext,0);}literalOperatorId(){return this.getTypedRuleContext(LiteralOperatorIdContext,0);}Tilde(){return this.getToken(CPP14Parser.Tilde,0);}className(){return this.getTypedRuleContext(ClassNameContext,0);}decltypeSpecifier(){return this.getTypedRuleContext(DecltypeSpecifierContext,0);}templateId(){return this.getTypedRuleContext(TemplateIdContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterUnqualifiedId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitUnqualifiedId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitUnqualifiedId(this);}else{return visitor.visitChildren(this);}}}class QualifiedIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_qualifiedId;}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}unqualifiedId(){return this.getTypedRuleContext(UnqualifiedIdContext,0);}Template(){return this.getToken(CPP14Parser.Template,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterQualifiedId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitQualifiedId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitQualifiedId(this);}else{return visitor.visitChildren(this);}}}class NestedNameSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_nestedNameSpecifier;}Doublecolon(){return this.getToken(CPP14Parser.Doublecolon,0);}theTypeName(){return this.getTypedRuleContext(TheTypeNameContext,0);}namespaceName(){return this.getTypedRuleContext(NamespaceNameContext,0);}decltypeSpecifier(){return this.getTypedRuleContext(DecltypeSpecifierContext,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}simpleTemplateId(){return this.getTypedRuleContext(SimpleTemplateIdContext,0);}Template(){return this.getToken(CPP14Parser.Template,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNestedNameSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNestedNameSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNestedNameSpecifier(this);}else{return visitor.visitChildren(this);}}}class LambdaExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_lambdaExpression;}lambdaIntroducer(){return this.getTypedRuleContext(LambdaIntroducerContext,0);}compoundStatement(){return this.getTypedRuleContext(CompoundStatementContext,0);}lambdaDeclarator(){return this.getTypedRuleContext(LambdaDeclaratorContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterLambdaExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitLambdaExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitLambdaExpression(this);}else{return visitor.visitChildren(this);}}}class LambdaIntroducerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_lambdaIntroducer;}LeftBracket(){return this.getToken(CPP14Parser.LeftBracket,0);}RightBracket(){return this.getToken(CPP14Parser.RightBracket,0);}lambdaCapture(){return this.getTypedRuleContext(LambdaCaptureContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterLambdaIntroducer(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitLambdaIntroducer(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitLambdaIntroducer(this);}else{return visitor.visitChildren(this);}}}class LambdaCaptureContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_lambdaCapture;}captureList(){return this.getTypedRuleContext(CaptureListContext,0);}captureDefault(){return this.getTypedRuleContext(CaptureDefaultContext,0);}Comma(){return this.getToken(CPP14Parser.Comma,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterLambdaCapture(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitLambdaCapture(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitLambdaCapture(this);}else{return visitor.visitChildren(this);}}}class CaptureDefaultContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_captureDefault;}And(){return this.getToken(CPP14Parser.And,0);}Assign(){return this.getToken(CPP14Parser.Assign,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterCaptureDefault(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitCaptureDefault(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitCaptureDefault(this);}else{return visitor.visitChildren(this);}}}class CaptureListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_captureList;}capture=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CaptureContext);}else{return this.getTypedRuleContext(CaptureContext,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};Ellipsis(){return this.getToken(CPP14Parser.Ellipsis,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterCaptureList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitCaptureList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitCaptureList(this);}else{return visitor.visitChildren(this);}}}class CaptureContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_capture;}simpleCapture(){return this.getTypedRuleContext(SimpleCaptureContext,0);}initcapture(){return this.getTypedRuleContext(InitcaptureContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterCapture(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitCapture(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitCapture(this);}else{return visitor.visitChildren(this);}}}class SimpleCaptureContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_simpleCapture;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}And(){return this.getToken(CPP14Parser.And,0);}This(){return this.getToken(CPP14Parser.This,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterSimpleCapture(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitSimpleCapture(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitSimpleCapture(this);}else{return visitor.visitChildren(this);}}}class InitcaptureContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_initcapture;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}initializer(){return this.getTypedRuleContext(InitializerContext,0);}And(){return this.getToken(CPP14Parser.And,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterInitcapture(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitInitcapture(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitInitcapture(this);}else{return visitor.visitChildren(this);}}}class LambdaDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_lambdaDeclarator;}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}parameterDeclarationClause(){return this.getTypedRuleContext(ParameterDeclarationClauseContext,0);}Mutable(){return this.getToken(CPP14Parser.Mutable,0);}exceptionSpecification(){return this.getTypedRuleContext(ExceptionSpecificationContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}trailingReturnType(){return this.getTypedRuleContext(TrailingReturnTypeContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterLambdaDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitLambdaDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitLambdaDeclarator(this);}else{return visitor.visitChildren(this);}}}class PostfixExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_postfixExpression;}primaryExpression(){return this.getTypedRuleContext(PrimaryExpressionContext,0);}simpleTypeSpecifier(){return this.getTypedRuleContext(SimpleTypeSpecifierContext,0);}typeNameSpecifier(){return this.getTypedRuleContext(TypeNameSpecifierContext,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}bracedInitList(){return this.getTypedRuleContext(BracedInitListContext,0);}expressionList(){return this.getTypedRuleContext(ExpressionListContext,0);}Less(){return this.getToken(CPP14Parser.Less,0);}theTypeId(){return this.getTypedRuleContext(TheTypeIdContext,0);}Greater(){return this.getToken(CPP14Parser.Greater,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}Dynamic_cast(){return this.getToken(CPP14Parser.Dynamic_cast,0);}Static_cast(){return this.getToken(CPP14Parser.Static_cast,0);}Reinterpret_cast(){return this.getToken(CPP14Parser.Reinterpret_cast,0);}Const_cast(){return this.getToken(CPP14Parser.Const_cast,0);}typeIdOfTheTypeId(){return this.getTypedRuleContext(TypeIdOfTheTypeIdContext,0);}postfixExpression(){return this.getTypedRuleContext(PostfixExpressionContext,0);}LeftBracket(){return this.getToken(CPP14Parser.LeftBracket,0);}RightBracket(){return this.getToken(CPP14Parser.RightBracket,0);}Dot(){return this.getToken(CPP14Parser.Dot,0);}Arrow(){return this.getToken(CPP14Parser.Arrow,0);}idExpression(){return this.getTypedRuleContext(IdExpressionContext,0);}pseudoDestructorName(){return this.getTypedRuleContext(PseudoDestructorNameContext,0);}Template(){return this.getToken(CPP14Parser.Template,0);}PlusPlus(){return this.getToken(CPP14Parser.PlusPlus,0);}MinusMinus(){return this.getToken(CPP14Parser.MinusMinus,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterPostfixExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitPostfixExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitPostfixExpression(this);}else{return visitor.visitChildren(this);}}}class TypeIdOfTheTypeIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_typeIdOfTheTypeId;}Typeid_(){return this.getToken(CPP14Parser.Typeid_,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTypeIdOfTheTypeId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTypeIdOfTheTypeId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTypeIdOfTheTypeId(this);}else{return visitor.visitChildren(this);}}}class ExpressionListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_expressionList;}initializerList(){return this.getTypedRuleContext(InitializerListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterExpressionList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitExpressionList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitExpressionList(this);}else{return visitor.visitChildren(this);}}}class PseudoDestructorNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_pseudoDestructorName;}Tilde(){return this.getToken(CPP14Parser.Tilde,0);}theTypeName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TheTypeNameContext);}else{return this.getTypedRuleContext(TheTypeNameContext,i);}};nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}Doublecolon(){return this.getToken(CPP14Parser.Doublecolon,0);}Template(){return this.getToken(CPP14Parser.Template,0);}simpleTemplateId(){return this.getTypedRuleContext(SimpleTemplateIdContext,0);}decltypeSpecifier(){return this.getTypedRuleContext(DecltypeSpecifierContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterPseudoDestructorName(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitPseudoDestructorName(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitPseudoDestructorName(this);}else{return visitor.visitChildren(this);}}}class UnaryExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_unaryExpression;}postfixExpression(){return this.getTypedRuleContext(PostfixExpressionContext,0);}unaryExpression(){return this.getTypedRuleContext(UnaryExpressionContext,0);}PlusPlus(){return this.getToken(CPP14Parser.PlusPlus,0);}MinusMinus(){return this.getToken(CPP14Parser.MinusMinus,0);}unaryOperator(){return this.getTypedRuleContext(UnaryOperatorContext,0);}Sizeof(){return this.getToken(CPP14Parser.Sizeof,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}theTypeId(){return this.getTypedRuleContext(TheTypeIdContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}Ellipsis(){return this.getToken(CPP14Parser.Ellipsis,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}Alignof(){return this.getToken(CPP14Parser.Alignof,0);}noExceptExpression(){return this.getTypedRuleContext(NoExceptExpressionContext,0);}newExpression(){return this.getTypedRuleContext(NewExpressionContext,0);}deleteExpression(){return this.getTypedRuleContext(DeleteExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterUnaryExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitUnaryExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitUnaryExpression(this);}else{return visitor.visitChildren(this);}}}class UnaryOperatorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_unaryOperator;}Or(){return this.getToken(CPP14Parser.Or,0);}Star(){return this.getToken(CPP14Parser.Star,0);}And(){return this.getToken(CPP14Parser.And,0);}Plus(){return this.getToken(CPP14Parser.Plus,0);}Tilde(){return this.getToken(CPP14Parser.Tilde,0);}Minus(){return this.getToken(CPP14Parser.Minus,0);}Not(){return this.getToken(CPP14Parser.Not,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterUnaryOperator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitUnaryOperator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitUnaryOperator(this);}else{return visitor.visitChildren(this);}}}class NewExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_newExpression;}New(){return this.getToken(CPP14Parser.New,0);}newTypeId(){return this.getTypedRuleContext(NewTypeIdContext,0);}Doublecolon(){return this.getToken(CPP14Parser.Doublecolon,0);}newPlacement(){return this.getTypedRuleContext(NewPlacementContext,0);}newInitializer(){return this.getTypedRuleContext(NewInitializerContext,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}theTypeId(){return this.getTypedRuleContext(TheTypeIdContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNewExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNewExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNewExpression(this);}else{return visitor.visitChildren(this);}}}class NewPlacementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_newPlacement;}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}expressionList(){return this.getTypedRuleContext(ExpressionListContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNewPlacement(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNewPlacement(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNewPlacement(this);}else{return visitor.visitChildren(this);}}}class NewTypeIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_newTypeId;}typeSpecifierSeq(){return this.getTypedRuleContext(TypeSpecifierSeqContext,0);}newDeclarator(){return this.getTypedRuleContext(NewDeclaratorContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNewTypeId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNewTypeId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNewTypeId(this);}else{return visitor.visitChildren(this);}}}class NewDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_newDeclarator;}pointerOperator(){return this.getTypedRuleContext(PointerOperatorContext,0);}newDeclarator(){return this.getTypedRuleContext(NewDeclaratorContext,0);}noPointerNewDeclarator(){return this.getTypedRuleContext(NoPointerNewDeclaratorContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNewDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNewDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNewDeclarator(this);}else{return visitor.visitChildren(this);}}}class NoPointerNewDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_noPointerNewDeclarator;}LeftBracket(){return this.getToken(CPP14Parser.LeftBracket,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}RightBracket(){return this.getToken(CPP14Parser.RightBracket,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}noPointerNewDeclarator(){return this.getTypedRuleContext(NoPointerNewDeclaratorContext,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNoPointerNewDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNoPointerNewDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNoPointerNewDeclarator(this);}else{return visitor.visitChildren(this);}}}class NewInitializerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_newInitializer;}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}expressionList(){return this.getTypedRuleContext(ExpressionListContext,0);}bracedInitList(){return this.getTypedRuleContext(BracedInitListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNewInitializer(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNewInitializer(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNewInitializer(this);}else{return visitor.visitChildren(this);}}}class DeleteExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_deleteExpression;}Delete(){return this.getToken(CPP14Parser.Delete,0);}castExpression(){return this.getTypedRuleContext(CastExpressionContext,0);}Doublecolon(){return this.getToken(CPP14Parser.Doublecolon,0);}LeftBracket(){return this.getToken(CPP14Parser.LeftBracket,0);}RightBracket(){return this.getToken(CPP14Parser.RightBracket,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterDeleteExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitDeleteExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitDeleteExpression(this);}else{return visitor.visitChildren(this);}}}class NoExceptExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_noExceptExpression;}Noexcept(){return this.getToken(CPP14Parser.Noexcept,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNoExceptExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNoExceptExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNoExceptExpression(this);}else{return visitor.visitChildren(this);}}}class CastExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_castExpression;}unaryExpression(){return this.getTypedRuleContext(UnaryExpressionContext,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}theTypeId(){return this.getTypedRuleContext(TheTypeIdContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}castExpression(){return this.getTypedRuleContext(CastExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterCastExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitCastExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitCastExpression(this);}else{return visitor.visitChildren(this);}}}class PointerMemberExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_pointerMemberExpression;}castExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CastExpressionContext);}else{return this.getTypedRuleContext(CastExpressionContext,i);}};DotStar=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.DotStar);}else{return this.getToken(CPP14Parser.DotStar,i);}};ArrowStar=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.ArrowStar);}else{return this.getToken(CPP14Parser.ArrowStar,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterPointerMemberExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitPointerMemberExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitPointerMemberExpression(this);}else{return visitor.visitChildren(this);}}}class MultiplicativeExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_multiplicativeExpression;}pointerMemberExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PointerMemberExpressionContext);}else{return this.getTypedRuleContext(PointerMemberExpressionContext,i);}};Star=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Star);}else{return this.getToken(CPP14Parser.Star,i);}};Div=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Div);}else{return this.getToken(CPP14Parser.Div,i);}};Mod=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Mod);}else{return this.getToken(CPP14Parser.Mod,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterMultiplicativeExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitMultiplicativeExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitMultiplicativeExpression(this);}else{return visitor.visitChildren(this);}}}class AdditiveExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_additiveExpression;}multiplicativeExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(MultiplicativeExpressionContext);}else{return this.getTypedRuleContext(MultiplicativeExpressionContext,i);}};Plus=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Plus);}else{return this.getToken(CPP14Parser.Plus,i);}};Minus=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Minus);}else{return this.getToken(CPP14Parser.Minus,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAdditiveExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAdditiveExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAdditiveExpression(this);}else{return visitor.visitChildren(this);}}}class ShiftExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_shiftExpression;}additiveExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AdditiveExpressionContext);}else{return this.getTypedRuleContext(AdditiveExpressionContext,i);}};shiftOperator=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ShiftOperatorContext);}else{return this.getTypedRuleContext(ShiftOperatorContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterShiftExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitShiftExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitShiftExpression(this);}else{return visitor.visitChildren(this);}}}class ShiftOperatorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_shiftOperator;}Greater=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Greater);}else{return this.getToken(CPP14Parser.Greater,i);}};Less=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Less);}else{return this.getToken(CPP14Parser.Less,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterShiftOperator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitShiftOperator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitShiftOperator(this);}else{return visitor.visitChildren(this);}}}class RelationalExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_relationalExpression;}shiftExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ShiftExpressionContext);}else{return this.getTypedRuleContext(ShiftExpressionContext,i);}};Less=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Less);}else{return this.getToken(CPP14Parser.Less,i);}};Greater=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Greater);}else{return this.getToken(CPP14Parser.Greater,i);}};LessEqual=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.LessEqual);}else{return this.getToken(CPP14Parser.LessEqual,i);}};GreaterEqual=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.GreaterEqual);}else{return this.getToken(CPP14Parser.GreaterEqual,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterRelationalExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitRelationalExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitRelationalExpression(this);}else{return visitor.visitChildren(this);}}}class EqualityExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_equalityExpression;}relationalExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RelationalExpressionContext);}else{return this.getTypedRuleContext(RelationalExpressionContext,i);}};Equal=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Equal);}else{return this.getToken(CPP14Parser.Equal,i);}};NotEqual=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.NotEqual);}else{return this.getToken(CPP14Parser.NotEqual,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterEqualityExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitEqualityExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitEqualityExpression(this);}else{return visitor.visitChildren(this);}}}class AndExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_andExpression;}equalityExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(EqualityExpressionContext);}else{return this.getTypedRuleContext(EqualityExpressionContext,i);}};And=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.And);}else{return this.getToken(CPP14Parser.And,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAndExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAndExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAndExpression(this);}else{return visitor.visitChildren(this);}}}class ExclusiveOrExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_exclusiveOrExpression;}andExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AndExpressionContext);}else{return this.getTypedRuleContext(AndExpressionContext,i);}};Caret=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Caret);}else{return this.getToken(CPP14Parser.Caret,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterExclusiveOrExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitExclusiveOrExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitExclusiveOrExpression(this);}else{return visitor.visitChildren(this);}}}class InclusiveOrExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_inclusiveOrExpression;}exclusiveOrExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExclusiveOrExpressionContext);}else{return this.getTypedRuleContext(ExclusiveOrExpressionContext,i);}};Or=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Or);}else{return this.getToken(CPP14Parser.Or,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterInclusiveOrExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitInclusiveOrExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitInclusiveOrExpression(this);}else{return visitor.visitChildren(this);}}}class LogicalAndExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_logicalAndExpression;}inclusiveOrExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(InclusiveOrExpressionContext);}else{return this.getTypedRuleContext(InclusiveOrExpressionContext,i);}};AndAnd=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.AndAnd);}else{return this.getToken(CPP14Parser.AndAnd,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterLogicalAndExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitLogicalAndExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitLogicalAndExpression(this);}else{return visitor.visitChildren(this);}}}class LogicalOrExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_logicalOrExpression;}logicalAndExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(LogicalAndExpressionContext);}else{return this.getTypedRuleContext(LogicalAndExpressionContext,i);}};OrOr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.OrOr);}else{return this.getToken(CPP14Parser.OrOr,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterLogicalOrExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitLogicalOrExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitLogicalOrExpression(this);}else{return visitor.visitChildren(this);}}}class ConditionalExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_conditionalExpression;}logicalOrExpression(){return this.getTypedRuleContext(LogicalOrExpressionContext,0);}Question(){return this.getToken(CPP14Parser.Question,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}Colon(){return this.getToken(CPP14Parser.Colon,0);}assignmentExpression(){return this.getTypedRuleContext(AssignmentExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterConditionalExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitConditionalExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitConditionalExpression(this);}else{return visitor.visitChildren(this);}}}class AssignmentExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_assignmentExpression;}conditionalExpression(){return this.getTypedRuleContext(ConditionalExpressionContext,0);}logicalOrExpression(){return this.getTypedRuleContext(LogicalOrExpressionContext,0);}assignmentOperator(){return this.getTypedRuleContext(AssignmentOperatorContext,0);}initializerClause(){return this.getTypedRuleContext(InitializerClauseContext,0);}throwExpression(){return this.getTypedRuleContext(ThrowExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAssignmentExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAssignmentExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAssignmentExpression(this);}else{return visitor.visitChildren(this);}}}class AssignmentOperatorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_assignmentOperator;}Assign(){return this.getToken(CPP14Parser.Assign,0);}StarAssign(){return this.getToken(CPP14Parser.StarAssign,0);}DivAssign(){return this.getToken(CPP14Parser.DivAssign,0);}ModAssign(){return this.getToken(CPP14Parser.ModAssign,0);}PlusAssign(){return this.getToken(CPP14Parser.PlusAssign,0);}MinusAssign(){return this.getToken(CPP14Parser.MinusAssign,0);}RightShiftAssign(){return this.getToken(CPP14Parser.RightShiftAssign,0);}LeftShiftAssign(){return this.getToken(CPP14Parser.LeftShiftAssign,0);}AndAssign(){return this.getToken(CPP14Parser.AndAssign,0);}XorAssign(){return this.getToken(CPP14Parser.XorAssign,0);}OrAssign(){return this.getToken(CPP14Parser.OrAssign,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAssignmentOperator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAssignmentOperator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAssignmentOperator(this);}else{return visitor.visitChildren(this);}}}class ExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_expression;}assignmentExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AssignmentExpressionContext);}else{return this.getTypedRuleContext(AssignmentExpressionContext,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitExpression(this);}else{return visitor.visitChildren(this);}}}class ConstantExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_constantExpression;}conditionalExpression(){return this.getTypedRuleContext(ConditionalExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterConstantExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitConstantExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitConstantExpression(this);}else{return visitor.visitChildren(this);}}}class StatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_statement;}labeledStatement(){return this.getTypedRuleContext(LabeledStatementContext,0);}declarationStatement(){return this.getTypedRuleContext(DeclarationStatementContext,0);}expressionStatement(){return this.getTypedRuleContext(ExpressionStatementContext,0);}compoundStatement(){return this.getTypedRuleContext(CompoundStatementContext,0);}selectionStatement(){return this.getTypedRuleContext(SelectionStatementContext,0);}iterationStatement(){return this.getTypedRuleContext(IterationStatementContext,0);}jumpStatement(){return this.getTypedRuleContext(JumpStatementContext,0);}tryBlock(){return this.getTypedRuleContext(TryBlockContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterStatement(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitStatement(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitStatement(this);}else{return visitor.visitChildren(this);}}}class LabeledStatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_labeledStatement;}Colon(){return this.getToken(CPP14Parser.Colon,0);}statement(){return this.getTypedRuleContext(StatementContext,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}Case(){return this.getToken(CPP14Parser.Case,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}Default(){return this.getToken(CPP14Parser.Default,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterLabeledStatement(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitLabeledStatement(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitLabeledStatement(this);}else{return visitor.visitChildren(this);}}}class ExpressionStatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_expressionStatement;}Semi(){return this.getToken(CPP14Parser.Semi,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterExpressionStatement(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitExpressionStatement(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitExpressionStatement(this);}else{return visitor.visitChildren(this);}}}class CompoundStatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_compoundStatement;}LeftBrace(){return this.getToken(CPP14Parser.LeftBrace,0);}RightBrace(){return this.getToken(CPP14Parser.RightBrace,0);}statementSeq(){return this.getTypedRuleContext(StatementSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterCompoundStatement(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitCompoundStatement(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitCompoundStatement(this);}else{return visitor.visitChildren(this);}}}class StatementSeqContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_statementSeq;}statement=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StatementContext);}else{return this.getTypedRuleContext(StatementContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterStatementSeq(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitStatementSeq(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitStatementSeq(this);}else{return visitor.visitChildren(this);}}}class SelectionStatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_selectionStatement;}If(){return this.getToken(CPP14Parser.If,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}condition(){return this.getTypedRuleContext(ConditionContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}statement=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StatementContext);}else{return this.getTypedRuleContext(StatementContext,i);}};Else(){return this.getToken(CPP14Parser.Else,0);}Switch(){return this.getToken(CPP14Parser.Switch,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterSelectionStatement(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitSelectionStatement(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitSelectionStatement(this);}else{return visitor.visitChildren(this);}}}class ConditionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_condition;}expression(){return this.getTypedRuleContext(ExpressionContext,0);}declSpecifierSeq(){return this.getTypedRuleContext(DeclSpecifierSeqContext,0);}declarator(){return this.getTypedRuleContext(DeclaratorContext,0);}Assign(){return this.getToken(CPP14Parser.Assign,0);}initializerClause(){return this.getTypedRuleContext(InitializerClauseContext,0);}bracedInitList(){return this.getTypedRuleContext(BracedInitListContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterCondition(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitCondition(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitCondition(this);}else{return visitor.visitChildren(this);}}}class IterationStatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_iterationStatement;}While(){return this.getToken(CPP14Parser.While,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}condition(){return this.getTypedRuleContext(ConditionContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}statement(){return this.getTypedRuleContext(StatementContext,0);}Do(){return this.getToken(CPP14Parser.Do,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}Semi(){return this.getToken(CPP14Parser.Semi,0);}For(){return this.getToken(CPP14Parser.For,0);}forInitStatement(){return this.getTypedRuleContext(ForInitStatementContext,0);}forRangeDeclaration(){return this.getTypedRuleContext(ForRangeDeclarationContext,0);}Colon(){return this.getToken(CPP14Parser.Colon,0);}forRangeInitializer(){return this.getTypedRuleContext(ForRangeInitializerContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterIterationStatement(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitIterationStatement(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitIterationStatement(this);}else{return visitor.visitChildren(this);}}}class ForInitStatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_forInitStatement;}expressionStatement(){return this.getTypedRuleContext(ExpressionStatementContext,0);}simpleDeclaration(){return this.getTypedRuleContext(SimpleDeclarationContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterForInitStatement(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitForInitStatement(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitForInitStatement(this);}else{return visitor.visitChildren(this);}}}class ForRangeDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_forRangeDeclaration;}declSpecifierSeq(){return this.getTypedRuleContext(DeclSpecifierSeqContext,0);}declarator(){return this.getTypedRuleContext(DeclaratorContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterForRangeDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitForRangeDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitForRangeDeclaration(this);}else{return visitor.visitChildren(this);}}}class ForRangeInitializerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_forRangeInitializer;}expression(){return this.getTypedRuleContext(ExpressionContext,0);}bracedInitList(){return this.getTypedRuleContext(BracedInitListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterForRangeInitializer(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitForRangeInitializer(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitForRangeInitializer(this);}else{return visitor.visitChildren(this);}}}class JumpStatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_jumpStatement;}Semi(){return this.getToken(CPP14Parser.Semi,0);}Break(){return this.getToken(CPP14Parser.Break,0);}Continue(){return this.getToken(CPP14Parser.Continue,0);}Return(){return this.getToken(CPP14Parser.Return,0);}Goto(){return this.getToken(CPP14Parser.Goto,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}bracedInitList(){return this.getTypedRuleContext(BracedInitListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterJumpStatement(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitJumpStatement(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitJumpStatement(this);}else{return visitor.visitChildren(this);}}}class DeclarationStatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_declarationStatement;}blockDeclaration(){return this.getTypedRuleContext(BlockDeclarationContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterDeclarationStatement(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitDeclarationStatement(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitDeclarationStatement(this);}else{return visitor.visitChildren(this);}}}class DeclarationseqContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_declarationseq;}declaration=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(DeclarationContext);}else{return this.getTypedRuleContext(DeclarationContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterDeclarationseq(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitDeclarationseq(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitDeclarationseq(this);}else{return visitor.visitChildren(this);}}}class DeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_declaration;}blockDeclaration(){return this.getTypedRuleContext(BlockDeclarationContext,0);}functionDefinition(){return this.getTypedRuleContext(FunctionDefinitionContext,0);}templateDeclaration(){return this.getTypedRuleContext(TemplateDeclarationContext,0);}explicitInstantiation(){return this.getTypedRuleContext(ExplicitInstantiationContext,0);}explicitSpecialization(){return this.getTypedRuleContext(ExplicitSpecializationContext,0);}linkageSpecification(){return this.getTypedRuleContext(LinkageSpecificationContext,0);}namespaceDefinition(){return this.getTypedRuleContext(NamespaceDefinitionContext,0);}emptyDeclaration(){return this.getTypedRuleContext(EmptyDeclarationContext,0);}attributeDeclaration(){return this.getTypedRuleContext(AttributeDeclarationContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitDeclaration(this);}else{return visitor.visitChildren(this);}}}class BlockDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_blockDeclaration;}simpleDeclaration(){return this.getTypedRuleContext(SimpleDeclarationContext,0);}asmDefinition(){return this.getTypedRuleContext(AsmDefinitionContext,0);}namespaceAliasDefinition(){return this.getTypedRuleContext(NamespaceAliasDefinitionContext,0);}usingDeclaration(){return this.getTypedRuleContext(UsingDeclarationContext,0);}usingDirective(){return this.getTypedRuleContext(UsingDirectiveContext,0);}staticAssertDeclaration(){return this.getTypedRuleContext(StaticAssertDeclarationContext,0);}aliasDeclaration(){return this.getTypedRuleContext(AliasDeclarationContext,0);}opaqueEnumDeclaration(){return this.getTypedRuleContext(OpaqueEnumDeclarationContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterBlockDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitBlockDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitBlockDeclaration(this);}else{return visitor.visitChildren(this);}}}class AliasDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_aliasDeclaration;}Using(){return this.getToken(CPP14Parser.Using,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}Assign(){return this.getToken(CPP14Parser.Assign,0);}theTypeId(){return this.getTypedRuleContext(TheTypeIdContext,0);}Semi(){return this.getToken(CPP14Parser.Semi,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAliasDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAliasDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAliasDeclaration(this);}else{return visitor.visitChildren(this);}}}class SimpleDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_simpleDeclaration;}Semi(){return this.getToken(CPP14Parser.Semi,0);}declSpecifierSeq(){return this.getTypedRuleContext(DeclSpecifierSeqContext,0);}initDeclaratorList(){return this.getTypedRuleContext(InitDeclaratorListContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterSimpleDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitSimpleDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitSimpleDeclaration(this);}else{return visitor.visitChildren(this);}}}class StaticAssertDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_staticAssertDeclaration;}Static_assert(){return this.getToken(CPP14Parser.Static_assert,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}Comma(){return this.getToken(CPP14Parser.Comma,0);}StringLiteral(){return this.getToken(CPP14Parser.StringLiteral,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}Semi(){return this.getToken(CPP14Parser.Semi,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterStaticAssertDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitStaticAssertDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitStaticAssertDeclaration(this);}else{return visitor.visitChildren(this);}}}class EmptyDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_emptyDeclaration;}Semi(){return this.getToken(CPP14Parser.Semi,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterEmptyDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitEmptyDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitEmptyDeclaration(this);}else{return visitor.visitChildren(this);}}}class AttributeDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_attributeDeclaration;}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}Semi(){return this.getToken(CPP14Parser.Semi,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAttributeDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAttributeDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAttributeDeclaration(this);}else{return visitor.visitChildren(this);}}}class DeclSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_declSpecifier;}storageClassSpecifier(){return this.getTypedRuleContext(StorageClassSpecifierContext,0);}typeSpecifier(){return this.getTypedRuleContext(TypeSpecifierContext,0);}functionSpecifier(){return this.getTypedRuleContext(FunctionSpecifierContext,0);}Friend(){return this.getToken(CPP14Parser.Friend,0);}Typedef(){return this.getToken(CPP14Parser.Typedef,0);}Constexpr(){return this.getToken(CPP14Parser.Constexpr,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterDeclSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitDeclSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitDeclSpecifier(this);}else{return visitor.visitChildren(this);}}}class DeclSpecifierSeqContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_declSpecifierSeq;}declSpecifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(DeclSpecifierContext);}else{return this.getTypedRuleContext(DeclSpecifierContext,i);}};attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterDeclSpecifierSeq(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitDeclSpecifierSeq(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitDeclSpecifierSeq(this);}else{return visitor.visitChildren(this);}}}class StorageClassSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_storageClassSpecifier;}Register(){return this.getToken(CPP14Parser.Register,0);}Static(){return this.getToken(CPP14Parser.Static,0);}Thread_local(){return this.getToken(CPP14Parser.Thread_local,0);}Extern(){return this.getToken(CPP14Parser.Extern,0);}Mutable(){return this.getToken(CPP14Parser.Mutable,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterStorageClassSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitStorageClassSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitStorageClassSpecifier(this);}else{return visitor.visitChildren(this);}}}class FunctionSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_functionSpecifier;}Inline(){return this.getToken(CPP14Parser.Inline,0);}Virtual(){return this.getToken(CPP14Parser.Virtual,0);}Explicit(){return this.getToken(CPP14Parser.Explicit,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterFunctionSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitFunctionSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitFunctionSpecifier(this);}else{return visitor.visitChildren(this);}}}class TypedefNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_typedefName;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTypedefName(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTypedefName(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTypedefName(this);}else{return visitor.visitChildren(this);}}}class TypeSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_typeSpecifier;}trailingTypeSpecifier(){return this.getTypedRuleContext(TrailingTypeSpecifierContext,0);}classSpecifier(){return this.getTypedRuleContext(ClassSpecifierContext,0);}enumSpecifier(){return this.getTypedRuleContext(EnumSpecifierContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTypeSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTypeSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTypeSpecifier(this);}else{return visitor.visitChildren(this);}}}class TrailingTypeSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_trailingTypeSpecifier;}simpleTypeSpecifier(){return this.getTypedRuleContext(SimpleTypeSpecifierContext,0);}elaboratedTypeSpecifier(){return this.getTypedRuleContext(ElaboratedTypeSpecifierContext,0);}typeNameSpecifier(){return this.getTypedRuleContext(TypeNameSpecifierContext,0);}cvQualifier(){return this.getTypedRuleContext(CvQualifierContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTrailingTypeSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTrailingTypeSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTrailingTypeSpecifier(this);}else{return visitor.visitChildren(this);}}}class TypeSpecifierSeqContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_typeSpecifierSeq;}typeSpecifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TypeSpecifierContext);}else{return this.getTypedRuleContext(TypeSpecifierContext,i);}};attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTypeSpecifierSeq(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTypeSpecifierSeq(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTypeSpecifierSeq(this);}else{return visitor.visitChildren(this);}}}class TrailingTypeSpecifierSeqContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_trailingTypeSpecifierSeq;}trailingTypeSpecifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TrailingTypeSpecifierContext);}else{return this.getTypedRuleContext(TrailingTypeSpecifierContext,i);}};attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTrailingTypeSpecifierSeq(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTrailingTypeSpecifierSeq(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTrailingTypeSpecifierSeq(this);}else{return visitor.visitChildren(this);}}}class SimpleTypeLengthModifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_simpleTypeLengthModifier;}Short(){return this.getToken(CPP14Parser.Short,0);}Long(){return this.getToken(CPP14Parser.Long,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterSimpleTypeLengthModifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitSimpleTypeLengthModifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitSimpleTypeLengthModifier(this);}else{return visitor.visitChildren(this);}}}class SimpleTypeSignednessModifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_simpleTypeSignednessModifier;}Unsigned(){return this.getToken(CPP14Parser.Unsigned,0);}Signed(){return this.getToken(CPP14Parser.Signed,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterSimpleTypeSignednessModifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitSimpleTypeSignednessModifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitSimpleTypeSignednessModifier(this);}else{return visitor.visitChildren(this);}}}class SimpleTypeSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_simpleTypeSpecifier;}theTypeName(){return this.getTypedRuleContext(TheTypeNameContext,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}Template(){return this.getToken(CPP14Parser.Template,0);}simpleTemplateId(){return this.getTypedRuleContext(SimpleTemplateIdContext,0);}simpleTypeSignednessModifier(){return this.getTypedRuleContext(SimpleTypeSignednessModifierContext,0);}simpleTypeLengthModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SimpleTypeLengthModifierContext);}else{return this.getTypedRuleContext(SimpleTypeLengthModifierContext,i);}};Char(){return this.getToken(CPP14Parser.Char,0);}Char16(){return this.getToken(CPP14Parser.Char16,0);}Char32(){return this.getToken(CPP14Parser.Char32,0);}Wchar(){return this.getToken(CPP14Parser.Wchar,0);}Bool(){return this.getToken(CPP14Parser.Bool,0);}Int(){return this.getToken(CPP14Parser.Int,0);}Float(){return this.getToken(CPP14Parser.Float,0);}Double(){return this.getToken(CPP14Parser.Double,0);}Void(){return this.getToken(CPP14Parser.Void,0);}Auto(){return this.getToken(CPP14Parser.Auto,0);}decltypeSpecifier(){return this.getTypedRuleContext(DecltypeSpecifierContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterSimpleTypeSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitSimpleTypeSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitSimpleTypeSpecifier(this);}else{return visitor.visitChildren(this);}}}class TheTypeNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_theTypeName;}className(){return this.getTypedRuleContext(ClassNameContext,0);}enumName(){return this.getTypedRuleContext(EnumNameContext,0);}typedefName(){return this.getTypedRuleContext(TypedefNameContext,0);}simpleTemplateId(){return this.getTypedRuleContext(SimpleTemplateIdContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTheTypeName(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTheTypeName(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTheTypeName(this);}else{return visitor.visitChildren(this);}}}class DecltypeSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_decltypeSpecifier;}Decltype(){return this.getToken(CPP14Parser.Decltype,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}Auto(){return this.getToken(CPP14Parser.Auto,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterDecltypeSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitDecltypeSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitDecltypeSpecifier(this);}else{return visitor.visitChildren(this);}}}class ElaboratedTypeSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_elaboratedTypeSpecifier;}classKey(){return this.getTypedRuleContext(ClassKeyContext,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}simpleTemplateId(){return this.getTypedRuleContext(SimpleTemplateIdContext,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}Template(){return this.getToken(CPP14Parser.Template,0);}Enum(){return this.getToken(CPP14Parser.Enum,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterElaboratedTypeSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitElaboratedTypeSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitElaboratedTypeSpecifier(this);}else{return visitor.visitChildren(this);}}}class EnumNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_enumName;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterEnumName(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitEnumName(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitEnumName(this);}else{return visitor.visitChildren(this);}}}class EnumSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_enumSpecifier;}enumHead(){return this.getTypedRuleContext(EnumHeadContext,0);}LeftBrace(){return this.getToken(CPP14Parser.LeftBrace,0);}RightBrace(){return this.getToken(CPP14Parser.RightBrace,0);}enumeratorList(){return this.getTypedRuleContext(EnumeratorListContext,0);}Comma(){return this.getToken(CPP14Parser.Comma,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterEnumSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitEnumSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitEnumSpecifier(this);}else{return visitor.visitChildren(this);}}}class EnumHeadContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_enumHead;}enumkey(){return this.getTypedRuleContext(EnumkeyContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}enumbase(){return this.getTypedRuleContext(EnumbaseContext,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterEnumHead(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitEnumHead(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitEnumHead(this);}else{return visitor.visitChildren(this);}}}class OpaqueEnumDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_opaqueEnumDeclaration;}enumkey(){return this.getTypedRuleContext(EnumkeyContext,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}Semi(){return this.getToken(CPP14Parser.Semi,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enumbase(){return this.getTypedRuleContext(EnumbaseContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterOpaqueEnumDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitOpaqueEnumDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitOpaqueEnumDeclaration(this);}else{return visitor.visitChildren(this);}}}class EnumkeyContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_enumkey;}Enum(){return this.getToken(CPP14Parser.Enum,0);}Class(){return this.getToken(CPP14Parser.Class,0);}Struct(){return this.getToken(CPP14Parser.Struct,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterEnumkey(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitEnumkey(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitEnumkey(this);}else{return visitor.visitChildren(this);}}}class EnumbaseContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_enumbase;}Colon(){return this.getToken(CPP14Parser.Colon,0);}typeSpecifierSeq(){return this.getTypedRuleContext(TypeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterEnumbase(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitEnumbase(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitEnumbase(this);}else{return visitor.visitChildren(this);}}}class EnumeratorListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_enumeratorList;}enumeratorDefinition=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(EnumeratorDefinitionContext);}else{return this.getTypedRuleContext(EnumeratorDefinitionContext,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterEnumeratorList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitEnumeratorList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitEnumeratorList(this);}else{return visitor.visitChildren(this);}}}class EnumeratorDefinitionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_enumeratorDefinition;}enumerator(){return this.getTypedRuleContext(EnumeratorContext,0);}Assign(){return this.getToken(CPP14Parser.Assign,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterEnumeratorDefinition(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitEnumeratorDefinition(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitEnumeratorDefinition(this);}else{return visitor.visitChildren(this);}}}class EnumeratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_enumerator;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterEnumerator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitEnumerator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitEnumerator(this);}else{return visitor.visitChildren(this);}}}class NamespaceNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_namespaceName;}originalNamespaceName(){return this.getTypedRuleContext(OriginalNamespaceNameContext,0);}namespaceAlias(){return this.getTypedRuleContext(NamespaceAliasContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNamespaceName(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNamespaceName(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNamespaceName(this);}else{return visitor.visitChildren(this);}}}class OriginalNamespaceNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_originalNamespaceName;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterOriginalNamespaceName(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitOriginalNamespaceName(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitOriginalNamespaceName(this);}else{return visitor.visitChildren(this);}}}class NamespaceDefinitionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_namespaceDefinition;this.namespaceBody=null;// DeclarationseqContext
}Namespace(){return this.getToken(CPP14Parser.Namespace,0);}LeftBrace(){return this.getToken(CPP14Parser.LeftBrace,0);}RightBrace(){return this.getToken(CPP14Parser.RightBrace,0);}Inline(){return this.getToken(CPP14Parser.Inline,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}originalNamespaceName(){return this.getTypedRuleContext(OriginalNamespaceNameContext,0);}declarationseq(){return this.getTypedRuleContext(DeclarationseqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNamespaceDefinition(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNamespaceDefinition(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNamespaceDefinition(this);}else{return visitor.visitChildren(this);}}}class NamespaceAliasContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_namespaceAlias;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNamespaceAlias(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNamespaceAlias(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNamespaceAlias(this);}else{return visitor.visitChildren(this);}}}class NamespaceAliasDefinitionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_namespaceAliasDefinition;}Namespace(){return this.getToken(CPP14Parser.Namespace,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}Assign(){return this.getToken(CPP14Parser.Assign,0);}qualifiednamespacespecifier(){return this.getTypedRuleContext(QualifiednamespacespecifierContext,0);}Semi(){return this.getToken(CPP14Parser.Semi,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNamespaceAliasDefinition(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNamespaceAliasDefinition(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNamespaceAliasDefinition(this);}else{return visitor.visitChildren(this);}}}class QualifiednamespacespecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_qualifiednamespacespecifier;}namespaceName(){return this.getTypedRuleContext(NamespaceNameContext,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterQualifiednamespacespecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitQualifiednamespacespecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitQualifiednamespacespecifier(this);}else{return visitor.visitChildren(this);}}}class UsingDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_usingDeclaration;}Using(){return this.getToken(CPP14Parser.Using,0);}unqualifiedId(){return this.getTypedRuleContext(UnqualifiedIdContext,0);}Semi(){return this.getToken(CPP14Parser.Semi,0);}Doublecolon(){return this.getToken(CPP14Parser.Doublecolon,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}Typename_(){return this.getToken(CPP14Parser.Typename_,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterUsingDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitUsingDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitUsingDeclaration(this);}else{return visitor.visitChildren(this);}}}class UsingDirectiveContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_usingDirective;}Using(){return this.getToken(CPP14Parser.Using,0);}Namespace(){return this.getToken(CPP14Parser.Namespace,0);}namespaceName(){return this.getTypedRuleContext(NamespaceNameContext,0);}Semi(){return this.getToken(CPP14Parser.Semi,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterUsingDirective(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitUsingDirective(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitUsingDirective(this);}else{return visitor.visitChildren(this);}}}class AsmDefinitionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_asmDefinition;}Asm(){return this.getToken(CPP14Parser.Asm,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}StringLiteral(){return this.getToken(CPP14Parser.StringLiteral,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}Semi(){return this.getToken(CPP14Parser.Semi,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAsmDefinition(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAsmDefinition(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAsmDefinition(this);}else{return visitor.visitChildren(this);}}}class LinkageSpecificationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_linkageSpecification;}Extern(){return this.getToken(CPP14Parser.Extern,0);}StringLiteral(){return this.getToken(CPP14Parser.StringLiteral,0);}LeftBrace(){return this.getToken(CPP14Parser.LeftBrace,0);}RightBrace(){return this.getToken(CPP14Parser.RightBrace,0);}declaration(){return this.getTypedRuleContext(DeclarationContext,0);}declarationseq(){return this.getTypedRuleContext(DeclarationseqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterLinkageSpecification(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitLinkageSpecification(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitLinkageSpecification(this);}else{return visitor.visitChildren(this);}}}class AttributeSpecifierSeqContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_attributeSpecifierSeq;}attributeSpecifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AttributeSpecifierContext);}else{return this.getTypedRuleContext(AttributeSpecifierContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAttributeSpecifierSeq(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAttributeSpecifierSeq(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAttributeSpecifierSeq(this);}else{return visitor.visitChildren(this);}}}class AttributeSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_attributeSpecifier;}LeftBracket=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.LeftBracket);}else{return this.getToken(CPP14Parser.LeftBracket,i);}};RightBracket=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.RightBracket);}else{return this.getToken(CPP14Parser.RightBracket,i);}};attributeList(){return this.getTypedRuleContext(AttributeListContext,0);}alignmentspecifier(){return this.getTypedRuleContext(AlignmentspecifierContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAttributeSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAttributeSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAttributeSpecifier(this);}else{return visitor.visitChildren(this);}}}class AlignmentspecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_alignmentspecifier;}Alignas(){return this.getToken(CPP14Parser.Alignas,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}theTypeId(){return this.getTypedRuleContext(TheTypeIdContext,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}Ellipsis(){return this.getToken(CPP14Parser.Ellipsis,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAlignmentspecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAlignmentspecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAlignmentspecifier(this);}else{return visitor.visitChildren(this);}}}class AttributeListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_attributeList;}attribute=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AttributeContext);}else{return this.getTypedRuleContext(AttributeContext,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};Ellipsis(){return this.getToken(CPP14Parser.Ellipsis,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAttributeList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAttributeList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAttributeList(this);}else{return visitor.visitChildren(this);}}}class AttributeContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_attribute;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}attributeNamespace(){return this.getTypedRuleContext(AttributeNamespaceContext,0);}Doublecolon(){return this.getToken(CPP14Parser.Doublecolon,0);}attributeArgumentClause(){return this.getTypedRuleContext(AttributeArgumentClauseContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAttribute(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAttribute(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAttribute(this);}else{return visitor.visitChildren(this);}}}class AttributeNamespaceContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_attributeNamespace;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAttributeNamespace(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAttributeNamespace(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAttributeNamespace(this);}else{return visitor.visitChildren(this);}}}class AttributeArgumentClauseContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_attributeArgumentClause;}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}balancedTokenSeq(){return this.getTypedRuleContext(BalancedTokenSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAttributeArgumentClause(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAttributeArgumentClause(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAttributeArgumentClause(this);}else{return visitor.visitChildren(this);}}}class BalancedTokenSeqContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_balancedTokenSeq;}balancedtoken=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(BalancedtokenContext);}else{return this.getTypedRuleContext(BalancedtokenContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterBalancedTokenSeq(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitBalancedTokenSeq(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitBalancedTokenSeq(this);}else{return visitor.visitChildren(this);}}}class BalancedtokenContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_balancedtoken;}LeftParen=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.LeftParen);}else{return this.getToken(CPP14Parser.LeftParen,i);}};balancedTokenSeq(){return this.getTypedRuleContext(BalancedTokenSeqContext,0);}RightParen=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.RightParen);}else{return this.getToken(CPP14Parser.RightParen,i);}};LeftBracket=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.LeftBracket);}else{return this.getToken(CPP14Parser.LeftBracket,i);}};RightBracket=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.RightBracket);}else{return this.getToken(CPP14Parser.RightBracket,i);}};LeftBrace=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.LeftBrace);}else{return this.getToken(CPP14Parser.LeftBrace,i);}};RightBrace=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.RightBrace);}else{return this.getToken(CPP14Parser.RightBrace,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterBalancedtoken(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitBalancedtoken(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitBalancedtoken(this);}else{return visitor.visitChildren(this);}}}class InitDeclaratorListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_initDeclaratorList;}initDeclarator=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(InitDeclaratorContext);}else{return this.getTypedRuleContext(InitDeclaratorContext,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterInitDeclaratorList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitInitDeclaratorList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitInitDeclaratorList(this);}else{return visitor.visitChildren(this);}}}class InitDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_initDeclarator;}declarator(){return this.getTypedRuleContext(DeclaratorContext,0);}initializer(){return this.getTypedRuleContext(InitializerContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterInitDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitInitDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitInitDeclarator(this);}else{return visitor.visitChildren(this);}}}class DeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_declarator;}pointerDeclarator(){return this.getTypedRuleContext(PointerDeclaratorContext,0);}noPointerDeclarator(){return this.getTypedRuleContext(NoPointerDeclaratorContext,0);}parametersAndQualifiers(){return this.getTypedRuleContext(ParametersAndQualifiersContext,0);}trailingReturnType(){return this.getTypedRuleContext(TrailingReturnTypeContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitDeclarator(this);}else{return visitor.visitChildren(this);}}}class PointerDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_pointerDeclarator;}noPointerDeclarator(){return this.getTypedRuleContext(NoPointerDeclaratorContext,0);}pointerOperator=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PointerOperatorContext);}else{return this.getTypedRuleContext(PointerOperatorContext,i);}};Const=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Const);}else{return this.getToken(CPP14Parser.Const,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterPointerDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitPointerDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitPointerDeclarator(this);}else{return visitor.visitChildren(this);}}}class NoPointerDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_noPointerDeclarator;}declaratorid(){return this.getTypedRuleContext(DeclaratoridContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}pointerDeclarator(){return this.getTypedRuleContext(PointerDeclaratorContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}noPointerDeclarator(){return this.getTypedRuleContext(NoPointerDeclaratorContext,0);}parametersAndQualifiers(){return this.getTypedRuleContext(ParametersAndQualifiersContext,0);}LeftBracket(){return this.getToken(CPP14Parser.LeftBracket,0);}RightBracket(){return this.getToken(CPP14Parser.RightBracket,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNoPointerDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNoPointerDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNoPointerDeclarator(this);}else{return visitor.visitChildren(this);}}}class ParametersAndQualifiersContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_parametersAndQualifiers;}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}parameterDeclarationClause(){return this.getTypedRuleContext(ParameterDeclarationClauseContext,0);}cvqualifierseq(){return this.getTypedRuleContext(CvqualifierseqContext,0);}refqualifier(){return this.getTypedRuleContext(RefqualifierContext,0);}exceptionSpecification(){return this.getTypedRuleContext(ExceptionSpecificationContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterParametersAndQualifiers(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitParametersAndQualifiers(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitParametersAndQualifiers(this);}else{return visitor.visitChildren(this);}}}class TrailingReturnTypeContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_trailingReturnType;}Arrow(){return this.getToken(CPP14Parser.Arrow,0);}trailingTypeSpecifierSeq(){return this.getTypedRuleContext(TrailingTypeSpecifierSeqContext,0);}abstractDeclarator(){return this.getTypedRuleContext(AbstractDeclaratorContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTrailingReturnType(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTrailingReturnType(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTrailingReturnType(this);}else{return visitor.visitChildren(this);}}}class PointerOperatorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_pointerOperator;}And(){return this.getToken(CPP14Parser.And,0);}AndAnd(){return this.getToken(CPP14Parser.AndAnd,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}Star(){return this.getToken(CPP14Parser.Star,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}cvqualifierseq(){return this.getTypedRuleContext(CvqualifierseqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterPointerOperator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitPointerOperator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitPointerOperator(this);}else{return visitor.visitChildren(this);}}}class CvqualifierseqContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_cvqualifierseq;}cvQualifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CvQualifierContext);}else{return this.getTypedRuleContext(CvQualifierContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterCvqualifierseq(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitCvqualifierseq(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitCvqualifierseq(this);}else{return visitor.visitChildren(this);}}}class CvQualifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_cvQualifier;}Const(){return this.getToken(CPP14Parser.Const,0);}Volatile(){return this.getToken(CPP14Parser.Volatile,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterCvQualifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitCvQualifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitCvQualifier(this);}else{return visitor.visitChildren(this);}}}class RefqualifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_refqualifier;}And(){return this.getToken(CPP14Parser.And,0);}AndAnd(){return this.getToken(CPP14Parser.AndAnd,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterRefqualifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitRefqualifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitRefqualifier(this);}else{return visitor.visitChildren(this);}}}class DeclaratoridContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_declaratorid;}idExpression(){return this.getTypedRuleContext(IdExpressionContext,0);}Ellipsis(){return this.getToken(CPP14Parser.Ellipsis,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterDeclaratorid(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitDeclaratorid(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitDeclaratorid(this);}else{return visitor.visitChildren(this);}}}class TheTypeIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_theTypeId;}typeSpecifierSeq(){return this.getTypedRuleContext(TypeSpecifierSeqContext,0);}abstractDeclarator(){return this.getTypedRuleContext(AbstractDeclaratorContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTheTypeId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTheTypeId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTheTypeId(this);}else{return visitor.visitChildren(this);}}}class AbstractDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_abstractDeclarator;}pointerAbstractDeclarator(){return this.getTypedRuleContext(PointerAbstractDeclaratorContext,0);}parametersAndQualifiers(){return this.getTypedRuleContext(ParametersAndQualifiersContext,0);}trailingReturnType(){return this.getTypedRuleContext(TrailingReturnTypeContext,0);}noPointerAbstractDeclarator(){return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext,0);}abstractPackDeclarator(){return this.getTypedRuleContext(AbstractPackDeclaratorContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAbstractDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAbstractDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAbstractDeclarator(this);}else{return visitor.visitChildren(this);}}}class PointerAbstractDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_pointerAbstractDeclarator;}noPointerAbstractDeclarator(){return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext,0);}pointerOperator=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PointerOperatorContext);}else{return this.getTypedRuleContext(PointerOperatorContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterPointerAbstractDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitPointerAbstractDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitPointerAbstractDeclarator(this);}else{return visitor.visitChildren(this);}}}class NoPointerAbstractDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_noPointerAbstractDeclarator;}parametersAndQualifiers(){return this.getTypedRuleContext(ParametersAndQualifiersContext,0);}LeftBracket(){return this.getToken(CPP14Parser.LeftBracket,0);}RightBracket(){return this.getToken(CPP14Parser.RightBracket,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}pointerAbstractDeclarator(){return this.getTypedRuleContext(PointerAbstractDeclaratorContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}noPointerAbstractDeclarator=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NoPointerAbstractDeclaratorContext);}else{return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNoPointerAbstractDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNoPointerAbstractDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNoPointerAbstractDeclarator(this);}else{return visitor.visitChildren(this);}}}class AbstractPackDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_abstractPackDeclarator;}noPointerAbstractPackDeclarator(){return this.getTypedRuleContext(NoPointerAbstractPackDeclaratorContext,0);}pointerOperator=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PointerOperatorContext);}else{return this.getTypedRuleContext(PointerOperatorContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAbstractPackDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAbstractPackDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAbstractPackDeclarator(this);}else{return visitor.visitChildren(this);}}}class NoPointerAbstractPackDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_noPointerAbstractPackDeclarator;}Ellipsis(){return this.getToken(CPP14Parser.Ellipsis,0);}noPointerAbstractPackDeclarator(){return this.getTypedRuleContext(NoPointerAbstractPackDeclaratorContext,0);}parametersAndQualifiers(){return this.getTypedRuleContext(ParametersAndQualifiersContext,0);}LeftBracket(){return this.getToken(CPP14Parser.LeftBracket,0);}RightBracket(){return this.getToken(CPP14Parser.RightBracket,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNoPointerAbstractPackDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNoPointerAbstractPackDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNoPointerAbstractPackDeclarator(this);}else{return visitor.visitChildren(this);}}}class ParameterDeclarationClauseContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_parameterDeclarationClause;}parameterDeclarationList(){return this.getTypedRuleContext(ParameterDeclarationListContext,0);}Ellipsis(){return this.getToken(CPP14Parser.Ellipsis,0);}Comma(){return this.getToken(CPP14Parser.Comma,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterParameterDeclarationClause(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitParameterDeclarationClause(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitParameterDeclarationClause(this);}else{return visitor.visitChildren(this);}}}class ParameterDeclarationListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_parameterDeclarationList;}parameterDeclaration=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ParameterDeclarationContext);}else{return this.getTypedRuleContext(ParameterDeclarationContext,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterParameterDeclarationList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitParameterDeclarationList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitParameterDeclarationList(this);}else{return visitor.visitChildren(this);}}}class ParameterDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_parameterDeclaration;}declSpecifierSeq(){return this.getTypedRuleContext(DeclSpecifierSeqContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}declarator(){return this.getTypedRuleContext(DeclaratorContext,0);}Assign(){return this.getToken(CPP14Parser.Assign,0);}initializerClause(){return this.getTypedRuleContext(InitializerClauseContext,0);}abstractDeclarator(){return this.getTypedRuleContext(AbstractDeclaratorContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterParameterDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitParameterDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitParameterDeclaration(this);}else{return visitor.visitChildren(this);}}}class FunctionDefinitionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_functionDefinition;}declarator(){return this.getTypedRuleContext(DeclaratorContext,0);}functionBody(){return this.getTypedRuleContext(FunctionBodyContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}declSpecifierSeq(){return this.getTypedRuleContext(DeclSpecifierSeqContext,0);}virtualSpecifierSeq(){return this.getTypedRuleContext(VirtualSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterFunctionDefinition(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitFunctionDefinition(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitFunctionDefinition(this);}else{return visitor.visitChildren(this);}}}class FunctionBodyContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_functionBody;}compoundStatement(){return this.getTypedRuleContext(CompoundStatementContext,0);}constructorInitializer(){return this.getTypedRuleContext(ConstructorInitializerContext,0);}functionTryBlock(){return this.getTypedRuleContext(FunctionTryBlockContext,0);}Assign(){return this.getToken(CPP14Parser.Assign,0);}Semi(){return this.getToken(CPP14Parser.Semi,0);}Default(){return this.getToken(CPP14Parser.Default,0);}Delete(){return this.getToken(CPP14Parser.Delete,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterFunctionBody(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitFunctionBody(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitFunctionBody(this);}else{return visitor.visitChildren(this);}}}class InitializerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_initializer;}braceOrEqualInitializer(){return this.getTypedRuleContext(BraceOrEqualInitializerContext,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}expressionList(){return this.getTypedRuleContext(ExpressionListContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterInitializer(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitInitializer(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitInitializer(this);}else{return visitor.visitChildren(this);}}}class BraceOrEqualInitializerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_braceOrEqualInitializer;}Assign(){return this.getToken(CPP14Parser.Assign,0);}initializerClause(){return this.getTypedRuleContext(InitializerClauseContext,0);}bracedInitList(){return this.getTypedRuleContext(BracedInitListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterBraceOrEqualInitializer(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitBraceOrEqualInitializer(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitBraceOrEqualInitializer(this);}else{return visitor.visitChildren(this);}}}class InitializerClauseContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_initializerClause;}assignmentExpression(){return this.getTypedRuleContext(AssignmentExpressionContext,0);}bracedInitList(){return this.getTypedRuleContext(BracedInitListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterInitializerClause(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitInitializerClause(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitInitializerClause(this);}else{return visitor.visitChildren(this);}}}class InitializerListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_initializerList;}initializerClause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(InitializerClauseContext);}else{return this.getTypedRuleContext(InitializerClauseContext,i);}};Ellipsis=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Ellipsis);}else{return this.getToken(CPP14Parser.Ellipsis,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterInitializerList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitInitializerList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitInitializerList(this);}else{return visitor.visitChildren(this);}}}class BracedInitListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_bracedInitList;}LeftBrace(){return this.getToken(CPP14Parser.LeftBrace,0);}RightBrace(){return this.getToken(CPP14Parser.RightBrace,0);}initializerList(){return this.getTypedRuleContext(InitializerListContext,0);}Comma(){return this.getToken(CPP14Parser.Comma,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterBracedInitList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitBracedInitList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitBracedInitList(this);}else{return visitor.visitChildren(this);}}}class ClassNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_className;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}simpleTemplateId(){return this.getTypedRuleContext(SimpleTemplateIdContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterClassName(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitClassName(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitClassName(this);}else{return visitor.visitChildren(this);}}}class ClassSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_classSpecifier;}classHead(){return this.getTypedRuleContext(ClassHeadContext,0);}LeftBrace(){return this.getToken(CPP14Parser.LeftBrace,0);}RightBrace(){return this.getToken(CPP14Parser.RightBrace,0);}memberSpecification(){return this.getTypedRuleContext(MemberSpecificationContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterClassSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitClassSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitClassSpecifier(this);}else{return visitor.visitChildren(this);}}}class ClassHeadContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_classHead;}classKey(){return this.getTypedRuleContext(ClassKeyContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}classHeadName(){return this.getTypedRuleContext(ClassHeadNameContext,0);}baseClause(){return this.getTypedRuleContext(BaseClauseContext,0);}classVirtSpecifier(){return this.getTypedRuleContext(ClassVirtSpecifierContext,0);}Union(){return this.getToken(CPP14Parser.Union,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterClassHead(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitClassHead(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitClassHead(this);}else{return visitor.visitChildren(this);}}}class ClassHeadNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_classHeadName;}className(){return this.getTypedRuleContext(ClassNameContext,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterClassHeadName(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitClassHeadName(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitClassHeadName(this);}else{return visitor.visitChildren(this);}}}class ClassVirtSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_classVirtSpecifier;}Final(){return this.getToken(CPP14Parser.Final,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterClassVirtSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitClassVirtSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitClassVirtSpecifier(this);}else{return visitor.visitChildren(this);}}}class ClassKeyContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_classKey;}Class(){return this.getToken(CPP14Parser.Class,0);}Struct(){return this.getToken(CPP14Parser.Struct,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterClassKey(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitClassKey(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitClassKey(this);}else{return visitor.visitChildren(this);}}}class MemberSpecificationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_memberSpecification;}memberdeclaration=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(MemberdeclarationContext);}else{return this.getTypedRuleContext(MemberdeclarationContext,i);}};accessSpecifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AccessSpecifierContext);}else{return this.getTypedRuleContext(AccessSpecifierContext,i);}};Colon=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Colon);}else{return this.getToken(CPP14Parser.Colon,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterMemberSpecification(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitMemberSpecification(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitMemberSpecification(this);}else{return visitor.visitChildren(this);}}}class MemberdeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_memberdeclaration;}Semi(){return this.getToken(CPP14Parser.Semi,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}declSpecifierSeq(){return this.getTypedRuleContext(DeclSpecifierSeqContext,0);}memberDeclaratorList(){return this.getTypedRuleContext(MemberDeclaratorListContext,0);}functionDefinition(){return this.getTypedRuleContext(FunctionDefinitionContext,0);}usingDeclaration(){return this.getTypedRuleContext(UsingDeclarationContext,0);}staticAssertDeclaration(){return this.getTypedRuleContext(StaticAssertDeclarationContext,0);}templateDeclaration(){return this.getTypedRuleContext(TemplateDeclarationContext,0);}aliasDeclaration(){return this.getTypedRuleContext(AliasDeclarationContext,0);}emptyDeclaration(){return this.getTypedRuleContext(EmptyDeclarationContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterMemberdeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitMemberdeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitMemberdeclaration(this);}else{return visitor.visitChildren(this);}}}class MemberDeclaratorListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_memberDeclaratorList;}memberDeclarator=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(MemberDeclaratorContext);}else{return this.getTypedRuleContext(MemberDeclaratorContext,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterMemberDeclaratorList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitMemberDeclaratorList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitMemberDeclaratorList(this);}else{return visitor.visitChildren(this);}}}class MemberDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_memberDeclarator;}declarator(){return this.getTypedRuleContext(DeclaratorContext,0);}virtualSpecifierSeq(){return this.getTypedRuleContext(VirtualSpecifierSeqContext,0);}pureSpecifier(){return this.getTypedRuleContext(PureSpecifierContext,0);}braceOrEqualInitializer(){return this.getTypedRuleContext(BraceOrEqualInitializerContext,0);}Colon(){return this.getToken(CPP14Parser.Colon,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterMemberDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitMemberDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitMemberDeclarator(this);}else{return visitor.visitChildren(this);}}}class VirtualSpecifierSeqContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_virtualSpecifierSeq;}virtualSpecifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VirtualSpecifierContext);}else{return this.getTypedRuleContext(VirtualSpecifierContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterVirtualSpecifierSeq(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitVirtualSpecifierSeq(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitVirtualSpecifierSeq(this);}else{return visitor.visitChildren(this);}}}class VirtualSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_virtualSpecifier;}Override(){return this.getToken(CPP14Parser.Override,0);}Final(){return this.getToken(CPP14Parser.Final,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterVirtualSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitVirtualSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitVirtualSpecifier(this);}else{return visitor.visitChildren(this);}}}class PureSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_pureSpecifier;this.val=null;// Token
}Assign(){return this.getToken(CPP14Parser.Assign,0);}OctalLiteral(){return this.getToken(CPP14Parser.OctalLiteral,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterPureSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitPureSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitPureSpecifier(this);}else{return visitor.visitChildren(this);}}}class BaseClauseContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_baseClause;}Colon(){return this.getToken(CPP14Parser.Colon,0);}baseSpecifierList(){return this.getTypedRuleContext(BaseSpecifierListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterBaseClause(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitBaseClause(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitBaseClause(this);}else{return visitor.visitChildren(this);}}}class BaseSpecifierListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_baseSpecifierList;}baseSpecifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(BaseSpecifierContext);}else{return this.getTypedRuleContext(BaseSpecifierContext,i);}};Ellipsis=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Ellipsis);}else{return this.getToken(CPP14Parser.Ellipsis,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterBaseSpecifierList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitBaseSpecifierList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitBaseSpecifierList(this);}else{return visitor.visitChildren(this);}}}class BaseSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_baseSpecifier;}baseTypeSpecifier(){return this.getTypedRuleContext(BaseTypeSpecifierContext,0);}Virtual(){return this.getToken(CPP14Parser.Virtual,0);}accessSpecifier(){return this.getTypedRuleContext(AccessSpecifierContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterBaseSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitBaseSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitBaseSpecifier(this);}else{return visitor.visitChildren(this);}}}class ClassOrDeclTypeContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_classOrDeclType;}className(){return this.getTypedRuleContext(ClassNameContext,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}decltypeSpecifier(){return this.getTypedRuleContext(DecltypeSpecifierContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterClassOrDeclType(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitClassOrDeclType(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitClassOrDeclType(this);}else{return visitor.visitChildren(this);}}}class BaseTypeSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_baseTypeSpecifier;}classOrDeclType(){return this.getTypedRuleContext(ClassOrDeclTypeContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterBaseTypeSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitBaseTypeSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitBaseTypeSpecifier(this);}else{return visitor.visitChildren(this);}}}class AccessSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_accessSpecifier;}Private(){return this.getToken(CPP14Parser.Private,0);}Protected(){return this.getToken(CPP14Parser.Protected,0);}Public(){return this.getToken(CPP14Parser.Public,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterAccessSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitAccessSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitAccessSpecifier(this);}else{return visitor.visitChildren(this);}}}class ConversionFunctionIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_conversionFunctionId;}Operator(){return this.getToken(CPP14Parser.Operator,0);}conversionTypeId(){return this.getTypedRuleContext(ConversionTypeIdContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterConversionFunctionId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitConversionFunctionId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitConversionFunctionId(this);}else{return visitor.visitChildren(this);}}}class ConversionTypeIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_conversionTypeId;}typeSpecifierSeq(){return this.getTypedRuleContext(TypeSpecifierSeqContext,0);}conversionDeclarator(){return this.getTypedRuleContext(ConversionDeclaratorContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterConversionTypeId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitConversionTypeId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitConversionTypeId(this);}else{return visitor.visitChildren(this);}}}class ConversionDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_conversionDeclarator;}pointerOperator(){return this.getTypedRuleContext(PointerOperatorContext,0);}conversionDeclarator(){return this.getTypedRuleContext(ConversionDeclaratorContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterConversionDeclarator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitConversionDeclarator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitConversionDeclarator(this);}else{return visitor.visitChildren(this);}}}class ConstructorInitializerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_constructorInitializer;}Colon(){return this.getToken(CPP14Parser.Colon,0);}memInitializerList(){return this.getTypedRuleContext(MemInitializerListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterConstructorInitializer(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitConstructorInitializer(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitConstructorInitializer(this);}else{return visitor.visitChildren(this);}}}class MemInitializerListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_memInitializerList;}memInitializer=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(MemInitializerContext);}else{return this.getTypedRuleContext(MemInitializerContext,i);}};Ellipsis=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Ellipsis);}else{return this.getToken(CPP14Parser.Ellipsis,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterMemInitializerList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitMemInitializerList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitMemInitializerList(this);}else{return visitor.visitChildren(this);}}}class MemInitializerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_memInitializer;}meminitializerid(){return this.getTypedRuleContext(MeminitializeridContext,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}bracedInitList(){return this.getTypedRuleContext(BracedInitListContext,0);}expressionList(){return this.getTypedRuleContext(ExpressionListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterMemInitializer(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitMemInitializer(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitMemInitializer(this);}else{return visitor.visitChildren(this);}}}class MeminitializeridContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_meminitializerid;}classOrDeclType(){return this.getTypedRuleContext(ClassOrDeclTypeContext,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterMeminitializerid(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitMeminitializerid(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitMeminitializerid(this);}else{return visitor.visitChildren(this);}}}class OperatorFunctionIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_operatorFunctionId;}Operator(){return this.getToken(CPP14Parser.Operator,0);}theOperator(){return this.getTypedRuleContext(TheOperatorContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterOperatorFunctionId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitOperatorFunctionId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitOperatorFunctionId(this);}else{return visitor.visitChildren(this);}}}class LiteralOperatorIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_literalOperatorId;}Operator(){return this.getToken(CPP14Parser.Operator,0);}StringLiteral(){return this.getToken(CPP14Parser.StringLiteral,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}UserDefinedStringLiteral(){return this.getToken(CPP14Parser.UserDefinedStringLiteral,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterLiteralOperatorId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitLiteralOperatorId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitLiteralOperatorId(this);}else{return visitor.visitChildren(this);}}}class TemplateDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_templateDeclaration;}Template(){return this.getToken(CPP14Parser.Template,0);}Less(){return this.getToken(CPP14Parser.Less,0);}templateparameterList(){return this.getTypedRuleContext(TemplateparameterListContext,0);}Greater(){return this.getToken(CPP14Parser.Greater,0);}declaration(){return this.getTypedRuleContext(DeclarationContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTemplateDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTemplateDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTemplateDeclaration(this);}else{return visitor.visitChildren(this);}}}class TemplateparameterListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_templateparameterList;}templateParameter=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TemplateParameterContext);}else{return this.getTypedRuleContext(TemplateParameterContext,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTemplateparameterList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTemplateparameterList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTemplateparameterList(this);}else{return visitor.visitChildren(this);}}}class TemplateParameterContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_templateParameter;}typeParameter(){return this.getTypedRuleContext(TypeParameterContext,0);}parameterDeclaration(){return this.getTypedRuleContext(ParameterDeclarationContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTemplateParameter(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTemplateParameter(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTemplateParameter(this);}else{return visitor.visitChildren(this);}}}class TypeParameterContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_typeParameter;}Class(){return this.getToken(CPP14Parser.Class,0);}Typename_(){return this.getToken(CPP14Parser.Typename_,0);}Assign(){return this.getToken(CPP14Parser.Assign,0);}theTypeId(){return this.getTypedRuleContext(TheTypeIdContext,0);}Template(){return this.getToken(CPP14Parser.Template,0);}Less(){return this.getToken(CPP14Parser.Less,0);}templateparameterList(){return this.getTypedRuleContext(TemplateparameterListContext,0);}Greater(){return this.getToken(CPP14Parser.Greater,0);}Ellipsis(){return this.getToken(CPP14Parser.Ellipsis,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTypeParameter(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTypeParameter(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTypeParameter(this);}else{return visitor.visitChildren(this);}}}class SimpleTemplateIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_simpleTemplateId;}templateName(){return this.getTypedRuleContext(TemplateNameContext,0);}Less(){return this.getToken(CPP14Parser.Less,0);}Greater(){return this.getToken(CPP14Parser.Greater,0);}templateArgumentList(){return this.getTypedRuleContext(TemplateArgumentListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterSimpleTemplateId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitSimpleTemplateId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitSimpleTemplateId(this);}else{return visitor.visitChildren(this);}}}class TemplateIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_templateId;}simpleTemplateId(){return this.getTypedRuleContext(SimpleTemplateIdContext,0);}Less(){return this.getToken(CPP14Parser.Less,0);}Greater(){return this.getToken(CPP14Parser.Greater,0);}operatorFunctionId(){return this.getTypedRuleContext(OperatorFunctionIdContext,0);}literalOperatorId(){return this.getTypedRuleContext(LiteralOperatorIdContext,0);}templateArgumentList(){return this.getTypedRuleContext(TemplateArgumentListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTemplateId(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTemplateId(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTemplateId(this);}else{return visitor.visitChildren(this);}}}class TemplateNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_templateName;}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTemplateName(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTemplateName(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTemplateName(this);}else{return visitor.visitChildren(this);}}}class TemplateArgumentListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_templateArgumentList;}templateArgument=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TemplateArgumentContext);}else{return this.getTypedRuleContext(TemplateArgumentContext,i);}};Ellipsis=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Ellipsis);}else{return this.getToken(CPP14Parser.Ellipsis,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTemplateArgumentList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTemplateArgumentList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTemplateArgumentList(this);}else{return visitor.visitChildren(this);}}}class TemplateArgumentContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_templateArgument;}theTypeId(){return this.getTypedRuleContext(TheTypeIdContext,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}idExpression(){return this.getTypedRuleContext(IdExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTemplateArgument(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTemplateArgument(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTemplateArgument(this);}else{return visitor.visitChildren(this);}}}class TypeNameSpecifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_typeNameSpecifier;}Typename_(){return this.getToken(CPP14Parser.Typename_,0);}nestedNameSpecifier(){return this.getTypedRuleContext(NestedNameSpecifierContext,0);}Identifier(){return this.getToken(CPP14Parser.Identifier,0);}simpleTemplateId(){return this.getTypedRuleContext(SimpleTemplateIdContext,0);}Template(){return this.getToken(CPP14Parser.Template,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTypeNameSpecifier(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTypeNameSpecifier(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTypeNameSpecifier(this);}else{return visitor.visitChildren(this);}}}class ExplicitInstantiationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_explicitInstantiation;}Template(){return this.getToken(CPP14Parser.Template,0);}declaration(){return this.getTypedRuleContext(DeclarationContext,0);}Extern(){return this.getToken(CPP14Parser.Extern,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterExplicitInstantiation(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitExplicitInstantiation(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitExplicitInstantiation(this);}else{return visitor.visitChildren(this);}}}class ExplicitSpecializationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_explicitSpecialization;}Template(){return this.getToken(CPP14Parser.Template,0);}Less(){return this.getToken(CPP14Parser.Less,0);}Greater(){return this.getToken(CPP14Parser.Greater,0);}declaration(){return this.getTypedRuleContext(DeclarationContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterExplicitSpecialization(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitExplicitSpecialization(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitExplicitSpecialization(this);}else{return visitor.visitChildren(this);}}}class TryBlockContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_tryBlock;}Try(){return this.getToken(CPP14Parser.Try,0);}compoundStatement(){return this.getTypedRuleContext(CompoundStatementContext,0);}handlerSeq(){return this.getTypedRuleContext(HandlerSeqContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTryBlock(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTryBlock(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTryBlock(this);}else{return visitor.visitChildren(this);}}}class FunctionTryBlockContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_functionTryBlock;}Try(){return this.getToken(CPP14Parser.Try,0);}compoundStatement(){return this.getTypedRuleContext(CompoundStatementContext,0);}handlerSeq(){return this.getTypedRuleContext(HandlerSeqContext,0);}constructorInitializer(){return this.getTypedRuleContext(ConstructorInitializerContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterFunctionTryBlock(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitFunctionTryBlock(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitFunctionTryBlock(this);}else{return visitor.visitChildren(this);}}}class HandlerSeqContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_handlerSeq;}handler=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(HandlerContext);}else{return this.getTypedRuleContext(HandlerContext,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterHandlerSeq(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitHandlerSeq(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitHandlerSeq(this);}else{return visitor.visitChildren(this);}}}class HandlerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_handler;}Catch(){return this.getToken(CPP14Parser.Catch,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}exceptionDeclaration(){return this.getTypedRuleContext(ExceptionDeclarationContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}compoundStatement(){return this.getTypedRuleContext(CompoundStatementContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterHandler(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitHandler(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitHandler(this);}else{return visitor.visitChildren(this);}}}class ExceptionDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_exceptionDeclaration;}typeSpecifierSeq(){return this.getTypedRuleContext(TypeSpecifierSeqContext,0);}attributeSpecifierSeq(){return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);}declarator(){return this.getTypedRuleContext(DeclaratorContext,0);}abstractDeclarator(){return this.getTypedRuleContext(AbstractDeclaratorContext,0);}Ellipsis(){return this.getToken(CPP14Parser.Ellipsis,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterExceptionDeclaration(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitExceptionDeclaration(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitExceptionDeclaration(this);}else{return visitor.visitChildren(this);}}}class ThrowExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_throwExpression;}Throw(){return this.getToken(CPP14Parser.Throw,0);}assignmentExpression(){return this.getTypedRuleContext(AssignmentExpressionContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterThrowExpression(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitThrowExpression(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitThrowExpression(this);}else{return visitor.visitChildren(this);}}}class ExceptionSpecificationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_exceptionSpecification;}dynamicExceptionSpecification(){return this.getTypedRuleContext(DynamicExceptionSpecificationContext,0);}noeExceptSpecification(){return this.getTypedRuleContext(NoeExceptSpecificationContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterExceptionSpecification(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitExceptionSpecification(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitExceptionSpecification(this);}else{return visitor.visitChildren(this);}}}class DynamicExceptionSpecificationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_dynamicExceptionSpecification;}Throw(){return this.getToken(CPP14Parser.Throw,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}typeIdList(){return this.getTypedRuleContext(TypeIdListContext,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterDynamicExceptionSpecification(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitDynamicExceptionSpecification(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitDynamicExceptionSpecification(this);}else{return visitor.visitChildren(this);}}}class TypeIdListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_typeIdList;}theTypeId=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TheTypeIdContext);}else{return this.getTypedRuleContext(TheTypeIdContext,i);}};Ellipsis=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Ellipsis);}else{return this.getToken(CPP14Parser.Ellipsis,i);}};Comma=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Comma);}else{return this.getToken(CPP14Parser.Comma,i);}};enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTypeIdList(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTypeIdList(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTypeIdList(this);}else{return visitor.visitChildren(this);}}}class NoeExceptSpecificationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_noeExceptSpecification;}Noexcept(){return this.getToken(CPP14Parser.Noexcept,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}constantExpression(){return this.getTypedRuleContext(ConstantExpressionContext,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterNoeExceptSpecification(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitNoeExceptSpecification(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitNoeExceptSpecification(this);}else{return visitor.visitChildren(this);}}}class TheOperatorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_theOperator;}New(){return this.getToken(CPP14Parser.New,0);}LeftBracket(){return this.getToken(CPP14Parser.LeftBracket,0);}RightBracket(){return this.getToken(CPP14Parser.RightBracket,0);}Delete(){return this.getToken(CPP14Parser.Delete,0);}Plus(){return this.getToken(CPP14Parser.Plus,0);}Minus(){return this.getToken(CPP14Parser.Minus,0);}Star(){return this.getToken(CPP14Parser.Star,0);}Div(){return this.getToken(CPP14Parser.Div,0);}Mod(){return this.getToken(CPP14Parser.Mod,0);}Caret(){return this.getToken(CPP14Parser.Caret,0);}And(){return this.getToken(CPP14Parser.And,0);}Or(){return this.getToken(CPP14Parser.Or,0);}Tilde(){return this.getToken(CPP14Parser.Tilde,0);}Not(){return this.getToken(CPP14Parser.Not,0);}Assign(){return this.getToken(CPP14Parser.Assign,0);}Greater=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Greater);}else{return this.getToken(CPP14Parser.Greater,i);}};Less=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CPP14Parser.Less);}else{return this.getToken(CPP14Parser.Less,i);}};GreaterEqual(){return this.getToken(CPP14Parser.GreaterEqual,0);}PlusAssign(){return this.getToken(CPP14Parser.PlusAssign,0);}MinusAssign(){return this.getToken(CPP14Parser.MinusAssign,0);}StarAssign(){return this.getToken(CPP14Parser.StarAssign,0);}ModAssign(){return this.getToken(CPP14Parser.ModAssign,0);}XorAssign(){return this.getToken(CPP14Parser.XorAssign,0);}AndAssign(){return this.getToken(CPP14Parser.AndAssign,0);}OrAssign(){return this.getToken(CPP14Parser.OrAssign,0);}RightShiftAssign(){return this.getToken(CPP14Parser.RightShiftAssign,0);}LeftShiftAssign(){return this.getToken(CPP14Parser.LeftShiftAssign,0);}Equal(){return this.getToken(CPP14Parser.Equal,0);}NotEqual(){return this.getToken(CPP14Parser.NotEqual,0);}LessEqual(){return this.getToken(CPP14Parser.LessEqual,0);}AndAnd(){return this.getToken(CPP14Parser.AndAnd,0);}OrOr(){return this.getToken(CPP14Parser.OrOr,0);}PlusPlus(){return this.getToken(CPP14Parser.PlusPlus,0);}MinusMinus(){return this.getToken(CPP14Parser.MinusMinus,0);}Comma(){return this.getToken(CPP14Parser.Comma,0);}ArrowStar(){return this.getToken(CPP14Parser.ArrowStar,0);}Arrow(){return this.getToken(CPP14Parser.Arrow,0);}LeftParen(){return this.getToken(CPP14Parser.LeftParen,0);}RightParen(){return this.getToken(CPP14Parser.RightParen,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterTheOperator(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitTheOperator(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitTheOperator(this);}else{return visitor.visitChildren(this);}}}class LiteralContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=CPP14Parser.RULE_literal;}IntegerLiteral(){return this.getToken(CPP14Parser.IntegerLiteral,0);}CharacterLiteral(){return this.getToken(CPP14Parser.CharacterLiteral,0);}FloatingLiteral(){return this.getToken(CPP14Parser.FloatingLiteral,0);}StringLiteral(){return this.getToken(CPP14Parser.StringLiteral,0);}BooleanLiteral(){return this.getToken(CPP14Parser.BooleanLiteral,0);}PointerLiteral(){return this.getToken(CPP14Parser.PointerLiteral,0);}UserDefinedLiteral(){return this.getToken(CPP14Parser.UserDefinedLiteral,0);}enterRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.enterLiteral(this);}}exitRule(listener){if(listener instanceof _CPP14ParserListener.default){listener.exitLiteral(this);}}accept(visitor){if(visitor instanceof _CPP14ParserVisitor.default){return visitor.visitLiteral(this);}else{return visitor.visitChildren(this);}}}CPP14Parser.TranslationUnitContext=TranslationUnitContext;CPP14Parser.PrimaryExpressionContext=PrimaryExpressionContext;CPP14Parser.IdExpressionContext=IdExpressionContext;CPP14Parser.UnqualifiedIdContext=UnqualifiedIdContext;CPP14Parser.QualifiedIdContext=QualifiedIdContext;CPP14Parser.NestedNameSpecifierContext=NestedNameSpecifierContext;CPP14Parser.LambdaExpressionContext=LambdaExpressionContext;CPP14Parser.LambdaIntroducerContext=LambdaIntroducerContext;CPP14Parser.LambdaCaptureContext=LambdaCaptureContext;CPP14Parser.CaptureDefaultContext=CaptureDefaultContext;CPP14Parser.CaptureListContext=CaptureListContext;CPP14Parser.CaptureContext=CaptureContext;CPP14Parser.SimpleCaptureContext=SimpleCaptureContext;CPP14Parser.InitcaptureContext=InitcaptureContext;CPP14Parser.LambdaDeclaratorContext=LambdaDeclaratorContext;CPP14Parser.PostfixExpressionContext=PostfixExpressionContext;CPP14Parser.TypeIdOfTheTypeIdContext=TypeIdOfTheTypeIdContext;CPP14Parser.ExpressionListContext=ExpressionListContext;CPP14Parser.PseudoDestructorNameContext=PseudoDestructorNameContext;CPP14Parser.UnaryExpressionContext=UnaryExpressionContext;CPP14Parser.UnaryOperatorContext=UnaryOperatorContext;CPP14Parser.NewExpressionContext=NewExpressionContext;CPP14Parser.NewPlacementContext=NewPlacementContext;CPP14Parser.NewTypeIdContext=NewTypeIdContext;CPP14Parser.NewDeclaratorContext=NewDeclaratorContext;CPP14Parser.NoPointerNewDeclaratorContext=NoPointerNewDeclaratorContext;CPP14Parser.NewInitializerContext=NewInitializerContext;CPP14Parser.DeleteExpressionContext=DeleteExpressionContext;CPP14Parser.NoExceptExpressionContext=NoExceptExpressionContext;CPP14Parser.CastExpressionContext=CastExpressionContext;CPP14Parser.PointerMemberExpressionContext=PointerMemberExpressionContext;CPP14Parser.MultiplicativeExpressionContext=MultiplicativeExpressionContext;CPP14Parser.AdditiveExpressionContext=AdditiveExpressionContext;CPP14Parser.ShiftExpressionContext=ShiftExpressionContext;CPP14Parser.ShiftOperatorContext=ShiftOperatorContext;CPP14Parser.RelationalExpressionContext=RelationalExpressionContext;CPP14Parser.EqualityExpressionContext=EqualityExpressionContext;CPP14Parser.AndExpressionContext=AndExpressionContext;CPP14Parser.ExclusiveOrExpressionContext=ExclusiveOrExpressionContext;CPP14Parser.InclusiveOrExpressionContext=InclusiveOrExpressionContext;CPP14Parser.LogicalAndExpressionContext=LogicalAndExpressionContext;CPP14Parser.LogicalOrExpressionContext=LogicalOrExpressionContext;CPP14Parser.ConditionalExpressionContext=ConditionalExpressionContext;CPP14Parser.AssignmentExpressionContext=AssignmentExpressionContext;CPP14Parser.AssignmentOperatorContext=AssignmentOperatorContext;CPP14Parser.ExpressionContext=ExpressionContext;CPP14Parser.ConstantExpressionContext=ConstantExpressionContext;CPP14Parser.StatementContext=StatementContext;CPP14Parser.LabeledStatementContext=LabeledStatementContext;CPP14Parser.ExpressionStatementContext=ExpressionStatementContext;CPP14Parser.CompoundStatementContext=CompoundStatementContext;CPP14Parser.StatementSeqContext=StatementSeqContext;CPP14Parser.SelectionStatementContext=SelectionStatementContext;CPP14Parser.ConditionContext=ConditionContext;CPP14Parser.IterationStatementContext=IterationStatementContext;CPP14Parser.ForInitStatementContext=ForInitStatementContext;CPP14Parser.ForRangeDeclarationContext=ForRangeDeclarationContext;CPP14Parser.ForRangeInitializerContext=ForRangeInitializerContext;CPP14Parser.JumpStatementContext=JumpStatementContext;CPP14Parser.DeclarationStatementContext=DeclarationStatementContext;CPP14Parser.DeclarationseqContext=DeclarationseqContext;CPP14Parser.DeclarationContext=DeclarationContext;CPP14Parser.BlockDeclarationContext=BlockDeclarationContext;CPP14Parser.AliasDeclarationContext=AliasDeclarationContext;CPP14Parser.SimpleDeclarationContext=SimpleDeclarationContext;CPP14Parser.StaticAssertDeclarationContext=StaticAssertDeclarationContext;CPP14Parser.EmptyDeclarationContext=EmptyDeclarationContext;CPP14Parser.AttributeDeclarationContext=AttributeDeclarationContext;CPP14Parser.DeclSpecifierContext=DeclSpecifierContext;CPP14Parser.DeclSpecifierSeqContext=DeclSpecifierSeqContext;CPP14Parser.StorageClassSpecifierContext=StorageClassSpecifierContext;CPP14Parser.FunctionSpecifierContext=FunctionSpecifierContext;CPP14Parser.TypedefNameContext=TypedefNameContext;CPP14Parser.TypeSpecifierContext=TypeSpecifierContext;CPP14Parser.TrailingTypeSpecifierContext=TrailingTypeSpecifierContext;CPP14Parser.TypeSpecifierSeqContext=TypeSpecifierSeqContext;CPP14Parser.TrailingTypeSpecifierSeqContext=TrailingTypeSpecifierSeqContext;CPP14Parser.SimpleTypeLengthModifierContext=SimpleTypeLengthModifierContext;CPP14Parser.SimpleTypeSignednessModifierContext=SimpleTypeSignednessModifierContext;CPP14Parser.SimpleTypeSpecifierContext=SimpleTypeSpecifierContext;CPP14Parser.TheTypeNameContext=TheTypeNameContext;CPP14Parser.DecltypeSpecifierContext=DecltypeSpecifierContext;CPP14Parser.ElaboratedTypeSpecifierContext=ElaboratedTypeSpecifierContext;CPP14Parser.EnumNameContext=EnumNameContext;CPP14Parser.EnumSpecifierContext=EnumSpecifierContext;CPP14Parser.EnumHeadContext=EnumHeadContext;CPP14Parser.OpaqueEnumDeclarationContext=OpaqueEnumDeclarationContext;CPP14Parser.EnumkeyContext=EnumkeyContext;CPP14Parser.EnumbaseContext=EnumbaseContext;CPP14Parser.EnumeratorListContext=EnumeratorListContext;CPP14Parser.EnumeratorDefinitionContext=EnumeratorDefinitionContext;CPP14Parser.EnumeratorContext=EnumeratorContext;CPP14Parser.NamespaceNameContext=NamespaceNameContext;CPP14Parser.OriginalNamespaceNameContext=OriginalNamespaceNameContext;CPP14Parser.NamespaceDefinitionContext=NamespaceDefinitionContext;CPP14Parser.NamespaceAliasContext=NamespaceAliasContext;CPP14Parser.NamespaceAliasDefinitionContext=NamespaceAliasDefinitionContext;CPP14Parser.QualifiednamespacespecifierContext=QualifiednamespacespecifierContext;CPP14Parser.UsingDeclarationContext=UsingDeclarationContext;CPP14Parser.UsingDirectiveContext=UsingDirectiveContext;CPP14Parser.AsmDefinitionContext=AsmDefinitionContext;CPP14Parser.LinkageSpecificationContext=LinkageSpecificationContext;CPP14Parser.AttributeSpecifierSeqContext=AttributeSpecifierSeqContext;CPP14Parser.AttributeSpecifierContext=AttributeSpecifierContext;CPP14Parser.AlignmentspecifierContext=AlignmentspecifierContext;CPP14Parser.AttributeListContext=AttributeListContext;CPP14Parser.AttributeContext=AttributeContext;CPP14Parser.AttributeNamespaceContext=AttributeNamespaceContext;CPP14Parser.AttributeArgumentClauseContext=AttributeArgumentClauseContext;CPP14Parser.BalancedTokenSeqContext=BalancedTokenSeqContext;CPP14Parser.BalancedtokenContext=BalancedtokenContext;CPP14Parser.InitDeclaratorListContext=InitDeclaratorListContext;CPP14Parser.InitDeclaratorContext=InitDeclaratorContext;CPP14Parser.DeclaratorContext=DeclaratorContext;CPP14Parser.PointerDeclaratorContext=PointerDeclaratorContext;CPP14Parser.NoPointerDeclaratorContext=NoPointerDeclaratorContext;CPP14Parser.ParametersAndQualifiersContext=ParametersAndQualifiersContext;CPP14Parser.TrailingReturnTypeContext=TrailingReturnTypeContext;CPP14Parser.PointerOperatorContext=PointerOperatorContext;CPP14Parser.CvqualifierseqContext=CvqualifierseqContext;CPP14Parser.CvQualifierContext=CvQualifierContext;CPP14Parser.RefqualifierContext=RefqualifierContext;CPP14Parser.DeclaratoridContext=DeclaratoridContext;CPP14Parser.TheTypeIdContext=TheTypeIdContext;CPP14Parser.AbstractDeclaratorContext=AbstractDeclaratorContext;CPP14Parser.PointerAbstractDeclaratorContext=PointerAbstractDeclaratorContext;CPP14Parser.NoPointerAbstractDeclaratorContext=NoPointerAbstractDeclaratorContext;CPP14Parser.AbstractPackDeclaratorContext=AbstractPackDeclaratorContext;CPP14Parser.NoPointerAbstractPackDeclaratorContext=NoPointerAbstractPackDeclaratorContext;CPP14Parser.ParameterDeclarationClauseContext=ParameterDeclarationClauseContext;CPP14Parser.ParameterDeclarationListContext=ParameterDeclarationListContext;CPP14Parser.ParameterDeclarationContext=ParameterDeclarationContext;CPP14Parser.FunctionDefinitionContext=FunctionDefinitionContext;CPP14Parser.FunctionBodyContext=FunctionBodyContext;CPP14Parser.InitializerContext=InitializerContext;CPP14Parser.BraceOrEqualInitializerContext=BraceOrEqualInitializerContext;CPP14Parser.InitializerClauseContext=InitializerClauseContext;CPP14Parser.InitializerListContext=InitializerListContext;CPP14Parser.BracedInitListContext=BracedInitListContext;CPP14Parser.ClassNameContext=ClassNameContext;CPP14Parser.ClassSpecifierContext=ClassSpecifierContext;CPP14Parser.ClassHeadContext=ClassHeadContext;CPP14Parser.ClassHeadNameContext=ClassHeadNameContext;CPP14Parser.ClassVirtSpecifierContext=ClassVirtSpecifierContext;CPP14Parser.ClassKeyContext=ClassKeyContext;CPP14Parser.MemberSpecificationContext=MemberSpecificationContext;CPP14Parser.MemberdeclarationContext=MemberdeclarationContext;CPP14Parser.MemberDeclaratorListContext=MemberDeclaratorListContext;CPP14Parser.MemberDeclaratorContext=MemberDeclaratorContext;CPP14Parser.VirtualSpecifierSeqContext=VirtualSpecifierSeqContext;CPP14Parser.VirtualSpecifierContext=VirtualSpecifierContext;CPP14Parser.PureSpecifierContext=PureSpecifierContext;CPP14Parser.BaseClauseContext=BaseClauseContext;CPP14Parser.BaseSpecifierListContext=BaseSpecifierListContext;CPP14Parser.BaseSpecifierContext=BaseSpecifierContext;CPP14Parser.ClassOrDeclTypeContext=ClassOrDeclTypeContext;CPP14Parser.BaseTypeSpecifierContext=BaseTypeSpecifierContext;CPP14Parser.AccessSpecifierContext=AccessSpecifierContext;CPP14Parser.ConversionFunctionIdContext=ConversionFunctionIdContext;CPP14Parser.ConversionTypeIdContext=ConversionTypeIdContext;CPP14Parser.ConversionDeclaratorContext=ConversionDeclaratorContext;CPP14Parser.ConstructorInitializerContext=ConstructorInitializerContext;CPP14Parser.MemInitializerListContext=MemInitializerListContext;CPP14Parser.MemInitializerContext=MemInitializerContext;CPP14Parser.MeminitializeridContext=MeminitializeridContext;CPP14Parser.OperatorFunctionIdContext=OperatorFunctionIdContext;CPP14Parser.LiteralOperatorIdContext=LiteralOperatorIdContext;CPP14Parser.TemplateDeclarationContext=TemplateDeclarationContext;CPP14Parser.TemplateparameterListContext=TemplateparameterListContext;CPP14Parser.TemplateParameterContext=TemplateParameterContext;CPP14Parser.TypeParameterContext=TypeParameterContext;CPP14Parser.SimpleTemplateIdContext=SimpleTemplateIdContext;CPP14Parser.TemplateIdContext=TemplateIdContext;CPP14Parser.TemplateNameContext=TemplateNameContext;CPP14Parser.TemplateArgumentListContext=TemplateArgumentListContext;CPP14Parser.TemplateArgumentContext=TemplateArgumentContext;CPP14Parser.TypeNameSpecifierContext=TypeNameSpecifierContext;CPP14Parser.ExplicitInstantiationContext=ExplicitInstantiationContext;CPP14Parser.ExplicitSpecializationContext=ExplicitSpecializationContext;CPP14Parser.TryBlockContext=TryBlockContext;CPP14Parser.FunctionTryBlockContext=FunctionTryBlockContext;CPP14Parser.HandlerSeqContext=HandlerSeqContext;CPP14Parser.HandlerContext=HandlerContext;CPP14Parser.ExceptionDeclarationContext=ExceptionDeclarationContext;CPP14Parser.ThrowExpressionContext=ThrowExpressionContext;CPP14Parser.ExceptionSpecificationContext=ExceptionSpecificationContext;CPP14Parser.DynamicExceptionSpecificationContext=DynamicExceptionSpecificationContext;CPP14Parser.TypeIdListContext=TypeIdListContext;CPP14Parser.NoeExceptSpecificationContext=NoeExceptSpecificationContext;CPP14Parser.TheOperatorContext=TheOperatorContext;CPP14Parser.LiteralContext=LiteralContext;

},{"./CPP14ParserListener.js":129,"./CPP14ParserVisitor.js":130,"antlr4":42}],129:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/CPP14Parser.g4 by ANTLR 4.9.2
// jshint ignore: start
// This class defines a complete listener for a parse tree produced by CPP14Parser.
class CPP14ParserListener extends _antlr.default.tree.ParseTreeListener {
  // Enter a parse tree produced by CPP14Parser#translationUnit.
  enterTranslationUnit(ctx) {} // Exit a parse tree produced by CPP14Parser#translationUnit.


  exitTranslationUnit(ctx) {} // Enter a parse tree produced by CPP14Parser#primaryExpression.


  enterPrimaryExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#primaryExpression.


  exitPrimaryExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#idExpression.


  enterIdExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#idExpression.


  exitIdExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#unqualifiedId.


  enterUnqualifiedId(ctx) {} // Exit a parse tree produced by CPP14Parser#unqualifiedId.


  exitUnqualifiedId(ctx) {} // Enter a parse tree produced by CPP14Parser#qualifiedId.


  enterQualifiedId(ctx) {} // Exit a parse tree produced by CPP14Parser#qualifiedId.


  exitQualifiedId(ctx) {} // Enter a parse tree produced by CPP14Parser#nestedNameSpecifier.


  enterNestedNameSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#nestedNameSpecifier.


  exitNestedNameSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#lambdaExpression.


  enterLambdaExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#lambdaExpression.


  exitLambdaExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#lambdaIntroducer.


  enterLambdaIntroducer(ctx) {} // Exit a parse tree produced by CPP14Parser#lambdaIntroducer.


  exitLambdaIntroducer(ctx) {} // Enter a parse tree produced by CPP14Parser#lambdaCapture.


  enterLambdaCapture(ctx) {} // Exit a parse tree produced by CPP14Parser#lambdaCapture.


  exitLambdaCapture(ctx) {} // Enter a parse tree produced by CPP14Parser#captureDefault.


  enterCaptureDefault(ctx) {} // Exit a parse tree produced by CPP14Parser#captureDefault.


  exitCaptureDefault(ctx) {} // Enter a parse tree produced by CPP14Parser#captureList.


  enterCaptureList(ctx) {} // Exit a parse tree produced by CPP14Parser#captureList.


  exitCaptureList(ctx) {} // Enter a parse tree produced by CPP14Parser#capture.


  enterCapture(ctx) {} // Exit a parse tree produced by CPP14Parser#capture.


  exitCapture(ctx) {} // Enter a parse tree produced by CPP14Parser#simpleCapture.


  enterSimpleCapture(ctx) {} // Exit a parse tree produced by CPP14Parser#simpleCapture.


  exitSimpleCapture(ctx) {} // Enter a parse tree produced by CPP14Parser#initcapture.


  enterInitcapture(ctx) {} // Exit a parse tree produced by CPP14Parser#initcapture.


  exitInitcapture(ctx) {} // Enter a parse tree produced by CPP14Parser#lambdaDeclarator.


  enterLambdaDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#lambdaDeclarator.


  exitLambdaDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#postfixExpression.


  enterPostfixExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#postfixExpression.


  exitPostfixExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#typeIdOfTheTypeId.


  enterTypeIdOfTheTypeId(ctx) {} // Exit a parse tree produced by CPP14Parser#typeIdOfTheTypeId.


  exitTypeIdOfTheTypeId(ctx) {} // Enter a parse tree produced by CPP14Parser#expressionList.


  enterExpressionList(ctx) {} // Exit a parse tree produced by CPP14Parser#expressionList.


  exitExpressionList(ctx) {} // Enter a parse tree produced by CPP14Parser#pseudoDestructorName.


  enterPseudoDestructorName(ctx) {} // Exit a parse tree produced by CPP14Parser#pseudoDestructorName.


  exitPseudoDestructorName(ctx) {} // Enter a parse tree produced by CPP14Parser#unaryExpression.


  enterUnaryExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#unaryExpression.


  exitUnaryExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#unaryOperator.


  enterUnaryOperator(ctx) {} // Exit a parse tree produced by CPP14Parser#unaryOperator.


  exitUnaryOperator(ctx) {} // Enter a parse tree produced by CPP14Parser#newExpression.


  enterNewExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#newExpression.


  exitNewExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#newPlacement.


  enterNewPlacement(ctx) {} // Exit a parse tree produced by CPP14Parser#newPlacement.


  exitNewPlacement(ctx) {} // Enter a parse tree produced by CPP14Parser#newTypeId.


  enterNewTypeId(ctx) {} // Exit a parse tree produced by CPP14Parser#newTypeId.


  exitNewTypeId(ctx) {} // Enter a parse tree produced by CPP14Parser#newDeclarator.


  enterNewDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#newDeclarator.


  exitNewDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#noPointerNewDeclarator.


  enterNoPointerNewDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#noPointerNewDeclarator.


  exitNoPointerNewDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#newInitializer.


  enterNewInitializer(ctx) {} // Exit a parse tree produced by CPP14Parser#newInitializer.


  exitNewInitializer(ctx) {} // Enter a parse tree produced by CPP14Parser#deleteExpression.


  enterDeleteExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#deleteExpression.


  exitDeleteExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#noExceptExpression.


  enterNoExceptExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#noExceptExpression.


  exitNoExceptExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#castExpression.


  enterCastExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#castExpression.


  exitCastExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#pointerMemberExpression.


  enterPointerMemberExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#pointerMemberExpression.


  exitPointerMemberExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#multiplicativeExpression.


  enterMultiplicativeExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#multiplicativeExpression.


  exitMultiplicativeExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#additiveExpression.


  enterAdditiveExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#additiveExpression.


  exitAdditiveExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#shiftExpression.


  enterShiftExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#shiftExpression.


  exitShiftExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#shiftOperator.


  enterShiftOperator(ctx) {} // Exit a parse tree produced by CPP14Parser#shiftOperator.


  exitShiftOperator(ctx) {} // Enter a parse tree produced by CPP14Parser#relationalExpression.


  enterRelationalExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#relationalExpression.


  exitRelationalExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#equalityExpression.


  enterEqualityExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#equalityExpression.


  exitEqualityExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#andExpression.


  enterAndExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#andExpression.


  exitAndExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#exclusiveOrExpression.


  enterExclusiveOrExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#exclusiveOrExpression.


  exitExclusiveOrExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#inclusiveOrExpression.


  enterInclusiveOrExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#inclusiveOrExpression.


  exitInclusiveOrExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#logicalAndExpression.


  enterLogicalAndExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#logicalAndExpression.


  exitLogicalAndExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#logicalOrExpression.


  enterLogicalOrExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#logicalOrExpression.


  exitLogicalOrExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#conditionalExpression.


  enterConditionalExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#conditionalExpression.


  exitConditionalExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#assignmentExpression.


  enterAssignmentExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#assignmentExpression.


  exitAssignmentExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#assignmentOperator.


  enterAssignmentOperator(ctx) {} // Exit a parse tree produced by CPP14Parser#assignmentOperator.


  exitAssignmentOperator(ctx) {} // Enter a parse tree produced by CPP14Parser#expression.


  enterExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#expression.


  exitExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#constantExpression.


  enterConstantExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#constantExpression.


  exitConstantExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#statement.


  enterStatement(ctx) {} // Exit a parse tree produced by CPP14Parser#statement.


  exitStatement(ctx) {} // Enter a parse tree produced by CPP14Parser#labeledStatement.


  enterLabeledStatement(ctx) {} // Exit a parse tree produced by CPP14Parser#labeledStatement.


  exitLabeledStatement(ctx) {} // Enter a parse tree produced by CPP14Parser#expressionStatement.


  enterExpressionStatement(ctx) {} // Exit a parse tree produced by CPP14Parser#expressionStatement.


  exitExpressionStatement(ctx) {} // Enter a parse tree produced by CPP14Parser#compoundStatement.


  enterCompoundStatement(ctx) {} // Exit a parse tree produced by CPP14Parser#compoundStatement.


  exitCompoundStatement(ctx) {} // Enter a parse tree produced by CPP14Parser#statementSeq.


  enterStatementSeq(ctx) {} // Exit a parse tree produced by CPP14Parser#statementSeq.


  exitStatementSeq(ctx) {} // Enter a parse tree produced by CPP14Parser#selectionStatement.


  enterSelectionStatement(ctx) {} // Exit a parse tree produced by CPP14Parser#selectionStatement.


  exitSelectionStatement(ctx) {} // Enter a parse tree produced by CPP14Parser#condition.


  enterCondition(ctx) {} // Exit a parse tree produced by CPP14Parser#condition.


  exitCondition(ctx) {} // Enter a parse tree produced by CPP14Parser#iterationStatement.


  enterIterationStatement(ctx) {} // Exit a parse tree produced by CPP14Parser#iterationStatement.


  exitIterationStatement(ctx) {} // Enter a parse tree produced by CPP14Parser#forInitStatement.


  enterForInitStatement(ctx) {} // Exit a parse tree produced by CPP14Parser#forInitStatement.


  exitForInitStatement(ctx) {} // Enter a parse tree produced by CPP14Parser#forRangeDeclaration.


  enterForRangeDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#forRangeDeclaration.


  exitForRangeDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#forRangeInitializer.


  enterForRangeInitializer(ctx) {} // Exit a parse tree produced by CPP14Parser#forRangeInitializer.


  exitForRangeInitializer(ctx) {} // Enter a parse tree produced by CPP14Parser#jumpStatement.


  enterJumpStatement(ctx) {} // Exit a parse tree produced by CPP14Parser#jumpStatement.


  exitJumpStatement(ctx) {} // Enter a parse tree produced by CPP14Parser#declarationStatement.


  enterDeclarationStatement(ctx) {} // Exit a parse tree produced by CPP14Parser#declarationStatement.


  exitDeclarationStatement(ctx) {} // Enter a parse tree produced by CPP14Parser#declarationseq.


  enterDeclarationseq(ctx) {} // Exit a parse tree produced by CPP14Parser#declarationseq.


  exitDeclarationseq(ctx) {} // Enter a parse tree produced by CPP14Parser#declaration.


  enterDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#declaration.


  exitDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#blockDeclaration.


  enterBlockDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#blockDeclaration.


  exitBlockDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#aliasDeclaration.


  enterAliasDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#aliasDeclaration.


  exitAliasDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#simpleDeclaration.


  enterSimpleDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#simpleDeclaration.


  exitSimpleDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#staticAssertDeclaration.


  enterStaticAssertDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#staticAssertDeclaration.


  exitStaticAssertDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#emptyDeclaration.


  enterEmptyDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#emptyDeclaration.


  exitEmptyDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#attributeDeclaration.


  enterAttributeDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#attributeDeclaration.


  exitAttributeDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#declSpecifier.


  enterDeclSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#declSpecifier.


  exitDeclSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#declSpecifierSeq.


  enterDeclSpecifierSeq(ctx) {} // Exit a parse tree produced by CPP14Parser#declSpecifierSeq.


  exitDeclSpecifierSeq(ctx) {} // Enter a parse tree produced by CPP14Parser#storageClassSpecifier.


  enterStorageClassSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#storageClassSpecifier.


  exitStorageClassSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#functionSpecifier.


  enterFunctionSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#functionSpecifier.


  exitFunctionSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#typedefName.


  enterTypedefName(ctx) {} // Exit a parse tree produced by CPP14Parser#typedefName.


  exitTypedefName(ctx) {} // Enter a parse tree produced by CPP14Parser#typeSpecifier.


  enterTypeSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#typeSpecifier.


  exitTypeSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#trailingTypeSpecifier.


  enterTrailingTypeSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#trailingTypeSpecifier.


  exitTrailingTypeSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#typeSpecifierSeq.


  enterTypeSpecifierSeq(ctx) {} // Exit a parse tree produced by CPP14Parser#typeSpecifierSeq.


  exitTypeSpecifierSeq(ctx) {} // Enter a parse tree produced by CPP14Parser#trailingTypeSpecifierSeq.


  enterTrailingTypeSpecifierSeq(ctx) {} // Exit a parse tree produced by CPP14Parser#trailingTypeSpecifierSeq.


  exitTrailingTypeSpecifierSeq(ctx) {} // Enter a parse tree produced by CPP14Parser#simpleTypeLengthModifier.


  enterSimpleTypeLengthModifier(ctx) {} // Exit a parse tree produced by CPP14Parser#simpleTypeLengthModifier.


  exitSimpleTypeLengthModifier(ctx) {} // Enter a parse tree produced by CPP14Parser#simpleTypeSignednessModifier.


  enterSimpleTypeSignednessModifier(ctx) {} // Exit a parse tree produced by CPP14Parser#simpleTypeSignednessModifier.


  exitSimpleTypeSignednessModifier(ctx) {} // Enter a parse tree produced by CPP14Parser#simpleTypeSpecifier.


  enterSimpleTypeSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#simpleTypeSpecifier.


  exitSimpleTypeSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#theTypeName.


  enterTheTypeName(ctx) {} // Exit a parse tree produced by CPP14Parser#theTypeName.


  exitTheTypeName(ctx) {} // Enter a parse tree produced by CPP14Parser#decltypeSpecifier.


  enterDecltypeSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#decltypeSpecifier.


  exitDecltypeSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#elaboratedTypeSpecifier.


  enterElaboratedTypeSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#elaboratedTypeSpecifier.


  exitElaboratedTypeSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#enumName.


  enterEnumName(ctx) {} // Exit a parse tree produced by CPP14Parser#enumName.


  exitEnumName(ctx) {} // Enter a parse tree produced by CPP14Parser#enumSpecifier.


  enterEnumSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#enumSpecifier.


  exitEnumSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#enumHead.


  enterEnumHead(ctx) {} // Exit a parse tree produced by CPP14Parser#enumHead.


  exitEnumHead(ctx) {} // Enter a parse tree produced by CPP14Parser#opaqueEnumDeclaration.


  enterOpaqueEnumDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#opaqueEnumDeclaration.


  exitOpaqueEnumDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#enumkey.


  enterEnumkey(ctx) {} // Exit a parse tree produced by CPP14Parser#enumkey.


  exitEnumkey(ctx) {} // Enter a parse tree produced by CPP14Parser#enumbase.


  enterEnumbase(ctx) {} // Exit a parse tree produced by CPP14Parser#enumbase.


  exitEnumbase(ctx) {} // Enter a parse tree produced by CPP14Parser#enumeratorList.


  enterEnumeratorList(ctx) {} // Exit a parse tree produced by CPP14Parser#enumeratorList.


  exitEnumeratorList(ctx) {} // Enter a parse tree produced by CPP14Parser#enumeratorDefinition.


  enterEnumeratorDefinition(ctx) {} // Exit a parse tree produced by CPP14Parser#enumeratorDefinition.


  exitEnumeratorDefinition(ctx) {} // Enter a parse tree produced by CPP14Parser#enumerator.


  enterEnumerator(ctx) {} // Exit a parse tree produced by CPP14Parser#enumerator.


  exitEnumerator(ctx) {} // Enter a parse tree produced by CPP14Parser#namespaceName.


  enterNamespaceName(ctx) {} // Exit a parse tree produced by CPP14Parser#namespaceName.


  exitNamespaceName(ctx) {} // Enter a parse tree produced by CPP14Parser#originalNamespaceName.


  enterOriginalNamespaceName(ctx) {} // Exit a parse tree produced by CPP14Parser#originalNamespaceName.


  exitOriginalNamespaceName(ctx) {} // Enter a parse tree produced by CPP14Parser#namespaceDefinition.


  enterNamespaceDefinition(ctx) {} // Exit a parse tree produced by CPP14Parser#namespaceDefinition.


  exitNamespaceDefinition(ctx) {} // Enter a parse tree produced by CPP14Parser#namespaceAlias.


  enterNamespaceAlias(ctx) {} // Exit a parse tree produced by CPP14Parser#namespaceAlias.


  exitNamespaceAlias(ctx) {} // Enter a parse tree produced by CPP14Parser#namespaceAliasDefinition.


  enterNamespaceAliasDefinition(ctx) {} // Exit a parse tree produced by CPP14Parser#namespaceAliasDefinition.


  exitNamespaceAliasDefinition(ctx) {} // Enter a parse tree produced by CPP14Parser#qualifiednamespacespecifier.


  enterQualifiednamespacespecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#qualifiednamespacespecifier.


  exitQualifiednamespacespecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#usingDeclaration.


  enterUsingDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#usingDeclaration.


  exitUsingDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#usingDirective.


  enterUsingDirective(ctx) {} // Exit a parse tree produced by CPP14Parser#usingDirective.


  exitUsingDirective(ctx) {} // Enter a parse tree produced by CPP14Parser#asmDefinition.


  enterAsmDefinition(ctx) {} // Exit a parse tree produced by CPP14Parser#asmDefinition.


  exitAsmDefinition(ctx) {} // Enter a parse tree produced by CPP14Parser#linkageSpecification.


  enterLinkageSpecification(ctx) {} // Exit a parse tree produced by CPP14Parser#linkageSpecification.


  exitLinkageSpecification(ctx) {} // Enter a parse tree produced by CPP14Parser#attributeSpecifierSeq.


  enterAttributeSpecifierSeq(ctx) {} // Exit a parse tree produced by CPP14Parser#attributeSpecifierSeq.


  exitAttributeSpecifierSeq(ctx) {} // Enter a parse tree produced by CPP14Parser#attributeSpecifier.


  enterAttributeSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#attributeSpecifier.


  exitAttributeSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#alignmentspecifier.


  enterAlignmentspecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#alignmentspecifier.


  exitAlignmentspecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#attributeList.


  enterAttributeList(ctx) {} // Exit a parse tree produced by CPP14Parser#attributeList.


  exitAttributeList(ctx) {} // Enter a parse tree produced by CPP14Parser#attribute.


  enterAttribute(ctx) {} // Exit a parse tree produced by CPP14Parser#attribute.


  exitAttribute(ctx) {} // Enter a parse tree produced by CPP14Parser#attributeNamespace.


  enterAttributeNamespace(ctx) {} // Exit a parse tree produced by CPP14Parser#attributeNamespace.


  exitAttributeNamespace(ctx) {} // Enter a parse tree produced by CPP14Parser#attributeArgumentClause.


  enterAttributeArgumentClause(ctx) {} // Exit a parse tree produced by CPP14Parser#attributeArgumentClause.


  exitAttributeArgumentClause(ctx) {} // Enter a parse tree produced by CPP14Parser#balancedTokenSeq.


  enterBalancedTokenSeq(ctx) {} // Exit a parse tree produced by CPP14Parser#balancedTokenSeq.


  exitBalancedTokenSeq(ctx) {} // Enter a parse tree produced by CPP14Parser#balancedtoken.


  enterBalancedtoken(ctx) {} // Exit a parse tree produced by CPP14Parser#balancedtoken.


  exitBalancedtoken(ctx) {} // Enter a parse tree produced by CPP14Parser#initDeclaratorList.


  enterInitDeclaratorList(ctx) {} // Exit a parse tree produced by CPP14Parser#initDeclaratorList.


  exitInitDeclaratorList(ctx) {} // Enter a parse tree produced by CPP14Parser#initDeclarator.


  enterInitDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#initDeclarator.


  exitInitDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#declarator.


  enterDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#declarator.


  exitDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#pointerDeclarator.


  enterPointerDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#pointerDeclarator.


  exitPointerDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#noPointerDeclarator.


  enterNoPointerDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#noPointerDeclarator.


  exitNoPointerDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#parametersAndQualifiers.


  enterParametersAndQualifiers(ctx) {} // Exit a parse tree produced by CPP14Parser#parametersAndQualifiers.


  exitParametersAndQualifiers(ctx) {} // Enter a parse tree produced by CPP14Parser#trailingReturnType.


  enterTrailingReturnType(ctx) {} // Exit a parse tree produced by CPP14Parser#trailingReturnType.


  exitTrailingReturnType(ctx) {} // Enter a parse tree produced by CPP14Parser#pointerOperator.


  enterPointerOperator(ctx) {} // Exit a parse tree produced by CPP14Parser#pointerOperator.


  exitPointerOperator(ctx) {} // Enter a parse tree produced by CPP14Parser#cvqualifierseq.


  enterCvqualifierseq(ctx) {} // Exit a parse tree produced by CPP14Parser#cvqualifierseq.


  exitCvqualifierseq(ctx) {} // Enter a parse tree produced by CPP14Parser#cvQualifier.


  enterCvQualifier(ctx) {} // Exit a parse tree produced by CPP14Parser#cvQualifier.


  exitCvQualifier(ctx) {} // Enter a parse tree produced by CPP14Parser#refqualifier.


  enterRefqualifier(ctx) {} // Exit a parse tree produced by CPP14Parser#refqualifier.


  exitRefqualifier(ctx) {} // Enter a parse tree produced by CPP14Parser#declaratorid.


  enterDeclaratorid(ctx) {} // Exit a parse tree produced by CPP14Parser#declaratorid.


  exitDeclaratorid(ctx) {} // Enter a parse tree produced by CPP14Parser#theTypeId.


  enterTheTypeId(ctx) {} // Exit a parse tree produced by CPP14Parser#theTypeId.


  exitTheTypeId(ctx) {} // Enter a parse tree produced by CPP14Parser#abstractDeclarator.


  enterAbstractDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#abstractDeclarator.


  exitAbstractDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#pointerAbstractDeclarator.


  enterPointerAbstractDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#pointerAbstractDeclarator.


  exitPointerAbstractDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#noPointerAbstractDeclarator.


  enterNoPointerAbstractDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#noPointerAbstractDeclarator.


  exitNoPointerAbstractDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#abstractPackDeclarator.


  enterAbstractPackDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#abstractPackDeclarator.


  exitAbstractPackDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#noPointerAbstractPackDeclarator.


  enterNoPointerAbstractPackDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#noPointerAbstractPackDeclarator.


  exitNoPointerAbstractPackDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#parameterDeclarationClause.


  enterParameterDeclarationClause(ctx) {} // Exit a parse tree produced by CPP14Parser#parameterDeclarationClause.


  exitParameterDeclarationClause(ctx) {} // Enter a parse tree produced by CPP14Parser#parameterDeclarationList.


  enterParameterDeclarationList(ctx) {} // Exit a parse tree produced by CPP14Parser#parameterDeclarationList.


  exitParameterDeclarationList(ctx) {} // Enter a parse tree produced by CPP14Parser#parameterDeclaration.


  enterParameterDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#parameterDeclaration.


  exitParameterDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#functionDefinition.


  enterFunctionDefinition(ctx) {} // Exit a parse tree produced by CPP14Parser#functionDefinition.


  exitFunctionDefinition(ctx) {} // Enter a parse tree produced by CPP14Parser#functionBody.


  enterFunctionBody(ctx) {} // Exit a parse tree produced by CPP14Parser#functionBody.


  exitFunctionBody(ctx) {} // Enter a parse tree produced by CPP14Parser#initializer.


  enterInitializer(ctx) {} // Exit a parse tree produced by CPP14Parser#initializer.


  exitInitializer(ctx) {} // Enter a parse tree produced by CPP14Parser#braceOrEqualInitializer.


  enterBraceOrEqualInitializer(ctx) {} // Exit a parse tree produced by CPP14Parser#braceOrEqualInitializer.


  exitBraceOrEqualInitializer(ctx) {} // Enter a parse tree produced by CPP14Parser#initializerClause.


  enterInitializerClause(ctx) {} // Exit a parse tree produced by CPP14Parser#initializerClause.


  exitInitializerClause(ctx) {} // Enter a parse tree produced by CPP14Parser#initializerList.


  enterInitializerList(ctx) {} // Exit a parse tree produced by CPP14Parser#initializerList.


  exitInitializerList(ctx) {} // Enter a parse tree produced by CPP14Parser#bracedInitList.


  enterBracedInitList(ctx) {} // Exit a parse tree produced by CPP14Parser#bracedInitList.


  exitBracedInitList(ctx) {} // Enter a parse tree produced by CPP14Parser#className.


  enterClassName(ctx) {} // Exit a parse tree produced by CPP14Parser#className.


  exitClassName(ctx) {} // Enter a parse tree produced by CPP14Parser#classSpecifier.


  enterClassSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#classSpecifier.


  exitClassSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#classHead.


  enterClassHead(ctx) {} // Exit a parse tree produced by CPP14Parser#classHead.


  exitClassHead(ctx) {} // Enter a parse tree produced by CPP14Parser#classHeadName.


  enterClassHeadName(ctx) {} // Exit a parse tree produced by CPP14Parser#classHeadName.


  exitClassHeadName(ctx) {} // Enter a parse tree produced by CPP14Parser#classVirtSpecifier.


  enterClassVirtSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#classVirtSpecifier.


  exitClassVirtSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#classKey.


  enterClassKey(ctx) {} // Exit a parse tree produced by CPP14Parser#classKey.


  exitClassKey(ctx) {} // Enter a parse tree produced by CPP14Parser#memberSpecification.


  enterMemberSpecification(ctx) {} // Exit a parse tree produced by CPP14Parser#memberSpecification.


  exitMemberSpecification(ctx) {} // Enter a parse tree produced by CPP14Parser#memberdeclaration.


  enterMemberdeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#memberdeclaration.


  exitMemberdeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#memberDeclaratorList.


  enterMemberDeclaratorList(ctx) {} // Exit a parse tree produced by CPP14Parser#memberDeclaratorList.


  exitMemberDeclaratorList(ctx) {} // Enter a parse tree produced by CPP14Parser#memberDeclarator.


  enterMemberDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#memberDeclarator.


  exitMemberDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#virtualSpecifierSeq.


  enterVirtualSpecifierSeq(ctx) {} // Exit a parse tree produced by CPP14Parser#virtualSpecifierSeq.


  exitVirtualSpecifierSeq(ctx) {} // Enter a parse tree produced by CPP14Parser#virtualSpecifier.


  enterVirtualSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#virtualSpecifier.


  exitVirtualSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#pureSpecifier.


  enterPureSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#pureSpecifier.


  exitPureSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#baseClause.


  enterBaseClause(ctx) {} // Exit a parse tree produced by CPP14Parser#baseClause.


  exitBaseClause(ctx) {} // Enter a parse tree produced by CPP14Parser#baseSpecifierList.


  enterBaseSpecifierList(ctx) {} // Exit a parse tree produced by CPP14Parser#baseSpecifierList.


  exitBaseSpecifierList(ctx) {} // Enter a parse tree produced by CPP14Parser#baseSpecifier.


  enterBaseSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#baseSpecifier.


  exitBaseSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#classOrDeclType.


  enterClassOrDeclType(ctx) {} // Exit a parse tree produced by CPP14Parser#classOrDeclType.


  exitClassOrDeclType(ctx) {} // Enter a parse tree produced by CPP14Parser#baseTypeSpecifier.


  enterBaseTypeSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#baseTypeSpecifier.


  exitBaseTypeSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#accessSpecifier.


  enterAccessSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#accessSpecifier.


  exitAccessSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#conversionFunctionId.


  enterConversionFunctionId(ctx) {} // Exit a parse tree produced by CPP14Parser#conversionFunctionId.


  exitConversionFunctionId(ctx) {} // Enter a parse tree produced by CPP14Parser#conversionTypeId.


  enterConversionTypeId(ctx) {} // Exit a parse tree produced by CPP14Parser#conversionTypeId.


  exitConversionTypeId(ctx) {} // Enter a parse tree produced by CPP14Parser#conversionDeclarator.


  enterConversionDeclarator(ctx) {} // Exit a parse tree produced by CPP14Parser#conversionDeclarator.


  exitConversionDeclarator(ctx) {} // Enter a parse tree produced by CPP14Parser#constructorInitializer.


  enterConstructorInitializer(ctx) {} // Exit a parse tree produced by CPP14Parser#constructorInitializer.


  exitConstructorInitializer(ctx) {} // Enter a parse tree produced by CPP14Parser#memInitializerList.


  enterMemInitializerList(ctx) {} // Exit a parse tree produced by CPP14Parser#memInitializerList.


  exitMemInitializerList(ctx) {} // Enter a parse tree produced by CPP14Parser#memInitializer.


  enterMemInitializer(ctx) {} // Exit a parse tree produced by CPP14Parser#memInitializer.


  exitMemInitializer(ctx) {} // Enter a parse tree produced by CPP14Parser#meminitializerid.


  enterMeminitializerid(ctx) {} // Exit a parse tree produced by CPP14Parser#meminitializerid.


  exitMeminitializerid(ctx) {} // Enter a parse tree produced by CPP14Parser#operatorFunctionId.


  enterOperatorFunctionId(ctx) {} // Exit a parse tree produced by CPP14Parser#operatorFunctionId.


  exitOperatorFunctionId(ctx) {} // Enter a parse tree produced by CPP14Parser#literalOperatorId.


  enterLiteralOperatorId(ctx) {} // Exit a parse tree produced by CPP14Parser#literalOperatorId.


  exitLiteralOperatorId(ctx) {} // Enter a parse tree produced by CPP14Parser#templateDeclaration.


  enterTemplateDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#templateDeclaration.


  exitTemplateDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#templateparameterList.


  enterTemplateparameterList(ctx) {} // Exit a parse tree produced by CPP14Parser#templateparameterList.


  exitTemplateparameterList(ctx) {} // Enter a parse tree produced by CPP14Parser#templateParameter.


  enterTemplateParameter(ctx) {} // Exit a parse tree produced by CPP14Parser#templateParameter.


  exitTemplateParameter(ctx) {} // Enter a parse tree produced by CPP14Parser#typeParameter.


  enterTypeParameter(ctx) {} // Exit a parse tree produced by CPP14Parser#typeParameter.


  exitTypeParameter(ctx) {} // Enter a parse tree produced by CPP14Parser#simpleTemplateId.


  enterSimpleTemplateId(ctx) {} // Exit a parse tree produced by CPP14Parser#simpleTemplateId.


  exitSimpleTemplateId(ctx) {} // Enter a parse tree produced by CPP14Parser#templateId.


  enterTemplateId(ctx) {} // Exit a parse tree produced by CPP14Parser#templateId.


  exitTemplateId(ctx) {} // Enter a parse tree produced by CPP14Parser#templateName.


  enterTemplateName(ctx) {} // Exit a parse tree produced by CPP14Parser#templateName.


  exitTemplateName(ctx) {} // Enter a parse tree produced by CPP14Parser#templateArgumentList.


  enterTemplateArgumentList(ctx) {} // Exit a parse tree produced by CPP14Parser#templateArgumentList.


  exitTemplateArgumentList(ctx) {} // Enter a parse tree produced by CPP14Parser#templateArgument.


  enterTemplateArgument(ctx) {} // Exit a parse tree produced by CPP14Parser#templateArgument.


  exitTemplateArgument(ctx) {} // Enter a parse tree produced by CPP14Parser#typeNameSpecifier.


  enterTypeNameSpecifier(ctx) {} // Exit a parse tree produced by CPP14Parser#typeNameSpecifier.


  exitTypeNameSpecifier(ctx) {} // Enter a parse tree produced by CPP14Parser#explicitInstantiation.


  enterExplicitInstantiation(ctx) {} // Exit a parse tree produced by CPP14Parser#explicitInstantiation.


  exitExplicitInstantiation(ctx) {} // Enter a parse tree produced by CPP14Parser#explicitSpecialization.


  enterExplicitSpecialization(ctx) {} // Exit a parse tree produced by CPP14Parser#explicitSpecialization.


  exitExplicitSpecialization(ctx) {} // Enter a parse tree produced by CPP14Parser#tryBlock.


  enterTryBlock(ctx) {} // Exit a parse tree produced by CPP14Parser#tryBlock.


  exitTryBlock(ctx) {} // Enter a parse tree produced by CPP14Parser#functionTryBlock.


  enterFunctionTryBlock(ctx) {} // Exit a parse tree produced by CPP14Parser#functionTryBlock.


  exitFunctionTryBlock(ctx) {} // Enter a parse tree produced by CPP14Parser#handlerSeq.


  enterHandlerSeq(ctx) {} // Exit a parse tree produced by CPP14Parser#handlerSeq.


  exitHandlerSeq(ctx) {} // Enter a parse tree produced by CPP14Parser#handler.


  enterHandler(ctx) {} // Exit a parse tree produced by CPP14Parser#handler.


  exitHandler(ctx) {} // Enter a parse tree produced by CPP14Parser#exceptionDeclaration.


  enterExceptionDeclaration(ctx) {} // Exit a parse tree produced by CPP14Parser#exceptionDeclaration.


  exitExceptionDeclaration(ctx) {} // Enter a parse tree produced by CPP14Parser#throwExpression.


  enterThrowExpression(ctx) {} // Exit a parse tree produced by CPP14Parser#throwExpression.


  exitThrowExpression(ctx) {} // Enter a parse tree produced by CPP14Parser#exceptionSpecification.


  enterExceptionSpecification(ctx) {} // Exit a parse tree produced by CPP14Parser#exceptionSpecification.


  exitExceptionSpecification(ctx) {} // Enter a parse tree produced by CPP14Parser#dynamicExceptionSpecification.


  enterDynamicExceptionSpecification(ctx) {} // Exit a parse tree produced by CPP14Parser#dynamicExceptionSpecification.


  exitDynamicExceptionSpecification(ctx) {} // Enter a parse tree produced by CPP14Parser#typeIdList.


  enterTypeIdList(ctx) {} // Exit a parse tree produced by CPP14Parser#typeIdList.


  exitTypeIdList(ctx) {} // Enter a parse tree produced by CPP14Parser#noeExceptSpecification.


  enterNoeExceptSpecification(ctx) {} // Exit a parse tree produced by CPP14Parser#noeExceptSpecification.


  exitNoeExceptSpecification(ctx) {} // Enter a parse tree produced by CPP14Parser#theOperator.


  enterTheOperator(ctx) {} // Exit a parse tree produced by CPP14Parser#theOperator.


  exitTheOperator(ctx) {} // Enter a parse tree produced by CPP14Parser#literal.


  enterLiteral(ctx) {} // Exit a parse tree produced by CPP14Parser#literal.


  exitLiteral(ctx) {}

}

exports.default = CPP14ParserListener;

},{"antlr4":42}],130:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/CPP14Parser.g4 by ANTLR 4.9.2
// jshint ignore: start
// This class defines a complete generic visitor for a parse tree produced by CPP14Parser.
class CPP14ParserVisitor extends _antlr.default.tree.ParseTreeVisitor {
  // Visit a parse tree produced by CPP14Parser#translationUnit.
  visitTranslationUnit(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#primaryExpression.


  visitPrimaryExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#idExpression.


  visitIdExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#unqualifiedId.


  visitUnqualifiedId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#qualifiedId.


  visitQualifiedId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#nestedNameSpecifier.


  visitNestedNameSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#lambdaExpression.


  visitLambdaExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#lambdaIntroducer.


  visitLambdaIntroducer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#lambdaCapture.


  visitLambdaCapture(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#captureDefault.


  visitCaptureDefault(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#captureList.


  visitCaptureList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#capture.


  visitCapture(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#simpleCapture.


  visitSimpleCapture(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#initcapture.


  visitInitcapture(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#lambdaDeclarator.


  visitLambdaDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#postfixExpression.


  visitPostfixExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#typeIdOfTheTypeId.


  visitTypeIdOfTheTypeId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#expressionList.


  visitExpressionList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#pseudoDestructorName.


  visitPseudoDestructorName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#unaryExpression.


  visitUnaryExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#unaryOperator.


  visitUnaryOperator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#newExpression.


  visitNewExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#newPlacement.


  visitNewPlacement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#newTypeId.


  visitNewTypeId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#newDeclarator.


  visitNewDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#noPointerNewDeclarator.


  visitNoPointerNewDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#newInitializer.


  visitNewInitializer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#deleteExpression.


  visitDeleteExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#noExceptExpression.


  visitNoExceptExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#castExpression.


  visitCastExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#pointerMemberExpression.


  visitPointerMemberExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#multiplicativeExpression.


  visitMultiplicativeExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#additiveExpression.


  visitAdditiveExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#shiftExpression.


  visitShiftExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#shiftOperator.


  visitShiftOperator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#relationalExpression.


  visitRelationalExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#equalityExpression.


  visitEqualityExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#andExpression.


  visitAndExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#exclusiveOrExpression.


  visitExclusiveOrExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#inclusiveOrExpression.


  visitInclusiveOrExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#logicalAndExpression.


  visitLogicalAndExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#logicalOrExpression.


  visitLogicalOrExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#conditionalExpression.


  visitConditionalExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#assignmentExpression.


  visitAssignmentExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#assignmentOperator.


  visitAssignmentOperator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#expression.


  visitExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#constantExpression.


  visitConstantExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#statement.


  visitStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#labeledStatement.


  visitLabeledStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#expressionStatement.


  visitExpressionStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#compoundStatement.


  visitCompoundStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#statementSeq.


  visitStatementSeq(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#selectionStatement.


  visitSelectionStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#condition.


  visitCondition(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#iterationStatement.


  visitIterationStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#forInitStatement.


  visitForInitStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#forRangeDeclaration.


  visitForRangeDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#forRangeInitializer.


  visitForRangeInitializer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#jumpStatement.


  visitJumpStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#declarationStatement.


  visitDeclarationStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#declarationseq.


  visitDeclarationseq(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#declaration.


  visitDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#blockDeclaration.


  visitBlockDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#aliasDeclaration.


  visitAliasDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#simpleDeclaration.


  visitSimpleDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#staticAssertDeclaration.


  visitStaticAssertDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#emptyDeclaration.


  visitEmptyDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#attributeDeclaration.


  visitAttributeDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#declSpecifier.


  visitDeclSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#declSpecifierSeq.


  visitDeclSpecifierSeq(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#storageClassSpecifier.


  visitStorageClassSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#functionSpecifier.


  visitFunctionSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#typedefName.


  visitTypedefName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#typeSpecifier.


  visitTypeSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#trailingTypeSpecifier.


  visitTrailingTypeSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#typeSpecifierSeq.


  visitTypeSpecifierSeq(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#trailingTypeSpecifierSeq.


  visitTrailingTypeSpecifierSeq(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#simpleTypeLengthModifier.


  visitSimpleTypeLengthModifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#simpleTypeSignednessModifier.


  visitSimpleTypeSignednessModifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#simpleTypeSpecifier.


  visitSimpleTypeSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#theTypeName.


  visitTheTypeName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#decltypeSpecifier.


  visitDecltypeSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#elaboratedTypeSpecifier.


  visitElaboratedTypeSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#enumName.


  visitEnumName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#enumSpecifier.


  visitEnumSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#enumHead.


  visitEnumHead(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#opaqueEnumDeclaration.


  visitOpaqueEnumDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#enumkey.


  visitEnumkey(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#enumbase.


  visitEnumbase(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#enumeratorList.


  visitEnumeratorList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#enumeratorDefinition.


  visitEnumeratorDefinition(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#enumerator.


  visitEnumerator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#namespaceName.


  visitNamespaceName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#originalNamespaceName.


  visitOriginalNamespaceName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#namespaceDefinition.


  visitNamespaceDefinition(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#namespaceAlias.


  visitNamespaceAlias(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#namespaceAliasDefinition.


  visitNamespaceAliasDefinition(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#qualifiednamespacespecifier.


  visitQualifiednamespacespecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#usingDeclaration.


  visitUsingDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#usingDirective.


  visitUsingDirective(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#asmDefinition.


  visitAsmDefinition(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#linkageSpecification.


  visitLinkageSpecification(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#attributeSpecifierSeq.


  visitAttributeSpecifierSeq(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#attributeSpecifier.


  visitAttributeSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#alignmentspecifier.


  visitAlignmentspecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#attributeList.


  visitAttributeList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#attribute.


  visitAttribute(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#attributeNamespace.


  visitAttributeNamespace(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#attributeArgumentClause.


  visitAttributeArgumentClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#balancedTokenSeq.


  visitBalancedTokenSeq(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#balancedtoken.


  visitBalancedtoken(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#initDeclaratorList.


  visitInitDeclaratorList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#initDeclarator.


  visitInitDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#declarator.


  visitDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#pointerDeclarator.


  visitPointerDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#noPointerDeclarator.


  visitNoPointerDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#parametersAndQualifiers.


  visitParametersAndQualifiers(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#trailingReturnType.


  visitTrailingReturnType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#pointerOperator.


  visitPointerOperator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#cvqualifierseq.


  visitCvqualifierseq(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#cvQualifier.


  visitCvQualifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#refqualifier.


  visitRefqualifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#declaratorid.


  visitDeclaratorid(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#theTypeId.


  visitTheTypeId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#abstractDeclarator.


  visitAbstractDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#pointerAbstractDeclarator.


  visitPointerAbstractDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#noPointerAbstractDeclarator.


  visitNoPointerAbstractDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#abstractPackDeclarator.


  visitAbstractPackDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#noPointerAbstractPackDeclarator.


  visitNoPointerAbstractPackDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#parameterDeclarationClause.


  visitParameterDeclarationClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#parameterDeclarationList.


  visitParameterDeclarationList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#parameterDeclaration.


  visitParameterDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#functionDefinition.


  visitFunctionDefinition(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#functionBody.


  visitFunctionBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#initializer.


  visitInitializer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#braceOrEqualInitializer.


  visitBraceOrEqualInitializer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#initializerClause.


  visitInitializerClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#initializerList.


  visitInitializerList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#bracedInitList.


  visitBracedInitList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#className.


  visitClassName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#classSpecifier.


  visitClassSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#classHead.


  visitClassHead(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#classHeadName.


  visitClassHeadName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#classVirtSpecifier.


  visitClassVirtSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#classKey.


  visitClassKey(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#memberSpecification.


  visitMemberSpecification(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#memberdeclaration.


  visitMemberdeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#memberDeclaratorList.


  visitMemberDeclaratorList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#memberDeclarator.


  visitMemberDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#virtualSpecifierSeq.


  visitVirtualSpecifierSeq(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#virtualSpecifier.


  visitVirtualSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#pureSpecifier.


  visitPureSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#baseClause.


  visitBaseClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#baseSpecifierList.


  visitBaseSpecifierList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#baseSpecifier.


  visitBaseSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#classOrDeclType.


  visitClassOrDeclType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#baseTypeSpecifier.


  visitBaseTypeSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#accessSpecifier.


  visitAccessSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#conversionFunctionId.


  visitConversionFunctionId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#conversionTypeId.


  visitConversionTypeId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#conversionDeclarator.


  visitConversionDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#constructorInitializer.


  visitConstructorInitializer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#memInitializerList.


  visitMemInitializerList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#memInitializer.


  visitMemInitializer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#meminitializerid.


  visitMeminitializerid(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#operatorFunctionId.


  visitOperatorFunctionId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#literalOperatorId.


  visitLiteralOperatorId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#templateDeclaration.


  visitTemplateDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#templateparameterList.


  visitTemplateparameterList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#templateParameter.


  visitTemplateParameter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#typeParameter.


  visitTypeParameter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#simpleTemplateId.


  visitSimpleTemplateId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#templateId.


  visitTemplateId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#templateName.


  visitTemplateName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#templateArgumentList.


  visitTemplateArgumentList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#templateArgument.


  visitTemplateArgument(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#typeNameSpecifier.


  visitTypeNameSpecifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#explicitInstantiation.


  visitExplicitInstantiation(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#explicitSpecialization.


  visitExplicitSpecialization(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#tryBlock.


  visitTryBlock(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#functionTryBlock.


  visitFunctionTryBlock(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#handlerSeq.


  visitHandlerSeq(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#handler.


  visitHandler(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#exceptionDeclaration.


  visitExceptionDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#throwExpression.


  visitThrowExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#exceptionSpecification.


  visitExceptionSpecification(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#dynamicExceptionSpecification.


  visitDynamicExceptionSpecification(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#typeIdList.


  visitTypeIdList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#noeExceptSpecification.


  visitNoeExceptSpecification(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#theOperator.


  visitTheOperator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CPP14Parser#literal.


  visitLiteral(ctx) {
    return this.visitChildren(ctx);
  }

}

exports.default = CPP14ParserVisitor;

},{"antlr4":42}],131:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _GoParser = _interopRequireDefault(require("./GoParser.js"));

var _GoParserListener = _interopRequireDefault(require("./GoParserListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class GoAWSListener extends _GoParserListener.default {
  constructor() {
    super();
    this.SDKDeclarations = [];
    this.ClientDeclarations = [];
    this.ClientCalls = [];
    this.VariableDeclarations = [];
  }

  exitImportSpec(ctx) {
    let matchString = ctx.getText().match(/^['"]github\.com[\\\/]aws[\\\/]aws-sdk-go[\\\/]service[\\\/]([a-zA-Z0-9]+)['"]$/);

    if (matchString) {
      this.SDKDeclarations.push({
        'variable': matchString[1],
        'service': matchString[1]
      });
    }
  }

  exitShortVarDecl(ctx) {
    const assignable = ctx.children[0]; // ### = blah

    if (ctx.children[2].children && ctx.children[2].children.length == 1 && ctx.children[2].children[0] instanceof _GoParser.default.ExpressionContext) {
      if (ctx.children[2].children[0].children && ctx.children[2].children[0].children.length == 1 && ctx.children[2].children[0].children[0] instanceof _GoParser.default.PrimaryExprContext) {
        if (ctx.children[2].children[0].children[0].children && ctx.children[2].children[0].children[0].children.length == 2 && ctx.children[2].children[0].children[0].children[0] instanceof _GoParser.default.PrimaryExprContext && ctx.children[2].children[0].children[0].children[1] instanceof _GoParser.default.ArgumentsContext) {
          if (ctx.children[2].children[0].children[0].children[0].children && ctx.children[2].children[0].children[0].children[0].children.length == 3 && ctx.children[2].children[0].children[0].children[0].children[1].getText() == "." && ctx.children[2].children[0].children[0].children[0].children[2].getText() == "New") {
            // x = ###y###.New(...)
            let namespace = ctx.children[2].children[0].children[0].children[0].children[0];

            for (let sdkDeclaration of this.SDKDeclarations) {
              if (namespace.getText() == sdkDeclaration['variable']) {
                this.ClientDeclarations.push({
                  'type': sdkDeclaration['service'],
                  'variable': assignable.getText(),
                  'argsRaw': ctx.children[2].children[0].children[0].children[1],
                  'sdk': sdkDeclaration
                });
                break;
              }
            }
          }
        }
      }
    }
  }

  exitExpression(ctx) {
    if (ctx.children && ctx.children.length == 1 && ctx.children[0] instanceof _GoParser.default.PrimaryExprContext) {
      if (ctx.children[0].children && ctx.children[0].children.length == 2 && ctx.children[0].children[0] instanceof _GoParser.default.PrimaryExprContext && ctx.children[0].children[1] instanceof _GoParser.default.ArgumentsContext) {
        let argsRaw = ctx.children[0].children[1];

        if (ctx.children[0].children[0].children && ctx.children[0].children[0].children.length == 3 && ctx.children[0].children[0].children[1].getText() == ".") {
          let namespace = ctx.children[0].children[0].children[0];
          let method = ctx.children[0].children[0].children[2];

          for (let clientDeclaration of this.ClientDeclarations) {
            if (namespace.getText() == clientDeclaration['variable']) {
              this.ClientCalls.push({
                'client': clientDeclaration,
                'method': method.getText(),
                'argsRaw': argsRaw,
                'args': null
              });
              break;
            }
          }
        }
      }
    }
  }

}

exports.default = GoAWSListener;

},{"./GoParser.js":133,"./GoParserListener.js":135}],132:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/GoLexer.g4 by ANTLR 4.9.2
// jshint ignore: start
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786", "\u5964\u0002Z\u0349\b\u0001\b\u0001\u0004\u0002\t\u0002\u0004\u0003", "\t\u0003\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006", "\u0004\u0007\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b", "\t\u000b\u0004\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f", "\u0004\u0010\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013", "\t\u0013\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016", "\u0004\u0017\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a", "\t\u001a\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d", "\u0004\u001e\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"", "\t\"\u0004#\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004", ")\t)\u0004*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u0004", "0\t0\u00041\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u0004", "7\t7\u00048\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004", ">\t>\u0004?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004", "E\tE\u0004F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004", "L\tL\u0004M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004", "S\tS\u0004T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004", "Z\tZ\u0004[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004", "a\ta\u0004b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0003\u0002\u0003", "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003", "\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003", "\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003", "\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003", "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003", "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003", "\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003", "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003", "\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003", "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003", "\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003", "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003", "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003", "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003", "\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003", "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003", "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003", "\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003", "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003", "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003", "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003", "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003", "\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003", "\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003", "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003", "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003", "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003", "\u001c\u0007\u001c\u017a\n\u001c\f\u001c\u000e\u001c\u017d\u000b\u001c", "\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e", "\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003", " \u0003 \u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003", "#\u0003$\u0003$\u0003%\u0003%\u0003&\u0003&\u0003\'\u0003\'\u0003(\u0003", "(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003*\u0003", "*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003-\u0003", "-\u0003-\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u00030\u00030\u0003", "1\u00031\u00031\u00032\u00032\u00033\u00033\u00033\u00034\u00034\u0003", "5\u00035\u00036\u00036\u00037\u00037\u00037\u00038\u00038\u00038\u0003", "9\u00039\u00039\u0003:\u0003:\u0003;\u0003;\u0003<\u0003<\u0003=\u0003", "=\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0003@\u0003A\u0003A\u0003", "A\u0005A\u01e5\nA\u0003A\u0007A\u01e8\nA\fA\u000eA\u01eb\u000bA\u0005", "A\u01ed\nA\u0003A\u0003A\u0003B\u0003B\u0003B\u0005B\u01f4\nB\u0003", "B\u0006B\u01f7\nB\rB\u000eB\u01f8\u0003B\u0003B\u0003C\u0003C\u0005", "C\u01ff\nC\u0003C\u0005C\u0202\nC\u0003C\u0006C\u0205\nC\rC\u000eC\u0206", "\u0003C\u0003C\u0003D\u0003D\u0003D\u0005D\u020e\nD\u0003D\u0006D\u0211", "\nD\rD\u000eD\u0212\u0003D\u0003D\u0003E\u0003E\u0005E\u0219\nE\u0003", "E\u0003E\u0003F\u0003F\u0003F\u0005F\u0220\nF\u0003F\u0005F\u0223\n", "F\u0003F\u0005F\u0226\nF\u0003F\u0003F\u0003F\u0005F\u022b\nF\u0005", "F\u022d\nF\u0003G\u0003G\u0003G\u0003G\u0003G\u0003H\u0005H\u0235\n", "H\u0003H\u0006H\u0238\nH\rH\u000eH\u0239\u0003H\u0003H\u0005H\u023e", "\nH\u0003H\u0007H\u0241\nH\fH\u000eH\u0244\u000bH\u0005H\u0246\nH\u0003", "H\u0003H\u0003H\u0005H\u024b\nH\u0003H\u0007H\u024e\nH\fH\u000eH\u0251", "\u000bH\u0005H\u0253\nH\u0003I\u0003I\u0005I\u0257\nI\u0003I\u0003I", "\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u0260\nJ\u0003J\u0003J\u0003", "J\u0003J\u0003K\u0003K\u0003K\u0005K\u0269\nK\u0003K\u0003K\u0003L\u0003", "L\u0003L\u0003L\u0003M\u0003M\u0005M\u0273\nM\u0003N\u0003N\u0003N\u0003", "N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003", "P\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003", "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0007R\u0293\nR\fR\u000e", "R\u0296\u000bR\u0003R\u0003R\u0003R\u0003R\u0003S\u0003S\u0003S\u0007", "S\u029f\nS\fS\u000eS\u02a2\u000bS\u0003S\u0003S\u0003S\u0003S\u0003", "T\u0006T\u02a9\nT\rT\u000eT\u02aa\u0003T\u0003T\u0003U\u0003U\u0003", "U\u0003U\u0007U\u02b3\nU\fU\u000eU\u02b6\u000bU\u0003U\u0003U\u0003", "U\u0003U\u0003U\u0003V\u0006V\u02be\nV\rV\u000eV\u02bf\u0003V\u0003", "V\u0003W\u0003W\u0003W\u0003W\u0007W\u02c8\nW\fW\u000eW\u02cb\u000b", "W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0005X\u02d3\nX\u0003Y\u0003", "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003", "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003", "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u02ef\nY\u0003Z\u0003Z\u0005Z\u02f3", "\nZ\u0003Z\u0007Z\u02f6\nZ\fZ\u000eZ\u02f9\u000bZ\u0003[\u0003[\u0003", "\\\u0003\\\u0003]\u0003]\u0003^\u0003^\u0005^\u0303\n^\u0003^\u0003", "^\u0003_\u0003_\u0005_\u0309\n_\u0003`\u0003`\u0003a\u0003a\u0003b\u0006", "b\u0310\nb\rb\u000eb\u0311\u0003b\u0003b\u0003c\u0003c\u0003c\u0003", "c\u0007c\u031a\nc\fc\u000ec\u031d\u000bc\u0003c\u0003c\u0003c\u0003", "c\u0003c\u0003d\u0003d\u0003d\u0003d\u0007d\u0328\nd\fd\u000ed\u032b", "\u000bd\u0003d\u0003d\u0003e\u0006e\u0330\ne\re\u000ee\u0331\u0003e", "\u0003e\u0003e\u0003e\u0003e\u0007e\u0339\ne\fe\u000ee\u033c\u000be", "\u0003e\u0003e\u0003e\u0005e\u0341\ne\u0003e\u0003e\u0003f\u0003f\u0003", "f\u0003f\u0003f\u0005\u02b4\u031b\u033a\u0002g\u0004\u0003\u0006\u0004", "\b\u0005\n\u0006\f\u0007\u000e\b\u0010\t\u0012\n\u0014\u000b\u0016\f", "\u0018\r\u001a\u000e\u001c\u000f\u001e\u0010 \u0011\"\u0012$\u0013&", "\u0014(\u0015*\u0016,\u0017.\u00180\u00192\u001a4\u001b6\u001c8\u001d", ":\u001e<\u001f> @!B\"D#F$H%J&L\'N(P)R*T+V,X-Z.\\/^0`1b2d3f4h5j6l7n8", "p9r:t;v<x=z>|?~@\u0080A\u0082B\u0084C\u0086D\u0088E\u008aF\u008cG\u008e", "H\u0090\u0002\u0092\u0002\u0094I\u0096\u0002\u0098J\u009aK\u009cL\u009e", "M\u00a0N\u00a2O\u00a4P\u00a6Q\u00a8R\u00aaS\u00acT\u00aeU\u00b0\u0002", "\u00b2\u0002\u00b4\u0002\u00b6\u0002\u00b8\u0002\u00ba\u0002\u00bc\u0002", "\u00be\u0002\u00c0\u0002\u00c2\u0002\u00c4V\u00c6W\u00c8X\u00caY\u00cc", "Z\u0004\u0002\u0003\u0013\u0003\u00023;\u0003\u00022;\u0004\u0002DD", "dd\u0004\u0002QQqq\u0004\u0002ZZzz\u0004\u0002RRrr\u0004\u0002--//\u0003", "\u0002bb\u0004\u0002$$^^\u0004\u0002\u000b\u000b\"\"\u0004\u0002\f\f", "\u000f\u000f\u0005\u0002\f\f\u000f\u000f))\u000b\u0002$$))^^cdhhppt", "tvvxx\u0003\u000229\u0005\u00022;CHch\u0003\u000223\u0004\u0002GGgg", "\u00049\u00022\u0002;\u0002\u0662\u0002\u066b\u0002\u06f2\u0002\u06fb", "\u0002\u07c2\u0002\u07cb\u0002\u0968\u0002\u0971\u0002\u09e8\u0002\u09f1", "\u0002\u0a68\u0002\u0a71\u0002\u0ae8\u0002\u0af1\u0002\u0b68\u0002\u0b71", "\u0002\u0be8\u0002\u0bf1\u0002\u0c68\u0002\u0c71\u0002\u0ce8\u0002\u0cf1", "\u0002\u0d68\u0002\u0d71\u0002\u0de8\u0002\u0df1\u0002\u0e52\u0002\u0e5b", "\u0002\u0ed2\u0002\u0edb\u0002\u0f22\u0002\u0f2b\u0002\u1042\u0002\u104b", "\u0002\u1092\u0002\u109b\u0002\u17e2\u0002\u17eb\u0002\u1812\u0002\u181b", "\u0002\u1948\u0002\u1951\u0002\u19d2\u0002\u19db\u0002\u1a82\u0002\u1a8b", "\u0002\u1a92\u0002\u1a9b\u0002\u1b52\u0002\u1b5b\u0002\u1bb2\u0002\u1bbb", "\u0002\u1c42\u0002\u1c4b\u0002\u1c52\u0002\u1c5b\u0002\ua622\u0002\ua62b", "\u0002\ua8d2\u0002\ua8db\u0002\ua902\u0002\ua90b\u0002\ua9d2\u0002\ua9db", "\u0002\ua9f2\u0002\ua9fb\u0002\uaa52\u0002\uaa5b\u0002\uabf2\u0002\uabfb", "\u0002\uff12\u0002\uff1b\u0002\u04a2\u0003\u04ab\u0003\u1068\u0003\u1071", "\u0003\u10f2\u0003\u10fb\u0003\u1138\u0003\u1141\u0003\u11d2\u0003\u11db", "\u0003\u12f2\u0003\u12fb\u0003\u1452\u0003\u145b\u0003\u14d2\u0003\u14db", "\u0003\u1652\u0003\u165b\u0003\u16c2\u0003\u16cb\u0003\u1732\u0003\u173b", "\u0003\u18e2\u0003\u18eb\u0003\u1c52\u0003\u1c5b\u0003\u1d52\u0003\u1d5b", "\u0003\u6a62\u0003\u6a6b\u0003\u6b52\u0003\u6b5b\u0003\ud7d0\u0003\ud801", "\u0003\ue952\u0003\ue95b\u0003\u024b\u0002C\u0002\\\u0002c\u0002|\u0002", "\u00ac\u0002\u00ac\u0002\u00b7\u0002\u00b7\u0002\u00bc\u0002\u00bc\u0002", "\u00c2\u0002\u00d8\u0002\u00da\u0002\u00f8\u0002\u00fa\u0002\u02c3\u0002", "\u02c8\u0002\u02d3\u0002\u02e2\u0002\u02e6\u0002\u02ee\u0002\u02ee\u0002", "\u02f0\u0002\u02f0\u0002\u0372\u0002\u0376\u0002\u0378\u0002\u0379\u0002", "\u037c\u0002\u037f\u0002\u0381\u0002\u0381\u0002\u0388\u0002\u0388\u0002", "\u038a\u0002\u038c\u0002\u038e\u0002\u038e\u0002\u0390\u0002\u03a3\u0002", "\u03a5\u0002\u03f7\u0002\u03f9\u0002\u0483\u0002\u048c\u0002\u0531\u0002", "\u0533\u0002\u0558\u0002\u055b\u0002\u055b\u0002\u0563\u0002\u0589\u0002", "\u05d2\u0002\u05ec\u0002\u05f2\u0002\u05f4\u0002\u0622\u0002\u064c\u0002", "\u0670\u0002\u0671\u0002\u0673\u0002\u06d5\u0002\u06d7\u0002\u06d7\u0002", "\u06e7\u0002\u06e8\u0002\u06f0\u0002\u06f1\u0002\u06fc\u0002\u06fe\u0002", "\u0701\u0002\u0701\u0002\u0712\u0002\u0712\u0002\u0714\u0002\u0731\u0002", "\u074f\u0002\u07a7\u0002\u07b3\u0002\u07b3\u0002\u07cc\u0002\u07ec\u0002", "\u07f6\u0002\u07f7\u0002\u07fc\u0002\u07fc\u0002\u0802\u0002\u0817\u0002", "\u081c\u0002\u081c\u0002\u0826\u0002\u0826\u0002\u082a\u0002\u082a\u0002", "\u0842\u0002\u085a\u0002\u0862\u0002\u086c\u0002\u08a2\u0002\u08b6\u0002", "\u08b8\u0002\u08bf\u0002\u0906\u0002\u093b\u0002\u093f\u0002\u093f\u0002", "\u0952\u0002\u0952\u0002\u095a\u0002\u0963\u0002\u0973\u0002\u0982\u0002", "\u0987\u0002\u098e\u0002\u0991\u0002\u0992\u0002\u0995\u0002\u09aa\u0002", "\u09ac\u0002\u09b2\u0002\u09b4\u0002\u09b4\u0002\u09b8\u0002\u09bb\u0002", "\u09bf\u0002\u09bf\u0002\u09d0\u0002\u09d0\u0002\u09de\u0002\u09df\u0002", "\u09e1\u0002\u09e3\u0002\u09f2\u0002\u09f3\u0002\u09fe\u0002\u09fe\u0002", "\u0a07\u0002\u0a0c\u0002\u0a11\u0002\u0a12\u0002\u0a15\u0002\u0a2a\u0002", "\u0a2c\u0002\u0a32\u0002\u0a34\u0002\u0a35\u0002\u0a37\u0002\u0a38\u0002", "\u0a3a\u0002\u0a3b\u0002\u0a5b\u0002\u0a5e\u0002\u0a60\u0002\u0a60\u0002", "\u0a74\u0002\u0a76\u0002\u0a87\u0002\u0a8f\u0002\u0a91\u0002\u0a93\u0002", "\u0a95\u0002\u0aaa\u0002\u0aac\u0002\u0ab2\u0002\u0ab4\u0002\u0ab5\u0002", "\u0ab7\u0002\u0abb\u0002\u0abf\u0002\u0abf\u0002\u0ad2\u0002\u0ad2\u0002", "\u0ae2\u0002\u0ae3\u0002\u0afb\u0002\u0afb\u0002\u0b07\u0002\u0b0e\u0002", "\u0b11\u0002\u0b12\u0002\u0b15\u0002\u0b2a\u0002\u0b2c\u0002\u0b32\u0002", "\u0b34\u0002\u0b35\u0002\u0b37\u0002\u0b3b\u0002\u0b3f\u0002\u0b3f\u0002", "\u0b5e\u0002\u0b5f\u0002\u0b61\u0002\u0b63\u0002\u0b73\u0002\u0b73\u0002", "\u0b85\u0002\u0b85\u0002\u0b87\u0002\u0b8c\u0002\u0b90\u0002\u0b92\u0002", "\u0b94\u0002\u0b97\u0002\u0b9b\u0002\u0b9c\u0002\u0b9e\u0002\u0b9e\u0002", "\u0ba0\u0002\u0ba1\u0002\u0ba5\u0002\u0ba6\u0002\u0baa\u0002\u0bac\u0002", "\u0bb0\u0002\u0bbb\u0002\u0bd2\u0002\u0bd2\u0002\u0c07\u0002\u0c0e\u0002", "\u0c10\u0002\u0c12\u0002\u0c14\u0002\u0c2a\u0002\u0c2c\u0002\u0c3b\u0002", "\u0c3f\u0002\u0c3f\u0002\u0c5a\u0002\u0c5c\u0002\u0c62\u0002\u0c63\u0002", "\u0c82\u0002\u0c82\u0002\u0c87\u0002\u0c8e\u0002\u0c90\u0002\u0c92\u0002", "\u0c94\u0002\u0caa\u0002\u0cac\u0002\u0cb5\u0002\u0cb7\u0002\u0cbb\u0002", "\u0cbf\u0002\u0cbf\u0002\u0ce0\u0002\u0ce0\u0002\u0ce2\u0002\u0ce3\u0002", "\u0cf3\u0002\u0cf4\u0002\u0d07\u0002\u0d0e\u0002\u0d10\u0002\u0d12\u0002", "\u0d14\u0002\u0d3c\u0002\u0d3f\u0002\u0d3f\u0002\u0d50\u0002\u0d50\u0002", "\u0d56\u0002\u0d58\u0002\u0d61\u0002\u0d63\u0002\u0d7c\u0002\u0d81\u0002", "\u0d87\u0002\u0d98\u0002\u0d9c\u0002\u0db3\u0002\u0db5\u0002\u0dbd\u0002", "\u0dbf\u0002\u0dbf\u0002\u0dc2\u0002\u0dc8\u0002\u0e03\u0002\u0e32\u0002", "\u0e34\u0002\u0e35\u0002\u0e42\u0002\u0e48\u0002\u0e83\u0002\u0e84\u0002", "\u0e86\u0002\u0e86\u0002\u0e89\u0002\u0e8a\u0002\u0e8c\u0002\u0e8c\u0002", "\u0e8f\u0002\u0e8f\u0002\u0e96\u0002\u0e99\u0002\u0e9b\u0002\u0ea1\u0002", "\u0ea3\u0002\u0ea5\u0002\u0ea7\u0002\u0ea7\u0002\u0ea9\u0002\u0ea9\u0002", "\u0eac\u0002\u0ead\u0002\u0eaf\u0002\u0eb2\u0002\u0eb4\u0002\u0eb5\u0002", "\u0ebf\u0002\u0ebf\u0002\u0ec2\u0002\u0ec6\u0002\u0ec8\u0002\u0ec8\u0002", "\u0ede\u0002\u0ee1\u0002\u0f02\u0002\u0f02\u0002\u0f42\u0002\u0f49\u0002", "\u0f4b\u0002\u0f6e\u0002\u0f8a\u0002\u0f8e\u0002\u1002\u0002\u102c\u0002", "\u1041\u0002\u1041\u0002\u1052\u0002\u1057\u0002\u105c\u0002\u105f\u0002", "\u1063\u0002\u1063\u0002\u1067\u0002\u1068\u0002\u1070\u0002\u1072\u0002", "\u1077\u0002\u1083\u0002\u1090\u0002\u1090\u0002\u10a2\u0002\u10c7\u0002", "\u10c9\u0002\u10c9\u0002\u10cf\u0002\u10cf\u0002\u10d2\u0002\u10fc\u0002", "\u10fe\u0002\u124a\u0002\u124c\u0002\u124f\u0002\u1252\u0002\u1258\u0002", "\u125a\u0002\u125a\u0002\u125c\u0002\u125f\u0002\u1262\u0002\u128a\u0002", "\u128c\u0002\u128f\u0002\u1292\u0002\u12b2\u0002\u12b4\u0002\u12b7\u0002", "\u12ba\u0002\u12c0\u0002\u12c2\u0002\u12c2\u0002\u12c4\u0002\u12c7\u0002", "\u12ca\u0002\u12d8\u0002\u12da\u0002\u1312\u0002\u1314\u0002\u1317\u0002", "\u131a\u0002\u135c\u0002\u1382\u0002\u1391\u0002\u13a2\u0002\u13f7\u0002", "\u13fa\u0002\u13ff\u0002\u1403\u0002\u166e\u0002\u1671\u0002\u1681\u0002", "\u1683\u0002\u169c\u0002\u16a2\u0002\u16ec\u0002\u16f3\u0002\u16fa\u0002", "\u1702\u0002\u170e\u0002\u1710\u0002\u1713\u0002\u1722\u0002\u1733\u0002", "\u1742\u0002\u1753\u0002\u1762\u0002\u176e\u0002\u1770\u0002\u1772\u0002", "\u1782\u0002\u17b5\u0002\u17d9\u0002\u17d9\u0002\u17de\u0002\u17de\u0002", "\u1822\u0002\u1879\u0002\u1882\u0002\u1886\u0002\u1889\u0002\u18aa\u0002", "\u18ac\u0002\u18ac\u0002\u18b2\u0002\u18f7\u0002\u1902\u0002\u1920\u0002", "\u1952\u0002\u196f\u0002\u1972\u0002\u1976\u0002\u1982\u0002\u19ad\u0002", "\u19b2\u0002\u19cb\u0002\u1a02\u0002\u1a18\u0002\u1a22\u0002\u1a56\u0002", "\u1aa9\u0002\u1aa9\u0002\u1b07\u0002\u1b35\u0002\u1b47\u0002\u1b4d\u0002", "\u1b85\u0002\u1ba2\u0002\u1bb0\u0002\u1bb1\u0002\u1bbc\u0002\u1be7\u0002", "\u1c02\u0002\u1c25\u0002\u1c4f\u0002\u1c51\u0002\u1c5c\u0002\u1c7f\u0002", "\u1c82\u0002\u1c8a\u0002\u1ceb\u0002\u1cee\u0002\u1cf0\u0002\u1cf3\u0002", "\u1cf7\u0002\u1cf8\u0002\u1d02\u0002\u1dc1\u0002\u1e02\u0002\u1f17\u0002", "\u1f1a\u0002\u1f1f\u0002\u1f22\u0002\u1f47\u0002\u1f4a\u0002\u1f4f\u0002", "\u1f52\u0002\u1f59\u0002\u1f5b\u0002\u1f5b\u0002\u1f5d\u0002\u1f5d\u0002", "\u1f5f\u0002\u1f5f\u0002\u1f61\u0002\u1f7f\u0002\u1f82\u0002\u1fb6\u0002", "\u1fb8\u0002\u1fbe\u0002\u1fc0\u0002\u1fc0\u0002\u1fc4\u0002\u1fc6\u0002", "\u1fc8\u0002\u1fce\u0002\u1fd2\u0002\u1fd5\u0002\u1fd8\u0002\u1fdd\u0002", "\u1fe2\u0002\u1fee\u0002\u1ff4\u0002\u1ff6\u0002\u1ff8\u0002\u1ffe\u0002", "\u2073\u0002\u2073\u0002\u2081\u0002\u2081\u0002\u2092\u0002\u209e\u0002", "\u2104\u0002\u2104\u0002\u2109\u0002\u2109\u0002\u210c\u0002\u2115\u0002", "\u2117\u0002\u2117\u0002\u211b\u0002\u211f\u0002\u2126\u0002\u2126\u0002", "\u2128\u0002\u2128\u0002\u212a\u0002\u212a\u0002\u212c\u0002\u212f\u0002", "\u2131\u0002\u213b\u0002\u213e\u0002\u2141\u0002\u2147\u0002\u214b\u0002", "\u2150\u0002\u2150\u0002\u2185\u0002\u2186\u0002\u2c02\u0002\u2c30\u0002", "\u2c32\u0002\u2c60\u0002\u2c62\u0002\u2ce6\u0002\u2ced\u0002\u2cf0\u0002", "\u2cf4\u0002\u2cf5\u0002\u2d02\u0002\u2d27\u0002\u2d29\u0002\u2d29\u0002", "\u2d2f\u0002\u2d2f\u0002\u2d32\u0002\u2d69\u0002\u2d71\u0002\u2d71\u0002", "\u2d82\u0002\u2d98\u0002\u2da2\u0002\u2da8\u0002\u2daa\u0002\u2db0\u0002", "\u2db2\u0002\u2db8\u0002\u2dba\u0002\u2dc0\u0002\u2dc2\u0002\u2dc8\u0002", "\u2dca\u0002\u2dd0\u0002\u2dd2\u0002\u2dd8\u0002\u2dda\u0002\u2de0\u0002", "\u2e31\u0002\u2e31\u0002\u3007\u0002\u3008\u0002\u3033\u0002\u3037\u0002", "\u303d\u0002\u303e\u0002\u3043\u0002\u3098\u0002\u309f\u0002\u30a1\u0002", "\u30a3\u0002\u30fc\u0002\u30fe\u0002\u3101\u0002\u3107\u0002\u3130\u0002", "\u3133\u0002\u3190\u0002\u31a2\u0002\u31bc\u0002\u31f2\u0002\u3201\u0002", "\u3402\u0002\u4db7\u0002\u4e02\u0002\u9fec\u0002\ua002\u0002\ua48e\u0002", "\ua4d2\u0002\ua4ff\u0002\ua502\u0002\ua60e\u0002\ua612\u0002\ua621\u0002", "\ua62c\u0002\ua62d\u0002\ua642\u0002\ua670\u0002\ua681\u0002\ua69f\u0002", "\ua6a2\u0002\ua6e7\u0002\ua719\u0002\ua721\u0002\ua724\u0002\ua78a\u0002", "\ua78d\u0002\ua7b0\u0002\ua7b2\u0002\ua7b9\u0002\ua7f9\u0002\ua803\u0002", "\ua805\u0002\ua807\u0002\ua809\u0002\ua80c\u0002\ua80e\u0002\ua824\u0002", "\ua842\u0002\ua875\u0002\ua884\u0002\ua8b5\u0002\ua8f4\u0002\ua8f9\u0002", "\ua8fd\u0002\ua8fd\u0002\ua8ff\u0002\ua8ff\u0002\ua90c\u0002\ua927\u0002", "\ua932\u0002\ua948\u0002\ua962\u0002\ua97e\u0002\ua986\u0002\ua9b4\u0002", "\ua9d1\u0002\ua9d1\u0002\ua9e2\u0002\ua9e6\u0002\ua9e8\u0002\ua9f1\u0002", "\ua9fc\u0002\uaa00\u0002\uaa02\u0002\uaa2a\u0002\uaa42\u0002\uaa44\u0002", "\uaa46\u0002\uaa4d\u0002\uaa62\u0002\uaa78\u0002\uaa7c\u0002\uaa7c\u0002", "\uaa80\u0002\uaab1\u0002\uaab3\u0002\uaab3\u0002\uaab7\u0002\uaab8\u0002", "\uaabb\u0002\uaabf\u0002\uaac2\u0002\uaac2\u0002\uaac4\u0002\uaac4\u0002", "\uaadd\u0002\uaadf\u0002\uaae2\u0002\uaaec\u0002\uaaf4\u0002\uaaf6\u0002", "\uab03\u0002\uab08\u0002\uab0b\u0002\uab10\u0002\uab13\u0002\uab18\u0002", "\uab22\u0002\uab28\u0002\uab2a\u0002\uab30\u0002\uab32\u0002\uab5c\u0002", "\uab5e\u0002\uab67\u0002\uab72\u0002\uabe4\u0002\uac02\u0002\ud7a5\u0002", "\ud7b2\u0002\ud7c8\u0002\ud7cd\u0002\ud7fd\u0002\uf902\u0002\ufa6f\u0002", "\ufa72\u0002\ufadb\u0002\ufb02\u0002\ufb08\u0002\ufb15\u0002\ufb19\u0002", "\ufb1f\u0002\ufb1f\u0002\ufb21\u0002\ufb2a\u0002\ufb2c\u0002\ufb38\u0002", "\ufb3a\u0002\ufb3e\u0002\ufb40\u0002\ufb40\u0002\ufb42\u0002\ufb43\u0002", "\ufb45\u0002\ufb46\u0002\ufb48\u0002\ufbb3\u0002\ufbd5\u0002\ufd3f\u0002", "\ufd52\u0002\ufd91\u0002\ufd94\u0002\ufdc9\u0002\ufdf2\u0002\ufdfd\u0002", "\ufe72\u0002\ufe76\u0002\ufe78\u0002\ufefe\u0002\uff23\u0002\uff3c\u0002", "\uff43\u0002\uff5c\u0002\uff68\u0002\uffc0\u0002\uffc4\u0002\uffc9\u0002", "\uffcc\u0002\uffd1\u0002\uffd4\u0002\uffd9\u0002\uffdc\u0002\uffde\u0002", "\u0002\u0003\r\u0003\u000f\u0003(\u0003*\u0003<\u0003>\u0003?\u0003", "A\u0003O\u0003R\u0003_\u0003\u0082\u0003\u00fc\u0003\u0282\u0003\u029e", "\u0003\u02a2\u0003\u02d2\u0003\u0302\u0003\u0321\u0003\u032f\u0003\u0342", "\u0003\u0344\u0003\u034b\u0003\u0352\u0003\u0377\u0003\u0382\u0003\u039f", "\u0003\u03a2\u0003\u03c5\u0003\u03ca\u0003\u03d1\u0003\u0402\u0003\u049f", "\u0003\u04b2\u0003\u04d5\u0003\u04da\u0003\u04fd\u0003\u0502\u0003\u0529", "\u0003\u0532\u0003\u0565\u0003\u0602\u0003\u0738\u0003\u0742\u0003\u0757", "\u0003\u0762\u0003\u0769\u0003\u0802\u0003\u0807\u0003\u080a\u0003\u080a", "\u0003\u080c\u0003\u0837\u0003\u0839\u0003\u083a\u0003\u083e\u0003\u083e", "\u0003\u0841\u0003\u0857\u0003\u0862\u0003\u0878\u0003\u0882\u0003\u08a0", "\u0003\u08e2\u0003\u08f4\u0003\u08f6\u0003\u08f7\u0003\u0902\u0003\u0917", "\u0003\u0922\u0003\u093b\u0003\u0982\u0003\u09b9\u0003\u09c0\u0003\u09c1", "\u0003\u0a02\u0003\u0a02\u0003\u0a12\u0003\u0a15\u0003\u0a17\u0003\u0a19", "\u0003\u0a1b\u0003\u0a35\u0003\u0a62\u0003\u0a7e\u0003\u0a82\u0003\u0a9e", "\u0003\u0ac2\u0003\u0ac9\u0003\u0acb\u0003\u0ae6\u0003\u0b02\u0003\u0b37", "\u0003\u0b42\u0003\u0b57\u0003\u0b62\u0003\u0b74\u0003\u0b82\u0003\u0b93", "\u0003\u0c02\u0003\u0c4a\u0003\u0c82\u0003\u0cb4\u0003\u0cc2\u0003\u0cf4", "\u0003\u1005\u0003\u1039\u0003\u1085\u0003\u10b1\u0003\u10d2\u0003\u10ea", "\u0003\u1105\u0003\u1128\u0003\u1152\u0003\u1174\u0003\u1178\u0003\u1178", "\u0003\u1185\u0003\u11b4\u0003\u11c3\u0003\u11c6\u0003\u11dc\u0003\u11dc", "\u0003\u11de\u0003\u11de\u0003\u1202\u0003\u1213\u0003\u1215\u0003\u122d", "\u0003\u1282\u0003\u1288\u0003\u128a\u0003\u128a\u0003\u128c\u0003\u128f", "\u0003\u1291\u0003\u129f\u0003\u12a1\u0003\u12aa\u0003\u12b2\u0003\u12e0", "\u0003\u1307\u0003\u130e\u0003\u1311\u0003\u1312\u0003\u1315\u0003\u132a", "\u0003\u132c\u0003\u1332\u0003\u1334\u0003\u1335\u0003\u1337\u0003\u133b", "\u0003\u133f\u0003\u133f\u0003\u1352\u0003\u1352\u0003\u135f\u0003\u1363", "\u0003\u1402\u0003\u1436\u0003\u1449\u0003\u144c\u0003\u1482\u0003\u14b1", "\u0003\u14c6\u0003\u14c7\u0003\u14c9\u0003\u14c9\u0003\u1582\u0003\u15b0", "\u0003\u15da\u0003\u15dd\u0003\u1602\u0003\u1631\u0003\u1646\u0003\u1646", "\u0003\u1682\u0003\u16ac\u0003\u1702\u0003\u171b\u0003\u18a2\u0003\u18e1", "\u0003\u1901\u0003\u1901\u0003\u1a02\u0003\u1a02\u0003\u1a0d\u0003\u1a34", "\u0003\u1a3c\u0003\u1a3c\u0003\u1a52\u0003\u1a52\u0003\u1a5e\u0003\u1a85", "\u0003\u1a88\u0003\u1a8b\u0003\u1ac2\u0003\u1afa\u0003\u1c02\u0003\u1c0a", "\u0003\u1c0c\u0003\u1c30\u0003\u1c42\u0003\u1c42\u0003\u1c74\u0003\u1c91", "\u0003\u1d02\u0003\u1d08\u0003\u1d0a\u0003\u1d0b\u0003\u1d0d\u0003\u1d32", "\u0003\u1d48\u0003\u1d48\u0003\u2002\u0003\u239b\u0003\u2482\u0003\u2545", "\u0003\u3002\u0003\u3430\u0003\u4402\u0003\u4648\u0003\u6802\u0003\u6a3a", "\u0003\u6a42\u0003\u6a60\u0003\u6ad2\u0003\u6aef\u0003\u6b02\u0003\u6b31", "\u0003\u6b42\u0003\u6b45\u0003\u6b65\u0003\u6b79\u0003\u6b7f\u0003\u6b91", "\u0003\u6f02\u0003\u6f46\u0003\u6f52\u0003\u6f52\u0003\u6f95\u0003\u6fa1", "\u0003\u6fe2\u0003\u6fe3\u0003\u7002\u0003\u87ee\u0003\u8802\u0003\u8af4", "\u0003\ub002\u0003\ub120\u0003\ub172\u0003\ub2fd\u0003\ubc02\u0003\ubc6c", "\u0003\ubc72\u0003\ubc7e\u0003\ubc82\u0003\ubc8a\u0003\ubc92\u0003\ubc9b", "\u0003\ud402\u0003\ud456\u0003\ud458\u0003\ud49e\u0003\ud4a0\u0003\ud4a1", "\u0003\ud4a4\u0003\ud4a4\u0003\ud4a7\u0003\ud4a8\u0003\ud4ab\u0003\ud4ae", "\u0003\ud4b0\u0003\ud4bb\u0003\ud4bd\u0003\ud4bd\u0003\ud4bf\u0003\ud4c5", "\u0003\ud4c7\u0003\ud507\u0003\ud509\u0003\ud50c\u0003\ud50f\u0003\ud516", "\u0003\ud518\u0003\ud51e\u0003\ud520\u0003\ud53b\u0003\ud53d\u0003\ud540", "\u0003\ud542\u0003\ud546\u0003\ud548\u0003\ud548\u0003\ud54c\u0003\ud552", "\u0003\ud554\u0003\ud6a7\u0003\ud6aa\u0003\ud6c2\u0003\ud6c4\u0003\ud6dc", "\u0003\ud6de\u0003\ud6fc\u0003\ud6fe\u0003\ud716\u0003\ud718\u0003\ud736", "\u0003\ud738\u0003\ud750\u0003\ud752\u0003\ud770\u0003\ud772\u0003\ud78a", "\u0003\ud78c\u0003\ud7aa\u0003\ud7ac\u0003\ud7c4\u0003\ud7c6\u0003\ud7cd", "\u0003\ue802\u0003\ue8c6\u0003\ue902\u0003\ue945\u0003\uee02\u0003\uee05", "\u0003\uee07\u0003\uee21\u0003\uee23\u0003\uee24\u0003\uee26\u0003\uee26", "\u0003\uee29\u0003\uee29\u0003\uee2b\u0003\uee34\u0003\uee36\u0003\uee39", "\u0003\uee3b\u0003\uee3b\u0003\uee3d\u0003\uee3d\u0003\uee44\u0003\uee44", "\u0003\uee49\u0003\uee49\u0003\uee4b\u0003\uee4b\u0003\uee4d\u0003\uee4d", "\u0003\uee4f\u0003\uee51\u0003\uee53\u0003\uee54\u0003\uee56\u0003\uee56", "\u0003\uee59\u0003\uee59\u0003\uee5b\u0003\uee5b\u0003\uee5d\u0003\uee5d", "\u0003\uee5f\u0003\uee5f\u0003\uee61\u0003\uee61\u0003\uee63\u0003\uee64", "\u0003\uee66\u0003\uee66\u0003\uee69\u0003\uee6c\u0003\uee6e\u0003\uee74", "\u0003\uee76\u0003\uee79\u0003\uee7b\u0003\uee7e\u0003\uee80\u0003\uee80", "\u0003\uee82\u0003\uee8b\u0003\uee8d\u0003\uee9d\u0003\ueea3\u0003\ueea5", "\u0003\ueea7\u0003\ueeab\u0003\ueead\u0003\ueebd\u0003\u0002\u0004\ua6d8", "\u0004\ua702\u0004\ub736\u0004\ub742\u0004\ub81f\u0004\ub822\u0004\ucea3", "\u0004\uceb2\u0004\uebe2\u0004\uf802\u0004\ufa1f\u0004\u0375\u0002\u0004", "\u0003\u0002\u0002\u0002\u0002\u0006\u0003\u0002\u0002\u0002\u0002\b", "\u0003\u0002\u0002\u0002\u0002\n\u0003\u0002\u0002\u0002\u0002\f\u0003", "\u0002\u0002\u0002\u0002\u000e\u0003\u0002\u0002\u0002\u0002\u0010\u0003", "\u0002\u0002\u0002\u0002\u0012\u0003\u0002\u0002\u0002\u0002\u0014\u0003", "\u0002\u0002\u0002\u0002\u0016\u0003\u0002\u0002\u0002\u0002\u0018\u0003", "\u0002\u0002\u0002\u0002\u001a\u0003\u0002\u0002\u0002\u0002\u001c\u0003", "\u0002\u0002\u0002\u0002\u001e\u0003\u0002\u0002\u0002\u0002 \u0003", "\u0002\u0002\u0002\u0002\"\u0003\u0002\u0002\u0002\u0002$\u0003\u0002", "\u0002\u0002\u0002&\u0003\u0002\u0002\u0002\u0002(\u0003\u0002\u0002", "\u0002\u0002*\u0003\u0002\u0002\u0002\u0002,\u0003\u0002\u0002\u0002", "\u0002.\u0003\u0002\u0002\u0002\u00020\u0003\u0002\u0002\u0002\u0002", "2\u0003\u0002\u0002\u0002\u00024\u0003\u0002\u0002\u0002\u00026\u0003", "\u0002\u0002\u0002\u00028\u0003\u0002\u0002\u0002\u0002:\u0003\u0002", "\u0002\u0002\u0002<\u0003\u0002\u0002\u0002\u0002>\u0003\u0002\u0002", "\u0002\u0002@\u0003\u0002\u0002\u0002\u0002B\u0003\u0002\u0002\u0002", "\u0002D\u0003\u0002\u0002\u0002\u0002F\u0003\u0002\u0002\u0002\u0002", "H\u0003\u0002\u0002\u0002\u0002J\u0003\u0002\u0002\u0002\u0002L\u0003", "\u0002\u0002\u0002\u0002N\u0003\u0002\u0002\u0002\u0002P\u0003\u0002", "\u0002\u0002\u0002R\u0003\u0002\u0002\u0002\u0002T\u0003\u0002\u0002", "\u0002\u0002V\u0003\u0002\u0002\u0002\u0002X\u0003\u0002\u0002\u0002", "\u0002Z\u0003\u0002\u0002\u0002\u0002\\\u0003\u0002\u0002\u0002\u0002", "^\u0003\u0002\u0002\u0002\u0002`\u0003\u0002\u0002\u0002\u0002b\u0003", "\u0002\u0002\u0002\u0002d\u0003\u0002\u0002\u0002\u0002f\u0003\u0002", "\u0002\u0002\u0002h\u0003\u0002\u0002\u0002\u0002j\u0003\u0002\u0002", "\u0002\u0002l\u0003\u0002\u0002\u0002\u0002n\u0003\u0002\u0002\u0002", "\u0002p\u0003\u0002\u0002\u0002\u0002r\u0003\u0002\u0002\u0002\u0002", "t\u0003\u0002\u0002\u0002\u0002v\u0003\u0002\u0002\u0002\u0002x\u0003", "\u0002\u0002\u0002\u0002z\u0003\u0002\u0002\u0002\u0002|\u0003\u0002", "\u0002\u0002\u0002~\u0003\u0002\u0002\u0002\u0002\u0080\u0003\u0002", "\u0002\u0002\u0002\u0082\u0003\u0002\u0002\u0002\u0002\u0084\u0003\u0002", "\u0002\u0002\u0002\u0086\u0003\u0002\u0002\u0002\u0002\u0088\u0003\u0002", "\u0002\u0002\u0002\u008a\u0003\u0002\u0002\u0002\u0002\u008c\u0003\u0002", "\u0002\u0002\u0002\u008e\u0003\u0002\u0002\u0002\u0002\u0094\u0003\u0002", "\u0002\u0002\u0002\u0098\u0003\u0002\u0002\u0002\u0002\u009a\u0003\u0002", "\u0002\u0002\u0002\u009c\u0003\u0002\u0002\u0002\u0002\u009e\u0003\u0002", "\u0002\u0002\u0002\u00a0\u0003\u0002\u0002\u0002\u0002\u00a2\u0003\u0002", "\u0002\u0002\u0002\u00a4\u0003\u0002\u0002\u0002\u0002\u00a6\u0003\u0002", "\u0002\u0002\u0002\u00a8\u0003\u0002\u0002\u0002\u0002\u00aa\u0003\u0002", "\u0002\u0002\u0002\u00ac\u0003\u0002\u0002\u0002\u0002\u00ae\u0003\u0002", "\u0002\u0002\u0003\u00c4\u0003\u0002\u0002\u0002\u0003\u00c6\u0003\u0002", "\u0002\u0002\u0003\u00c8\u0003\u0002\u0002\u0002\u0003\u00ca\u0003\u0002", "\u0002\u0002\u0003\u00cc\u0003\u0002\u0002\u0002\u0004\u00ce\u0003\u0002", "\u0002\u0002\u0006\u00d6\u0003\u0002\u0002\u0002\b\u00de\u0003\u0002", "\u0002\u0002\n\u00e3\u0003\u0002\u0002\u0002\f\u00ed\u0003\u0002\u0002", "\u0002\u000e\u00f4\u0003\u0002\u0002\u0002\u0010\u00f9\u0003\u0002\u0002", "\u0002\u0012\u00ff\u0003\u0002\u0002\u0002\u0014\u0102\u0003\u0002\u0002", "\u0002\u0016\u0106\u0003\u0002\u0002\u0002\u0018\u010d\u0003\u0002\u0002", "\u0002\u001a\u0112\u0003\u0002\u0002\u0002\u001c\u0117\u0003\u0002\u0002", "\u0002\u001e\u011c\u0003\u0002\u0002\u0002 \u0124\u0003\u0002\u0002", "\u0002\"\u012b\u0003\u0002\u0002\u0002$\u0131\u0003\u0002\u0002\u0002", "&\u013f\u0003\u0002\u0002\u0002(\u0142\u0003\u0002\u0002\u0002*\u0148", "\u0003\u0002\u0002\u0002,\u014d\u0003\u0002\u0002\u0002.\u0158\u0003", "\u0002\u0002\u00020\u015c\u0003\u0002\u0002\u00022\u0163\u0003\u0002", "\u0002\u00024\u016c\u0003\u0002\u0002\u00026\u0170\u0003\u0002\u0002", "\u00028\u0176\u0003\u0002\u0002\u0002:\u0180\u0003\u0002\u0002\u0002", "<\u0182\u0003\u0002\u0002\u0002>\u0186\u0003\u0002\u0002\u0002@\u0188", "\u0003\u0002\u0002\u0002B\u018c\u0003\u0002\u0002\u0002D\u018e\u0003", "\u0002\u0002\u0002F\u0192\u0003\u0002\u0002\u0002H\u0194\u0003\u0002", "\u0002\u0002J\u0196\u0003\u0002\u0002\u0002L\u0198\u0003\u0002\u0002", "\u0002N\u019a\u0003\u0002\u0002\u0002P\u019c\u0003\u0002\u0002\u0002", "R\u01a1\u0003\u0002\u0002\u0002T\u01a6\u0003\u0002\u0002\u0002V\u01a9", "\u0003\u0002\u0002\u0002X\u01ad\u0003\u0002\u0002\u0002Z\u01b0\u0003", "\u0002\u0002\u0002\\\u01b3\u0003\u0002\u0002\u0002^\u01b6\u0003\u0002", "\u0002\u0002`\u01b9\u0003\u0002\u0002\u0002b\u01bb\u0003\u0002\u0002", "\u0002d\u01be\u0003\u0002\u0002\u0002f\u01c0\u0003\u0002\u0002\u0002", "h\u01c3\u0003\u0002\u0002\u0002j\u01c5\u0003\u0002\u0002\u0002l\u01c7", "\u0003\u0002\u0002\u0002n\u01c9\u0003\u0002\u0002\u0002p\u01cc\u0003", "\u0002\u0002\u0002r\u01cf\u0003\u0002\u0002\u0002t\u01d2\u0003\u0002", "\u0002\u0002v\u01d4\u0003\u0002\u0002\u0002x\u01d6\u0003\u0002\u0002", "\u0002z\u01d8\u0003\u0002\u0002\u0002|\u01da\u0003\u0002\u0002\u0002", "~\u01dc\u0003\u0002\u0002\u0002\u0080\u01de\u0003\u0002\u0002\u0002", "\u0082\u01ec\u0003\u0002\u0002\u0002\u0084\u01f0\u0003\u0002\u0002\u0002", "\u0086\u01fc\u0003\u0002\u0002\u0002\u0088\u020a\u0003\u0002\u0002\u0002", "\u008a\u0218\u0003\u0002\u0002\u0002\u008c\u022c\u0003\u0002\u0002\u0002", "\u008e\u022e\u0003\u0002\u0002\u0002\u0090\u0252\u0003\u0002\u0002\u0002", "\u0092\u0254\u0003\u0002\u0002\u0002\u0094\u025f\u0003\u0002\u0002\u0002", "\u0096\u0265\u0003\u0002\u0002\u0002\u0098\u026c\u0003\u0002\u0002\u0002", "\u009a\u0272\u0003\u0002\u0002\u0002\u009c\u0274\u0003\u0002\u0002\u0002", "\u009e\u0279\u0003\u0002\u0002\u0002\u00a0\u027e\u0003\u0002\u0002\u0002", "\u00a2\u0285\u0003\u0002\u0002\u0002\u00a4\u0290\u0003\u0002\u0002\u0002", "\u00a6\u029b\u0003\u0002\u0002\u0002\u00a8\u02a8\u0003\u0002\u0002\u0002", "\u00aa\u02ae\u0003\u0002\u0002\u0002\u00ac\u02bd\u0003\u0002\u0002\u0002", "\u00ae\u02c3\u0003\u0002\u0002\u0002\u00b0\u02d2\u0003\u0002\u0002\u0002", "\u00b2\u02d4\u0003\u0002\u0002\u0002\u00b4\u02f0\u0003\u0002\u0002\u0002", "\u00b6\u02fa\u0003\u0002\u0002\u0002\u00b8\u02fc\u0003\u0002\u0002\u0002", "\u00ba\u02fe\u0003\u0002\u0002\u0002\u00bc\u0300\u0003\u0002\u0002\u0002", "\u00be\u0308\u0003\u0002\u0002\u0002\u00c0\u030a\u0003\u0002\u0002\u0002", "\u00c2\u030c\u0003\u0002\u0002\u0002\u00c4\u030f\u0003\u0002\u0002\u0002", "\u00c6\u0315\u0003\u0002\u0002\u0002\u00c8\u0323\u0003\u0002\u0002\u0002", "\u00ca\u0340\u0003\u0002\u0002\u0002\u00cc\u0344\u0003\u0002\u0002\u0002", "\u00ce\u00cf\u0007d\u0002\u0002\u00cf\u00d0\u0007t\u0002\u0002\u00d0", "\u00d1\u0007g\u0002\u0002\u00d1\u00d2\u0007c\u0002\u0002\u00d2\u00d3", "\u0007m\u0002\u0002\u00d3\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d5", "\b\u0002\u0002\u0002\u00d5\u0005\u0003\u0002\u0002\u0002\u00d6\u00d7", "\u0007f\u0002\u0002\u00d7\u00d8\u0007g\u0002\u0002\u00d8\u00d9\u0007", "h\u0002\u0002\u00d9\u00da\u0007c\u0002\u0002\u00da\u00db\u0007w\u0002", "\u0002\u00db\u00dc\u0007n\u0002\u0002\u00dc\u00dd\u0007v\u0002\u0002", "\u00dd\u0007\u0003\u0002\u0002\u0002\u00de\u00df\u0007h\u0002\u0002", "\u00df\u00e0\u0007w\u0002\u0002\u00e0\u00e1\u0007p\u0002\u0002\u00e1", "\u00e2\u0007e\u0002\u0002\u00e2\t\u0003\u0002\u0002\u0002\u00e3\u00e4", "\u0007k\u0002\u0002\u00e4\u00e5\u0007p\u0002\u0002\u00e5\u00e6\u0007", "v\u0002\u0002\u00e6\u00e7\u0007g\u0002\u0002\u00e7\u00e8\u0007t\u0002", "\u0002\u00e8\u00e9\u0007h\u0002\u0002\u00e9\u00ea\u0007c\u0002\u0002", "\u00ea\u00eb\u0007e\u0002\u0002\u00eb\u00ec\u0007g\u0002\u0002\u00ec", "\u000b\u0003\u0002\u0002\u0002\u00ed\u00ee\u0007u\u0002\u0002\u00ee", "\u00ef\u0007g\u0002\u0002\u00ef\u00f0\u0007n\u0002\u0002\u00f0\u00f1", "\u0007g\u0002\u0002\u00f1\u00f2\u0007e\u0002\u0002\u00f2\u00f3\u0007", "v\u0002\u0002\u00f3\r\u0003\u0002\u0002\u0002\u00f4\u00f5\u0007e\u0002", "\u0002\u00f5\u00f6\u0007c\u0002\u0002\u00f6\u00f7\u0007u\u0002\u0002", "\u00f7\u00f8\u0007g\u0002\u0002\u00f8\u000f\u0003\u0002\u0002\u0002", "\u00f9\u00fa\u0007f\u0002\u0002\u00fa\u00fb\u0007g\u0002\u0002\u00fb", "\u00fc\u0007h\u0002\u0002\u00fc\u00fd\u0007g\u0002\u0002\u00fd\u00fe", "\u0007t\u0002\u0002\u00fe\u0011\u0003\u0002\u0002\u0002\u00ff\u0100", "\u0007i\u0002\u0002\u0100\u0101\u0007q\u0002\u0002\u0101\u0013\u0003", "\u0002\u0002\u0002\u0102\u0103\u0007o\u0002\u0002\u0103\u0104\u0007", "c\u0002\u0002\u0104\u0105\u0007r\u0002\u0002\u0105\u0015\u0003\u0002", "\u0002\u0002\u0106\u0107\u0007u\u0002\u0002\u0107\u0108\u0007v\u0002", "\u0002\u0108\u0109\u0007t\u0002\u0002\u0109\u010a\u0007w\u0002\u0002", "\u010a\u010b\u0007e\u0002\u0002\u010b\u010c\u0007v\u0002\u0002\u010c", "\u0017\u0003\u0002\u0002\u0002\u010d\u010e\u0007e\u0002\u0002\u010e", "\u010f\u0007j\u0002\u0002\u010f\u0110\u0007c\u0002\u0002\u0110\u0111", "\u0007p\u0002\u0002\u0111\u0019\u0003\u0002\u0002\u0002\u0112\u0113", "\u0007g\u0002\u0002\u0113\u0114\u0007n\u0002\u0002\u0114\u0115\u0007", "u\u0002\u0002\u0115\u0116\u0007g\u0002\u0002\u0116\u001b\u0003\u0002", "\u0002\u0002\u0117\u0118\u0007i\u0002\u0002\u0118\u0119\u0007q\u0002", "\u0002\u0119\u011a\u0007v\u0002\u0002\u011a\u011b\u0007q\u0002\u0002", "\u011b\u001d\u0003\u0002\u0002\u0002\u011c\u011d\u0007r\u0002\u0002", "\u011d\u011e\u0007c\u0002\u0002\u011e\u011f\u0007e\u0002\u0002\u011f", "\u0120\u0007m\u0002\u0002\u0120\u0121\u0007c\u0002\u0002\u0121\u0122", "\u0007i\u0002\u0002\u0122\u0123\u0007g\u0002\u0002\u0123\u001f\u0003", "\u0002\u0002\u0002\u0124\u0125\u0007u\u0002\u0002\u0125\u0126\u0007", "y\u0002\u0002\u0126\u0127\u0007k\u0002\u0002\u0127\u0128\u0007v\u0002", "\u0002\u0128\u0129\u0007e\u0002\u0002\u0129\u012a\u0007j\u0002\u0002", "\u012a!\u0003\u0002\u0002\u0002\u012b\u012c\u0007e\u0002\u0002\u012c", "\u012d\u0007q\u0002\u0002\u012d\u012e\u0007p\u0002\u0002\u012e\u012f", "\u0007u\u0002\u0002\u012f\u0130\u0007v\u0002\u0002\u0130#\u0003\u0002", "\u0002\u0002\u0131\u0132\u0007h\u0002\u0002\u0132\u0133\u0007c\u0002", "\u0002\u0133\u0134\u0007n\u0002\u0002\u0134\u0135\u0007n\u0002\u0002", "\u0135\u0136\u0007v\u0002\u0002\u0136\u0137\u0007j\u0002\u0002\u0137", "\u0138\u0007t\u0002\u0002\u0138\u0139\u0007q\u0002\u0002\u0139\u013a", "\u0007w\u0002\u0002\u013a\u013b\u0007i\u0002\u0002\u013b\u013c\u0007", "j\u0002\u0002\u013c\u013d\u0003\u0002\u0002\u0002\u013d\u013e\b\u0012", "\u0002\u0002\u013e%\u0003\u0002\u0002\u0002\u013f\u0140\u0007k\u0002", "\u0002\u0140\u0141\u0007h\u0002\u0002\u0141\'\u0003\u0002\u0002\u0002", "\u0142\u0143\u0007t\u0002\u0002\u0143\u0144\u0007c\u0002\u0002\u0144", "\u0145\u0007p\u0002\u0002\u0145\u0146\u0007i\u0002\u0002\u0146\u0147", "\u0007g\u0002\u0002\u0147)\u0003\u0002\u0002\u0002\u0148\u0149\u0007", "v\u0002\u0002\u0149\u014a\u0007{\u0002\u0002\u014a\u014b\u0007r\u0002", "\u0002\u014b\u014c\u0007g\u0002\u0002\u014c+\u0003\u0002\u0002\u0002", "\u014d\u014e\u0007e\u0002\u0002\u014e\u014f\u0007q\u0002\u0002\u014f", "\u0150\u0007p\u0002\u0002\u0150\u0151\u0007v\u0002\u0002\u0151\u0152", "\u0007k\u0002\u0002\u0152\u0153\u0007p\u0002\u0002\u0153\u0154\u0007", "w\u0002\u0002\u0154\u0155\u0007g\u0002\u0002\u0155\u0156\u0003\u0002", "\u0002\u0002\u0156\u0157\b\u0016\u0002\u0002\u0157-\u0003\u0002\u0002", "\u0002\u0158\u0159\u0007h\u0002\u0002\u0159\u015a\u0007q\u0002\u0002", "\u015a\u015b\u0007t\u0002\u0002\u015b/\u0003\u0002\u0002\u0002\u015c", "\u015d\u0007k\u0002\u0002\u015d\u015e\u0007o\u0002\u0002\u015e\u015f", "\u0007r\u0002\u0002\u015f\u0160\u0007q\u0002\u0002\u0160\u0161\u0007", "t\u0002\u0002\u0161\u0162\u0007v\u0002\u0002\u01621\u0003\u0002\u0002", "\u0002\u0163\u0164\u0007t\u0002\u0002\u0164\u0165\u0007g\u0002\u0002", "\u0165\u0166\u0007v\u0002\u0002\u0166\u0167\u0007w\u0002\u0002\u0167", "\u0168\u0007t\u0002\u0002\u0168\u0169\u0007p\u0002\u0002\u0169\u016a", "\u0003\u0002\u0002\u0002\u016a\u016b\b\u0019\u0002\u0002\u016b3\u0003", "\u0002\u0002\u0002\u016c\u016d\u0007x\u0002\u0002\u016d\u016e\u0007", "c\u0002\u0002\u016e\u016f\u0007t\u0002\u0002\u016f5\u0003\u0002\u0002", "\u0002\u0170\u0171\u0007p\u0002\u0002\u0171\u0172\u0007k\u0002\u0002", "\u0172\u0173\u0007n\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002", "\u0174\u0175\b\u001b\u0002\u0002\u01757\u0003\u0002\u0002\u0002\u0176", "\u017b\u0005\u00be_\u0002\u0177\u017a\u0005\u00be_\u0002\u0178\u017a", "\u0005\u00c0`\u0002\u0179\u0177\u0003\u0002\u0002\u0002\u0179\u0178", "\u0003\u0002\u0002\u0002\u017a\u017d\u0003\u0002\u0002\u0002\u017b\u0179", "\u0003\u0002\u0002\u0002\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u017e", "\u0003\u0002\u0002\u0002\u017d\u017b\u0003\u0002\u0002\u0002\u017e\u017f", "\b\u001c\u0002\u0002\u017f9\u0003\u0002\u0002\u0002\u0180\u0181\u0007", "*\u0002\u0002\u0181;\u0003\u0002\u0002\u0002\u0182\u0183\u0007+\u0002", "\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184\u0185\b\u001e\u0002", "\u0002\u0185=\u0003\u0002\u0002\u0002\u0186\u0187\u0007}\u0002\u0002", "\u0187?\u0003\u0002\u0002\u0002\u0188\u0189\u0007\u007f\u0002\u0002", "\u0189\u018a\u0003\u0002\u0002\u0002\u018a\u018b\b \u0002\u0002\u018b", "A\u0003\u0002\u0002\u0002\u018c\u018d\u0007]\u0002\u0002\u018dC\u0003", "\u0002\u0002\u0002\u018e\u018f\u0007_\u0002\u0002\u018f\u0190\u0003", "\u0002\u0002\u0002\u0190\u0191\b\"\u0002\u0002\u0191E\u0003\u0002\u0002", "\u0002\u0192\u0193\u0007?\u0002\u0002\u0193G\u0003\u0002\u0002\u0002", "\u0194\u0195\u0007.\u0002\u0002\u0195I\u0003\u0002\u0002\u0002\u0196", "\u0197\u0007=\u0002\u0002\u0197K\u0003\u0002\u0002\u0002\u0198\u0199", "\u0007<\u0002\u0002\u0199M\u0003\u0002\u0002\u0002\u019a\u019b\u0007", "0\u0002\u0002\u019bO\u0003\u0002\u0002\u0002\u019c\u019d\u0007-\u0002", "\u0002\u019d\u019e\u0007-\u0002\u0002\u019e\u019f\u0003\u0002\u0002", "\u0002\u019f\u01a0\b(\u0002\u0002\u01a0Q\u0003\u0002\u0002\u0002\u01a1", "\u01a2\u0007/\u0002\u0002\u01a2\u01a3\u0007/\u0002\u0002\u01a3\u01a4", "\u0003\u0002\u0002\u0002\u01a4\u01a5\b)\u0002\u0002\u01a5S\u0003\u0002", "\u0002\u0002\u01a6\u01a7\u0007<\u0002\u0002\u01a7\u01a8\u0007?\u0002", "\u0002\u01a8U\u0003\u0002\u0002\u0002\u01a9\u01aa\u00070\u0002\u0002", "\u01aa\u01ab\u00070\u0002\u0002\u01ab\u01ac\u00070\u0002\u0002\u01ac", "W\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007~\u0002\u0002\u01ae\u01af", "\u0007~\u0002\u0002\u01afY\u0003\u0002\u0002\u0002\u01b0\u01b1\u0007", "(\u0002\u0002\u01b1\u01b2\u0007(\u0002\u0002\u01b2[\u0003\u0002\u0002", "\u0002\u01b3\u01b4\u0007?\u0002\u0002\u01b4\u01b5\u0007?\u0002\u0002", "\u01b5]\u0003\u0002\u0002\u0002\u01b6\u01b7\u0007#\u0002\u0002\u01b7", "\u01b8\u0007?\u0002\u0002\u01b8_\u0003\u0002\u0002\u0002\u01b9\u01ba", "\u0007>\u0002\u0002\u01baa\u0003\u0002\u0002\u0002\u01bb\u01bc\u0007", ">\u0002\u0002\u01bc\u01bd\u0007?\u0002\u0002\u01bdc\u0003\u0002\u0002", "\u0002\u01be\u01bf\u0007@\u0002\u0002\u01bfe\u0003\u0002\u0002\u0002", "\u01c0\u01c1\u0007@\u0002\u0002\u01c1\u01c2\u0007?\u0002\u0002\u01c2", "g\u0003\u0002\u0002\u0002\u01c3\u01c4\u0007~\u0002\u0002\u01c4i\u0003", "\u0002\u0002\u0002\u01c5\u01c6\u00071\u0002\u0002\u01c6k\u0003\u0002", "\u0002\u0002\u01c7\u01c8\u0007\'\u0002\u0002\u01c8m\u0003\u0002\u0002", "\u0002\u01c9\u01ca\u0007>\u0002\u0002\u01ca\u01cb\u0007>\u0002\u0002", "\u01cbo\u0003\u0002\u0002\u0002\u01cc\u01cd\u0007@\u0002\u0002\u01cd", "\u01ce\u0007@\u0002\u0002\u01ceq\u0003\u0002\u0002\u0002\u01cf\u01d0", "\u0007(\u0002\u0002\u01d0\u01d1\u0007`\u0002\u0002\u01d1s\u0003\u0002", "\u0002\u0002\u01d2\u01d3\u0007#\u0002\u0002\u01d3u\u0003\u0002\u0002", "\u0002\u01d4\u01d5\u0007-\u0002\u0002\u01d5w\u0003\u0002\u0002\u0002", "\u01d6\u01d7\u0007/\u0002\u0002\u01d7y\u0003\u0002\u0002\u0002\u01d8", "\u01d9\u0007`\u0002\u0002\u01d9{\u0003\u0002\u0002\u0002\u01da\u01db", "\u0007,\u0002\u0002\u01db}\u0003\u0002\u0002\u0002\u01dc\u01dd\u0007", "(\u0002\u0002\u01dd\u007f\u0003\u0002\u0002\u0002\u01de\u01df\u0007", ">\u0002\u0002\u01df\u01e0\u0007/\u0002\u0002\u01e0\u0081\u0003\u0002", "\u0002\u0002\u01e1\u01ed\u00072\u0002\u0002\u01e2\u01e9\t\u0002\u0002", "\u0002\u01e3\u01e5\u0007a\u0002\u0002\u01e4\u01e3\u0003\u0002\u0002", "\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002", "\u0002\u01e6\u01e8\t\u0003\u0002\u0002\u01e7\u01e4\u0003\u0002\u0002", "\u0002\u01e8\u01eb\u0003\u0002\u0002\u0002\u01e9\u01e7\u0003\u0002\u0002", "\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01ed\u0003\u0002\u0002", "\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002\u01ec\u01e1\u0003\u0002\u0002", "\u0002\u01ec\u01e2\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002", "\u0002\u01ee\u01ef\bA\u0002\u0002\u01ef\u0083\u0003\u0002\u0002\u0002", "\u01f0\u01f1\u00072\u0002\u0002\u01f1\u01f6\t\u0004\u0002\u0002\u01f2", "\u01f4\u0007a\u0002\u0002\u01f3\u01f2\u0003\u0002\u0002\u0002\u01f3", "\u01f4\u0003\u0002\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5", "\u01f7\u0005\u00ba]\u0002\u01f6\u01f3\u0003\u0002\u0002\u0002\u01f7", "\u01f8\u0003\u0002\u0002\u0002\u01f8\u01f6\u0003\u0002\u0002\u0002\u01f8", "\u01f9\u0003\u0002\u0002\u0002\u01f9\u01fa\u0003\u0002\u0002\u0002\u01fa", "\u01fb\bB\u0002\u0002\u01fb\u0085\u0003\u0002\u0002\u0002\u01fc\u01fe", "\u00072\u0002\u0002\u01fd\u01ff\t\u0005\u0002\u0002\u01fe\u01fd\u0003", "\u0002\u0002\u0002\u01fe\u01ff\u0003\u0002\u0002\u0002\u01ff\u0204\u0003", "\u0002\u0002\u0002\u0200\u0202\u0007a\u0002\u0002\u0201\u0200\u0003", "\u0002\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002\u0202\u0203\u0003", "\u0002\u0002\u0002\u0203\u0205\u0005\u00b6[\u0002\u0204\u0201\u0003", "\u0002\u0002\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206\u0204\u0003", "\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207\u0208\u0003", "\u0002\u0002\u0002\u0208\u0209\bC\u0002\u0002\u0209\u0087\u0003\u0002", "\u0002\u0002\u020a\u020b\u00072\u0002\u0002\u020b\u0210\t\u0006\u0002", "\u0002\u020c\u020e\u0007a\u0002\u0002\u020d\u020c\u0003\u0002\u0002", "\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002", "\u0002\u020f\u0211\u0005\u00b8\\\u0002\u0210\u020d\u0003\u0002\u0002", "\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0210\u0003\u0002\u0002", "\u0002\u0212\u0213\u0003\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002", "\u0002\u0214\u0215\bD\u0002\u0002\u0215\u0089\u0003\u0002\u0002\u0002", "\u0216\u0219\u0005\u008cF\u0002\u0217\u0219\u0005\u008eG\u0002\u0218", "\u0216\u0003\u0002\u0002\u0002\u0218\u0217\u0003\u0002\u0002\u0002\u0219", "\u021a\u0003\u0002\u0002\u0002\u021a\u021b\bE\u0002\u0002\u021b\u008b", "\u0003\u0002\u0002\u0002\u021c\u0225\u0005\u00b4Z\u0002\u021d\u021f", "\u00070\u0002\u0002\u021e\u0220\u0005\u00b4Z\u0002\u021f\u021e\u0003", "\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0222\u0003", "\u0002\u0002\u0002\u0221\u0223\u0005\u00bc^\u0002\u0222\u0221\u0003", "\u0002\u0002\u0002\u0222\u0223\u0003\u0002\u0002\u0002\u0223\u0226\u0003", "\u0002\u0002\u0002\u0224\u0226\u0005\u00bc^\u0002\u0225\u021d\u0003", "\u0002\u0002\u0002\u0225\u0224\u0003\u0002\u0002\u0002\u0226\u022d\u0003", "\u0002\u0002\u0002\u0227\u0228\u00070\u0002\u0002\u0228\u022a\u0005", "\u00b4Z\u0002\u0229\u022b\u0005\u00bc^\u0002\u022a\u0229\u0003\u0002", "\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022d\u0003\u0002", "\u0002\u0002\u022c\u021c\u0003\u0002\u0002\u0002\u022c\u0227\u0003\u0002", "\u0002\u0002\u022d\u008d\u0003\u0002\u0002\u0002\u022e\u022f\u00072", "\u0002\u0002\u022f\u0230\t\u0006\u0002\u0002\u0230\u0231\u0005\u0090", "H\u0002\u0231\u0232\u0005\u0092I\u0002\u0232\u008f\u0003\u0002\u0002", "\u0002\u0233\u0235\u0007a\u0002\u0002\u0234\u0233\u0003\u0002\u0002", "\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002\u0002", "\u0002\u0236\u0238\u0005\u00b8\\\u0002\u0237\u0234\u0003\u0002\u0002", "\u0002\u0238\u0239\u0003\u0002\u0002\u0002\u0239\u0237\u0003\u0002\u0002", "\u0002\u0239\u023a\u0003\u0002\u0002\u0002\u023a\u0245\u0003\u0002\u0002", "\u0002\u023b\u0242\u00070\u0002\u0002\u023c\u023e\u0007a\u0002\u0002", "\u023d\u023c\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002", "\u023e\u023f\u0003\u0002\u0002\u0002\u023f\u0241\u0005\u00b8\\\u0002", "\u0240\u023d\u0003\u0002\u0002\u0002\u0241\u0244\u0003\u0002\u0002\u0002", "\u0242\u0240\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002", "\u0243\u0246\u0003\u0002\u0002\u0002\u0244\u0242\u0003\u0002\u0002\u0002", "\u0245\u023b\u0003\u0002\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002", "\u0246\u0253\u0003\u0002\u0002\u0002\u0247\u0248\u00070\u0002\u0002", "\u0248\u024f\u0005\u00b8\\\u0002\u0249\u024b\u0007a\u0002\u0002\u024a", "\u0249\u0003\u0002\u0002\u0002\u024a\u024b\u0003\u0002\u0002\u0002\u024b", "\u024c\u0003\u0002\u0002\u0002\u024c\u024e\u0005\u00b8\\\u0002\u024d", "\u024a\u0003\u0002\u0002\u0002\u024e\u0251\u0003\u0002\u0002\u0002\u024f", "\u024d\u0003\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250", "\u0253\u0003\u0002\u0002\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0252", "\u0237\u0003\u0002\u0002\u0002\u0252\u0247\u0003\u0002\u0002\u0002\u0253", "\u0091\u0003\u0002\u0002\u0002\u0254\u0256\t\u0007\u0002\u0002\u0255", "\u0257\t\b\u0002\u0002\u0256\u0255\u0003\u0002\u0002\u0002\u0256\u0257", "\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258\u0259", "\u0005\u00b4Z\u0002\u0259\u0093\u0003\u0002\u0002\u0002\u025a\u0260", "\u0005\u0082A\u0002\u025b\u0260\u0005\u0084B\u0002\u025c\u0260\u0005", "\u0086C\u0002\u025d\u0260\u0005\u0088D\u0002\u025e\u0260\u0005\u008a", "E\u0002\u025f\u025a\u0003\u0002\u0002\u0002\u025f\u025b\u0003\u0002", "\u0002\u0002\u025f\u025c\u0003\u0002\u0002\u0002\u025f\u025d\u0003\u0002", "\u0002\u0002\u025f\u025e\u0003\u0002\u0002\u0002\u0260\u0261\u0003\u0002", "\u0002\u0002\u0261\u0262\u0007k\u0002\u0002\u0262\u0263\u0003\u0002", "\u0002\u0002\u0263\u0264\bJ\u0002\u0002\u0264\u0095\u0003\u0002\u0002", "\u0002\u0265\u0268\u0007)\u0002\u0002\u0266\u0269\u0005\u00b0X\u0002", "\u0267\u0269\u0005\u009aM\u0002\u0268\u0266\u0003\u0002\u0002\u0002", "\u0268\u0267\u0003\u0002\u0002\u0002\u0269\u026a\u0003\u0002\u0002\u0002", "\u026a\u026b\u0007)\u0002\u0002\u026b\u0097\u0003\u0002\u0002\u0002", "\u026c\u026d\u0005\u0096K\u0002\u026d\u026e\u0003\u0002\u0002\u0002", "\u026e\u026f\bL\u0002\u0002\u026f\u0099\u0003\u0002\u0002\u0002\u0270", "\u0273\u0005\u009cN\u0002\u0271\u0273\u0005\u009eO\u0002\u0272\u0270", "\u0003\u0002\u0002\u0002\u0272\u0271\u0003\u0002\u0002\u0002\u0273\u009b", "\u0003\u0002\u0002\u0002\u0274\u0275\u0007^\u0002\u0002\u0275\u0276", "\u0005\u00b6[\u0002\u0276\u0277\u0005\u00b6[\u0002\u0277\u0278\u0005", "\u00b6[\u0002\u0278\u009d\u0003\u0002\u0002\u0002\u0279\u027a\u0007", "^\u0002\u0002\u027a\u027b\u0007z\u0002\u0002\u027b\u027c\u0005\u00b8", "\\\u0002\u027c\u027d\u0005\u00b8\\\u0002\u027d\u009f\u0003\u0002\u0002", "\u0002\u027e\u027f\u0007^\u0002\u0002\u027f\u0280\u0007w\u0002\u0002", "\u0280\u0281\u0005\u00b8\\\u0002\u0281\u0282\u0005\u00b8\\\u0002\u0282", "\u0283\u0005\u00b8\\\u0002\u0283\u0284\u0005\u00b8\\\u0002\u0284\u00a1", "\u0003\u0002\u0002\u0002\u0285\u0286\u0007^\u0002\u0002\u0286\u0287", "\u0007W\u0002\u0002\u0287\u0288\u0005\u00b8\\\u0002\u0288\u0289\u0005", "\u00b8\\\u0002\u0289\u028a\u0005\u00b8\\\u0002\u028a\u028b\u0005\u00b8", "\\\u0002\u028b\u028c\u0005\u00b8\\\u0002\u028c\u028d\u0005\u00b8\\\u0002", "\u028d\u028e\u0005\u00b8\\\u0002\u028e\u028f\u0005\u00b8\\\u0002\u028f", "\u00a3\u0003\u0002\u0002\u0002\u0290\u0294\u0007b\u0002\u0002\u0291", "\u0293\n\t\u0002\u0002\u0292\u0291\u0003\u0002\u0002\u0002\u0293\u0296", "\u0003\u0002\u0002\u0002\u0294\u0292\u0003\u0002\u0002\u0002\u0294\u0295", "\u0003\u0002\u0002\u0002\u0295\u0297\u0003\u0002\u0002\u0002\u0296\u0294", "\u0003\u0002\u0002\u0002\u0297\u0298\u0007b\u0002\u0002\u0298\u0299", "\u0003\u0002\u0002\u0002\u0299\u029a\bR\u0002\u0002\u029a\u00a5\u0003", "\u0002\u0002\u0002\u029b\u02a0\u0007$\u0002\u0002\u029c\u029f\n\n\u0002", "\u0002\u029d\u029f\u0005\u00b2Y\u0002\u029e\u029c\u0003\u0002\u0002", "\u0002\u029e\u029d\u0003\u0002\u0002\u0002\u029f\u02a2\u0003\u0002\u0002", "\u0002\u02a0\u029e\u0003\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002\u0002", "\u0002\u02a1\u02a3\u0003\u0002\u0002\u0002\u02a2\u02a0\u0003\u0002\u0002", "\u0002\u02a3\u02a4\u0007$\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002", "\u0002\u02a5\u02a6\bS\u0002\u0002\u02a6\u00a7\u0003\u0002\u0002\u0002", "\u02a7\u02a9\t\u000b\u0002\u0002\u02a8\u02a7\u0003\u0002\u0002\u0002", "\u02a9\u02aa\u0003\u0002\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002", "\u02aa\u02ab\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002\u0002\u0002", "\u02ac\u02ad\bT\u0003\u0002\u02ad\u00a9\u0003\u0002\u0002\u0002\u02ae", "\u02af\u00071\u0002\u0002\u02af\u02b0\u0007,\u0002\u0002\u02b0\u02b4", "\u0003\u0002\u0002\u0002\u02b1\u02b3\u000b\u0002\u0002\u0002\u02b2\u02b1", "\u0003\u0002\u0002\u0002\u02b3\u02b6\u0003\u0002\u0002\u0002\u02b4\u02b5", "\u0003\u0002\u0002\u0002\u02b4\u02b2\u0003\u0002\u0002\u0002\u02b5\u02b7", "\u0003\u0002\u0002\u0002\u02b6\u02b4\u0003\u0002\u0002\u0002\u02b7\u02b8", "\u0007,\u0002\u0002\u02b8\u02b9\u00071\u0002\u0002\u02b9\u02ba\u0003", "\u0002\u0002\u0002\u02ba\u02bb\bU\u0003\u0002\u02bb\u00ab\u0003\u0002", "\u0002\u0002\u02bc\u02be\t\f\u0002\u0002\u02bd\u02bc\u0003\u0002\u0002", "\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf\u02bd\u0003\u0002\u0002", "\u0002\u02bf\u02c0\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002", "\u0002\u02c1\u02c2\bV\u0003\u0002\u02c2\u00ad\u0003\u0002\u0002\u0002", "\u02c3\u02c4\u00071\u0002\u0002\u02c4\u02c5\u00071\u0002\u0002\u02c5", "\u02c9\u0003\u0002\u0002\u0002\u02c6\u02c8\n\f\u0002\u0002\u02c7\u02c6", "\u0003\u0002\u0002\u0002\u02c8\u02cb\u0003\u0002\u0002\u0002\u02c9\u02c7", "\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca\u02cc", "\u0003\u0002\u0002\u0002\u02cb\u02c9\u0003\u0002\u0002\u0002\u02cc\u02cd", "\bW\u0003\u0002\u02cd\u00af\u0003\u0002\u0002\u0002\u02ce\u02d3\n\r", "\u0002\u0002\u02cf\u02d3\u0005\u00a0P\u0002\u02d0\u02d3\u0005\u00a2", "Q\u0002\u02d1\u02d3\u0005\u00b2Y\u0002\u02d2\u02ce\u0003\u0002\u0002", "\u0002\u02d2\u02cf\u0003\u0002\u0002\u0002\u02d2\u02d0\u0003\u0002\u0002", "\u0002\u02d2\u02d1\u0003\u0002\u0002\u0002\u02d3\u00b1\u0003\u0002\u0002", "\u0002\u02d4\u02ee\u0007^\u0002\u0002\u02d5\u02d6\u0007w\u0002\u0002", "\u02d6\u02d7\u0005\u00b8\\\u0002\u02d7\u02d8\u0005\u00b8\\\u0002\u02d8", "\u02d9\u0005\u00b8\\\u0002\u02d9\u02da\u0005\u00b8\\\u0002\u02da\u02ef", "\u0003\u0002\u0002\u0002\u02db\u02dc\u0007W\u0002\u0002\u02dc\u02dd", "\u0005\u00b8\\\u0002\u02dd\u02de\u0005\u00b8\\\u0002\u02de\u02df\u0005", "\u00b8\\\u0002\u02df\u02e0\u0005\u00b8\\\u0002\u02e0\u02e1\u0005\u00b8", "\\\u0002\u02e1\u02e2\u0005\u00b8\\\u0002\u02e2\u02e3\u0005\u00b8\\\u0002", "\u02e3\u02e4\u0005\u00b8\\\u0002\u02e4\u02ef\u0003\u0002\u0002\u0002", "\u02e5\u02ef\t\u000e\u0002\u0002\u02e6\u02e7\u0005\u00b6[\u0002\u02e7", "\u02e8\u0005\u00b6[\u0002\u02e8\u02e9\u0005\u00b6[\u0002\u02e9\u02ef", "\u0003\u0002\u0002\u0002\u02ea\u02eb\u0007z\u0002\u0002\u02eb\u02ec", "\u0005\u00b8\\\u0002\u02ec\u02ed\u0005\u00b8\\\u0002\u02ed\u02ef\u0003", "\u0002\u0002\u0002\u02ee\u02d5\u0003\u0002\u0002\u0002\u02ee\u02db\u0003", "\u0002\u0002\u0002\u02ee\u02e5\u0003\u0002\u0002\u0002\u02ee\u02e6\u0003", "\u0002\u0002\u0002\u02ee\u02ea\u0003\u0002\u0002\u0002\u02ef\u00b3\u0003", "\u0002\u0002\u0002\u02f0\u02f7\t\u0003\u0002\u0002\u02f1\u02f3\u0007", "a\u0002\u0002\u02f2\u02f1\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003", "\u0002\u0002\u0002\u02f3\u02f4\u0003\u0002\u0002\u0002\u02f4\u02f6\t", "\u0003\u0002\u0002\u02f5\u02f2\u0003\u0002\u0002\u0002\u02f6\u02f9\u0003", "\u0002\u0002\u0002\u02f7\u02f5\u0003\u0002\u0002\u0002\u02f7\u02f8\u0003", "\u0002\u0002\u0002\u02f8\u00b5\u0003\u0002\u0002\u0002\u02f9\u02f7\u0003", "\u0002\u0002\u0002\u02fa\u02fb\t\u000f\u0002\u0002\u02fb\u00b7\u0003", "\u0002\u0002\u0002\u02fc\u02fd\t\u0010\u0002\u0002\u02fd\u00b9\u0003", "\u0002\u0002\u0002\u02fe\u02ff\t\u0011\u0002\u0002\u02ff\u00bb\u0003", "\u0002\u0002\u0002\u0300\u0302\t\u0012\u0002\u0002\u0301\u0303\t\b\u0002", "\u0002\u0302\u0301\u0003\u0002\u0002\u0002\u0302\u0303\u0003\u0002\u0002", "\u0002\u0303\u0304\u0003\u0002\u0002\u0002\u0304\u0305\u0005\u00b4Z", "\u0002\u0305\u00bd\u0003\u0002\u0002\u0002\u0306\u0309\u0005\u00c2a", "\u0002\u0307\u0309\u0007a\u0002\u0002\u0308\u0306\u0003\u0002\u0002", "\u0002\u0308\u0307\u0003\u0002\u0002\u0002\u0309\u00bf\u0003\u0002\u0002", "\u0002\u030a\u030b\t\u0013\u0002\u0002\u030b\u00c1\u0003\u0002\u0002", "\u0002\u030c\u030d\t\u0014\u0002\u0002\u030d\u00c3\u0003\u0002\u0002", "\u0002\u030e\u0310\t\u000b\u0002\u0002\u030f\u030e\u0003\u0002\u0002", "\u0002\u0310\u0311\u0003\u0002\u0002\u0002\u0311\u030f\u0003\u0002\u0002", "\u0002\u0311\u0312\u0003\u0002\u0002\u0002\u0312\u0313\u0003\u0002\u0002", "\u0002\u0313\u0314\bb\u0003\u0002\u0314\u00c5\u0003\u0002\u0002\u0002", "\u0315\u0316\u00071\u0002\u0002\u0316\u0317\u0007,\u0002\u0002\u0317", "\u031b\u0003\u0002\u0002\u0002\u0318\u031a\n\f\u0002\u0002\u0319\u0318", "\u0003\u0002\u0002\u0002\u031a\u031d\u0003\u0002\u0002\u0002\u031b\u031c", "\u0003\u0002\u0002\u0002\u031b\u0319\u0003\u0002\u0002\u0002\u031c\u031e", "\u0003\u0002\u0002\u0002\u031d\u031b\u0003\u0002\u0002\u0002\u031e\u031f", "\u0007,\u0002\u0002\u031f\u0320\u00071\u0002\u0002\u0320\u0321\u0003", "\u0002\u0002\u0002\u0321\u0322\bc\u0003\u0002\u0322\u00c7\u0003\u0002", "\u0002\u0002\u0323\u0324\u00071\u0002\u0002\u0324\u0325\u00071\u0002", "\u0002\u0325\u0329\u0003\u0002\u0002\u0002\u0326\u0328\n\f\u0002\u0002", "\u0327\u0326\u0003\u0002\u0002\u0002\u0328\u032b\u0003\u0002\u0002\u0002", "\u0329\u0327\u0003\u0002\u0002\u0002\u0329\u032a\u0003\u0002\u0002\u0002", "\u032a\u032c\u0003\u0002\u0002\u0002\u032b\u0329\u0003\u0002\u0002\u0002", "\u032c\u032d\bd\u0003\u0002\u032d\u00c9\u0003\u0002\u0002\u0002\u032e", "\u0330\t\f\u0002\u0002\u032f\u032e\u0003\u0002\u0002\u0002\u0330\u0331", "\u0003\u0002\u0002\u0002\u0331\u032f\u0003\u0002\u0002\u0002\u0331\u0332", "\u0003\u0002\u0002\u0002\u0332\u0341\u0003\u0002\u0002\u0002\u0333\u0341", "\u0007=\u0002\u0002\u0334\u0335\u00071\u0002\u0002\u0335\u0336\u0007", ",\u0002\u0002\u0336\u033a\u0003\u0002\u0002\u0002\u0337\u0339\u000b", "\u0002\u0002\u0002\u0338\u0337\u0003\u0002\u0002\u0002\u0339\u033c\u0003", "\u0002\u0002\u0002\u033a\u033b\u0003\u0002\u0002\u0002\u033a\u0338\u0003", "\u0002\u0002\u0002\u033b\u033d\u0003\u0002\u0002\u0002\u033c\u033a\u0003", "\u0002\u0002\u0002\u033d\u033e\u0007,\u0002\u0002\u033e\u0341\u0007", "1\u0002\u0002\u033f\u0341\u0007\u0002\u0002\u0003\u0340\u032f\u0003", "\u0002\u0002\u0002\u0340\u0333\u0003\u0002\u0002\u0002\u0340\u0334\u0003", "\u0002\u0002\u0002\u0340\u033f\u0003\u0002\u0002\u0002\u0341\u0342\u0003", "\u0002\u0002\u0002\u0342\u0343\be\u0004\u0002\u0343\u00cb\u0003\u0002", "\u0002\u0002\u0344\u0345\u0003\u0002\u0002\u0002\u0345\u0346\u0003\u0002", "\u0002\u0002\u0346\u0347\bf\u0004\u0002\u0347\u0348\bf\u0003\u0002\u0348", "\u00cd\u0003\u0002\u0002\u00025\u0002\u0003\u0179\u017b\u01e4\u01e9", "\u01ec\u01f3\u01f8\u01fe\u0201\u0206\u020d\u0212\u0218\u021f\u0222\u0225", "\u022a\u022c\u0234\u0239\u023d\u0242\u0245\u024a\u024f\u0252\u0256\u025f", "\u0268\u0272\u0294\u029e\u02a0\u02aa\u02b4\u02bf\u02c9\u02d2\u02ee\u02f2", "\u02f7\u0302\u0308\u0311\u031b\u0329\u0331\u033a\u0340\u0005\u0004\u0003", "\u0002\u0002\u0003\u0002\u0004\u0002\u0002"].join("");
const atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new _antlr.default.dfa.DFA(ds, index));

class GoLexer extends _antlr.default.Lexer {
  static grammarFileName = "GoLexer.g4";
  static channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];
  static modeNames = ["DEFAULT_MODE", "NLSEMI"];
  static literalNames = [null, "'break'", "'default'", "'func'", "'interface'", "'select'", "'case'", "'defer'", "'go'", "'map'", "'struct'", "'chan'", "'else'", "'goto'", "'package'", "'switch'", "'const'", "'fallthrough'", "'if'", "'range'", "'type'", "'continue'", "'for'", "'import'", "'return'", "'var'", "'nil'", null, "'('", "')'", "'{'", "'}'", "'['", "']'", "'='", "','", "';'", "':'", "'.'", "'++'", "'--'", "':='", "'...'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'|'", "'/'", "'%'", "'<<'", "'>>'", "'&^'", "'!'", "'+'", "'-'", "'^'", "'*'", "'&'", "'<-'"];
  static symbolicNames = [null, "BREAK", "DEFAULT", "FUNC", "INTERFACE", "SELECT", "CASE", "DEFER", "GO", "MAP", "STRUCT", "CHAN", "ELSE", "GOTO", "PACKAGE", "SWITCH", "CONST", "FALLTHROUGH", "IF", "RANGE", "TYPE", "CONTINUE", "FOR", "IMPORT", "RETURN", "VAR", "NIL_LIT", "IDENTIFIER", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", "PLUS_PLUS", "MINUS_MINUS", "DECLARE_ASSIGN", "ELLIPSIS", "LOGICAL_OR", "LOGICAL_AND", "EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", "OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "BIT_CLEAR", "EXCLAMATION", "PLUS", "MINUS", "CARET", "STAR", "AMPERSAND", "RECEIVE", "DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", "HEX_LIT", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", "IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", "OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", "LITTLE_U_VALUE", "BIG_U_VALUE", "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", "WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", "WS_NLSEMI", "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI", "EOS", "OTHER"];
  static ruleNames = ["BREAK", "DEFAULT", "FUNC", "INTERFACE", "SELECT", "CASE", "DEFER", "GO", "MAP", "STRUCT", "CHAN", "ELSE", "GOTO", "PACKAGE", "SWITCH", "CONST", "FALLTHROUGH", "IF", "RANGE", "TYPE", "CONTINUE", "FOR", "IMPORT", "RETURN", "VAR", "NIL_LIT", "IDENTIFIER", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", "PLUS_PLUS", "MINUS_MINUS", "DECLARE_ASSIGN", "ELLIPSIS", "LOGICAL_OR", "LOGICAL_AND", "EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", "OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "BIT_CLEAR", "EXCLAMATION", "PLUS", "MINUS", "CARET", "STAR", "AMPERSAND", "RECEIVE", "DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", "HEX_LIT", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", "HEX_MANTISSA", "HEX_EXPONENT", "IMAGINARY_LIT", "RUNE", "RUNE_LIT", "BYTE_VALUE", "OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", "LITTLE_U_VALUE", "BIG_U_VALUE", "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", "WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", "UNICODE_VALUE", "ESCAPED_VALUE", "DECIMALS", "OCTAL_DIGIT", "HEX_DIGIT", "BIN_DIGIT", "EXPONENT", "LETTER", "UNICODE_DIGIT", "UNICODE_LETTER", "WS_NLSEMI", "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI", "EOS", "OTHER"];

  constructor(input) {
    super(input);
    this._interp = new _antlr.default.atn.LexerATNSimulator(this, atn, decisionsToDFA, new _antlr.default.PredictionContextCache());
  }

  get atn() {
    return atn;
  }

}

exports.default = GoLexer;
GoLexer.EOF = _antlr.default.Token.EOF;
GoLexer.BREAK = 1;
GoLexer.DEFAULT = 2;
GoLexer.FUNC = 3;
GoLexer.INTERFACE = 4;
GoLexer.SELECT = 5;
GoLexer.CASE = 6;
GoLexer.DEFER = 7;
GoLexer.GO = 8;
GoLexer.MAP = 9;
GoLexer.STRUCT = 10;
GoLexer.CHAN = 11;
GoLexer.ELSE = 12;
GoLexer.GOTO = 13;
GoLexer.PACKAGE = 14;
GoLexer.SWITCH = 15;
GoLexer.CONST = 16;
GoLexer.FALLTHROUGH = 17;
GoLexer.IF = 18;
GoLexer.RANGE = 19;
GoLexer.TYPE = 20;
GoLexer.CONTINUE = 21;
GoLexer.FOR = 22;
GoLexer.IMPORT = 23;
GoLexer.RETURN = 24;
GoLexer.VAR = 25;
GoLexer.NIL_LIT = 26;
GoLexer.IDENTIFIER = 27;
GoLexer.L_PAREN = 28;
GoLexer.R_PAREN = 29;
GoLexer.L_CURLY = 30;
GoLexer.R_CURLY = 31;
GoLexer.L_BRACKET = 32;
GoLexer.R_BRACKET = 33;
GoLexer.ASSIGN = 34;
GoLexer.COMMA = 35;
GoLexer.SEMI = 36;
GoLexer.COLON = 37;
GoLexer.DOT = 38;
GoLexer.PLUS_PLUS = 39;
GoLexer.MINUS_MINUS = 40;
GoLexer.DECLARE_ASSIGN = 41;
GoLexer.ELLIPSIS = 42;
GoLexer.LOGICAL_OR = 43;
GoLexer.LOGICAL_AND = 44;
GoLexer.EQUALS = 45;
GoLexer.NOT_EQUALS = 46;
GoLexer.LESS = 47;
GoLexer.LESS_OR_EQUALS = 48;
GoLexer.GREATER = 49;
GoLexer.GREATER_OR_EQUALS = 50;
GoLexer.OR = 51;
GoLexer.DIV = 52;
GoLexer.MOD = 53;
GoLexer.LSHIFT = 54;
GoLexer.RSHIFT = 55;
GoLexer.BIT_CLEAR = 56;
GoLexer.EXCLAMATION = 57;
GoLexer.PLUS = 58;
GoLexer.MINUS = 59;
GoLexer.CARET = 60;
GoLexer.STAR = 61;
GoLexer.AMPERSAND = 62;
GoLexer.RECEIVE = 63;
GoLexer.DECIMAL_LIT = 64;
GoLexer.BINARY_LIT = 65;
GoLexer.OCTAL_LIT = 66;
GoLexer.HEX_LIT = 67;
GoLexer.FLOAT_LIT = 68;
GoLexer.DECIMAL_FLOAT_LIT = 69;
GoLexer.HEX_FLOAT_LIT = 70;
GoLexer.IMAGINARY_LIT = 71;
GoLexer.RUNE_LIT = 72;
GoLexer.BYTE_VALUE = 73;
GoLexer.OCTAL_BYTE_VALUE = 74;
GoLexer.HEX_BYTE_VALUE = 75;
GoLexer.LITTLE_U_VALUE = 76;
GoLexer.BIG_U_VALUE = 77;
GoLexer.RAW_STRING_LIT = 78;
GoLexer.INTERPRETED_STRING_LIT = 79;
GoLexer.WS = 80;
GoLexer.COMMENT = 81;
GoLexer.TERMINATOR = 82;
GoLexer.LINE_COMMENT = 83;
GoLexer.WS_NLSEMI = 84;
GoLexer.COMMENT_NLSEMI = 85;
GoLexer.LINE_COMMENT_NLSEMI = 86;
GoLexer.EOS = 87;
GoLexer.OTHER = 88;
GoLexer.NLSEMI = 1;

},{"antlr4":42}],133:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _GoParserListener = _interopRequireDefault(require("./GoParserListener.js"));

var _GoParserVisitor = _interopRequireDefault(require("./GoParserVisitor.js"));

var _GoParserBase = _interopRequireDefault(require("./GoParserBase.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/GoParser.g4 by ANTLR 4.9.2
// jshint ignore: start
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786", "\u5964\u0003Z\u03ba\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004", "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007", "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f", "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010", "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014", "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017", "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b", "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e", "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004", "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004", "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004", "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004", "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004", "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004", "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004", "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004", "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004", "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004", "c\tc\u0004d\td\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003", "\u0002\u0007\u0002\u00ce\n\u0002\f\u0002\u000e\u0002\u00d1\u000b\u0002", "\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u00d6\n\u0002\u0003", "\u0002\u0003\u0002\u0007\u0002\u00da\n\u0002\f\u0002\u000e\u0002\u00dd", "\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003", "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004", "\u0007\u0004\u00ea\n\u0004\f\u0004\u000e\u0004\u00ed\u000b\u0004\u0003", "\u0004\u0005\u0004\u00f0\n\u0004\u0003\u0005\u0005\u0005\u00f3\n\u0005", "\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007", "\u0003\u0007\u0005\u0007\u00fc\n\u0007\u0003\b\u0003\b\u0003\b\u0003", "\b\u0003\b\u0003\b\u0007\b\u0104\n\b\f\b\u000e\b\u0107\u000b\b\u0003", "\b\u0005\b\u010a\n\b\u0003\t\u0003\t\u0005\t\u010e\n\t\u0003\t\u0003", "\t\u0005\t\u0112\n\t\u0003\n\u0003\n\u0003\n\u0007\n\u0117\n\n\f\n\u000e", "\n\u011a\u000b\n\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u011f", "\n\u000b\f\u000b\u000e\u000b\u0122\u000b\u000b\u0003\f\u0003\f\u0003", "\f\u0003\f\u0003\f\u0003\f\u0007\f\u012a\n\f\f\f\u000e\f\u012d\u000b", "\f\u0003\f\u0005\f\u0130\n\f\u0003\r\u0003\r\u0005\r\u0134\n\r\u0003", "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e", "\u013c\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003", "\u000f\u0005\u000f\u0143\n\u000f\u0003\u0010\u0003\u0010\u0003\u0011", "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011", "\u014d\n\u0011\f\u0011\u000e\u0011\u0150\u000b\u0011\u0003\u0011\u0005", "\u0011\u0153\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012", "\u0005\u0012\u0159\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u015d", "\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u0161\n\u0013\u0003\u0013", "\u0003\u0013\u0003\u0014\u0005\u0014\u0166\n\u0014\u0003\u0014\u0003", "\u0014\u0003\u0014\u0006\u0014\u016b\n\u0014\r\u0014\u000e\u0014\u016c", "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015", "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015", "\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u017e\n\u0015\u0003", "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0185", "\n\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018", "\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a", "\u0003\u001a\u0003\u001a\u0003\u001b\u0005\u001b\u0195\n\u001b\u0003", "\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003", "\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01a2", "\n\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u01a6\n\u001f\u0003 \u0003", " \u0005 \u01aa\n \u0003!\u0003!\u0005!\u01ae\n!\u0003\"\u0003\"\u0003", "\"\u0003#\u0003#\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003", "%\u0003%\u0003%\u0003%\u0003%\u0005%\u01c1\n%\u0003%\u0003%\u0003%\u0003", "%\u0005%\u01c7\n%\u0005%\u01c9\n%\u0003&\u0003&\u0005&\u01cd\n&\u0003", "\'\u0003\'\u0005\'\u01d1\n\'\u0003\'\u0005\'\u01d4\n\'\u0003\'\u0003", "\'\u0005\'\u01d8\n\'\u0005\'\u01da\n\'\u0003\'\u0003\'\u0007\'\u01de", "\n\'\f\'\u000e\'\u01e1\u000b\'\u0003\'\u0003\'\u0003(\u0003(\u0003(", "\u0005(\u01e8\n(\u0003)\u0003)\u0003)\u0005)\u01ed\n)\u0003*\u0003*", "\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u01f8\n*\u0003", "*\u0003*\u0007*\u01fc\n*\f*\u000e*\u01ff\u000b*\u0003*\u0003*\u0003", "+\u0003+\u0005+\u0205\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003", ",\u0003,\u0003,\u0005,\u0210\n,\u0003-\u0003-\u0003-\u0005-\u0215\n", "-\u0003.\u0003.\u0005.\u0219\n.\u0003.\u0003.\u0003.\u0005.\u021e\n", ".\u0007.\u0220\n.\f.\u000e.\u0223\u000b.\u0003/\u0003/\u0003/\u0007", "/\u0228\n/\f/\u000e/\u022b\u000b/\u0003/\u0003/\u00030\u00030\u0003", "0\u00050\u0232\n0\u00031\u00031\u00031\u00051\u0237\n1\u00031\u0005", "1\u023a\n1\u00032\u00032\u00032\u00032\u00032\u00032\u00052\u0242\n", "2\u00032\u00032\u00033\u00033\u00033\u00033\u00053\u024a\n3\u00033\u0003", "3\u00034\u00054\u024f\n4\u00034\u00034\u00054\u0253\n4\u00034\u0003", "4\u00054\u0257\n4\u00035\u00035\u00035\u00035\u00035\u00035\u00055\u025f", "\n5\u00035\u00035\u00035\u00036\u00036\u00036\u00037\u00037\u00037\u0003", "7\u00037\u00037\u00057\u026d\n7\u00038\u00038\u00058\u0271\n8\u0003", "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u027b\n9\u0003", ":\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003<\u0003<\u0003=\u0003", "=\u0003=\u0003>\u0003>\u0003>\u0003>\u0005>\u028d\n>\u0003>\u0003>\u0007", ">\u0291\n>\f>\u000e>\u0294\u000b>\u0003>\u0003>\u0003?\u0003?\u0003", "?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003A\u0003A\u0003", "A\u0003A\u0003A\u0005A\u02a7\nA\u0003A\u0003A\u0003B\u0003B\u0003B\u0003", "B\u0003B\u0003B\u0005B\u02b1\nB\u0003C\u0003C\u0003C\u0003D\u0003D\u0003", "D\u0003D\u0005D\u02ba\nD\u0003E\u0003E\u0005E\u02be\nE\u0003F\u0003", "F\u0003F\u0003F\u0007F\u02c4\nF\fF\u000eF\u02c7\u000bF\u0003F\u0005", "F\u02ca\nF\u0005F\u02cc\nF\u0003F\u0003F\u0003G\u0005G\u02d1\nG\u0003", "G\u0005G\u02d4\nG\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0005H\u02dc", "\nH\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003", "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0007H\u02ed\nH\fH\u000eH\u02f0", "\u000bH\u0003I\u0003I\u0003I\u0003I\u0005I\u02f6\nI\u0003I\u0003I\u0003", "I\u0003I\u0003I\u0003I\u0003I\u0005I\u02ff\nI\u0007I\u0301\nI\fI\u000e", "I\u0304\u000bI\u0003J\u0003J\u0003J\u0003J\u0005J\u030a\nJ\u0003J\u0003", "J\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u0313\nK\u0003L\u0003L\u0003", "L\u0003L\u0003L\u0003L\u0005L\u031b\nL\u0003M\u0003M\u0003M\u0005M\u0320", "\nM\u0003N\u0003N\u0003N\u0003N\u0005N\u0326\nN\u0003O\u0003O\u0003", "P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003S\u0003", "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u033c\nS\u0003", "T\u0003T\u0003T\u0005T\u0341\nT\u0005T\u0343\nT\u0003T\u0003T\u0003", "U\u0003U\u0003U\u0007U\u034a\nU\fU\u000eU\u034d\u000bU\u0003V\u0003", "V\u0003V\u0005V\u0352\nV\u0003V\u0003V\u0003W\u0003W\u0005W\u0358\n", "W\u0003X\u0003X\u0005X\u035c\nX\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0007", "Y\u0363\nY\fY\u000eY\u0366\u000bY\u0003Y\u0003Y\u0003Z\u0003Z\u0003", "Z\u0003Z\u0005Z\u036e\nZ\u0003Z\u0005Z\u0371\nZ\u0003[\u0003[\u0003", "\\\u0005\\\u0376\n\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003]\u0003", "^\u0003^\u0003^\u0003^\u0003_\u0003_\u0005_\u0384\n_\u0003_\u0003_\u0005", "_\u0388\n_\u0003_\u0005_\u038b\n_\u0003_\u0003_\u0003_\u0003_\u0003", "_\u0005_\u0392\n_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003", "a\u0003a\u0003a\u0003a\u0003a\u0005a\u03a0\na\u0005a\u03a2\na\u0003", "a\u0005a\u03a5\na\u0003a\u0005a\u03a8\na\u0005a\u03aa\na\u0003a\u0003", "a\u0003b\u0003b\u0003b\u0003b\u0003c\u0003c\u0003d\u0003d\u0003d\u0003", "d\u0005d\u03b8\nd\u0003d\u0002\u0004\u008e\u0090e\u0002\u0004\u0006", "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*", ",.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086", "\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e", "\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6", "\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u0002\f\u0004\u0002", "\u001d\u001d((\u0003\u0002)*\u0004\u00025:<@\u0004\u0002&&YY\u0003\u0002", ";A\u0004\u00026:?@\u0004\u000255<>\u0003\u0002/4\u0004\u0002BEIJ\u0003", "\u0002PQ\u0002\u03f2\u0002\u00c8\u0003\u0002\u0002\u0002\u0004\u00e0", "\u0003\u0002\u0002\u0002\u0006\u00e3\u0003\u0002\u0002\u0002\b\u00f2", "\u0003\u0002\u0002\u0002\n\u00f6\u0003\u0002\u0002\u0002\f\u00fb\u0003", "\u0002\u0002\u0002\u000e\u00fd\u0003\u0002\u0002\u0002\u0010\u010b\u0003", "\u0002\u0002\u0002\u0012\u0113\u0003\u0002\u0002\u0002\u0014\u011b\u0003", "\u0002\u0002\u0002\u0016\u0123\u0003\u0002\u0002\u0002\u0018\u0131\u0003", "\u0002\u0002\u0002\u001a\u0137\u0003\u0002\u0002\u0002\u001c\u013d\u0003", "\u0002\u0002\u0002\u001e\u0144\u0003\u0002\u0002\u0002 \u0146\u0003", "\u0002\u0002\u0002\"\u0154\u0003\u0002\u0002\u0002$\u015e\u0003\u0002", "\u0002\u0002&\u016a\u0003\u0002\u0002\u0002(\u017d\u0003\u0002\u0002", "\u0002*\u0184\u0003\u0002\u0002\u0002,\u0186\u0003\u0002\u0002\u0002", ".\u0188\u0003\u0002\u0002\u00020\u018c\u0003\u0002\u0002\u00022\u018f", "\u0003\u0002\u0002\u00024\u0194\u0003\u0002\u0002\u00026\u0198\u0003", "\u0002\u0002\u00028\u019c\u0003\u0002\u0002\u0002:\u019e\u0003\u0002", "\u0002\u0002<\u01a3\u0003\u0002\u0002\u0002>\u01a7\u0003\u0002\u0002", "\u0002@\u01ab\u0003\u0002\u0002\u0002B\u01af\u0003\u0002\u0002\u0002", "D\u01b2\u0003\u0002\u0002\u0002F\u01b4\u0003\u0002\u0002\u0002H\u01b7", "\u0003\u0002\u0002\u0002J\u01cc\u0003\u0002\u0002\u0002L\u01ce\u0003", "\u0002\u0002\u0002N\u01e4\u0003\u0002\u0002\u0002P\u01ec\u0003\u0002", "\u0002\u0002R\u01ee\u0003\u0002\u0002\u0002T\u0204\u0003\u0002\u0002", "\u0002V\u020c\u0003\u0002\u0002\u0002X\u0214\u0003\u0002\u0002\u0002", "Z\u0218\u0003\u0002\u0002\u0002\\\u0224\u0003\u0002\u0002\u0002^\u022e", "\u0003\u0002\u0002\u0002`\u0239\u0003\u0002\u0002\u0002b\u0241\u0003", "\u0002\u0002\u0002d\u0245\u0003\u0002\u0002\u0002f\u024e\u0003\u0002", "\u0002\u0002h\u025e\u0003\u0002\u0002\u0002j\u0263\u0003\u0002\u0002", "\u0002l\u026c\u0003\u0002\u0002\u0002n\u0270\u0003\u0002\u0002\u0002", "p\u027a\u0003\u0002\u0002\u0002r\u027c\u0003\u0002\u0002\u0002t\u0281", "\u0003\u0002\u0002\u0002v\u0283\u0003\u0002\u0002\u0002x\u0285\u0003", "\u0002\u0002\u0002z\u0288\u0003\u0002\u0002\u0002|\u0297\u0003\u0002", "\u0002\u0002~\u029b\u0003\u0002\u0002\u0002\u0080\u02a6\u0003\u0002", "\u0002\u0002\u0082\u02b0\u0003\u0002\u0002\u0002\u0084\u02b2\u0003\u0002", "\u0002\u0002\u0086\u02b9\u0003\u0002\u0002\u0002\u0088\u02bd\u0003\u0002", "\u0002\u0002\u008a\u02bf\u0003\u0002\u0002\u0002\u008c\u02d0\u0003\u0002", "\u0002\u0002\u008e\u02db\u0003\u0002\u0002\u0002\u0090\u02f5\u0003\u0002", "\u0002\u0002\u0092\u0305\u0003\u0002\u0002\u0002\u0094\u0312\u0003\u0002", "\u0002\u0002\u0096\u031a\u0003\u0002\u0002\u0002\u0098\u031f\u0003\u0002", "\u0002\u0002\u009a\u0325\u0003\u0002\u0002\u0002\u009c\u0327\u0003\u0002", "\u0002\u0002\u009e\u0329\u0003\u0002\u0002\u0002\u00a0\u032b\u0003\u0002", "\u0002\u0002\u00a2\u032f\u0003\u0002\u0002\u0002\u00a4\u033b\u0003\u0002", "\u0002\u0002\u00a6\u033d\u0003\u0002\u0002\u0002\u00a8\u0346\u0003\u0002", "\u0002\u0002\u00aa\u0351\u0003\u0002\u0002\u0002\u00ac\u0357\u0003\u0002", "\u0002\u0002\u00ae\u035b\u0003\u0002\u0002\u0002\u00b0\u035d\u0003\u0002", "\u0002\u0002\u00b2\u036d\u0003\u0002\u0002\u0002\u00b4\u0372\u0003\u0002", "\u0002\u0002\u00b6\u0375\u0003\u0002\u0002\u0002\u00b8\u0379\u0003\u0002", "\u0002\u0002\u00ba\u037d\u0003\u0002\u0002\u0002\u00bc\u0381\u0003\u0002", "\u0002\u0002\u00be\u0395\u0003\u0002\u0002\u0002\u00c0\u039a\u0003\u0002", "\u0002\u0002\u00c2\u03ad\u0003\u0002\u0002\u0002\u00c4\u03b1\u0003\u0002", "\u0002\u0002\u00c6\u03b7\u0003\u0002\u0002\u0002\u00c8\u00c9\u0005\u0004", "\u0003\u0002\u00c9\u00cf\u0005\u00c6d\u0002\u00ca\u00cb\u0005\u0006", "\u0004\u0002\u00cb\u00cc\u0005\u00c6d\u0002\u00cc\u00ce\u0003\u0002", "\u0002\u0002\u00cd\u00ca\u0003\u0002\u0002\u0002\u00ce\u00d1\u0003\u0002", "\u0002\u0002\u00cf\u00cd\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002", "\u0002\u0002\u00d0\u00db\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002", "\u0002\u0002\u00d2\u00d6\u0005\u001a\u000e\u0002\u00d3\u00d6\u0005\u001c", "\u000f\u0002\u00d4\u00d6\u0005\f\u0007\u0002\u00d5\u00d2\u0003\u0002", "\u0002\u0002\u00d5\u00d3\u0003\u0002\u0002\u0002\u00d5\u00d4\u0003\u0002", "\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002\u0002\u00d7\u00d8\u0005\u00c6", "d\u0002\u00d8\u00da\u0003\u0002\u0002\u0002\u00d9\u00d5\u0003\u0002", "\u0002\u0002\u00da\u00dd\u0003\u0002\u0002\u0002\u00db\u00d9\u0003\u0002", "\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u00de\u0003\u0002", "\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002\u00de\u00df\u0007\u0002", "\u0002\u0003\u00df\u0003\u0003\u0002\u0002\u0002\u00e0\u00e1\u0007\u0010", "\u0002\u0002\u00e1\u00e2\u0007\u001d\u0002\u0002\u00e2\u0005\u0003\u0002", "\u0002\u0002\u00e3\u00ef\u0007\u0019\u0002\u0002\u00e4\u00f0\u0005\b", "\u0005\u0002\u00e5\u00eb\u0007\u001e\u0002\u0002\u00e6\u00e7\u0005\b", "\u0005\u0002\u00e7\u00e8\u0005\u00c6d\u0002\u00e8\u00ea\u0003\u0002", "\u0002\u0002\u00e9\u00e6\u0003\u0002\u0002\u0002\u00ea\u00ed\u0003\u0002", "\u0002\u0002\u00eb\u00e9\u0003\u0002\u0002\u0002\u00eb\u00ec\u0003\u0002", "\u0002\u0002\u00ec\u00ee\u0003\u0002\u0002\u0002\u00ed\u00eb\u0003\u0002", "\u0002\u0002\u00ee\u00f0\u0007\u001f\u0002\u0002\u00ef\u00e4\u0003\u0002", "\u0002\u0002\u00ef\u00e5\u0003\u0002\u0002\u0002\u00f0\u0007\u0003\u0002", "\u0002\u0002\u00f1\u00f3\t\u0002\u0002\u0002\u00f2\u00f1\u0003\u0002", "\u0002\u0002\u00f2\u00f3\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002", "\u0002\u0002\u00f4\u00f5\u0005\n\u0006\u0002\u00f5\t\u0003\u0002\u0002", "\u0002\u00f6\u00f7\u0005\u00b4[\u0002\u00f7\u000b\u0003\u0002\u0002", "\u0002\u00f8\u00fc\u0005\u000e\b\u0002\u00f9\u00fc\u0005\u0016\f\u0002", "\u00fa\u00fc\u0005 \u0011\u0002\u00fb\u00f8\u0003\u0002\u0002\u0002", "\u00fb\u00f9\u0003\u0002\u0002\u0002\u00fb\u00fa\u0003\u0002\u0002\u0002", "\u00fc\r\u0003\u0002\u0002\u0002\u00fd\u0109\u0007\u0012\u0002\u0002", "\u00fe\u010a\u0005\u0010\t\u0002\u00ff\u0105\u0007\u001e\u0002\u0002", "\u0100\u0101\u0005\u0010\t\u0002\u0101\u0102\u0005\u00c6d\u0002\u0102", "\u0104\u0003\u0002\u0002\u0002\u0103\u0100\u0003\u0002\u0002\u0002\u0104", "\u0107\u0003\u0002\u0002\u0002\u0105\u0103\u0003\u0002\u0002\u0002\u0105", "\u0106\u0003\u0002\u0002\u0002\u0106\u0108\u0003\u0002\u0002\u0002\u0107", "\u0105\u0003\u0002\u0002\u0002\u0108\u010a\u0007\u001f\u0002\u0002\u0109", "\u00fe\u0003\u0002\u0002\u0002\u0109\u00ff\u0003\u0002\u0002\u0002\u010a", "\u000f\u0003\u0002\u0002\u0002\u010b\u0111\u0005\u0012\n\u0002\u010c", "\u010e\u0005l7\u0002\u010d\u010c\u0003\u0002\u0002\u0002\u010d\u010e", "\u0003\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u0110", "\u0007$\u0002\u0002\u0110\u0112\u0005\u0014\u000b\u0002\u0111\u010d", "\u0003\u0002\u0002\u0002\u0111\u0112\u0003\u0002\u0002\u0002\u0112\u0011", "\u0003\u0002\u0002\u0002\u0113\u0118\u0007\u001d\u0002\u0002\u0114\u0115", "\u0007%\u0002\u0002\u0115\u0117\u0007\u001d\u0002\u0002\u0116\u0114", "\u0003\u0002\u0002\u0002\u0117\u011a\u0003\u0002\u0002\u0002\u0118\u0116", "\u0003\u0002\u0002\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u0013", "\u0003\u0002\u0002\u0002\u011a\u0118\u0003\u0002\u0002\u0002\u011b\u0120", "\u0005\u008eH\u0002\u011c\u011d\u0007%\u0002\u0002\u011d\u011f\u0005", "\u008eH\u0002\u011e\u011c\u0003\u0002\u0002\u0002\u011f\u0122\u0003", "\u0002\u0002\u0002\u0120\u011e\u0003\u0002\u0002\u0002\u0120\u0121\u0003", "\u0002\u0002\u0002\u0121\u0015\u0003\u0002\u0002\u0002\u0122\u0120\u0003", "\u0002\u0002\u0002\u0123\u012f\u0007\u0016\u0002\u0002\u0124\u0130\u0005", "\u0018\r\u0002\u0125\u012b\u0007\u001e\u0002\u0002\u0126\u0127\u0005", "\u0018\r\u0002\u0127\u0128\u0005\u00c6d\u0002\u0128\u012a\u0003\u0002", "\u0002\u0002\u0129\u0126\u0003\u0002\u0002\u0002\u012a\u012d\u0003\u0002", "\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002", "\u0002\u0002\u012c\u012e\u0003\u0002\u0002\u0002\u012d\u012b\u0003\u0002", "\u0002\u0002\u012e\u0130\u0007\u001f\u0002\u0002\u012f\u0124\u0003\u0002", "\u0002\u0002\u012f\u0125\u0003\u0002\u0002\u0002\u0130\u0017\u0003\u0002", "\u0002\u0002\u0131\u0133\u0007\u001d\u0002\u0002\u0132\u0134\u0007$", "\u0002\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u0133\u0134\u0003\u0002", "\u0002\u0002\u0134\u0135\u0003\u0002\u0002\u0002\u0135\u0136\u0005l", "7\u0002\u0136\u0019\u0003\u0002\u0002\u0002\u0137\u0138\u0007\u0005", "\u0002\u0002\u0138\u0139\u0007\u001d\u0002\u0002\u0139\u013b\u0005\u0086", "D\u0002\u013a\u013c\u0005$\u0013\u0002\u013b\u013a\u0003\u0002\u0002", "\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u001b\u0003\u0002\u0002", "\u0002\u013d\u013e\u0007\u0005\u0002\u0002\u013e\u013f\u0005\u001e\u0010", "\u0002\u013f\u0140\u0007\u001d\u0002\u0002\u0140\u0142\u0005\u0086D", "\u0002\u0141\u0143\u0005$\u0013\u0002\u0142\u0141\u0003\u0002\u0002", "\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143\u001d\u0003\u0002\u0002", "\u0002\u0144\u0145\u0005\u008aF\u0002\u0145\u001f\u0003\u0002\u0002", "\u0002\u0146\u0152\u0007\u001b\u0002\u0002\u0147\u0153\u0005\"\u0012", "\u0002\u0148\u014e\u0007\u001e\u0002\u0002\u0149\u014a\u0005\"\u0012", "\u0002\u014a\u014b\u0005\u00c6d\u0002\u014b\u014d\u0003\u0002\u0002", "\u0002\u014c\u0149\u0003\u0002\u0002\u0002\u014d\u0150\u0003\u0002\u0002", "\u0002\u014e\u014c\u0003\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002", "\u0002\u014f\u0151\u0003\u0002\u0002\u0002\u0150\u014e\u0003\u0002\u0002", "\u0002\u0151\u0153\u0007\u001f\u0002\u0002\u0152\u0147\u0003\u0002\u0002", "\u0002\u0152\u0148\u0003\u0002\u0002\u0002\u0153!\u0003\u0002\u0002", "\u0002\u0154\u015c\u0005\u0012\n\u0002\u0155\u0158\u0005l7\u0002\u0156", "\u0157\u0007$\u0002\u0002\u0157\u0159\u0005\u0014\u000b\u0002\u0158", "\u0156\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002\u0002\u0002\u0159", "\u015d\u0003\u0002\u0002\u0002\u015a\u015b\u0007$\u0002\u0002\u015b", "\u015d\u0005\u0014\u000b\u0002\u015c\u0155\u0003\u0002\u0002\u0002\u015c", "\u015a\u0003\u0002\u0002\u0002\u015d#\u0003\u0002\u0002\u0002\u015e", "\u0160\u0007 \u0002\u0002\u015f\u0161\u0005&\u0014\u0002\u0160\u015f", "\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u0162", "\u0003\u0002\u0002\u0002\u0162\u0163\u0007!\u0002\u0002\u0163%\u0003", "\u0002\u0002\u0002\u0164\u0166\u0005\u00c6d\u0002\u0165\u0164\u0003", "\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0167\u0003", "\u0002\u0002\u0002\u0167\u0168\u0005(\u0015\u0002\u0168\u0169\u0005", "\u00c6d\u0002\u0169\u016b\u0003\u0002\u0002\u0002\u016a\u0165\u0003", "\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002\u016c\u016a\u0003", "\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\'\u0003", "\u0002\u0002\u0002\u016e\u017e\u0005\f\u0007\u0002\u016f\u017e\u0005", ":\u001e\u0002\u0170\u017e\u0005*\u0016\u0002\u0171\u017e\u0005j6\u0002", "\u0172\u017e\u0005<\u001f\u0002\u0173\u017e\u0005> \u0002\u0174\u017e", "\u0005@!\u0002\u0175\u017e\u0005B\"\u0002\u0176\u017e\u0005D#\u0002", "\u0177\u017e\u0005$\u0013\u0002\u0178\u017e\u0005H%\u0002\u0179\u017e", "\u0005J&\u0002\u017a\u017e\u0005\\/\u0002\u017b\u017e\u0005d3\u0002", "\u017c\u017e\u0005F$\u0002\u017d\u016e\u0003\u0002\u0002\u0002\u017d", "\u016f\u0003\u0002\u0002\u0002\u017d\u0170\u0003\u0002\u0002\u0002\u017d", "\u0171\u0003\u0002\u0002\u0002\u017d\u0172\u0003\u0002\u0002\u0002\u017d", "\u0173\u0003\u0002\u0002\u0002\u017d\u0174\u0003\u0002\u0002\u0002\u017d", "\u0175\u0003\u0002\u0002\u0002\u017d\u0176\u0003\u0002\u0002\u0002\u017d", "\u0177\u0003\u0002\u0002\u0002\u017d\u0178\u0003\u0002\u0002\u0002\u017d", "\u0179\u0003\u0002\u0002\u0002\u017d\u017a\u0003\u0002\u0002\u0002\u017d", "\u017b\u0003\u0002\u0002\u0002\u017d\u017c\u0003\u0002\u0002\u0002\u017e", ")\u0003\u0002\u0002\u0002\u017f\u0185\u0005.\u0018\u0002\u0180\u0185", "\u00050\u0019\u0002\u0181\u0185\u00052\u001a\u0002\u0182\u0185\u0005", ",\u0017\u0002\u0183\u0185\u00056\u001c\u0002\u0184\u017f\u0003\u0002", "\u0002\u0002\u0184\u0180\u0003\u0002\u0002\u0002\u0184\u0181\u0003\u0002", "\u0002\u0002\u0184\u0182\u0003\u0002\u0002\u0002\u0184\u0183\u0003\u0002", "\u0002\u0002\u0185+\u0003\u0002\u0002\u0002\u0186\u0187\u0005\u008e", "H\u0002\u0187-\u0003\u0002\u0002\u0002\u0188\u0189\u0005\u008eH\u0002", "\u0189\u018a\u0007A\u0002\u0002\u018a\u018b\u0005\u008eH\u0002\u018b", "/\u0003\u0002\u0002\u0002\u018c\u018d\u0005\u008eH\u0002\u018d\u018e", "\t\u0003\u0002\u0002\u018e1\u0003\u0002\u0002\u0002\u018f\u0190\u0005", "\u0014\u000b\u0002\u0190\u0191\u00054\u001b\u0002\u0191\u0192\u0005", "\u0014\u000b\u0002\u01923\u0003\u0002\u0002\u0002\u0193\u0195\t\u0004", "\u0002\u0002\u0194\u0193\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002", "\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0197\u0007$", "\u0002\u0002\u01975\u0003\u0002\u0002\u0002\u0198\u0199\u0005\u0012", "\n\u0002\u0199\u019a\u0007+\u0002\u0002\u019a\u019b\u0005\u0014\u000b", "\u0002\u019b7\u0003\u0002\u0002\u0002\u019c\u019d\t\u0005\u0002\u0002", "\u019d9\u0003\u0002\u0002\u0002\u019e\u019f\u0007\u001d\u0002\u0002", "\u019f\u01a1\u0007\'\u0002\u0002\u01a0\u01a2\u0005(\u0015\u0002\u01a1", "\u01a0\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2", ";\u0003\u0002\u0002\u0002\u01a3\u01a5\u0007\u001a\u0002\u0002\u01a4", "\u01a6\u0005\u0014\u000b\u0002\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a5", "\u01a6\u0003\u0002\u0002\u0002\u01a6=\u0003\u0002\u0002\u0002\u01a7", "\u01a9\u0007\u0003\u0002\u0002\u01a8\u01aa\u0007\u001d\u0002\u0002\u01a9", "\u01a8\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa", "?\u0003\u0002\u0002\u0002\u01ab\u01ad\u0007\u0017\u0002\u0002\u01ac", "\u01ae\u0007\u001d\u0002\u0002\u01ad\u01ac\u0003\u0002\u0002\u0002\u01ad", "\u01ae\u0003\u0002\u0002\u0002\u01aeA\u0003\u0002\u0002\u0002\u01af", "\u01b0\u0007\u000f\u0002\u0002\u01b0\u01b1\u0007\u001d\u0002\u0002\u01b1", "C\u0003\u0002\u0002\u0002\u01b2\u01b3\u0007\u0013\u0002\u0002\u01b3", "E\u0003\u0002\u0002\u0002\u01b4\u01b5\u0007\t\u0002\u0002\u01b5\u01b6", "\u0005\u008eH\u0002\u01b6G\u0003\u0002\u0002\u0002\u01b7\u01c0\u0007", "\u0014\u0002\u0002\u01b8\u01c1\u0005\u008eH\u0002\u01b9\u01ba\u0005", "\u00c6d\u0002\u01ba\u01bb\u0005\u008eH\u0002\u01bb\u01c1\u0003\u0002", "\u0002\u0002\u01bc\u01bd\u0005*\u0016\u0002\u01bd\u01be\u0005\u00c6", "d\u0002\u01be\u01bf\u0005\u008eH\u0002\u01bf\u01c1\u0003\u0002\u0002", "\u0002\u01c0\u01b8\u0003\u0002\u0002\u0002\u01c0\u01b9\u0003\u0002\u0002", "\u0002\u01c0\u01bc\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002", "\u0002\u01c2\u01c8\u0005$\u0013\u0002\u01c3\u01c6\u0007\u000e\u0002", "\u0002\u01c4\u01c7\u0005H%\u0002\u01c5\u01c7\u0005$\u0013\u0002\u01c6", "\u01c4\u0003\u0002\u0002\u0002\u01c6\u01c5\u0003\u0002\u0002\u0002\u01c7", "\u01c9\u0003\u0002\u0002\u0002\u01c8\u01c3\u0003\u0002\u0002\u0002\u01c8", "\u01c9\u0003\u0002\u0002\u0002\u01c9I\u0003\u0002\u0002\u0002\u01ca", "\u01cd\u0005L\'\u0002\u01cb\u01cd\u0005R*\u0002\u01cc\u01ca\u0003\u0002", "\u0002\u0002\u01cc\u01cb\u0003\u0002\u0002\u0002\u01cdK\u0003\u0002", "\u0002\u0002\u01ce\u01d9\u0007\u0011\u0002\u0002\u01cf\u01d1\u0005\u008e", "H\u0002\u01d0\u01cf\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002", "\u0002\u0002\u01d1\u01da\u0003\u0002\u0002\u0002\u01d2\u01d4\u0005*", "\u0016\u0002\u01d3\u01d2\u0003\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002", "\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d7\u0005\u00c6", "d\u0002\u01d6\u01d8\u0005\u008eH\u0002\u01d7\u01d6\u0003\u0002\u0002", "\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01da\u0003\u0002\u0002", "\u0002\u01d9\u01d0\u0003\u0002\u0002\u0002\u01d9\u01d3\u0003\u0002\u0002", "\u0002\u01da\u01db\u0003\u0002\u0002\u0002\u01db\u01df\u0007 \u0002", "\u0002\u01dc\u01de\u0005N(\u0002\u01dd\u01dc\u0003\u0002\u0002\u0002", "\u01de\u01e1\u0003\u0002\u0002\u0002\u01df\u01dd\u0003\u0002\u0002\u0002", "\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e2\u0003\u0002\u0002\u0002", "\u01e1\u01df\u0003\u0002\u0002\u0002\u01e2\u01e3\u0007!\u0002\u0002", "\u01e3M\u0003\u0002\u0002\u0002\u01e4\u01e5\u0005P)\u0002\u01e5\u01e7", "\u0007\'\u0002\u0002\u01e6\u01e8\u0005&\u0014\u0002\u01e7\u01e6\u0003", "\u0002\u0002\u0002\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8O\u0003", "\u0002\u0002\u0002\u01e9\u01ea\u0007\b\u0002\u0002\u01ea\u01ed\u0005", "\u0014\u000b\u0002\u01eb\u01ed\u0007\u0004\u0002\u0002\u01ec\u01e9\u0003", "\u0002\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01edQ\u0003", "\u0002\u0002\u0002\u01ee\u01f7\u0007\u0011\u0002\u0002\u01ef\u01f8\u0005", "T+\u0002\u01f0\u01f1\u0005\u00c6d\u0002\u01f1\u01f2\u0005T+\u0002\u01f2", "\u01f8\u0003\u0002\u0002\u0002\u01f3\u01f4\u0005*\u0016\u0002\u01f4", "\u01f5\u0005\u00c6d\u0002\u01f5\u01f6\u0005T+\u0002\u01f6\u01f8\u0003", "\u0002\u0002\u0002\u01f7\u01ef\u0003\u0002\u0002\u0002\u01f7\u01f0\u0003", "\u0002\u0002\u0002\u01f7\u01f3\u0003\u0002\u0002\u0002\u01f8\u01f9\u0003", "\u0002\u0002\u0002\u01f9\u01fd\u0007 \u0002\u0002\u01fa\u01fc\u0005", "V,\u0002\u01fb\u01fa\u0003\u0002\u0002\u0002\u01fc\u01ff\u0003\u0002", "\u0002\u0002\u01fd\u01fb\u0003\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002", "\u0002\u0002\u01fe\u0200\u0003\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002", "\u0002\u0002\u0200\u0201\u0007!\u0002\u0002\u0201S\u0003\u0002\u0002", "\u0002\u0202\u0203\u0007\u001d\u0002\u0002\u0203\u0205\u0007+\u0002", "\u0002\u0204\u0202\u0003\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002", "\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206\u0207\u0005\u0090I", "\u0002\u0207\u0208\u0007(\u0002\u0002\u0208\u0209\u0007\u001e\u0002", "\u0002\u0209\u020a\u0007\u0016\u0002\u0002\u020a\u020b\u0007\u001f\u0002", "\u0002\u020bU\u0003\u0002\u0002\u0002\u020c\u020d\u0005X-\u0002\u020d", "\u020f\u0007\'\u0002\u0002\u020e\u0210\u0005&\u0014\u0002\u020f\u020e", "\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002\u0210W", "\u0003\u0002\u0002\u0002\u0211\u0212\u0007\b\u0002\u0002\u0212\u0215", "\u0005Z.\u0002\u0213\u0215\u0007\u0004\u0002\u0002\u0214\u0211\u0003", "\u0002\u0002\u0002\u0214\u0213\u0003\u0002\u0002\u0002\u0215Y\u0003", "\u0002\u0002\u0002\u0216\u0219\u0005l7\u0002\u0217\u0219\u0007\u001c", "\u0002\u0002\u0218\u0216\u0003\u0002\u0002\u0002\u0218\u0217\u0003\u0002", "\u0002\u0002\u0219\u0221\u0003\u0002\u0002\u0002\u021a\u021d\u0007%", "\u0002\u0002\u021b\u021e\u0005l7\u0002\u021c\u021e\u0007\u001c\u0002", "\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021d\u021c\u0003\u0002\u0002", "\u0002\u021e\u0220\u0003\u0002\u0002\u0002\u021f\u021a\u0003\u0002\u0002", "\u0002\u0220\u0223\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002\u0002", "\u0002\u0221\u0222\u0003\u0002\u0002\u0002\u0222[\u0003\u0002\u0002", "\u0002\u0223\u0221\u0003\u0002\u0002\u0002\u0224\u0225\u0007\u0007\u0002", "\u0002\u0225\u0229\u0007 \u0002\u0002\u0226\u0228\u0005^0\u0002\u0227", "\u0226\u0003\u0002\u0002\u0002\u0228\u022b\u0003\u0002\u0002\u0002\u0229", "\u0227\u0003\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a", "\u022c\u0003\u0002\u0002\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022c", "\u022d\u0007!\u0002\u0002\u022d]\u0003\u0002\u0002\u0002\u022e\u022f", "\u0005`1\u0002\u022f\u0231\u0007\'\u0002\u0002\u0230\u0232\u0005&\u0014", "\u0002\u0231\u0230\u0003\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002", "\u0002\u0232_\u0003\u0002\u0002\u0002\u0233\u0236\u0007\b\u0002\u0002", "\u0234\u0237\u0005.\u0018\u0002\u0235\u0237\u0005b2\u0002\u0236\u0234", "\u0003\u0002\u0002\u0002\u0236\u0235\u0003\u0002\u0002\u0002\u0237\u023a", "\u0003\u0002\u0002\u0002\u0238\u023a\u0007\u0004\u0002\u0002\u0239\u0233", "\u0003\u0002\u0002\u0002\u0239\u0238\u0003\u0002\u0002\u0002\u023aa", "\u0003\u0002\u0002\u0002\u023b\u023c\u0005\u0014\u000b\u0002\u023c\u023d", "\u0007$\u0002\u0002\u023d\u0242\u0003\u0002\u0002\u0002\u023e\u023f", "\u0005\u0012\n\u0002\u023f\u0240\u0007+\u0002\u0002\u0240\u0242\u0003", "\u0002\u0002\u0002\u0241\u023b\u0003\u0002\u0002\u0002\u0241\u023e\u0003", "\u0002\u0002\u0002\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0243\u0003", "\u0002\u0002\u0002\u0243\u0244\u0005\u008eH\u0002\u0244c\u0003\u0002", "\u0002\u0002\u0245\u0249\u0007\u0018\u0002\u0002\u0246\u024a\u0005\u008e", "H\u0002\u0247\u024a\u0005f4\u0002\u0248\u024a\u0005h5\u0002\u0249\u0246", "\u0003\u0002\u0002\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u0249\u0248", "\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002\u024a\u024b", "\u0003\u0002\u0002\u0002\u024b\u024c\u0005$\u0013\u0002\u024ce\u0003", "\u0002\u0002\u0002\u024d\u024f\u0005*\u0016\u0002\u024e\u024d\u0003", "\u0002\u0002\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0250\u0003", "\u0002\u0002\u0002\u0250\u0252\u0005\u00c6d\u0002\u0251\u0253\u0005", "\u008eH\u0002\u0252\u0251\u0003\u0002\u0002\u0002\u0252\u0253\u0003", "\u0002\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254\u0256\u0005", "\u00c6d\u0002\u0255\u0257\u0005*\u0016\u0002\u0256\u0255\u0003\u0002", "\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257g\u0003\u0002", "\u0002\u0002\u0258\u0259\u0005\u0014\u000b\u0002\u0259\u025a\u0007$", "\u0002\u0002\u025a\u025f\u0003\u0002\u0002\u0002\u025b\u025c\u0005\u0012", "\n\u0002\u025c\u025d\u0007+\u0002\u0002\u025d\u025f\u0003\u0002\u0002", "\u0002\u025e\u0258\u0003\u0002\u0002\u0002\u025e\u025b\u0003\u0002\u0002", "\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025f\u0260\u0003\u0002\u0002", "\u0002\u0260\u0261\u0007\u0015\u0002\u0002\u0261\u0262\u0005\u008eH", "\u0002\u0262i\u0003\u0002\u0002\u0002\u0263\u0264\u0007\n\u0002\u0002", "\u0264\u0265\u0005\u008eH\u0002\u0265k\u0003\u0002\u0002\u0002\u0266", "\u026d\u0005n8\u0002\u0267\u026d\u0005p9\u0002\u0268\u0269\u0007\u001e", "\u0002\u0002\u0269\u026a\u0005l7\u0002\u026a\u026b\u0007\u001f\u0002", "\u0002\u026b\u026d\u0003\u0002\u0002\u0002\u026c\u0266\u0003\u0002\u0002", "\u0002\u026c\u0267\u0003\u0002\u0002\u0002\u026c\u0268\u0003\u0002\u0002", "\u0002\u026dm\u0003\u0002\u0002\u0002\u026e\u0271\u0005\u00a0Q\u0002", "\u026f\u0271\u0007\u001d\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002", "\u0270\u026f\u0003\u0002\u0002\u0002\u0271o\u0003\u0002\u0002\u0002", "\u0272\u027b\u0005r:\u0002\u0273\u027b\u0005\u00b0Y\u0002\u0274\u027b", "\u0005x=\u0002\u0275\u027b\u0005\u0084C\u0002\u0276\u027b\u0005z>\u0002", "\u0277\u027b\u0005|?\u0002\u0278\u027b\u0005~@\u0002\u0279\u027b\u0005", "\u0080A\u0002\u027a\u0272\u0003\u0002\u0002\u0002\u027a\u0273\u0003", "\u0002\u0002\u0002\u027a\u0274\u0003\u0002\u0002\u0002\u027a\u0275\u0003", "\u0002\u0002\u0002\u027a\u0276\u0003\u0002\u0002\u0002\u027a\u0277\u0003", "\u0002\u0002\u0002\u027a\u0278\u0003\u0002\u0002\u0002\u027a\u0279\u0003", "\u0002\u0002\u0002\u027bq\u0003\u0002\u0002\u0002\u027c\u027d\u0007", "\"\u0002\u0002\u027d\u027e\u0005t;\u0002\u027e\u027f\u0007#\u0002\u0002", "\u027f\u0280\u0005v<\u0002\u0280s\u0003\u0002\u0002\u0002\u0281\u0282", "\u0005\u008eH\u0002\u0282u\u0003\u0002\u0002\u0002\u0283\u0284\u0005", "l7\u0002\u0284w\u0003\u0002\u0002\u0002\u0285\u0286\u0007?\u0002\u0002", "\u0286\u0287\u0005l7\u0002\u0287y\u0003\u0002\u0002\u0002\u0288\u0289", "\u0007\u0006\u0002\u0002\u0289\u0292\u0007 \u0002\u0002\u028a\u028d", "\u0005\u0082B\u0002\u028b\u028d\u0005n8\u0002\u028c\u028a\u0003\u0002", "\u0002\u0002\u028c\u028b\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002", "\u0002\u0002\u028e\u028f\u0005\u00c6d\u0002\u028f\u0291\u0003\u0002", "\u0002\u0002\u0290\u028c\u0003\u0002\u0002\u0002\u0291\u0294\u0003\u0002", "\u0002\u0002\u0292\u0290\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002", "\u0002\u0002\u0293\u0295\u0003\u0002\u0002\u0002\u0294\u0292\u0003\u0002", "\u0002\u0002\u0295\u0296\u0007!\u0002\u0002\u0296{\u0003\u0002\u0002", "\u0002\u0297\u0298\u0007\"\u0002\u0002\u0298\u0299\u0007#\u0002\u0002", "\u0299\u029a\u0005v<\u0002\u029a}\u0003\u0002\u0002\u0002\u029b\u029c", "\u0007\u000b\u0002\u0002\u029c\u029d\u0007\"\u0002\u0002\u029d\u029e", "\u0005l7\u0002\u029e\u029f\u0007#\u0002\u0002\u029f\u02a0\u0005v<\u0002", "\u02a0\u007f\u0003\u0002\u0002\u0002\u02a1\u02a7\u0007\r\u0002\u0002", "\u02a2\u02a3\u0007\r\u0002\u0002\u02a3\u02a7\u0007A\u0002\u0002\u02a4", "\u02a5\u0007A\u0002\u0002\u02a5\u02a7\u0007\r\u0002\u0002\u02a6\u02a1", "\u0003\u0002\u0002\u0002\u02a6\u02a2\u0003\u0002\u0002\u0002\u02a6\u02a4", "\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002\u0002\u02a8\u02a9", "\u0005v<\u0002\u02a9\u0081\u0003\u0002\u0002\u0002\u02aa\u02ab\u0007", "\u001d\u0002\u0002\u02ab\u02ac\u0005\u008aF\u0002\u02ac\u02ad\u0005", "\u0088E\u0002\u02ad\u02b1\u0003\u0002\u0002\u0002\u02ae\u02af\u0007", "\u001d\u0002\u0002\u02af\u02b1\u0005\u008aF\u0002\u02b0\u02aa\u0003", "\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b1\u0083\u0003", "\u0002\u0002\u0002\u02b2\u02b3\u0007\u0005\u0002\u0002\u02b3\u02b4\u0005", "\u0086D\u0002\u02b4\u0085\u0003\u0002\u0002\u0002\u02b5\u02b6\u0005", "\u008aF\u0002\u02b6\u02b7\u0005\u0088E\u0002\u02b7\u02ba\u0003\u0002", "\u0002\u0002\u02b8\u02ba\u0005\u008aF\u0002\u02b9\u02b5\u0003\u0002", "\u0002\u0002\u02b9\u02b8\u0003\u0002\u0002\u0002\u02ba\u0087\u0003\u0002", "\u0002\u0002\u02bb\u02be\u0005\u008aF\u0002\u02bc\u02be\u0005l7\u0002", "\u02bd\u02bb\u0003\u0002\u0002\u0002\u02bd\u02bc\u0003\u0002\u0002\u0002", "\u02be\u0089\u0003\u0002\u0002\u0002\u02bf\u02cb\u0007\u001e\u0002\u0002", "\u02c0\u02c5\u0005\u008cG\u0002\u02c1\u02c2\u0007%\u0002\u0002\u02c2", "\u02c4\u0005\u008cG\u0002\u02c3\u02c1\u0003\u0002\u0002\u0002\u02c4", "\u02c7\u0003\u0002\u0002\u0002\u02c5\u02c3\u0003\u0002\u0002\u0002\u02c5", "\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c9\u0003\u0002\u0002\u0002\u02c7", "\u02c5\u0003\u0002\u0002\u0002\u02c8\u02ca\u0007%\u0002\u0002\u02c9", "\u02c8\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca", "\u02cc\u0003\u0002\u0002\u0002\u02cb\u02c0\u0003\u0002\u0002\u0002\u02cb", "\u02cc\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd", "\u02ce\u0007\u001f\u0002\u0002\u02ce\u008b\u0003\u0002\u0002\u0002\u02cf", "\u02d1\u0005\u0012\n\u0002\u02d0\u02cf\u0003\u0002\u0002\u0002\u02d0", "\u02d1\u0003\u0002\u0002\u0002\u02d1\u02d3\u0003\u0002\u0002\u0002\u02d2", "\u02d4\u0007,\u0002\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d3", "\u02d4\u0003\u0002\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002\u02d5", "\u02d6\u0005l7\u0002\u02d6\u008d\u0003\u0002\u0002\u0002\u02d7\u02d8", "\bH\u0001\u0002\u02d8\u02dc\u0005\u0090I\u0002\u02d9\u02da\t\u0006\u0002", "\u0002\u02da\u02dc\u0005\u008eH\b\u02db\u02d7\u0003\u0002\u0002\u0002", "\u02db\u02d9\u0003\u0002\u0002\u0002\u02dc\u02ee\u0003\u0002\u0002\u0002", "\u02dd\u02de\f\u0007\u0002\u0002\u02de\u02df\t\u0007\u0002\u0002\u02df", "\u02ed\u0005\u008eH\b\u02e0\u02e1\f\u0006\u0002\u0002\u02e1\u02e2\t", "\b\u0002\u0002\u02e2\u02ed\u0005\u008eH\u0007\u02e3\u02e4\f\u0005\u0002", "\u0002\u02e4\u02e5\t\t\u0002\u0002\u02e5\u02ed\u0005\u008eH\u0006\u02e6", "\u02e7\f\u0004\u0002\u0002\u02e7\u02e8\u0007.\u0002\u0002\u02e8\u02ed", "\u0005\u008eH\u0005\u02e9\u02ea\f\u0003\u0002\u0002\u02ea\u02eb\u0007", "-\u0002\u0002\u02eb\u02ed\u0005\u008eH\u0004\u02ec\u02dd\u0003\u0002", "\u0002\u0002\u02ec\u02e0\u0003\u0002\u0002\u0002\u02ec\u02e3\u0003\u0002", "\u0002\u0002\u02ec\u02e6\u0003\u0002\u0002\u0002\u02ec\u02e9\u0003\u0002", "\u0002\u0002\u02ed\u02f0\u0003\u0002\u0002\u0002\u02ee\u02ec\u0003\u0002", "\u0002\u0002\u02ee\u02ef\u0003\u0002\u0002\u0002\u02ef\u008f\u0003\u0002", "\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002\u02f1\u02f2\bI\u0001", "\u0002\u02f2\u02f6\u0005\u0096L\u0002\u02f3\u02f6\u0005\u0092J\u0002", "\u02f4\u02f6\u0005\u00c2b\u0002\u02f5\u02f1\u0003\u0002\u0002\u0002", "\u02f5\u02f3\u0003\u0002\u0002\u0002\u02f5\u02f4\u0003\u0002\u0002\u0002", "\u02f6\u0302\u0003\u0002\u0002\u0002\u02f7\u02fe\f\u0003\u0002\u0002", "\u02f8\u02f9\u0007(\u0002\u0002\u02f9\u02ff\u0007\u001d\u0002\u0002", "\u02fa\u02ff\u0005\u00ba^\u0002\u02fb\u02ff\u0005\u00bc_\u0002\u02fc", "\u02ff\u0005\u00be`\u0002\u02fd\u02ff\u0005\u00c0a\u0002\u02fe\u02f8", "\u0003\u0002\u0002\u0002\u02fe\u02fa\u0003\u0002\u0002\u0002\u02fe\u02fb", "\u0003\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe\u02fd", "\u0003\u0002\u0002\u0002\u02ff\u0301\u0003\u0002\u0002\u0002\u0300\u02f7", "\u0003\u0002\u0002\u0002\u0301\u0304\u0003\u0002\u0002\u0002\u0302\u0300", "\u0003\u0002\u0002\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303\u0091", "\u0003\u0002\u0002\u0002\u0304\u0302\u0003\u0002\u0002\u0002\u0305\u0306", "\u0005\u0094K\u0002\u0306\u0307\u0007\u001e\u0002\u0002\u0307\u0309", "\u0005\u008eH\u0002\u0308\u030a\u0007%\u0002\u0002\u0309\u0308\u0003", "\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u030b\u0003", "\u0002\u0002\u0002\u030b\u030c\u0007\u001f\u0002\u0002\u030c\u0093\u0003", "\u0002\u0002\u0002\u030d\u0313\u0005p9\u0002\u030e\u030f\u0007\u001e", "\u0002\u0002\u030f\u0310\u0005\u0094K\u0002\u0310\u0311\u0007\u001f", "\u0002\u0002\u0311\u0313\u0003\u0002\u0002\u0002\u0312\u030d\u0003\u0002", "\u0002\u0002\u0312\u030e\u0003\u0002\u0002\u0002\u0313\u0095\u0003\u0002", "\u0002\u0002\u0314\u031b\u0005\u0098M\u0002\u0315\u031b\u0005\u009e", "P\u0002\u0316\u0317\u0007\u001e\u0002\u0002\u0317\u0318\u0005\u008e", "H\u0002\u0318\u0319\u0007\u001f\u0002\u0002\u0319\u031b\u0003\u0002", "\u0002\u0002\u031a\u0314\u0003\u0002\u0002\u0002\u031a\u0315\u0003\u0002", "\u0002\u0002\u031a\u0316\u0003\u0002\u0002\u0002\u031b\u0097\u0003\u0002", "\u0002\u0002\u031c\u0320\u0005\u009aN\u0002\u031d\u0320\u0005\u00a2", "R\u0002\u031e\u0320\u0005\u00b8]\u0002\u031f\u031c\u0003\u0002\u0002", "\u0002\u031f\u031d\u0003\u0002\u0002\u0002\u031f\u031e\u0003\u0002\u0002", "\u0002\u0320\u0099\u0003\u0002\u0002\u0002\u0321\u0326\u0007\u001c\u0002", "\u0002\u0322\u0326\u0005\u009cO\u0002\u0323\u0326\u0005\u00b4[\u0002", "\u0324\u0326\u0007F\u0002\u0002\u0325\u0321\u0003\u0002\u0002\u0002", "\u0325\u0322\u0003\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002", "\u0325\u0324\u0003\u0002\u0002\u0002\u0326\u009b\u0003\u0002\u0002\u0002", "\u0327\u0328\t\n\u0002\u0002\u0328\u009d\u0003\u0002\u0002\u0002\u0329", "\u032a\u0007\u001d\u0002\u0002\u032a\u009f\u0003\u0002\u0002\u0002\u032b", "\u032c\u0007\u001d\u0002\u0002\u032c\u032d\u0007(\u0002\u0002\u032d", "\u032e\u0007\u001d\u0002\u0002\u032e\u00a1\u0003\u0002\u0002\u0002\u032f", "\u0330\u0005\u00a4S\u0002\u0330\u0331\u0005\u00a6T\u0002\u0331\u00a3", "\u0003\u0002\u0002\u0002\u0332\u033c\u0005\u00b0Y\u0002\u0333\u033c", "\u0005r:\u0002\u0334\u0335\u0007\"\u0002\u0002\u0335\u0336\u0007,\u0002", "\u0002\u0336\u0337\u0007#\u0002\u0002\u0337\u033c\u0005v<\u0002\u0338", "\u033c\u0005|?\u0002\u0339\u033c\u0005~@\u0002\u033a\u033c\u0005n8\u0002", "\u033b\u0332\u0003\u0002\u0002\u0002\u033b\u0333\u0003\u0002\u0002\u0002", "\u033b\u0334\u0003\u0002\u0002\u0002\u033b\u0338\u0003\u0002\u0002\u0002", "\u033b\u0339\u0003\u0002\u0002\u0002\u033b\u033a\u0003\u0002\u0002\u0002", "\u033c\u00a5\u0003\u0002\u0002\u0002\u033d\u0342\u0007 \u0002\u0002", "\u033e\u0340\u0005\u00a8U\u0002\u033f\u0341\u0007%\u0002\u0002\u0340", "\u033f\u0003\u0002\u0002\u0002\u0340\u0341\u0003\u0002\u0002\u0002\u0341", "\u0343\u0003\u0002\u0002\u0002\u0342\u033e\u0003\u0002\u0002\u0002\u0342", "\u0343\u0003\u0002\u0002\u0002\u0343\u0344\u0003\u0002\u0002\u0002\u0344", "\u0345\u0007!\u0002\u0002\u0345\u00a7\u0003\u0002\u0002\u0002\u0346", "\u034b\u0005\u00aaV\u0002\u0347\u0348\u0007%\u0002\u0002\u0348\u034a", "\u0005\u00aaV\u0002\u0349\u0347\u0003\u0002\u0002\u0002\u034a\u034d", "\u0003\u0002\u0002\u0002\u034b\u0349\u0003\u0002\u0002\u0002\u034b\u034c", "\u0003\u0002\u0002\u0002\u034c\u00a9\u0003\u0002\u0002\u0002\u034d\u034b", "\u0003\u0002\u0002\u0002\u034e\u034f\u0005\u00acW\u0002\u034f\u0350", "\u0007\'\u0002\u0002\u0350\u0352\u0003\u0002\u0002\u0002\u0351\u034e", "\u0003\u0002\u0002\u0002\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u0353", "\u0003\u0002\u0002\u0002\u0353\u0354\u0005\u00aeX\u0002\u0354\u00ab", "\u0003\u0002\u0002\u0002\u0355\u0358\u0005\u008eH\u0002\u0356\u0358", "\u0005\u00a6T\u0002\u0357\u0355\u0003\u0002\u0002\u0002\u0357\u0356", "\u0003\u0002\u0002\u0002\u0358\u00ad\u0003\u0002\u0002\u0002\u0359\u035c", "\u0005\u008eH\u0002\u035a\u035c\u0005\u00a6T\u0002\u035b\u0359\u0003", "\u0002\u0002\u0002\u035b\u035a\u0003\u0002\u0002\u0002\u035c\u00af\u0003", "\u0002\u0002\u0002\u035d\u035e\u0007\f\u0002\u0002\u035e\u0364\u0007", " \u0002\u0002\u035f\u0360\u0005\u00b2Z\u0002\u0360\u0361\u0005\u00c6", "d\u0002\u0361\u0363\u0003\u0002\u0002\u0002\u0362\u035f\u0003\u0002", "\u0002\u0002\u0363\u0366\u0003\u0002\u0002\u0002\u0364\u0362\u0003\u0002", "\u0002\u0002\u0364\u0365\u0003\u0002\u0002\u0002\u0365\u0367\u0003\u0002", "\u0002\u0002\u0366\u0364\u0003\u0002\u0002\u0002\u0367\u0368\u0007!", "\u0002\u0002\u0368\u00b1\u0003\u0002\u0002\u0002\u0369\u036a\u0005\u0012", "\n\u0002\u036a\u036b\u0005l7\u0002\u036b\u036e\u0003\u0002\u0002\u0002", "\u036c\u036e\u0005\u00b6\\\u0002\u036d\u0369\u0003\u0002\u0002\u0002", "\u036d\u036c\u0003\u0002\u0002\u0002\u036e\u0370\u0003\u0002\u0002\u0002", "\u036f\u0371\u0005\u00b4[\u0002\u0370\u036f\u0003\u0002\u0002\u0002", "\u0370\u0371\u0003\u0002\u0002\u0002\u0371\u00b3\u0003\u0002\u0002\u0002", "\u0372\u0373\t\u000b\u0002\u0002\u0373\u00b5\u0003\u0002\u0002\u0002", "\u0374\u0376\u0007?\u0002\u0002\u0375\u0374\u0003\u0002\u0002\u0002", "\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002", "\u0377\u0378\u0005n8\u0002\u0378\u00b7\u0003\u0002\u0002\u0002\u0379", "\u037a\u0007\u0005\u0002\u0002\u037a\u037b\u0005\u0086D\u0002\u037b", "\u037c\u0005$\u0013\u0002\u037c\u00b9\u0003\u0002\u0002\u0002\u037d", "\u037e\u0007\"\u0002\u0002\u037e\u037f\u0005\u008eH\u0002\u037f\u0380", "\u0007#\u0002\u0002\u0380\u00bb\u0003\u0002\u0002\u0002\u0381\u0391", "\u0007\"\u0002\u0002\u0382\u0384\u0005\u008eH\u0002\u0383\u0382\u0003", "\u0002\u0002\u0002\u0383\u0384\u0003\u0002\u0002\u0002\u0384\u0385\u0003", "\u0002\u0002\u0002\u0385\u0387\u0007\'\u0002\u0002\u0386\u0388\u0005", "\u008eH\u0002\u0387\u0386\u0003\u0002\u0002\u0002\u0387\u0388\u0003", "\u0002\u0002\u0002\u0388\u0392\u0003\u0002\u0002\u0002\u0389\u038b\u0005", "\u008eH\u0002\u038a\u0389\u0003\u0002\u0002\u0002\u038a\u038b\u0003", "\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002\u038c\u038d\u0007", "\'\u0002\u0002\u038d\u038e\u0005\u008eH\u0002\u038e\u038f\u0007\'\u0002", "\u0002\u038f\u0390\u0005\u008eH\u0002\u0390\u0392\u0003\u0002\u0002", "\u0002\u0391\u0383\u0003\u0002\u0002\u0002\u0391\u038a\u0003\u0002\u0002", "\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u0394\u0007#\u0002", "\u0002\u0394\u00bd\u0003\u0002\u0002\u0002\u0395\u0396\u0007(\u0002", "\u0002\u0396\u0397\u0007\u001e\u0002\u0002\u0397\u0398\u0005l7\u0002", "\u0398\u0399\u0007\u001f\u0002\u0002\u0399\u00bf\u0003\u0002\u0002\u0002", "\u039a\u03a9\u0007\u001e\u0002\u0002\u039b\u03a2\u0005\u0014\u000b\u0002", "\u039c\u039f\u0005\u0094K\u0002\u039d\u039e\u0007%\u0002\u0002\u039e", "\u03a0\u0005\u0014\u000b\u0002\u039f\u039d\u0003\u0002\u0002\u0002\u039f", "\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a2\u0003\u0002\u0002\u0002\u03a1", "\u039b\u0003\u0002\u0002\u0002\u03a1\u039c\u0003\u0002\u0002\u0002\u03a2", "\u03a4\u0003\u0002\u0002\u0002\u03a3\u03a5\u0007,\u0002\u0002\u03a4", "\u03a3\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5", "\u03a7\u0003\u0002\u0002\u0002\u03a6\u03a8\u0007%\u0002\u0002\u03a7", "\u03a6\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002\u0002\u03a8", "\u03aa\u0003\u0002\u0002\u0002\u03a9\u03a1\u0003\u0002\u0002\u0002\u03a9", "\u03aa\u0003\u0002\u0002\u0002\u03aa\u03ab\u0003\u0002\u0002\u0002\u03ab", "\u03ac\u0007\u001f\u0002\u0002\u03ac\u00c1\u0003\u0002\u0002\u0002\u03ad", "\u03ae\u0005\u0094K\u0002\u03ae\u03af\u0007(\u0002\u0002\u03af\u03b0", "\u0007\u001d\u0002\u0002\u03b0\u00c3\u0003\u0002\u0002\u0002\u03b1\u03b2", "\u0005l7\u0002\u03b2\u00c5\u0003\u0002\u0002\u0002\u03b3\u03b8\u0007", "&\u0002\u0002\u03b4\u03b8\u0007\u0002\u0002\u0003\u03b5\u03b8\u0007", "Y\u0002\u0002\u03b6\u03b8\u0006d\b\u0002\u03b7\u03b3\u0003\u0002\u0002", "\u0002\u03b7\u03b4\u0003\u0002\u0002\u0002\u03b7\u03b5\u0003\u0002\u0002", "\u0002\u03b7\u03b6\u0003\u0002\u0002\u0002\u03b8\u00c7\u0003\u0002\u0002", "\u0002m\u00cf\u00d5\u00db\u00eb\u00ef\u00f2\u00fb\u0105\u0109\u010d", "\u0111\u0118\u0120\u012b\u012f\u0133\u013b\u0142\u014e\u0152\u0158\u015c", "\u0160\u0165\u016c\u017d\u0184\u0194\u01a1\u01a5\u01a9\u01ad\u01c0\u01c6", "\u01c8\u01cc\u01d0\u01d3\u01d7\u01d9\u01df\u01e7\u01ec\u01f7\u01fd\u0204", "\u020f\u0214\u0218\u021d\u0221\u0229\u0231\u0236\u0239\u0241\u0249\u024e", "\u0252\u0256\u025e\u026c\u0270\u027a\u028c\u0292\u02a6\u02b0\u02b9\u02bd", "\u02c5\u02c9\u02cb\u02d0\u02d3\u02db\u02ec\u02ee\u02f5\u02fe\u0302\u0309", "\u0312\u031a\u031f\u0325\u033b\u0340\u0342\u034b\u0351\u0357\u035b\u0364", "\u036d\u0370\u0375\u0383\u0387\u038a\u0391\u039f\u03a1\u03a4\u03a7\u03a9", "\u03b7"].join("");
const atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new _antlr.default.dfa.DFA(ds, index));
const sharedContextCache = new _antlr.default.PredictionContextCache();

class GoParser extends _GoParserBase.default {
  static grammarFileName = "GoParser.g4";
  static literalNames = [null, "'break'", "'default'", "'func'", "'interface'", "'select'", "'case'", "'defer'", "'go'", "'map'", "'struct'", "'chan'", "'else'", "'goto'", "'package'", "'switch'", "'const'", "'fallthrough'", "'if'", "'range'", "'type'", "'continue'", "'for'", "'import'", "'return'", "'var'", "'nil'", null, "'('", "')'", "'{'", "'}'", "'['", "']'", "'='", "','", "';'", "':'", "'.'", "'++'", "'--'", "':='", "'...'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'|'", "'/'", "'%'", "'<<'", "'>>'", "'&^'", "'!'", "'+'", "'-'", "'^'", "'*'", "'&'", "'<-'"];
  static symbolicNames = [null, "BREAK", "DEFAULT", "FUNC", "INTERFACE", "SELECT", "CASE", "DEFER", "GO", "MAP", "STRUCT", "CHAN", "ELSE", "GOTO", "PACKAGE", "SWITCH", "CONST", "FALLTHROUGH", "IF", "RANGE", "TYPE", "CONTINUE", "FOR", "IMPORT", "RETURN", "VAR", "NIL_LIT", "IDENTIFIER", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", "PLUS_PLUS", "MINUS_MINUS", "DECLARE_ASSIGN", "ELLIPSIS", "LOGICAL_OR", "LOGICAL_AND", "EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", "OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "BIT_CLEAR", "EXCLAMATION", "PLUS", "MINUS", "CARET", "STAR", "AMPERSAND", "RECEIVE", "DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", "HEX_LIT", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", "IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", "OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", "LITTLE_U_VALUE", "BIG_U_VALUE", "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", "WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", "WS_NLSEMI", "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI", "EOS", "OTHER"];
  static ruleNames = ["sourceFile", "packageClause", "importDecl", "importSpec", "importPath", "declaration", "constDecl", "constSpec", "identifierList", "expressionList", "typeDecl", "typeSpec", "functionDecl", "methodDecl", "receiver", "varDecl", "varSpec", "block", "statementList", "statement", "simpleStmt", "expressionStmt", "sendStmt", "incDecStmt", "assignment", "assign_op", "shortVarDecl", "emptyStmt", "labeledStmt", "returnStmt", "breakStmt", "continueStmt", "gotoStmt", "fallthroughStmt", "deferStmt", "ifStmt", "switchStmt", "exprSwitchStmt", "exprCaseClause", "exprSwitchCase", "typeSwitchStmt", "typeSwitchGuard", "typeCaseClause", "typeSwitchCase", "typeList", "selectStmt", "commClause", "commCase", "recvStmt", "forStmt", "forClause", "rangeClause", "goStmt", "type_", "typeName", "typeLit", "arrayType", "arrayLength", "elementType", "pointerType", "interfaceType", "sliceType", "mapType", "channelType", "methodSpec", "functionType", "signature", "result", "parameters", "parameterDecl", "expression", "primaryExpr", "conversion", "nonNamedType", "operand", "literal", "basicLit", "integer", "operandName", "qualifiedIdent", "compositeLit", "literalType", "literalValue", "elementList", "keyedElement", "key", "element", "structType", "fieldDecl", "string_", "embeddedField", "functionLit", "index", "slice_", "typeAssertion", "arguments", "methodExpr", "receiverType", "eos"];

  constructor(input) {
    super(input);
    this._interp = new _antlr.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = GoParser.ruleNames;
    this.literalNames = GoParser.literalNames;
    this.symbolicNames = GoParser.symbolicNames;
  }

  get atn() {
    return atn;
  }

  sempred(localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 70:
        return this.expression_sempred(localctx, predIndex);

      case 71:
        return this.primaryExpr_sempred(localctx, predIndex);

      case 98:
        return this.eos_sempred(localctx, predIndex);

      default:
        throw "No predicate with index:" + ruleIndex;
    }
  }

  expression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.precpred(this._ctx, 5);

      case 1:
        return this.precpred(this._ctx, 4);

      case 2:
        return this.precpred(this._ctx, 3);

      case 3:
        return this.precpred(this._ctx, 2);

      case 4:
        return this.precpred(this._ctx, 1);

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  primaryExpr_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 5:
        return this.precpred(this._ctx, 1);

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  eos_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 6:
        return this.closingBracket();

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  sourceFile() {
    let localctx = new SourceFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, GoParser.RULE_sourceFile);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 198;
      this.packageClause();
      this.state = 199;
      this.eos();
      this.state = 205;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === GoParser.IMPORT) {
        this.state = 200;
        this.importDecl();
        this.state = 201;
        this.eos();
        this.state = 207;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 217;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while ((_la & ~0x1f) == 0 && (1 << _la & (1 << GoParser.FUNC | 1 << GoParser.CONST | 1 << GoParser.TYPE | 1 << GoParser.VAR)) !== 0) {
        this.state = 211;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);

        switch (la_) {
          case 1:
            this.state = 208;
            this.functionDecl();
            break;

          case 2:
            this.state = 209;
            this.methodDecl();
            break;

          case 3:
            this.state = 210;
            this.declaration();
            break;
        }

        this.state = 213;
        this.eos();
        this.state = 219;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 220;
      this.match(GoParser.EOF);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  packageClause() {
    let localctx = new PackageClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, GoParser.RULE_packageClause);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 222;
      this.match(GoParser.PACKAGE);
      this.state = 223;
      localctx.packageName = this.match(GoParser.IDENTIFIER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  importDecl() {
    let localctx = new ImportDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, GoParser.RULE_importDecl);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 225;
      this.match(GoParser.IMPORT);
      this.state = 237;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.IDENTIFIER:
        case GoParser.DOT:
        case GoParser.RAW_STRING_LIT:
        case GoParser.INTERPRETED_STRING_LIT:
          this.state = 226;
          this.importSpec();
          break;

        case GoParser.L_PAREN:
          this.state = 227;
          this.match(GoParser.L_PAREN);
          this.state = 233;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === GoParser.IDENTIFIER || _la === GoParser.DOT || _la === GoParser.RAW_STRING_LIT || _la === GoParser.INTERPRETED_STRING_LIT) {
            this.state = 228;
            this.importSpec();
            this.state = 229;
            this.eos();
            this.state = 235;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 236;
          this.match(GoParser.R_PAREN);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  importSpec() {
    let localctx = new ImportSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, GoParser.RULE_importSpec);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 240;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === GoParser.IDENTIFIER || _la === GoParser.DOT) {
        this.state = 239;
        localctx.alias = this._input.LT(1);
        _la = this._input.LA(1);

        if (!(_la === GoParser.IDENTIFIER || _la === GoParser.DOT)) {
          localctx.alias = this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }
      }

      this.state = 242;
      this.importPath();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  importPath() {
    let localctx = new ImportPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, GoParser.RULE_importPath);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 244;
      this.string_();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  declaration() {
    let localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, GoParser.RULE_declaration);

    try {
      this.state = 249;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.CONST:
          this.enterOuterAlt(localctx, 1);
          this.state = 246;
          this.constDecl();
          break;

        case GoParser.TYPE:
          this.enterOuterAlt(localctx, 2);
          this.state = 247;
          this.typeDecl();
          break;

        case GoParser.VAR:
          this.enterOuterAlt(localctx, 3);
          this.state = 248;
          this.varDecl();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  constDecl() {
    let localctx = new ConstDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, GoParser.RULE_constDecl);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 251;
      this.match(GoParser.CONST);
      this.state = 263;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.IDENTIFIER:
          this.state = 252;
          this.constSpec();
          break;

        case GoParser.L_PAREN:
          this.state = 253;
          this.match(GoParser.L_PAREN);
          this.state = 259;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === GoParser.IDENTIFIER) {
            this.state = 254;
            this.constSpec();
            this.state = 255;
            this.eos();
            this.state = 261;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 262;
          this.match(GoParser.R_PAREN);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  constSpec() {
    let localctx = new ConstSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, GoParser.RULE_constSpec);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 265;
      this.identifierList();
      this.state = 271;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);

      if (la_ === 1) {
        this.state = 267;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << GoParser.FUNC | 1 << GoParser.INTERFACE | 1 << GoParser.MAP | 1 << GoParser.STRUCT | 1 << GoParser.CHAN | 1 << GoParser.IDENTIFIER | 1 << GoParser.L_PAREN)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << GoParser.L_BRACKET - 32 | 1 << GoParser.STAR - 32 | 1 << GoParser.RECEIVE - 32)) !== 0) {
          this.state = 266;
          this.type_();
        }

        this.state = 269;
        this.match(GoParser.ASSIGN);
        this.state = 270;
        this.expressionList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  identifierList() {
    let localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, GoParser.RULE_identifierList);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 273;
      this.match(GoParser.IDENTIFIER);
      this.state = 278;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 11, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 274;
          this.match(GoParser.COMMA);
          this.state = 275;
          this.match(GoParser.IDENTIFIER);
        }

        this.state = 280;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 11, this._ctx);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  expressionList() {
    let localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, GoParser.RULE_expressionList);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 281;
      this.expression(0);
      this.state = 286;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 12, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 282;
          this.match(GoParser.COMMA);
          this.state = 283;
          this.expression(0);
        }

        this.state = 288;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 12, this._ctx);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typeDecl() {
    let localctx = new TypeDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, GoParser.RULE_typeDecl);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 289;
      this.match(GoParser.TYPE);
      this.state = 301;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.IDENTIFIER:
          this.state = 290;
          this.typeSpec();
          break;

        case GoParser.L_PAREN:
          this.state = 291;
          this.match(GoParser.L_PAREN);
          this.state = 297;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === GoParser.IDENTIFIER) {
            this.state = 292;
            this.typeSpec();
            this.state = 293;
            this.eos();
            this.state = 299;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 300;
          this.match(GoParser.R_PAREN);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typeSpec() {
    let localctx = new TypeSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, GoParser.RULE_typeSpec);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 303;
      this.match(GoParser.IDENTIFIER);
      this.state = 305;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === GoParser.ASSIGN) {
        this.state = 304;
        this.match(GoParser.ASSIGN);
      }

      this.state = 307;
      this.type_();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  functionDecl() {
    let localctx = new FunctionDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, GoParser.RULE_functionDecl);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 309;
      this.match(GoParser.FUNC);
      this.state = 310;
      this.match(GoParser.IDENTIFIER);
      this.state = 311;
      this.signature();
      this.state = 313;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);

      if (la_ === 1) {
        this.state = 312;
        this.block();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  methodDecl() {
    let localctx = new MethodDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, GoParser.RULE_methodDecl);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 315;
      this.match(GoParser.FUNC);
      this.state = 316;
      this.receiver();
      this.state = 317;
      this.match(GoParser.IDENTIFIER);
      this.state = 318;
      this.signature();
      this.state = 320;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 17, this._ctx);

      if (la_ === 1) {
        this.state = 319;
        this.block();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  receiver() {
    let localctx = new ReceiverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, GoParser.RULE_receiver);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 322;
      this.parameters();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  varDecl() {
    let localctx = new VarDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, GoParser.RULE_varDecl);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 324;
      this.match(GoParser.VAR);
      this.state = 336;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.IDENTIFIER:
          this.state = 325;
          this.varSpec();
          break;

        case GoParser.L_PAREN:
          this.state = 326;
          this.match(GoParser.L_PAREN);
          this.state = 332;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === GoParser.IDENTIFIER) {
            this.state = 327;
            this.varSpec();
            this.state = 328;
            this.eos();
            this.state = 334;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 335;
          this.match(GoParser.R_PAREN);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  varSpec() {
    let localctx = new VarSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, GoParser.RULE_varSpec);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 338;
      this.identifierList();
      this.state = 346;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.FUNC:
        case GoParser.INTERFACE:
        case GoParser.MAP:
        case GoParser.STRUCT:
        case GoParser.CHAN:
        case GoParser.IDENTIFIER:
        case GoParser.L_PAREN:
        case GoParser.L_BRACKET:
        case GoParser.STAR:
        case GoParser.RECEIVE:
          this.state = 339;
          this.type_();
          this.state = 342;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);

          if (la_ === 1) {
            this.state = 340;
            this.match(GoParser.ASSIGN);
            this.state = 341;
            this.expressionList();
          }

          break;

        case GoParser.ASSIGN:
          this.state = 344;
          this.match(GoParser.ASSIGN);
          this.state = 345;
          this.expressionList();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  block() {
    let localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, GoParser.RULE_block);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 348;
      this.match(GoParser.L_CURLY);
      this.state = 350;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);

      if (la_ === 1) {
        this.state = 349;
        this.statementList();
      }

      this.state = 352;
      this.match(GoParser.R_CURLY);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  statementList() {
    let localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, GoParser.RULE_statementList);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 360;

      this._errHandler.sync(this);

      var _alt = 1;

      do {
        switch (_alt) {
          case 1:
            this.state = 355;

            this._errHandler.sync(this);

            var la_ = this._interp.adaptivePredict(this._input, 23, this._ctx);

            if (la_ === 1) {
              this.state = 354;
              this.eos();
            }

            this.state = 357;
            this.statement();
            this.state = 358;
            this.eos();
            break;

          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }

        this.state = 362;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 24, this._ctx);
      } while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  statement() {
    let localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, GoParser.RULE_statement);

    try {
      this.state = 379;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 25, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 364;
          this.declaration();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 365;
          this.labeledStmt();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 366;
          this.simpleStmt();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 367;
          this.goStmt();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 368;
          this.returnStmt();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 369;
          this.breakStmt();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 370;
          this.continueStmt();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 371;
          this.gotoStmt();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 372;
          this.fallthroughStmt();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 373;
          this.block();
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 374;
          this.ifStmt();
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 375;
          this.switchStmt();
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 376;
          this.selectStmt();
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 377;
          this.forStmt();
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 378;
          this.deferStmt();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  simpleStmt() {
    let localctx = new SimpleStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, GoParser.RULE_simpleStmt);

    try {
      this.state = 386;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 26, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 381;
          this.sendStmt();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 382;
          this.incDecStmt();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 383;
          this.assignment();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 384;
          this.expressionStmt();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 385;
          this.shortVarDecl();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  expressionStmt() {
    let localctx = new ExpressionStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, GoParser.RULE_expressionStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 388;
      this.expression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  sendStmt() {
    let localctx = new SendStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, GoParser.RULE_sendStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 390;
      localctx.channel = this.expression(0);
      this.state = 391;
      this.match(GoParser.RECEIVE);
      this.state = 392;
      this.expression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  incDecStmt() {
    let localctx = new IncDecStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, GoParser.RULE_incDecStmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 394;
      this.expression(0);
      this.state = 395;
      _la = this._input.LA(1);

      if (!(_la === GoParser.PLUS_PLUS || _la === GoParser.MINUS_MINUS)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  assignment() {
    let localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, GoParser.RULE_assignment);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 397;
      this.expressionList();
      this.state = 398;
      this.assign_op();
      this.state = 399;
      this.expressionList();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  assign_op() {
    let localctx = new Assign_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, GoParser.RULE_assign_op);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 402;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 51 & ~0x1f) == 0 && (1 << _la - 51 & (1 << GoParser.OR - 51 | 1 << GoParser.DIV - 51 | 1 << GoParser.MOD - 51 | 1 << GoParser.LSHIFT - 51 | 1 << GoParser.RSHIFT - 51 | 1 << GoParser.BIT_CLEAR - 51 | 1 << GoParser.PLUS - 51 | 1 << GoParser.MINUS - 51 | 1 << GoParser.CARET - 51 | 1 << GoParser.STAR - 51 | 1 << GoParser.AMPERSAND - 51)) !== 0) {
        this.state = 401;
        _la = this._input.LA(1);

        if (!((_la - 51 & ~0x1f) == 0 && (1 << _la - 51 & (1 << GoParser.OR - 51 | 1 << GoParser.DIV - 51 | 1 << GoParser.MOD - 51 | 1 << GoParser.LSHIFT - 51 | 1 << GoParser.RSHIFT - 51 | 1 << GoParser.BIT_CLEAR - 51 | 1 << GoParser.PLUS - 51 | 1 << GoParser.MINUS - 51 | 1 << GoParser.CARET - 51 | 1 << GoParser.STAR - 51 | 1 << GoParser.AMPERSAND - 51)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }
      }

      this.state = 404;
      this.match(GoParser.ASSIGN);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  shortVarDecl() {
    let localctx = new ShortVarDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, GoParser.RULE_shortVarDecl);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 406;
      this.identifierList();
      this.state = 407;
      this.match(GoParser.DECLARE_ASSIGN);
      this.state = 408;
      this.expressionList();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  emptyStmt() {
    let localctx = new EmptyStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, GoParser.RULE_emptyStmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 410;
      _la = this._input.LA(1);

      if (!(_la === GoParser.SEMI || _la === GoParser.EOS)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  labeledStmt() {
    let localctx = new LabeledStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, GoParser.RULE_labeledStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 412;
      this.match(GoParser.IDENTIFIER);
      this.state = 413;
      this.match(GoParser.COLON);
      this.state = 415;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);

      if (la_ === 1) {
        this.state = 414;
        this.statement();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  returnStmt() {
    let localctx = new ReturnStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, GoParser.RULE_returnStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 417;
      this.match(GoParser.RETURN);
      this.state = 419;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);

      if (la_ === 1) {
        this.state = 418;
        this.expressionList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  breakStmt() {
    let localctx = new BreakStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, GoParser.RULE_breakStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 421;
      this.match(GoParser.BREAK);
      this.state = 423;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 30, this._ctx);

      if (la_ === 1) {
        this.state = 422;
        this.match(GoParser.IDENTIFIER);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  continueStmt() {
    let localctx = new ContinueStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, GoParser.RULE_continueStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 425;
      this.match(GoParser.CONTINUE);
      this.state = 427;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 31, this._ctx);

      if (la_ === 1) {
        this.state = 426;
        this.match(GoParser.IDENTIFIER);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  gotoStmt() {
    let localctx = new GotoStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, GoParser.RULE_gotoStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 429;
      this.match(GoParser.GOTO);
      this.state = 430;
      this.match(GoParser.IDENTIFIER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  fallthroughStmt() {
    let localctx = new FallthroughStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, GoParser.RULE_fallthroughStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 432;
      this.match(GoParser.FALLTHROUGH);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  deferStmt() {
    let localctx = new DeferStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, GoParser.RULE_deferStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 434;
      this.match(GoParser.DEFER);
      this.state = 435;
      this.expression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  ifStmt() {
    let localctx = new IfStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, GoParser.RULE_ifStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 437;
      this.match(GoParser.IF);
      this.state = 446;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);

      switch (la_) {
        case 1:
          this.state = 438;
          this.expression(0);
          break;

        case 2:
          this.state = 439;
          this.eos();
          this.state = 440;
          this.expression(0);
          break;

        case 3:
          this.state = 442;
          this.simpleStmt();
          this.state = 443;
          this.eos();
          this.state = 444;
          this.expression(0);
          break;
      }

      this.state = 448;
      this.block();
      this.state = 454;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 34, this._ctx);

      if (la_ === 1) {
        this.state = 449;
        this.match(GoParser.ELSE);
        this.state = 452;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case GoParser.IF:
            this.state = 450;
            this.ifStmt();
            break;

          case GoParser.L_CURLY:
            this.state = 451;
            this.block();
            break;

          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  switchStmt() {
    let localctx = new SwitchStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, GoParser.RULE_switchStmt);

    try {
      this.state = 458;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 456;
          this.exprSwitchStmt();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 457;
          this.typeSwitchStmt();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  exprSwitchStmt() {
    let localctx = new ExprSwitchStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, GoParser.RULE_exprSwitchStmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 460;
      this.match(GoParser.SWITCH);
      this.state = 471;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);

      switch (la_) {
        case 1:
          this.state = 462;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la - 3 & ~0x1f) == 0 && (1 << _la - 3 & (1 << GoParser.FUNC - 3 | 1 << GoParser.INTERFACE - 3 | 1 << GoParser.MAP - 3 | 1 << GoParser.STRUCT - 3 | 1 << GoParser.CHAN - 3 | 1 << GoParser.NIL_LIT - 3 | 1 << GoParser.IDENTIFIER - 3 | 1 << GoParser.L_PAREN - 3 | 1 << GoParser.L_BRACKET - 3)) !== 0 || (_la - 57 & ~0x1f) == 0 && (1 << _la - 57 & (1 << GoParser.EXCLAMATION - 57 | 1 << GoParser.PLUS - 57 | 1 << GoParser.MINUS - 57 | 1 << GoParser.CARET - 57 | 1 << GoParser.STAR - 57 | 1 << GoParser.AMPERSAND - 57 | 1 << GoParser.RECEIVE - 57 | 1 << GoParser.DECIMAL_LIT - 57 | 1 << GoParser.BINARY_LIT - 57 | 1 << GoParser.OCTAL_LIT - 57 | 1 << GoParser.HEX_LIT - 57 | 1 << GoParser.FLOAT_LIT - 57 | 1 << GoParser.IMAGINARY_LIT - 57 | 1 << GoParser.RUNE_LIT - 57 | 1 << GoParser.RAW_STRING_LIT - 57 | 1 << GoParser.INTERPRETED_STRING_LIT - 57)) !== 0) {
            this.state = 461;
            this.expression(0);
          }

          break;

        case 2:
          this.state = 465;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 37, this._ctx);

          if (la_ === 1) {
            this.state = 464;
            this.simpleStmt();
          }

          this.state = 467;
          this.eos();
          this.state = 469;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la - 3 & ~0x1f) == 0 && (1 << _la - 3 & (1 << GoParser.FUNC - 3 | 1 << GoParser.INTERFACE - 3 | 1 << GoParser.MAP - 3 | 1 << GoParser.STRUCT - 3 | 1 << GoParser.CHAN - 3 | 1 << GoParser.NIL_LIT - 3 | 1 << GoParser.IDENTIFIER - 3 | 1 << GoParser.L_PAREN - 3 | 1 << GoParser.L_BRACKET - 3)) !== 0 || (_la - 57 & ~0x1f) == 0 && (1 << _la - 57 & (1 << GoParser.EXCLAMATION - 57 | 1 << GoParser.PLUS - 57 | 1 << GoParser.MINUS - 57 | 1 << GoParser.CARET - 57 | 1 << GoParser.STAR - 57 | 1 << GoParser.AMPERSAND - 57 | 1 << GoParser.RECEIVE - 57 | 1 << GoParser.DECIMAL_LIT - 57 | 1 << GoParser.BINARY_LIT - 57 | 1 << GoParser.OCTAL_LIT - 57 | 1 << GoParser.HEX_LIT - 57 | 1 << GoParser.FLOAT_LIT - 57 | 1 << GoParser.IMAGINARY_LIT - 57 | 1 << GoParser.RUNE_LIT - 57 | 1 << GoParser.RAW_STRING_LIT - 57 | 1 << GoParser.INTERPRETED_STRING_LIT - 57)) !== 0) {
            this.state = 468;
            this.expression(0);
          }

          break;
      }

      this.state = 473;
      this.match(GoParser.L_CURLY);
      this.state = 477;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === GoParser.DEFAULT || _la === GoParser.CASE) {
        this.state = 474;
        this.exprCaseClause();
        this.state = 479;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 480;
      this.match(GoParser.R_CURLY);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  exprCaseClause() {
    let localctx = new ExprCaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, GoParser.RULE_exprCaseClause);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 482;
      this.exprSwitchCase();
      this.state = 483;
      this.match(GoParser.COLON);
      this.state = 485;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 41, this._ctx);

      if (la_ === 1) {
        this.state = 484;
        this.statementList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  exprSwitchCase() {
    let localctx = new ExprSwitchCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, GoParser.RULE_exprSwitchCase);

    try {
      this.state = 490;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.CASE:
          this.enterOuterAlt(localctx, 1);
          this.state = 487;
          this.match(GoParser.CASE);
          this.state = 488;
          this.expressionList();
          break;

        case GoParser.DEFAULT:
          this.enterOuterAlt(localctx, 2);
          this.state = 489;
          this.match(GoParser.DEFAULT);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typeSwitchStmt() {
    let localctx = new TypeSwitchStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, GoParser.RULE_typeSwitchStmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 492;
      this.match(GoParser.SWITCH);
      this.state = 501;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 43, this._ctx);

      switch (la_) {
        case 1:
          this.state = 493;
          this.typeSwitchGuard();
          break;

        case 2:
          this.state = 494;
          this.eos();
          this.state = 495;
          this.typeSwitchGuard();
          break;

        case 3:
          this.state = 497;
          this.simpleStmt();
          this.state = 498;
          this.eos();
          this.state = 499;
          this.typeSwitchGuard();
          break;
      }

      this.state = 503;
      this.match(GoParser.L_CURLY);
      this.state = 507;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === GoParser.DEFAULT || _la === GoParser.CASE) {
        this.state = 504;
        this.typeCaseClause();
        this.state = 509;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 510;
      this.match(GoParser.R_CURLY);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typeSwitchGuard() {
    let localctx = new TypeSwitchGuardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, GoParser.RULE_typeSwitchGuard);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 514;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);

      if (la_ === 1) {
        this.state = 512;
        this.match(GoParser.IDENTIFIER);
        this.state = 513;
        this.match(GoParser.DECLARE_ASSIGN);
      }

      this.state = 516;
      this.primaryExpr(0);
      this.state = 517;
      this.match(GoParser.DOT);
      this.state = 518;
      this.match(GoParser.L_PAREN);
      this.state = 519;
      this.match(GoParser.TYPE);
      this.state = 520;
      this.match(GoParser.R_PAREN);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typeCaseClause() {
    let localctx = new TypeCaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, GoParser.RULE_typeCaseClause);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 522;
      this.typeSwitchCase();
      this.state = 523;
      this.match(GoParser.COLON);
      this.state = 525;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 46, this._ctx);

      if (la_ === 1) {
        this.state = 524;
        this.statementList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typeSwitchCase() {
    let localctx = new TypeSwitchCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, GoParser.RULE_typeSwitchCase);

    try {
      this.state = 530;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.CASE:
          this.enterOuterAlt(localctx, 1);
          this.state = 527;
          this.match(GoParser.CASE);
          this.state = 528;
          this.typeList();
          break;

        case GoParser.DEFAULT:
          this.enterOuterAlt(localctx, 2);
          this.state = 529;
          this.match(GoParser.DEFAULT);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typeList() {
    let localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, GoParser.RULE_typeList);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 534;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.FUNC:
        case GoParser.INTERFACE:
        case GoParser.MAP:
        case GoParser.STRUCT:
        case GoParser.CHAN:
        case GoParser.IDENTIFIER:
        case GoParser.L_PAREN:
        case GoParser.L_BRACKET:
        case GoParser.STAR:
        case GoParser.RECEIVE:
          this.state = 532;
          this.type_();
          break;

        case GoParser.NIL_LIT:
          this.state = 533;
          this.match(GoParser.NIL_LIT);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }

      this.state = 543;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === GoParser.COMMA) {
        this.state = 536;
        this.match(GoParser.COMMA);
        this.state = 539;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case GoParser.FUNC:
          case GoParser.INTERFACE:
          case GoParser.MAP:
          case GoParser.STRUCT:
          case GoParser.CHAN:
          case GoParser.IDENTIFIER:
          case GoParser.L_PAREN:
          case GoParser.L_BRACKET:
          case GoParser.STAR:
          case GoParser.RECEIVE:
            this.state = 537;
            this.type_();
            break;

          case GoParser.NIL_LIT:
            this.state = 538;
            this.match(GoParser.NIL_LIT);
            break;

          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }

        this.state = 545;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  selectStmt() {
    let localctx = new SelectStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, GoParser.RULE_selectStmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 546;
      this.match(GoParser.SELECT);
      this.state = 547;
      this.match(GoParser.L_CURLY);
      this.state = 551;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === GoParser.DEFAULT || _la === GoParser.CASE) {
        this.state = 548;
        this.commClause();
        this.state = 553;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 554;
      this.match(GoParser.R_CURLY);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  commClause() {
    let localctx = new CommClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, GoParser.RULE_commClause);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 556;
      this.commCase();
      this.state = 557;
      this.match(GoParser.COLON);
      this.state = 559;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 52, this._ctx);

      if (la_ === 1) {
        this.state = 558;
        this.statementList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  commCase() {
    let localctx = new CommCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, GoParser.RULE_commCase);

    try {
      this.state = 567;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.CASE:
          this.enterOuterAlt(localctx, 1);
          this.state = 561;
          this.match(GoParser.CASE);
          this.state = 564;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 53, this._ctx);

          switch (la_) {
            case 1:
              this.state = 562;
              this.sendStmt();
              break;

            case 2:
              this.state = 563;
              this.recvStmt();
              break;
          }

          break;

        case GoParser.DEFAULT:
          this.enterOuterAlt(localctx, 2);
          this.state = 566;
          this.match(GoParser.DEFAULT);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  recvStmt() {
    let localctx = new RecvStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, GoParser.RULE_recvStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 575;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 55, this._ctx);

      if (la_ === 1) {
        this.state = 569;
        this.expressionList();
        this.state = 570;
        this.match(GoParser.ASSIGN);
      } else if (la_ === 2) {
        this.state = 572;
        this.identifierList();
        this.state = 573;
        this.match(GoParser.DECLARE_ASSIGN);
      }

      this.state = 577;
      localctx.recvExpr = this.expression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  forStmt() {
    let localctx = new ForStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, GoParser.RULE_forStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 579;
      this.match(GoParser.FOR);
      this.state = 583;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);

      if (la_ === 1) {
        this.state = 580;
        this.expression(0);
      } else if (la_ === 2) {
        this.state = 581;
        this.forClause();
      } else if (la_ === 3) {
        this.state = 582;
        this.rangeClause();
      }

      this.state = 585;
      this.block();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  forClause() {
    let localctx = new ForClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, GoParser.RULE_forClause);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 588;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 57, this._ctx);

      if (la_ === 1) {
        this.state = 587;
        localctx.initStmt = this.simpleStmt();
      }

      this.state = 590;
      this.eos();
      this.state = 592;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 58, this._ctx);

      if (la_ === 1) {
        this.state = 591;
        this.expression(0);
      }

      this.state = 594;
      this.eos();
      this.state = 596;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 3 & ~0x1f) == 0 && (1 << _la - 3 & (1 << GoParser.FUNC - 3 | 1 << GoParser.INTERFACE - 3 | 1 << GoParser.MAP - 3 | 1 << GoParser.STRUCT - 3 | 1 << GoParser.CHAN - 3 | 1 << GoParser.NIL_LIT - 3 | 1 << GoParser.IDENTIFIER - 3 | 1 << GoParser.L_PAREN - 3 | 1 << GoParser.L_BRACKET - 3)) !== 0 || (_la - 57 & ~0x1f) == 0 && (1 << _la - 57 & (1 << GoParser.EXCLAMATION - 57 | 1 << GoParser.PLUS - 57 | 1 << GoParser.MINUS - 57 | 1 << GoParser.CARET - 57 | 1 << GoParser.STAR - 57 | 1 << GoParser.AMPERSAND - 57 | 1 << GoParser.RECEIVE - 57 | 1 << GoParser.DECIMAL_LIT - 57 | 1 << GoParser.BINARY_LIT - 57 | 1 << GoParser.OCTAL_LIT - 57 | 1 << GoParser.HEX_LIT - 57 | 1 << GoParser.FLOAT_LIT - 57 | 1 << GoParser.IMAGINARY_LIT - 57 | 1 << GoParser.RUNE_LIT - 57 | 1 << GoParser.RAW_STRING_LIT - 57 | 1 << GoParser.INTERPRETED_STRING_LIT - 57)) !== 0) {
        this.state = 595;
        localctx.postStmt = this.simpleStmt();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  rangeClause() {
    let localctx = new RangeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, GoParser.RULE_rangeClause);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 604;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 60, this._ctx);

      if (la_ === 1) {
        this.state = 598;
        this.expressionList();
        this.state = 599;
        this.match(GoParser.ASSIGN);
      } else if (la_ === 2) {
        this.state = 601;
        this.identifierList();
        this.state = 602;
        this.match(GoParser.DECLARE_ASSIGN);
      }

      this.state = 606;
      this.match(GoParser.RANGE);
      this.state = 607;
      this.expression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  goStmt() {
    let localctx = new GoStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, GoParser.RULE_goStmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 609;
      this.match(GoParser.GO);
      this.state = 610;
      this.expression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  type_() {
    let localctx = new Type_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 106, GoParser.RULE_type_);

    try {
      this.state = 618;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 612;
          this.typeName();
          break;

        case GoParser.FUNC:
        case GoParser.INTERFACE:
        case GoParser.MAP:
        case GoParser.STRUCT:
        case GoParser.CHAN:
        case GoParser.L_BRACKET:
        case GoParser.STAR:
        case GoParser.RECEIVE:
          this.enterOuterAlt(localctx, 2);
          this.state = 613;
          this.typeLit();
          break;

        case GoParser.L_PAREN:
          this.enterOuterAlt(localctx, 3);
          this.state = 614;
          this.match(GoParser.L_PAREN);
          this.state = 615;
          this.type_();
          this.state = 616;
          this.match(GoParser.R_PAREN);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typeName() {
    let localctx = new TypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, GoParser.RULE_typeName);

    try {
      this.state = 622;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 620;
          this.qualifiedIdent();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 621;
          this.match(GoParser.IDENTIFIER);
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typeLit() {
    let localctx = new TypeLitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, GoParser.RULE_typeLit);

    try {
      this.state = 632;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 624;
          this.arrayType();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 625;
          this.structType();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 626;
          this.pointerType();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 627;
          this.functionType();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 628;
          this.interfaceType();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 629;
          this.sliceType();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 630;
          this.mapType();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 631;
          this.channelType();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  arrayType() {
    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, GoParser.RULE_arrayType);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 634;
      this.match(GoParser.L_BRACKET);
      this.state = 635;
      this.arrayLength();
      this.state = 636;
      this.match(GoParser.R_BRACKET);
      this.state = 637;
      this.elementType();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  arrayLength() {
    let localctx = new ArrayLengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, GoParser.RULE_arrayLength);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 639;
      this.expression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  elementType() {
    let localctx = new ElementTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, GoParser.RULE_elementType);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 641;
      this.type_();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  pointerType() {
    let localctx = new PointerTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, GoParser.RULE_pointerType);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 643;
      this.match(GoParser.STAR);
      this.state = 644;
      this.type_();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  interfaceType() {
    let localctx = new InterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, GoParser.RULE_interfaceType);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 646;
      this.match(GoParser.INTERFACE);
      this.state = 647;
      this.match(GoParser.L_CURLY);
      this.state = 656;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === GoParser.IDENTIFIER) {
        this.state = 650;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 64, this._ctx);

        switch (la_) {
          case 1:
            this.state = 648;
            this.methodSpec();
            break;

          case 2:
            this.state = 649;
            this.typeName();
            break;
        }

        this.state = 652;
        this.eos();
        this.state = 658;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 659;
      this.match(GoParser.R_CURLY);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  sliceType() {
    let localctx = new SliceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, GoParser.RULE_sliceType);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 661;
      this.match(GoParser.L_BRACKET);
      this.state = 662;
      this.match(GoParser.R_BRACKET);
      this.state = 663;
      this.elementType();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  mapType() {
    let localctx = new MapTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, GoParser.RULE_mapType);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 665;
      this.match(GoParser.MAP);
      this.state = 666;
      this.match(GoParser.L_BRACKET);
      this.state = 667;
      this.type_();
      this.state = 668;
      this.match(GoParser.R_BRACKET);
      this.state = 669;
      this.elementType();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  channelType() {
    let localctx = new ChannelTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, GoParser.RULE_channelType);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 676;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 66, this._ctx);

      switch (la_) {
        case 1:
          this.state = 671;
          this.match(GoParser.CHAN);
          break;

        case 2:
          this.state = 672;
          this.match(GoParser.CHAN);
          this.state = 673;
          this.match(GoParser.RECEIVE);
          break;

        case 3:
          this.state = 674;
          this.match(GoParser.RECEIVE);
          this.state = 675;
          this.match(GoParser.CHAN);
          break;
      }

      this.state = 678;
      this.elementType();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  methodSpec() {
    let localctx = new MethodSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, GoParser.RULE_methodSpec);

    try {
      this.state = 686;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 680;
          this.match(GoParser.IDENTIFIER);
          this.state = 681;
          this.parameters();
          this.state = 682;
          this.result();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 684;
          this.match(GoParser.IDENTIFIER);
          this.state = 685;
          this.parameters();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  functionType() {
    let localctx = new FunctionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, GoParser.RULE_functionType);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 688;
      this.match(GoParser.FUNC);
      this.state = 689;
      this.signature();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  signature() {
    let localctx = new SignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, GoParser.RULE_signature);

    try {
      this.state = 695;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 691;
          this.parameters();
          this.state = 692;
          this.result();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 694;
          this.parameters();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  result() {
    let localctx = new ResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, GoParser.RULE_result);

    try {
      this.state = 699;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 69, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 697;
          this.parameters();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 698;
          this.type_();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  parameters() {
    let localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, GoParser.RULE_parameters);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 701;
      this.match(GoParser.L_PAREN);
      this.state = 713;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << GoParser.FUNC | 1 << GoParser.INTERFACE | 1 << GoParser.MAP | 1 << GoParser.STRUCT | 1 << GoParser.CHAN | 1 << GoParser.IDENTIFIER | 1 << GoParser.L_PAREN)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << GoParser.L_BRACKET - 32 | 1 << GoParser.ELLIPSIS - 32 | 1 << GoParser.STAR - 32 | 1 << GoParser.RECEIVE - 32)) !== 0) {
        this.state = 702;
        this.parameterDecl();
        this.state = 707;

        this._errHandler.sync(this);

        var _alt = this._interp.adaptivePredict(this._input, 70, this._ctx);

        while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 703;
            this.match(GoParser.COMMA);
            this.state = 704;
            this.parameterDecl();
          }

          this.state = 709;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 70, this._ctx);
        }

        this.state = 711;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === GoParser.COMMA) {
          this.state = 710;
          this.match(GoParser.COMMA);
        }
      }

      this.state = 715;
      this.match(GoParser.R_PAREN);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  parameterDecl() {
    let localctx = new ParameterDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, GoParser.RULE_parameterDecl);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 718;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);

      if (la_ === 1) {
        this.state = 717;
        this.identifierList();
      }

      this.state = 721;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === GoParser.ELLIPSIS) {
        this.state = 720;
        this.match(GoParser.ELLIPSIS);
      }

      this.state = 723;
      this.type_();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  expression(_p) {
    if (_p === undefined) {
      _p = 0;
    }

    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new ExpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 140;
    this.enterRecursionRule(localctx, 140, GoParser.RULE_expression, _p);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 729;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 75, this._ctx);

      switch (la_) {
        case 1:
          this.state = 726;
          this.primaryExpr(0);
          break;

        case 2:
          this.state = 727;
          localctx.unary_op = this._input.LT(1);
          _la = this._input.LA(1);

          if (!((_la - 57 & ~0x1f) == 0 && (1 << _la - 57 & (1 << GoParser.EXCLAMATION - 57 | 1 << GoParser.PLUS - 57 | 1 << GoParser.MINUS - 57 | 1 << GoParser.CARET - 57 | 1 << GoParser.STAR - 57 | 1 << GoParser.AMPERSAND - 57 | 1 << GoParser.RECEIVE - 57)) !== 0)) {
            localctx.unary_op = this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);

            this.consume();
          }

          this.state = 728;
          this.expression(6);
          break;
      }

      this._ctx.stop = this._input.LT(-1);
      this.state = 748;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 77, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }

          _prevctx = localctx;
          this.state = 746;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 76, this._ctx);

          switch (la_) {
            case 1:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
              this.state = 731;

              if (!this.precpred(this._ctx, 5)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
              }

              this.state = 732;
              localctx.mul_op = this._input.LT(1);
              _la = this._input.LA(1);

              if (!((_la - 52 & ~0x1f) == 0 && (1 << _la - 52 & (1 << GoParser.DIV - 52 | 1 << GoParser.MOD - 52 | 1 << GoParser.LSHIFT - 52 | 1 << GoParser.RSHIFT - 52 | 1 << GoParser.BIT_CLEAR - 52 | 1 << GoParser.STAR - 52 | 1 << GoParser.AMPERSAND - 52)) !== 0)) {
                localctx.mul_op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 733;
              this.expression(6);
              break;

            case 2:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
              this.state = 734;

              if (!this.precpred(this._ctx, 4)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
              }

              this.state = 735;
              localctx.add_op = this._input.LT(1);
              _la = this._input.LA(1);

              if (!((_la - 51 & ~0x1f) == 0 && (1 << _la - 51 & (1 << GoParser.OR - 51 | 1 << GoParser.PLUS - 51 | 1 << GoParser.MINUS - 51 | 1 << GoParser.CARET - 51)) !== 0)) {
                localctx.add_op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 736;
              this.expression(5);
              break;

            case 3:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
              this.state = 737;

              if (!this.precpred(this._ctx, 3)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
              }

              this.state = 738;
              localctx.rel_op = this._input.LT(1);
              _la = this._input.LA(1);

              if (!((_la - 45 & ~0x1f) == 0 && (1 << _la - 45 & (1 << GoParser.EQUALS - 45 | 1 << GoParser.NOT_EQUALS - 45 | 1 << GoParser.LESS - 45 | 1 << GoParser.LESS_OR_EQUALS - 45 | 1 << GoParser.GREATER - 45 | 1 << GoParser.GREATER_OR_EQUALS - 45)) !== 0)) {
                localctx.rel_op = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 739;
              this.expression(4);
              break;

            case 4:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
              this.state = 740;

              if (!this.precpred(this._ctx, 2)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
              }

              this.state = 741;
              this.match(GoParser.LOGICAL_AND);
              this.state = 742;
              this.expression(3);
              break;

            case 5:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
              this.state = 743;

              if (!this.precpred(this._ctx, 1)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
              }

              this.state = 744;
              this.match(GoParser.LOGICAL_OR);
              this.state = 745;
              this.expression(2);
              break;
          }
        }

        this.state = 750;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 77, this._ctx);
      }
    } catch (error) {
      if (error instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = error;

        this._errHandler.reportError(this, error);

        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }

    return localctx;
  }

  primaryExpr(_p) {
    if (_p === undefined) {
      _p = 0;
    }

    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new PrimaryExprContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 142;
    this.enterRecursionRule(localctx, 142, GoParser.RULE_primaryExpr, _p);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 755;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 78, this._ctx);

      switch (la_) {
        case 1:
          this.state = 752;
          this.operand();
          break;

        case 2:
          this.state = 753;
          this.conversion();
          break;

        case 3:
          this.state = 754;
          this.methodExpr();
          break;
      }

      this._ctx.stop = this._input.LT(-1);
      this.state = 768;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 80, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }

          _prevctx = localctx;
          localctx = new PrimaryExprContext(this, _parentctx, _parentState);
          this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_primaryExpr);
          this.state = 757;

          if (!this.precpred(this._ctx, 1)) {
            throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
          }

          this.state = 764;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 79, this._ctx);

          switch (la_) {
            case 1:
              this.state = 758;
              this.match(GoParser.DOT);
              this.state = 759;
              this.match(GoParser.IDENTIFIER);
              break;

            case 2:
              this.state = 760;
              this.index();
              break;

            case 3:
              this.state = 761;
              this.slice_();
              break;

            case 4:
              this.state = 762;
              this.typeAssertion();
              break;

            case 5:
              this.state = 763;
              this.arguments();
              break;
          }
        }

        this.state = 770;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 80, this._ctx);
      }
    } catch (error) {
      if (error instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = error;

        this._errHandler.reportError(this, error);

        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }

    return localctx;
  }

  conversion() {
    let localctx = new ConversionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, GoParser.RULE_conversion);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 771;
      this.nonNamedType();
      this.state = 772;
      this.match(GoParser.L_PAREN);
      this.state = 773;
      this.expression(0);
      this.state = 775;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === GoParser.COMMA) {
        this.state = 774;
        this.match(GoParser.COMMA);
      }

      this.state = 777;
      this.match(GoParser.R_PAREN);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  nonNamedType() {
    let localctx = new NonNamedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, GoParser.RULE_nonNamedType);

    try {
      this.state = 784;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.FUNC:
        case GoParser.INTERFACE:
        case GoParser.MAP:
        case GoParser.STRUCT:
        case GoParser.CHAN:
        case GoParser.L_BRACKET:
        case GoParser.STAR:
        case GoParser.RECEIVE:
          this.enterOuterAlt(localctx, 1);
          this.state = 779;
          this.typeLit();
          break;

        case GoParser.L_PAREN:
          this.enterOuterAlt(localctx, 2);
          this.state = 780;
          this.match(GoParser.L_PAREN);
          this.state = 781;
          this.nonNamedType();
          this.state = 782;
          this.match(GoParser.R_PAREN);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  operand() {
    let localctx = new OperandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, GoParser.RULE_operand);

    try {
      this.state = 792;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 83, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 786;
          this.literal();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 787;
          this.operandName();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 788;
          this.match(GoParser.L_PAREN);
          this.state = 789;
          this.expression(0);
          this.state = 790;
          this.match(GoParser.R_PAREN);
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  literal() {
    let localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, GoParser.RULE_literal);

    try {
      this.state = 797;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.NIL_LIT:
        case GoParser.DECIMAL_LIT:
        case GoParser.BINARY_LIT:
        case GoParser.OCTAL_LIT:
        case GoParser.HEX_LIT:
        case GoParser.FLOAT_LIT:
        case GoParser.IMAGINARY_LIT:
        case GoParser.RUNE_LIT:
        case GoParser.RAW_STRING_LIT:
        case GoParser.INTERPRETED_STRING_LIT:
          this.enterOuterAlt(localctx, 1);
          this.state = 794;
          this.basicLit();
          break;

        case GoParser.MAP:
        case GoParser.STRUCT:
        case GoParser.IDENTIFIER:
        case GoParser.L_BRACKET:
          this.enterOuterAlt(localctx, 2);
          this.state = 795;
          this.compositeLit();
          break;

        case GoParser.FUNC:
          this.enterOuterAlt(localctx, 3);
          this.state = 796;
          this.functionLit();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  basicLit() {
    let localctx = new BasicLitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, GoParser.RULE_basicLit);

    try {
      this.state = 803;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.NIL_LIT:
          this.enterOuterAlt(localctx, 1);
          this.state = 799;
          this.match(GoParser.NIL_LIT);
          break;

        case GoParser.DECIMAL_LIT:
        case GoParser.BINARY_LIT:
        case GoParser.OCTAL_LIT:
        case GoParser.HEX_LIT:
        case GoParser.IMAGINARY_LIT:
        case GoParser.RUNE_LIT:
          this.enterOuterAlt(localctx, 2);
          this.state = 800;
          this.integer();
          break;

        case GoParser.RAW_STRING_LIT:
        case GoParser.INTERPRETED_STRING_LIT:
          this.enterOuterAlt(localctx, 3);
          this.state = 801;
          this.string_();
          break;

        case GoParser.FLOAT_LIT:
          this.enterOuterAlt(localctx, 4);
          this.state = 802;
          this.match(GoParser.FLOAT_LIT);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  integer() {
    let localctx = new IntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, GoParser.RULE_integer);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 805;
      _la = this._input.LA(1);

      if (!((_la - 64 & ~0x1f) == 0 && (1 << _la - 64 & (1 << GoParser.DECIMAL_LIT - 64 | 1 << GoParser.BINARY_LIT - 64 | 1 << GoParser.OCTAL_LIT - 64 | 1 << GoParser.HEX_LIT - 64 | 1 << GoParser.IMAGINARY_LIT - 64 | 1 << GoParser.RUNE_LIT - 64)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  operandName() {
    let localctx = new OperandNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, GoParser.RULE_operandName);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 807;
      this.match(GoParser.IDENTIFIER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  qualifiedIdent() {
    let localctx = new QualifiedIdentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, GoParser.RULE_qualifiedIdent);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 809;
      this.match(GoParser.IDENTIFIER);
      this.state = 810;
      this.match(GoParser.DOT);
      this.state = 811;
      this.match(GoParser.IDENTIFIER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  compositeLit() {
    let localctx = new CompositeLitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, GoParser.RULE_compositeLit);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 813;
      this.literalType();
      this.state = 814;
      this.literalValue();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  literalType() {
    let localctx = new LiteralTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, GoParser.RULE_literalType);

    try {
      this.state = 825;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 816;
          this.structType();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 817;
          this.arrayType();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 818;
          this.match(GoParser.L_BRACKET);
          this.state = 819;
          this.match(GoParser.ELLIPSIS);
          this.state = 820;
          this.match(GoParser.R_BRACKET);
          this.state = 821;
          this.elementType();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 822;
          this.sliceType();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 823;
          this.mapType();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 824;
          this.typeName();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  literalValue() {
    let localctx = new LiteralValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, GoParser.RULE_literalValue);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 827;
      this.match(GoParser.L_CURLY);
      this.state = 832;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 3 & ~0x1f) == 0 && (1 << _la - 3 & (1 << GoParser.FUNC - 3 | 1 << GoParser.INTERFACE - 3 | 1 << GoParser.MAP - 3 | 1 << GoParser.STRUCT - 3 | 1 << GoParser.CHAN - 3 | 1 << GoParser.NIL_LIT - 3 | 1 << GoParser.IDENTIFIER - 3 | 1 << GoParser.L_PAREN - 3 | 1 << GoParser.L_CURLY - 3 | 1 << GoParser.L_BRACKET - 3)) !== 0 || (_la - 57 & ~0x1f) == 0 && (1 << _la - 57 & (1 << GoParser.EXCLAMATION - 57 | 1 << GoParser.PLUS - 57 | 1 << GoParser.MINUS - 57 | 1 << GoParser.CARET - 57 | 1 << GoParser.STAR - 57 | 1 << GoParser.AMPERSAND - 57 | 1 << GoParser.RECEIVE - 57 | 1 << GoParser.DECIMAL_LIT - 57 | 1 << GoParser.BINARY_LIT - 57 | 1 << GoParser.OCTAL_LIT - 57 | 1 << GoParser.HEX_LIT - 57 | 1 << GoParser.FLOAT_LIT - 57 | 1 << GoParser.IMAGINARY_LIT - 57 | 1 << GoParser.RUNE_LIT - 57 | 1 << GoParser.RAW_STRING_LIT - 57 | 1 << GoParser.INTERPRETED_STRING_LIT - 57)) !== 0) {
        this.state = 828;
        this.elementList();
        this.state = 830;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === GoParser.COMMA) {
          this.state = 829;
          this.match(GoParser.COMMA);
        }
      }

      this.state = 834;
      this.match(GoParser.R_CURLY);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  elementList() {
    let localctx = new ElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, GoParser.RULE_elementList);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 836;
      this.keyedElement();
      this.state = 841;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 89, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 837;
          this.match(GoParser.COMMA);
          this.state = 838;
          this.keyedElement();
        }

        this.state = 843;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 89, this._ctx);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  keyedElement() {
    let localctx = new KeyedElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, GoParser.RULE_keyedElement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 847;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);

      if (la_ === 1) {
        this.state = 844;
        this.key();
        this.state = 845;
        this.match(GoParser.COLON);
      }

      this.state = 849;
      this.element();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  key() {
    let localctx = new KeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, GoParser.RULE_key);

    try {
      this.state = 853;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.FUNC:
        case GoParser.INTERFACE:
        case GoParser.MAP:
        case GoParser.STRUCT:
        case GoParser.CHAN:
        case GoParser.NIL_LIT:
        case GoParser.IDENTIFIER:
        case GoParser.L_PAREN:
        case GoParser.L_BRACKET:
        case GoParser.EXCLAMATION:
        case GoParser.PLUS:
        case GoParser.MINUS:
        case GoParser.CARET:
        case GoParser.STAR:
        case GoParser.AMPERSAND:
        case GoParser.RECEIVE:
        case GoParser.DECIMAL_LIT:
        case GoParser.BINARY_LIT:
        case GoParser.OCTAL_LIT:
        case GoParser.HEX_LIT:
        case GoParser.FLOAT_LIT:
        case GoParser.IMAGINARY_LIT:
        case GoParser.RUNE_LIT:
        case GoParser.RAW_STRING_LIT:
        case GoParser.INTERPRETED_STRING_LIT:
          this.enterOuterAlt(localctx, 1);
          this.state = 851;
          this.expression(0);
          break;

        case GoParser.L_CURLY:
          this.enterOuterAlt(localctx, 2);
          this.state = 852;
          this.literalValue();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  element() {
    let localctx = new ElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, GoParser.RULE_element);

    try {
      this.state = 857;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case GoParser.FUNC:
        case GoParser.INTERFACE:
        case GoParser.MAP:
        case GoParser.STRUCT:
        case GoParser.CHAN:
        case GoParser.NIL_LIT:
        case GoParser.IDENTIFIER:
        case GoParser.L_PAREN:
        case GoParser.L_BRACKET:
        case GoParser.EXCLAMATION:
        case GoParser.PLUS:
        case GoParser.MINUS:
        case GoParser.CARET:
        case GoParser.STAR:
        case GoParser.AMPERSAND:
        case GoParser.RECEIVE:
        case GoParser.DECIMAL_LIT:
        case GoParser.BINARY_LIT:
        case GoParser.OCTAL_LIT:
        case GoParser.HEX_LIT:
        case GoParser.FLOAT_LIT:
        case GoParser.IMAGINARY_LIT:
        case GoParser.RUNE_LIT:
        case GoParser.RAW_STRING_LIT:
        case GoParser.INTERPRETED_STRING_LIT:
          this.enterOuterAlt(localctx, 1);
          this.state = 855;
          this.expression(0);
          break;

        case GoParser.L_CURLY:
          this.enterOuterAlt(localctx, 2);
          this.state = 856;
          this.literalValue();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  structType() {
    let localctx = new StructTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, GoParser.RULE_structType);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 859;
      this.match(GoParser.STRUCT);
      this.state = 860;
      this.match(GoParser.L_CURLY);
      this.state = 866;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === GoParser.IDENTIFIER || _la === GoParser.STAR) {
        this.state = 861;
        this.fieldDecl();
        this.state = 862;
        this.eos();
        this.state = 868;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 869;
      this.match(GoParser.R_CURLY);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  fieldDecl() {
    let localctx = new FieldDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, GoParser.RULE_fieldDecl);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 875;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 94, this._ctx);

      switch (la_) {
        case 1:
          this.state = 871;
          this.identifierList();
          this.state = 872;
          this.type_();
          break;

        case 2:
          this.state = 874;
          this.embeddedField();
          break;
      }

      this.state = 878;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);

      if (la_ === 1) {
        this.state = 877;
        localctx.tag = this.string_();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  string_() {
    let localctx = new String_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 178, GoParser.RULE_string_);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 880;
      _la = this._input.LA(1);

      if (!(_la === GoParser.RAW_STRING_LIT || _la === GoParser.INTERPRETED_STRING_LIT)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  embeddedField() {
    let localctx = new EmbeddedFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, GoParser.RULE_embeddedField);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 883;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === GoParser.STAR) {
        this.state = 882;
        this.match(GoParser.STAR);
      }

      this.state = 885;
      this.typeName();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  functionLit() {
    let localctx = new FunctionLitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, GoParser.RULE_functionLit);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 887;
      this.match(GoParser.FUNC);
      this.state = 888;
      this.signature();
      this.state = 889;
      this.block();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  index() {
    let localctx = new IndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, GoParser.RULE_index);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 891;
      this.match(GoParser.L_BRACKET);
      this.state = 892;
      this.expression(0);
      this.state = 893;
      this.match(GoParser.R_BRACKET);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  slice_() {
    let localctx = new Slice_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 186, GoParser.RULE_slice_);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 895;
      this.match(GoParser.L_BRACKET);
      this.state = 911;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);

      switch (la_) {
        case 1:
          this.state = 897;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la - 3 & ~0x1f) == 0 && (1 << _la - 3 & (1 << GoParser.FUNC - 3 | 1 << GoParser.INTERFACE - 3 | 1 << GoParser.MAP - 3 | 1 << GoParser.STRUCT - 3 | 1 << GoParser.CHAN - 3 | 1 << GoParser.NIL_LIT - 3 | 1 << GoParser.IDENTIFIER - 3 | 1 << GoParser.L_PAREN - 3 | 1 << GoParser.L_BRACKET - 3)) !== 0 || (_la - 57 & ~0x1f) == 0 && (1 << _la - 57 & (1 << GoParser.EXCLAMATION - 57 | 1 << GoParser.PLUS - 57 | 1 << GoParser.MINUS - 57 | 1 << GoParser.CARET - 57 | 1 << GoParser.STAR - 57 | 1 << GoParser.AMPERSAND - 57 | 1 << GoParser.RECEIVE - 57 | 1 << GoParser.DECIMAL_LIT - 57 | 1 << GoParser.BINARY_LIT - 57 | 1 << GoParser.OCTAL_LIT - 57 | 1 << GoParser.HEX_LIT - 57 | 1 << GoParser.FLOAT_LIT - 57 | 1 << GoParser.IMAGINARY_LIT - 57 | 1 << GoParser.RUNE_LIT - 57 | 1 << GoParser.RAW_STRING_LIT - 57 | 1 << GoParser.INTERPRETED_STRING_LIT - 57)) !== 0) {
            this.state = 896;
            this.expression(0);
          }

          this.state = 899;
          this.match(GoParser.COLON);
          this.state = 901;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la - 3 & ~0x1f) == 0 && (1 << _la - 3 & (1 << GoParser.FUNC - 3 | 1 << GoParser.INTERFACE - 3 | 1 << GoParser.MAP - 3 | 1 << GoParser.STRUCT - 3 | 1 << GoParser.CHAN - 3 | 1 << GoParser.NIL_LIT - 3 | 1 << GoParser.IDENTIFIER - 3 | 1 << GoParser.L_PAREN - 3 | 1 << GoParser.L_BRACKET - 3)) !== 0 || (_la - 57 & ~0x1f) == 0 && (1 << _la - 57 & (1 << GoParser.EXCLAMATION - 57 | 1 << GoParser.PLUS - 57 | 1 << GoParser.MINUS - 57 | 1 << GoParser.CARET - 57 | 1 << GoParser.STAR - 57 | 1 << GoParser.AMPERSAND - 57 | 1 << GoParser.RECEIVE - 57 | 1 << GoParser.DECIMAL_LIT - 57 | 1 << GoParser.BINARY_LIT - 57 | 1 << GoParser.OCTAL_LIT - 57 | 1 << GoParser.HEX_LIT - 57 | 1 << GoParser.FLOAT_LIT - 57 | 1 << GoParser.IMAGINARY_LIT - 57 | 1 << GoParser.RUNE_LIT - 57 | 1 << GoParser.RAW_STRING_LIT - 57 | 1 << GoParser.INTERPRETED_STRING_LIT - 57)) !== 0) {
            this.state = 900;
            this.expression(0);
          }

          break;

        case 2:
          this.state = 904;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la - 3 & ~0x1f) == 0 && (1 << _la - 3 & (1 << GoParser.FUNC - 3 | 1 << GoParser.INTERFACE - 3 | 1 << GoParser.MAP - 3 | 1 << GoParser.STRUCT - 3 | 1 << GoParser.CHAN - 3 | 1 << GoParser.NIL_LIT - 3 | 1 << GoParser.IDENTIFIER - 3 | 1 << GoParser.L_PAREN - 3 | 1 << GoParser.L_BRACKET - 3)) !== 0 || (_la - 57 & ~0x1f) == 0 && (1 << _la - 57 & (1 << GoParser.EXCLAMATION - 57 | 1 << GoParser.PLUS - 57 | 1 << GoParser.MINUS - 57 | 1 << GoParser.CARET - 57 | 1 << GoParser.STAR - 57 | 1 << GoParser.AMPERSAND - 57 | 1 << GoParser.RECEIVE - 57 | 1 << GoParser.DECIMAL_LIT - 57 | 1 << GoParser.BINARY_LIT - 57 | 1 << GoParser.OCTAL_LIT - 57 | 1 << GoParser.HEX_LIT - 57 | 1 << GoParser.FLOAT_LIT - 57 | 1 << GoParser.IMAGINARY_LIT - 57 | 1 << GoParser.RUNE_LIT - 57 | 1 << GoParser.RAW_STRING_LIT - 57 | 1 << GoParser.INTERPRETED_STRING_LIT - 57)) !== 0) {
            this.state = 903;
            this.expression(0);
          }

          this.state = 906;
          this.match(GoParser.COLON);
          this.state = 907;
          this.expression(0);
          this.state = 908;
          this.match(GoParser.COLON);
          this.state = 909;
          this.expression(0);
          break;
      }

      this.state = 913;
      this.match(GoParser.R_BRACKET);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typeAssertion() {
    let localctx = new TypeAssertionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, GoParser.RULE_typeAssertion);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 915;
      this.match(GoParser.DOT);
      this.state = 916;
      this.match(GoParser.L_PAREN);
      this.state = 917;
      this.type_();
      this.state = 918;
      this.match(GoParser.R_PAREN);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  arguments() {
    let localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, GoParser.RULE_arguments);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 920;
      this.match(GoParser.L_PAREN);
      this.state = 935;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 3 & ~0x1f) == 0 && (1 << _la - 3 & (1 << GoParser.FUNC - 3 | 1 << GoParser.INTERFACE - 3 | 1 << GoParser.MAP - 3 | 1 << GoParser.STRUCT - 3 | 1 << GoParser.CHAN - 3 | 1 << GoParser.NIL_LIT - 3 | 1 << GoParser.IDENTIFIER - 3 | 1 << GoParser.L_PAREN - 3 | 1 << GoParser.L_BRACKET - 3)) !== 0 || (_la - 57 & ~0x1f) == 0 && (1 << _la - 57 & (1 << GoParser.EXCLAMATION - 57 | 1 << GoParser.PLUS - 57 | 1 << GoParser.MINUS - 57 | 1 << GoParser.CARET - 57 | 1 << GoParser.STAR - 57 | 1 << GoParser.AMPERSAND - 57 | 1 << GoParser.RECEIVE - 57 | 1 << GoParser.DECIMAL_LIT - 57 | 1 << GoParser.BINARY_LIT - 57 | 1 << GoParser.OCTAL_LIT - 57 | 1 << GoParser.HEX_LIT - 57 | 1 << GoParser.FLOAT_LIT - 57 | 1 << GoParser.IMAGINARY_LIT - 57 | 1 << GoParser.RUNE_LIT - 57 | 1 << GoParser.RAW_STRING_LIT - 57 | 1 << GoParser.INTERPRETED_STRING_LIT - 57)) !== 0) {
        this.state = 927;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 102, this._ctx);

        switch (la_) {
          case 1:
            this.state = 921;
            this.expressionList();
            break;

          case 2:
            this.state = 922;
            this.nonNamedType();
            this.state = 925;

            this._errHandler.sync(this);

            var la_ = this._interp.adaptivePredict(this._input, 101, this._ctx);

            if (la_ === 1) {
              this.state = 923;
              this.match(GoParser.COMMA);
              this.state = 924;
              this.expressionList();
            }

            break;
        }

        this.state = 930;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === GoParser.ELLIPSIS) {
          this.state = 929;
          this.match(GoParser.ELLIPSIS);
        }

        this.state = 933;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === GoParser.COMMA) {
          this.state = 932;
          this.match(GoParser.COMMA);
        }
      }

      this.state = 937;
      this.match(GoParser.R_PAREN);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  methodExpr() {
    let localctx = new MethodExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, GoParser.RULE_methodExpr);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 939;
      this.nonNamedType();
      this.state = 940;
      this.match(GoParser.DOT);
      this.state = 941;
      this.match(GoParser.IDENTIFIER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  receiverType() {
    let localctx = new ReceiverTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, GoParser.RULE_receiverType);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 943;
      this.type_();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  eos() {
    let localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, GoParser.RULE_eos);

    try {
      this.state = 949;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 106, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 945;
          this.match(GoParser.SEMI);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 946;
          this.match(GoParser.EOF);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 947;
          this.match(GoParser.EOS);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 948;

          if (!this.closingBracket()) {
            throw new _antlr.default.error.FailedPredicateException(this, "closingBracket()");
          }

          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

}

exports.default = GoParser;
GoParser.EOF = _antlr.default.Token.EOF;
GoParser.BREAK = 1;
GoParser.DEFAULT = 2;
GoParser.FUNC = 3;
GoParser.INTERFACE = 4;
GoParser.SELECT = 5;
GoParser.CASE = 6;
GoParser.DEFER = 7;
GoParser.GO = 8;
GoParser.MAP = 9;
GoParser.STRUCT = 10;
GoParser.CHAN = 11;
GoParser.ELSE = 12;
GoParser.GOTO = 13;
GoParser.PACKAGE = 14;
GoParser.SWITCH = 15;
GoParser.CONST = 16;
GoParser.FALLTHROUGH = 17;
GoParser.IF = 18;
GoParser.RANGE = 19;
GoParser.TYPE = 20;
GoParser.CONTINUE = 21;
GoParser.FOR = 22;
GoParser.IMPORT = 23;
GoParser.RETURN = 24;
GoParser.VAR = 25;
GoParser.NIL_LIT = 26;
GoParser.IDENTIFIER = 27;
GoParser.L_PAREN = 28;
GoParser.R_PAREN = 29;
GoParser.L_CURLY = 30;
GoParser.R_CURLY = 31;
GoParser.L_BRACKET = 32;
GoParser.R_BRACKET = 33;
GoParser.ASSIGN = 34;
GoParser.COMMA = 35;
GoParser.SEMI = 36;
GoParser.COLON = 37;
GoParser.DOT = 38;
GoParser.PLUS_PLUS = 39;
GoParser.MINUS_MINUS = 40;
GoParser.DECLARE_ASSIGN = 41;
GoParser.ELLIPSIS = 42;
GoParser.LOGICAL_OR = 43;
GoParser.LOGICAL_AND = 44;
GoParser.EQUALS = 45;
GoParser.NOT_EQUALS = 46;
GoParser.LESS = 47;
GoParser.LESS_OR_EQUALS = 48;
GoParser.GREATER = 49;
GoParser.GREATER_OR_EQUALS = 50;
GoParser.OR = 51;
GoParser.DIV = 52;
GoParser.MOD = 53;
GoParser.LSHIFT = 54;
GoParser.RSHIFT = 55;
GoParser.BIT_CLEAR = 56;
GoParser.EXCLAMATION = 57;
GoParser.PLUS = 58;
GoParser.MINUS = 59;
GoParser.CARET = 60;
GoParser.STAR = 61;
GoParser.AMPERSAND = 62;
GoParser.RECEIVE = 63;
GoParser.DECIMAL_LIT = 64;
GoParser.BINARY_LIT = 65;
GoParser.OCTAL_LIT = 66;
GoParser.HEX_LIT = 67;
GoParser.FLOAT_LIT = 68;
GoParser.DECIMAL_FLOAT_LIT = 69;
GoParser.HEX_FLOAT_LIT = 70;
GoParser.IMAGINARY_LIT = 71;
GoParser.RUNE_LIT = 72;
GoParser.BYTE_VALUE = 73;
GoParser.OCTAL_BYTE_VALUE = 74;
GoParser.HEX_BYTE_VALUE = 75;
GoParser.LITTLE_U_VALUE = 76;
GoParser.BIG_U_VALUE = 77;
GoParser.RAW_STRING_LIT = 78;
GoParser.INTERPRETED_STRING_LIT = 79;
GoParser.WS = 80;
GoParser.COMMENT = 81;
GoParser.TERMINATOR = 82;
GoParser.LINE_COMMENT = 83;
GoParser.WS_NLSEMI = 84;
GoParser.COMMENT_NLSEMI = 85;
GoParser.LINE_COMMENT_NLSEMI = 86;
GoParser.EOS = 87;
GoParser.OTHER = 88;
GoParser.RULE_sourceFile = 0;
GoParser.RULE_packageClause = 1;
GoParser.RULE_importDecl = 2;
GoParser.RULE_importSpec = 3;
GoParser.RULE_importPath = 4;
GoParser.RULE_declaration = 5;
GoParser.RULE_constDecl = 6;
GoParser.RULE_constSpec = 7;
GoParser.RULE_identifierList = 8;
GoParser.RULE_expressionList = 9;
GoParser.RULE_typeDecl = 10;
GoParser.RULE_typeSpec = 11;
GoParser.RULE_functionDecl = 12;
GoParser.RULE_methodDecl = 13;
GoParser.RULE_receiver = 14;
GoParser.RULE_varDecl = 15;
GoParser.RULE_varSpec = 16;
GoParser.RULE_block = 17;
GoParser.RULE_statementList = 18;
GoParser.RULE_statement = 19;
GoParser.RULE_simpleStmt = 20;
GoParser.RULE_expressionStmt = 21;
GoParser.RULE_sendStmt = 22;
GoParser.RULE_incDecStmt = 23;
GoParser.RULE_assignment = 24;
GoParser.RULE_assign_op = 25;
GoParser.RULE_shortVarDecl = 26;
GoParser.RULE_emptyStmt = 27;
GoParser.RULE_labeledStmt = 28;
GoParser.RULE_returnStmt = 29;
GoParser.RULE_breakStmt = 30;
GoParser.RULE_continueStmt = 31;
GoParser.RULE_gotoStmt = 32;
GoParser.RULE_fallthroughStmt = 33;
GoParser.RULE_deferStmt = 34;
GoParser.RULE_ifStmt = 35;
GoParser.RULE_switchStmt = 36;
GoParser.RULE_exprSwitchStmt = 37;
GoParser.RULE_exprCaseClause = 38;
GoParser.RULE_exprSwitchCase = 39;
GoParser.RULE_typeSwitchStmt = 40;
GoParser.RULE_typeSwitchGuard = 41;
GoParser.RULE_typeCaseClause = 42;
GoParser.RULE_typeSwitchCase = 43;
GoParser.RULE_typeList = 44;
GoParser.RULE_selectStmt = 45;
GoParser.RULE_commClause = 46;
GoParser.RULE_commCase = 47;
GoParser.RULE_recvStmt = 48;
GoParser.RULE_forStmt = 49;
GoParser.RULE_forClause = 50;
GoParser.RULE_rangeClause = 51;
GoParser.RULE_goStmt = 52;
GoParser.RULE_type_ = 53;
GoParser.RULE_typeName = 54;
GoParser.RULE_typeLit = 55;
GoParser.RULE_arrayType = 56;
GoParser.RULE_arrayLength = 57;
GoParser.RULE_elementType = 58;
GoParser.RULE_pointerType = 59;
GoParser.RULE_interfaceType = 60;
GoParser.RULE_sliceType = 61;
GoParser.RULE_mapType = 62;
GoParser.RULE_channelType = 63;
GoParser.RULE_methodSpec = 64;
GoParser.RULE_functionType = 65;
GoParser.RULE_signature = 66;
GoParser.RULE_result = 67;
GoParser.RULE_parameters = 68;
GoParser.RULE_parameterDecl = 69;
GoParser.RULE_expression = 70;
GoParser.RULE_primaryExpr = 71;
GoParser.RULE_conversion = 72;
GoParser.RULE_nonNamedType = 73;
GoParser.RULE_operand = 74;
GoParser.RULE_literal = 75;
GoParser.RULE_basicLit = 76;
GoParser.RULE_integer = 77;
GoParser.RULE_operandName = 78;
GoParser.RULE_qualifiedIdent = 79;
GoParser.RULE_compositeLit = 80;
GoParser.RULE_literalType = 81;
GoParser.RULE_literalValue = 82;
GoParser.RULE_elementList = 83;
GoParser.RULE_keyedElement = 84;
GoParser.RULE_key = 85;
GoParser.RULE_element = 86;
GoParser.RULE_structType = 87;
GoParser.RULE_fieldDecl = 88;
GoParser.RULE_string_ = 89;
GoParser.RULE_embeddedField = 90;
GoParser.RULE_functionLit = 91;
GoParser.RULE_index = 92;
GoParser.RULE_slice_ = 93;
GoParser.RULE_typeAssertion = 94;
GoParser.RULE_arguments = 95;
GoParser.RULE_methodExpr = 96;
GoParser.RULE_receiverType = 97;
GoParser.RULE_eos = 98;

class SourceFileContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_sourceFile;
  }

  packageClause() {
    return this.getTypedRuleContext(PackageClauseContext, 0);
  }

  eos = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(EosContext);
    } else {
      return this.getTypedRuleContext(EosContext, i);
    }
  };

  EOF() {
    return this.getToken(GoParser.EOF, 0);
  }

  importDecl = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ImportDeclContext);
    } else {
      return this.getTypedRuleContext(ImportDeclContext, i);
    }
  };
  functionDecl = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(FunctionDeclContext);
    } else {
      return this.getTypedRuleContext(FunctionDeclContext, i);
    }
  };
  methodDecl = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(MethodDeclContext);
    } else {
      return this.getTypedRuleContext(MethodDeclContext, i);
    }
  };
  declaration = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(DeclarationContext);
    } else {
      return this.getTypedRuleContext(DeclarationContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterSourceFile(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitSourceFile(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitSourceFile(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class PackageClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_packageClause;
    this.packageName = null; // Token
  }

  PACKAGE() {
    return this.getToken(GoParser.PACKAGE, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterPackageClause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitPackageClause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitPackageClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ImportDeclContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_importDecl;
  }

  IMPORT() {
    return this.getToken(GoParser.IMPORT, 0);
  }

  importSpec = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ImportSpecContext);
    } else {
      return this.getTypedRuleContext(ImportSpecContext, i);
    }
  };

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  eos = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(EosContext);
    } else {
      return this.getTypedRuleContext(EosContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterImportDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitImportDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitImportDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ImportSpecContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_importSpec;
    this.alias = null; // Token
  }

  importPath() {
    return this.getTypedRuleContext(ImportPathContext, 0);
  }

  DOT() {
    return this.getToken(GoParser.DOT, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterImportSpec(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitImportSpec(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitImportSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ImportPathContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_importPath;
  }

  string_() {
    return this.getTypedRuleContext(String_Context, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterImportPath(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitImportPath(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitImportPath(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class DeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_declaration;
  }

  constDecl() {
    return this.getTypedRuleContext(ConstDeclContext, 0);
  }

  typeDecl() {
    return this.getTypedRuleContext(TypeDeclContext, 0);
  }

  varDecl() {
    return this.getTypedRuleContext(VarDeclContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterDeclaration(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitDeclaration(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ConstDeclContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_constDecl;
  }

  CONST() {
    return this.getToken(GoParser.CONST, 0);
  }

  constSpec = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ConstSpecContext);
    } else {
      return this.getTypedRuleContext(ConstSpecContext, i);
    }
  };

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  eos = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(EosContext);
    } else {
      return this.getTypedRuleContext(EosContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterConstDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitConstDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitConstDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ConstSpecContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_constSpec;
  }

  identifierList() {
    return this.getTypedRuleContext(IdentifierListContext, 0);
  }

  ASSIGN() {
    return this.getToken(GoParser.ASSIGN, 0);
  }

  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterConstSpec(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitConstSpec(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitConstSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class IdentifierListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_identifierList;
  }

  IDENTIFIER = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(GoParser.IDENTIFIER);
    } else {
      return this.getToken(GoParser.IDENTIFIER, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(GoParser.COMMA);
    } else {
      return this.getToken(GoParser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterIdentifierList(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitIdentifierList(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitIdentifierList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExpressionListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_expressionList;
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(GoParser.COMMA);
    } else {
      return this.getToken(GoParser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterExpressionList(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitExpressionList(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitExpressionList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypeDeclContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_typeDecl;
  }

  TYPE() {
    return this.getToken(GoParser.TYPE, 0);
  }

  typeSpec = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TypeSpecContext);
    } else {
      return this.getTypedRuleContext(TypeSpecContext, i);
    }
  };

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  eos = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(EosContext);
    } else {
      return this.getTypedRuleContext(EosContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterTypeDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitTypeDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitTypeDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypeSpecContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_typeSpec;
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  ASSIGN() {
    return this.getToken(GoParser.ASSIGN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterTypeSpec(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitTypeSpec(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitTypeSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FunctionDeclContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_functionDecl;
  }

  FUNC() {
    return this.getToken(GoParser.FUNC, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  signature() {
    return this.getTypedRuleContext(SignatureContext, 0);
  }

  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterFunctionDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitFunctionDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitFunctionDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class MethodDeclContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_methodDecl;
  }

  FUNC() {
    return this.getToken(GoParser.FUNC, 0);
  }

  receiver() {
    return this.getTypedRuleContext(ReceiverContext, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  signature() {
    return this.getTypedRuleContext(SignatureContext, 0);
  }

  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterMethodDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitMethodDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitMethodDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ReceiverContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_receiver;
  }

  parameters() {
    return this.getTypedRuleContext(ParametersContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterReceiver(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitReceiver(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitReceiver(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class VarDeclContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_varDecl;
  }

  VAR() {
    return this.getToken(GoParser.VAR, 0);
  }

  varSpec = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(VarSpecContext);
    } else {
      return this.getTypedRuleContext(VarSpecContext, i);
    }
  };

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  eos = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(EosContext);
    } else {
      return this.getTypedRuleContext(EosContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterVarDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitVarDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitVarDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class VarSpecContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_varSpec;
  }

  identifierList() {
    return this.getTypedRuleContext(IdentifierListContext, 0);
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  ASSIGN() {
    return this.getToken(GoParser.ASSIGN, 0);
  }

  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterVarSpec(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitVarSpec(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitVarSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class BlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_block;
  }

  L_CURLY() {
    return this.getToken(GoParser.L_CURLY, 0);
  }

  R_CURLY() {
    return this.getToken(GoParser.R_CURLY, 0);
  }

  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterBlock(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitBlock(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class StatementListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_statementList;
  }

  statement = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };
  eos = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(EosContext);
    } else {
      return this.getTypedRuleContext(EosContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterStatementList(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitStatementList(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitStatementList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class StatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_statement;
  }

  declaration() {
    return this.getTypedRuleContext(DeclarationContext, 0);
  }

  labeledStmt() {
    return this.getTypedRuleContext(LabeledStmtContext, 0);
  }

  simpleStmt() {
    return this.getTypedRuleContext(SimpleStmtContext, 0);
  }

  goStmt() {
    return this.getTypedRuleContext(GoStmtContext, 0);
  }

  returnStmt() {
    return this.getTypedRuleContext(ReturnStmtContext, 0);
  }

  breakStmt() {
    return this.getTypedRuleContext(BreakStmtContext, 0);
  }

  continueStmt() {
    return this.getTypedRuleContext(ContinueStmtContext, 0);
  }

  gotoStmt() {
    return this.getTypedRuleContext(GotoStmtContext, 0);
  }

  fallthroughStmt() {
    return this.getTypedRuleContext(FallthroughStmtContext, 0);
  }

  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }

  ifStmt() {
    return this.getTypedRuleContext(IfStmtContext, 0);
  }

  switchStmt() {
    return this.getTypedRuleContext(SwitchStmtContext, 0);
  }

  selectStmt() {
    return this.getTypedRuleContext(SelectStmtContext, 0);
  }

  forStmt() {
    return this.getTypedRuleContext(ForStmtContext, 0);
  }

  deferStmt() {
    return this.getTypedRuleContext(DeferStmtContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SimpleStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_simpleStmt;
  }

  sendStmt() {
    return this.getTypedRuleContext(SendStmtContext, 0);
  }

  incDecStmt() {
    return this.getTypedRuleContext(IncDecStmtContext, 0);
  }

  assignment() {
    return this.getTypedRuleContext(AssignmentContext, 0);
  }

  expressionStmt() {
    return this.getTypedRuleContext(ExpressionStmtContext, 0);
  }

  shortVarDecl() {
    return this.getTypedRuleContext(ShortVarDeclContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterSimpleStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitSimpleStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitSimpleStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExpressionStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_expressionStmt;
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterExpressionStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitExpressionStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitExpressionStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SendStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_sendStmt;
    this.channel = null; // ExpressionContext
  }

  RECEIVE() {
    return this.getToken(GoParser.RECEIVE, 0);
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterSendStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitSendStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitSendStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class IncDecStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_incDecStmt;
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  PLUS_PLUS() {
    return this.getToken(GoParser.PLUS_PLUS, 0);
  }

  MINUS_MINUS() {
    return this.getToken(GoParser.MINUS_MINUS, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterIncDecStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitIncDecStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitIncDecStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class AssignmentContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_assignment;
  }

  expressionList = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ExpressionListContext);
    } else {
      return this.getTypedRuleContext(ExpressionListContext, i);
    }
  };

  assign_op() {
    return this.getTypedRuleContext(Assign_opContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterAssignment(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitAssignment(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitAssignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Assign_opContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_assign_op;
  }

  ASSIGN() {
    return this.getToken(GoParser.ASSIGN, 0);
  }

  PLUS() {
    return this.getToken(GoParser.PLUS, 0);
  }

  MINUS() {
    return this.getToken(GoParser.MINUS, 0);
  }

  OR() {
    return this.getToken(GoParser.OR, 0);
  }

  CARET() {
    return this.getToken(GoParser.CARET, 0);
  }

  STAR() {
    return this.getToken(GoParser.STAR, 0);
  }

  DIV() {
    return this.getToken(GoParser.DIV, 0);
  }

  MOD() {
    return this.getToken(GoParser.MOD, 0);
  }

  LSHIFT() {
    return this.getToken(GoParser.LSHIFT, 0);
  }

  RSHIFT() {
    return this.getToken(GoParser.RSHIFT, 0);
  }

  AMPERSAND() {
    return this.getToken(GoParser.AMPERSAND, 0);
  }

  BIT_CLEAR() {
    return this.getToken(GoParser.BIT_CLEAR, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterAssign_op(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitAssign_op(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitAssign_op(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ShortVarDeclContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_shortVarDecl;
  }

  identifierList() {
    return this.getTypedRuleContext(IdentifierListContext, 0);
  }

  DECLARE_ASSIGN() {
    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
  }

  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterShortVarDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitShortVarDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitShortVarDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class EmptyStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_emptyStmt;
  }

  EOS() {
    return this.getToken(GoParser.EOS, 0);
  }

  SEMI() {
    return this.getToken(GoParser.SEMI, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterEmptyStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitEmptyStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitEmptyStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class LabeledStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_labeledStmt;
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  COLON() {
    return this.getToken(GoParser.COLON, 0);
  }

  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterLabeledStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitLabeledStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitLabeledStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ReturnStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_returnStmt;
  }

  RETURN() {
    return this.getToken(GoParser.RETURN, 0);
  }

  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterReturnStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitReturnStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitReturnStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class BreakStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_breakStmt;
  }

  BREAK() {
    return this.getToken(GoParser.BREAK, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterBreakStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitBreakStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitBreakStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ContinueStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_continueStmt;
  }

  CONTINUE() {
    return this.getToken(GoParser.CONTINUE, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterContinueStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitContinueStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitContinueStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class GotoStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_gotoStmt;
  }

  GOTO() {
    return this.getToken(GoParser.GOTO, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterGotoStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitGotoStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitGotoStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FallthroughStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_fallthroughStmt;
  }

  FALLTHROUGH() {
    return this.getToken(GoParser.FALLTHROUGH, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterFallthroughStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitFallthroughStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitFallthroughStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class DeferStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_deferStmt;
  }

  DEFER() {
    return this.getToken(GoParser.DEFER, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterDeferStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitDeferStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitDeferStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class IfStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_ifStmt;
  }

  IF() {
    return this.getToken(GoParser.IF, 0);
  }

  block = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(BlockContext);
    } else {
      return this.getTypedRuleContext(BlockContext, i);
    }
  };

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  simpleStmt() {
    return this.getTypedRuleContext(SimpleStmtContext, 0);
  }

  ELSE() {
    return this.getToken(GoParser.ELSE, 0);
  }

  ifStmt() {
    return this.getTypedRuleContext(IfStmtContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterIfStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitIfStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitIfStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SwitchStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_switchStmt;
  }

  exprSwitchStmt() {
    return this.getTypedRuleContext(ExprSwitchStmtContext, 0);
  }

  typeSwitchStmt() {
    return this.getTypedRuleContext(TypeSwitchStmtContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterSwitchStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitSwitchStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitSwitchStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExprSwitchStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_exprSwitchStmt;
  }

  SWITCH() {
    return this.getToken(GoParser.SWITCH, 0);
  }

  L_CURLY() {
    return this.getToken(GoParser.L_CURLY, 0);
  }

  R_CURLY() {
    return this.getToken(GoParser.R_CURLY, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  exprCaseClause = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ExprCaseClauseContext);
    } else {
      return this.getTypedRuleContext(ExprCaseClauseContext, i);
    }
  };

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  simpleStmt() {
    return this.getTypedRuleContext(SimpleStmtContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterExprSwitchStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitExprSwitchStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitExprSwitchStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExprCaseClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_exprCaseClause;
  }

  exprSwitchCase() {
    return this.getTypedRuleContext(ExprSwitchCaseContext, 0);
  }

  COLON() {
    return this.getToken(GoParser.COLON, 0);
  }

  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterExprCaseClause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitExprCaseClause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitExprCaseClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExprSwitchCaseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_exprSwitchCase;
  }

  CASE() {
    return this.getToken(GoParser.CASE, 0);
  }

  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }

  DEFAULT() {
    return this.getToken(GoParser.DEFAULT, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterExprSwitchCase(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitExprSwitchCase(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitExprSwitchCase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypeSwitchStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_typeSwitchStmt;
  }

  SWITCH() {
    return this.getToken(GoParser.SWITCH, 0);
  }

  L_CURLY() {
    return this.getToken(GoParser.L_CURLY, 0);
  }

  R_CURLY() {
    return this.getToken(GoParser.R_CURLY, 0);
  }

  typeSwitchGuard() {
    return this.getTypedRuleContext(TypeSwitchGuardContext, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  simpleStmt() {
    return this.getTypedRuleContext(SimpleStmtContext, 0);
  }

  typeCaseClause = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TypeCaseClauseContext);
    } else {
      return this.getTypedRuleContext(TypeCaseClauseContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterTypeSwitchStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitTypeSwitchStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitTypeSwitchStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypeSwitchGuardContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_typeSwitchGuard;
  }

  primaryExpr() {
    return this.getTypedRuleContext(PrimaryExprContext, 0);
  }

  DOT() {
    return this.getToken(GoParser.DOT, 0);
  }

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  TYPE() {
    return this.getToken(GoParser.TYPE, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  DECLARE_ASSIGN() {
    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterTypeSwitchGuard(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitTypeSwitchGuard(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitTypeSwitchGuard(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypeCaseClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_typeCaseClause;
  }

  typeSwitchCase() {
    return this.getTypedRuleContext(TypeSwitchCaseContext, 0);
  }

  COLON() {
    return this.getToken(GoParser.COLON, 0);
  }

  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterTypeCaseClause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitTypeCaseClause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitTypeCaseClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypeSwitchCaseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_typeSwitchCase;
  }

  CASE() {
    return this.getToken(GoParser.CASE, 0);
  }

  typeList() {
    return this.getTypedRuleContext(TypeListContext, 0);
  }

  DEFAULT() {
    return this.getToken(GoParser.DEFAULT, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterTypeSwitchCase(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitTypeSwitchCase(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitTypeSwitchCase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypeListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_typeList;
  }

  type_ = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Type_Context);
    } else {
      return this.getTypedRuleContext(Type_Context, i);
    }
  };
  NIL_LIT = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(GoParser.NIL_LIT);
    } else {
      return this.getToken(GoParser.NIL_LIT, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(GoParser.COMMA);
    } else {
      return this.getToken(GoParser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterTypeList(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitTypeList(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitTypeList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SelectStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_selectStmt;
  }

  SELECT() {
    return this.getToken(GoParser.SELECT, 0);
  }

  L_CURLY() {
    return this.getToken(GoParser.L_CURLY, 0);
  }

  R_CURLY() {
    return this.getToken(GoParser.R_CURLY, 0);
  }

  commClause = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(CommClauseContext);
    } else {
      return this.getTypedRuleContext(CommClauseContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterSelectStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitSelectStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitSelectStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class CommClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_commClause;
  }

  commCase() {
    return this.getTypedRuleContext(CommCaseContext, 0);
  }

  COLON() {
    return this.getToken(GoParser.COLON, 0);
  }

  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterCommClause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitCommClause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitCommClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class CommCaseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_commCase;
  }

  CASE() {
    return this.getToken(GoParser.CASE, 0);
  }

  sendStmt() {
    return this.getTypedRuleContext(SendStmtContext, 0);
  }

  recvStmt() {
    return this.getTypedRuleContext(RecvStmtContext, 0);
  }

  DEFAULT() {
    return this.getToken(GoParser.DEFAULT, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterCommCase(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitCommCase(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitCommCase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class RecvStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_recvStmt;
    this.recvExpr = null; // ExpressionContext
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }

  ASSIGN() {
    return this.getToken(GoParser.ASSIGN, 0);
  }

  identifierList() {
    return this.getTypedRuleContext(IdentifierListContext, 0);
  }

  DECLARE_ASSIGN() {
    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterRecvStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitRecvStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitRecvStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ForStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_forStmt;
  }

  FOR() {
    return this.getToken(GoParser.FOR, 0);
  }

  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  forClause() {
    return this.getTypedRuleContext(ForClauseContext, 0);
  }

  rangeClause() {
    return this.getTypedRuleContext(RangeClauseContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterForStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitForStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitForStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ForClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_forClause;
    this.initStmt = null; // SimpleStmtContext

    this.postStmt = null; // SimpleStmtContext
  }

  eos = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(EosContext);
    } else {
      return this.getTypedRuleContext(EosContext, i);
    }
  };

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  simpleStmt = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SimpleStmtContext);
    } else {
      return this.getTypedRuleContext(SimpleStmtContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterForClause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitForClause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitForClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class RangeClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_rangeClause;
  }

  RANGE() {
    return this.getToken(GoParser.RANGE, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }

  ASSIGN() {
    return this.getToken(GoParser.ASSIGN, 0);
  }

  identifierList() {
    return this.getTypedRuleContext(IdentifierListContext, 0);
  }

  DECLARE_ASSIGN() {
    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterRangeClause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitRangeClause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitRangeClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class GoStmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_goStmt;
  }

  GO() {
    return this.getToken(GoParser.GO, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterGoStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitGoStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitGoStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Type_Context extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_type_;
  }

  typeName() {
    return this.getTypedRuleContext(TypeNameContext, 0);
  }

  typeLit() {
    return this.getTypedRuleContext(TypeLitContext, 0);
  }

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterType_(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitType_(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitType_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypeNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_typeName;
  }

  qualifiedIdent() {
    return this.getTypedRuleContext(QualifiedIdentContext, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterTypeName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitTypeName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitTypeName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypeLitContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_typeLit;
  }

  arrayType() {
    return this.getTypedRuleContext(ArrayTypeContext, 0);
  }

  structType() {
    return this.getTypedRuleContext(StructTypeContext, 0);
  }

  pointerType() {
    return this.getTypedRuleContext(PointerTypeContext, 0);
  }

  functionType() {
    return this.getTypedRuleContext(FunctionTypeContext, 0);
  }

  interfaceType() {
    return this.getTypedRuleContext(InterfaceTypeContext, 0);
  }

  sliceType() {
    return this.getTypedRuleContext(SliceTypeContext, 0);
  }

  mapType() {
    return this.getTypedRuleContext(MapTypeContext, 0);
  }

  channelType() {
    return this.getTypedRuleContext(ChannelTypeContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterTypeLit(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitTypeLit(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitTypeLit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ArrayTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_arrayType;
  }

  L_BRACKET() {
    return this.getToken(GoParser.L_BRACKET, 0);
  }

  arrayLength() {
    return this.getTypedRuleContext(ArrayLengthContext, 0);
  }

  R_BRACKET() {
    return this.getToken(GoParser.R_BRACKET, 0);
  }

  elementType() {
    return this.getTypedRuleContext(ElementTypeContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterArrayType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitArrayType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitArrayType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ArrayLengthContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_arrayLength;
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterArrayLength(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitArrayLength(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitArrayLength(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ElementTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_elementType;
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterElementType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitElementType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitElementType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class PointerTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_pointerType;
  }

  STAR() {
    return this.getToken(GoParser.STAR, 0);
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterPointerType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitPointerType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitPointerType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class InterfaceTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_interfaceType;
  }

  INTERFACE() {
    return this.getToken(GoParser.INTERFACE, 0);
  }

  L_CURLY() {
    return this.getToken(GoParser.L_CURLY, 0);
  }

  R_CURLY() {
    return this.getToken(GoParser.R_CURLY, 0);
  }

  eos = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(EosContext);
    } else {
      return this.getTypedRuleContext(EosContext, i);
    }
  };
  methodSpec = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(MethodSpecContext);
    } else {
      return this.getTypedRuleContext(MethodSpecContext, i);
    }
  };
  typeName = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TypeNameContext);
    } else {
      return this.getTypedRuleContext(TypeNameContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterInterfaceType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitInterfaceType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitInterfaceType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SliceTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_sliceType;
  }

  L_BRACKET() {
    return this.getToken(GoParser.L_BRACKET, 0);
  }

  R_BRACKET() {
    return this.getToken(GoParser.R_BRACKET, 0);
  }

  elementType() {
    return this.getTypedRuleContext(ElementTypeContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterSliceType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitSliceType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitSliceType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class MapTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_mapType;
  }

  MAP() {
    return this.getToken(GoParser.MAP, 0);
  }

  L_BRACKET() {
    return this.getToken(GoParser.L_BRACKET, 0);
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  R_BRACKET() {
    return this.getToken(GoParser.R_BRACKET, 0);
  }

  elementType() {
    return this.getTypedRuleContext(ElementTypeContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterMapType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitMapType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitMapType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ChannelTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_channelType;
  }

  elementType() {
    return this.getTypedRuleContext(ElementTypeContext, 0);
  }

  CHAN() {
    return this.getToken(GoParser.CHAN, 0);
  }

  RECEIVE() {
    return this.getToken(GoParser.RECEIVE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterChannelType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitChannelType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitChannelType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class MethodSpecContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_methodSpec;
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  parameters() {
    return this.getTypedRuleContext(ParametersContext, 0);
  }

  result() {
    return this.getTypedRuleContext(ResultContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterMethodSpec(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitMethodSpec(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitMethodSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FunctionTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_functionType;
  }

  FUNC() {
    return this.getToken(GoParser.FUNC, 0);
  }

  signature() {
    return this.getTypedRuleContext(SignatureContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterFunctionType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitFunctionType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitFunctionType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SignatureContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_signature;
  }

  parameters() {
    return this.getTypedRuleContext(ParametersContext, 0);
  }

  result() {
    return this.getTypedRuleContext(ResultContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterSignature(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitSignature(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitSignature(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ResultContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_result;
  }

  parameters() {
    return this.getTypedRuleContext(ParametersContext, 0);
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterResult(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitResult(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitResult(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ParametersContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_parameters;
  }

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  parameterDecl = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ParameterDeclContext);
    } else {
      return this.getTypedRuleContext(ParameterDeclContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(GoParser.COMMA);
    } else {
      return this.getToken(GoParser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterParameters(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitParameters(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitParameters(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ParameterDeclContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_parameterDecl;
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  identifierList() {
    return this.getTypedRuleContext(IdentifierListContext, 0);
  }

  ELLIPSIS() {
    return this.getToken(GoParser.ELLIPSIS, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterParameterDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitParameterDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitParameterDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExpressionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_expression;
    this.unary_op = null; // Token

    this.mul_op = null; // Token

    this.add_op = null; // Token

    this.rel_op = null; // Token
  }

  primaryExpr() {
    return this.getTypedRuleContext(PrimaryExprContext, 0);
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  PLUS() {
    return this.getToken(GoParser.PLUS, 0);
  }

  MINUS() {
    return this.getToken(GoParser.MINUS, 0);
  }

  EXCLAMATION() {
    return this.getToken(GoParser.EXCLAMATION, 0);
  }

  CARET() {
    return this.getToken(GoParser.CARET, 0);
  }

  STAR() {
    return this.getToken(GoParser.STAR, 0);
  }

  AMPERSAND() {
    return this.getToken(GoParser.AMPERSAND, 0);
  }

  RECEIVE() {
    return this.getToken(GoParser.RECEIVE, 0);
  }

  DIV() {
    return this.getToken(GoParser.DIV, 0);
  }

  MOD() {
    return this.getToken(GoParser.MOD, 0);
  }

  LSHIFT() {
    return this.getToken(GoParser.LSHIFT, 0);
  }

  RSHIFT() {
    return this.getToken(GoParser.RSHIFT, 0);
  }

  BIT_CLEAR() {
    return this.getToken(GoParser.BIT_CLEAR, 0);
  }

  OR() {
    return this.getToken(GoParser.OR, 0);
  }

  EQUALS() {
    return this.getToken(GoParser.EQUALS, 0);
  }

  NOT_EQUALS() {
    return this.getToken(GoParser.NOT_EQUALS, 0);
  }

  LESS() {
    return this.getToken(GoParser.LESS, 0);
  }

  LESS_OR_EQUALS() {
    return this.getToken(GoParser.LESS_OR_EQUALS, 0);
  }

  GREATER() {
    return this.getToken(GoParser.GREATER, 0);
  }

  GREATER_OR_EQUALS() {
    return this.getToken(GoParser.GREATER_OR_EQUALS, 0);
  }

  LOGICAL_AND() {
    return this.getToken(GoParser.LOGICAL_AND, 0);
  }

  LOGICAL_OR() {
    return this.getToken(GoParser.LOGICAL_OR, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class PrimaryExprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_primaryExpr;
  }

  operand() {
    return this.getTypedRuleContext(OperandContext, 0);
  }

  conversion() {
    return this.getTypedRuleContext(ConversionContext, 0);
  }

  methodExpr() {
    return this.getTypedRuleContext(MethodExprContext, 0);
  }

  primaryExpr() {
    return this.getTypedRuleContext(PrimaryExprContext, 0);
  }

  index() {
    return this.getTypedRuleContext(IndexContext, 0);
  }

  slice_() {
    return this.getTypedRuleContext(Slice_Context, 0);
  }

  typeAssertion() {
    return this.getTypedRuleContext(TypeAssertionContext, 0);
  }

  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }

  DOT() {
    return this.getToken(GoParser.DOT, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterPrimaryExpr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitPrimaryExpr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitPrimaryExpr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ConversionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_conversion;
  }

  nonNamedType() {
    return this.getTypedRuleContext(NonNamedTypeContext, 0);
  }

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  COMMA() {
    return this.getToken(GoParser.COMMA, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterConversion(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitConversion(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitConversion(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class NonNamedTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_nonNamedType;
  }

  typeLit() {
    return this.getTypedRuleContext(TypeLitContext, 0);
  }

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  nonNamedType() {
    return this.getTypedRuleContext(NonNamedTypeContext, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterNonNamedType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitNonNamedType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitNonNamedType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OperandContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_operand;
  }

  literal() {
    return this.getTypedRuleContext(LiteralContext, 0);
  }

  operandName() {
    return this.getTypedRuleContext(OperandNameContext, 0);
  }

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterOperand(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitOperand(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitOperand(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class LiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_literal;
  }

  basicLit() {
    return this.getTypedRuleContext(BasicLitContext, 0);
  }

  compositeLit() {
    return this.getTypedRuleContext(CompositeLitContext, 0);
  }

  functionLit() {
    return this.getTypedRuleContext(FunctionLitContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class BasicLitContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_basicLit;
  }

  NIL_LIT() {
    return this.getToken(GoParser.NIL_LIT, 0);
  }

  integer() {
    return this.getTypedRuleContext(IntegerContext, 0);
  }

  string_() {
    return this.getTypedRuleContext(String_Context, 0);
  }

  FLOAT_LIT() {
    return this.getToken(GoParser.FLOAT_LIT, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterBasicLit(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitBasicLit(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitBasicLit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class IntegerContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_integer;
  }

  DECIMAL_LIT() {
    return this.getToken(GoParser.DECIMAL_LIT, 0);
  }

  BINARY_LIT() {
    return this.getToken(GoParser.BINARY_LIT, 0);
  }

  OCTAL_LIT() {
    return this.getToken(GoParser.OCTAL_LIT, 0);
  }

  HEX_LIT() {
    return this.getToken(GoParser.HEX_LIT, 0);
  }

  IMAGINARY_LIT() {
    return this.getToken(GoParser.IMAGINARY_LIT, 0);
  }

  RUNE_LIT() {
    return this.getToken(GoParser.RUNE_LIT, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterInteger(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitInteger(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitInteger(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OperandNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_operandName;
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterOperandName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitOperandName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitOperandName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class QualifiedIdentContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_qualifiedIdent;
  }

  IDENTIFIER = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(GoParser.IDENTIFIER);
    } else {
      return this.getToken(GoParser.IDENTIFIER, i);
    }
  };

  DOT() {
    return this.getToken(GoParser.DOT, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterQualifiedIdent(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitQualifiedIdent(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitQualifiedIdent(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class CompositeLitContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_compositeLit;
  }

  literalType() {
    return this.getTypedRuleContext(LiteralTypeContext, 0);
  }

  literalValue() {
    return this.getTypedRuleContext(LiteralValueContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterCompositeLit(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitCompositeLit(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitCompositeLit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class LiteralTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_literalType;
  }

  structType() {
    return this.getTypedRuleContext(StructTypeContext, 0);
  }

  arrayType() {
    return this.getTypedRuleContext(ArrayTypeContext, 0);
  }

  L_BRACKET() {
    return this.getToken(GoParser.L_BRACKET, 0);
  }

  ELLIPSIS() {
    return this.getToken(GoParser.ELLIPSIS, 0);
  }

  R_BRACKET() {
    return this.getToken(GoParser.R_BRACKET, 0);
  }

  elementType() {
    return this.getTypedRuleContext(ElementTypeContext, 0);
  }

  sliceType() {
    return this.getTypedRuleContext(SliceTypeContext, 0);
  }

  mapType() {
    return this.getTypedRuleContext(MapTypeContext, 0);
  }

  typeName() {
    return this.getTypedRuleContext(TypeNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterLiteralType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitLiteralType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitLiteralType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class LiteralValueContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_literalValue;
  }

  L_CURLY() {
    return this.getToken(GoParser.L_CURLY, 0);
  }

  R_CURLY() {
    return this.getToken(GoParser.R_CURLY, 0);
  }

  elementList() {
    return this.getTypedRuleContext(ElementListContext, 0);
  }

  COMMA() {
    return this.getToken(GoParser.COMMA, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterLiteralValue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitLiteralValue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitLiteralValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ElementListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_elementList;
  }

  keyedElement = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(KeyedElementContext);
    } else {
      return this.getTypedRuleContext(KeyedElementContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(GoParser.COMMA);
    } else {
      return this.getToken(GoParser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterElementList(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitElementList(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitElementList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class KeyedElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_keyedElement;
  }

  element() {
    return this.getTypedRuleContext(ElementContext, 0);
  }

  key() {
    return this.getTypedRuleContext(KeyContext, 0);
  }

  COLON() {
    return this.getToken(GoParser.COLON, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterKeyedElement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitKeyedElement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitKeyedElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class KeyContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_key;
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  literalValue() {
    return this.getTypedRuleContext(LiteralValueContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterKey(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitKey(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_element;
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  literalValue() {
    return this.getTypedRuleContext(LiteralValueContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterElement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitElement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class StructTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_structType;
  }

  STRUCT() {
    return this.getToken(GoParser.STRUCT, 0);
  }

  L_CURLY() {
    return this.getToken(GoParser.L_CURLY, 0);
  }

  R_CURLY() {
    return this.getToken(GoParser.R_CURLY, 0);
  }

  fieldDecl = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(FieldDeclContext);
    } else {
      return this.getTypedRuleContext(FieldDeclContext, i);
    }
  };
  eos = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(EosContext);
    } else {
      return this.getTypedRuleContext(EosContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterStructType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitStructType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitStructType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FieldDeclContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_fieldDecl;
    this.tag = null; // String_Context
  }

  identifierList() {
    return this.getTypedRuleContext(IdentifierListContext, 0);
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  embeddedField() {
    return this.getTypedRuleContext(EmbeddedFieldContext, 0);
  }

  string_() {
    return this.getTypedRuleContext(String_Context, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterFieldDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitFieldDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitFieldDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class String_Context extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_string_;
  }

  RAW_STRING_LIT() {
    return this.getToken(GoParser.RAW_STRING_LIT, 0);
  }

  INTERPRETED_STRING_LIT() {
    return this.getToken(GoParser.INTERPRETED_STRING_LIT, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterString_(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitString_(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitString_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class EmbeddedFieldContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_embeddedField;
  }

  typeName() {
    return this.getTypedRuleContext(TypeNameContext, 0);
  }

  STAR() {
    return this.getToken(GoParser.STAR, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterEmbeddedField(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitEmbeddedField(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitEmbeddedField(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FunctionLitContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_functionLit;
  }

  FUNC() {
    return this.getToken(GoParser.FUNC, 0);
  }

  signature() {
    return this.getTypedRuleContext(SignatureContext, 0);
  }

  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterFunctionLit(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitFunctionLit(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitFunctionLit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class IndexContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_index;
  }

  L_BRACKET() {
    return this.getToken(GoParser.L_BRACKET, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  R_BRACKET() {
    return this.getToken(GoParser.R_BRACKET, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterIndex(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitIndex(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitIndex(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Slice_Context extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_slice_;
  }

  L_BRACKET() {
    return this.getToken(GoParser.L_BRACKET, 0);
  }

  R_BRACKET() {
    return this.getToken(GoParser.R_BRACKET, 0);
  }

  COLON = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(GoParser.COLON);
    } else {
      return this.getToken(GoParser.COLON, i);
    }
  };
  expression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterSlice_(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitSlice_(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitSlice_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypeAssertionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_typeAssertion;
  }

  DOT() {
    return this.getToken(GoParser.DOT, 0);
  }

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterTypeAssertion(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitTypeAssertion(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitTypeAssertion(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ArgumentsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_arguments;
  }

  L_PAREN() {
    return this.getToken(GoParser.L_PAREN, 0);
  }

  R_PAREN() {
    return this.getToken(GoParser.R_PAREN, 0);
  }

  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }

  nonNamedType() {
    return this.getTypedRuleContext(NonNamedTypeContext, 0);
  }

  ELLIPSIS() {
    return this.getToken(GoParser.ELLIPSIS, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(GoParser.COMMA);
    } else {
      return this.getToken(GoParser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterArguments(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitArguments(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitArguments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class MethodExprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_methodExpr;
  }

  nonNamedType() {
    return this.getTypedRuleContext(NonNamedTypeContext, 0);
  }

  DOT() {
    return this.getToken(GoParser.DOT, 0);
  }

  IDENTIFIER() {
    return this.getToken(GoParser.IDENTIFIER, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterMethodExpr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitMethodExpr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitMethodExpr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ReceiverTypeContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_receiverType;
  }

  type_() {
    return this.getTypedRuleContext(Type_Context, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterReceiverType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitReceiverType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitReceiverType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class EosContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GoParser.RULE_eos;
  }

  SEMI() {
    return this.getToken(GoParser.SEMI, 0);
  }

  EOF() {
    return this.getToken(GoParser.EOF, 0);
  }

  EOS() {
    return this.getToken(GoParser.EOS, 0);
  }

  enterRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.enterEos(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _GoParserListener.default) {
      listener.exitEos(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _GoParserVisitor.default) {
      return visitor.visitEos(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

GoParser.SourceFileContext = SourceFileContext;
GoParser.PackageClauseContext = PackageClauseContext;
GoParser.ImportDeclContext = ImportDeclContext;
GoParser.ImportSpecContext = ImportSpecContext;
GoParser.ImportPathContext = ImportPathContext;
GoParser.DeclarationContext = DeclarationContext;
GoParser.ConstDeclContext = ConstDeclContext;
GoParser.ConstSpecContext = ConstSpecContext;
GoParser.IdentifierListContext = IdentifierListContext;
GoParser.ExpressionListContext = ExpressionListContext;
GoParser.TypeDeclContext = TypeDeclContext;
GoParser.TypeSpecContext = TypeSpecContext;
GoParser.FunctionDeclContext = FunctionDeclContext;
GoParser.MethodDeclContext = MethodDeclContext;
GoParser.ReceiverContext = ReceiverContext;
GoParser.VarDeclContext = VarDeclContext;
GoParser.VarSpecContext = VarSpecContext;
GoParser.BlockContext = BlockContext;
GoParser.StatementListContext = StatementListContext;
GoParser.StatementContext = StatementContext;
GoParser.SimpleStmtContext = SimpleStmtContext;
GoParser.ExpressionStmtContext = ExpressionStmtContext;
GoParser.SendStmtContext = SendStmtContext;
GoParser.IncDecStmtContext = IncDecStmtContext;
GoParser.AssignmentContext = AssignmentContext;
GoParser.Assign_opContext = Assign_opContext;
GoParser.ShortVarDeclContext = ShortVarDeclContext;
GoParser.EmptyStmtContext = EmptyStmtContext;
GoParser.LabeledStmtContext = LabeledStmtContext;
GoParser.ReturnStmtContext = ReturnStmtContext;
GoParser.BreakStmtContext = BreakStmtContext;
GoParser.ContinueStmtContext = ContinueStmtContext;
GoParser.GotoStmtContext = GotoStmtContext;
GoParser.FallthroughStmtContext = FallthroughStmtContext;
GoParser.DeferStmtContext = DeferStmtContext;
GoParser.IfStmtContext = IfStmtContext;
GoParser.SwitchStmtContext = SwitchStmtContext;
GoParser.ExprSwitchStmtContext = ExprSwitchStmtContext;
GoParser.ExprCaseClauseContext = ExprCaseClauseContext;
GoParser.ExprSwitchCaseContext = ExprSwitchCaseContext;
GoParser.TypeSwitchStmtContext = TypeSwitchStmtContext;
GoParser.TypeSwitchGuardContext = TypeSwitchGuardContext;
GoParser.TypeCaseClauseContext = TypeCaseClauseContext;
GoParser.TypeSwitchCaseContext = TypeSwitchCaseContext;
GoParser.TypeListContext = TypeListContext;
GoParser.SelectStmtContext = SelectStmtContext;
GoParser.CommClauseContext = CommClauseContext;
GoParser.CommCaseContext = CommCaseContext;
GoParser.RecvStmtContext = RecvStmtContext;
GoParser.ForStmtContext = ForStmtContext;
GoParser.ForClauseContext = ForClauseContext;
GoParser.RangeClauseContext = RangeClauseContext;
GoParser.GoStmtContext = GoStmtContext;
GoParser.Type_Context = Type_Context;
GoParser.TypeNameContext = TypeNameContext;
GoParser.TypeLitContext = TypeLitContext;
GoParser.ArrayTypeContext = ArrayTypeContext;
GoParser.ArrayLengthContext = ArrayLengthContext;
GoParser.ElementTypeContext = ElementTypeContext;
GoParser.PointerTypeContext = PointerTypeContext;
GoParser.InterfaceTypeContext = InterfaceTypeContext;
GoParser.SliceTypeContext = SliceTypeContext;
GoParser.MapTypeContext = MapTypeContext;
GoParser.ChannelTypeContext = ChannelTypeContext;
GoParser.MethodSpecContext = MethodSpecContext;
GoParser.FunctionTypeContext = FunctionTypeContext;
GoParser.SignatureContext = SignatureContext;
GoParser.ResultContext = ResultContext;
GoParser.ParametersContext = ParametersContext;
GoParser.ParameterDeclContext = ParameterDeclContext;
GoParser.ExpressionContext = ExpressionContext;
GoParser.PrimaryExprContext = PrimaryExprContext;
GoParser.ConversionContext = ConversionContext;
GoParser.NonNamedTypeContext = NonNamedTypeContext;
GoParser.OperandContext = OperandContext;
GoParser.LiteralContext = LiteralContext;
GoParser.BasicLitContext = BasicLitContext;
GoParser.IntegerContext = IntegerContext;
GoParser.OperandNameContext = OperandNameContext;
GoParser.QualifiedIdentContext = QualifiedIdentContext;
GoParser.CompositeLitContext = CompositeLitContext;
GoParser.LiteralTypeContext = LiteralTypeContext;
GoParser.LiteralValueContext = LiteralValueContext;
GoParser.ElementListContext = ElementListContext;
GoParser.KeyedElementContext = KeyedElementContext;
GoParser.KeyContext = KeyContext;
GoParser.ElementContext = ElementContext;
GoParser.StructTypeContext = StructTypeContext;
GoParser.FieldDeclContext = FieldDeclContext;
GoParser.String_Context = String_Context;
GoParser.EmbeddedFieldContext = EmbeddedFieldContext;
GoParser.FunctionLitContext = FunctionLitContext;
GoParser.IndexContext = IndexContext;
GoParser.Slice_Context = Slice_Context;
GoParser.TypeAssertionContext = TypeAssertionContext;
GoParser.ArgumentsContext = ArgumentsContext;
GoParser.MethodExprContext = MethodExprContext;
GoParser.ReceiverTypeContext = ReceiverTypeContext;
GoParser.EosContext = EosContext;

},{"./GoParserBase.js":134,"./GoParserListener.js":135,"./GoParserVisitor.js":136,"antlr4":42}],134:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _GoParser = _interopRequireDefault(require("./GoParser.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class GoParserBase extends _antlr.default.Parser {
  constructor(input) {
    super(input);
  }

  closingBracket() {
    let la = this.getTokenStream().LA(1);
    return la == _GoParser.default.R_PAREN || la == _GoParser.default.R_CURLY;
  }

}

exports.default = GoParserBase;

},{"./GoParser.js":133,"antlr4":42}],135:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/GoParser.g4 by ANTLR 4.9.2
// jshint ignore: start
// This class defines a complete listener for a parse tree produced by GoParser.
class GoParserListener extends _antlr.default.tree.ParseTreeListener {
  // Enter a parse tree produced by GoParser#sourceFile.
  enterSourceFile(ctx) {} // Exit a parse tree produced by GoParser#sourceFile.


  exitSourceFile(ctx) {} // Enter a parse tree produced by GoParser#packageClause.


  enterPackageClause(ctx) {} // Exit a parse tree produced by GoParser#packageClause.


  exitPackageClause(ctx) {} // Enter a parse tree produced by GoParser#importDecl.


  enterImportDecl(ctx) {} // Exit a parse tree produced by GoParser#importDecl.


  exitImportDecl(ctx) {} // Enter a parse tree produced by GoParser#importSpec.


  enterImportSpec(ctx) {} // Exit a parse tree produced by GoParser#importSpec.


  exitImportSpec(ctx) {} // Enter a parse tree produced by GoParser#importPath.


  enterImportPath(ctx) {} // Exit a parse tree produced by GoParser#importPath.


  exitImportPath(ctx) {} // Enter a parse tree produced by GoParser#declaration.


  enterDeclaration(ctx) {} // Exit a parse tree produced by GoParser#declaration.


  exitDeclaration(ctx) {} // Enter a parse tree produced by GoParser#constDecl.


  enterConstDecl(ctx) {} // Exit a parse tree produced by GoParser#constDecl.


  exitConstDecl(ctx) {} // Enter a parse tree produced by GoParser#constSpec.


  enterConstSpec(ctx) {} // Exit a parse tree produced by GoParser#constSpec.


  exitConstSpec(ctx) {} // Enter a parse tree produced by GoParser#identifierList.


  enterIdentifierList(ctx) {} // Exit a parse tree produced by GoParser#identifierList.


  exitIdentifierList(ctx) {} // Enter a parse tree produced by GoParser#expressionList.


  enterExpressionList(ctx) {} // Exit a parse tree produced by GoParser#expressionList.


  exitExpressionList(ctx) {} // Enter a parse tree produced by GoParser#typeDecl.


  enterTypeDecl(ctx) {} // Exit a parse tree produced by GoParser#typeDecl.


  exitTypeDecl(ctx) {} // Enter a parse tree produced by GoParser#typeSpec.


  enterTypeSpec(ctx) {} // Exit a parse tree produced by GoParser#typeSpec.


  exitTypeSpec(ctx) {} // Enter a parse tree produced by GoParser#functionDecl.


  enterFunctionDecl(ctx) {} // Exit a parse tree produced by GoParser#functionDecl.


  exitFunctionDecl(ctx) {} // Enter a parse tree produced by GoParser#methodDecl.


  enterMethodDecl(ctx) {} // Exit a parse tree produced by GoParser#methodDecl.


  exitMethodDecl(ctx) {} // Enter a parse tree produced by GoParser#receiver.


  enterReceiver(ctx) {} // Exit a parse tree produced by GoParser#receiver.


  exitReceiver(ctx) {} // Enter a parse tree produced by GoParser#varDecl.


  enterVarDecl(ctx) {} // Exit a parse tree produced by GoParser#varDecl.


  exitVarDecl(ctx) {} // Enter a parse tree produced by GoParser#varSpec.


  enterVarSpec(ctx) {} // Exit a parse tree produced by GoParser#varSpec.


  exitVarSpec(ctx) {} // Enter a parse tree produced by GoParser#block.


  enterBlock(ctx) {} // Exit a parse tree produced by GoParser#block.


  exitBlock(ctx) {} // Enter a parse tree produced by GoParser#statementList.


  enterStatementList(ctx) {} // Exit a parse tree produced by GoParser#statementList.


  exitStatementList(ctx) {} // Enter a parse tree produced by GoParser#statement.


  enterStatement(ctx) {} // Exit a parse tree produced by GoParser#statement.


  exitStatement(ctx) {} // Enter a parse tree produced by GoParser#simpleStmt.


  enterSimpleStmt(ctx) {} // Exit a parse tree produced by GoParser#simpleStmt.


  exitSimpleStmt(ctx) {} // Enter a parse tree produced by GoParser#expressionStmt.


  enterExpressionStmt(ctx) {} // Exit a parse tree produced by GoParser#expressionStmt.


  exitExpressionStmt(ctx) {} // Enter a parse tree produced by GoParser#sendStmt.


  enterSendStmt(ctx) {} // Exit a parse tree produced by GoParser#sendStmt.


  exitSendStmt(ctx) {} // Enter a parse tree produced by GoParser#incDecStmt.


  enterIncDecStmt(ctx) {} // Exit a parse tree produced by GoParser#incDecStmt.


  exitIncDecStmt(ctx) {} // Enter a parse tree produced by GoParser#assignment.


  enterAssignment(ctx) {} // Exit a parse tree produced by GoParser#assignment.


  exitAssignment(ctx) {} // Enter a parse tree produced by GoParser#assign_op.


  enterAssign_op(ctx) {} // Exit a parse tree produced by GoParser#assign_op.


  exitAssign_op(ctx) {} // Enter a parse tree produced by GoParser#shortVarDecl.


  enterShortVarDecl(ctx) {} // Exit a parse tree produced by GoParser#shortVarDecl.


  exitShortVarDecl(ctx) {} // Enter a parse tree produced by GoParser#emptyStmt.


  enterEmptyStmt(ctx) {} // Exit a parse tree produced by GoParser#emptyStmt.


  exitEmptyStmt(ctx) {} // Enter a parse tree produced by GoParser#labeledStmt.


  enterLabeledStmt(ctx) {} // Exit a parse tree produced by GoParser#labeledStmt.


  exitLabeledStmt(ctx) {} // Enter a parse tree produced by GoParser#returnStmt.


  enterReturnStmt(ctx) {} // Exit a parse tree produced by GoParser#returnStmt.


  exitReturnStmt(ctx) {} // Enter a parse tree produced by GoParser#breakStmt.


  enterBreakStmt(ctx) {} // Exit a parse tree produced by GoParser#breakStmt.


  exitBreakStmt(ctx) {} // Enter a parse tree produced by GoParser#continueStmt.


  enterContinueStmt(ctx) {} // Exit a parse tree produced by GoParser#continueStmt.


  exitContinueStmt(ctx) {} // Enter a parse tree produced by GoParser#gotoStmt.


  enterGotoStmt(ctx) {} // Exit a parse tree produced by GoParser#gotoStmt.


  exitGotoStmt(ctx) {} // Enter a parse tree produced by GoParser#fallthroughStmt.


  enterFallthroughStmt(ctx) {} // Exit a parse tree produced by GoParser#fallthroughStmt.


  exitFallthroughStmt(ctx) {} // Enter a parse tree produced by GoParser#deferStmt.


  enterDeferStmt(ctx) {} // Exit a parse tree produced by GoParser#deferStmt.


  exitDeferStmt(ctx) {} // Enter a parse tree produced by GoParser#ifStmt.


  enterIfStmt(ctx) {} // Exit a parse tree produced by GoParser#ifStmt.


  exitIfStmt(ctx) {} // Enter a parse tree produced by GoParser#switchStmt.


  enterSwitchStmt(ctx) {} // Exit a parse tree produced by GoParser#switchStmt.


  exitSwitchStmt(ctx) {} // Enter a parse tree produced by GoParser#exprSwitchStmt.


  enterExprSwitchStmt(ctx) {} // Exit a parse tree produced by GoParser#exprSwitchStmt.


  exitExprSwitchStmt(ctx) {} // Enter a parse tree produced by GoParser#exprCaseClause.


  enterExprCaseClause(ctx) {} // Exit a parse tree produced by GoParser#exprCaseClause.


  exitExprCaseClause(ctx) {} // Enter a parse tree produced by GoParser#exprSwitchCase.


  enterExprSwitchCase(ctx) {} // Exit a parse tree produced by GoParser#exprSwitchCase.


  exitExprSwitchCase(ctx) {} // Enter a parse tree produced by GoParser#typeSwitchStmt.


  enterTypeSwitchStmt(ctx) {} // Exit a parse tree produced by GoParser#typeSwitchStmt.


  exitTypeSwitchStmt(ctx) {} // Enter a parse tree produced by GoParser#typeSwitchGuard.


  enterTypeSwitchGuard(ctx) {} // Exit a parse tree produced by GoParser#typeSwitchGuard.


  exitTypeSwitchGuard(ctx) {} // Enter a parse tree produced by GoParser#typeCaseClause.


  enterTypeCaseClause(ctx) {} // Exit a parse tree produced by GoParser#typeCaseClause.


  exitTypeCaseClause(ctx) {} // Enter a parse tree produced by GoParser#typeSwitchCase.


  enterTypeSwitchCase(ctx) {} // Exit a parse tree produced by GoParser#typeSwitchCase.


  exitTypeSwitchCase(ctx) {} // Enter a parse tree produced by GoParser#typeList.


  enterTypeList(ctx) {} // Exit a parse tree produced by GoParser#typeList.


  exitTypeList(ctx) {} // Enter a parse tree produced by GoParser#selectStmt.


  enterSelectStmt(ctx) {} // Exit a parse tree produced by GoParser#selectStmt.


  exitSelectStmt(ctx) {} // Enter a parse tree produced by GoParser#commClause.


  enterCommClause(ctx) {} // Exit a parse tree produced by GoParser#commClause.


  exitCommClause(ctx) {} // Enter a parse tree produced by GoParser#commCase.


  enterCommCase(ctx) {} // Exit a parse tree produced by GoParser#commCase.


  exitCommCase(ctx) {} // Enter a parse tree produced by GoParser#recvStmt.


  enterRecvStmt(ctx) {} // Exit a parse tree produced by GoParser#recvStmt.


  exitRecvStmt(ctx) {} // Enter a parse tree produced by GoParser#forStmt.


  enterForStmt(ctx) {} // Exit a parse tree produced by GoParser#forStmt.


  exitForStmt(ctx) {} // Enter a parse tree produced by GoParser#forClause.


  enterForClause(ctx) {} // Exit a parse tree produced by GoParser#forClause.


  exitForClause(ctx) {} // Enter a parse tree produced by GoParser#rangeClause.


  enterRangeClause(ctx) {} // Exit a parse tree produced by GoParser#rangeClause.


  exitRangeClause(ctx) {} // Enter a parse tree produced by GoParser#goStmt.


  enterGoStmt(ctx) {} // Exit a parse tree produced by GoParser#goStmt.


  exitGoStmt(ctx) {} // Enter a parse tree produced by GoParser#type_.


  enterType_(ctx) {} // Exit a parse tree produced by GoParser#type_.


  exitType_(ctx) {} // Enter a parse tree produced by GoParser#typeName.


  enterTypeName(ctx) {} // Exit a parse tree produced by GoParser#typeName.


  exitTypeName(ctx) {} // Enter a parse tree produced by GoParser#typeLit.


  enterTypeLit(ctx) {} // Exit a parse tree produced by GoParser#typeLit.


  exitTypeLit(ctx) {} // Enter a parse tree produced by GoParser#arrayType.


  enterArrayType(ctx) {} // Exit a parse tree produced by GoParser#arrayType.


  exitArrayType(ctx) {} // Enter a parse tree produced by GoParser#arrayLength.


  enterArrayLength(ctx) {} // Exit a parse tree produced by GoParser#arrayLength.


  exitArrayLength(ctx) {} // Enter a parse tree produced by GoParser#elementType.


  enterElementType(ctx) {} // Exit a parse tree produced by GoParser#elementType.


  exitElementType(ctx) {} // Enter a parse tree produced by GoParser#pointerType.


  enterPointerType(ctx) {} // Exit a parse tree produced by GoParser#pointerType.


  exitPointerType(ctx) {} // Enter a parse tree produced by GoParser#interfaceType.


  enterInterfaceType(ctx) {} // Exit a parse tree produced by GoParser#interfaceType.


  exitInterfaceType(ctx) {} // Enter a parse tree produced by GoParser#sliceType.


  enterSliceType(ctx) {} // Exit a parse tree produced by GoParser#sliceType.


  exitSliceType(ctx) {} // Enter a parse tree produced by GoParser#mapType.


  enterMapType(ctx) {} // Exit a parse tree produced by GoParser#mapType.


  exitMapType(ctx) {} // Enter a parse tree produced by GoParser#channelType.


  enterChannelType(ctx) {} // Exit a parse tree produced by GoParser#channelType.


  exitChannelType(ctx) {} // Enter a parse tree produced by GoParser#methodSpec.


  enterMethodSpec(ctx) {} // Exit a parse tree produced by GoParser#methodSpec.


  exitMethodSpec(ctx) {} // Enter a parse tree produced by GoParser#functionType.


  enterFunctionType(ctx) {} // Exit a parse tree produced by GoParser#functionType.


  exitFunctionType(ctx) {} // Enter a parse tree produced by GoParser#signature.


  enterSignature(ctx) {} // Exit a parse tree produced by GoParser#signature.


  exitSignature(ctx) {} // Enter a parse tree produced by GoParser#result.


  enterResult(ctx) {} // Exit a parse tree produced by GoParser#result.


  exitResult(ctx) {} // Enter a parse tree produced by GoParser#parameters.


  enterParameters(ctx) {} // Exit a parse tree produced by GoParser#parameters.


  exitParameters(ctx) {} // Enter a parse tree produced by GoParser#parameterDecl.


  enterParameterDecl(ctx) {} // Exit a parse tree produced by GoParser#parameterDecl.


  exitParameterDecl(ctx) {} // Enter a parse tree produced by GoParser#expression.


  enterExpression(ctx) {} // Exit a parse tree produced by GoParser#expression.


  exitExpression(ctx) {} // Enter a parse tree produced by GoParser#primaryExpr.


  enterPrimaryExpr(ctx) {} // Exit a parse tree produced by GoParser#primaryExpr.


  exitPrimaryExpr(ctx) {} // Enter a parse tree produced by GoParser#conversion.


  enterConversion(ctx) {} // Exit a parse tree produced by GoParser#conversion.


  exitConversion(ctx) {} // Enter a parse tree produced by GoParser#nonNamedType.


  enterNonNamedType(ctx) {} // Exit a parse tree produced by GoParser#nonNamedType.


  exitNonNamedType(ctx) {} // Enter a parse tree produced by GoParser#operand.


  enterOperand(ctx) {} // Exit a parse tree produced by GoParser#operand.


  exitOperand(ctx) {} // Enter a parse tree produced by GoParser#literal.


  enterLiteral(ctx) {} // Exit a parse tree produced by GoParser#literal.


  exitLiteral(ctx) {} // Enter a parse tree produced by GoParser#basicLit.


  enterBasicLit(ctx) {} // Exit a parse tree produced by GoParser#basicLit.


  exitBasicLit(ctx) {} // Enter a parse tree produced by GoParser#integer.


  enterInteger(ctx) {} // Exit a parse tree produced by GoParser#integer.


  exitInteger(ctx) {} // Enter a parse tree produced by GoParser#operandName.


  enterOperandName(ctx) {} // Exit a parse tree produced by GoParser#operandName.


  exitOperandName(ctx) {} // Enter a parse tree produced by GoParser#qualifiedIdent.


  enterQualifiedIdent(ctx) {} // Exit a parse tree produced by GoParser#qualifiedIdent.


  exitQualifiedIdent(ctx) {} // Enter a parse tree produced by GoParser#compositeLit.


  enterCompositeLit(ctx) {} // Exit a parse tree produced by GoParser#compositeLit.


  exitCompositeLit(ctx) {} // Enter a parse tree produced by GoParser#literalType.


  enterLiteralType(ctx) {} // Exit a parse tree produced by GoParser#literalType.


  exitLiteralType(ctx) {} // Enter a parse tree produced by GoParser#literalValue.


  enterLiteralValue(ctx) {} // Exit a parse tree produced by GoParser#literalValue.


  exitLiteralValue(ctx) {} // Enter a parse tree produced by GoParser#elementList.


  enterElementList(ctx) {} // Exit a parse tree produced by GoParser#elementList.


  exitElementList(ctx) {} // Enter a parse tree produced by GoParser#keyedElement.


  enterKeyedElement(ctx) {} // Exit a parse tree produced by GoParser#keyedElement.


  exitKeyedElement(ctx) {} // Enter a parse tree produced by GoParser#key.


  enterKey(ctx) {} // Exit a parse tree produced by GoParser#key.


  exitKey(ctx) {} // Enter a parse tree produced by GoParser#element.


  enterElement(ctx) {} // Exit a parse tree produced by GoParser#element.


  exitElement(ctx) {} // Enter a parse tree produced by GoParser#structType.


  enterStructType(ctx) {} // Exit a parse tree produced by GoParser#structType.


  exitStructType(ctx) {} // Enter a parse tree produced by GoParser#fieldDecl.


  enterFieldDecl(ctx) {} // Exit a parse tree produced by GoParser#fieldDecl.


  exitFieldDecl(ctx) {} // Enter a parse tree produced by GoParser#string_.


  enterString_(ctx) {} // Exit a parse tree produced by GoParser#string_.


  exitString_(ctx) {} // Enter a parse tree produced by GoParser#embeddedField.


  enterEmbeddedField(ctx) {} // Exit a parse tree produced by GoParser#embeddedField.


  exitEmbeddedField(ctx) {} // Enter a parse tree produced by GoParser#functionLit.


  enterFunctionLit(ctx) {} // Exit a parse tree produced by GoParser#functionLit.


  exitFunctionLit(ctx) {} // Enter a parse tree produced by GoParser#index.


  enterIndex(ctx) {} // Exit a parse tree produced by GoParser#index.


  exitIndex(ctx) {} // Enter a parse tree produced by GoParser#slice_.


  enterSlice_(ctx) {} // Exit a parse tree produced by GoParser#slice_.


  exitSlice_(ctx) {} // Enter a parse tree produced by GoParser#typeAssertion.


  enterTypeAssertion(ctx) {} // Exit a parse tree produced by GoParser#typeAssertion.


  exitTypeAssertion(ctx) {} // Enter a parse tree produced by GoParser#arguments.


  enterArguments(ctx) {} // Exit a parse tree produced by GoParser#arguments.


  exitArguments(ctx) {} // Enter a parse tree produced by GoParser#methodExpr.


  enterMethodExpr(ctx) {} // Exit a parse tree produced by GoParser#methodExpr.


  exitMethodExpr(ctx) {} // Enter a parse tree produced by GoParser#receiverType.


  enterReceiverType(ctx) {} // Exit a parse tree produced by GoParser#receiverType.


  exitReceiverType(ctx) {} // Enter a parse tree produced by GoParser#eos.


  enterEos(ctx) {} // Exit a parse tree produced by GoParser#eos.


  exitEos(ctx) {}

}

exports.default = GoParserListener;

},{"antlr4":42}],136:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/GoParser.g4 by ANTLR 4.9.2
// jshint ignore: start
// This class defines a complete generic visitor for a parse tree produced by GoParser.
class GoParserVisitor extends _antlr.default.tree.ParseTreeVisitor {
  // Visit a parse tree produced by GoParser#sourceFile.
  visitSourceFile(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#packageClause.


  visitPackageClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#importDecl.


  visitImportDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#importSpec.


  visitImportSpec(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#importPath.


  visitImportPath(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#declaration.


  visitDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#constDecl.


  visitConstDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#constSpec.


  visitConstSpec(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#identifierList.


  visitIdentifierList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#expressionList.


  visitExpressionList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#typeDecl.


  visitTypeDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#typeSpec.


  visitTypeSpec(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#functionDecl.


  visitFunctionDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#methodDecl.


  visitMethodDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#receiver.


  visitReceiver(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#varDecl.


  visitVarDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#varSpec.


  visitVarSpec(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#block.


  visitBlock(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#statementList.


  visitStatementList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#statement.


  visitStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#simpleStmt.


  visitSimpleStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#expressionStmt.


  visitExpressionStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#sendStmt.


  visitSendStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#incDecStmt.


  visitIncDecStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#assignment.


  visitAssignment(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#assign_op.


  visitAssign_op(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#shortVarDecl.


  visitShortVarDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#emptyStmt.


  visitEmptyStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#labeledStmt.


  visitLabeledStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#returnStmt.


  visitReturnStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#breakStmt.


  visitBreakStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#continueStmt.


  visitContinueStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#gotoStmt.


  visitGotoStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#fallthroughStmt.


  visitFallthroughStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#deferStmt.


  visitDeferStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#ifStmt.


  visitIfStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#switchStmt.


  visitSwitchStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#exprSwitchStmt.


  visitExprSwitchStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#exprCaseClause.


  visitExprCaseClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#exprSwitchCase.


  visitExprSwitchCase(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#typeSwitchStmt.


  visitTypeSwitchStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#typeSwitchGuard.


  visitTypeSwitchGuard(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#typeCaseClause.


  visitTypeCaseClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#typeSwitchCase.


  visitTypeSwitchCase(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#typeList.


  visitTypeList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#selectStmt.


  visitSelectStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#commClause.


  visitCommClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#commCase.


  visitCommCase(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#recvStmt.


  visitRecvStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#forStmt.


  visitForStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#forClause.


  visitForClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#rangeClause.


  visitRangeClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#goStmt.


  visitGoStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#type_.


  visitType_(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#typeName.


  visitTypeName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#typeLit.


  visitTypeLit(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#arrayType.


  visitArrayType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#arrayLength.


  visitArrayLength(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#elementType.


  visitElementType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#pointerType.


  visitPointerType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#interfaceType.


  visitInterfaceType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#sliceType.


  visitSliceType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#mapType.


  visitMapType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#channelType.


  visitChannelType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#methodSpec.


  visitMethodSpec(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#functionType.


  visitFunctionType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#signature.


  visitSignature(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#result.


  visitResult(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#parameters.


  visitParameters(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#parameterDecl.


  visitParameterDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#expression.


  visitExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#primaryExpr.


  visitPrimaryExpr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#conversion.


  visitConversion(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#nonNamedType.


  visitNonNamedType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#operand.


  visitOperand(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#literal.


  visitLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#basicLit.


  visitBasicLit(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#integer.


  visitInteger(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#operandName.


  visitOperandName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#qualifiedIdent.


  visitQualifiedIdent(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#compositeLit.


  visitCompositeLit(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#literalType.


  visitLiteralType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#literalValue.


  visitLiteralValue(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#elementList.


  visitElementList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#keyedElement.


  visitKeyedElement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#key.


  visitKey(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#element.


  visitElement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#structType.


  visitStructType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#fieldDecl.


  visitFieldDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#string_.


  visitString_(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#embeddedField.


  visitEmbeddedField(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#functionLit.


  visitFunctionLit(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#index.


  visitIndex(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#slice_.


  visitSlice_(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#typeAssertion.


  visitTypeAssertion(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#arguments.


  visitArguments(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#methodExpr.


  visitMethodExpr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#receiverType.


  visitReceiverType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by GoParser#eos.


  visitEos(ctx) {
    return this.visitChildren(ctx);
  }

}

exports.default = GoParserVisitor;

},{"antlr4":42}],137:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _JavaParser = _interopRequireDefault(require("./JavaParser.js"));

var _JavaParserListener = _interopRequireDefault(require("./JavaParserListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class JavaAWSListener extends _JavaParserListener.default {
  constructor() {
    super();
    this.SDKDeclarations = [];
    this.ClientDeclarations = [];
    this.ClientCalls = [];
    this.VariableDeclarations = [];
  }

  exitImportDeclaration(ctx) {
    let importString = ctx.children[1].getText();
    let matchString = importString.match(/^software\.amazon\.awssdk\.services\.([a-zA-Z0-9]+)\.(([a-zA-Z0-9]+)Client)$/);

    if (matchString) {
      if (matchString[1].toLowerCase() == matchString[3].toLowerCase()) {
        this.SDKDeclarations.push({
          'variable': matchString[2],
          'service': matchString[1].toLowerCase()
        });
      }
    }
  }

  exitLocalVariableDeclaration(ctx) {
    if (ctx.children.length == 2 && ctx.children[0] instanceof _JavaParser.default.TypeTypeContext && ctx.children[1] instanceof _JavaParser.default.VariableDeclaratorsContext) {
      for (let declerator of ctx.children[1].children) {
        if (declerator instanceof _JavaParser.default.VariableDeclaratorContext) {
          if (declerator.children.length == 3) {
            let assignable = declerator.children[0];

            if (declerator.children[2].children && declerator.children[2].children.length == 1 && declerator.children[2].children[0] instanceof _JavaParser.default.ExpressionContext) {
              if (declerator.children[2].children[0].children && declerator.children[2].children[0].children.length == 3 && declerator.children[2].children[0].children[0] instanceof _JavaParser.default.ExpressionContext && declerator.children[2].children[0].children[1].getText() == "." && declerator.children[2].children[0].children[2].getText() == "build()") {
                // x = ###y###.build()
                let buildexpression = declerator.children[2].children[0].children[0];

                for (let sdkDeclaration of this.SDKDeclarations) {
                  if (buildexpression.getText().startsWith(sdkDeclaration['variable'] + ".builder()")) {
                    this.ClientDeclarations.push({
                      'type': sdkDeclaration['service'],
                      'variable': assignable.getText(),
                      'argsRaw': buildexpression,
                      'sdk': sdkDeclaration
                    });
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  exitExpression(ctx) {
    if (ctx.children && ctx.children.length == 3 && ctx.children[0] instanceof _JavaParser.default.ExpressionContext && ctx.children[1].getText() == "." && ctx.children[2] instanceof _JavaParser.default.MethodCallContext) {
      let namespace = ctx.children[0];

      if (ctx.children[2].children.length == 4 && ctx.children[2].children[1].getText() == "(") {
        let method = ctx.children[2].children[0];
        let argsRaw = ctx.children[2].children[2];

        for (let clientDeclaration of this.ClientDeclarations) {
          if (namespace.getText() == clientDeclaration['variable']) {
            this.ClientCalls.push({
              'client': clientDeclaration,
              'method': method.getText(),
              'argsRaw': argsRaw,
              'args': null
            });
            break;
          }
        }
      }
    }
  }

}

exports.default = JavaAWSListener;

},{"./JavaParser.js":139,"./JavaParserListener.js":140}],138:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/JavaLexer.g4 by ANTLR 4.9.2
// jshint ignore: start
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786", "\u5964\u0002\u0082\u045a\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003", "\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007", "\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004", "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010", "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013", "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017", "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a", "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e", "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#", "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004", "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004", "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004", "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004", "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004", "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004", "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004", "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004", "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004", "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004", "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004", "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004", "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004", "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004", "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t", "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0003", "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003", "\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003", "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003", "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003", "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003", "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003", "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003", "\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003", "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b", "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f", "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003", "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e", "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f", "\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010", "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012", "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012", "\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013", "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014", "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015", "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016", "\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018", "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019", "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019", "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a", "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b", "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b", "\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c", "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d", "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e", "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f", "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003", " \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003", "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003", "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003", "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003", "%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003", "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003", "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003", ")\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003", "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003", "+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003", "-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003", "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003", "0\u00030\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00032\u0003", "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00033\u00033\u0003", "3\u00033\u00033\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u0003", "4\u00035\u00035\u00035\u00035\u00035\u00036\u00036\u00036\u00036\u0003", "6\u00036\u00036\u00036\u00036\u00037\u00037\u00037\u00037\u00037\u0003", "7\u00037\u00037\u00038\u00038\u00038\u00038\u00038\u00038\u00039\u0003", "9\u00039\u0003:\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003<\u0003", "<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003", "=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003", "?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003A\u0003", "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003", "B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003", "C\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0005D\u02d7\nD\u0003", "D\u0006D\u02da\nD\rD\u000eD\u02db\u0003D\u0005D\u02df\nD\u0005D\u02e1", "\nD\u0003D\u0005D\u02e4\nD\u0003E\u0003E\u0003E\u0003E\u0007E\u02ea", "\nE\fE\u000eE\u02ed\u000bE\u0003E\u0005E\u02f0\nE\u0003E\u0005E\u02f3", "\nE\u0003F\u0003F\u0007F\u02f7\nF\fF\u000eF\u02fa\u000bF\u0003F\u0003", "F\u0007F\u02fe\nF\fF\u000eF\u0301\u000bF\u0003F\u0005F\u0304\nF\u0003", "F\u0005F\u0307\nF\u0003G\u0003G\u0003G\u0003G\u0007G\u030d\nG\fG\u000e", "G\u0310\u000bG\u0003G\u0005G\u0313\nG\u0003G\u0005G\u0316\nG\u0003H", "\u0003H\u0003H\u0005H\u031b\nH\u0003H\u0003H\u0005H\u031f\nH\u0003H", "\u0005H\u0322\nH\u0003H\u0005H\u0325\nH\u0003H\u0003H\u0003H\u0005H", "\u032a\nH\u0003H\u0005H\u032d\nH\u0005H\u032f\nH\u0003I\u0003I\u0003", "I\u0003I\u0005I\u0335\nI\u0003I\u0005I\u0338\nI\u0003I\u0003I\u0005", "I\u033c\nI\u0003I\u0003I\u0005I\u0340\nI\u0003I\u0003I\u0005I\u0344", "\nI\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005", "J\u034f\nJ\u0003K\u0003K\u0003K\u0005K\u0354\nK\u0003K\u0003K\u0003", "L\u0003L\u0003L\u0007L\u035b\nL\fL\u000eL\u035e\u000bL\u0003L\u0003", "L\u0003M\u0003M\u0003M\u0003M\u0003M\u0007M\u0367\nM\fM\u000eM\u036a", "\u000bM\u0003M\u0003M\u0003M\u0007M\u036f\nM\fM\u000eM\u0372\u000bM", "\u0003M\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0003N\u0003", "O\u0003O\u0003P\u0003P\u0003Q\u0003Q\u0003R\u0003R\u0003S\u0003S\u0003", "T\u0003T\u0003U\u0003U\u0003V\u0003V\u0003W\u0003W\u0003X\u0003X\u0003", "Y\u0003Y\u0003Z\u0003Z\u0003[\u0003[\u0003\\\u0003\\\u0003]\u0003]\u0003", "^\u0003^\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003a\u0003a\u0003", "a\u0003b\u0003b\u0003b\u0003c\u0003c\u0003c\u0003d\u0003d\u0003d\u0003", "e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003g\u0003g\u0003h\u0003h\u0003", "i\u0003i\u0003j\u0003j\u0003k\u0003k\u0003l\u0003l\u0003m\u0003m\u0003", "n\u0003n\u0003o\u0003o\u0003o\u0003p\u0003p\u0003p\u0003q\u0003q\u0003", "q\u0003r\u0003r\u0003r\u0003s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003", "u\u0003u\u0003u\u0003v\u0003v\u0003v\u0003w\u0003w\u0003w\u0003w\u0003", "x\u0003x\u0003x\u0003x\u0003y\u0003y\u0003y\u0003y\u0003y\u0003z\u0003", "z\u0003z\u0003{\u0003{\u0003{\u0003|\u0003|\u0003}\u0003}\u0003}\u0003", "}\u0003~\u0006~\u03f7\n~\r~\u000e~\u03f8\u0003~\u0003~\u0003\u007f\u0003", "\u007f\u0003\u007f\u0003\u007f\u0007\u007f\u0401\n\u007f\f\u007f\u000e", "\u007f\u0404\u000b\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f", "\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0007\u0080", "\u040f\n\u0080\f\u0080\u000e\u0080\u0412\u000b\u0080\u0003\u0080\u0003", "\u0080\u0003\u0081\u0003\u0081\u0007\u0081\u0418\n\u0081\f\u0081\u000e", "\u0081\u041b\u000b\u0081\u0003\u0082\u0003\u0082\u0005\u0082\u041f\n", "\u0082\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003", "\u0083\u0005\u0083\u0427\n\u0083\u0003\u0083\u0005\u0083\u042a\n\u0083", "\u0003\u0083\u0003\u0083\u0003\u0083\u0006\u0083\u042f\n\u0083\r\u0083", "\u000e\u0083\u0430\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003", "\u0083\u0005\u0083\u0438\n\u0083\u0003\u0084\u0003\u0084\u0003\u0084", "\u0007\u0084\u043d\n\u0084\f\u0084\u000e\u0084\u0440\u000b\u0084\u0003", "\u0084\u0005\u0084\u0443\n\u0084\u0003\u0085\u0003\u0085\u0003\u0086", "\u0003\u0086\u0007\u0086\u0449\n\u0086\f\u0086\u000e\u0086\u044c\u000b", "\u0086\u0003\u0086\u0005\u0086\u044f\n\u0086\u0003\u0087\u0003\u0087", "\u0005\u0087\u0453\n\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0003", "\u0088\u0005\u0088\u0459\n\u0088\u0004\u0370\u0402\u0002\u0089\u0003", "\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011", "\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e\u001b\u000f\u001d\u0010\u001f", "\u0011!\u0012#\u0013%\u0014\'\u0015)\u0016+\u0017-\u0018/\u00191\u001a", "3\u001b5\u001c7\u001d9\u001e;\u001f= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.", "[/]0_1a2c3e4g5i6k7m8o9q:s;u<w=y>{?}@\u007fA\u0081B\u0083C\u0085D\u0087", "E\u0089F\u008bG\u008dH\u008fI\u0091J\u0093K\u0095L\u0097M\u0099N\u009b", "O\u009dP\u009fQ\u00a1R\u00a3S\u00a5T\u00a7U\u00a9V\u00abW\u00adX\u00af", "Y\u00b1Z\u00b3[\u00b5\\\u00b7]\u00b9^\u00bb_\u00bd`\u00bfa\u00c1b\u00c3", "c\u00c5d\u00c7e\u00c9f\u00cbg\u00cdh\u00cfi\u00d1j\u00d3k\u00d5l\u00d7", "m\u00d9n\u00dbo\u00ddp\u00dfq\u00e1r\u00e3s\u00e5t\u00e7u\u00e9v\u00eb", "w\u00edx\u00efy\u00f1z\u00f3{\u00f5|\u00f7}\u00f9~\u00fb\u007f\u00fd", "\u0080\u00ff\u0081\u0101\u0082\u0103\u0002\u0105\u0002\u0107\u0002\u0109", "\u0002\u010b\u0002\u010d\u0002\u010f\u0002\u0003\u0002\u001d\u0003\u0002", "3;\u0004\u0002NNnn\u0004\u0002ZZzz\u0005\u00022;CHch\u0006\u00022;C", "Haach\u0003\u000229\u0004\u000229aa\u0004\u0002DDdd\u0003\u000223\u0004", "\u000223aa\u0006\u0002FFHHffhh\u0004\u0002RRrr\u0004\u0002--//\u0006", "\u0002\f\f\u000f\u000f))^^\u0006\u0002\f\f\u000f\u000f$$^^\u0004\u0002", "\u000b\u000b\"\"\u0004\u0002\f\f\u000f\u000f\u0005\u0002\u000b\f\u000e", "\u000f\"\"\u0004\u0002GGgg\n\u0002$$))^^ddhhppttvv\u0003\u000225\u0003", "\u00022;\u0004\u00022;aa\u0006\u0002&&C\\aac|\u0004\u0002\u0002\u0081", "\ud802\udc01\u0003\u0002\ud802\udc01\u0003\u0002\udc02\ue001\u0002\u0486", "\u0002\u0003\u0003\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002\u0002", "\u0002\u0007\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002", "\u0002\u000b\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002", "\u0002\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002", "\u0002\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002", "\u0002\u0017\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002", "\u0002\u001b\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002\u0002", "\u0002\u001f\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002\u0002", "\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003\u0002\u0002\u0002\u0002", "\'\u0003\u0002\u0002\u0002\u0002)\u0003\u0002\u0002\u0002\u0002+\u0003", "\u0002\u0002\u0002\u0002-\u0003\u0002\u0002\u0002\u0002/\u0003\u0002", "\u0002\u0002\u00021\u0003\u0002\u0002\u0002\u00023\u0003\u0002\u0002", "\u0002\u00025\u0003\u0002\u0002\u0002\u00027\u0003\u0002\u0002\u0002", "\u00029\u0003\u0002\u0002\u0002\u0002;\u0003\u0002\u0002\u0002\u0002", "=\u0003\u0002\u0002\u0002\u0002?\u0003\u0002\u0002\u0002\u0002A\u0003", "\u0002\u0002\u0002\u0002C\u0003\u0002\u0002\u0002\u0002E\u0003\u0002", "\u0002\u0002\u0002G\u0003\u0002\u0002\u0002\u0002I\u0003\u0002\u0002", "\u0002\u0002K\u0003\u0002\u0002\u0002\u0002M\u0003\u0002\u0002\u0002", "\u0002O\u0003\u0002\u0002\u0002\u0002Q\u0003\u0002\u0002\u0002\u0002", "S\u0003\u0002\u0002\u0002\u0002U\u0003\u0002\u0002\u0002\u0002W\u0003", "\u0002\u0002\u0002\u0002Y\u0003\u0002\u0002\u0002\u0002[\u0003\u0002", "\u0002\u0002\u0002]\u0003\u0002\u0002\u0002\u0002_\u0003\u0002\u0002", "\u0002\u0002a\u0003\u0002\u0002\u0002\u0002c\u0003\u0002\u0002\u0002", "\u0002e\u0003\u0002\u0002\u0002\u0002g\u0003\u0002\u0002\u0002\u0002", "i\u0003\u0002\u0002\u0002\u0002k\u0003\u0002\u0002\u0002\u0002m\u0003", "\u0002\u0002\u0002\u0002o\u0003\u0002\u0002\u0002\u0002q\u0003\u0002", "\u0002\u0002\u0002s\u0003\u0002\u0002\u0002\u0002u\u0003\u0002\u0002", "\u0002\u0002w\u0003\u0002\u0002\u0002\u0002y\u0003\u0002\u0002\u0002", "\u0002{\u0003\u0002\u0002\u0002\u0002}\u0003\u0002\u0002\u0002\u0002", "\u007f\u0003\u0002\u0002\u0002\u0002\u0081\u0003\u0002\u0002\u0002\u0002", "\u0083\u0003\u0002\u0002\u0002\u0002\u0085\u0003\u0002\u0002\u0002\u0002", "\u0087\u0003\u0002\u0002\u0002\u0002\u0089\u0003\u0002\u0002\u0002\u0002", "\u008b\u0003\u0002\u0002\u0002\u0002\u008d\u0003\u0002\u0002\u0002\u0002", "\u008f\u0003\u0002\u0002\u0002\u0002\u0091\u0003\u0002\u0002\u0002\u0002", "\u0093\u0003\u0002\u0002\u0002\u0002\u0095\u0003\u0002\u0002\u0002\u0002", "\u0097\u0003\u0002\u0002\u0002\u0002\u0099\u0003\u0002\u0002\u0002\u0002", "\u009b\u0003\u0002\u0002\u0002\u0002\u009d\u0003\u0002\u0002\u0002\u0002", "\u009f\u0003\u0002\u0002\u0002\u0002\u00a1\u0003\u0002\u0002\u0002\u0002", "\u00a3\u0003\u0002\u0002\u0002\u0002\u00a5\u0003\u0002\u0002\u0002\u0002", "\u00a7\u0003\u0002\u0002\u0002\u0002\u00a9\u0003\u0002\u0002\u0002\u0002", "\u00ab\u0003\u0002\u0002\u0002\u0002\u00ad\u0003\u0002\u0002\u0002\u0002", "\u00af\u0003\u0002\u0002\u0002\u0002\u00b1\u0003\u0002\u0002\u0002\u0002", "\u00b3\u0003\u0002\u0002\u0002\u0002\u00b5\u0003\u0002\u0002\u0002\u0002", "\u00b7\u0003\u0002\u0002\u0002\u0002\u00b9\u0003\u0002\u0002\u0002\u0002", "\u00bb\u0003\u0002\u0002\u0002\u0002\u00bd\u0003\u0002\u0002\u0002\u0002", "\u00bf\u0003\u0002\u0002\u0002\u0002\u00c1\u0003\u0002\u0002\u0002\u0002", "\u00c3\u0003\u0002\u0002\u0002\u0002\u00c5\u0003\u0002\u0002\u0002\u0002", "\u00c7\u0003\u0002\u0002\u0002\u0002\u00c9\u0003\u0002\u0002\u0002\u0002", "\u00cb\u0003\u0002\u0002\u0002\u0002\u00cd\u0003\u0002\u0002\u0002\u0002", "\u00cf\u0003\u0002\u0002\u0002\u0002\u00d1\u0003\u0002\u0002\u0002\u0002", "\u00d3\u0003\u0002\u0002\u0002\u0002\u00d5\u0003\u0002\u0002\u0002\u0002", "\u00d7\u0003\u0002\u0002\u0002\u0002\u00d9\u0003\u0002\u0002\u0002\u0002", "\u00db\u0003\u0002\u0002\u0002\u0002\u00dd\u0003\u0002\u0002\u0002\u0002", "\u00df\u0003\u0002\u0002\u0002\u0002\u00e1\u0003\u0002\u0002\u0002\u0002", "\u00e3\u0003\u0002\u0002\u0002\u0002\u00e5\u0003\u0002\u0002\u0002\u0002", "\u00e7\u0003\u0002\u0002\u0002\u0002\u00e9\u0003\u0002\u0002\u0002\u0002", "\u00eb\u0003\u0002\u0002\u0002\u0002\u00ed\u0003\u0002\u0002\u0002\u0002", "\u00ef\u0003\u0002\u0002\u0002\u0002\u00f1\u0003\u0002\u0002\u0002\u0002", "\u00f3\u0003\u0002\u0002\u0002\u0002\u00f5\u0003\u0002\u0002\u0002\u0002", "\u00f7\u0003\u0002\u0002\u0002\u0002\u00f9\u0003\u0002\u0002\u0002\u0002", "\u00fb\u0003\u0002\u0002\u0002\u0002\u00fd\u0003\u0002\u0002\u0002\u0002", "\u00ff\u0003\u0002\u0002\u0002\u0002\u0101\u0003\u0002\u0002\u0002\u0003", "\u0111\u0003\u0002\u0002\u0002\u0005\u011a\u0003\u0002\u0002\u0002\u0007", "\u0121\u0003\u0002\u0002\u0002\t\u0129\u0003\u0002\u0002\u0002\u000b", "\u012f\u0003\u0002\u0002\u0002\r\u0134\u0003\u0002\u0002\u0002\u000f", "\u0139\u0003\u0002\u0002\u0002\u0011\u013f\u0003\u0002\u0002\u0002\u0013", "\u0144\u0003\u0002\u0002\u0002\u0015\u014a\u0003\u0002\u0002\u0002\u0017", "\u0150\u0003\u0002\u0002\u0002\u0019\u0159\u0003\u0002\u0002\u0002\u001b", "\u0161\u0003\u0002\u0002\u0002\u001d\u0164\u0003\u0002\u0002\u0002\u001f", "\u016b\u0003\u0002\u0002\u0002!\u0170\u0003\u0002\u0002\u0002#\u0175", "\u0003\u0002\u0002\u0002%\u017d\u0003\u0002\u0002\u0002\'\u0183\u0003", "\u0002\u0002\u0002)\u018b\u0003\u0002\u0002\u0002+\u0191\u0003\u0002", "\u0002\u0002-\u0195\u0003\u0002\u0002\u0002/\u0198\u0003\u0002\u0002", "\u00021\u019d\u0003\u0002\u0002\u00023\u01a8\u0003\u0002\u0002\u0002", "5\u01af\u0003\u0002\u0002\u00027\u01ba\u0003\u0002\u0002\u00029\u01be", "\u0003\u0002\u0002\u0002;\u01c8\u0003\u0002\u0002\u0002=\u01cd\u0003", "\u0002\u0002\u0002?\u01d4\u0003\u0002\u0002\u0002A\u01d8\u0003\u0002", "\u0002\u0002C\u01e0\u0003\u0002\u0002\u0002E\u01e8\u0003\u0002\u0002", "\u0002G\u01f2\u0003\u0002\u0002\u0002I\u01f9\u0003\u0002\u0002\u0002", "K\u0200\u0003\u0002\u0002\u0002M\u0206\u0003\u0002\u0002\u0002O\u020d", "\u0003\u0002\u0002\u0002Q\u0216\u0003\u0002\u0002\u0002S\u021c\u0003", "\u0002\u0002\u0002U\u0223\u0003\u0002\u0002\u0002W\u0230\u0003\u0002", "\u0002\u0002Y\u0235\u0003\u0002\u0002\u0002[\u023b\u0003\u0002\u0002", "\u0002]\u0242\u0003\u0002\u0002\u0002_\u024c\u0003\u0002\u0002\u0002", "a\u0250\u0003\u0002\u0002\u0002c\u0255\u0003\u0002\u0002\u0002e\u025e", "\u0003\u0002\u0002\u0002g\u0264\u0003\u0002\u0002\u0002i\u026b\u0003", "\u0002\u0002\u0002k\u0270\u0003\u0002\u0002\u0002m\u0279\u0003\u0002", "\u0002\u0002o\u0281\u0003\u0002\u0002\u0002q\u0287\u0003\u0002\u0002", "\u0002s\u028a\u0003\u0002\u0002\u0002u\u028f\u0003\u0002\u0002\u0002", "w\u0298\u0003\u0002\u0002\u0002y\u029d\u0003\u0002\u0002\u0002{\u02a8", "\u0003\u0002\u0002\u0002}\u02ac\u0003\u0002\u0002\u0002\u007f\u02b2", "\u0003\u0002\u0002\u0002\u0081\u02b9\u0003\u0002\u0002\u0002\u0083\u02c0", "\u0003\u0002\u0002\u0002\u0085\u02c8\u0003\u0002\u0002\u0002\u0087\u02e0", "\u0003\u0002\u0002\u0002\u0089\u02e5\u0003\u0002\u0002\u0002\u008b\u02f4", "\u0003\u0002\u0002\u0002\u008d\u0308\u0003\u0002\u0002\u0002\u008f\u032e", "\u0003\u0002\u0002\u0002\u0091\u0330\u0003\u0002\u0002\u0002\u0093\u034e", "\u0003\u0002\u0002\u0002\u0095\u0350\u0003\u0002\u0002\u0002\u0097\u0357", "\u0003\u0002\u0002\u0002\u0099\u0361\u0003\u0002\u0002\u0002\u009b\u0377", "\u0003\u0002\u0002\u0002\u009d\u037c\u0003\u0002\u0002\u0002\u009f\u037e", "\u0003\u0002\u0002\u0002\u00a1\u0380\u0003\u0002\u0002\u0002\u00a3\u0382", "\u0003\u0002\u0002\u0002\u00a5\u0384\u0003\u0002\u0002\u0002\u00a7\u0386", "\u0003\u0002\u0002\u0002\u00a9\u0388\u0003\u0002\u0002\u0002\u00ab\u038a", "\u0003\u0002\u0002\u0002\u00ad\u038c\u0003\u0002\u0002\u0002\u00af\u038e", "\u0003\u0002\u0002\u0002\u00b1\u0390\u0003\u0002\u0002\u0002\u00b3\u0392", "\u0003\u0002\u0002\u0002\u00b5\u0394\u0003\u0002\u0002\u0002\u00b7\u0396", "\u0003\u0002\u0002\u0002\u00b9\u0398\u0003\u0002\u0002\u0002\u00bb\u039a", "\u0003\u0002\u0002\u0002\u00bd\u039c\u0003\u0002\u0002\u0002\u00bf\u039f", "\u0003\u0002\u0002\u0002\u00c1\u03a2\u0003\u0002\u0002\u0002\u00c3\u03a5", "\u0003\u0002\u0002\u0002\u00c5\u03a8\u0003\u0002\u0002\u0002\u00c7\u03ab", "\u0003\u0002\u0002\u0002\u00c9\u03ae\u0003\u0002\u0002\u0002\u00cb\u03b1", "\u0003\u0002\u0002\u0002\u00cd\u03b4\u0003\u0002\u0002\u0002\u00cf\u03b6", "\u0003\u0002\u0002\u0002\u00d1\u03b8\u0003\u0002\u0002\u0002\u00d3\u03ba", "\u0003\u0002\u0002\u0002\u00d5\u03bc\u0003\u0002\u0002\u0002\u00d7\u03be", "\u0003\u0002\u0002\u0002\u00d9\u03c0\u0003\u0002\u0002\u0002\u00db\u03c2", "\u0003\u0002\u0002\u0002\u00dd\u03c4\u0003\u0002\u0002\u0002\u00df\u03c7", "\u0003\u0002\u0002\u0002\u00e1\u03ca\u0003\u0002\u0002\u0002\u00e3\u03cd", "\u0003\u0002\u0002\u0002\u00e5\u03d0\u0003\u0002\u0002\u0002\u00e7\u03d3", "\u0003\u0002\u0002\u0002\u00e9\u03d6\u0003\u0002\u0002\u0002\u00eb\u03d9", "\u0003\u0002\u0002\u0002\u00ed\u03dc\u0003\u0002\u0002\u0002\u00ef\u03e0", "\u0003\u0002\u0002\u0002\u00f1\u03e4\u0003\u0002\u0002\u0002\u00f3\u03e9", "\u0003\u0002\u0002\u0002\u00f5\u03ec\u0003\u0002\u0002\u0002\u00f7\u03ef", "\u0003\u0002\u0002\u0002\u00f9\u03f1\u0003\u0002\u0002\u0002\u00fb\u03f6", "\u0003\u0002\u0002\u0002\u00fd\u03fc\u0003\u0002\u0002\u0002\u00ff\u040a", "\u0003\u0002\u0002\u0002\u0101\u0415\u0003\u0002\u0002\u0002\u0103\u041c", "\u0003\u0002\u0002\u0002\u0105\u0437\u0003\u0002\u0002\u0002\u0107\u0439", "\u0003\u0002\u0002\u0002\u0109\u0444\u0003\u0002\u0002\u0002\u010b\u0446", "\u0003\u0002\u0002\u0002\u010d\u0452\u0003\u0002\u0002\u0002\u010f\u0458", "\u0003\u0002\u0002\u0002\u0111\u0112\u0007c\u0002\u0002\u0112\u0113", "\u0007d\u0002\u0002\u0113\u0114\u0007u\u0002\u0002\u0114\u0115\u0007", "v\u0002\u0002\u0115\u0116\u0007t\u0002\u0002\u0116\u0117\u0007c\u0002", "\u0002\u0117\u0118\u0007e\u0002\u0002\u0118\u0119\u0007v\u0002\u0002", "\u0119\u0004\u0003\u0002\u0002\u0002\u011a\u011b\u0007c\u0002\u0002", "\u011b\u011c\u0007u\u0002\u0002\u011c\u011d\u0007u\u0002\u0002\u011d", "\u011e\u0007g\u0002\u0002\u011e\u011f\u0007t\u0002\u0002\u011f\u0120", "\u0007v\u0002\u0002\u0120\u0006\u0003\u0002\u0002\u0002\u0121\u0122", "\u0007d\u0002\u0002\u0122\u0123\u0007q\u0002\u0002\u0123\u0124\u0007", "q\u0002\u0002\u0124\u0125\u0007n\u0002\u0002\u0125\u0126\u0007g\u0002", "\u0002\u0126\u0127\u0007c\u0002\u0002\u0127\u0128\u0007p\u0002\u0002", "\u0128\b\u0003\u0002\u0002\u0002\u0129\u012a\u0007d\u0002\u0002\u012a", "\u012b\u0007t\u0002\u0002\u012b\u012c\u0007g\u0002\u0002\u012c\u012d", "\u0007c\u0002\u0002\u012d\u012e\u0007m\u0002\u0002\u012e\n\u0003\u0002", "\u0002\u0002\u012f\u0130\u0007d\u0002\u0002\u0130\u0131\u0007{\u0002", "\u0002\u0131\u0132\u0007v\u0002\u0002\u0132\u0133\u0007g\u0002\u0002", "\u0133\f\u0003\u0002\u0002\u0002\u0134\u0135\u0007e\u0002\u0002\u0135", "\u0136\u0007c\u0002\u0002\u0136\u0137\u0007u\u0002\u0002\u0137\u0138", "\u0007g\u0002\u0002\u0138\u000e\u0003\u0002\u0002\u0002\u0139\u013a", "\u0007e\u0002\u0002\u013a\u013b\u0007c\u0002\u0002\u013b\u013c\u0007", "v\u0002\u0002\u013c\u013d\u0007e\u0002\u0002\u013d\u013e\u0007j\u0002", "\u0002\u013e\u0010\u0003\u0002\u0002\u0002\u013f\u0140\u0007e\u0002", "\u0002\u0140\u0141\u0007j\u0002\u0002\u0141\u0142\u0007c\u0002\u0002", "\u0142\u0143\u0007t\u0002\u0002\u0143\u0012\u0003\u0002\u0002\u0002", "\u0144\u0145\u0007e\u0002\u0002\u0145\u0146\u0007n\u0002\u0002\u0146", "\u0147\u0007c\u0002\u0002\u0147\u0148\u0007u\u0002\u0002\u0148\u0149", "\u0007u\u0002\u0002\u0149\u0014\u0003\u0002\u0002\u0002\u014a\u014b", "\u0007e\u0002\u0002\u014b\u014c\u0007q\u0002\u0002\u014c\u014d\u0007", "p\u0002\u0002\u014d\u014e\u0007u\u0002\u0002\u014e\u014f\u0007v\u0002", "\u0002\u014f\u0016\u0003\u0002\u0002\u0002\u0150\u0151\u0007e\u0002", "\u0002\u0151\u0152\u0007q\u0002\u0002\u0152\u0153\u0007p\u0002\u0002", "\u0153\u0154\u0007v\u0002\u0002\u0154\u0155\u0007k\u0002\u0002\u0155", "\u0156\u0007p\u0002\u0002\u0156\u0157\u0007w\u0002\u0002\u0157\u0158", "\u0007g\u0002\u0002\u0158\u0018\u0003\u0002\u0002\u0002\u0159\u015a", "\u0007f\u0002\u0002\u015a\u015b\u0007g\u0002\u0002\u015b\u015c\u0007", "h\u0002\u0002\u015c\u015d\u0007c\u0002\u0002\u015d\u015e\u0007w\u0002", "\u0002\u015e\u015f\u0007n\u0002\u0002\u015f\u0160\u0007v\u0002\u0002", "\u0160\u001a\u0003\u0002\u0002\u0002\u0161\u0162\u0007f\u0002\u0002", "\u0162\u0163\u0007q\u0002\u0002\u0163\u001c\u0003\u0002\u0002\u0002", "\u0164\u0165\u0007f\u0002\u0002\u0165\u0166\u0007q\u0002\u0002\u0166", "\u0167\u0007w\u0002\u0002\u0167\u0168\u0007d\u0002\u0002\u0168\u0169", "\u0007n\u0002\u0002\u0169\u016a\u0007g\u0002\u0002\u016a\u001e\u0003", "\u0002\u0002\u0002\u016b\u016c\u0007g\u0002\u0002\u016c\u016d\u0007", "n\u0002\u0002\u016d\u016e\u0007u\u0002\u0002\u016e\u016f\u0007g\u0002", "\u0002\u016f \u0003\u0002\u0002\u0002\u0170\u0171\u0007g\u0002\u0002", "\u0171\u0172\u0007p\u0002\u0002\u0172\u0173\u0007w\u0002\u0002\u0173", "\u0174\u0007o\u0002\u0002\u0174\"\u0003\u0002\u0002\u0002\u0175\u0176", "\u0007g\u0002\u0002\u0176\u0177\u0007z\u0002\u0002\u0177\u0178\u0007", "v\u0002\u0002\u0178\u0179\u0007g\u0002\u0002\u0179\u017a\u0007p\u0002", "\u0002\u017a\u017b\u0007f\u0002\u0002\u017b\u017c\u0007u\u0002\u0002", "\u017c$\u0003\u0002\u0002\u0002\u017d\u017e\u0007h\u0002\u0002\u017e", "\u017f\u0007k\u0002\u0002\u017f\u0180\u0007p\u0002\u0002\u0180\u0181", "\u0007c\u0002\u0002\u0181\u0182\u0007n\u0002\u0002\u0182&\u0003\u0002", "\u0002\u0002\u0183\u0184\u0007h\u0002\u0002\u0184\u0185\u0007k\u0002", "\u0002\u0185\u0186\u0007p\u0002\u0002\u0186\u0187\u0007c\u0002\u0002", "\u0187\u0188\u0007n\u0002\u0002\u0188\u0189\u0007n\u0002\u0002\u0189", "\u018a\u0007{\u0002\u0002\u018a(\u0003\u0002\u0002\u0002\u018b\u018c", "\u0007h\u0002\u0002\u018c\u018d\u0007n\u0002\u0002\u018d\u018e\u0007", "q\u0002\u0002\u018e\u018f\u0007c\u0002\u0002\u018f\u0190\u0007v\u0002", "\u0002\u0190*\u0003\u0002\u0002\u0002\u0191\u0192\u0007h\u0002\u0002", "\u0192\u0193\u0007q\u0002\u0002\u0193\u0194\u0007t\u0002\u0002\u0194", ",\u0003\u0002\u0002\u0002\u0195\u0196\u0007k\u0002\u0002\u0196\u0197", "\u0007h\u0002\u0002\u0197.\u0003\u0002\u0002\u0002\u0198\u0199\u0007", "i\u0002\u0002\u0199\u019a\u0007q\u0002\u0002\u019a\u019b\u0007v\u0002", "\u0002\u019b\u019c\u0007q\u0002\u0002\u019c0\u0003\u0002\u0002\u0002", "\u019d\u019e\u0007k\u0002\u0002\u019e\u019f\u0007o\u0002\u0002\u019f", "\u01a0\u0007r\u0002\u0002\u01a0\u01a1\u0007n\u0002\u0002\u01a1\u01a2", "\u0007g\u0002\u0002\u01a2\u01a3\u0007o\u0002\u0002\u01a3\u01a4\u0007", "g\u0002\u0002\u01a4\u01a5\u0007p\u0002\u0002\u01a5\u01a6\u0007v\u0002", "\u0002\u01a6\u01a7\u0007u\u0002\u0002\u01a72\u0003\u0002\u0002\u0002", "\u01a8\u01a9\u0007k\u0002\u0002\u01a9\u01aa\u0007o\u0002\u0002\u01aa", "\u01ab\u0007r\u0002\u0002\u01ab\u01ac\u0007q\u0002\u0002\u01ac\u01ad", "\u0007t\u0002\u0002\u01ad\u01ae\u0007v\u0002\u0002\u01ae4\u0003\u0002", "\u0002\u0002\u01af\u01b0\u0007k\u0002\u0002\u01b0\u01b1\u0007p\u0002", "\u0002\u01b1\u01b2\u0007u\u0002\u0002\u01b2\u01b3\u0007v\u0002\u0002", "\u01b3\u01b4\u0007c\u0002\u0002\u01b4\u01b5\u0007p\u0002\u0002\u01b5", "\u01b6\u0007e\u0002\u0002\u01b6\u01b7\u0007g\u0002\u0002\u01b7\u01b8", "\u0007q\u0002\u0002\u01b8\u01b9\u0007h\u0002\u0002\u01b96\u0003\u0002", "\u0002\u0002\u01ba\u01bb\u0007k\u0002\u0002\u01bb\u01bc\u0007p\u0002", "\u0002\u01bc\u01bd\u0007v\u0002\u0002\u01bd8\u0003\u0002\u0002\u0002", "\u01be\u01bf\u0007k\u0002\u0002\u01bf\u01c0\u0007p\u0002\u0002\u01c0", "\u01c1\u0007v\u0002\u0002\u01c1\u01c2\u0007g\u0002\u0002\u01c2\u01c3", "\u0007t\u0002\u0002\u01c3\u01c4\u0007h\u0002\u0002\u01c4\u01c5\u0007", "c\u0002\u0002\u01c5\u01c6\u0007e\u0002\u0002\u01c6\u01c7\u0007g\u0002", "\u0002\u01c7:\u0003\u0002\u0002\u0002\u01c8\u01c9\u0007n\u0002\u0002", "\u01c9\u01ca\u0007q\u0002\u0002\u01ca\u01cb\u0007p\u0002\u0002\u01cb", "\u01cc\u0007i\u0002\u0002\u01cc<\u0003\u0002\u0002\u0002\u01cd\u01ce", "\u0007p\u0002\u0002\u01ce\u01cf\u0007c\u0002\u0002\u01cf\u01d0\u0007", "v\u0002\u0002\u01d0\u01d1\u0007k\u0002\u0002\u01d1\u01d2\u0007x\u0002", "\u0002\u01d2\u01d3\u0007g\u0002\u0002\u01d3>\u0003\u0002\u0002\u0002", "\u01d4\u01d5\u0007p\u0002\u0002\u01d5\u01d6\u0007g\u0002\u0002\u01d6", "\u01d7\u0007y\u0002\u0002\u01d7@\u0003\u0002\u0002\u0002\u01d8\u01d9", "\u0007r\u0002\u0002\u01d9\u01da\u0007c\u0002\u0002\u01da\u01db\u0007", "e\u0002\u0002\u01db\u01dc\u0007m\u0002\u0002\u01dc\u01dd\u0007c\u0002", "\u0002\u01dd\u01de\u0007i\u0002\u0002\u01de\u01df\u0007g\u0002\u0002", "\u01dfB\u0003\u0002\u0002\u0002\u01e0\u01e1\u0007r\u0002\u0002\u01e1", "\u01e2\u0007t\u0002\u0002\u01e2\u01e3\u0007k\u0002\u0002\u01e3\u01e4", "\u0007x\u0002\u0002\u01e4\u01e5\u0007c\u0002\u0002\u01e5\u01e6\u0007", "v\u0002\u0002\u01e6\u01e7\u0007g\u0002\u0002\u01e7D\u0003\u0002\u0002", "\u0002\u01e8\u01e9\u0007r\u0002\u0002\u01e9\u01ea\u0007t\u0002\u0002", "\u01ea\u01eb\u0007q\u0002\u0002\u01eb\u01ec\u0007v\u0002\u0002\u01ec", "\u01ed\u0007g\u0002\u0002\u01ed\u01ee\u0007e\u0002\u0002\u01ee\u01ef", "\u0007v\u0002\u0002\u01ef\u01f0\u0007g\u0002\u0002\u01f0\u01f1\u0007", "f\u0002\u0002\u01f1F\u0003\u0002\u0002\u0002\u01f2\u01f3\u0007r\u0002", "\u0002\u01f3\u01f4\u0007w\u0002\u0002\u01f4\u01f5\u0007d\u0002\u0002", "\u01f5\u01f6\u0007n\u0002\u0002\u01f6\u01f7\u0007k\u0002\u0002\u01f7", "\u01f8\u0007e\u0002\u0002\u01f8H\u0003\u0002\u0002\u0002\u01f9\u01fa", "\u0007t\u0002\u0002\u01fa\u01fb\u0007g\u0002\u0002\u01fb\u01fc\u0007", "v\u0002\u0002\u01fc\u01fd\u0007w\u0002\u0002\u01fd\u01fe\u0007t\u0002", "\u0002\u01fe\u01ff\u0007p\u0002\u0002\u01ffJ\u0003\u0002\u0002\u0002", "\u0200\u0201\u0007u\u0002\u0002\u0201\u0202\u0007j\u0002\u0002\u0202", "\u0203\u0007q\u0002\u0002\u0203\u0204\u0007t\u0002\u0002\u0204\u0205", "\u0007v\u0002\u0002\u0205L\u0003\u0002\u0002\u0002\u0206\u0207\u0007", "u\u0002\u0002\u0207\u0208\u0007v\u0002\u0002\u0208\u0209\u0007c\u0002", "\u0002\u0209\u020a\u0007v\u0002\u0002\u020a\u020b\u0007k\u0002\u0002", "\u020b\u020c\u0007e\u0002\u0002\u020cN\u0003\u0002\u0002\u0002\u020d", "\u020e\u0007u\u0002\u0002\u020e\u020f\u0007v\u0002\u0002\u020f\u0210", "\u0007t\u0002\u0002\u0210\u0211\u0007k\u0002\u0002\u0211\u0212\u0007", "e\u0002\u0002\u0212\u0213\u0007v\u0002\u0002\u0213\u0214\u0007h\u0002", "\u0002\u0214\u0215\u0007r\u0002\u0002\u0215P\u0003\u0002\u0002\u0002", "\u0216\u0217\u0007u\u0002\u0002\u0217\u0218\u0007w\u0002\u0002\u0218", "\u0219\u0007r\u0002\u0002\u0219\u021a\u0007g\u0002\u0002\u021a\u021b", "\u0007t\u0002\u0002\u021bR\u0003\u0002\u0002\u0002\u021c\u021d\u0007", "u\u0002\u0002\u021d\u021e\u0007y\u0002\u0002\u021e\u021f\u0007k\u0002", "\u0002\u021f\u0220\u0007v\u0002\u0002\u0220\u0221\u0007e\u0002\u0002", "\u0221\u0222\u0007j\u0002\u0002\u0222T\u0003\u0002\u0002\u0002\u0223", "\u0224\u0007u\u0002\u0002\u0224\u0225\u0007{\u0002\u0002\u0225\u0226", "\u0007p\u0002\u0002\u0226\u0227\u0007e\u0002\u0002\u0227\u0228\u0007", "j\u0002\u0002\u0228\u0229\u0007t\u0002\u0002\u0229\u022a\u0007q\u0002", "\u0002\u022a\u022b\u0007p\u0002\u0002\u022b\u022c\u0007k\u0002\u0002", "\u022c\u022d\u0007|\u0002\u0002\u022d\u022e\u0007g\u0002\u0002\u022e", "\u022f\u0007f\u0002\u0002\u022fV\u0003\u0002\u0002\u0002\u0230\u0231", "\u0007v\u0002\u0002\u0231\u0232\u0007j\u0002\u0002\u0232\u0233\u0007", "k\u0002\u0002\u0233\u0234\u0007u\u0002\u0002\u0234X\u0003\u0002\u0002", "\u0002\u0235\u0236\u0007v\u0002\u0002\u0236\u0237\u0007j\u0002\u0002", "\u0237\u0238\u0007t\u0002\u0002\u0238\u0239\u0007q\u0002\u0002\u0239", "\u023a\u0007y\u0002\u0002\u023aZ\u0003\u0002\u0002\u0002\u023b\u023c", "\u0007v\u0002\u0002\u023c\u023d\u0007j\u0002\u0002\u023d\u023e\u0007", "t\u0002\u0002\u023e\u023f\u0007q\u0002\u0002\u023f\u0240\u0007y\u0002", "\u0002\u0240\u0241\u0007u\u0002\u0002\u0241\\\u0003\u0002\u0002\u0002", "\u0242\u0243\u0007v\u0002\u0002\u0243\u0244\u0007t\u0002\u0002\u0244", "\u0245\u0007c\u0002\u0002\u0245\u0246\u0007p\u0002\u0002\u0246\u0247", "\u0007u\u0002\u0002\u0247\u0248\u0007k\u0002\u0002\u0248\u0249\u0007", "g\u0002\u0002\u0249\u024a\u0007p\u0002\u0002\u024a\u024b\u0007v\u0002", "\u0002\u024b^\u0003\u0002\u0002\u0002\u024c\u024d\u0007v\u0002\u0002", "\u024d\u024e\u0007t\u0002\u0002\u024e\u024f\u0007{\u0002\u0002\u024f", "`\u0003\u0002\u0002\u0002\u0250\u0251\u0007x\u0002\u0002\u0251\u0252", "\u0007q\u0002\u0002\u0252\u0253\u0007k\u0002\u0002\u0253\u0254\u0007", "f\u0002\u0002\u0254b\u0003\u0002\u0002\u0002\u0255\u0256\u0007x\u0002", "\u0002\u0256\u0257\u0007q\u0002\u0002\u0257\u0258\u0007n\u0002\u0002", "\u0258\u0259\u0007c\u0002\u0002\u0259\u025a\u0007v\u0002\u0002\u025a", "\u025b\u0007k\u0002\u0002\u025b\u025c\u0007n\u0002\u0002\u025c\u025d", "\u0007g\u0002\u0002\u025dd\u0003\u0002\u0002\u0002\u025e\u025f\u0007", "y\u0002\u0002\u025f\u0260\u0007j\u0002\u0002\u0260\u0261\u0007k\u0002", "\u0002\u0261\u0262\u0007n\u0002\u0002\u0262\u0263\u0007g\u0002\u0002", "\u0263f\u0003\u0002\u0002\u0002\u0264\u0265\u0007o\u0002\u0002\u0265", "\u0266\u0007q\u0002\u0002\u0266\u0267\u0007f\u0002\u0002\u0267\u0268", "\u0007w\u0002\u0002\u0268\u0269\u0007n\u0002\u0002\u0269\u026a\u0007", "g\u0002\u0002\u026ah\u0003\u0002\u0002\u0002\u026b\u026c\u0007q\u0002", "\u0002\u026c\u026d\u0007r\u0002\u0002\u026d\u026e\u0007g\u0002\u0002", "\u026e\u026f\u0007p\u0002\u0002\u026fj\u0003\u0002\u0002\u0002\u0270", "\u0271\u0007t\u0002\u0002\u0271\u0272\u0007g\u0002\u0002\u0272\u0273", "\u0007s\u0002\u0002\u0273\u0274\u0007w\u0002\u0002\u0274\u0275\u0007", "k\u0002\u0002\u0275\u0276\u0007t\u0002\u0002\u0276\u0277\u0007g\u0002", "\u0002\u0277\u0278\u0007u\u0002\u0002\u0278l\u0003\u0002\u0002\u0002", "\u0279\u027a\u0007g\u0002\u0002\u027a\u027b\u0007z\u0002\u0002\u027b", "\u027c\u0007r\u0002\u0002\u027c\u027d\u0007q\u0002\u0002\u027d\u027e", "\u0007t\u0002\u0002\u027e\u027f\u0007v\u0002\u0002\u027f\u0280\u0007", "u\u0002\u0002\u0280n\u0003\u0002\u0002\u0002\u0281\u0282\u0007q\u0002", "\u0002\u0282\u0283\u0007r\u0002\u0002\u0283\u0284\u0007g\u0002\u0002", "\u0284\u0285\u0007p\u0002\u0002\u0285\u0286\u0007u\u0002\u0002\u0286", "p\u0003\u0002\u0002\u0002\u0287\u0288\u0007v\u0002\u0002\u0288\u0289", "\u0007q\u0002\u0002\u0289r\u0003\u0002\u0002\u0002\u028a\u028b\u0007", "w\u0002\u0002\u028b\u028c\u0007u\u0002\u0002\u028c\u028d\u0007g\u0002", "\u0002\u028d\u028e\u0007u\u0002\u0002\u028et\u0003\u0002\u0002\u0002", "\u028f\u0290\u0007r\u0002\u0002\u0290\u0291\u0007t\u0002\u0002\u0291", "\u0292\u0007q\u0002\u0002\u0292\u0293\u0007x\u0002\u0002\u0293\u0294", "\u0007k\u0002\u0002\u0294\u0295\u0007f\u0002\u0002\u0295\u0296\u0007", "g\u0002\u0002\u0296\u0297\u0007u\u0002\u0002\u0297v\u0003\u0002\u0002", "\u0002\u0298\u0299\u0007y\u0002\u0002\u0299\u029a\u0007k\u0002\u0002", "\u029a\u029b\u0007v\u0002\u0002\u029b\u029c\u0007j\u0002\u0002\u029c", "x\u0003\u0002\u0002\u0002\u029d\u029e\u0007v\u0002\u0002\u029e\u029f", "\u0007t\u0002\u0002\u029f\u02a0\u0007c\u0002\u0002\u02a0\u02a1\u0007", "p\u0002\u0002\u02a1\u02a2\u0007u\u0002\u0002\u02a2\u02a3\u0007k\u0002", "\u0002\u02a3\u02a4\u0007v\u0002\u0002\u02a4\u02a5\u0007k\u0002\u0002", "\u02a5\u02a6\u0007x\u0002\u0002\u02a6\u02a7\u0007g\u0002\u0002\u02a7", "z\u0003\u0002\u0002\u0002\u02a8\u02a9\u0007x\u0002\u0002\u02a9\u02aa", "\u0007c\u0002\u0002\u02aa\u02ab\u0007t\u0002\u0002\u02ab|\u0003\u0002", "\u0002\u0002\u02ac\u02ad\u0007{\u0002\u0002\u02ad\u02ae\u0007k\u0002", "\u0002\u02ae\u02af\u0007g\u0002\u0002\u02af\u02b0\u0007n\u0002\u0002", "\u02b0\u02b1\u0007f\u0002\u0002\u02b1~\u0003\u0002\u0002\u0002\u02b2", "\u02b3\u0007t\u0002\u0002\u02b3\u02b4\u0007g\u0002\u0002\u02b4\u02b5", "\u0007e\u0002\u0002\u02b5\u02b6\u0007q\u0002\u0002\u02b6\u02b7\u0007", "t\u0002\u0002\u02b7\u02b8\u0007f\u0002\u0002\u02b8\u0080\u0003\u0002", "\u0002\u0002\u02b9\u02ba\u0007u\u0002\u0002\u02ba\u02bb\u0007g\u0002", "\u0002\u02bb\u02bc\u0007c\u0002\u0002\u02bc\u02bd\u0007n\u0002\u0002", "\u02bd\u02be\u0007g\u0002\u0002\u02be\u02bf\u0007f\u0002\u0002\u02bf", "\u0082\u0003\u0002\u0002\u0002\u02c0\u02c1\u0007r\u0002\u0002\u02c1", "\u02c2\u0007g\u0002\u0002\u02c2\u02c3\u0007t\u0002\u0002\u02c3\u02c4", "\u0007o\u0002\u0002\u02c4\u02c5\u0007k\u0002\u0002\u02c5\u02c6\u0007", "v\u0002\u0002\u02c6\u02c7\u0007u\u0002\u0002\u02c7\u0084\u0003\u0002", "\u0002\u0002\u02c8\u02c9\u0007p\u0002\u0002\u02c9\u02ca\u0007q\u0002", "\u0002\u02ca\u02cb\u0007p\u0002\u0002\u02cb\u02cc\u0007/\u0002\u0002", "\u02cc\u02cd\u0007u\u0002\u0002\u02cd\u02ce\u0007g\u0002\u0002\u02ce", "\u02cf\u0007c\u0002\u0002\u02cf\u02d0\u0007n\u0002\u0002\u02d0\u02d1", "\u0007g\u0002\u0002\u02d1\u02d2\u0007f\u0002\u0002\u02d2\u0086\u0003", "\u0002\u0002\u0002\u02d3\u02e1\u00072\u0002\u0002\u02d4\u02de\t\u0002", "\u0002\u0002\u02d5\u02d7\u0005\u010b\u0086\u0002\u02d6\u02d5\u0003\u0002", "\u0002\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002\u02d7\u02df\u0003\u0002", "\u0002\u0002\u02d8\u02da\u0007a\u0002\u0002\u02d9\u02d8\u0003\u0002", "\u0002\u0002\u02da\u02db\u0003\u0002\u0002\u0002\u02db\u02d9\u0003\u0002", "\u0002\u0002\u02db\u02dc\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003\u0002", "\u0002\u0002\u02dd\u02df\u0005\u010b\u0086\u0002\u02de\u02d6\u0003\u0002", "\u0002\u0002\u02de\u02d9\u0003\u0002\u0002\u0002\u02df\u02e1\u0003\u0002", "\u0002\u0002\u02e0\u02d3\u0003\u0002\u0002\u0002\u02e0\u02d4\u0003\u0002", "\u0002\u0002\u02e1\u02e3\u0003\u0002\u0002\u0002\u02e2\u02e4\t\u0003", "\u0002\u0002\u02e3\u02e2\u0003\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002", "\u0002\u0002\u02e4\u0088\u0003\u0002\u0002\u0002\u02e5\u02e6\u00072", "\u0002\u0002\u02e6\u02e7\t\u0004\u0002\u0002\u02e7\u02ef\t\u0005\u0002", "\u0002\u02e8\u02ea\t\u0006\u0002\u0002\u02e9\u02e8\u0003\u0002\u0002", "\u0002\u02ea\u02ed\u0003\u0002\u0002\u0002\u02eb\u02e9\u0003\u0002\u0002", "\u0002\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ee\u0003\u0002\u0002", "\u0002\u02ed\u02eb\u0003\u0002\u0002\u0002\u02ee\u02f0\t\u0005\u0002", "\u0002\u02ef\u02eb\u0003\u0002\u0002\u0002\u02ef\u02f0\u0003\u0002\u0002", "\u0002\u02f0\u02f2\u0003\u0002\u0002\u0002\u02f1\u02f3\t\u0003\u0002", "\u0002\u02f2\u02f1\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002", "\u0002\u02f3\u008a\u0003\u0002\u0002\u0002\u02f4\u02f8\u00072\u0002", "\u0002\u02f5\u02f7\u0007a\u0002\u0002\u02f6\u02f5\u0003\u0002\u0002", "\u0002\u02f7\u02fa\u0003\u0002\u0002\u0002\u02f8\u02f6\u0003\u0002\u0002", "\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fb\u0003\u0002\u0002", "\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fb\u0303\t\u0007\u0002", "\u0002\u02fc\u02fe\t\b\u0002\u0002\u02fd\u02fc\u0003\u0002\u0002\u0002", "\u02fe\u0301\u0003\u0002\u0002\u0002\u02ff\u02fd\u0003\u0002\u0002\u0002", "\u02ff\u0300\u0003\u0002\u0002\u0002\u0300\u0302\u0003\u0002\u0002\u0002", "\u0301\u02ff\u0003\u0002\u0002\u0002\u0302\u0304\t\u0007\u0002\u0002", "\u0303\u02ff\u0003\u0002\u0002\u0002\u0303\u0304\u0003\u0002\u0002\u0002", "\u0304\u0306\u0003\u0002\u0002\u0002\u0305\u0307\t\u0003\u0002\u0002", "\u0306\u0305\u0003\u0002\u0002\u0002\u0306\u0307\u0003\u0002\u0002\u0002", "\u0307\u008c\u0003\u0002\u0002\u0002\u0308\u0309\u00072\u0002\u0002", "\u0309\u030a\t\t\u0002\u0002\u030a\u0312\t\n\u0002\u0002\u030b\u030d", "\t\u000b\u0002\u0002\u030c\u030b\u0003\u0002\u0002\u0002\u030d\u0310", "\u0003\u0002\u0002\u0002\u030e\u030c\u0003\u0002\u0002\u0002\u030e\u030f", "\u0003\u0002\u0002\u0002\u030f\u0311\u0003\u0002\u0002\u0002\u0310\u030e", "\u0003\u0002\u0002\u0002\u0311\u0313\t\n\u0002\u0002\u0312\u030e\u0003", "\u0002\u0002\u0002\u0312\u0313\u0003\u0002\u0002\u0002\u0313\u0315\u0003", "\u0002\u0002\u0002\u0314\u0316\t\u0003\u0002\u0002\u0315\u0314\u0003", "\u0002\u0002\u0002\u0315\u0316\u0003\u0002\u0002\u0002\u0316\u008e\u0003", "\u0002\u0002\u0002\u0317\u0318\u0005\u010b\u0086\u0002\u0318\u031a\u0007", "0\u0002\u0002\u0319\u031b\u0005\u010b\u0086\u0002\u031a\u0319\u0003", "\u0002\u0002\u0002\u031a\u031b\u0003\u0002\u0002\u0002\u031b\u031f\u0003", "\u0002\u0002\u0002\u031c\u031d\u00070\u0002\u0002\u031d\u031f\u0005", "\u010b\u0086\u0002\u031e\u0317\u0003\u0002\u0002\u0002\u031e\u031c\u0003", "\u0002\u0002\u0002\u031f\u0321\u0003\u0002\u0002\u0002\u0320\u0322\u0005", "\u0103\u0082\u0002\u0321\u0320\u0003\u0002\u0002\u0002\u0321\u0322\u0003", "\u0002\u0002\u0002\u0322\u0324\u0003\u0002\u0002\u0002\u0323\u0325\t", "\f\u0002\u0002\u0324\u0323\u0003\u0002\u0002\u0002\u0324\u0325\u0003", "\u0002\u0002\u0002\u0325\u032f\u0003\u0002\u0002\u0002\u0326\u032c\u0005", "\u010b\u0086\u0002\u0327\u0329\u0005\u0103\u0082\u0002\u0328\u032a\t", "\f\u0002\u0002\u0329\u0328\u0003\u0002\u0002\u0002\u0329\u032a\u0003", "\u0002\u0002\u0002\u032a\u032d\u0003\u0002\u0002\u0002\u032b\u032d\t", "\f\u0002\u0002\u032c\u0327\u0003\u0002\u0002\u0002\u032c\u032b\u0003", "\u0002\u0002\u0002\u032d\u032f\u0003\u0002\u0002\u0002\u032e\u031e\u0003", "\u0002\u0002\u0002\u032e\u0326\u0003\u0002\u0002\u0002\u032f\u0090\u0003", "\u0002\u0002\u0002\u0330\u0331\u00072\u0002\u0002\u0331\u033b\t\u0004", "\u0002\u0002\u0332\u0334\u0005\u0107\u0084\u0002\u0333\u0335\u00070", "\u0002\u0002\u0334\u0333\u0003\u0002\u0002\u0002\u0334\u0335\u0003\u0002", "\u0002\u0002\u0335\u033c\u0003\u0002\u0002\u0002\u0336\u0338\u0005\u0107", "\u0084\u0002\u0337\u0336\u0003\u0002\u0002\u0002\u0337\u0338\u0003\u0002", "\u0002\u0002\u0338\u0339\u0003\u0002\u0002\u0002\u0339\u033a\u00070", "\u0002\u0002\u033a\u033c\u0005\u0107\u0084\u0002\u033b\u0332\u0003\u0002", "\u0002\u0002\u033b\u0337\u0003\u0002\u0002\u0002\u033c\u033d\u0003\u0002", "\u0002\u0002\u033d\u033f\t\r\u0002\u0002\u033e\u0340\t\u000e\u0002\u0002", "\u033f\u033e\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002", "\u0340\u0341\u0003\u0002\u0002\u0002\u0341\u0343\u0005\u010b\u0086\u0002", "\u0342\u0344\t\f\u0002\u0002\u0343\u0342\u0003\u0002\u0002\u0002\u0343", "\u0344\u0003\u0002\u0002\u0002\u0344\u0092\u0003\u0002\u0002\u0002\u0345", "\u0346\u0007v\u0002\u0002\u0346\u0347\u0007t\u0002\u0002\u0347\u0348", "\u0007w\u0002\u0002\u0348\u034f\u0007g\u0002\u0002\u0349\u034a\u0007", "h\u0002\u0002\u034a\u034b\u0007c\u0002\u0002\u034b\u034c\u0007n\u0002", "\u0002\u034c\u034d\u0007u\u0002\u0002\u034d\u034f\u0007g\u0002\u0002", "\u034e\u0345\u0003\u0002\u0002\u0002\u034e\u0349\u0003\u0002\u0002\u0002", "\u034f\u0094\u0003\u0002\u0002\u0002\u0350\u0353\u0007)\u0002\u0002", "\u0351\u0354\n\u000f\u0002\u0002\u0352\u0354\u0005\u0105\u0083\u0002", "\u0353\u0351\u0003\u0002\u0002\u0002\u0353\u0352\u0003\u0002\u0002\u0002", "\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u0356\u0007)\u0002\u0002", "\u0356\u0096\u0003\u0002\u0002\u0002\u0357\u035c\u0007$\u0002\u0002", "\u0358\u035b\n\u0010\u0002\u0002\u0359\u035b\u0005\u0105\u0083\u0002", "\u035a\u0358\u0003\u0002\u0002\u0002\u035a\u0359\u0003\u0002\u0002\u0002", "\u035b\u035e\u0003\u0002\u0002\u0002\u035c\u035a\u0003\u0002\u0002\u0002", "\u035c\u035d\u0003\u0002\u0002\u0002\u035d\u035f\u0003\u0002\u0002\u0002", "\u035e\u035c\u0003\u0002\u0002\u0002\u035f\u0360\u0007$\u0002\u0002", "\u0360\u0098\u0003\u0002\u0002\u0002\u0361\u0362\u0007$\u0002\u0002", "\u0362\u0363\u0007$\u0002\u0002\u0363\u0364\u0007$\u0002\u0002\u0364", "\u0368\u0003\u0002\u0002\u0002\u0365\u0367\t\u0011\u0002\u0002\u0366", "\u0365\u0003\u0002\u0002\u0002\u0367\u036a\u0003\u0002\u0002\u0002\u0368", "\u0366\u0003\u0002\u0002\u0002\u0368\u0369\u0003\u0002\u0002\u0002\u0369", "\u036b\u0003\u0002\u0002\u0002\u036a\u0368\u0003\u0002\u0002\u0002\u036b", "\u0370\t\u0012\u0002\u0002\u036c\u036f\u000b\u0002\u0002\u0002\u036d", "\u036f\u0005\u0105\u0083\u0002\u036e\u036c\u0003\u0002\u0002\u0002\u036e", "\u036d\u0003\u0002\u0002\u0002\u036f\u0372\u0003\u0002\u0002\u0002\u0370", "\u0371\u0003\u0002\u0002\u0002\u0370\u036e\u0003\u0002\u0002\u0002\u0371", "\u0373\u0003\u0002\u0002\u0002\u0372\u0370\u0003\u0002\u0002\u0002\u0373", "\u0374\u0007$\u0002\u0002\u0374\u0375\u0007$\u0002\u0002\u0375\u0376", "\u0007$\u0002\u0002\u0376\u009a\u0003\u0002\u0002\u0002\u0377\u0378", "\u0007p\u0002\u0002\u0378\u0379\u0007w\u0002\u0002\u0379\u037a\u0007", "n\u0002\u0002\u037a\u037b\u0007n\u0002\u0002\u037b\u009c\u0003\u0002", "\u0002\u0002\u037c\u037d\u0007*\u0002\u0002\u037d\u009e\u0003\u0002", "\u0002\u0002\u037e\u037f\u0007+\u0002\u0002\u037f\u00a0\u0003\u0002", "\u0002\u0002\u0380\u0381\u0007}\u0002\u0002\u0381\u00a2\u0003\u0002", "\u0002\u0002\u0382\u0383\u0007\u007f\u0002\u0002\u0383\u00a4\u0003\u0002", "\u0002\u0002\u0384\u0385\u0007]\u0002\u0002\u0385\u00a6\u0003\u0002", "\u0002\u0002\u0386\u0387\u0007_\u0002\u0002\u0387\u00a8\u0003\u0002", "\u0002\u0002\u0388\u0389\u0007=\u0002\u0002\u0389\u00aa\u0003\u0002", "\u0002\u0002\u038a\u038b\u0007.\u0002\u0002\u038b\u00ac\u0003\u0002", "\u0002\u0002\u038c\u038d\u00070\u0002\u0002\u038d\u00ae\u0003\u0002", "\u0002\u0002\u038e\u038f\u0007?\u0002\u0002\u038f\u00b0\u0003\u0002", "\u0002\u0002\u0390\u0391\u0007@\u0002\u0002\u0391\u00b2\u0003\u0002", "\u0002\u0002\u0392\u0393\u0007>\u0002\u0002\u0393\u00b4\u0003\u0002", "\u0002\u0002\u0394\u0395\u0007#\u0002\u0002\u0395\u00b6\u0003\u0002", "\u0002\u0002\u0396\u0397\u0007\u0080\u0002\u0002\u0397\u00b8\u0003\u0002", "\u0002\u0002\u0398\u0399\u0007A\u0002\u0002\u0399\u00ba\u0003\u0002", "\u0002\u0002\u039a\u039b\u0007<\u0002\u0002\u039b\u00bc\u0003\u0002", "\u0002\u0002\u039c\u039d\u0007?\u0002\u0002\u039d\u039e\u0007?\u0002", "\u0002\u039e\u00be\u0003\u0002\u0002\u0002\u039f\u03a0\u0007>\u0002", "\u0002\u03a0\u03a1\u0007?\u0002\u0002\u03a1\u00c0\u0003\u0002\u0002", "\u0002\u03a2\u03a3\u0007@\u0002\u0002\u03a3\u03a4\u0007?\u0002\u0002", "\u03a4\u00c2\u0003\u0002\u0002\u0002\u03a5\u03a6\u0007#\u0002\u0002", "\u03a6\u03a7\u0007?\u0002\u0002\u03a7\u00c4\u0003\u0002\u0002\u0002", "\u03a8\u03a9\u0007(\u0002\u0002\u03a9\u03aa\u0007(\u0002\u0002\u03aa", "\u00c6\u0003\u0002\u0002\u0002\u03ab\u03ac\u0007~\u0002\u0002\u03ac", "\u03ad\u0007~\u0002\u0002\u03ad\u00c8\u0003\u0002\u0002\u0002\u03ae", "\u03af\u0007-\u0002\u0002\u03af\u03b0\u0007-\u0002\u0002\u03b0\u00ca", "\u0003\u0002\u0002\u0002\u03b1\u03b2\u0007/\u0002\u0002\u03b2\u03b3", "\u0007/\u0002\u0002\u03b3\u00cc\u0003\u0002\u0002\u0002\u03b4\u03b5", "\u0007-\u0002\u0002\u03b5\u00ce\u0003\u0002\u0002\u0002\u03b6\u03b7", "\u0007/\u0002\u0002\u03b7\u00d0\u0003\u0002\u0002\u0002\u03b8\u03b9", "\u0007,\u0002\u0002\u03b9\u00d2\u0003\u0002\u0002\u0002\u03ba\u03bb", "\u00071\u0002\u0002\u03bb\u00d4\u0003\u0002\u0002\u0002\u03bc\u03bd", "\u0007(\u0002\u0002\u03bd\u00d6\u0003\u0002\u0002\u0002\u03be\u03bf", "\u0007~\u0002\u0002\u03bf\u00d8\u0003\u0002\u0002\u0002\u03c0\u03c1", "\u0007`\u0002\u0002\u03c1\u00da\u0003\u0002\u0002\u0002\u03c2\u03c3", "\u0007\'\u0002\u0002\u03c3\u00dc\u0003\u0002\u0002\u0002\u03c4\u03c5", "\u0007-\u0002\u0002\u03c5\u03c6\u0007?\u0002\u0002\u03c6\u00de\u0003", "\u0002\u0002\u0002\u03c7\u03c8\u0007/\u0002\u0002\u03c8\u03c9\u0007", "?\u0002\u0002\u03c9\u00e0\u0003\u0002\u0002\u0002\u03ca\u03cb\u0007", ",\u0002\u0002\u03cb\u03cc\u0007?\u0002\u0002\u03cc\u00e2\u0003\u0002", "\u0002\u0002\u03cd\u03ce\u00071\u0002\u0002\u03ce\u03cf\u0007?\u0002", "\u0002\u03cf\u00e4\u0003\u0002\u0002\u0002\u03d0\u03d1\u0007(\u0002", "\u0002\u03d1\u03d2\u0007?\u0002\u0002\u03d2\u00e6\u0003\u0002\u0002", "\u0002\u03d3\u03d4\u0007~\u0002\u0002\u03d4\u03d5\u0007?\u0002\u0002", "\u03d5\u00e8\u0003\u0002\u0002\u0002\u03d6\u03d7\u0007`\u0002\u0002", "\u03d7\u03d8\u0007?\u0002\u0002\u03d8\u00ea\u0003\u0002\u0002\u0002", "\u03d9\u03da\u0007\'\u0002\u0002\u03da\u03db\u0007?\u0002\u0002\u03db", "\u00ec\u0003\u0002\u0002\u0002\u03dc\u03dd\u0007>\u0002\u0002\u03dd", "\u03de\u0007>\u0002\u0002\u03de\u03df\u0007?\u0002\u0002\u03df\u00ee", "\u0003\u0002\u0002\u0002\u03e0\u03e1\u0007@\u0002\u0002\u03e1\u03e2", "\u0007@\u0002\u0002\u03e2\u03e3\u0007?\u0002\u0002\u03e3\u00f0\u0003", "\u0002\u0002\u0002\u03e4\u03e5\u0007@\u0002\u0002\u03e5\u03e6\u0007", "@\u0002\u0002\u03e6\u03e7\u0007@\u0002\u0002\u03e7\u03e8\u0007?\u0002", "\u0002\u03e8\u00f2\u0003\u0002\u0002\u0002\u03e9\u03ea\u0007/\u0002", "\u0002\u03ea\u03eb\u0007@\u0002\u0002\u03eb\u00f4\u0003\u0002\u0002", "\u0002\u03ec\u03ed\u0007<\u0002\u0002\u03ed\u03ee\u0007<\u0002\u0002", "\u03ee\u00f6\u0003\u0002\u0002\u0002\u03ef\u03f0\u0007B\u0002\u0002", "\u03f0\u00f8\u0003\u0002\u0002\u0002\u03f1\u03f2\u00070\u0002\u0002", "\u03f2\u03f3\u00070\u0002\u0002\u03f3\u03f4\u00070\u0002\u0002\u03f4", "\u00fa\u0003\u0002\u0002\u0002\u03f5\u03f7\t\u0013\u0002\u0002\u03f6", "\u03f5\u0003\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002\u0002\u03f8", "\u03f6\u0003\u0002\u0002\u0002\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9", "\u03fa\u0003\u0002\u0002\u0002\u03fa\u03fb\b~\u0002\u0002\u03fb\u00fc", "\u0003\u0002\u0002\u0002\u03fc\u03fd\u00071\u0002\u0002\u03fd\u03fe", "\u0007,\u0002\u0002\u03fe\u0402\u0003\u0002\u0002\u0002\u03ff\u0401", "\u000b\u0002\u0002\u0002\u0400\u03ff\u0003\u0002\u0002\u0002\u0401\u0404", "\u0003\u0002\u0002\u0002\u0402\u0403\u0003\u0002\u0002\u0002\u0402\u0400", "\u0003\u0002\u0002\u0002\u0403\u0405\u0003\u0002\u0002\u0002\u0404\u0402", "\u0003\u0002\u0002\u0002\u0405\u0406\u0007,\u0002\u0002\u0406\u0407", "\u00071\u0002\u0002\u0407\u0408\u0003\u0002\u0002\u0002\u0408\u0409", "\b\u007f\u0002\u0002\u0409\u00fe\u0003\u0002\u0002\u0002\u040a\u040b", "\u00071\u0002\u0002\u040b\u040c\u00071\u0002\u0002\u040c\u0410\u0003", "\u0002\u0002\u0002\u040d\u040f\n\u0012\u0002\u0002\u040e\u040d\u0003", "\u0002\u0002\u0002\u040f\u0412\u0003\u0002\u0002\u0002\u0410\u040e\u0003", "\u0002\u0002\u0002\u0410\u0411\u0003\u0002\u0002\u0002\u0411\u0413\u0003", "\u0002\u0002\u0002\u0412\u0410\u0003\u0002\u0002\u0002\u0413\u0414\b", "\u0080\u0002\u0002\u0414\u0100\u0003\u0002\u0002\u0002\u0415\u0419\u0005", "\u010f\u0088\u0002\u0416\u0418\u0005\u010d\u0087\u0002\u0417\u0416\u0003", "\u0002\u0002\u0002\u0418\u041b\u0003\u0002\u0002\u0002\u0419\u0417\u0003", "\u0002\u0002\u0002\u0419\u041a\u0003\u0002\u0002\u0002\u041a\u0102\u0003", "\u0002\u0002\u0002\u041b\u0419\u0003\u0002\u0002\u0002\u041c\u041e\t", "\u0014\u0002\u0002\u041d\u041f\t\u000e\u0002\u0002\u041e\u041d\u0003", "\u0002\u0002\u0002\u041e\u041f\u0003\u0002\u0002\u0002\u041f\u0420\u0003", "\u0002\u0002\u0002\u0420\u0421\u0005\u010b\u0086\u0002\u0421\u0104\u0003", "\u0002\u0002\u0002\u0422\u0423\u0007^\u0002\u0002\u0423\u0438\t\u0015", "\u0002\u0002\u0424\u0429\u0007^\u0002\u0002\u0425\u0427\t\u0016\u0002", "\u0002\u0426\u0425\u0003\u0002\u0002\u0002\u0426\u0427\u0003\u0002\u0002", "\u0002\u0427\u0428\u0003\u0002\u0002\u0002\u0428\u042a\t\u0007\u0002", "\u0002\u0429\u0426\u0003\u0002\u0002\u0002\u0429\u042a\u0003\u0002\u0002", "\u0002\u042a\u042b\u0003\u0002\u0002\u0002\u042b\u0438\t\u0007\u0002", "\u0002\u042c\u042e\u0007^\u0002\u0002\u042d\u042f\u0007w\u0002\u0002", "\u042e\u042d\u0003\u0002\u0002\u0002\u042f\u0430\u0003\u0002\u0002\u0002", "\u0430\u042e\u0003\u0002\u0002\u0002\u0430\u0431\u0003\u0002\u0002\u0002", "\u0431\u0432\u0003\u0002\u0002\u0002\u0432\u0433\u0005\u0109\u0085\u0002", "\u0433\u0434\u0005\u0109\u0085\u0002\u0434\u0435\u0005\u0109\u0085\u0002", "\u0435\u0436\u0005\u0109\u0085\u0002\u0436\u0438\u0003\u0002\u0002\u0002", "\u0437\u0422\u0003\u0002\u0002\u0002\u0437\u0424\u0003\u0002\u0002\u0002", "\u0437\u042c\u0003\u0002\u0002\u0002\u0438\u0106\u0003\u0002\u0002\u0002", "\u0439\u0442\u0005\u0109\u0085\u0002\u043a\u043d\u0005\u0109\u0085\u0002", "\u043b\u043d\u0007a\u0002\u0002\u043c\u043a\u0003\u0002\u0002\u0002", "\u043c\u043b\u0003\u0002\u0002\u0002\u043d\u0440\u0003\u0002\u0002\u0002", "\u043e\u043c\u0003\u0002\u0002\u0002\u043e\u043f\u0003\u0002\u0002\u0002", "\u043f\u0441\u0003\u0002\u0002\u0002\u0440\u043e\u0003\u0002\u0002\u0002", "\u0441\u0443\u0005\u0109\u0085\u0002\u0442\u043e\u0003\u0002\u0002\u0002", "\u0442\u0443\u0003\u0002\u0002\u0002\u0443\u0108\u0003\u0002\u0002\u0002", "\u0444\u0445\t\u0005\u0002\u0002\u0445\u010a\u0003\u0002\u0002\u0002", "\u0446\u044e\t\u0017\u0002\u0002\u0447\u0449\t\u0018\u0002\u0002\u0448", "\u0447\u0003\u0002\u0002\u0002\u0449\u044c\u0003\u0002\u0002\u0002\u044a", "\u0448\u0003\u0002\u0002\u0002\u044a\u044b\u0003\u0002\u0002\u0002\u044b", "\u044d\u0003\u0002\u0002\u0002\u044c\u044a\u0003\u0002\u0002\u0002\u044d", "\u044f\t\u0017\u0002\u0002\u044e\u044a\u0003\u0002\u0002\u0002\u044e", "\u044f\u0003\u0002\u0002\u0002\u044f\u010c\u0003\u0002\u0002\u0002\u0450", "\u0453\u0005\u010f\u0088\u0002\u0451\u0453\t\u0017\u0002\u0002\u0452", "\u0450\u0003\u0002\u0002\u0002\u0452\u0451\u0003\u0002\u0002\u0002\u0453", "\u010e\u0003\u0002\u0002\u0002\u0454\u0459\t\u0019\u0002\u0002\u0455", "\u0459\n\u001a\u0002\u0002\u0456\u0457\t\u001b\u0002\u0002\u0457\u0459", "\t\u001c\u0002\u0002\u0458\u0454\u0003\u0002\u0002\u0002\u0458\u0455", "\u0003\u0002\u0002\u0002\u0458\u0456\u0003\u0002\u0002\u0002\u0459\u0110", "\u0003\u0002\u0002\u00025\u0002\u02d6\u02db\u02de\u02e0\u02e3\u02eb", "\u02ef\u02f2\u02f8\u02ff\u0303\u0306\u030e\u0312\u0315\u031a\u031e\u0321", "\u0324\u0329\u032c\u032e\u0334\u0337\u033b\u033f\u0343\u034e\u0353\u035a", "\u035c\u0368\u036e\u0370\u03f8\u0402\u0410\u0419\u041e\u0426\u0429\u0430", "\u0437\u043c\u043e\u0442\u044a\u044e\u0452\u0458\u0003\u0002\u0003\u0002"].join("");
const atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new _antlr.default.dfa.DFA(ds, index));

class JavaLexer extends _antlr.default.Lexer {
  static grammarFileName = "JavaLexer.g4";
  static channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];
  static modeNames = ["DEFAULT_MODE"];
  static literalNames = [null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", "'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", "'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", "'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'", "'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'", "'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", "'transient'", "'try'", "'void'", "'volatile'", "'while'", "'module'", "'open'", "'requires'", "'exports'", "'opens'", "'to'", "'uses'", "'provides'", "'with'", "'transitive'", "'var'", "'yield'", "'record'", "'sealed'", "'permits'", "'non-sealed'", null, null, null, null, null, null, null, null, null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='", "'->'", "'::'", "'@'", "'...'"];
  static symbolicNames = [null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", "OPENS", "TO", "USES", "PROVIDES", "WITH", "TRANSITIVE", "VAR", "YIELD", "RECORD", "SEALED", "PERMITS", "NON_SEALED", "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER"];
  static ruleNames = ["ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", "OPENS", "TO", "USES", "PROVIDES", "WITH", "TRANSITIVE", "VAR", "YIELD", "RECORD", "SEALED", "PERMITS", "NON_SEALED", "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "ExponentPart", "EscapeSequence", "HexDigits", "HexDigit", "Digits", "LetterOrDigit", "Letter"];

  constructor(input) {
    super(input);
    this._interp = new _antlr.default.atn.LexerATNSimulator(this, atn, decisionsToDFA, new _antlr.default.PredictionContextCache());
  }

  get atn() {
    return atn;
  }

}

exports.default = JavaLexer;
JavaLexer.EOF = _antlr.default.Token.EOF;
JavaLexer.ABSTRACT = 1;
JavaLexer.ASSERT = 2;
JavaLexer.BOOLEAN = 3;
JavaLexer.BREAK = 4;
JavaLexer.BYTE = 5;
JavaLexer.CASE = 6;
JavaLexer.CATCH = 7;
JavaLexer.CHAR = 8;
JavaLexer.CLASS = 9;
JavaLexer.CONST = 10;
JavaLexer.CONTINUE = 11;
JavaLexer.DEFAULT = 12;
JavaLexer.DO = 13;
JavaLexer.DOUBLE = 14;
JavaLexer.ELSE = 15;
JavaLexer.ENUM = 16;
JavaLexer.EXTENDS = 17;
JavaLexer.FINAL = 18;
JavaLexer.FINALLY = 19;
JavaLexer.FLOAT = 20;
JavaLexer.FOR = 21;
JavaLexer.IF = 22;
JavaLexer.GOTO = 23;
JavaLexer.IMPLEMENTS = 24;
JavaLexer.IMPORT = 25;
JavaLexer.INSTANCEOF = 26;
JavaLexer.INT = 27;
JavaLexer.INTERFACE = 28;
JavaLexer.LONG = 29;
JavaLexer.NATIVE = 30;
JavaLexer.NEW = 31;
JavaLexer.PACKAGE = 32;
JavaLexer.PRIVATE = 33;
JavaLexer.PROTECTED = 34;
JavaLexer.PUBLIC = 35;
JavaLexer.RETURN = 36;
JavaLexer.SHORT = 37;
JavaLexer.STATIC = 38;
JavaLexer.STRICTFP = 39;
JavaLexer.SUPER = 40;
JavaLexer.SWITCH = 41;
JavaLexer.SYNCHRONIZED = 42;
JavaLexer.THIS = 43;
JavaLexer.THROW = 44;
JavaLexer.THROWS = 45;
JavaLexer.TRANSIENT = 46;
JavaLexer.TRY = 47;
JavaLexer.VOID = 48;
JavaLexer.VOLATILE = 49;
JavaLexer.WHILE = 50;
JavaLexer.MODULE = 51;
JavaLexer.OPEN = 52;
JavaLexer.REQUIRES = 53;
JavaLexer.EXPORTS = 54;
JavaLexer.OPENS = 55;
JavaLexer.TO = 56;
JavaLexer.USES = 57;
JavaLexer.PROVIDES = 58;
JavaLexer.WITH = 59;
JavaLexer.TRANSITIVE = 60;
JavaLexer.VAR = 61;
JavaLexer.YIELD = 62;
JavaLexer.RECORD = 63;
JavaLexer.SEALED = 64;
JavaLexer.PERMITS = 65;
JavaLexer.NON_SEALED = 66;
JavaLexer.DECIMAL_LITERAL = 67;
JavaLexer.HEX_LITERAL = 68;
JavaLexer.OCT_LITERAL = 69;
JavaLexer.BINARY_LITERAL = 70;
JavaLexer.FLOAT_LITERAL = 71;
JavaLexer.HEX_FLOAT_LITERAL = 72;
JavaLexer.BOOL_LITERAL = 73;
JavaLexer.CHAR_LITERAL = 74;
JavaLexer.STRING_LITERAL = 75;
JavaLexer.TEXT_BLOCK = 76;
JavaLexer.NULL_LITERAL = 77;
JavaLexer.LPAREN = 78;
JavaLexer.RPAREN = 79;
JavaLexer.LBRACE = 80;
JavaLexer.RBRACE = 81;
JavaLexer.LBRACK = 82;
JavaLexer.RBRACK = 83;
JavaLexer.SEMI = 84;
JavaLexer.COMMA = 85;
JavaLexer.DOT = 86;
JavaLexer.ASSIGN = 87;
JavaLexer.GT = 88;
JavaLexer.LT = 89;
JavaLexer.BANG = 90;
JavaLexer.TILDE = 91;
JavaLexer.QUESTION = 92;
JavaLexer.COLON = 93;
JavaLexer.EQUAL = 94;
JavaLexer.LE = 95;
JavaLexer.GE = 96;
JavaLexer.NOTEQUAL = 97;
JavaLexer.AND = 98;
JavaLexer.OR = 99;
JavaLexer.INC = 100;
JavaLexer.DEC = 101;
JavaLexer.ADD = 102;
JavaLexer.SUB = 103;
JavaLexer.MUL = 104;
JavaLexer.DIV = 105;
JavaLexer.BITAND = 106;
JavaLexer.BITOR = 107;
JavaLexer.CARET = 108;
JavaLexer.MOD = 109;
JavaLexer.ADD_ASSIGN = 110;
JavaLexer.SUB_ASSIGN = 111;
JavaLexer.MUL_ASSIGN = 112;
JavaLexer.DIV_ASSIGN = 113;
JavaLexer.AND_ASSIGN = 114;
JavaLexer.OR_ASSIGN = 115;
JavaLexer.XOR_ASSIGN = 116;
JavaLexer.MOD_ASSIGN = 117;
JavaLexer.LSHIFT_ASSIGN = 118;
JavaLexer.RSHIFT_ASSIGN = 119;
JavaLexer.URSHIFT_ASSIGN = 120;
JavaLexer.ARROW = 121;
JavaLexer.COLONCOLON = 122;
JavaLexer.AT = 123;
JavaLexer.ELLIPSIS = 124;
JavaLexer.WS = 125;
JavaLexer.COMMENT = 126;
JavaLexer.LINE_COMMENT = 127;
JavaLexer.IDENTIFIER = 128;

},{"antlr4":42}],139:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _antlr=_interopRequireDefault(require("antlr4"));var _JavaParserListener=_interopRequireDefault(require("./JavaParserListener.js"));var _JavaParserVisitor=_interopRequireDefault(require("./JavaParserVisitor.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// Generated from grammars/JavaParser.g4 by ANTLR 4.9.2
// jshint ignore: start
const serializedATN=["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786","\u5964\u0003\u0082\u06e2\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004","\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t","\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004","\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010","\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013","\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017","\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a","\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e","\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#","\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004","*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004","1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004","8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004","?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004","F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004","M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004","T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004","[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004","b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004","i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004","p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004","w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0003","\u0002\u0005\u0002\u00fc\n\u0002\u0003\u0002\u0007\u0002\u00ff\n\u0002","\f\u0002\u000e\u0002\u0102\u000b\u0002\u0003\u0002\u0007\u0002\u0105","\n\u0002\f\u0002\u000e\u0002\u0108\u000b\u0002\u0003\u0002\u0003\u0002","\u0003\u0002\u0005\u0002\u010d\n\u0002\u0003\u0003\u0007\u0003\u0110","\n\u0003\f\u0003\u000e\u0003\u0113\u000b\u0003\u0003\u0003\u0003\u0003","\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u011b\n","\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u0120\n\u0004","\u0003\u0004\u0003\u0004\u0003\u0005\u0007\u0005\u0125\n\u0005\f\u0005","\u000e\u0005\u0128\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003","\u0005\u0003\u0005\u0005\u0005\u012f\n\u0005\u0003\u0005\u0005\u0005","\u0132\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003","\u0006\u0005\u0006\u0139\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007","\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007","\u0003\u0007\u0005\u0007\u0145\n\u0007\u0003\b\u0003\b\u0005\b\u0149","\n\b\u0003\t\u0003\t\u0003\t\u0005\t\u014e\n\t\u0003\t\u0003\t\u0005","\t\u0152\n\t\u0003\t\u0003\t\u0005\t\u0156\n\t\u0003\t\u0003\t\u0005","\t\u015a\n\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n","\u0162\n\n\f\n\u000e\n\u0165\u000b\n\u0003\n\u0003\n\u0003\u000b\u0007","\u000b\u016a\n\u000b\f\u000b\u000e\u000b\u016d\u000b\u000b\u0003\u000b","\u0003\u000b\u0003\u000b\u0007\u000b\u0172\n\u000b\f\u000b\u000e\u000b","\u0175\u000b\u000b\u0003\u000b\u0005\u000b\u0178\n\u000b\u0003\f\u0003","\f\u0003\f\u0007\f\u017d\n\f\f\f\u000e\f\u0180\u000b\f\u0003\r\u0003","\r\u0003\r\u0003\r\u0005\r\u0186\n\r\u0003\r\u0003\r\u0005\r\u018a\n","\r\u0003\r\u0005\r\u018d\n\r\u0003\r\u0005\r\u0190\n\r\u0003\r\u0003","\r\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u0197\n\u000e\f\u000e","\u000e\u000e\u019a\u000b\u000e\u0003\u000f\u0007\u000f\u019d\n\u000f","\f\u000f\u000e\u000f\u01a0\u000b\u000f\u0003\u000f\u0003\u000f\u0005","\u000f\u01a4\n\u000f\u0003\u000f\u0005\u000f\u01a7\n\u000f\u0003\u0010","\u0003\u0010\u0007\u0010\u01ab\n\u0010\f\u0010\u000e\u0010\u01ae\u000b","\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u01b3\n\u0011","\u0003\u0011\u0003\u0011\u0005\u0011\u01b7\n\u0011\u0003\u0011\u0003","\u0011\u0003\u0012\u0003\u0012\u0007\u0012\u01bd\n\u0012\f\u0012\u000e","\u0012\u01c0\u000b\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013","\u0007\u0013\u01c6\n\u0013\f\u0013\u000e\u0013\u01c9\u000b\u0013\u0003","\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0005\u0014\u01cf\n\u0014","\u0003\u0014\u0003\u0014\u0007\u0014\u01d3\n\u0014\f\u0014\u000e\u0014","\u01d6\u000b\u0014\u0003\u0014\u0005\u0014\u01d9\n\u0014\u0003\u0015","\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015","\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u01e5\n\u0015\u0003","\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u01ec","\n\u0016\f\u0016\u000e\u0016\u01ef\u000b\u0016\u0003\u0016\u0003\u0016","\u0005\u0016\u01f3\n\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003","\u0017\u0005\u0017\u01f9\n\u0017\u0003\u0018\u0003\u0018\u0005\u0018","\u01fd\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003","\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005","\u001b\u0209\n\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c","\u0003\u001c\u0003\u001c\u0003\u001d\u0007\u001d\u0212\n\u001d\f\u001d","\u000e\u001d\u0215\u000b\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0219","\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e","\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0223\n\u001e\u0003","\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u0229\n\u001f","\f\u001f\u000e\u001f\u022c\u000b\u001f\u0003\u001f\u0003\u001f\u0003"," \u0003 \u0003 \u0007 \u0233\n \f \u000e \u0236\u000b \u0003 \u0003"," \u0003 \u0003!\u0007!\u023c\n!\f!\u000e!\u023f\u000b!\u0003!\u0003","!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0249\n\"","\u0003#\u0007#\u024c\n#\f#\u000e#\u024f\u000b#\u0003#\u0003#\u0003#","\u0003$\u0007$\u0255\n$\f$\u000e$\u0258\u000b$\u0003$\u0003$\u0003$","\u0003$\u0003$\u0007$\u025f\n$\f$\u000e$\u0262\u000b$\u0003$\u0003$","\u0005$\u0266\n$\u0003$\u0003$\u0003%\u0003%\u0003%\u0007%\u026d\n%","\f%\u000e%\u0270\u000b%\u0003&\u0003&\u0003&\u0005&\u0275\n&\u0003\'","\u0003\'\u0003\'\u0007\'\u027a\n\'\f\'\u000e\'\u027d\u000b\'\u0003(","\u0003(\u0005(\u0281\n(\u0003)\u0003)\u0003)\u0003)\u0007)\u0287\n)","\f)\u000e)\u028a\u000b)\u0003)\u0005)\u028d\n)\u0005)\u028f\n)\u0003",")\u0003)\u0003*\u0003*\u0005*\u0295\n*\u0003*\u0003*\u0003*\u0005*\u029a","\n*\u0007*\u029c\n*\f*\u000e*\u029f\u000b*\u0003+\u0003+\u0007+\u02a3","\n+\f+\u000e+\u02a6\u000b+\u0003+\u0003+\u0003+\u0005+\u02ab\n+\u0005","+\u02ad\n+\u0003,\u0003,\u0003,\u0007,\u02b2\n,\f,\u000e,\u02b5\u000b",",\u0003-\u0003-\u0005-\u02b9\n-\u0003-\u0003-\u0003-\u0005-\u02be\n","-\u0003-\u0005-\u02c1\n-\u0005-\u02c3\n-\u0003-\u0003-\u0003.\u0003",".\u0003.\u0003.\u0007.\u02cb\n.\f.\u000e.\u02ce\u000b.\u0003.\u0003",".\u0003/\u0003/\u0003/\u0007/\u02d5\n/\f/\u000e/\u02d8\u000b/\u0003","/\u0003/\u0005/\u02dc\n/\u0003/\u0005/\u02df\n/\u00030\u00070\u02e2","\n0\f0\u000e0\u02e5\u000b0\u00030\u00030\u00030\u00031\u00071\u02eb","\n1\f1\u000e1\u02ee\u000b1\u00031\u00031\u00071\u02f2\n1\f1\u000e1\u02f5","\u000b1\u00031\u00031\u00031\u00032\u00032\u00032\u00072\u02fd\n2\f","2\u000e2\u0300\u000b2\u00033\u00073\u0303\n3\f3\u000e3\u0306\u000b3","\u00033\u00033\u00033\u00034\u00034\u00034\u00074\u030e\n4\f4\u000e","4\u0311\u000b4\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0005","5\u031a\n5\u00036\u00036\u00037\u00037\u00038\u00038\u00038\u00078\u0323","\n8\f8\u000e8\u0326\u000b8\u00038\u00038\u00038\u00039\u00039\u0003","9\u00059\u032e\n9\u00039\u00039\u00039\u00059\u0333\n9\u00039\u0005","9\u0336\n9\u0003:\u0003:\u0003:\u0007:\u033b\n:\f:\u000e:\u033e\u000b",":\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0005<\u0347\n<\u0003","=\u0003=\u0003=\u0003=\u0007=\u034d\n=\f=\u000e=\u0350\u000b=\u0005","=\u0352\n=\u0003=\u0005=\u0355\n=\u0003=\u0003=\u0003>\u0003>\u0003",">\u0003>\u0003>\u0003?\u0003?\u0007?\u0360\n?\f?\u000e?\u0363\u000b","?\u0003?\u0003?\u0003@\u0007@\u0368\n@\f@\u000e@\u036b\u000b@\u0003","@\u0003@\u0005@\u036f\n@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005","A\u0377\nA\u0003A\u0003A\u0005A\u037b\nA\u0003A\u0003A\u0005A\u037f","\nA\u0003A\u0003A\u0005A\u0383\nA\u0003A\u0003A\u0005A\u0387\nA\u0005","A\u0389\nA\u0003B\u0003B\u0005B\u038d\nB\u0003C\u0003C\u0003C\u0003","C\u0005C\u0393\nC\u0003D\u0003D\u0003E\u0003E\u0003E\u0003F\u0005F\u039b","\nF\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0007G\u03a3\nG\fG\u000e","G\u03a6\u000bG\u0003G\u0003G\u0003H\u0003H\u0007H\u03ac\nH\fH\u000e","H\u03af\u000bH\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0005","H\u03b8\nH\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0005H\u03c0\n","H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003","H\u0003H\u0003H\u0005H\u03ce\nH\u0003I\u0003I\u0003J\u0003J\u0003J\u0005","J\u03d5\nJ\u0003J\u0003J\u0003J\u0005J\u03da\nJ\u0003J\u0003J\u0003","K\u0003K\u0005K\u03e0\nK\u0003K\u0003K\u0003L\u0003L\u0003L\u0007L\u03e7","\nL\fL\u000eL\u03ea\u000bL\u0003M\u0003M\u0003M\u0003N\u0003N\u0007","N\u03f1\nN\fN\u000eN\u03f4\u000bN\u0003N\u0003N\u0003O\u0003O\u0007","O\u03fa\nO\fO\u000eO\u03fd\u000bO\u0003O\u0003O\u0003P\u0003P\u0003","P\u0003P\u0003P\u0005P\u0406\nP\u0003Q\u0007Q\u0409\nQ\fQ\u000eQ\u040c","\u000bQ\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0005","Q\u0416\nQ\u0003R\u0003R\u0003S\u0007S\u041b\nS\fS\u000eS\u041e\u000b","S\u0003S\u0003S\u0003S\u0005S\u0423\nS\u0003S\u0005S\u0426\nS\u0003","T\u0003T\u0003T\u0003T\u0003T\u0005T\u042d\nT\u0003T\u0003T\u0003T\u0003","T\u0003T\u0003T\u0003T\u0005T\u0436\nT\u0003T\u0003T\u0003T\u0003T\u0003","T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003","T\u0003T\u0003T\u0003T\u0003T\u0006T\u044b\nT\rT\u000eT\u044c\u0003","T\u0005T\u0450\nT\u0003T\u0005T\u0453\nT\u0003T\u0003T\u0003T\u0003","T\u0007T\u0459\nT\fT\u000eT\u045c\u000bT\u0003T\u0005T\u045f\nT\u0003","T\u0003T\u0003T\u0003T\u0007T\u0465\nT\fT\u000eT\u0468\u000bT\u0003","T\u0007T\u046b\nT\fT\u000eT\u046e\u000bT\u0003T\u0003T\u0003T\u0003","T\u0003T\u0003T\u0003T\u0003T\u0005T\u0478\nT\u0003T\u0003T\u0003T\u0003","T\u0003T\u0003T\u0003T\u0005T\u0481\nT\u0003T\u0003T\u0003T\u0005T\u0486","\nT\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003","T\u0003T\u0005T\u0493\nT\u0003T\u0003T\u0003T\u0003T\u0005T\u0499\n","T\u0003U\u0003U\u0003U\u0007U\u049e\nU\fU\u000eU\u04a1\u000bU\u0003","U\u0003U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0007V\u04ab\nV\f","V\u000eV\u04ae\u000bV\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0005","X\u04b6\nX\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0007Y\u04bd\nY\fY\u000e","Y\u04c0\u000bY\u0003Z\u0007Z\u04c3\nZ\fZ\u000eZ\u04c6\u000bZ\u0003Z","\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u04cd\nZ\u0003Z\u0003Z\u0003Z\u0003","Z\u0005Z\u04d3\nZ\u0003[\u0006[\u04d6\n[\r[\u000e[\u04d7\u0003[\u0006","[\u04db\n[\r[\u000e[\u04dc\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003","\\\u0005\\\u04e5\n\\\u0003\\\u0003\\\u0003\\\u0005\\\u04ea\n\\\u0003","]\u0003]\u0005]\u04ee\n]\u0003]\u0003]\u0005]\u04f2\n]\u0003]\u0003","]\u0005]\u04f6\n]\u0005]\u04f8\n]\u0003^\u0003^\u0005^\u04fc\n^\u0003","_\u0007_\u04ff\n_\f_\u000e_\u0502\u000b_\u0003_\u0003_\u0005_\u0506","\n_\u0003_\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003`\u0003a\u0003","a\u0003a\u0007a\u0513\na\fa\u000ea\u0516\u000ba\u0003b\u0003b\u0003","b\u0005b\u051b\nb\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u0522\n","b\u0003b\u0003b\u0003b\u0003b\u0005b\u0528\nb\u0003b\u0005b\u052b\n","b\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0007c\u0534\nc\f","c\u000ec\u0537\u000bc\u0003c\u0003c\u0003c\u0007c\u053c\nc\fc\u000e","c\u053f\u000bc\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003","c\u0003c\u0003c\u0003c\u0003c\u0005c\u054d\nc\u0003c\u0003c\u0005c\u0551","\nc\u0003c\u0003c\u0003c\u0005c\u0556\nc\u0003c\u0003c\u0005c\u055a","\nc\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003","c\u0003c\u0003c\u0003c\u0003c\u0005c\u056a\nc\u0003c\u0003c\u0003c\u0003","c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003","c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003","c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003","c\u0003c\u0003c\u0003c\u0003c\u0005c\u0592\nc\u0003c\u0003c\u0003c\u0003","c\u0005c\u0598\nc\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003","c\u0003c\u0003c\u0003c\u0005c\u05a5\nc\u0003c\u0003c\u0003c\u0005c\u05aa","\nc\u0003c\u0007c\u05ad\nc\fc\u000ec\u05b0\u000bc\u0003d\u0007d\u05b3","\nd\fd\u000ed\u05b6\u000bd\u0003d\u0003d\u0007d\u05ba\nd\fd\u000ed\u05bd","\u000bd\u0003d\u0003d\u0003e\u0003e\u0003e\u0003e\u0003f\u0003f\u0003","f\u0005f\u05c8\nf\u0003f\u0003f\u0003f\u0003f\u0003f\u0007f\u05cf\n","f\ff\u000ef\u05d2\u000bf\u0003f\u0003f\u0003f\u0003f\u0005f\u05d8\n","f\u0003f\u0005f\u05db\nf\u0003g\u0003g\u0005g\u05df\ng\u0003h\u0003","h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003","h\u0003h\u0003h\u0003h\u0003h\u0005h\u05f1\nh\u0005h\u05f3\nh\u0003","i\u0003i\u0003i\u0003i\u0007i\u05f9\ni\fi\u000ei\u05fc\u000bi\u0003","i\u0003i\u0003j\u0003j\u0003j\u0003j\u0005j\u0604\nj\u0003j\u0003j\u0003","j\u0003j\u0003j\u0005j\u060b\nj\u0003k\u0003k\u0003k\u0003k\u0003k\u0003","k\u0007k\u0613\nk\fk\u000ek\u0616\u000bk\u0003k\u0003k\u0007k\u061a","\nk\fk\u000ek\u061d\u000bk\u0003k\u0003k\u0003k\u0007k\u0622\nk\fk\u000e","k\u0625\u000bk\u0005k\u0627\nk\u0003k\u0003k\u0003k\u0007k\u062c\nk","\fk\u000ek\u062f\u000bk\u0003l\u0003l\u0007l\u0633\nl\fl\u000el\u0636","\u000bl\u0005l\u0638\nl\u0003m\u0003m\u0003m\u0005m\u063d\nm\u0003m","\u0007m\u0640\nm\fm\u000em\u0643\u000bm\u0003m\u0003m\u0005m\u0647\n","m\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0005n\u0650\nn\u0005","n\u0652\nn\u0003o\u0003o\u0005o\u0656\no\u0003o\u0003o\u0003o\u0005","o\u065b\no\u0007o\u065d\no\fo\u000eo\u0660\u000bo\u0003o\u0005o\u0663","\no\u0003p\u0003p\u0005p\u0667\np\u0003p\u0003p\u0003q\u0003q\u0003","q\u0003q\u0007q\u066f\nq\fq\u000eq\u0672\u000bq\u0003q\u0003q\u0003","q\u0003q\u0003q\u0003q\u0003q\u0007q\u067b\nq\fq\u000eq\u067e\u000b","q\u0003q\u0003q\u0007q\u0682\nq\fq\u000eq\u0685\u000bq\u0005q\u0687","\nq\u0003r\u0003r\u0005r\u068b\nr\u0003s\u0003s\u0003s\u0003t\u0003","t\u0003t\u0005t\u0693\nt\u0003u\u0003u\u0003u\u0005u\u0698\nu\u0003","v\u0003v\u0003v\u0003v\u0003w\u0003w\u0003w\u0007w\u06a1\nw\fw\u000e","w\u06a4\u000bw\u0003x\u0007x\u06a7\nx\fx\u000ex\u06aa\u000bx\u0003x","\u0003x\u0005x\u06ae\nx\u0003x\u0007x\u06b1\nx\fx\u000ex\u06b4\u000b","x\u0003x\u0003x\u0007x\u06b8\nx\fx\u000ex\u06bb\u000bx\u0003y\u0003","y\u0003z\u0003z\u0003z\u0003z\u0007z\u06c3\nz\fz\u000ez\u06c6\u000b","z\u0003z\u0003z\u0003{\u0003{\u0003{\u0005{\u06cd\n{\u0003{\u0003{\u0005","{\u06d1\n{\u0005{\u06d3\n{\u0003|\u0003|\u0003|\u0003|\u0003|\u0005","|\u06da\n|\u0003}\u0003}\u0005}\u06de\n}\u0003}\u0003}\u0003}\u0002","\u0004\u00c4\u00d4~\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014","\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd","fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090","\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8","\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0","\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8","\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0","\u00f2\u00f4\u00f6\u00f8\u0002\u0011\u0004\u0002\u0013\u0013**\u0003","\u0002EH\u0003\u0002IJ\u0004\u0002((>>\u0004\u00025C\u0082\u0082\u0003","\u0002fi\u0003\u0002\\]\u0004\u0002jkoo\u0003\u0002hi\u0004\u0002Z[","ab\u0004\u0002``cc\u0004\u0002YYpz\u0003\u0002fg\u0004\u0002__{{\n\u0002","\u0005\u0005\u0007\u0007\n\n\u0010\u0010\u0016\u0016\u001d\u001d\u001f","\u001f\'\'\u0002\u07a9\u0002\u010c\u0003\u0002\u0002\u0002\u0004\u0111","\u0003\u0002\u0002\u0002\u0006\u0118\u0003\u0002\u0002\u0002\b\u0131","\u0003\u0002\u0002\u0002\n\u0138\u0003\u0002\u0002\u0002\f\u0144\u0003","\u0002\u0002\u0002\u000e\u0148\u0003\u0002\u0002\u0002\u0010\u014a\u0003","\u0002\u0002\u0002\u0012\u015d\u0003\u0002\u0002\u0002\u0014\u016b\u0003","\u0002\u0002\u0002\u0016\u0179\u0003\u0002\u0002\u0002\u0018\u0181\u0003","\u0002\u0002\u0002\u001a\u0193\u0003\u0002\u0002\u0002\u001c\u019e\u0003","\u0002\u0002\u0002\u001e\u01a8\u0003\u0002\u0002\u0002 \u01af\u0003","\u0002\u0002\u0002\"\u01ba\u0003\u0002\u0002\u0002$\u01c3\u0003\u0002","\u0002\u0002&\u01d8\u0003\u0002\u0002\u0002(\u01e4\u0003\u0002\u0002","\u0002*\u01e6\u0003\u0002\u0002\u0002,\u01f8\u0003\u0002\u0002\u0002",".\u01fc\u0003\u0002\u0002\u00020\u01fe\u0003\u0002\u0002\u00022\u0201","\u0003\u0002\u0002\u00024\u0204\u0003\u0002\u0002\u00026\u020c\u0003","\u0002\u0002\u00028\u0218\u0003\u0002\u0002\u0002:\u0222\u0003\u0002","\u0002\u0002<\u0224\u0003\u0002\u0002\u0002>\u022f\u0003\u0002\u0002","\u0002@\u023d\u0003\u0002\u0002\u0002B\u0248\u0003\u0002\u0002\u0002","D\u024d\u0003\u0002\u0002\u0002F\u0256\u0003\u0002\u0002\u0002H\u0269","\u0003\u0002\u0002\u0002J\u0271\u0003\u0002\u0002\u0002L\u0276\u0003","\u0002\u0002\u0002N\u0280\u0003\u0002\u0002\u0002P\u0282\u0003\u0002","\u0002\u0002R\u0292\u0003\u0002\u0002\u0002T\u02ac\u0003\u0002\u0002","\u0002V\u02ae\u0003\u0002\u0002\u0002X\u02b6\u0003\u0002\u0002\u0002","Z\u02c6\u0003\u0002\u0002\u0002\\\u02de\u0003\u0002\u0002\u0002^\u02e3","\u0003\u0002\u0002\u0002`\u02ec\u0003\u0002\u0002\u0002b\u02f9\u0003","\u0002\u0002\u0002d\u0304\u0003\u0002\u0002\u0002f\u030a\u0003\u0002","\u0002\u0002h\u0319\u0003\u0002\u0002\u0002j\u031b\u0003\u0002\u0002","\u0002l\u031d\u0003\u0002\u0002\u0002n\u0324\u0003\u0002\u0002\u0002","p\u032d\u0003\u0002\u0002\u0002r\u0337\u0003\u0002\u0002\u0002t\u033f","\u0003\u0002\u0002\u0002v\u0346\u0003\u0002\u0002\u0002x\u0348\u0003","\u0002\u0002\u0002z\u0358\u0003\u0002\u0002\u0002|\u035d\u0003\u0002","\u0002\u0002~\u036e\u0003\u0002\u0002\u0002\u0080\u0388\u0003\u0002","\u0002\u0002\u0082\u038c\u0003\u0002\u0002\u0002\u0084\u038e\u0003\u0002","\u0002\u0002\u0086\u0394\u0003\u0002\u0002\u0002\u0088\u0396\u0003\u0002","\u0002\u0002\u008a\u039a\u0003\u0002\u0002\u0002\u008c\u03a0\u0003\u0002","\u0002\u0002\u008e\u03cd\u0003\u0002\u0002\u0002\u0090\u03cf\u0003\u0002","\u0002\u0002\u0092\u03d1\u0003\u0002\u0002\u0002\u0094\u03dd\u0003\u0002","\u0002\u0002\u0096\u03e3\u0003\u0002\u0002\u0002\u0098\u03eb\u0003\u0002","\u0002\u0002\u009a\u03ee\u0003\u0002\u0002\u0002\u009c\u03f7\u0003\u0002","\u0002\u0002\u009e\u0405\u0003\u0002\u0002\u0002\u00a0\u040a\u0003\u0002","\u0002\u0002\u00a2\u0417\u0003\u0002\u0002\u0002\u00a4\u0425\u0003\u0002","\u0002\u0002\u00a6\u0498\u0003\u0002\u0002\u0002\u00a8\u049a\u0003\u0002","\u0002\u0002\u00aa\u04a7\u0003\u0002\u0002\u0002\u00ac\u04af\u0003\u0002","\u0002\u0002\u00ae\u04b2\u0003\u0002\u0002\u0002\u00b0\u04b9\u0003\u0002","\u0002\u0002\u00b2\u04d2\u0003\u0002\u0002\u0002\u00b4\u04d5\u0003\u0002","\u0002\u0002\u00b6\u04e9\u0003\u0002\u0002\u0002\u00b8\u04f7\u0003\u0002","\u0002\u0002\u00ba\u04fb\u0003\u0002\u0002\u0002\u00bc\u0500\u0003\u0002","\u0002\u0002\u00be\u050b\u0003\u0002\u0002\u0002\u00c0\u050f\u0003\u0002","\u0002\u0002\u00c2\u052a\u0003\u0002\u0002\u0002\u00c4\u0559\u0003\u0002","\u0002\u0002\u00c6\u05b4\u0003\u0002\u0002\u0002\u00c8\u05c0\u0003\u0002","\u0002\u0002\u00ca\u05da\u0003\u0002\u0002\u0002\u00cc\u05de\u0003\u0002","\u0002\u0002\u00ce\u05f2\u0003\u0002\u0002\u0002\u00d0\u05f4\u0003\u0002","\u0002\u0002\u00d2\u060a\u0003\u0002\u0002\u0002\u00d4\u0626\u0003\u0002","\u0002\u0002\u00d6\u0637\u0003\u0002\u0002\u0002\u00d8\u063c\u0003\u0002","\u0002\u0002\u00da\u0651\u0003\u0002\u0002\u0002\u00dc\u0662\u0003\u0002","\u0002\u0002\u00de\u0664\u0003\u0002\u0002\u0002\u00e0\u066a\u0003\u0002","\u0002\u0002\u00e2\u0688\u0003\u0002\u0002\u0002\u00e4\u068c\u0003\u0002","\u0002\u0002\u00e6\u0692\u0003\u0002\u0002\u0002\u00e8\u0697\u0003\u0002","\u0002\u0002\u00ea\u0699\u0003\u0002\u0002\u0002\u00ec\u069d\u0003\u0002","\u0002\u0002\u00ee\u06a8\u0003\u0002\u0002\u0002\u00f0\u06bc\u0003\u0002","\u0002\u0002\u00f2\u06be\u0003\u0002\u0002\u0002\u00f4\u06d2\u0003\u0002","\u0002\u0002\u00f6\u06d9\u0003\u0002\u0002\u0002\u00f8\u06db\u0003\u0002","\u0002\u0002\u00fa\u00fc\u0005\u0004\u0003\u0002\u00fb\u00fa\u0003\u0002","\u0002\u0002\u00fb\u00fc\u0003\u0002\u0002\u0002\u00fc\u0100\u0003\u0002","\u0002\u0002\u00fd\u00ff\u0005\u0006\u0004\u0002\u00fe\u00fd\u0003\u0002","\u0002\u0002\u00ff\u0102\u0003\u0002\u0002\u0002\u0100\u00fe\u0003\u0002","\u0002\u0002\u0100\u0101\u0003\u0002\u0002\u0002\u0101\u0106\u0003\u0002","\u0002\u0002\u0102\u0100\u0003\u0002\u0002\u0002\u0103\u0105\u0005\b","\u0005\u0002\u0104\u0103\u0003\u0002\u0002\u0002\u0105\u0108\u0003\u0002","\u0002\u0002\u0106\u0104\u0003\u0002\u0002\u0002\u0106\u0107\u0003\u0002","\u0002\u0002\u0107\u010d\u0003\u0002\u0002\u0002\u0108\u0106\u0003\u0002","\u0002\u0002\u0109\u010a\u0005\u008aF\u0002\u010a\u010b\u0007\u0002","\u0002\u0003\u010b\u010d\u0003\u0002\u0002\u0002\u010c\u00fb\u0003\u0002","\u0002\u0002\u010c\u0109\u0003\u0002\u0002\u0002\u010d\u0003\u0003\u0002","\u0002\u0002\u010e\u0110\u0005p9\u0002\u010f\u010e\u0003\u0002\u0002","\u0002\u0110\u0113\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002","\u0002\u0111\u0112\u0003\u0002\u0002\u0002\u0112\u0114\u0003\u0002\u0002","\u0002\u0113\u0111\u0003\u0002\u0002\u0002\u0114\u0115\u0007\"\u0002","\u0002\u0115\u0116\u0005f4\u0002\u0116\u0117\u0007V\u0002\u0002\u0117","\u0005\u0003\u0002\u0002\u0002\u0118\u011a\u0007\u001b\u0002\u0002\u0119","\u011b\u0007(\u0002\u0002\u011a\u0119\u0003\u0002\u0002\u0002\u011a","\u011b\u0003\u0002\u0002\u0002\u011b\u011c\u0003\u0002\u0002\u0002\u011c","\u011f\u0005f4\u0002\u011d\u011e\u0007X\u0002\u0002\u011e\u0120\u0007","j\u0002\u0002\u011f\u011d\u0003\u0002\u0002\u0002\u011f\u0120\u0003","\u0002\u0002\u0002\u0120\u0121\u0003\u0002\u0002\u0002\u0121\u0122\u0007","V\u0002\u0002\u0122\u0007\u0003\u0002\u0002\u0002\u0123\u0125\u0005","\f\u0007\u0002\u0124\u0123\u0003\u0002\u0002\u0002\u0125\u0128\u0003","\u0002\u0002\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0126\u0127\u0003","\u0002\u0002\u0002\u0127\u012e\u0003\u0002\u0002\u0002\u0128\u0126\u0003","\u0002\u0002\u0002\u0129\u012f\u0005\u0010\t\u0002\u012a\u012f\u0005","\u0018\r\u0002\u012b\u012f\u0005 \u0011\u0002\u012c\u012f\u0005z>\u0002","\u012d\u012f\u0005\u0092J\u0002\u012e\u0129\u0003\u0002\u0002\u0002","\u012e\u012a\u0003\u0002\u0002\u0002\u012e\u012b\u0003\u0002\u0002\u0002","\u012e\u012c\u0003\u0002\u0002\u0002\u012e\u012d\u0003\u0002\u0002\u0002","\u012f\u0132\u0003\u0002\u0002\u0002\u0130\u0132\u0007V\u0002\u0002","\u0131\u0126\u0003\u0002\u0002\u0002\u0131\u0130\u0003\u0002\u0002\u0002","\u0132\t\u0003\u0002\u0002\u0002\u0133\u0139\u0005\f\u0007\u0002\u0134","\u0139\u0007 \u0002\u0002\u0135\u0139\u0007,\u0002\u0002\u0136\u0139","\u00070\u0002\u0002\u0137\u0139\u00073\u0002\u0002\u0138\u0133\u0003","\u0002\u0002\u0002\u0138\u0134\u0003\u0002\u0002\u0002\u0138\u0135\u0003","\u0002\u0002\u0002\u0138\u0136\u0003\u0002\u0002\u0002\u0138\u0137\u0003","\u0002\u0002\u0002\u0139\u000b\u0003\u0002\u0002\u0002\u013a\u0145\u0005","p9\u0002\u013b\u0145\u0007%\u0002\u0002\u013c\u0145\u0007$\u0002\u0002","\u013d\u0145\u0007#\u0002\u0002\u013e\u0145\u0007(\u0002\u0002\u013f","\u0145\u0007\u0003\u0002\u0002\u0140\u0145\u0007\u0014\u0002\u0002\u0141","\u0145\u0007)\u0002\u0002\u0142\u0145\u0007B\u0002\u0002\u0143\u0145","\u0007D\u0002\u0002\u0144\u013a\u0003\u0002\u0002\u0002\u0144\u013b","\u0003\u0002\u0002\u0002\u0144\u013c\u0003\u0002\u0002\u0002\u0144\u013d","\u0003\u0002\u0002\u0002\u0144\u013e\u0003\u0002\u0002\u0002\u0144\u013f","\u0003\u0002\u0002\u0002\u0144\u0140\u0003\u0002\u0002\u0002\u0144\u0141","\u0003\u0002\u0002\u0002\u0144\u0142\u0003\u0002\u0002\u0002\u0144\u0143","\u0003\u0002\u0002\u0002\u0145\r\u0003\u0002\u0002\u0002\u0146\u0149","\u0007\u0014\u0002\u0002\u0147\u0149\u0005p9\u0002\u0148\u0146\u0003","\u0002\u0002\u0002\u0148\u0147\u0003\u0002\u0002\u0002\u0149\u000f\u0003","\u0002\u0002\u0002\u014a\u014b\u0007\u000b\u0002\u0002\u014b\u014d\u0005","\u00a2R\u0002\u014c\u014e\u0005\u0012\n\u0002\u014d\u014c\u0003\u0002","\u0002\u0002\u014d\u014e\u0003\u0002\u0002\u0002\u014e\u0151\u0003\u0002","\u0002\u0002\u014f\u0150\u0007\u0013\u0002\u0002\u0150\u0152\u0005\u00ee","x\u0002\u0151\u014f\u0003\u0002\u0002\u0002\u0151\u0152\u0003\u0002","\u0002\u0002\u0152\u0155\u0003\u0002\u0002\u0002\u0153\u0154\u0007\u001a","\u0002\u0002\u0154\u0156\u0005\u00ecw\u0002\u0155\u0153\u0003\u0002","\u0002\u0002\u0155\u0156\u0003\u0002\u0002\u0002\u0156\u0159\u0003\u0002","\u0002\u0002\u0157\u0158\u0007C\u0002\u0002\u0158\u015a\u0005\u00ec","w\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u0159\u015a\u0003\u0002","\u0002\u0002\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u015c\u0005\"","\u0012\u0002\u015c\u0011\u0003\u0002\u0002\u0002\u015d\u015e\u0007[","\u0002\u0002\u015e\u0163\u0005\u0014\u000b\u0002\u015f\u0160\u0007W","\u0002\u0002\u0160\u0162\u0005\u0014\u000b\u0002\u0161\u015f\u0003\u0002","\u0002\u0002\u0162\u0165\u0003\u0002\u0002\u0002\u0163\u0161\u0003\u0002","\u0002\u0002\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u0166\u0003\u0002","\u0002\u0002\u0165\u0163\u0003\u0002\u0002\u0002\u0166\u0167\u0007Z","\u0002\u0002\u0167\u0013\u0003\u0002\u0002\u0002\u0168\u016a\u0005p","9\u0002\u0169\u0168\u0003\u0002\u0002\u0002\u016a\u016d\u0003\u0002","\u0002\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002","\u0002\u0002\u016c\u016e\u0003\u0002\u0002\u0002\u016d\u016b\u0003\u0002","\u0002\u0002\u016e\u0177\u0005\u00a2R\u0002\u016f\u0173\u0007\u0013","\u0002\u0002\u0170\u0172\u0005p9\u0002\u0171\u0170\u0003\u0002\u0002","\u0002\u0172\u0175\u0003\u0002\u0002\u0002\u0173\u0171\u0003\u0002\u0002","\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174\u0176\u0003\u0002\u0002","\u0002\u0175\u0173\u0003\u0002\u0002\u0002\u0176\u0178\u0005\u0016\f","\u0002\u0177\u016f\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002","\u0002\u0178\u0015\u0003\u0002\u0002\u0002\u0179\u017e\u0005\u00eex","\u0002\u017a\u017b\u0007l\u0002\u0002\u017b\u017d\u0005\u00eex\u0002","\u017c\u017a\u0003\u0002\u0002\u0002\u017d\u0180\u0003\u0002\u0002\u0002","\u017e\u017c\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002","\u017f\u0017\u0003\u0002\u0002\u0002\u0180\u017e\u0003\u0002\u0002\u0002","\u0181\u0182\u0007\u0012\u0002\u0002\u0182\u0185\u0005\u00a2R\u0002","\u0183\u0184\u0007\u001a\u0002\u0002\u0184\u0186\u0005\u00ecw\u0002","\u0185\u0183\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002\u0002","\u0186\u0187\u0003\u0002\u0002\u0002\u0187\u0189\u0007R\u0002\u0002","\u0188\u018a\u0005\u001a\u000e\u0002\u0189\u0188\u0003\u0002\u0002\u0002","\u0189\u018a\u0003\u0002\u0002\u0002\u018a\u018c\u0003\u0002\u0002\u0002","\u018b\u018d\u0007W\u0002\u0002\u018c\u018b\u0003\u0002\u0002\u0002","\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018f\u0003\u0002\u0002\u0002","\u018e\u0190\u0005\u001e\u0010\u0002\u018f\u018e\u0003\u0002\u0002\u0002","\u018f\u0190\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002","\u0191\u0192\u0007S\u0002\u0002\u0192\u0019\u0003\u0002\u0002\u0002","\u0193\u0198\u0005\u001c\u000f\u0002\u0194\u0195\u0007W\u0002\u0002","\u0195\u0197\u0005\u001c\u000f\u0002\u0196\u0194\u0003\u0002\u0002\u0002","\u0197\u019a\u0003\u0002\u0002\u0002\u0198\u0196\u0003\u0002\u0002\u0002","\u0198\u0199\u0003\u0002\u0002\u0002\u0199\u001b\u0003\u0002\u0002\u0002","\u019a\u0198\u0003\u0002\u0002\u0002\u019b\u019d\u0005p9\u0002\u019c","\u019b\u0003\u0002\u0002\u0002\u019d\u01a0\u0003\u0002\u0002\u0002\u019e","\u019c\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f","\u01a1\u0003\u0002\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a1","\u01a3\u0005\u00a2R\u0002\u01a2\u01a4\u0005\u00f8}\u0002\u01a3\u01a2","\u0003\u0002\u0002\u0002\u01a3\u01a4\u0003\u0002\u0002\u0002\u01a4\u01a6","\u0003\u0002\u0002\u0002\u01a5\u01a7\u0005\"\u0012\u0002\u01a6\u01a5","\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7\u001d","\u0003\u0002\u0002\u0002\u01a8\u01ac\u0007V\u0002\u0002\u01a9\u01ab","\u0005&\u0014\u0002\u01aa\u01a9\u0003\u0002\u0002\u0002\u01ab\u01ae","\u0003\u0002\u0002\u0002\u01ac\u01aa\u0003\u0002\u0002\u0002\u01ac\u01ad","\u0003\u0002\u0002\u0002\u01ad\u001f\u0003\u0002\u0002\u0002\u01ae\u01ac","\u0003\u0002\u0002\u0002\u01af\u01b0\u0007\u001e\u0002\u0002\u01b0\u01b2","\u0005\u00a2R\u0002\u01b1\u01b3\u0005\u0012\n\u0002\u01b2\u01b1\u0003","\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b6\u0003","\u0002\u0002\u0002\u01b4\u01b5\u0007\u0013\u0002\u0002\u01b5\u01b7\u0005","\u00ecw\u0002\u01b6\u01b4\u0003\u0002\u0002\u0002\u01b6\u01b7\u0003","\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\u01b9\u0005","$\u0013\u0002\u01b9!\u0003\u0002\u0002\u0002\u01ba\u01be\u0007R\u0002","\u0002\u01bb\u01bd\u0005&\u0014\u0002\u01bc\u01bb\u0003\u0002\u0002","\u0002\u01bd\u01c0\u0003\u0002\u0002\u0002\u01be\u01bc\u0003\u0002\u0002","\u0002\u01be\u01bf\u0003\u0002\u0002\u0002\u01bf\u01c1\u0003\u0002\u0002","\u0002\u01c0\u01be\u0003\u0002\u0002\u0002\u01c1\u01c2\u0007S\u0002","\u0002\u01c2#\u0003\u0002\u0002\u0002\u01c3\u01c7\u0007R\u0002\u0002","\u01c4\u01c6\u00058\u001d\u0002\u01c5\u01c4\u0003\u0002\u0002\u0002","\u01c6\u01c9\u0003\u0002\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002\u0002","\u01c7\u01c8\u0003\u0002\u0002\u0002\u01c8\u01ca\u0003\u0002\u0002\u0002","\u01c9\u01c7\u0003\u0002\u0002\u0002\u01ca\u01cb\u0007S\u0002\u0002","\u01cb%\u0003\u0002\u0002\u0002\u01cc\u01d9\u0007V\u0002\u0002\u01cd","\u01cf\u0007(\u0002\u0002\u01ce\u01cd\u0003\u0002\u0002\u0002\u01ce","\u01cf\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0","\u01d9\u0005\u009cO\u0002\u01d1\u01d3\u0005\n\u0006\u0002\u01d2\u01d1","\u0003\u0002\u0002\u0002\u01d3\u01d6\u0003\u0002\u0002\u0002\u01d4\u01d2","\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d7","\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d7\u01d9","\u0005(\u0015\u0002\u01d8\u01cc\u0003\u0002\u0002\u0002\u01d8\u01ce","\u0003\u0002\u0002\u0002\u01d8\u01d4\u0003\u0002\u0002\u0002\u01d9\'","\u0003\u0002\u0002\u0002\u01da\u01e5\u0005*\u0016\u0002\u01db\u01e5","\u00050\u0019\u0002\u01dc\u01e5\u00056\u001c\u0002\u01dd\u01e5\u0005","4\u001b\u0002\u01de\u01e5\u00052\u001a\u0002\u01df\u01e5\u0005 \u0011","\u0002\u01e0\u01e5\u0005z>\u0002\u01e1\u01e5\u0005\u0010\t\u0002\u01e2","\u01e5\u0005\u0018\r\u0002\u01e3\u01e5\u0005\u0092J\u0002\u01e4\u01da","\u0003\u0002\u0002\u0002\u01e4\u01db\u0003\u0002\u0002\u0002\u01e4\u01dc","\u0003\u0002\u0002\u0002\u01e4\u01dd\u0003\u0002\u0002\u0002\u01e4\u01de","\u0003\u0002\u0002\u0002\u01e4\u01df\u0003\u0002\u0002\u0002\u01e4\u01e0","\u0003\u0002\u0002\u0002\u01e4\u01e1\u0003\u0002\u0002\u0002\u01e4\u01e2","\u0003\u0002\u0002\u0002\u01e4\u01e3\u0003\u0002\u0002\u0002\u01e5)","\u0003\u0002\u0002\u0002\u01e6\u01e7\u0005.\u0018\u0002\u01e7\u01e8","\u0005\u00a2R\u0002\u01e8\u01ed\u0005X-\u0002\u01e9\u01ea\u0007T\u0002","\u0002\u01ea\u01ec\u0007U\u0002\u0002\u01eb\u01e9\u0003\u0002\u0002","\u0002\u01ec\u01ef\u0003\u0002\u0002\u0002\u01ed\u01eb\u0003\u0002\u0002","\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee\u01f2\u0003\u0002\u0002","\u0002\u01ef\u01ed\u0003\u0002\u0002\u0002\u01f0\u01f1\u0007/\u0002","\u0002\u01f1\u01f3\u0005V,\u0002\u01f2\u01f0\u0003\u0002\u0002\u0002","\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002","\u01f4\u01f5\u0005,\u0017\u0002\u01f5+\u0003\u0002\u0002\u0002\u01f6","\u01f9\u0005\u009cO\u0002\u01f7\u01f9\u0007V\u0002\u0002\u01f8\u01f6","\u0003\u0002\u0002\u0002\u01f8\u01f7\u0003\u0002\u0002\u0002\u01f9-","\u0003\u0002\u0002\u0002\u01fa\u01fd\u0005\u00eex\u0002\u01fb\u01fd","\u00072\u0002\u0002\u01fc\u01fa\u0003\u0002\u0002\u0002\u01fc\u01fb","\u0003\u0002\u0002\u0002\u01fd/\u0003\u0002\u0002\u0002\u01fe\u01ff","\u0005\u0012\n\u0002\u01ff\u0200\u0005*\u0016\u0002\u02001\u0003\u0002","\u0002\u0002\u0201\u0202\u0005\u0012\n\u0002\u0202\u0203\u00054\u001b","\u0002\u02033\u0003\u0002\u0002\u0002\u0204\u0205\u0005\u00a2R\u0002","\u0205\u0208\u0005X-\u0002\u0206\u0207\u0007/\u0002\u0002\u0207\u0209","\u0005V,\u0002\u0208\u0206\u0003\u0002\u0002\u0002\u0208\u0209\u0003","\u0002\u0002\u0002\u0209\u020a\u0003\u0002\u0002\u0002\u020a\u020b\u0005","\u009cO\u0002\u020b5\u0003\u0002\u0002\u0002\u020c\u020d\u0005\u00ee","x\u0002\u020d\u020e\u0005H%\u0002\u020e\u020f\u0007V\u0002\u0002\u020f","7\u0003\u0002\u0002\u0002\u0210\u0212\u0005\n\u0006\u0002\u0211\u0210","\u0003\u0002\u0002\u0002\u0212\u0215\u0003\u0002\u0002\u0002\u0213\u0211","\u0003\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0216","\u0003\u0002\u0002\u0002\u0215\u0213\u0003\u0002\u0002\u0002\u0216\u0219","\u0005:\u001e\u0002\u0217\u0219\u0007V\u0002\u0002\u0218\u0213\u0003","\u0002\u0002\u0002\u0218\u0217\u0003\u0002\u0002\u0002\u02199\u0003","\u0002\u0002\u0002\u021a\u0223\u0005<\u001f\u0002\u021b\u0223\u0005","@!\u0002\u021c\u0223\u0005D#\u0002\u021d\u0223\u0005 \u0011\u0002\u021e","\u0223\u0005z>\u0002\u021f\u0223\u0005\u0010\t\u0002\u0220\u0223\u0005","\u0018\r\u0002\u0221\u0223\u0005\u0092J\u0002\u0222\u021a\u0003\u0002","\u0002\u0002\u0222\u021b\u0003\u0002\u0002\u0002\u0222\u021c\u0003\u0002","\u0002\u0002\u0222\u021d\u0003\u0002\u0002\u0002\u0222\u021e\u0003\u0002","\u0002\u0002\u0222\u021f\u0003\u0002\u0002\u0002\u0222\u0220\u0003\u0002","\u0002\u0002\u0222\u0221\u0003\u0002\u0002\u0002\u0223;\u0003\u0002","\u0002\u0002\u0224\u0225\u0005\u00eex\u0002\u0225\u022a\u0005> \u0002","\u0226\u0227\u0007W\u0002\u0002\u0227\u0229\u0005> \u0002\u0228\u0226","\u0003\u0002\u0002\u0002\u0229\u022c\u0003\u0002\u0002\u0002\u022a\u0228","\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022d","\u0003\u0002\u0002\u0002\u022c\u022a\u0003\u0002\u0002\u0002\u022d\u022e","\u0007V\u0002\u0002\u022e=\u0003\u0002\u0002\u0002\u022f\u0234\u0005","\u00a2R\u0002\u0230\u0231\u0007T\u0002\u0002\u0231\u0233\u0007U\u0002","\u0002\u0232\u0230\u0003\u0002\u0002\u0002\u0233\u0236\u0003\u0002\u0002","\u0002\u0234\u0232\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002\u0002","\u0002\u0235\u0237\u0003\u0002\u0002\u0002\u0236\u0234\u0003\u0002\u0002","\u0002\u0237\u0238\u0007Y\u0002\u0002\u0238\u0239\u0005N(\u0002\u0239","?\u0003\u0002\u0002\u0002\u023a\u023c\u0005B\"\u0002\u023b\u023a\u0003","\u0002\u0002\u0002\u023c\u023f\u0003\u0002\u0002\u0002\u023d\u023b\u0003","\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e\u0240\u0003","\u0002\u0002\u0002\u023f\u023d\u0003\u0002\u0002\u0002\u0240\u0241\u0005","F$\u0002\u0241A\u0003\u0002\u0002\u0002\u0242\u0249\u0005p9\u0002\u0243","\u0249\u0007%\u0002\u0002\u0244\u0249\u0007\u0003\u0002\u0002\u0245","\u0249\u0007\u000e\u0002\u0002\u0246\u0249\u0007(\u0002\u0002\u0247","\u0249\u0007)\u0002\u0002\u0248\u0242\u0003\u0002\u0002\u0002\u0248","\u0243\u0003\u0002\u0002\u0002\u0248\u0244\u0003\u0002\u0002\u0002\u0248","\u0245\u0003\u0002\u0002\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0248","\u0247\u0003\u0002\u0002\u0002\u0249C\u0003\u0002\u0002\u0002\u024a","\u024c\u0005B\"\u0002\u024b\u024a\u0003\u0002\u0002\u0002\u024c\u024f","\u0003\u0002\u0002\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024d\u024e","\u0003\u0002\u0002\u0002\u024e\u0250\u0003\u0002\u0002\u0002\u024f\u024d","\u0003\u0002\u0002\u0002\u0250\u0251\u0005\u0012\n\u0002\u0251\u0252","\u0005F$\u0002\u0252E\u0003\u0002\u0002\u0002\u0253\u0255\u0005p9\u0002","\u0254\u0253\u0003\u0002\u0002\u0002\u0255\u0258\u0003\u0002\u0002\u0002","\u0256\u0254\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002","\u0257\u0259\u0003\u0002\u0002\u0002\u0258\u0256\u0003\u0002\u0002\u0002","\u0259\u025a\u0005.\u0018\u0002\u025a\u025b\u0005\u00a2R\u0002\u025b","\u0260\u0005X-\u0002\u025c\u025d\u0007T\u0002\u0002\u025d\u025f\u0007","U\u0002\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025f\u0262\u0003","\u0002\u0002\u0002\u0260\u025e\u0003\u0002\u0002\u0002\u0260\u0261\u0003","\u0002\u0002\u0002\u0261\u0265\u0003\u0002\u0002\u0002\u0262\u0260\u0003","\u0002\u0002\u0002\u0263\u0264\u0007/\u0002\u0002\u0264\u0266\u0005","V,\u0002\u0265\u0263\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002","\u0002\u0002\u0266\u0267\u0003\u0002\u0002\u0002\u0267\u0268\u0005,","\u0017\u0002\u0268G\u0003\u0002\u0002\u0002\u0269\u026e\u0005J&\u0002","\u026a\u026b\u0007W\u0002\u0002\u026b\u026d\u0005J&\u0002\u026c\u026a","\u0003\u0002\u0002\u0002\u026d\u0270\u0003\u0002\u0002\u0002\u026e\u026c","\u0003\u0002\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026fI","\u0003\u0002\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0271\u0274","\u0005L\'\u0002\u0272\u0273\u0007Y\u0002\u0002\u0273\u0275\u0005N(\u0002","\u0274\u0272\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002","\u0275K\u0003\u0002\u0002\u0002\u0276\u027b\u0005\u00a2R\u0002\u0277","\u0278\u0007T\u0002\u0002\u0278\u027a\u0007U\u0002\u0002\u0279\u0277","\u0003\u0002\u0002\u0002\u027a\u027d\u0003\u0002\u0002\u0002\u027b\u0279","\u0003\u0002\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027cM","\u0003\u0002\u0002\u0002\u027d\u027b\u0003\u0002\u0002\u0002\u027e\u0281","\u0005P)\u0002\u027f\u0281\u0005\u00c4c\u0002\u0280\u027e\u0003\u0002","\u0002\u0002\u0280\u027f\u0003\u0002\u0002\u0002\u0281O\u0003\u0002","\u0002\u0002\u0282\u028e\u0007R\u0002\u0002\u0283\u0288\u0005N(\u0002","\u0284\u0285\u0007W\u0002\u0002\u0285\u0287\u0005N(\u0002\u0286\u0284","\u0003\u0002\u0002\u0002\u0287\u028a\u0003\u0002\u0002\u0002\u0288\u0286","\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002\u0289\u028c","\u0003\u0002\u0002\u0002\u028a\u0288\u0003\u0002\u0002\u0002\u028b\u028d","\u0007W\u0002\u0002\u028c\u028b\u0003\u0002\u0002\u0002\u028c\u028d","\u0003\u0002\u0002\u0002\u028d\u028f\u0003\u0002\u0002\u0002\u028e\u0283","\u0003\u0002\u0002\u0002\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0290","\u0003\u0002\u0002\u0002\u0290\u0291\u0007S\u0002\u0002\u0291Q\u0003","\u0002\u0002\u0002\u0292\u0294\u0005\u00a2R\u0002\u0293\u0295\u0005","\u00f2z\u0002\u0294\u0293\u0003\u0002\u0002\u0002\u0294\u0295\u0003","\u0002\u0002\u0002\u0295\u029d\u0003\u0002\u0002\u0002\u0296\u0297\u0007","X\u0002\u0002\u0297\u0299\u0005\u00a2R\u0002\u0298\u029a\u0005\u00f2","z\u0002\u0299\u0298\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002","\u0002\u0002\u029a\u029c\u0003\u0002\u0002\u0002\u029b\u0296\u0003\u0002","\u0002\u0002\u029c\u029f\u0003\u0002\u0002\u0002\u029d\u029b\u0003\u0002","\u0002\u0002\u029d\u029e\u0003\u0002\u0002\u0002\u029eS\u0003\u0002","\u0002\u0002\u029f\u029d\u0003\u0002\u0002\u0002\u02a0\u02ad\u0005\u00ee","x\u0002\u02a1\u02a3\u0005p9\u0002\u02a2\u02a1\u0003\u0002\u0002\u0002","\u02a3\u02a6\u0003\u0002\u0002\u0002\u02a4\u02a2\u0003\u0002\u0002\u0002","\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5\u02a7\u0003\u0002\u0002\u0002","\u02a6\u02a4\u0003\u0002\u0002\u0002\u02a7\u02aa\u0007^\u0002\u0002","\u02a8\u02a9\t\u0002\u0002\u0002\u02a9\u02ab\u0005\u00eex\u0002\u02aa","\u02a8\u0003\u0002\u0002\u0002\u02aa\u02ab\u0003\u0002\u0002\u0002\u02ab","\u02ad\u0003\u0002\u0002\u0002\u02ac\u02a0\u0003\u0002\u0002\u0002\u02ac","\u02a4\u0003\u0002\u0002\u0002\u02adU\u0003\u0002\u0002\u0002\u02ae","\u02b3\u0005f4\u0002\u02af\u02b0\u0007W\u0002\u0002\u02b0\u02b2\u0005","f4\u0002\u02b1\u02af\u0003\u0002\u0002\u0002\u02b2\u02b5\u0003\u0002","\u0002\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002","\u0002\u0002\u02b4W\u0003\u0002\u0002\u0002\u02b5\u02b3\u0003\u0002","\u0002\u0002\u02b6\u02c2\u0007P\u0002\u0002\u02b7\u02b9\u0005Z.\u0002","\u02b8\u02b7\u0003\u0002\u0002\u0002\u02b8\u02b9\u0003\u0002\u0002\u0002","\u02b9\u02c3\u0003\u0002\u0002\u0002\u02ba\u02bd\u0005Z.\u0002\u02bb","\u02bc\u0007W\u0002\u0002\u02bc\u02be\u0005\\/\u0002\u02bd\u02bb\u0003","\u0002\u0002\u0002\u02bd\u02be\u0003\u0002\u0002\u0002\u02be\u02c3\u0003","\u0002\u0002\u0002\u02bf\u02c1\u0005\\/\u0002\u02c0\u02bf\u0003\u0002","\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1\u02c3\u0003\u0002","\u0002\u0002\u02c2\u02b8\u0003\u0002\u0002\u0002\u02c2\u02ba\u0003\u0002","\u0002\u0002\u02c2\u02c0\u0003\u0002\u0002\u0002\u02c3\u02c4\u0003\u0002","\u0002\u0002\u02c4\u02c5\u0007Q\u0002\u0002\u02c5Y\u0003\u0002\u0002","\u0002\u02c6\u02cc\u0005\u00eex\u0002\u02c7\u02c8\u0005\u00a2R\u0002","\u02c8\u02c9\u0007X\u0002\u0002\u02c9\u02cb\u0003\u0002\u0002\u0002","\u02ca\u02c7\u0003\u0002\u0002\u0002\u02cb\u02ce\u0003\u0002\u0002\u0002","\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002","\u02cd\u02cf\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002","\u02cf\u02d0\u0007-\u0002\u0002\u02d0[\u0003\u0002\u0002\u0002\u02d1","\u02d6\u0005^0\u0002\u02d2\u02d3\u0007W\u0002\u0002\u02d3\u02d5\u0005","^0\u0002\u02d4\u02d2\u0003\u0002\u0002\u0002\u02d5\u02d8\u0003\u0002","\u0002\u0002\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d6\u02d7\u0003\u0002","\u0002\u0002\u02d7\u02db\u0003\u0002\u0002\u0002\u02d8\u02d6\u0003\u0002","\u0002\u0002\u02d9\u02da\u0007W\u0002\u0002\u02da\u02dc\u0005`1\u0002","\u02db\u02d9\u0003\u0002\u0002\u0002\u02db\u02dc\u0003\u0002\u0002\u0002","\u02dc\u02df\u0003\u0002\u0002\u0002\u02dd\u02df\u0005`1\u0002\u02de","\u02d1\u0003\u0002\u0002\u0002\u02de\u02dd\u0003\u0002\u0002\u0002\u02df","]\u0003\u0002\u0002\u0002\u02e0\u02e2\u0005\u000e\b\u0002\u02e1\u02e0","\u0003\u0002\u0002\u0002\u02e2\u02e5\u0003\u0002\u0002\u0002\u02e3\u02e1","\u0003\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002\u0002\u0002\u02e4\u02e6","\u0003\u0002\u0002\u0002\u02e5\u02e3\u0003\u0002\u0002\u0002\u02e6\u02e7","\u0005\u00eex\u0002\u02e7\u02e8\u0005L\'\u0002\u02e8_\u0003\u0002\u0002","\u0002\u02e9\u02eb\u0005\u000e\b\u0002\u02ea\u02e9\u0003\u0002\u0002","\u0002\u02eb\u02ee\u0003\u0002\u0002\u0002\u02ec\u02ea\u0003\u0002\u0002","\u0002\u02ec\u02ed\u0003\u0002\u0002\u0002\u02ed\u02ef\u0003\u0002\u0002","\u0002\u02ee\u02ec\u0003\u0002\u0002\u0002\u02ef\u02f3\u0005\u00eex","\u0002\u02f0\u02f2\u0005p9\u0002\u02f1\u02f0\u0003\u0002\u0002\u0002","\u02f2\u02f5\u0003\u0002\u0002\u0002\u02f3\u02f1\u0003\u0002\u0002\u0002","\u02f3\u02f4\u0003\u0002\u0002\u0002\u02f4\u02f6\u0003\u0002\u0002\u0002","\u02f5\u02f3\u0003\u0002\u0002\u0002\u02f6\u02f7\u0007~\u0002\u0002","\u02f7\u02f8\u0005L\'\u0002\u02f8a\u0003\u0002\u0002\u0002\u02f9\u02fe","\u0005d3\u0002\u02fa\u02fb\u0007W\u0002\u0002\u02fb\u02fd\u0005d3\u0002","\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fd\u0300\u0003\u0002\u0002\u0002","\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002","\u02ffc\u0003\u0002\u0002\u0002\u0300\u02fe\u0003\u0002\u0002\u0002","\u0301\u0303\u0005\u000e\b\u0002\u0302\u0301\u0003\u0002\u0002\u0002","\u0303\u0306\u0003\u0002\u0002\u0002\u0304\u0302\u0003\u0002\u0002\u0002","\u0304\u0305\u0003\u0002\u0002\u0002\u0305\u0307\u0003\u0002\u0002\u0002","\u0306\u0304\u0003\u0002\u0002\u0002\u0307\u0308\u0007?\u0002\u0002","\u0308\u0309\u0005\u00a2R\u0002\u0309e\u0003\u0002\u0002\u0002\u030a","\u030f\u0005\u00a2R\u0002\u030b\u030c\u0007X\u0002\u0002\u030c\u030e","\u0005\u00a2R\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030e\u0311","\u0003\u0002\u0002\u0002\u030f\u030d\u0003\u0002\u0002\u0002\u030f\u0310","\u0003\u0002\u0002\u0002\u0310g\u0003\u0002\u0002\u0002\u0311\u030f","\u0003\u0002\u0002\u0002\u0312\u031a\u0005j6\u0002\u0313\u031a\u0005","l7\u0002\u0314\u031a\u0007L\u0002\u0002\u0315\u031a\u0007M\u0002\u0002","\u0316\u031a\u0007K\u0002\u0002\u0317\u031a\u0007O\u0002\u0002\u0318","\u031a\u0007N\u0002\u0002\u0319\u0312\u0003\u0002\u0002\u0002\u0319","\u0313\u0003\u0002\u0002\u0002\u0319\u0314\u0003\u0002\u0002\u0002\u0319","\u0315\u0003\u0002\u0002\u0002\u0319\u0316\u0003\u0002\u0002\u0002\u0319","\u0317\u0003\u0002\u0002\u0002\u0319\u0318\u0003\u0002\u0002\u0002\u031a","i\u0003\u0002\u0002\u0002\u031b\u031c\t\u0003\u0002\u0002\u031ck\u0003","\u0002\u0002\u0002\u031d\u031e\t\u0004\u0002\u0002\u031em\u0003\u0002","\u0002\u0002\u031f\u0320\u0005\u00a2R\u0002\u0320\u0321\u0007X\u0002","\u0002\u0321\u0323\u0003\u0002\u0002\u0002\u0322\u031f\u0003\u0002\u0002","\u0002\u0323\u0326\u0003\u0002\u0002\u0002\u0324\u0322\u0003\u0002\u0002","\u0002\u0324\u0325\u0003\u0002\u0002\u0002\u0325\u0327\u0003\u0002\u0002","\u0002\u0326\u0324\u0003\u0002\u0002\u0002\u0327\u0328\u0007}\u0002","\u0002\u0328\u0329\u0005\u00a2R\u0002\u0329o\u0003\u0002\u0002\u0002","\u032a\u032b\u0007}\u0002\u0002\u032b\u032e\u0005f4\u0002\u032c\u032e","\u0005n8\u0002\u032d\u032a\u0003\u0002\u0002\u0002\u032d\u032c\u0003","\u0002\u0002\u0002\u032e\u0335\u0003\u0002\u0002\u0002\u032f\u0332\u0007","P\u0002\u0002\u0330\u0333\u0005r:\u0002\u0331\u0333\u0005v<\u0002\u0332","\u0330\u0003\u0002\u0002\u0002\u0332\u0331\u0003\u0002\u0002\u0002\u0332","\u0333\u0003\u0002\u0002\u0002\u0333\u0334\u0003\u0002\u0002\u0002\u0334","\u0336\u0007Q\u0002\u0002\u0335\u032f\u0003\u0002\u0002\u0002\u0335","\u0336\u0003\u0002\u0002\u0002\u0336q\u0003\u0002\u0002\u0002\u0337","\u033c\u0005t;\u0002\u0338\u0339\u0007W\u0002\u0002\u0339\u033b\u0005","t;\u0002\u033a\u0338\u0003\u0002\u0002\u0002\u033b\u033e\u0003\u0002","\u0002\u0002\u033c\u033a\u0003\u0002\u0002\u0002\u033c\u033d\u0003\u0002","\u0002\u0002\u033ds\u0003\u0002\u0002\u0002\u033e\u033c\u0003\u0002","\u0002\u0002\u033f\u0340\u0005\u00a2R\u0002\u0340\u0341\u0007Y\u0002","\u0002\u0341\u0342\u0005v<\u0002\u0342u\u0003\u0002\u0002\u0002\u0343","\u0347\u0005\u00c4c\u0002\u0344\u0347\u0005p9\u0002\u0345\u0347\u0005","x=\u0002\u0346\u0343\u0003\u0002\u0002\u0002\u0346\u0344\u0003\u0002","\u0002\u0002\u0346\u0345\u0003\u0002\u0002\u0002\u0347w\u0003\u0002","\u0002\u0002\u0348\u0351\u0007R\u0002\u0002\u0349\u034e\u0005v<\u0002","\u034a\u034b\u0007W\u0002\u0002\u034b\u034d\u0005v<\u0002\u034c\u034a","\u0003\u0002\u0002\u0002\u034d\u0350\u0003\u0002\u0002\u0002\u034e\u034c","\u0003\u0002\u0002\u0002\u034e\u034f\u0003\u0002\u0002\u0002\u034f\u0352","\u0003\u0002\u0002\u0002\u0350\u034e\u0003\u0002\u0002\u0002\u0351\u0349","\u0003\u0002\u0002\u0002\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u0354","\u0003\u0002\u0002\u0002\u0353\u0355\u0007W\u0002\u0002\u0354\u0353","\u0003\u0002\u0002\u0002\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u0356","\u0003\u0002\u0002\u0002\u0356\u0357\u0007S\u0002\u0002\u0357y\u0003","\u0002\u0002\u0002\u0358\u0359\u0007}\u0002\u0002\u0359\u035a\u0007","\u001e\u0002\u0002\u035a\u035b\u0005\u00a2R\u0002\u035b\u035c\u0005","|?\u0002\u035c{\u0003\u0002\u0002\u0002\u035d\u0361\u0007R\u0002\u0002","\u035e\u0360\u0005~@\u0002\u035f\u035e\u0003\u0002\u0002\u0002\u0360","\u0363\u0003\u0002\u0002\u0002\u0361\u035f\u0003\u0002\u0002\u0002\u0361","\u0362\u0003\u0002\u0002\u0002\u0362\u0364\u0003\u0002\u0002\u0002\u0363","\u0361\u0003\u0002\u0002\u0002\u0364\u0365\u0007S\u0002\u0002\u0365","}\u0003\u0002\u0002\u0002\u0366\u0368\u0005\n\u0006\u0002\u0367\u0366","\u0003\u0002\u0002\u0002\u0368\u036b\u0003\u0002\u0002\u0002\u0369\u0367","\u0003\u0002\u0002\u0002\u0369\u036a\u0003\u0002\u0002\u0002\u036a\u036c","\u0003\u0002\u0002\u0002\u036b\u0369\u0003\u0002\u0002\u0002\u036c\u036f","\u0005\u0080A\u0002\u036d\u036f\u0007V\u0002\u0002\u036e\u0369\u0003","\u0002\u0002\u0002\u036e\u036d\u0003\u0002\u0002\u0002\u036f\u007f\u0003","\u0002\u0002\u0002\u0370\u0371\u0005\u00eex\u0002\u0371\u0372\u0005","\u0082B\u0002\u0372\u0373\u0007V\u0002\u0002\u0373\u0389\u0003\u0002","\u0002\u0002\u0374\u0376\u0005\u0010\t\u0002\u0375\u0377\u0007V\u0002","\u0002\u0376\u0375\u0003\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002","\u0002\u0377\u0389\u0003\u0002\u0002\u0002\u0378\u037a\u0005 \u0011","\u0002\u0379\u037b\u0007V\u0002\u0002\u037a\u0379\u0003\u0002\u0002","\u0002\u037a\u037b\u0003\u0002\u0002\u0002\u037b\u0389\u0003\u0002\u0002","\u0002\u037c\u037e\u0005\u0018\r\u0002\u037d\u037f\u0007V\u0002\u0002","\u037e\u037d\u0003\u0002\u0002\u0002\u037e\u037f\u0003\u0002\u0002\u0002","\u037f\u0389\u0003\u0002\u0002\u0002\u0380\u0382\u0005z>\u0002\u0381","\u0383\u0007V\u0002\u0002\u0382\u0381\u0003\u0002\u0002\u0002\u0382","\u0383\u0003\u0002\u0002\u0002\u0383\u0389\u0003\u0002\u0002\u0002\u0384","\u0386\u0005\u0092J\u0002\u0385\u0387\u0007V\u0002\u0002\u0386\u0385","\u0003\u0002\u0002\u0002\u0386\u0387\u0003\u0002\u0002\u0002\u0387\u0389","\u0003\u0002\u0002\u0002\u0388\u0370\u0003\u0002\u0002\u0002\u0388\u0374","\u0003\u0002\u0002\u0002\u0388\u0378\u0003\u0002\u0002\u0002\u0388\u037c","\u0003\u0002\u0002\u0002\u0388\u0380\u0003\u0002\u0002\u0002\u0388\u0384","\u0003\u0002\u0002\u0002\u0389\u0081\u0003\u0002\u0002\u0002\u038a\u038d","\u0005\u0084C\u0002\u038b\u038d\u0005\u0086D\u0002\u038c\u038a\u0003","\u0002\u0002\u0002\u038c\u038b\u0003\u0002\u0002\u0002\u038d\u0083\u0003","\u0002\u0002\u0002\u038e\u038f\u0005\u00a2R\u0002\u038f\u0390\u0007","P\u0002\u0002\u0390\u0392\u0007Q\u0002\u0002\u0391\u0393\u0005\u0088","E\u0002\u0392\u0391\u0003\u0002\u0002\u0002\u0392\u0393\u0003\u0002","\u0002\u0002\u0393\u0085\u0003\u0002\u0002\u0002\u0394\u0395\u0005H","%\u0002\u0395\u0087\u0003\u0002\u0002\u0002\u0396\u0397\u0007\u000e","\u0002\u0002\u0397\u0398\u0005v<\u0002\u0398\u0089\u0003\u0002\u0002","\u0002\u0399\u039b\u00076\u0002\u0002\u039a\u0399\u0003\u0002\u0002","\u0002\u039a\u039b\u0003\u0002\u0002\u0002\u039b\u039c\u0003\u0002\u0002","\u0002\u039c\u039d\u00075\u0002\u0002\u039d\u039e\u0005f4\u0002\u039e","\u039f\u0005\u008cG\u0002\u039f\u008b\u0003\u0002\u0002\u0002\u03a0","\u03a4\u0007R\u0002\u0002\u03a1\u03a3\u0005\u008eH\u0002\u03a2\u03a1","\u0003\u0002\u0002\u0002\u03a3\u03a6\u0003\u0002\u0002\u0002\u03a4\u03a2","\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5\u03a7","\u0003\u0002\u0002\u0002\u03a6\u03a4\u0003\u0002\u0002\u0002\u03a7\u03a8","\u0007S\u0002\u0002\u03a8\u008d\u0003\u0002\u0002\u0002\u03a9\u03ad","\u00077\u0002\u0002\u03aa\u03ac\u0005\u0090I\u0002\u03ab\u03aa\u0003","\u0002\u0002\u0002\u03ac\u03af\u0003\u0002\u0002\u0002\u03ad\u03ab\u0003","\u0002\u0002\u0002\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u03b0\u0003","\u0002\u0002\u0002\u03af\u03ad\u0003\u0002\u0002\u0002\u03b0\u03b1\u0005","f4\u0002\u03b1\u03b2\u0007V\u0002\u0002\u03b2\u03ce\u0003\u0002\u0002","\u0002\u03b3\u03b4\u00078\u0002\u0002\u03b4\u03b7\u0005f4\u0002\u03b5","\u03b6\u0007:\u0002\u0002\u03b6\u03b8\u0005f4\u0002\u03b7\u03b5\u0003","\u0002\u0002\u0002\u03b7\u03b8\u0003\u0002\u0002\u0002\u03b8\u03b9\u0003","\u0002\u0002\u0002\u03b9\u03ba\u0007V\u0002\u0002\u03ba\u03ce\u0003","\u0002\u0002\u0002\u03bb\u03bc\u00079\u0002\u0002\u03bc\u03bf\u0005","f4\u0002\u03bd\u03be\u0007:\u0002\u0002\u03be\u03c0\u0005f4\u0002\u03bf","\u03bd\u0003\u0002\u0002\u0002\u03bf\u03c0\u0003\u0002\u0002\u0002\u03c0","\u03c1\u0003\u0002\u0002\u0002\u03c1\u03c2\u0007V\u0002\u0002\u03c2","\u03ce\u0003\u0002\u0002\u0002\u03c3\u03c4\u0007;\u0002\u0002\u03c4","\u03c5\u0005f4\u0002\u03c5\u03c6\u0007V\u0002\u0002\u03c6\u03ce\u0003","\u0002\u0002\u0002\u03c7\u03c8\u0007<\u0002\u0002\u03c8\u03c9\u0005","f4\u0002\u03c9\u03ca\u0007=\u0002\u0002\u03ca\u03cb\u0005f4\u0002\u03cb","\u03cc\u0007V\u0002\u0002\u03cc\u03ce\u0003\u0002\u0002\u0002\u03cd","\u03a9\u0003\u0002\u0002\u0002\u03cd\u03b3\u0003\u0002\u0002\u0002\u03cd","\u03bb\u0003\u0002\u0002\u0002\u03cd\u03c3\u0003\u0002\u0002\u0002\u03cd","\u03c7\u0003\u0002\u0002\u0002\u03ce\u008f\u0003\u0002\u0002\u0002\u03cf","\u03d0\t\u0005\u0002\u0002\u03d0\u0091\u0003\u0002\u0002\u0002\u03d1","\u03d2\u0007A\u0002\u0002\u03d2\u03d4\u0005\u00a2R\u0002\u03d3\u03d5","\u0005\u0012\n\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d4\u03d5","\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002\u03d6\u03d9","\u0005\u0094K\u0002\u03d7\u03d8\u0007\u001a\u0002\u0002\u03d8\u03da","\u0005\u00ecw\u0002\u03d9\u03d7\u0003\u0002\u0002\u0002\u03d9\u03da","\u0003\u0002\u0002\u0002\u03da\u03db\u0003\u0002\u0002\u0002\u03db\u03dc","\u0005\u009aN\u0002\u03dc\u0093\u0003\u0002\u0002\u0002\u03dd\u03df","\u0007P\u0002\u0002\u03de\u03e0\u0005\u0096L\u0002\u03df\u03de\u0003","\u0002\u0002\u0002\u03df\u03e0\u0003\u0002\u0002\u0002\u03e0\u03e1\u0003","\u0002\u0002\u0002\u03e1\u03e2\u0007Q\u0002\u0002\u03e2\u0095\u0003","\u0002\u0002\u0002\u03e3\u03e8\u0005\u0098M\u0002\u03e4\u03e5\u0007","W\u0002\u0002\u03e5\u03e7\u0005\u0098M\u0002\u03e6\u03e4\u0003\u0002","\u0002\u0002\u03e7\u03ea\u0003\u0002\u0002\u0002\u03e8\u03e6\u0003\u0002","\u0002\u0002\u03e8\u03e9\u0003\u0002\u0002\u0002\u03e9\u0097\u0003\u0002","\u0002\u0002\u03ea\u03e8\u0003\u0002\u0002\u0002\u03eb\u03ec\u0005\u00ee","x\u0002\u03ec\u03ed\u0005\u00a2R\u0002\u03ed\u0099\u0003\u0002\u0002","\u0002\u03ee\u03f2\u0007R\u0002\u0002\u03ef\u03f1\u0005&\u0014\u0002","\u03f0\u03ef\u0003\u0002\u0002\u0002\u03f1\u03f4\u0003\u0002\u0002\u0002","\u03f2\u03f0\u0003\u0002\u0002\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002","\u03f3\u03f5\u0003\u0002\u0002\u0002\u03f4\u03f2\u0003\u0002\u0002\u0002","\u03f5\u03f6\u0007S\u0002\u0002\u03f6\u009b\u0003\u0002\u0002\u0002","\u03f7\u03fb\u0007R\u0002\u0002\u03f8\u03fa\u0005\u009eP\u0002\u03f9","\u03f8\u0003\u0002\u0002\u0002\u03fa\u03fd\u0003\u0002\u0002\u0002\u03fb","\u03f9\u0003\u0002\u0002\u0002\u03fb\u03fc\u0003\u0002\u0002\u0002\u03fc","\u03fe\u0003\u0002\u0002\u0002\u03fd\u03fb\u0003\u0002\u0002\u0002\u03fe","\u03ff\u0007S\u0002\u0002\u03ff\u009d\u0003\u0002\u0002\u0002\u0400","\u0401\u0005\u00a0Q\u0002\u0401\u0402\u0007V\u0002\u0002\u0402\u0406","\u0003\u0002\u0002\u0002\u0403\u0406\u0005\u00a6T\u0002\u0404\u0406","\u0005\u00a4S\u0002\u0405\u0400\u0003\u0002\u0002\u0002\u0405\u0403","\u0003\u0002\u0002\u0002\u0405\u0404\u0003\u0002\u0002\u0002\u0406\u009f","\u0003\u0002\u0002\u0002\u0407\u0409\u0005\u000e\b\u0002\u0408\u0407","\u0003\u0002\u0002\u0002\u0409\u040c\u0003\u0002\u0002\u0002\u040a\u0408","\u0003\u0002\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002\u040b\u0415","\u0003\u0002\u0002\u0002\u040c\u040a\u0003\u0002\u0002\u0002\u040d\u040e","\u0005\u00eex\u0002\u040e\u040f\u0005H%\u0002\u040f\u0416\u0003\u0002","\u0002\u0002\u0410\u0411\u0007?\u0002\u0002\u0411\u0412\u0005\u00a2","R\u0002\u0412\u0413\u0007Y\u0002\u0002\u0413\u0414\u0005\u00c4c\u0002","\u0414\u0416\u0003\u0002\u0002\u0002\u0415\u040d\u0003\u0002\u0002\u0002","\u0415\u0410\u0003\u0002\u0002\u0002\u0416\u00a1\u0003\u0002\u0002\u0002","\u0417\u0418\t\u0006\u0002\u0002\u0418\u00a3\u0003\u0002\u0002\u0002","\u0419\u041b\u0005\f\u0007\u0002\u041a\u0419\u0003\u0002\u0002\u0002","\u041b\u041e\u0003\u0002\u0002\u0002\u041c\u041a\u0003\u0002\u0002\u0002","\u041c\u041d\u0003\u0002\u0002\u0002\u041d\u0422\u0003\u0002\u0002\u0002","\u041e\u041c\u0003\u0002\u0002\u0002\u041f\u0423\u0005\u0010\t\u0002","\u0420\u0423\u0005 \u0011\u0002\u0421\u0423\u0005\u0092J\u0002\u0422","\u041f\u0003\u0002\u0002\u0002\u0422\u0420\u0003\u0002\u0002\u0002\u0422","\u0421\u0003\u0002\u0002\u0002\u0423\u0426\u0003\u0002\u0002\u0002\u0424","\u0426\u0007V\u0002\u0002\u0425\u041c\u0003\u0002\u0002\u0002\u0425","\u0424\u0003\u0002\u0002\u0002\u0426\u00a5\u0003\u0002\u0002\u0002\u0427","\u0499\u0005\u009cO\u0002\u0428\u0429\u0007\u0004\u0002\u0002\u0429","\u042c\u0005\u00c4c\u0002\u042a\u042b\u0007_\u0002\u0002\u042b\u042d","\u0005\u00c4c\u0002\u042c\u042a\u0003\u0002\u0002\u0002\u042c\u042d","\u0003\u0002\u0002\u0002\u042d\u042e\u0003\u0002\u0002\u0002\u042e\u042f","\u0007V\u0002\u0002\u042f\u0499\u0003\u0002\u0002\u0002\u0430\u0431","\u0007\u0018\u0002\u0002\u0431\u0432\u0005\u00be`\u0002\u0432\u0435","\u0005\u00a6T\u0002\u0433\u0434\u0007\u0011\u0002\u0002\u0434\u0436","\u0005\u00a6T\u0002\u0435\u0433\u0003\u0002\u0002\u0002\u0435\u0436","\u0003\u0002\u0002\u0002\u0436\u0499\u0003\u0002\u0002\u0002\u0437\u0438","\u0007\u0017\u0002\u0002\u0438\u0439\u0007P\u0002\u0002\u0439\u043a","\u0005\u00b8]\u0002\u043a\u043b\u0007Q\u0002\u0002\u043b\u043c\u0005","\u00a6T\u0002\u043c\u0499\u0003\u0002\u0002\u0002\u043d\u043e\u0007","4\u0002\u0002\u043e\u043f\u0005\u00be`\u0002\u043f\u0440\u0005\u00a6","T\u0002\u0440\u0499\u0003\u0002\u0002\u0002\u0441\u0442\u0007\u000f","\u0002\u0002\u0442\u0443\u0005\u00a6T\u0002\u0443\u0444\u00074\u0002","\u0002\u0444\u0445\u0005\u00be`\u0002\u0445\u0446\u0007V\u0002\u0002","\u0446\u0499\u0003\u0002\u0002\u0002\u0447\u0448\u00071\u0002\u0002","\u0448\u0452\u0005\u009cO\u0002\u0449\u044b\u0005\u00a8U\u0002\u044a","\u0449\u0003\u0002\u0002\u0002\u044b\u044c\u0003\u0002\u0002\u0002\u044c","\u044a\u0003\u0002\u0002\u0002\u044c\u044d\u0003\u0002\u0002\u0002\u044d","\u044f\u0003\u0002\u0002\u0002\u044e\u0450\u0005\u00acW\u0002\u044f","\u044e\u0003\u0002\u0002\u0002\u044f\u0450\u0003\u0002\u0002\u0002\u0450","\u0453\u0003\u0002\u0002\u0002\u0451\u0453\u0005\u00acW\u0002\u0452","\u044a\u0003\u0002\u0002\u0002\u0452\u0451\u0003\u0002\u0002\u0002\u0453","\u0499\u0003\u0002\u0002\u0002\u0454\u0455\u00071\u0002\u0002\u0455","\u0456\u0005\u00aeX\u0002\u0456\u045a\u0005\u009cO\u0002\u0457\u0459","\u0005\u00a8U\u0002\u0458\u0457\u0003\u0002\u0002\u0002\u0459\u045c","\u0003\u0002\u0002\u0002\u045a\u0458\u0003\u0002\u0002\u0002\u045a\u045b","\u0003\u0002\u0002\u0002\u045b\u045e\u0003\u0002\u0002\u0002\u045c\u045a","\u0003\u0002\u0002\u0002\u045d\u045f\u0005\u00acW\u0002\u045e\u045d","\u0003\u0002\u0002\u0002\u045e\u045f\u0003\u0002\u0002\u0002\u045f\u0499","\u0003\u0002\u0002\u0002\u0460\u0461\u0007+\u0002\u0002\u0461\u0462","\u0005\u00be`\u0002\u0462\u0466\u0007R\u0002\u0002\u0463\u0465\u0005","\u00b4[\u0002\u0464\u0463\u0003\u0002\u0002\u0002\u0465\u0468\u0003","\u0002\u0002\u0002\u0466\u0464\u0003\u0002\u0002\u0002\u0466\u0467\u0003","\u0002\u0002\u0002\u0467\u046c\u0003\u0002\u0002\u0002\u0468\u0466\u0003","\u0002\u0002\u0002\u0469\u046b\u0005\u00b6\\\u0002\u046a\u0469\u0003","\u0002\u0002\u0002\u046b\u046e\u0003\u0002\u0002\u0002\u046c\u046a\u0003","\u0002\u0002\u0002\u046c\u046d\u0003\u0002\u0002\u0002\u046d\u046f\u0003","\u0002\u0002\u0002\u046e\u046c\u0003\u0002\u0002\u0002\u046f\u0470\u0007","S\u0002\u0002\u0470\u0499\u0003\u0002\u0002\u0002\u0471\u0472\u0007",",\u0002\u0002\u0472\u0473\u0005\u00be`\u0002\u0473\u0474\u0005\u009c","O\u0002\u0474\u0499\u0003\u0002\u0002\u0002\u0475\u0477\u0007&\u0002","\u0002\u0476\u0478\u0005\u00c4c\u0002\u0477\u0476\u0003\u0002\u0002","\u0002\u0477\u0478\u0003\u0002\u0002\u0002\u0478\u0479\u0003\u0002\u0002","\u0002\u0479\u0499\u0007V\u0002\u0002\u047a\u047b\u0007.\u0002\u0002","\u047b\u047c\u0005\u00c4c\u0002\u047c\u047d\u0007V\u0002\u0002\u047d","\u0499\u0003\u0002\u0002\u0002\u047e\u0480\u0007\u0006\u0002\u0002\u047f","\u0481\u0005\u00a2R\u0002\u0480\u047f\u0003\u0002\u0002\u0002\u0480","\u0481\u0003\u0002\u0002\u0002\u0481\u0482\u0003\u0002\u0002\u0002\u0482","\u0499\u0007V\u0002\u0002\u0483\u0485\u0007\r\u0002\u0002\u0484\u0486","\u0005\u00a2R\u0002\u0485\u0484\u0003\u0002\u0002\u0002\u0485\u0486","\u0003\u0002\u0002\u0002\u0486\u0487\u0003\u0002\u0002\u0002\u0487\u0499","\u0007V\u0002\u0002\u0488\u0489\u0007@\u0002\u0002\u0489\u048a\u0005","\u00c4c\u0002\u048a\u048b\u0007V\u0002\u0002\u048b\u0499\u0003\u0002","\u0002\u0002\u048c\u0499\u0007V\u0002\u0002\u048d\u048e\u0005\u00c4","c\u0002\u048e\u048f\u0007V\u0002\u0002\u048f\u0499\u0003\u0002\u0002","\u0002\u0490\u0492\u0005\u00d0i\u0002\u0491\u0493\u0007V\u0002\u0002","\u0492\u0491\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002\u0002","\u0493\u0499\u0003\u0002\u0002\u0002\u0494\u0495\u0005\u00a2R\u0002","\u0495\u0496\u0007_\u0002\u0002\u0496\u0497\u0005\u00a6T\u0002\u0497","\u0499\u0003\u0002\u0002\u0002\u0498\u0427\u0003\u0002\u0002\u0002\u0498","\u0428\u0003\u0002\u0002\u0002\u0498\u0430\u0003\u0002\u0002\u0002\u0498","\u0437\u0003\u0002\u0002\u0002\u0498\u043d\u0003\u0002\u0002\u0002\u0498","\u0441\u0003\u0002\u0002\u0002\u0498\u0447\u0003\u0002\u0002\u0002\u0498","\u0454\u0003\u0002\u0002\u0002\u0498\u0460\u0003\u0002\u0002\u0002\u0498","\u0471\u0003\u0002\u0002\u0002\u0498\u0475\u0003\u0002\u0002\u0002\u0498","\u047a\u0003\u0002\u0002\u0002\u0498\u047e\u0003\u0002\u0002\u0002\u0498","\u0483\u0003\u0002\u0002\u0002\u0498\u0488\u0003\u0002\u0002\u0002\u0498","\u048c\u0003\u0002\u0002\u0002\u0498\u048d\u0003\u0002\u0002\u0002\u0498","\u0490\u0003\u0002\u0002\u0002\u0498\u0494\u0003\u0002\u0002\u0002\u0499","\u00a7\u0003\u0002\u0002\u0002\u049a\u049b\u0007\t\u0002\u0002\u049b","\u049f\u0007P\u0002\u0002\u049c\u049e\u0005\u000e\b\u0002\u049d\u049c","\u0003\u0002\u0002\u0002\u049e\u04a1\u0003\u0002\u0002\u0002\u049f\u049d","\u0003\u0002\u0002\u0002\u049f\u04a0\u0003\u0002\u0002\u0002\u04a0\u04a2","\u0003\u0002\u0002\u0002\u04a1\u049f\u0003\u0002\u0002\u0002\u04a2\u04a3","\u0005\u00aaV\u0002\u04a3\u04a4\u0005\u00a2R\u0002\u04a4\u04a5\u0007","Q\u0002\u0002\u04a5\u04a6\u0005\u009cO\u0002\u04a6\u00a9\u0003\u0002","\u0002\u0002\u04a7\u04ac\u0005f4\u0002\u04a8\u04a9\u0007m\u0002\u0002","\u04a9\u04ab\u0005f4\u0002\u04aa\u04a8\u0003\u0002\u0002\u0002\u04ab","\u04ae\u0003\u0002\u0002\u0002\u04ac\u04aa\u0003\u0002\u0002\u0002\u04ac","\u04ad\u0003\u0002\u0002\u0002\u04ad\u00ab\u0003\u0002\u0002\u0002\u04ae","\u04ac\u0003\u0002\u0002\u0002\u04af\u04b0\u0007\u0015\u0002\u0002\u04b0","\u04b1\u0005\u009cO\u0002\u04b1\u00ad\u0003\u0002\u0002\u0002\u04b2","\u04b3\u0007P\u0002\u0002\u04b3\u04b5\u0005\u00b0Y\u0002\u04b4\u04b6","\u0007V\u0002\u0002\u04b5\u04b4\u0003\u0002\u0002\u0002\u04b5\u04b6","\u0003\u0002\u0002\u0002\u04b6\u04b7\u0003\u0002\u0002\u0002\u04b7\u04b8","\u0007Q\u0002\u0002\u04b8\u00af\u0003\u0002\u0002\u0002\u04b9\u04be","\u0005\u00b2Z\u0002\u04ba\u04bb\u0007V\u0002\u0002\u04bb\u04bd\u0005","\u00b2Z\u0002\u04bc\u04ba\u0003\u0002\u0002\u0002\u04bd\u04c0\u0003","\u0002\u0002\u0002\u04be\u04bc\u0003\u0002\u0002\u0002\u04be\u04bf\u0003","\u0002\u0002\u0002\u04bf\u00b1\u0003\u0002\u0002\u0002\u04c0\u04be\u0003","\u0002\u0002\u0002\u04c1\u04c3\u0005\u000e\b\u0002\u04c2\u04c1\u0003","\u0002\u0002\u0002\u04c3\u04c6\u0003\u0002\u0002\u0002\u04c4\u04c2\u0003","\u0002\u0002\u0002\u04c4\u04c5\u0003\u0002\u0002\u0002\u04c5\u04cc\u0003","\u0002\u0002\u0002\u04c6\u04c4\u0003\u0002\u0002\u0002\u04c7\u04c8\u0005","R*\u0002\u04c8\u04c9\u0005L\'\u0002\u04c9\u04cd\u0003\u0002\u0002\u0002","\u04ca\u04cb\u0007?\u0002\u0002\u04cb\u04cd\u0005\u00a2R\u0002\u04cc","\u04c7\u0003\u0002\u0002\u0002\u04cc\u04ca\u0003\u0002\u0002\u0002\u04cd","\u04ce\u0003\u0002\u0002\u0002\u04ce\u04cf\u0007Y\u0002\u0002\u04cf","\u04d0\u0005\u00c4c\u0002\u04d0\u04d3\u0003\u0002\u0002\u0002\u04d1","\u04d3\u0005\u00a2R\u0002\u04d2\u04c4\u0003\u0002\u0002\u0002\u04d2","\u04d1\u0003\u0002\u0002\u0002\u04d3\u00b3\u0003\u0002\u0002\u0002\u04d4","\u04d6\u0005\u00b6\\\u0002\u04d5\u04d4\u0003\u0002\u0002\u0002\u04d6","\u04d7\u0003\u0002\u0002\u0002\u04d7\u04d5\u0003\u0002\u0002\u0002\u04d7","\u04d8\u0003\u0002\u0002\u0002\u04d8\u04da\u0003\u0002\u0002\u0002\u04d9","\u04db\u0005\u009eP\u0002\u04da\u04d9\u0003\u0002\u0002\u0002\u04db","\u04dc\u0003\u0002\u0002\u0002\u04dc\u04da\u0003\u0002\u0002\u0002\u04dc","\u04dd\u0003\u0002\u0002\u0002\u04dd\u00b5\u0003\u0002\u0002\u0002\u04de","\u04e4\u0007\b\u0002\u0002\u04df\u04e5\u0005\u00c4c\u0002\u04e0\u04e5","\u0007\u0082\u0002\u0002\u04e1\u04e2\u0005\u00eex\u0002\u04e2\u04e3","\u0005\u00a2R\u0002\u04e3\u04e5\u0003\u0002\u0002\u0002\u04e4\u04df","\u0003\u0002\u0002\u0002\u04e4\u04e0\u0003\u0002\u0002\u0002\u04e4\u04e1","\u0003\u0002\u0002\u0002\u04e5\u04e6\u0003\u0002\u0002\u0002\u04e6\u04ea","\u0007_\u0002\u0002\u04e7\u04e8\u0007\u000e\u0002\u0002\u04e8\u04ea","\u0007_\u0002\u0002\u04e9\u04de\u0003\u0002\u0002\u0002\u04e9\u04e7","\u0003\u0002\u0002\u0002\u04ea\u00b7\u0003\u0002\u0002\u0002\u04eb\u04f8","\u0005\u00bc_\u0002\u04ec\u04ee\u0005\u00ba^\u0002\u04ed\u04ec\u0003","\u0002\u0002\u0002\u04ed\u04ee\u0003\u0002\u0002\u0002\u04ee\u04ef\u0003","\u0002\u0002\u0002\u04ef\u04f1\u0007V\u0002\u0002\u04f0\u04f2\u0005","\u00c4c\u0002\u04f1\u04f0\u0003\u0002\u0002\u0002\u04f1\u04f2\u0003","\u0002\u0002\u0002\u04f2\u04f3\u0003\u0002\u0002\u0002\u04f3\u04f5\u0007","V\u0002\u0002\u04f4\u04f6\u0005\u00c0a\u0002\u04f5\u04f4\u0003\u0002","\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f8\u0003\u0002","\u0002\u0002\u04f7\u04eb\u0003\u0002\u0002\u0002\u04f7\u04ed\u0003\u0002","\u0002\u0002\u04f8\u00b9\u0003\u0002\u0002\u0002\u04f9\u04fc\u0005\u00a0","Q\u0002\u04fa\u04fc\u0005\u00c0a\u0002\u04fb\u04f9\u0003\u0002\u0002","\u0002\u04fb\u04fa\u0003\u0002\u0002\u0002\u04fc\u00bb\u0003\u0002\u0002","\u0002\u04fd\u04ff\u0005\u000e\b\u0002\u04fe\u04fd\u0003\u0002\u0002","\u0002\u04ff\u0502\u0003\u0002\u0002\u0002\u0500\u04fe\u0003\u0002\u0002","\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501\u0505\u0003\u0002\u0002","\u0002\u0502\u0500\u0003\u0002\u0002\u0002\u0503\u0506\u0005\u00eex","\u0002\u0504\u0506\u0007?\u0002\u0002\u0505\u0503\u0003\u0002\u0002","\u0002\u0505\u0504\u0003\u0002\u0002\u0002\u0506\u0507\u0003\u0002\u0002","\u0002\u0507\u0508\u0005L\'\u0002\u0508\u0509\u0007_\u0002\u0002\u0509","\u050a\u0005\u00c4c\u0002\u050a\u00bd\u0003\u0002\u0002\u0002\u050b","\u050c\u0007P\u0002\u0002\u050c\u050d\u0005\u00c4c\u0002\u050d\u050e","\u0007Q\u0002\u0002\u050e\u00bf\u0003\u0002\u0002\u0002\u050f\u0514","\u0005\u00c4c\u0002\u0510\u0511\u0007W\u0002\u0002\u0511\u0513\u0005","\u00c4c\u0002\u0512\u0510\u0003\u0002\u0002\u0002\u0513\u0516\u0003","\u0002\u0002\u0002\u0514\u0512\u0003\u0002\u0002\u0002\u0514\u0515\u0003","\u0002\u0002\u0002\u0515\u00c1\u0003\u0002\u0002\u0002\u0516\u0514\u0003","\u0002\u0002\u0002\u0517\u0518\u0005\u00a2R\u0002\u0518\u051a\u0007","P\u0002\u0002\u0519\u051b\u0005\u00c0a\u0002\u051a\u0519\u0003\u0002","\u0002\u0002\u051a\u051b\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002","\u0002\u0002\u051c\u051d\u0007Q\u0002\u0002\u051d\u052b\u0003\u0002","\u0002\u0002\u051e\u051f\u0007-\u0002\u0002\u051f\u0521\u0007P\u0002","\u0002\u0520\u0522\u0005\u00c0a\u0002\u0521\u0520\u0003\u0002\u0002","\u0002\u0521\u0522\u0003\u0002\u0002\u0002\u0522\u0523\u0003\u0002\u0002","\u0002\u0523\u052b\u0007Q\u0002\u0002\u0524\u0525\u0007*\u0002\u0002","\u0525\u0527\u0007P\u0002\u0002\u0526\u0528\u0005\u00c0a\u0002\u0527","\u0526\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002\u0002\u0002\u0528","\u0529\u0003\u0002\u0002\u0002\u0529\u052b\u0007Q\u0002\u0002\u052a","\u0517\u0003\u0002\u0002\u0002\u052a\u051e\u0003\u0002\u0002\u0002\u052a","\u0524\u0003\u0002\u0002\u0002\u052b\u00c3\u0003\u0002\u0002\u0002\u052c","\u052d\bc\u0001\u0002\u052d\u055a\u0005\u00ceh\u0002\u052e\u055a\u0005","\u00c2b\u0002\u052f\u0530\u0007!\u0002\u0002\u0530\u055a\u0005\u00da","n\u0002\u0531\u0535\u0007P\u0002\u0002\u0532\u0534\u0005p9\u0002\u0533","\u0532\u0003\u0002\u0002\u0002\u0534\u0537\u0003\u0002\u0002\u0002\u0535","\u0533\u0003\u0002\u0002\u0002\u0535\u0536\u0003\u0002\u0002\u0002\u0536","\u0538\u0003\u0002\u0002\u0002\u0537\u0535\u0003\u0002\u0002\u0002\u0538","\u053d\u0005\u00eex\u0002\u0539\u053a\u0007l\u0002\u0002\u053a\u053c","\u0005\u00eex\u0002\u053b\u0539\u0003\u0002\u0002\u0002\u053c\u053f","\u0003\u0002\u0002\u0002\u053d\u053b\u0003\u0002\u0002\u0002\u053d\u053e","\u0003\u0002\u0002\u0002\u053e\u0540\u0003\u0002\u0002\u0002\u053f\u053d","\u0003\u0002\u0002\u0002\u0540\u0541\u0007Q\u0002\u0002\u0541\u0542","\u0005\u00c4c\u0018\u0542\u055a\u0003\u0002\u0002\u0002\u0543\u0544","\t\u0007\u0002\u0002\u0544\u055a\u0005\u00c4c\u0016\u0545\u0546\t\b","\u0002\u0002\u0546\u055a\u0005\u00c4c\u0015\u0547\u055a\u0005\u00c8","e\u0002\u0548\u055a\u0005\u00d0i\u0002\u0549\u054a\u0005\u00eex\u0002","\u054a\u0550\u0007|\u0002\u0002\u054b\u054d\u0005\u00f2z\u0002\u054c","\u054b\u0003\u0002\u0002\u0002\u054c\u054d\u0003\u0002\u0002\u0002\u054d","\u054e\u0003\u0002\u0002\u0002\u054e\u0551\u0005\u00a2R\u0002\u054f","\u0551\u0007!\u0002\u0002\u0550\u054c\u0003\u0002\u0002\u0002\u0550","\u054f\u0003\u0002\u0002\u0002\u0551\u055a\u0003\u0002\u0002\u0002\u0552","\u0553\u0005\u00d8m\u0002\u0553\u0555\u0007|\u0002\u0002\u0554\u0556","\u0005\u00f2z\u0002\u0555\u0554\u0003\u0002\u0002\u0002\u0555\u0556","\u0003\u0002\u0002\u0002\u0556\u0557\u0003\u0002\u0002\u0002\u0557\u0558","\u0007!\u0002\u0002\u0558\u055a\u0003\u0002\u0002\u0002\u0559\u052c","\u0003\u0002\u0002\u0002\u0559\u052e\u0003\u0002\u0002\u0002\u0559\u052f","\u0003\u0002\u0002\u0002\u0559\u0531\u0003\u0002\u0002\u0002\u0559\u0543","\u0003\u0002\u0002\u0002\u0559\u0545\u0003\u0002\u0002\u0002\u0559\u0547","\u0003\u0002\u0002\u0002\u0559\u0548\u0003\u0002\u0002\u0002\u0559\u0549","\u0003\u0002\u0002\u0002\u0559\u0552\u0003\u0002\u0002\u0002\u055a\u05ae","\u0003\u0002\u0002\u0002\u055b\u055c\f\u0014\u0002\u0002\u055c\u055d","\t\t\u0002\u0002\u055d\u05ad\u0005\u00c4c\u0015\u055e\u055f\f\u0013","\u0002\u0002\u055f\u0560\t\n\u0002\u0002\u0560\u05ad\u0005\u00c4c\u0014","\u0561\u0569\f\u0012\u0002\u0002\u0562\u0563\u0007[\u0002\u0002\u0563","\u056a\u0007[\u0002\u0002\u0564\u0565\u0007Z\u0002\u0002\u0565\u0566","\u0007Z\u0002\u0002\u0566\u056a\u0007Z\u0002\u0002\u0567\u0568\u0007","Z\u0002\u0002\u0568\u056a\u0007Z\u0002\u0002\u0569\u0562\u0003\u0002","\u0002\u0002\u0569\u0564\u0003\u0002\u0002\u0002\u0569\u0567\u0003\u0002","\u0002\u0002\u056a\u056b\u0003\u0002\u0002\u0002\u056b\u05ad\u0005\u00c4","c\u0013\u056c\u056d\f\u0011\u0002\u0002\u056d\u056e\t\u000b\u0002\u0002","\u056e\u05ad\u0005\u00c4c\u0012\u056f\u0570\f\u000f\u0002\u0002\u0570","\u0571\t\f\u0002\u0002\u0571\u05ad\u0005\u00c4c\u0010\u0572\u0573\f","\u000e\u0002\u0002\u0573\u0574\u0007l\u0002\u0002\u0574\u05ad\u0005","\u00c4c\u000f\u0575\u0576\f\r\u0002\u0002\u0576\u0577\u0007n\u0002\u0002","\u0577\u05ad\u0005\u00c4c\u000e\u0578\u0579\f\f\u0002\u0002\u0579\u057a","\u0007m\u0002\u0002\u057a\u05ad\u0005\u00c4c\r\u057b\u057c\f\u000b\u0002","\u0002\u057c\u057d\u0007d\u0002\u0002\u057d\u05ad\u0005\u00c4c\f\u057e","\u057f\f\n\u0002\u0002\u057f\u0580\u0007e\u0002\u0002\u0580\u05ad\u0005","\u00c4c\u000b\u0581\u0582\f\t\u0002\u0002\u0582\u0583\u0007^\u0002\u0002","\u0583\u0584\u0005\u00c4c\u0002\u0584\u0585\u0007_\u0002\u0002\u0585","\u0586\u0005\u00c4c\t\u0586\u05ad\u0003\u0002\u0002\u0002\u0587\u0588","\f\b\u0002\u0002\u0588\u0589\t\r\u0002\u0002\u0589\u05ad\u0005\u00c4","c\b\u058a\u058b\f\u001c\u0002\u0002\u058b\u0597\u0007X\u0002\u0002\u058c","\u0598\u0005\u00a2R\u0002\u058d\u0598\u0005\u00c2b\u0002\u058e\u0598","\u0007-\u0002\u0002\u058f\u0591\u0007!\u0002\u0002\u0590\u0592\u0005","\u00eav\u0002\u0591\u0590\u0003\u0002\u0002\u0002\u0591\u0592\u0003","\u0002\u0002\u0002\u0592\u0593\u0003\u0002\u0002\u0002\u0593\u0598\u0005","\u00dep\u0002\u0594\u0595\u0007*\u0002\u0002\u0595\u0598\u0005\u00f4","{\u0002\u0596\u0598\u0005\u00e4s\u0002\u0597\u058c\u0003\u0002\u0002","\u0002\u0597\u058d\u0003\u0002\u0002\u0002\u0597\u058e\u0003\u0002\u0002","\u0002\u0597\u058f\u0003\u0002\u0002\u0002\u0597\u0594\u0003\u0002\u0002","\u0002\u0597\u0596\u0003\u0002\u0002\u0002\u0598\u05ad\u0003\u0002\u0002","\u0002\u0599\u059a\f\u001b\u0002\u0002\u059a\u059b\u0007T\u0002\u0002","\u059b\u059c\u0005\u00c4c\u0002\u059c\u059d\u0007U\u0002\u0002\u059d","\u05ad\u0003\u0002\u0002\u0002\u059e\u059f\f\u0017\u0002\u0002\u059f","\u05ad\t\u000e\u0002\u0002\u05a0\u05a1\f\u0010\u0002\u0002\u05a1\u05a4","\u0007\u001c\u0002\u0002\u05a2\u05a5\u0005\u00eex\u0002\u05a3\u05a5","\u0005\u00c6d\u0002\u05a4\u05a2\u0003\u0002\u0002\u0002\u05a4\u05a3","\u0003\u0002\u0002\u0002\u05a5\u05ad\u0003\u0002\u0002\u0002\u05a6\u05a7","\f\u0005\u0002\u0002\u05a7\u05a9\u0007|\u0002\u0002\u05a8\u05aa\u0005","\u00f2z\u0002\u05a9\u05a8\u0003\u0002\u0002\u0002\u05a9\u05aa\u0003","\u0002\u0002\u0002\u05aa\u05ab\u0003\u0002\u0002\u0002\u05ab\u05ad\u0005","\u00a2R\u0002\u05ac\u055b\u0003\u0002\u0002\u0002\u05ac\u055e\u0003","\u0002\u0002\u0002\u05ac\u0561\u0003\u0002\u0002\u0002\u05ac\u056c\u0003","\u0002\u0002\u0002\u05ac\u056f\u0003\u0002\u0002\u0002\u05ac\u0572\u0003","\u0002\u0002\u0002\u05ac\u0575\u0003\u0002\u0002\u0002\u05ac\u0578\u0003","\u0002\u0002\u0002\u05ac\u057b\u0003\u0002\u0002\u0002\u05ac\u057e\u0003","\u0002\u0002\u0002\u05ac\u0581\u0003\u0002\u0002\u0002\u05ac\u0587\u0003","\u0002\u0002\u0002\u05ac\u058a\u0003\u0002\u0002\u0002\u05ac\u0599\u0003","\u0002\u0002\u0002\u05ac\u059e\u0003\u0002\u0002\u0002\u05ac\u05a0\u0003","\u0002\u0002\u0002\u05ac\u05a6\u0003\u0002\u0002\u0002\u05ad\u05b0\u0003","\u0002\u0002\u0002\u05ae\u05ac\u0003\u0002\u0002\u0002\u05ae\u05af\u0003","\u0002\u0002\u0002\u05af\u00c5\u0003\u0002\u0002\u0002\u05b0\u05ae\u0003","\u0002\u0002\u0002\u05b1\u05b3\u0005\u000e\b\u0002\u05b2\u05b1\u0003","\u0002\u0002\u0002\u05b3\u05b6\u0003\u0002\u0002\u0002\u05b4\u05b2\u0003","\u0002\u0002\u0002\u05b4\u05b5\u0003\u0002\u0002\u0002\u05b5\u05b7\u0003","\u0002\u0002\u0002\u05b6\u05b4\u0003\u0002\u0002\u0002\u05b7\u05bb\u0005","\u00eex\u0002\u05b8\u05ba\u0005p9\u0002\u05b9\u05b8\u0003\u0002\u0002","\u0002\u05ba\u05bd\u0003\u0002\u0002\u0002\u05bb\u05b9\u0003\u0002\u0002","\u0002\u05bb\u05bc\u0003\u0002\u0002\u0002\u05bc\u05be\u0003\u0002\u0002","\u0002\u05bd\u05bb\u0003\u0002\u0002\u0002\u05be\u05bf\u0005\u00a2R","\u0002\u05bf\u00c7\u0003\u0002\u0002\u0002\u05c0\u05c1\u0005\u00caf","\u0002\u05c1\u05c2\u0007{\u0002\u0002\u05c2\u05c3\u0005\u00ccg\u0002","\u05c3\u00c9\u0003\u0002\u0002\u0002\u05c4\u05db\u0005\u00a2R\u0002","\u05c5\u05c7\u0007P\u0002\u0002\u05c6\u05c8\u0005\\/\u0002\u05c7\u05c6","\u0003\u0002\u0002\u0002\u05c7\u05c8\u0003\u0002\u0002\u0002\u05c8\u05c9","\u0003\u0002\u0002\u0002\u05c9\u05db\u0007Q\u0002\u0002\u05ca\u05cb","\u0007P\u0002\u0002\u05cb\u05d0\u0005\u00a2R\u0002\u05cc\u05cd\u0007","W\u0002\u0002\u05cd\u05cf\u0005\u00a2R\u0002\u05ce\u05cc\u0003\u0002","\u0002\u0002\u05cf\u05d2\u0003\u0002\u0002\u0002\u05d0\u05ce\u0003\u0002","\u0002\u0002\u05d0\u05d1\u0003\u0002\u0002\u0002\u05d1\u05d3\u0003\u0002","\u0002\u0002\u05d2\u05d0\u0003\u0002\u0002\u0002\u05d3\u05d4\u0007Q","\u0002\u0002\u05d4\u05db\u0003\u0002\u0002\u0002\u05d5\u05d7\u0007P","\u0002\u0002\u05d6\u05d8\u0005b2\u0002\u05d7\u05d6\u0003\u0002\u0002","\u0002\u05d7\u05d8\u0003\u0002\u0002\u0002\u05d8\u05d9\u0003\u0002\u0002","\u0002\u05d9\u05db\u0007Q\u0002\u0002\u05da\u05c4\u0003\u0002\u0002","\u0002\u05da\u05c5\u0003\u0002\u0002\u0002\u05da\u05ca\u0003\u0002\u0002","\u0002\u05da\u05d5\u0003\u0002\u0002\u0002\u05db\u00cb\u0003\u0002\u0002","\u0002\u05dc\u05df\u0005\u00c4c\u0002\u05dd\u05df\u0005\u009cO\u0002","\u05de\u05dc\u0003\u0002\u0002\u0002\u05de\u05dd\u0003\u0002\u0002\u0002","\u05df\u00cd\u0003\u0002\u0002\u0002\u05e0\u05e1\u0007P\u0002\u0002","\u05e1\u05e2\u0005\u00c4c\u0002\u05e2\u05e3\u0007Q\u0002\u0002\u05e3","\u05f3\u0003\u0002\u0002\u0002\u05e4\u05f3\u0007-\u0002\u0002\u05e5","\u05f3\u0007*\u0002\u0002\u05e6\u05f3\u0005h5\u0002\u05e7\u05f3\u0005","\u00a2R\u0002\u05e8\u05e9\u0005.\u0018\u0002\u05e9\u05ea\u0007X\u0002","\u0002\u05ea\u05eb\u0007\u000b\u0002\u0002\u05eb\u05f3\u0003\u0002\u0002","\u0002\u05ec\u05f0\u0005\u00eav\u0002\u05ed\u05f1\u0005\u00f6|\u0002","\u05ee\u05ef\u0007-\u0002\u0002\u05ef\u05f1\u0005\u00f8}\u0002\u05f0","\u05ed\u0003\u0002\u0002\u0002\u05f0\u05ee\u0003\u0002\u0002\u0002\u05f1","\u05f3\u0003\u0002\u0002\u0002\u05f2\u05e0\u0003\u0002\u0002\u0002\u05f2","\u05e4\u0003\u0002\u0002\u0002\u05f2\u05e5\u0003\u0002\u0002\u0002\u05f2","\u05e6\u0003\u0002\u0002\u0002\u05f2\u05e7\u0003\u0002\u0002\u0002\u05f2","\u05e8\u0003\u0002\u0002\u0002\u05f2\u05ec\u0003\u0002\u0002\u0002\u05f3","\u00cf\u0003\u0002\u0002\u0002\u05f4\u05f5\u0007+\u0002\u0002\u05f5","\u05f6\u0005\u00be`\u0002\u05f6\u05fa\u0007R\u0002\u0002\u05f7\u05f9","\u0005\u00d2j\u0002\u05f8\u05f7\u0003\u0002\u0002\u0002\u05f9\u05fc","\u0003\u0002\u0002\u0002\u05fa\u05f8\u0003\u0002\u0002\u0002\u05fa\u05fb","\u0003\u0002\u0002\u0002\u05fb\u05fd\u0003\u0002\u0002\u0002\u05fc\u05fa","\u0003\u0002\u0002\u0002\u05fd\u05fe\u0007S\u0002\u0002\u05fe\u00d1","\u0003\u0002\u0002\u0002\u05ff\u0603\u0007\b\u0002\u0002\u0600\u0604","\u0005\u00c0a\u0002\u0601\u0604\u0007O\u0002\u0002\u0602\u0604\u0005","\u00d4k\u0002\u0603\u0600\u0003\u0002\u0002\u0002\u0603\u0601\u0003","\u0002\u0002\u0002\u0603\u0602\u0003\u0002\u0002\u0002\u0604\u0605\u0003","\u0002\u0002\u0002\u0605\u0606\t\u000f\u0002\u0002\u0606\u060b\u0005","\u00d6l\u0002\u0607\u0608\u0007\u000e\u0002\u0002\u0608\u0609\t\u000f","\u0002\u0002\u0609\u060b\u0005\u00d6l\u0002\u060a\u05ff\u0003\u0002","\u0002\u0002\u060a\u0607\u0003\u0002\u0002\u0002\u060b\u00d3\u0003\u0002","\u0002\u0002\u060c\u060d\bk\u0001\u0002\u060d\u060e\u0007P\u0002\u0002","\u060e\u060f\u0005\u00d4k\u0002\u060f\u0610\u0007Q\u0002\u0002\u0610","\u0627\u0003\u0002\u0002\u0002\u0611\u0613\u0005\u000e\b\u0002\u0612","\u0611\u0003\u0002\u0002\u0002\u0613\u0616\u0003\u0002\u0002\u0002\u0614","\u0612\u0003\u0002\u0002\u0002\u0614\u0615\u0003\u0002\u0002\u0002\u0615","\u0617\u0003\u0002\u0002\u0002\u0616\u0614\u0003\u0002\u0002\u0002\u0617","\u061b\u0005\u00eex\u0002\u0618\u061a\u0005p9\u0002\u0619\u0618\u0003","\u0002\u0002\u0002\u061a\u061d\u0003\u0002\u0002\u0002\u061b\u0619\u0003","\u0002\u0002\u0002\u061b\u061c\u0003\u0002\u0002\u0002\u061c\u061e\u0003","\u0002\u0002\u0002\u061d\u061b\u0003\u0002\u0002\u0002\u061e\u0623\u0005","\u00a2R\u0002\u061f\u0620\u0007d\u0002\u0002\u0620\u0622\u0005\u00c4","c\u0002\u0621\u061f\u0003\u0002\u0002\u0002\u0622\u0625\u0003\u0002","\u0002\u0002\u0623\u0621\u0003\u0002\u0002\u0002\u0623\u0624\u0003\u0002","\u0002\u0002\u0624\u0627\u0003\u0002\u0002\u0002\u0625\u0623\u0003\u0002","\u0002\u0002\u0626\u060c\u0003\u0002\u0002\u0002\u0626\u0614\u0003\u0002","\u0002\u0002\u0627\u062d\u0003\u0002\u0002\u0002\u0628\u0629\f\u0003","\u0002\u0002\u0629\u062a\u0007d\u0002\u0002\u062a\u062c\u0005\u00c4","c\u0002\u062b\u0628\u0003\u0002\u0002\u0002\u062c\u062f\u0003\u0002","\u0002\u0002\u062d\u062b\u0003\u0002\u0002\u0002\u062d\u062e\u0003\u0002","\u0002\u0002\u062e\u00d5\u0003\u0002\u0002\u0002\u062f\u062d\u0003\u0002","\u0002\u0002\u0630\u0638\u0005\u009cO\u0002\u0631\u0633\u0005\u009e","P\u0002\u0632\u0631\u0003\u0002\u0002\u0002\u0633\u0636\u0003\u0002","\u0002\u0002\u0634\u0632\u0003\u0002\u0002\u0002\u0634\u0635\u0003\u0002","\u0002\u0002\u0635\u0638\u0003\u0002\u0002\u0002\u0636\u0634\u0003\u0002","\u0002\u0002\u0637\u0630\u0003\u0002\u0002\u0002\u0637\u0634\u0003\u0002","\u0002\u0002\u0638\u00d7\u0003\u0002\u0002\u0002\u0639\u063a\u0005R","*\u0002\u063a\u063b\u0007X\u0002\u0002\u063b\u063d\u0003\u0002\u0002","\u0002\u063c\u0639\u0003\u0002\u0002\u0002\u063c\u063d\u0003\u0002\u0002","\u0002\u063d\u0641\u0003\u0002\u0002\u0002\u063e\u0640\u0005p9\u0002","\u063f\u063e\u0003\u0002\u0002\u0002\u0640\u0643\u0003\u0002\u0002\u0002","\u0641\u063f\u0003\u0002\u0002\u0002\u0641\u0642\u0003\u0002\u0002\u0002","\u0642\u0644\u0003\u0002\u0002\u0002\u0643\u0641\u0003\u0002\u0002\u0002","\u0644\u0646\u0005\u00a2R\u0002\u0645\u0647\u0005\u00f2z\u0002\u0646","\u0645\u0003\u0002\u0002\u0002\u0646\u0647\u0003\u0002\u0002\u0002\u0647","\u00d9\u0003\u0002\u0002\u0002\u0648\u0649\u0005\u00eav\u0002\u0649","\u064a\u0005\u00dco\u0002\u064a\u064b\u0005\u00e2r\u0002\u064b\u0652","\u0003\u0002\u0002\u0002\u064c\u064f\u0005\u00dco\u0002\u064d\u0650","\u0005\u00e0q\u0002\u064e\u0650\u0005\u00e2r\u0002\u064f\u064d\u0003","\u0002\u0002\u0002\u064f\u064e\u0003\u0002\u0002\u0002\u0650\u0652\u0003","\u0002\u0002\u0002\u0651\u0648\u0003\u0002\u0002\u0002\u0651\u064c\u0003","\u0002\u0002\u0002\u0652\u00db\u0003\u0002\u0002\u0002\u0653\u0655\u0005","\u00a2R\u0002\u0654\u0656\u0005\u00e6t\u0002\u0655\u0654\u0003\u0002","\u0002\u0002\u0655\u0656\u0003\u0002\u0002\u0002\u0656\u065e\u0003\u0002","\u0002\u0002\u0657\u0658\u0007X\u0002\u0002\u0658\u065a\u0005\u00a2","R\u0002\u0659\u065b\u0005\u00e6t\u0002\u065a\u0659\u0003\u0002\u0002","\u0002\u065a\u065b\u0003\u0002\u0002\u0002\u065b\u065d\u0003\u0002\u0002","\u0002\u065c\u0657\u0003\u0002\u0002\u0002\u065d\u0660\u0003\u0002\u0002","\u0002\u065e\u065c\u0003\u0002\u0002\u0002\u065e\u065f\u0003\u0002\u0002","\u0002\u065f\u0663\u0003\u0002\u0002\u0002\u0660\u065e\u0003\u0002\u0002","\u0002\u0661\u0663\u0005\u00f0y\u0002\u0662\u0653\u0003\u0002\u0002","\u0002\u0662\u0661\u0003\u0002\u0002\u0002\u0663\u00dd\u0003\u0002\u0002","\u0002\u0664\u0666\u0005\u00a2R\u0002\u0665\u0667\u0005\u00e8u\u0002","\u0666\u0665\u0003\u0002\u0002\u0002\u0666\u0667\u0003\u0002\u0002\u0002","\u0667\u0668\u0003\u0002\u0002\u0002\u0668\u0669\u0005\u00e2r\u0002","\u0669\u00df\u0003\u0002\u0002\u0002\u066a\u0686\u0007T\u0002\u0002","\u066b\u0670\u0007U\u0002\u0002\u066c\u066d\u0007T\u0002\u0002\u066d","\u066f\u0007U\u0002\u0002\u066e\u066c\u0003\u0002\u0002\u0002\u066f","\u0672\u0003\u0002\u0002\u0002\u0670\u066e\u0003\u0002\u0002\u0002\u0670","\u0671\u0003\u0002\u0002\u0002\u0671\u0673\u0003\u0002\u0002\u0002\u0672","\u0670\u0003\u0002\u0002\u0002\u0673\u0687\u0005P)\u0002\u0674\u0675","\u0005\u00c4c\u0002\u0675\u067c\u0007U\u0002\u0002\u0676\u0677\u0007","T\u0002\u0002\u0677\u0678\u0005\u00c4c\u0002\u0678\u0679\u0007U\u0002","\u0002\u0679\u067b\u0003\u0002\u0002\u0002\u067a\u0676\u0003\u0002\u0002","\u0002\u067b\u067e\u0003\u0002\u0002\u0002\u067c\u067a\u0003\u0002\u0002","\u0002\u067c\u067d\u0003\u0002\u0002\u0002\u067d\u0683\u0003\u0002\u0002","\u0002\u067e\u067c\u0003\u0002\u0002\u0002\u067f\u0680\u0007T\u0002","\u0002\u0680\u0682\u0007U\u0002\u0002\u0681\u067f\u0003\u0002\u0002","\u0002\u0682\u0685\u0003\u0002\u0002\u0002\u0683\u0681\u0003\u0002\u0002","\u0002\u0683\u0684\u0003\u0002\u0002\u0002\u0684\u0687\u0003\u0002\u0002","\u0002\u0685\u0683\u0003\u0002\u0002\u0002\u0686\u066b\u0003\u0002\u0002","\u0002\u0686\u0674\u0003\u0002\u0002\u0002\u0687\u00e1\u0003\u0002\u0002","\u0002\u0688\u068a\u0005\u00f8}\u0002\u0689\u068b\u0005\"\u0012\u0002","\u068a\u0689\u0003\u0002\u0002\u0002\u068a\u068b\u0003\u0002\u0002\u0002","\u068b\u00e3\u0003\u0002\u0002\u0002\u068c\u068d\u0005\u00eav\u0002","\u068d\u068e\u0005\u00f6|\u0002\u068e\u00e5\u0003\u0002\u0002\u0002","\u068f\u0690\u0007[\u0002\u0002\u0690\u0693\u0007Z\u0002\u0002\u0691","\u0693\u0005\u00f2z\u0002\u0692\u068f\u0003\u0002\u0002\u0002\u0692","\u0691\u0003\u0002\u0002\u0002\u0693\u00e7\u0003\u0002\u0002\u0002\u0694","\u0695\u0007[\u0002\u0002\u0695\u0698\u0007Z\u0002\u0002\u0696\u0698","\u0005\u00eav\u0002\u0697\u0694\u0003\u0002\u0002\u0002\u0697\u0696","\u0003\u0002\u0002\u0002\u0698\u00e9\u0003\u0002\u0002\u0002\u0699\u069a","\u0007[\u0002\u0002\u069a\u069b\u0005\u00ecw\u0002\u069b\u069c\u0007","Z\u0002\u0002\u069c\u00eb\u0003\u0002\u0002\u0002\u069d\u06a2\u0005","\u00eex\u0002\u069e\u069f\u0007W\u0002\u0002\u069f\u06a1\u0005\u00ee","x\u0002\u06a0\u069e\u0003\u0002\u0002\u0002\u06a1\u06a4\u0003\u0002","\u0002\u0002\u06a2\u06a0\u0003\u0002\u0002\u0002\u06a2\u06a3\u0003\u0002","\u0002\u0002\u06a3\u00ed\u0003\u0002\u0002\u0002\u06a4\u06a2\u0003\u0002","\u0002\u0002\u06a5\u06a7\u0005p9\u0002\u06a6\u06a5\u0003\u0002\u0002","\u0002\u06a7\u06aa\u0003\u0002\u0002\u0002\u06a8\u06a6\u0003\u0002\u0002","\u0002\u06a8\u06a9\u0003\u0002\u0002\u0002\u06a9\u06ad\u0003\u0002\u0002","\u0002\u06aa\u06a8\u0003\u0002\u0002\u0002\u06ab\u06ae\u0005R*\u0002","\u06ac\u06ae\u0005\u00f0y\u0002\u06ad\u06ab\u0003\u0002\u0002\u0002","\u06ad\u06ac\u0003\u0002\u0002\u0002\u06ae\u06b9\u0003\u0002\u0002\u0002","\u06af\u06b1\u0005p9\u0002\u06b0\u06af\u0003\u0002\u0002\u0002\u06b1","\u06b4\u0003\u0002\u0002\u0002\u06b2\u06b0\u0003\u0002\u0002\u0002\u06b2","\u06b3\u0003\u0002\u0002\u0002\u06b3\u06b5\u0003\u0002\u0002\u0002\u06b4","\u06b2\u0003\u0002\u0002\u0002\u06b5\u06b6\u0007T\u0002\u0002\u06b6","\u06b8\u0007U\u0002\u0002\u06b7\u06b2\u0003\u0002\u0002\u0002\u06b8","\u06bb\u0003\u0002\u0002\u0002\u06b9\u06b7\u0003\u0002\u0002\u0002\u06b9","\u06ba\u0003\u0002\u0002\u0002\u06ba\u00ef\u0003\u0002\u0002\u0002\u06bb","\u06b9\u0003\u0002\u0002\u0002\u06bc\u06bd\t\u0010\u0002\u0002\u06bd","\u00f1\u0003\u0002\u0002\u0002\u06be\u06bf\u0007[\u0002\u0002\u06bf","\u06c4\u0005T+\u0002\u06c0\u06c1\u0007W\u0002\u0002\u06c1\u06c3\u0005","T+\u0002\u06c2\u06c0\u0003\u0002\u0002\u0002\u06c3\u06c6\u0003\u0002","\u0002\u0002\u06c4\u06c2\u0003\u0002\u0002\u0002\u06c4\u06c5\u0003\u0002","\u0002\u0002\u06c5\u06c7\u0003\u0002\u0002\u0002\u06c6\u06c4\u0003\u0002","\u0002\u0002\u06c7\u06c8\u0007Z\u0002\u0002\u06c8\u00f3\u0003\u0002","\u0002\u0002\u06c9\u06d3\u0005\u00f8}\u0002\u06ca\u06cc\u0007X\u0002","\u0002\u06cb\u06cd\u0005\u00f2z\u0002\u06cc\u06cb\u0003\u0002\u0002","\u0002\u06cc\u06cd\u0003\u0002\u0002\u0002\u06cd\u06ce\u0003\u0002\u0002","\u0002\u06ce\u06d0\u0005\u00a2R\u0002\u06cf\u06d1\u0005\u00f8}\u0002","\u06d0\u06cf\u0003\u0002\u0002\u0002\u06d0\u06d1\u0003\u0002\u0002\u0002","\u06d1\u06d3\u0003\u0002\u0002\u0002\u06d2\u06c9\u0003\u0002\u0002\u0002","\u06d2\u06ca\u0003\u0002\u0002\u0002\u06d3\u00f5\u0003\u0002\u0002\u0002","\u06d4\u06d5\u0007*\u0002\u0002\u06d5\u06da\u0005\u00f4{\u0002\u06d6","\u06d7\u0005\u00a2R\u0002\u06d7\u06d8\u0005\u00f8}\u0002\u06d8\u06da","\u0003\u0002\u0002\u0002\u06d9\u06d4\u0003\u0002\u0002\u0002\u06d9\u06d6","\u0003\u0002\u0002\u0002\u06da\u00f7\u0003\u0002\u0002\u0002\u06db\u06dd","\u0007P\u0002\u0002\u06dc\u06de\u0005\u00c0a\u0002\u06dd\u06dc\u0003","\u0002\u0002\u0002\u06dd\u06de\u0003\u0002\u0002\u0002\u06de\u06df\u0003","\u0002\u0002\u0002\u06df\u06e0\u0007Q\u0002\u0002\u06e0\u00f9\u0003","\u0002\u0002\u0002\u00dd\u00fb\u0100\u0106\u010c\u0111\u011a\u011f\u0126","\u012e\u0131\u0138\u0144\u0148\u014d\u0151\u0155\u0159\u0163\u016b\u0173","\u0177\u017e\u0185\u0189\u018c\u018f\u0198\u019e\u01a3\u01a6\u01ac\u01b2","\u01b6\u01be\u01c7\u01ce\u01d4\u01d8\u01e4\u01ed\u01f2\u01f8\u01fc\u0208","\u0213\u0218\u0222\u022a\u0234\u023d\u0248\u024d\u0256\u0260\u0265\u026e","\u0274\u027b\u0280\u0288\u028c\u028e\u0294\u0299\u029d\u02a4\u02aa\u02ac","\u02b3\u02b8\u02bd\u02c0\u02c2\u02cc\u02d6\u02db\u02de\u02e3\u02ec\u02f3","\u02fe\u0304\u030f\u0319\u0324\u032d\u0332\u0335\u033c\u0346\u034e\u0351","\u0354\u0361\u0369\u036e\u0376\u037a\u037e\u0382\u0386\u0388\u038c\u0392","\u039a\u03a4\u03ad\u03b7\u03bf\u03cd\u03d4\u03d9\u03df\u03e8\u03f2\u03fb","\u0405\u040a\u0415\u041c\u0422\u0425\u042c\u0435\u044c\u044f\u0452\u045a","\u045e\u0466\u046c\u0477\u0480\u0485\u0492\u0498\u049f\u04ac\u04b5\u04be","\u04c4\u04cc\u04d2\u04d7\u04dc\u04e4\u04e9\u04ed\u04f1\u04f5\u04f7\u04fb","\u0500\u0505\u0514\u051a\u0521\u0527\u052a\u0535\u053d\u054c\u0550\u0555","\u0559\u0569\u0591\u0597\u05a4\u05a9\u05ac\u05ae\u05b4\u05bb\u05c7\u05d0","\u05d7\u05da\u05de\u05f0\u05f2\u05fa\u0603\u060a\u0614\u061b\u0623\u0626","\u062d\u0634\u0637\u063c\u0641\u0646\u064f\u0651\u0655\u065a\u065e\u0662","\u0666\u0670\u067c\u0683\u0686\u068a\u0692\u0697\u06a2\u06a8\u06ad\u06b2","\u06b9\u06c4\u06cc\u06d0\u06d2\u06d9\u06dd"].join("");const atn=new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);const decisionsToDFA=atn.decisionToState.map((ds,index)=>new _antlr.default.dfa.DFA(ds,index));const sharedContextCache=new _antlr.default.PredictionContextCache();class JavaParser extends _antlr.default.Parser{static grammarFileName="JavaParser.g4";static literalNames=[null,"'abstract'","'assert'","'boolean'","'break'","'byte'","'case'","'catch'","'char'","'class'","'const'","'continue'","'default'","'do'","'double'","'else'","'enum'","'extends'","'final'","'finally'","'float'","'for'","'if'","'goto'","'implements'","'import'","'instanceof'","'int'","'interface'","'long'","'native'","'new'","'package'","'private'","'protected'","'public'","'return'","'short'","'static'","'strictfp'","'super'","'switch'","'synchronized'","'this'","'throw'","'throws'","'transient'","'try'","'void'","'volatile'","'while'","'module'","'open'","'requires'","'exports'","'opens'","'to'","'uses'","'provides'","'with'","'transitive'","'var'","'yield'","'record'","'sealed'","'permits'","'non-sealed'",null,null,null,null,null,null,null,null,null,null,"'null'","'('","')'","'{'","'}'","'['","']'","';'","','","'.'","'='","'>'","'<'","'!'","'~'","'?'","':'","'=='","'<='","'>='","'!='","'&&'","'||'","'++'","'--'","'+'","'-'","'*'","'/'","'&'","'|'","'^'","'%'","'+='","'-='","'*='","'/='","'&='","'|='","'^='","'%='","'<<='","'>>='","'>>>='","'->'","'::'","'@'","'...'"];static symbolicNames=[null,"ABSTRACT","ASSERT","BOOLEAN","BREAK","BYTE","CASE","CATCH","CHAR","CLASS","CONST","CONTINUE","DEFAULT","DO","DOUBLE","ELSE","ENUM","EXTENDS","FINAL","FINALLY","FLOAT","FOR","IF","GOTO","IMPLEMENTS","IMPORT","INSTANCEOF","INT","INTERFACE","LONG","NATIVE","NEW","PACKAGE","PRIVATE","PROTECTED","PUBLIC","RETURN","SHORT","STATIC","STRICTFP","SUPER","SWITCH","SYNCHRONIZED","THIS","THROW","THROWS","TRANSIENT","TRY","VOID","VOLATILE","WHILE","MODULE","OPEN","REQUIRES","EXPORTS","OPENS","TO","USES","PROVIDES","WITH","TRANSITIVE","VAR","YIELD","RECORD","SEALED","PERMITS","NON_SEALED","DECIMAL_LITERAL","HEX_LITERAL","OCT_LITERAL","BINARY_LITERAL","FLOAT_LITERAL","HEX_FLOAT_LITERAL","BOOL_LITERAL","CHAR_LITERAL","STRING_LITERAL","TEXT_BLOCK","NULL_LITERAL","LPAREN","RPAREN","LBRACE","RBRACE","LBRACK","RBRACK","SEMI","COMMA","DOT","ASSIGN","GT","LT","BANG","TILDE","QUESTION","COLON","EQUAL","LE","GE","NOTEQUAL","AND","OR","INC","DEC","ADD","SUB","MUL","DIV","BITAND","BITOR","CARET","MOD","ADD_ASSIGN","SUB_ASSIGN","MUL_ASSIGN","DIV_ASSIGN","AND_ASSIGN","OR_ASSIGN","XOR_ASSIGN","MOD_ASSIGN","LSHIFT_ASSIGN","RSHIFT_ASSIGN","URSHIFT_ASSIGN","ARROW","COLONCOLON","AT","ELLIPSIS","WS","COMMENT","LINE_COMMENT","IDENTIFIER"];static ruleNames=["compilationUnit","packageDeclaration","importDeclaration","typeDeclaration","modifier","classOrInterfaceModifier","variableModifier","classDeclaration","typeParameters","typeParameter","typeBound","enumDeclaration","enumConstants","enumConstant","enumBodyDeclarations","interfaceDeclaration","classBody","interfaceBody","classBodyDeclaration","memberDeclaration","methodDeclaration","methodBody","typeTypeOrVoid","genericMethodDeclaration","genericConstructorDeclaration","constructorDeclaration","fieldDeclaration","interfaceBodyDeclaration","interfaceMemberDeclaration","constDeclaration","constantDeclarator","interfaceMethodDeclaration","interfaceMethodModifier","genericInterfaceMethodDeclaration","interfaceCommonBodyDeclaration","variableDeclarators","variableDeclarator","variableDeclaratorId","variableInitializer","arrayInitializer","classOrInterfaceType","typeArgument","qualifiedNameList","formalParameters","receiverParameter","formalParameterList","formalParameter","lastFormalParameter","lambdaLVTIList","lambdaLVTIParameter","qualifiedName","literal","integerLiteral","floatLiteral","altAnnotationQualifiedName","annotation","elementValuePairs","elementValuePair","elementValue","elementValueArrayInitializer","annotationTypeDeclaration","annotationTypeBody","annotationTypeElementDeclaration","annotationTypeElementRest","annotationMethodOrConstantRest","annotationMethodRest","annotationConstantRest","defaultValue","moduleDeclaration","moduleBody","moduleDirective","requiresModifier","recordDeclaration","recordHeader","recordComponentList","recordComponent","recordBody","block","blockStatement","localVariableDeclaration","identifier","localTypeDeclaration","statement","catchClause","catchType","finallyBlock","resourceSpecification","resources","resource","switchBlockStatementGroup","switchLabel","forControl","forInit","enhancedForControl","parExpression","expressionList","methodCall","expression","pattern","lambdaExpression","lambdaParameters","lambdaBody","primary","switchExpression","switchLabeledRule","guardedPattern","switchRuleOutcome","classType","creator","createdName","innerCreator","arrayCreatorRest","classCreatorRest","explicitGenericInvocation","typeArgumentsOrDiamond","nonWildcardTypeArgumentsOrDiamond","nonWildcardTypeArguments","typeList","typeType","primitiveType","typeArguments","superSuffix","explicitGenericInvocationSuffix","arguments"];constructor(input){super(input);this._interp=new _antlr.default.atn.ParserATNSimulator(this,atn,decisionsToDFA,sharedContextCache);this.ruleNames=JavaParser.ruleNames;this.literalNames=JavaParser.literalNames;this.symbolicNames=JavaParser.symbolicNames;}get atn(){return atn;}sempred(localctx,ruleIndex,predIndex){switch(ruleIndex){case 97:return this.expression_sempred(localctx,predIndex);case 105:return this.guardedPattern_sempred(localctx,predIndex);default:throw"No predicate with index:"+ruleIndex;}}expression_sempred(localctx,predIndex){switch(predIndex){case 0:return this.precpred(this._ctx,18);case 1:return this.precpred(this._ctx,17);case 2:return this.precpred(this._ctx,16);case 3:return this.precpred(this._ctx,15);case 4:return this.precpred(this._ctx,13);case 5:return this.precpred(this._ctx,12);case 6:return this.precpred(this._ctx,11);case 7:return this.precpred(this._ctx,10);case 8:return this.precpred(this._ctx,9);case 9:return this.precpred(this._ctx,8);case 10:return this.precpred(this._ctx,7);case 11:return this.precpred(this._ctx,6);case 12:return this.precpred(this._ctx,26);case 13:return this.precpred(this._ctx,25);case 14:return this.precpred(this._ctx,21);case 15:return this.precpred(this._ctx,14);case 16:return this.precpred(this._ctx,3);default:throw"No predicate with index:"+predIndex;}}guardedPattern_sempred(localctx,predIndex){switch(predIndex){case 17:return this.precpred(this._ctx,1);default:throw"No predicate with index:"+predIndex;}}compilationUnit(){let localctx=new CompilationUnitContext(this,this._ctx,this.state);this.enterRule(localctx,0,JavaParser.RULE_compilationUnit);var _la=0;// Token type
try{this.state=266;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,3,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=249;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,0,this._ctx);if(la_===1){this.state=248;this.packageDeclaration();}this.state=254;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.IMPORT){this.state=251;this.importDeclaration();this.state=256;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=260;this._errHandler.sync(this);_la=this._input.LA(1);while((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.ABSTRACT|1<<JavaParser.CLASS|1<<JavaParser.ENUM|1<<JavaParser.FINAL|1<<JavaParser.INTERFACE))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<JavaParser.PRIVATE-33|1<<JavaParser.PROTECTED-33|1<<JavaParser.PUBLIC-33|1<<JavaParser.STATIC-33|1<<JavaParser.STRICTFP-33|1<<JavaParser.MODULE-33|1<<JavaParser.OPEN-33|1<<JavaParser.REQUIRES-33|1<<JavaParser.EXPORTS-33|1<<JavaParser.OPENS-33|1<<JavaParser.TO-33|1<<JavaParser.USES-33|1<<JavaParser.PROVIDES-33|1<<JavaParser.WITH-33|1<<JavaParser.TRANSITIVE-33|1<<JavaParser.VAR-33|1<<JavaParser.YIELD-33|1<<JavaParser.RECORD-33|1<<JavaParser.SEALED-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<JavaParser.PERMITS-65|1<<JavaParser.NON_SEALED-65|1<<JavaParser.SEMI-65))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=257;this.typeDeclaration();this.state=262;this._errHandler.sync(this);_la=this._input.LA(1);}break;case 2:this.enterOuterAlt(localctx,2);this.state=263;this.moduleDeclaration();this.state=264;this.match(JavaParser.EOF);break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}packageDeclaration(){let localctx=new PackageDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,2,JavaParser.RULE_packageDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=271;this._errHandler.sync(this);_la=this._input.LA(1);while((_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=268;this.annotation();this.state=273;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=274;this.match(JavaParser.PACKAGE);this.state=275;this.qualifiedName();this.state=276;this.match(JavaParser.SEMI);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}importDeclaration(){let localctx=new ImportDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,4,JavaParser.RULE_importDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=278;this.match(JavaParser.IMPORT);this.state=280;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.STATIC){this.state=279;this.match(JavaParser.STATIC);}this.state=282;this.qualifiedName();this.state=285;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.DOT){this.state=283;this.match(JavaParser.DOT);this.state=284;this.match(JavaParser.MUL);}this.state=287;this.match(JavaParser.SEMI);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeDeclaration(){let localctx=new TypeDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,6,JavaParser.RULE_typeDeclaration);try{this.state=303;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.ABSTRACT:case JavaParser.CLASS:case JavaParser.ENUM:case JavaParser.FINAL:case JavaParser.INTERFACE:case JavaParser.PRIVATE:case JavaParser.PROTECTED:case JavaParser.PUBLIC:case JavaParser.STATIC:case JavaParser.STRICTFP:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.NON_SEALED:case JavaParser.AT:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=292;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,7,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=289;this.classOrInterfaceModifier();}this.state=294;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,7,this._ctx);}this.state=300;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.CLASS:this.state=295;this.classDeclaration();break;case JavaParser.ENUM:this.state=296;this.enumDeclaration();break;case JavaParser.INTERFACE:this.state=297;this.interfaceDeclaration();break;case JavaParser.AT:this.state=298;this.annotationTypeDeclaration();break;case JavaParser.RECORD:this.state=299;this.recordDeclaration();break;default:throw new _antlr.default.error.NoViableAltException(this);}break;case JavaParser.SEMI:this.enterOuterAlt(localctx,2);this.state=302;this.match(JavaParser.SEMI);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}modifier(){let localctx=new ModifierContext(this,this._ctx,this.state);this.enterRule(localctx,8,JavaParser.RULE_modifier);try{this.state=310;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.ABSTRACT:case JavaParser.FINAL:case JavaParser.PRIVATE:case JavaParser.PROTECTED:case JavaParser.PUBLIC:case JavaParser.STATIC:case JavaParser.STRICTFP:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.NON_SEALED:case JavaParser.AT:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=305;this.classOrInterfaceModifier();break;case JavaParser.NATIVE:this.enterOuterAlt(localctx,2);this.state=306;this.match(JavaParser.NATIVE);break;case JavaParser.SYNCHRONIZED:this.enterOuterAlt(localctx,3);this.state=307;this.match(JavaParser.SYNCHRONIZED);break;case JavaParser.TRANSIENT:this.enterOuterAlt(localctx,4);this.state=308;this.match(JavaParser.TRANSIENT);break;case JavaParser.VOLATILE:this.enterOuterAlt(localctx,5);this.state=309;this.match(JavaParser.VOLATILE);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classOrInterfaceModifier(){let localctx=new ClassOrInterfaceModifierContext(this,this._ctx,this.state);this.enterRule(localctx,10,JavaParser.RULE_classOrInterfaceModifier);try{this.state=322;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,11,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=312;this.annotation();break;case 2:this.enterOuterAlt(localctx,2);this.state=313;this.match(JavaParser.PUBLIC);break;case 3:this.enterOuterAlt(localctx,3);this.state=314;this.match(JavaParser.PROTECTED);break;case 4:this.enterOuterAlt(localctx,4);this.state=315;this.match(JavaParser.PRIVATE);break;case 5:this.enterOuterAlt(localctx,5);this.state=316;this.match(JavaParser.STATIC);break;case 6:this.enterOuterAlt(localctx,6);this.state=317;this.match(JavaParser.ABSTRACT);break;case 7:this.enterOuterAlt(localctx,7);this.state=318;this.match(JavaParser.FINAL);break;case 8:this.enterOuterAlt(localctx,8);this.state=319;this.match(JavaParser.STRICTFP);break;case 9:this.enterOuterAlt(localctx,9);this.state=320;this.match(JavaParser.SEALED);break;case 10:this.enterOuterAlt(localctx,10);this.state=321;this.match(JavaParser.NON_SEALED);break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}variableModifier(){let localctx=new VariableModifierContext(this,this._ctx,this.state);this.enterRule(localctx,12,JavaParser.RULE_variableModifier);try{this.state=326;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.FINAL:this.enterOuterAlt(localctx,1);this.state=324;this.match(JavaParser.FINAL);break;case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.AT:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,2);this.state=325;this.annotation();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classDeclaration(){let localctx=new ClassDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,14,JavaParser.RULE_classDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=328;this.match(JavaParser.CLASS);this.state=329;this.identifier();this.state=331;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=330;this.typeParameters();}this.state=335;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.EXTENDS){this.state=333;this.match(JavaParser.EXTENDS);this.state=334;this.typeType();}this.state=339;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.IMPLEMENTS){this.state=337;this.match(JavaParser.IMPLEMENTS);this.state=338;this.typeList();}this.state=343;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.PERMITS){this.state=341;this.match(JavaParser.PERMITS);this.state=342;this.typeList();}this.state=345;this.classBody();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeParameters(){let localctx=new TypeParametersContext(this,this._ctx,this.state);this.enterRule(localctx,16,JavaParser.RULE_typeParameters);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=347;this.match(JavaParser.LT);this.state=348;this.typeParameter();this.state=353;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=349;this.match(JavaParser.COMMA);this.state=350;this.typeParameter();this.state=355;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=356;this.match(JavaParser.GT);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeParameter(){let localctx=new TypeParameterContext(this,this._ctx,this.state);this.enterRule(localctx,18,JavaParser.RULE_typeParameter);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=361;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,18,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=358;this.annotation();}this.state=363;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,18,this._ctx);}this.state=364;this.identifier();this.state=373;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.EXTENDS){this.state=365;this.match(JavaParser.EXTENDS);this.state=369;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,19,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=366;this.annotation();}this.state=371;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,19,this._ctx);}this.state=372;this.typeBound();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeBound(){let localctx=new TypeBoundContext(this,this._ctx,this.state);this.enterRule(localctx,20,JavaParser.RULE_typeBound);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=375;this.typeType();this.state=380;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.BITAND){this.state=376;this.match(JavaParser.BITAND);this.state=377;this.typeType();this.state=382;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumDeclaration(){let localctx=new EnumDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,22,JavaParser.RULE_enumDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=383;this.match(JavaParser.ENUM);this.state=384;this.identifier();this.state=387;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.IMPLEMENTS){this.state=385;this.match(JavaParser.IMPLEMENTS);this.state=386;this.typeList();}this.state=389;this.match(JavaParser.LBRACE);this.state=391;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=390;this.enumConstants();}this.state=394;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.COMMA){this.state=393;this.match(JavaParser.COMMA);}this.state=397;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.SEMI){this.state=396;this.enumBodyDeclarations();}this.state=399;this.match(JavaParser.RBRACE);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumConstants(){let localctx=new EnumConstantsContext(this,this._ctx,this.state);this.enterRule(localctx,24,JavaParser.RULE_enumConstants);try{this.enterOuterAlt(localctx,1);this.state=401;this.enumConstant();this.state=406;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,26,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=402;this.match(JavaParser.COMMA);this.state=403;this.enumConstant();}this.state=408;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,26,this._ctx);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumConstant(){let localctx=new EnumConstantContext(this,this._ctx,this.state);this.enterRule(localctx,26,JavaParser.RULE_enumConstant);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=412;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,27,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=409;this.annotation();}this.state=414;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,27,this._ctx);}this.state=415;this.identifier();this.state=417;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LPAREN){this.state=416;this.arguments();}this.state=420;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LBRACE){this.state=419;this.classBody();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enumBodyDeclarations(){let localctx=new EnumBodyDeclarationsContext(this,this._ctx,this.state);this.enterRule(localctx,28,JavaParser.RULE_enumBodyDeclarations);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=422;this.match(JavaParser.SEMI);this.state=426;this._errHandler.sync(this);_la=this._input.LA(1);while((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.ABSTRACT|1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.CLASS|1<<JavaParser.DOUBLE|1<<JavaParser.ENUM|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.INTERFACE|1<<JavaParser.LONG|1<<JavaParser.NATIVE))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<JavaParser.PRIVATE-33|1<<JavaParser.PROTECTED-33|1<<JavaParser.PUBLIC-33|1<<JavaParser.SHORT-33|1<<JavaParser.STATIC-33|1<<JavaParser.STRICTFP-33|1<<JavaParser.SYNCHRONIZED-33|1<<JavaParser.TRANSIENT-33|1<<JavaParser.VOID-33|1<<JavaParser.VOLATILE-33|1<<JavaParser.MODULE-33|1<<JavaParser.OPEN-33|1<<JavaParser.REQUIRES-33|1<<JavaParser.EXPORTS-33|1<<JavaParser.OPENS-33|1<<JavaParser.TO-33|1<<JavaParser.USES-33|1<<JavaParser.PROVIDES-33|1<<JavaParser.WITH-33|1<<JavaParser.TRANSITIVE-33|1<<JavaParser.VAR-33|1<<JavaParser.YIELD-33|1<<JavaParser.RECORD-33|1<<JavaParser.SEALED-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<JavaParser.PERMITS-65|1<<JavaParser.NON_SEALED-65|1<<JavaParser.LBRACE-65|1<<JavaParser.SEMI-65|1<<JavaParser.LT-65))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=423;this.classBodyDeclaration();this.state=428;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}interfaceDeclaration(){let localctx=new InterfaceDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,30,JavaParser.RULE_interfaceDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=429;this.match(JavaParser.INTERFACE);this.state=430;this.identifier();this.state=432;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=431;this.typeParameters();}this.state=436;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.EXTENDS){this.state=434;this.match(JavaParser.EXTENDS);this.state=435;this.typeList();}this.state=438;this.interfaceBody();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classBody(){let localctx=new ClassBodyContext(this,this._ctx,this.state);this.enterRule(localctx,32,JavaParser.RULE_classBody);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=440;this.match(JavaParser.LBRACE);this.state=444;this._errHandler.sync(this);_la=this._input.LA(1);while((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.ABSTRACT|1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.CLASS|1<<JavaParser.DOUBLE|1<<JavaParser.ENUM|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.INTERFACE|1<<JavaParser.LONG|1<<JavaParser.NATIVE))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<JavaParser.PRIVATE-33|1<<JavaParser.PROTECTED-33|1<<JavaParser.PUBLIC-33|1<<JavaParser.SHORT-33|1<<JavaParser.STATIC-33|1<<JavaParser.STRICTFP-33|1<<JavaParser.SYNCHRONIZED-33|1<<JavaParser.TRANSIENT-33|1<<JavaParser.VOID-33|1<<JavaParser.VOLATILE-33|1<<JavaParser.MODULE-33|1<<JavaParser.OPEN-33|1<<JavaParser.REQUIRES-33|1<<JavaParser.EXPORTS-33|1<<JavaParser.OPENS-33|1<<JavaParser.TO-33|1<<JavaParser.USES-33|1<<JavaParser.PROVIDES-33|1<<JavaParser.WITH-33|1<<JavaParser.TRANSITIVE-33|1<<JavaParser.VAR-33|1<<JavaParser.YIELD-33|1<<JavaParser.RECORD-33|1<<JavaParser.SEALED-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<JavaParser.PERMITS-65|1<<JavaParser.NON_SEALED-65|1<<JavaParser.LBRACE-65|1<<JavaParser.SEMI-65|1<<JavaParser.LT-65))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=441;this.classBodyDeclaration();this.state=446;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=447;this.match(JavaParser.RBRACE);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}interfaceBody(){let localctx=new InterfaceBodyContext(this,this._ctx,this.state);this.enterRule(localctx,34,JavaParser.RULE_interfaceBody);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=449;this.match(JavaParser.LBRACE);this.state=453;this._errHandler.sync(this);_la=this._input.LA(1);while((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.ABSTRACT|1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.CLASS|1<<JavaParser.DEFAULT|1<<JavaParser.DOUBLE|1<<JavaParser.ENUM|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.INTERFACE|1<<JavaParser.LONG|1<<JavaParser.NATIVE))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<JavaParser.PRIVATE-33|1<<JavaParser.PROTECTED-33|1<<JavaParser.PUBLIC-33|1<<JavaParser.SHORT-33|1<<JavaParser.STATIC-33|1<<JavaParser.STRICTFP-33|1<<JavaParser.SYNCHRONIZED-33|1<<JavaParser.TRANSIENT-33|1<<JavaParser.VOID-33|1<<JavaParser.VOLATILE-33|1<<JavaParser.MODULE-33|1<<JavaParser.OPEN-33|1<<JavaParser.REQUIRES-33|1<<JavaParser.EXPORTS-33|1<<JavaParser.OPENS-33|1<<JavaParser.TO-33|1<<JavaParser.USES-33|1<<JavaParser.PROVIDES-33|1<<JavaParser.WITH-33|1<<JavaParser.TRANSITIVE-33|1<<JavaParser.VAR-33|1<<JavaParser.YIELD-33|1<<JavaParser.RECORD-33|1<<JavaParser.SEALED-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<JavaParser.PERMITS-65|1<<JavaParser.NON_SEALED-65|1<<JavaParser.SEMI-65|1<<JavaParser.LT-65))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=450;this.interfaceBodyDeclaration();this.state=455;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=456;this.match(JavaParser.RBRACE);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classBodyDeclaration(){let localctx=new ClassBodyDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,36,JavaParser.RULE_classBodyDeclaration);var _la=0;// Token type
try{this.state=470;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,37,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=458;this.match(JavaParser.SEMI);break;case 2:this.enterOuterAlt(localctx,2);this.state=460;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.STATIC){this.state=459;this.match(JavaParser.STATIC);}this.state=462;this.block();break;case 3:this.enterOuterAlt(localctx,3);this.state=466;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,36,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=463;this.modifier();}this.state=468;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,36,this._ctx);}this.state=469;this.memberDeclaration();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}memberDeclaration(){let localctx=new MemberDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,38,JavaParser.RULE_memberDeclaration);try{this.state=482;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,38,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=472;this.methodDeclaration();break;case 2:this.enterOuterAlt(localctx,2);this.state=473;this.genericMethodDeclaration();break;case 3:this.enterOuterAlt(localctx,3);this.state=474;this.fieldDeclaration();break;case 4:this.enterOuterAlt(localctx,4);this.state=475;this.constructorDeclaration();break;case 5:this.enterOuterAlt(localctx,5);this.state=476;this.genericConstructorDeclaration();break;case 6:this.enterOuterAlt(localctx,6);this.state=477;this.interfaceDeclaration();break;case 7:this.enterOuterAlt(localctx,7);this.state=478;this.annotationTypeDeclaration();break;case 8:this.enterOuterAlt(localctx,8);this.state=479;this.classDeclaration();break;case 9:this.enterOuterAlt(localctx,9);this.state=480;this.enumDeclaration();break;case 10:this.enterOuterAlt(localctx,10);this.state=481;this.recordDeclaration();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}methodDeclaration(){let localctx=new MethodDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,40,JavaParser.RULE_methodDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=484;this.typeTypeOrVoid();this.state=485;this.identifier();this.state=486;this.formalParameters();this.state=491;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.LBRACK){this.state=487;this.match(JavaParser.LBRACK);this.state=488;this.match(JavaParser.RBRACK);this.state=493;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=496;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.THROWS){this.state=494;this.match(JavaParser.THROWS);this.state=495;this.qualifiedNameList();}this.state=498;this.methodBody();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}methodBody(){let localctx=new MethodBodyContext(this,this._ctx,this.state);this.enterRule(localctx,42,JavaParser.RULE_methodBody);try{this.state=502;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.LBRACE:this.enterOuterAlt(localctx,1);this.state=500;this.block();break;case JavaParser.SEMI:this.enterOuterAlt(localctx,2);this.state=501;this.match(JavaParser.SEMI);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeTypeOrVoid(){let localctx=new TypeTypeOrVoidContext(this,this._ctx,this.state);this.enterRule(localctx,44,JavaParser.RULE_typeTypeOrVoid);try{this.state=506;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.BOOLEAN:case JavaParser.BYTE:case JavaParser.CHAR:case JavaParser.DOUBLE:case JavaParser.FLOAT:case JavaParser.INT:case JavaParser.LONG:case JavaParser.SHORT:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.AT:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=504;this.typeType();break;case JavaParser.VOID:this.enterOuterAlt(localctx,2);this.state=505;this.match(JavaParser.VOID);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}genericMethodDeclaration(){let localctx=new GenericMethodDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,46,JavaParser.RULE_genericMethodDeclaration);try{this.enterOuterAlt(localctx,1);this.state=508;this.typeParameters();this.state=509;this.methodDeclaration();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}genericConstructorDeclaration(){let localctx=new GenericConstructorDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,48,JavaParser.RULE_genericConstructorDeclaration);try{this.enterOuterAlt(localctx,1);this.state=511;this.typeParameters();this.state=512;this.constructorDeclaration();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}constructorDeclaration(){let localctx=new ConstructorDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,50,JavaParser.RULE_constructorDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=514;this.identifier();this.state=515;this.formalParameters();this.state=518;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.THROWS){this.state=516;this.match(JavaParser.THROWS);this.state=517;this.qualifiedNameList();}this.state=520;localctx.constructorBody=this.block();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}fieldDeclaration(){let localctx=new FieldDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,52,JavaParser.RULE_fieldDeclaration);try{this.enterOuterAlt(localctx,1);this.state=522;this.typeType();this.state=523;this.variableDeclarators();this.state=524;this.match(JavaParser.SEMI);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}interfaceBodyDeclaration(){let localctx=new InterfaceBodyDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,54,JavaParser.RULE_interfaceBodyDeclaration);try{this.state=534;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.ABSTRACT:case JavaParser.BOOLEAN:case JavaParser.BYTE:case JavaParser.CHAR:case JavaParser.CLASS:case JavaParser.DEFAULT:case JavaParser.DOUBLE:case JavaParser.ENUM:case JavaParser.FINAL:case JavaParser.FLOAT:case JavaParser.INT:case JavaParser.INTERFACE:case JavaParser.LONG:case JavaParser.NATIVE:case JavaParser.PRIVATE:case JavaParser.PROTECTED:case JavaParser.PUBLIC:case JavaParser.SHORT:case JavaParser.STATIC:case JavaParser.STRICTFP:case JavaParser.SYNCHRONIZED:case JavaParser.TRANSIENT:case JavaParser.VOID:case JavaParser.VOLATILE:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.NON_SEALED:case JavaParser.LT:case JavaParser.AT:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=529;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,44,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=526;this.modifier();}this.state=531;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,44,this._ctx);}this.state=532;this.interfaceMemberDeclaration();break;case JavaParser.SEMI:this.enterOuterAlt(localctx,2);this.state=533;this.match(JavaParser.SEMI);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}interfaceMemberDeclaration(){let localctx=new InterfaceMemberDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,56,JavaParser.RULE_interfaceMemberDeclaration);try{this.state=544;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,46,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=536;this.constDeclaration();break;case 2:this.enterOuterAlt(localctx,2);this.state=537;this.interfaceMethodDeclaration();break;case 3:this.enterOuterAlt(localctx,3);this.state=538;this.genericInterfaceMethodDeclaration();break;case 4:this.enterOuterAlt(localctx,4);this.state=539;this.interfaceDeclaration();break;case 5:this.enterOuterAlt(localctx,5);this.state=540;this.annotationTypeDeclaration();break;case 6:this.enterOuterAlt(localctx,6);this.state=541;this.classDeclaration();break;case 7:this.enterOuterAlt(localctx,7);this.state=542;this.enumDeclaration();break;case 8:this.enterOuterAlt(localctx,8);this.state=543;this.recordDeclaration();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}constDeclaration(){let localctx=new ConstDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,58,JavaParser.RULE_constDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=546;this.typeType();this.state=547;this.constantDeclarator();this.state=552;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=548;this.match(JavaParser.COMMA);this.state=549;this.constantDeclarator();this.state=554;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=555;this.match(JavaParser.SEMI);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}constantDeclarator(){let localctx=new ConstantDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,60,JavaParser.RULE_constantDeclarator);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=557;this.identifier();this.state=562;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.LBRACK){this.state=558;this.match(JavaParser.LBRACK);this.state=559;this.match(JavaParser.RBRACK);this.state=564;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=565;this.match(JavaParser.ASSIGN);this.state=566;this.variableInitializer();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}interfaceMethodDeclaration(){let localctx=new InterfaceMethodDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,62,JavaParser.RULE_interfaceMethodDeclaration);try{this.enterOuterAlt(localctx,1);this.state=571;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,49,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=568;this.interfaceMethodModifier();}this.state=573;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,49,this._ctx);}this.state=574;this.interfaceCommonBodyDeclaration();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}interfaceMethodModifier(){let localctx=new InterfaceMethodModifierContext(this,this._ctx,this.state);this.enterRule(localctx,64,JavaParser.RULE_interfaceMethodModifier);try{this.state=582;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.AT:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=576;this.annotation();break;case JavaParser.PUBLIC:this.enterOuterAlt(localctx,2);this.state=577;this.match(JavaParser.PUBLIC);break;case JavaParser.ABSTRACT:this.enterOuterAlt(localctx,3);this.state=578;this.match(JavaParser.ABSTRACT);break;case JavaParser.DEFAULT:this.enterOuterAlt(localctx,4);this.state=579;this.match(JavaParser.DEFAULT);break;case JavaParser.STATIC:this.enterOuterAlt(localctx,5);this.state=580;this.match(JavaParser.STATIC);break;case JavaParser.STRICTFP:this.enterOuterAlt(localctx,6);this.state=581;this.match(JavaParser.STRICTFP);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}genericInterfaceMethodDeclaration(){let localctx=new GenericInterfaceMethodDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,66,JavaParser.RULE_genericInterfaceMethodDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=587;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.ABSTRACT||_la===JavaParser.DEFAULT||(_la-35&~0x1f)==0&&(1<<_la-35&(1<<JavaParser.PUBLIC-35|1<<JavaParser.STATIC-35|1<<JavaParser.STRICTFP-35|1<<JavaParser.MODULE-35|1<<JavaParser.OPEN-35|1<<JavaParser.REQUIRES-35|1<<JavaParser.EXPORTS-35|1<<JavaParser.OPENS-35|1<<JavaParser.TO-35|1<<JavaParser.USES-35|1<<JavaParser.PROVIDES-35|1<<JavaParser.WITH-35|1<<JavaParser.TRANSITIVE-35|1<<JavaParser.VAR-35|1<<JavaParser.YIELD-35|1<<JavaParser.RECORD-35|1<<JavaParser.SEALED-35|1<<JavaParser.PERMITS-35))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=584;this.interfaceMethodModifier();this.state=589;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=590;this.typeParameters();this.state=591;this.interfaceCommonBodyDeclaration();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}interfaceCommonBodyDeclaration(){let localctx=new InterfaceCommonBodyDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,68,JavaParser.RULE_interfaceCommonBodyDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=596;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,52,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=593;this.annotation();}this.state=598;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,52,this._ctx);}this.state=599;this.typeTypeOrVoid();this.state=600;this.identifier();this.state=601;this.formalParameters();this.state=606;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.LBRACK){this.state=602;this.match(JavaParser.LBRACK);this.state=603;this.match(JavaParser.RBRACK);this.state=608;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=611;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.THROWS){this.state=609;this.match(JavaParser.THROWS);this.state=610;this.qualifiedNameList();}this.state=613;this.methodBody();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}variableDeclarators(){let localctx=new VariableDeclaratorsContext(this,this._ctx,this.state);this.enterRule(localctx,70,JavaParser.RULE_variableDeclarators);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=615;this.variableDeclarator();this.state=620;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=616;this.match(JavaParser.COMMA);this.state=617;this.variableDeclarator();this.state=622;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}variableDeclarator(){let localctx=new VariableDeclaratorContext(this,this._ctx,this.state);this.enterRule(localctx,72,JavaParser.RULE_variableDeclarator);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=623;this.variableDeclaratorId();this.state=626;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.ASSIGN){this.state=624;this.match(JavaParser.ASSIGN);this.state=625;this.variableInitializer();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}variableDeclaratorId(){let localctx=new VariableDeclaratorIdContext(this,this._ctx,this.state);this.enterRule(localctx,74,JavaParser.RULE_variableDeclaratorId);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=628;this.identifier();this.state=633;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.LBRACK){this.state=629;this.match(JavaParser.LBRACK);this.state=630;this.match(JavaParser.RBRACK);this.state=635;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}variableInitializer(){let localctx=new VariableInitializerContext(this,this._ctx,this.state);this.enterRule(localctx,76,JavaParser.RULE_variableInitializer);try{this.state=638;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.LBRACE:this.enterOuterAlt(localctx,1);this.state=636;this.arrayInitializer();break;case JavaParser.BOOLEAN:case JavaParser.BYTE:case JavaParser.CHAR:case JavaParser.DOUBLE:case JavaParser.FLOAT:case JavaParser.INT:case JavaParser.LONG:case JavaParser.NEW:case JavaParser.SHORT:case JavaParser.SUPER:case JavaParser.SWITCH:case JavaParser.THIS:case JavaParser.VOID:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.DECIMAL_LITERAL:case JavaParser.HEX_LITERAL:case JavaParser.OCT_LITERAL:case JavaParser.BINARY_LITERAL:case JavaParser.FLOAT_LITERAL:case JavaParser.HEX_FLOAT_LITERAL:case JavaParser.BOOL_LITERAL:case JavaParser.CHAR_LITERAL:case JavaParser.STRING_LITERAL:case JavaParser.TEXT_BLOCK:case JavaParser.NULL_LITERAL:case JavaParser.LPAREN:case JavaParser.LT:case JavaParser.BANG:case JavaParser.TILDE:case JavaParser.INC:case JavaParser.DEC:case JavaParser.ADD:case JavaParser.SUB:case JavaParser.AT:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,2);this.state=637;this.expression(0);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}arrayInitializer(){let localctx=new ArrayInitializerContext(this,this._ctx,this.state);this.enterRule(localctx,78,JavaParser.RULE_arrayInitializer);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=640;this.match(JavaParser.LBRACE);this.state=652;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.SUPER-37|1<<JavaParser.SWITCH-37|1<<JavaParser.THIS-37|1<<JavaParser.VOID-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37|1<<JavaParser.DECIMAL_LITERAL-37|1<<JavaParser.HEX_LITERAL-37))!==0||(_la-69&~0x1f)==0&&(1<<_la-69&(1<<JavaParser.OCT_LITERAL-69|1<<JavaParser.BINARY_LITERAL-69|1<<JavaParser.FLOAT_LITERAL-69|1<<JavaParser.HEX_FLOAT_LITERAL-69|1<<JavaParser.BOOL_LITERAL-69|1<<JavaParser.CHAR_LITERAL-69|1<<JavaParser.STRING_LITERAL-69|1<<JavaParser.TEXT_BLOCK-69|1<<JavaParser.NULL_LITERAL-69|1<<JavaParser.LPAREN-69|1<<JavaParser.LBRACE-69|1<<JavaParser.LT-69|1<<JavaParser.BANG-69|1<<JavaParser.TILDE-69|1<<JavaParser.INC-69))!==0||(_la-101&~0x1f)==0&&(1<<_la-101&(1<<JavaParser.DEC-101|1<<JavaParser.ADD-101|1<<JavaParser.SUB-101|1<<JavaParser.AT-101|1<<JavaParser.IDENTIFIER-101))!==0){this.state=641;this.variableInitializer();this.state=646;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,59,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=642;this.match(JavaParser.COMMA);this.state=643;this.variableInitializer();}this.state=648;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,59,this._ctx);}this.state=650;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.COMMA){this.state=649;this.match(JavaParser.COMMA);}}this.state=654;this.match(JavaParser.RBRACE);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classOrInterfaceType(){let localctx=new ClassOrInterfaceTypeContext(this,this._ctx,this.state);this.enterRule(localctx,80,JavaParser.RULE_classOrInterfaceType);try{this.enterOuterAlt(localctx,1);this.state=656;this.identifier();this.state=658;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,62,this._ctx);if(la_===1){this.state=657;this.typeArguments();}this.state=667;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,64,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=660;this.match(JavaParser.DOT);this.state=661;this.identifier();this.state=663;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,63,this._ctx);if(la_===1){this.state=662;this.typeArguments();}}this.state=669;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,64,this._ctx);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeArgument(){let localctx=new TypeArgumentContext(this,this._ctx,this.state);this.enterRule(localctx,82,JavaParser.RULE_typeArgument);var _la=0;// Token type
try{this.state=682;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,67,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=670;this.typeType();break;case 2:this.enterOuterAlt(localctx,2);this.state=674;this._errHandler.sync(this);_la=this._input.LA(1);while((_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=671;this.annotation();this.state=676;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=677;this.match(JavaParser.QUESTION);this.state=680;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.EXTENDS||_la===JavaParser.SUPER){this.state=678;_la=this._input.LA(1);if(!(_la===JavaParser.EXTENDS||_la===JavaParser.SUPER)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=679;this.typeType();}break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}qualifiedNameList(){let localctx=new QualifiedNameListContext(this,this._ctx,this.state);this.enterRule(localctx,84,JavaParser.RULE_qualifiedNameList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=684;this.qualifiedName();this.state=689;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=685;this.match(JavaParser.COMMA);this.state=686;this.qualifiedName();this.state=691;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}formalParameters(){let localctx=new FormalParametersContext(this,this._ctx,this.state);this.enterRule(localctx,86,JavaParser.RULE_formalParameters);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=692;this.match(JavaParser.LPAREN);this.state=704;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,72,this._ctx);switch(la_){case 1:this.state=694;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=693;this.receiverParameter();}break;case 2:this.state=696;this.receiverParameter();this.state=699;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.COMMA){this.state=697;this.match(JavaParser.COMMA);this.state=698;this.formalParameterList();}break;case 3:this.state=702;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=701;this.formalParameterList();}break;}this.state=706;this.match(JavaParser.RPAREN);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}receiverParameter(){let localctx=new ReceiverParameterContext(this,this._ctx,this.state);this.enterRule(localctx,88,JavaParser.RULE_receiverParameter);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=708;this.typeType();this.state=714;this._errHandler.sync(this);_la=this._input.LA(1);while((_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.IDENTIFIER){this.state=709;this.identifier();this.state=710;this.match(JavaParser.DOT);this.state=716;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=717;this.match(JavaParser.THIS);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}formalParameterList(){let localctx=new FormalParameterListContext(this,this._ctx,this.state);this.enterRule(localctx,90,JavaParser.RULE_formalParameterList);var _la=0;// Token type
try{this.state=732;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,76,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=719;this.formalParameter();this.state=724;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,74,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=720;this.match(JavaParser.COMMA);this.state=721;this.formalParameter();}this.state=726;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,74,this._ctx);}this.state=729;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.COMMA){this.state=727;this.match(JavaParser.COMMA);this.state=728;this.lastFormalParameter();}break;case 2:this.enterOuterAlt(localctx,2);this.state=731;this.lastFormalParameter();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}formalParameter(){let localctx=new FormalParameterContext(this,this._ctx,this.state);this.enterRule(localctx,92,JavaParser.RULE_formalParameter);try{this.enterOuterAlt(localctx,1);this.state=737;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,77,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=734;this.variableModifier();}this.state=739;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,77,this._ctx);}this.state=740;this.typeType();this.state=741;this.variableDeclaratorId();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}lastFormalParameter(){let localctx=new LastFormalParameterContext(this,this._ctx,this.state);this.enterRule(localctx,94,JavaParser.RULE_lastFormalParameter);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=746;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,78,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=743;this.variableModifier();}this.state=748;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,78,this._ctx);}this.state=749;this.typeType();this.state=753;this._errHandler.sync(this);_la=this._input.LA(1);while((_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=750;this.annotation();this.state=755;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=756;this.match(JavaParser.ELLIPSIS);this.state=757;this.variableDeclaratorId();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}lambdaLVTIList(){let localctx=new LambdaLVTIListContext(this,this._ctx,this.state);this.enterRule(localctx,96,JavaParser.RULE_lambdaLVTIList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=759;this.lambdaLVTIParameter();this.state=764;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=760;this.match(JavaParser.COMMA);this.state=761;this.lambdaLVTIParameter();this.state=766;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}lambdaLVTIParameter(){let localctx=new LambdaLVTIParameterContext(this,this._ctx,this.state);this.enterRule(localctx,98,JavaParser.RULE_lambdaLVTIParameter);try{this.enterOuterAlt(localctx,1);this.state=770;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,81,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=767;this.variableModifier();}this.state=772;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,81,this._ctx);}this.state=773;this.match(JavaParser.VAR);this.state=774;this.identifier();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}qualifiedName(){let localctx=new QualifiedNameContext(this,this._ctx,this.state);this.enterRule(localctx,100,JavaParser.RULE_qualifiedName);try{this.enterOuterAlt(localctx,1);this.state=776;this.identifier();this.state=781;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,82,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=777;this.match(JavaParser.DOT);this.state=778;this.identifier();}this.state=783;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,82,this._ctx);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}literal(){let localctx=new LiteralContext(this,this._ctx,this.state);this.enterRule(localctx,102,JavaParser.RULE_literal);try{this.state=791;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.DECIMAL_LITERAL:case JavaParser.HEX_LITERAL:case JavaParser.OCT_LITERAL:case JavaParser.BINARY_LITERAL:this.enterOuterAlt(localctx,1);this.state=784;this.integerLiteral();break;case JavaParser.FLOAT_LITERAL:case JavaParser.HEX_FLOAT_LITERAL:this.enterOuterAlt(localctx,2);this.state=785;this.floatLiteral();break;case JavaParser.CHAR_LITERAL:this.enterOuterAlt(localctx,3);this.state=786;this.match(JavaParser.CHAR_LITERAL);break;case JavaParser.STRING_LITERAL:this.enterOuterAlt(localctx,4);this.state=787;this.match(JavaParser.STRING_LITERAL);break;case JavaParser.BOOL_LITERAL:this.enterOuterAlt(localctx,5);this.state=788;this.match(JavaParser.BOOL_LITERAL);break;case JavaParser.NULL_LITERAL:this.enterOuterAlt(localctx,6);this.state=789;this.match(JavaParser.NULL_LITERAL);break;case JavaParser.TEXT_BLOCK:this.enterOuterAlt(localctx,7);this.state=790;this.match(JavaParser.TEXT_BLOCK);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}integerLiteral(){let localctx=new IntegerLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,104,JavaParser.RULE_integerLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=793;_la=this._input.LA(1);if(!((_la-67&~0x1f)==0&&(1<<_la-67&(1<<JavaParser.DECIMAL_LITERAL-67|1<<JavaParser.HEX_LITERAL-67|1<<JavaParser.OCT_LITERAL-67|1<<JavaParser.BINARY_LITERAL-67))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}floatLiteral(){let localctx=new FloatLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,106,JavaParser.RULE_floatLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=795;_la=this._input.LA(1);if(!(_la===JavaParser.FLOAT_LITERAL||_la===JavaParser.HEX_FLOAT_LITERAL)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}altAnnotationQualifiedName(){let localctx=new AltAnnotationQualifiedNameContext(this,this._ctx,this.state);this.enterRule(localctx,108,JavaParser.RULE_altAnnotationQualifiedName);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=802;this._errHandler.sync(this);_la=this._input.LA(1);while((_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.IDENTIFIER){this.state=797;this.identifier();this.state=798;this.match(JavaParser.DOT);this.state=804;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=805;this.match(JavaParser.AT);this.state=806;this.identifier();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}annotation(){let localctx=new AnnotationContext(this,this._ctx,this.state);this.enterRule(localctx,110,JavaParser.RULE_annotation);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=811;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,85,this._ctx);switch(la_){case 1:this.state=808;this.match(JavaParser.AT);this.state=809;this.qualifiedName();break;case 2:this.state=810;this.altAnnotationQualifiedName();break;}this.state=819;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LPAREN){this.state=813;this.match(JavaParser.LPAREN);this.state=816;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,86,this._ctx);if(la_===1){this.state=814;this.elementValuePairs();}else if(la_===2){this.state=815;this.elementValue();}this.state=818;this.match(JavaParser.RPAREN);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}elementValuePairs(){let localctx=new ElementValuePairsContext(this,this._ctx,this.state);this.enterRule(localctx,112,JavaParser.RULE_elementValuePairs);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=821;this.elementValuePair();this.state=826;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=822;this.match(JavaParser.COMMA);this.state=823;this.elementValuePair();this.state=828;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}elementValuePair(){let localctx=new ElementValuePairContext(this,this._ctx,this.state);this.enterRule(localctx,114,JavaParser.RULE_elementValuePair);try{this.enterOuterAlt(localctx,1);this.state=829;this.identifier();this.state=830;this.match(JavaParser.ASSIGN);this.state=831;this.elementValue();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}elementValue(){let localctx=new ElementValueContext(this,this._ctx,this.state);this.enterRule(localctx,116,JavaParser.RULE_elementValue);try{this.state=836;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,89,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=833;this.expression(0);break;case 2:this.enterOuterAlt(localctx,2);this.state=834;this.annotation();break;case 3:this.enterOuterAlt(localctx,3);this.state=835;this.elementValueArrayInitializer();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}elementValueArrayInitializer(){let localctx=new ElementValueArrayInitializerContext(this,this._ctx,this.state);this.enterRule(localctx,118,JavaParser.RULE_elementValueArrayInitializer);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=838;this.match(JavaParser.LBRACE);this.state=847;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.SUPER-37|1<<JavaParser.SWITCH-37|1<<JavaParser.THIS-37|1<<JavaParser.VOID-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37|1<<JavaParser.DECIMAL_LITERAL-37|1<<JavaParser.HEX_LITERAL-37))!==0||(_la-69&~0x1f)==0&&(1<<_la-69&(1<<JavaParser.OCT_LITERAL-69|1<<JavaParser.BINARY_LITERAL-69|1<<JavaParser.FLOAT_LITERAL-69|1<<JavaParser.HEX_FLOAT_LITERAL-69|1<<JavaParser.BOOL_LITERAL-69|1<<JavaParser.CHAR_LITERAL-69|1<<JavaParser.STRING_LITERAL-69|1<<JavaParser.TEXT_BLOCK-69|1<<JavaParser.NULL_LITERAL-69|1<<JavaParser.LPAREN-69|1<<JavaParser.LBRACE-69|1<<JavaParser.LT-69|1<<JavaParser.BANG-69|1<<JavaParser.TILDE-69|1<<JavaParser.INC-69))!==0||(_la-101&~0x1f)==0&&(1<<_la-101&(1<<JavaParser.DEC-101|1<<JavaParser.ADD-101|1<<JavaParser.SUB-101|1<<JavaParser.AT-101|1<<JavaParser.IDENTIFIER-101))!==0){this.state=839;this.elementValue();this.state=844;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,90,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=840;this.match(JavaParser.COMMA);this.state=841;this.elementValue();}this.state=846;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,90,this._ctx);}}this.state=850;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.COMMA){this.state=849;this.match(JavaParser.COMMA);}this.state=852;this.match(JavaParser.RBRACE);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}annotationTypeDeclaration(){let localctx=new AnnotationTypeDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,120,JavaParser.RULE_annotationTypeDeclaration);try{this.enterOuterAlt(localctx,1);this.state=854;this.match(JavaParser.AT);this.state=855;this.match(JavaParser.INTERFACE);this.state=856;this.identifier();this.state=857;this.annotationTypeBody();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}annotationTypeBody(){let localctx=new AnnotationTypeBodyContext(this,this._ctx,this.state);this.enterRule(localctx,122,JavaParser.RULE_annotationTypeBody);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=859;this.match(JavaParser.LBRACE);this.state=863;this._errHandler.sync(this);_la=this._input.LA(1);while((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.ABSTRACT|1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.CLASS|1<<JavaParser.DOUBLE|1<<JavaParser.ENUM|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.INTERFACE|1<<JavaParser.LONG|1<<JavaParser.NATIVE))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<JavaParser.PRIVATE-33|1<<JavaParser.PROTECTED-33|1<<JavaParser.PUBLIC-33|1<<JavaParser.SHORT-33|1<<JavaParser.STATIC-33|1<<JavaParser.STRICTFP-33|1<<JavaParser.SYNCHRONIZED-33|1<<JavaParser.TRANSIENT-33|1<<JavaParser.VOLATILE-33|1<<JavaParser.MODULE-33|1<<JavaParser.OPEN-33|1<<JavaParser.REQUIRES-33|1<<JavaParser.EXPORTS-33|1<<JavaParser.OPENS-33|1<<JavaParser.TO-33|1<<JavaParser.USES-33|1<<JavaParser.PROVIDES-33|1<<JavaParser.WITH-33|1<<JavaParser.TRANSITIVE-33|1<<JavaParser.VAR-33|1<<JavaParser.YIELD-33|1<<JavaParser.RECORD-33|1<<JavaParser.SEALED-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<JavaParser.PERMITS-65|1<<JavaParser.NON_SEALED-65|1<<JavaParser.SEMI-65))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=860;this.annotationTypeElementDeclaration();this.state=865;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=866;this.match(JavaParser.RBRACE);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}annotationTypeElementDeclaration(){let localctx=new AnnotationTypeElementDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,124,JavaParser.RULE_annotationTypeElementDeclaration);try{this.state=876;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.ABSTRACT:case JavaParser.BOOLEAN:case JavaParser.BYTE:case JavaParser.CHAR:case JavaParser.CLASS:case JavaParser.DOUBLE:case JavaParser.ENUM:case JavaParser.FINAL:case JavaParser.FLOAT:case JavaParser.INT:case JavaParser.INTERFACE:case JavaParser.LONG:case JavaParser.NATIVE:case JavaParser.PRIVATE:case JavaParser.PROTECTED:case JavaParser.PUBLIC:case JavaParser.SHORT:case JavaParser.STATIC:case JavaParser.STRICTFP:case JavaParser.SYNCHRONIZED:case JavaParser.TRANSIENT:case JavaParser.VOLATILE:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.NON_SEALED:case JavaParser.AT:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=871;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,94,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=868;this.modifier();}this.state=873;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,94,this._ctx);}this.state=874;this.annotationTypeElementRest();break;case JavaParser.SEMI:this.enterOuterAlt(localctx,2);this.state=875;this.match(JavaParser.SEMI);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}annotationTypeElementRest(){let localctx=new AnnotationTypeElementRestContext(this,this._ctx,this.state);this.enterRule(localctx,126,JavaParser.RULE_annotationTypeElementRest);try{this.state=902;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,101,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=878;this.typeType();this.state=879;this.annotationMethodOrConstantRest();this.state=880;this.match(JavaParser.SEMI);break;case 2:this.enterOuterAlt(localctx,2);this.state=882;this.classDeclaration();this.state=884;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,96,this._ctx);if(la_===1){this.state=883;this.match(JavaParser.SEMI);}break;case 3:this.enterOuterAlt(localctx,3);this.state=886;this.interfaceDeclaration();this.state=888;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,97,this._ctx);if(la_===1){this.state=887;this.match(JavaParser.SEMI);}break;case 4:this.enterOuterAlt(localctx,4);this.state=890;this.enumDeclaration();this.state=892;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,98,this._ctx);if(la_===1){this.state=891;this.match(JavaParser.SEMI);}break;case 5:this.enterOuterAlt(localctx,5);this.state=894;this.annotationTypeDeclaration();this.state=896;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,99,this._ctx);if(la_===1){this.state=895;this.match(JavaParser.SEMI);}break;case 6:this.enterOuterAlt(localctx,6);this.state=898;this.recordDeclaration();this.state=900;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,100,this._ctx);if(la_===1){this.state=899;this.match(JavaParser.SEMI);}break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}annotationMethodOrConstantRest(){let localctx=new AnnotationMethodOrConstantRestContext(this,this._ctx,this.state);this.enterRule(localctx,128,JavaParser.RULE_annotationMethodOrConstantRest);try{this.state=906;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,102,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=904;this.annotationMethodRest();break;case 2:this.enterOuterAlt(localctx,2);this.state=905;this.annotationConstantRest();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}annotationMethodRest(){let localctx=new AnnotationMethodRestContext(this,this._ctx,this.state);this.enterRule(localctx,130,JavaParser.RULE_annotationMethodRest);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=908;this.identifier();this.state=909;this.match(JavaParser.LPAREN);this.state=910;this.match(JavaParser.RPAREN);this.state=912;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.DEFAULT){this.state=911;this.defaultValue();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}annotationConstantRest(){let localctx=new AnnotationConstantRestContext(this,this._ctx,this.state);this.enterRule(localctx,132,JavaParser.RULE_annotationConstantRest);try{this.enterOuterAlt(localctx,1);this.state=914;this.variableDeclarators();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}defaultValue(){let localctx=new DefaultValueContext(this,this._ctx,this.state);this.enterRule(localctx,134,JavaParser.RULE_defaultValue);try{this.enterOuterAlt(localctx,1);this.state=916;this.match(JavaParser.DEFAULT);this.state=917;this.elementValue();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}moduleDeclaration(){let localctx=new ModuleDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,136,JavaParser.RULE_moduleDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=920;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.OPEN){this.state=919;this.match(JavaParser.OPEN);}this.state=922;this.match(JavaParser.MODULE);this.state=923;this.qualifiedName();this.state=924;this.moduleBody();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}moduleBody(){let localctx=new ModuleBodyContext(this,this._ctx,this.state);this.enterRule(localctx,138,JavaParser.RULE_moduleBody);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=926;this.match(JavaParser.LBRACE);this.state=930;this._errHandler.sync(this);_la=this._input.LA(1);while((_la-53&~0x1f)==0&&(1<<_la-53&(1<<JavaParser.REQUIRES-53|1<<JavaParser.EXPORTS-53|1<<JavaParser.OPENS-53|1<<JavaParser.USES-53|1<<JavaParser.PROVIDES-53))!==0){this.state=927;this.moduleDirective();this.state=932;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=933;this.match(JavaParser.RBRACE);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}moduleDirective(){let localctx=new ModuleDirectiveContext(this,this._ctx,this.state);this.enterRule(localctx,140,JavaParser.RULE_moduleDirective);var _la=0;// Token type
try{this.state=971;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.REQUIRES:this.enterOuterAlt(localctx,1);this.state=935;this.match(JavaParser.REQUIRES);this.state=939;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,106,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=936;this.requiresModifier();}this.state=941;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,106,this._ctx);}this.state=942;this.qualifiedName();this.state=943;this.match(JavaParser.SEMI);break;case JavaParser.EXPORTS:this.enterOuterAlt(localctx,2);this.state=945;this.match(JavaParser.EXPORTS);this.state=946;this.qualifiedName();this.state=949;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.TO){this.state=947;this.match(JavaParser.TO);this.state=948;this.qualifiedName();}this.state=951;this.match(JavaParser.SEMI);break;case JavaParser.OPENS:this.enterOuterAlt(localctx,3);this.state=953;this.match(JavaParser.OPENS);this.state=954;this.qualifiedName();this.state=957;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.TO){this.state=955;this.match(JavaParser.TO);this.state=956;this.qualifiedName();}this.state=959;this.match(JavaParser.SEMI);break;case JavaParser.USES:this.enterOuterAlt(localctx,4);this.state=961;this.match(JavaParser.USES);this.state=962;this.qualifiedName();this.state=963;this.match(JavaParser.SEMI);break;case JavaParser.PROVIDES:this.enterOuterAlt(localctx,5);this.state=965;this.match(JavaParser.PROVIDES);this.state=966;this.qualifiedName();this.state=967;this.match(JavaParser.WITH);this.state=968;this.qualifiedName();this.state=969;this.match(JavaParser.SEMI);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}requiresModifier(){let localctx=new RequiresModifierContext(this,this._ctx,this.state);this.enterRule(localctx,142,JavaParser.RULE_requiresModifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=973;_la=this._input.LA(1);if(!(_la===JavaParser.STATIC||_la===JavaParser.TRANSITIVE)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}recordDeclaration(){let localctx=new RecordDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,144,JavaParser.RULE_recordDeclaration);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=975;this.match(JavaParser.RECORD);this.state=976;this.identifier();this.state=978;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=977;this.typeParameters();}this.state=980;this.recordHeader();this.state=983;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.IMPLEMENTS){this.state=981;this.match(JavaParser.IMPLEMENTS);this.state=982;this.typeList();}this.state=985;this.recordBody();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}recordHeader(){let localctx=new RecordHeaderContext(this,this._ctx,this.state);this.enterRule(localctx,146,JavaParser.RULE_recordHeader);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=987;this.match(JavaParser.LPAREN);this.state=989;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=988;this.recordComponentList();}this.state=991;this.match(JavaParser.RPAREN);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}recordComponentList(){let localctx=new RecordComponentListContext(this,this._ctx,this.state);this.enterRule(localctx,148,JavaParser.RULE_recordComponentList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=993;this.recordComponent();this.state=998;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=994;this.match(JavaParser.COMMA);this.state=995;this.recordComponent();this.state=1000;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}recordComponent(){let localctx=new RecordComponentContext(this,this._ctx,this.state);this.enterRule(localctx,150,JavaParser.RULE_recordComponent);try{this.enterOuterAlt(localctx,1);this.state=1001;this.typeType();this.state=1002;this.identifier();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}recordBody(){let localctx=new RecordBodyContext(this,this._ctx,this.state);this.enterRule(localctx,152,JavaParser.RULE_recordBody);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1004;this.match(JavaParser.LBRACE);this.state=1008;this._errHandler.sync(this);_la=this._input.LA(1);while((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.ABSTRACT|1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.CLASS|1<<JavaParser.DOUBLE|1<<JavaParser.ENUM|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.INTERFACE|1<<JavaParser.LONG|1<<JavaParser.NATIVE))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<JavaParser.PRIVATE-33|1<<JavaParser.PROTECTED-33|1<<JavaParser.PUBLIC-33|1<<JavaParser.SHORT-33|1<<JavaParser.STATIC-33|1<<JavaParser.STRICTFP-33|1<<JavaParser.SYNCHRONIZED-33|1<<JavaParser.TRANSIENT-33|1<<JavaParser.VOID-33|1<<JavaParser.VOLATILE-33|1<<JavaParser.MODULE-33|1<<JavaParser.OPEN-33|1<<JavaParser.REQUIRES-33|1<<JavaParser.EXPORTS-33|1<<JavaParser.OPENS-33|1<<JavaParser.TO-33|1<<JavaParser.USES-33|1<<JavaParser.PROVIDES-33|1<<JavaParser.WITH-33|1<<JavaParser.TRANSITIVE-33|1<<JavaParser.VAR-33|1<<JavaParser.YIELD-33|1<<JavaParser.RECORD-33|1<<JavaParser.SEALED-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<JavaParser.PERMITS-65|1<<JavaParser.NON_SEALED-65|1<<JavaParser.LBRACE-65|1<<JavaParser.SEMI-65|1<<JavaParser.LT-65))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=1005;this.classBodyDeclaration();this.state=1010;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1011;this.match(JavaParser.RBRACE);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}block(){let localctx=new BlockContext(this,this._ctx,this.state);this.enterRule(localctx,154,JavaParser.RULE_block);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1013;this.match(JavaParser.LBRACE);this.state=1017;this._errHandler.sync(this);_la=this._input.LA(1);while((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.ABSTRACT|1<<JavaParser.ASSERT|1<<JavaParser.BOOLEAN|1<<JavaParser.BREAK|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.CLASS|1<<JavaParser.CONTINUE|1<<JavaParser.DO|1<<JavaParser.DOUBLE|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.FOR|1<<JavaParser.IF|1<<JavaParser.INT|1<<JavaParser.INTERFACE|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<JavaParser.PRIVATE-33|1<<JavaParser.PROTECTED-33|1<<JavaParser.PUBLIC-33|1<<JavaParser.RETURN-33|1<<JavaParser.SHORT-33|1<<JavaParser.STATIC-33|1<<JavaParser.STRICTFP-33|1<<JavaParser.SUPER-33|1<<JavaParser.SWITCH-33|1<<JavaParser.SYNCHRONIZED-33|1<<JavaParser.THIS-33|1<<JavaParser.THROW-33|1<<JavaParser.TRY-33|1<<JavaParser.VOID-33|1<<JavaParser.WHILE-33|1<<JavaParser.MODULE-33|1<<JavaParser.OPEN-33|1<<JavaParser.REQUIRES-33|1<<JavaParser.EXPORTS-33|1<<JavaParser.OPENS-33|1<<JavaParser.TO-33|1<<JavaParser.USES-33|1<<JavaParser.PROVIDES-33|1<<JavaParser.WITH-33|1<<JavaParser.TRANSITIVE-33|1<<JavaParser.VAR-33|1<<JavaParser.YIELD-33|1<<JavaParser.RECORD-33|1<<JavaParser.SEALED-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<JavaParser.PERMITS-65|1<<JavaParser.NON_SEALED-65|1<<JavaParser.DECIMAL_LITERAL-65|1<<JavaParser.HEX_LITERAL-65|1<<JavaParser.OCT_LITERAL-65|1<<JavaParser.BINARY_LITERAL-65|1<<JavaParser.FLOAT_LITERAL-65|1<<JavaParser.HEX_FLOAT_LITERAL-65|1<<JavaParser.BOOL_LITERAL-65|1<<JavaParser.CHAR_LITERAL-65|1<<JavaParser.STRING_LITERAL-65|1<<JavaParser.TEXT_BLOCK-65|1<<JavaParser.NULL_LITERAL-65|1<<JavaParser.LPAREN-65|1<<JavaParser.LBRACE-65|1<<JavaParser.SEMI-65|1<<JavaParser.LT-65|1<<JavaParser.BANG-65|1<<JavaParser.TILDE-65))!==0||(_la-100&~0x1f)==0&&(1<<_la-100&(1<<JavaParser.INC-100|1<<JavaParser.DEC-100|1<<JavaParser.ADD-100|1<<JavaParser.SUB-100|1<<JavaParser.AT-100|1<<JavaParser.IDENTIFIER-100))!==0){this.state=1014;this.blockStatement();this.state=1019;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1020;this.match(JavaParser.RBRACE);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}blockStatement(){let localctx=new BlockStatementContext(this,this._ctx,this.state);this.enterRule(localctx,156,JavaParser.RULE_blockStatement);try{this.state=1027;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,116,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1022;this.localVariableDeclaration();this.state=1023;this.match(JavaParser.SEMI);break;case 2:this.enterOuterAlt(localctx,2);this.state=1025;this.statement();break;case 3:this.enterOuterAlt(localctx,3);this.state=1026;this.localTypeDeclaration();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}localVariableDeclaration(){let localctx=new LocalVariableDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,158,JavaParser.RULE_localVariableDeclaration);try{this.enterOuterAlt(localctx,1);this.state=1032;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,117,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1029;this.variableModifier();}this.state=1034;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,117,this._ctx);}this.state=1043;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,118,this._ctx);switch(la_){case 1:this.state=1035;this.typeType();this.state=1036;this.variableDeclarators();break;case 2:this.state=1038;this.match(JavaParser.VAR);this.state=1039;this.identifier();this.state=1040;this.match(JavaParser.ASSIGN);this.state=1041;this.expression(0);break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}identifier(){let localctx=new IdentifierContext(this,this._ctx,this.state);this.enterRule(localctx,160,JavaParser.RULE_identifier);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1045;_la=this._input.LA(1);if(!((_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.IDENTIFIER)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}localTypeDeclaration(){let localctx=new LocalTypeDeclarationContext(this,this._ctx,this.state);this.enterRule(localctx,162,JavaParser.RULE_localTypeDeclaration);try{this.state=1059;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.ABSTRACT:case JavaParser.CLASS:case JavaParser.FINAL:case JavaParser.INTERFACE:case JavaParser.PRIVATE:case JavaParser.PROTECTED:case JavaParser.PUBLIC:case JavaParser.STATIC:case JavaParser.STRICTFP:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.NON_SEALED:case JavaParser.AT:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=1050;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,119,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1047;this.classOrInterfaceModifier();}this.state=1052;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,119,this._ctx);}this.state=1056;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.CLASS:this.state=1053;this.classDeclaration();break;case JavaParser.INTERFACE:this.state=1054;this.interfaceDeclaration();break;case JavaParser.RECORD:this.state=1055;this.recordDeclaration();break;default:throw new _antlr.default.error.NoViableAltException(this);}break;case JavaParser.SEMI:this.enterOuterAlt(localctx,2);this.state=1058;this.match(JavaParser.SEMI);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}statement(){let localctx=new StatementContext(this,this._ctx,this.state);this.enterRule(localctx,164,JavaParser.RULE_statement);var _la=0;// Token type
try{this.state=1174;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,135,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1061;localctx.blockLabel=this.block();break;case 2:this.enterOuterAlt(localctx,2);this.state=1062;this.match(JavaParser.ASSERT);this.state=1063;this.expression(0);this.state=1066;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.COLON){this.state=1064;this.match(JavaParser.COLON);this.state=1065;this.expression(0);}this.state=1068;this.match(JavaParser.SEMI);break;case 3:this.enterOuterAlt(localctx,3);this.state=1070;this.match(JavaParser.IF);this.state=1071;this.parExpression();this.state=1072;this.statement();this.state=1075;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,123,this._ctx);if(la_===1){this.state=1073;this.match(JavaParser.ELSE);this.state=1074;this.statement();}break;case 4:this.enterOuterAlt(localctx,4);this.state=1077;this.match(JavaParser.FOR);this.state=1078;this.match(JavaParser.LPAREN);this.state=1079;this.forControl();this.state=1080;this.match(JavaParser.RPAREN);this.state=1081;this.statement();break;case 5:this.enterOuterAlt(localctx,5);this.state=1083;this.match(JavaParser.WHILE);this.state=1084;this.parExpression();this.state=1085;this.statement();break;case 6:this.enterOuterAlt(localctx,6);this.state=1087;this.match(JavaParser.DO);this.state=1088;this.statement();this.state=1089;this.match(JavaParser.WHILE);this.state=1090;this.parExpression();this.state=1091;this.match(JavaParser.SEMI);break;case 7:this.enterOuterAlt(localctx,7);this.state=1093;this.match(JavaParser.TRY);this.state=1094;this.block();this.state=1104;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.CATCH:this.state=1096;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=1095;this.catchClause();this.state=1098;this._errHandler.sync(this);_la=this._input.LA(1);}while(_la===JavaParser.CATCH);this.state=1101;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.FINALLY){this.state=1100;this.finallyBlock();}break;case JavaParser.FINALLY:this.state=1103;this.finallyBlock();break;default:throw new _antlr.default.error.NoViableAltException(this);}break;case 8:this.enterOuterAlt(localctx,8);this.state=1106;this.match(JavaParser.TRY);this.state=1107;this.resourceSpecification();this.state=1108;this.block();this.state=1112;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.CATCH){this.state=1109;this.catchClause();this.state=1114;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1116;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.FINALLY){this.state=1115;this.finallyBlock();}break;case 9:this.enterOuterAlt(localctx,9);this.state=1118;this.match(JavaParser.SWITCH);this.state=1119;this.parExpression();this.state=1120;this.match(JavaParser.LBRACE);this.state=1124;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,129,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1121;this.switchBlockStatementGroup();}this.state=1126;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,129,this._ctx);}this.state=1130;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.CASE||_la===JavaParser.DEFAULT){this.state=1127;this.switchLabel();this.state=1132;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1133;this.match(JavaParser.RBRACE);break;case 10:this.enterOuterAlt(localctx,10);this.state=1135;this.match(JavaParser.SYNCHRONIZED);this.state=1136;this.parExpression();this.state=1137;this.block();break;case 11:this.enterOuterAlt(localctx,11);this.state=1139;this.match(JavaParser.RETURN);this.state=1141;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.SUPER-37|1<<JavaParser.SWITCH-37|1<<JavaParser.THIS-37|1<<JavaParser.VOID-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37|1<<JavaParser.DECIMAL_LITERAL-37|1<<JavaParser.HEX_LITERAL-37))!==0||(_la-69&~0x1f)==0&&(1<<_la-69&(1<<JavaParser.OCT_LITERAL-69|1<<JavaParser.BINARY_LITERAL-69|1<<JavaParser.FLOAT_LITERAL-69|1<<JavaParser.HEX_FLOAT_LITERAL-69|1<<JavaParser.BOOL_LITERAL-69|1<<JavaParser.CHAR_LITERAL-69|1<<JavaParser.STRING_LITERAL-69|1<<JavaParser.TEXT_BLOCK-69|1<<JavaParser.NULL_LITERAL-69|1<<JavaParser.LPAREN-69|1<<JavaParser.LT-69|1<<JavaParser.BANG-69|1<<JavaParser.TILDE-69|1<<JavaParser.INC-69))!==0||(_la-101&~0x1f)==0&&(1<<_la-101&(1<<JavaParser.DEC-101|1<<JavaParser.ADD-101|1<<JavaParser.SUB-101|1<<JavaParser.AT-101|1<<JavaParser.IDENTIFIER-101))!==0){this.state=1140;this.expression(0);}this.state=1143;this.match(JavaParser.SEMI);break;case 12:this.enterOuterAlt(localctx,12);this.state=1144;this.match(JavaParser.THROW);this.state=1145;this.expression(0);this.state=1146;this.match(JavaParser.SEMI);break;case 13:this.enterOuterAlt(localctx,13);this.state=1148;this.match(JavaParser.BREAK);this.state=1150;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.IDENTIFIER){this.state=1149;this.identifier();}this.state=1152;this.match(JavaParser.SEMI);break;case 14:this.enterOuterAlt(localctx,14);this.state=1153;this.match(JavaParser.CONTINUE);this.state=1155;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.IDENTIFIER){this.state=1154;this.identifier();}this.state=1157;this.match(JavaParser.SEMI);break;case 15:this.enterOuterAlt(localctx,15);this.state=1158;this.match(JavaParser.YIELD);this.state=1159;this.expression(0);this.state=1160;this.match(JavaParser.SEMI);break;case 16:this.enterOuterAlt(localctx,16);this.state=1162;this.match(JavaParser.SEMI);break;case 17:this.enterOuterAlt(localctx,17);this.state=1163;localctx.statementExpression=this.expression(0);this.state=1164;this.match(JavaParser.SEMI);break;case 18:this.enterOuterAlt(localctx,18);this.state=1166;this.switchExpression();this.state=1168;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,134,this._ctx);if(la_===1){this.state=1167;this.match(JavaParser.SEMI);}break;case 19:this.enterOuterAlt(localctx,19);this.state=1170;localctx.identifierLabel=this.identifier();this.state=1171;this.match(JavaParser.COLON);this.state=1172;this.statement();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}catchClause(){let localctx=new CatchClauseContext(this,this._ctx,this.state);this.enterRule(localctx,166,JavaParser.RULE_catchClause);try{this.enterOuterAlt(localctx,1);this.state=1176;this.match(JavaParser.CATCH);this.state=1177;this.match(JavaParser.LPAREN);this.state=1181;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,136,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1178;this.variableModifier();}this.state=1183;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,136,this._ctx);}this.state=1184;this.catchType();this.state=1185;this.identifier();this.state=1186;this.match(JavaParser.RPAREN);this.state=1187;this.block();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}catchType(){let localctx=new CatchTypeContext(this,this._ctx,this.state);this.enterRule(localctx,168,JavaParser.RULE_catchType);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1189;this.qualifiedName();this.state=1194;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.BITOR){this.state=1190;this.match(JavaParser.BITOR);this.state=1191;this.qualifiedName();this.state=1196;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}finallyBlock(){let localctx=new FinallyBlockContext(this,this._ctx,this.state);this.enterRule(localctx,170,JavaParser.RULE_finallyBlock);try{this.enterOuterAlt(localctx,1);this.state=1197;this.match(JavaParser.FINALLY);this.state=1198;this.block();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}resourceSpecification(){let localctx=new ResourceSpecificationContext(this,this._ctx,this.state);this.enterRule(localctx,172,JavaParser.RULE_resourceSpecification);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1200;this.match(JavaParser.LPAREN);this.state=1201;this.resources();this.state=1203;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.SEMI){this.state=1202;this.match(JavaParser.SEMI);}this.state=1205;this.match(JavaParser.RPAREN);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}resources(){let localctx=new ResourcesContext(this,this._ctx,this.state);this.enterRule(localctx,174,JavaParser.RULE_resources);try{this.enterOuterAlt(localctx,1);this.state=1207;this.resource();this.state=1212;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,139,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1208;this.match(JavaParser.SEMI);this.state=1209;this.resource();}this.state=1214;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,139,this._ctx);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}resource(){let localctx=new ResourceContext(this,this._ctx,this.state);this.enterRule(localctx,176,JavaParser.RULE_resource);try{this.state=1232;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,142,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1218;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,140,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1215;this.variableModifier();}this.state=1220;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,140,this._ctx);}this.state=1226;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,141,this._ctx);switch(la_){case 1:this.state=1221;this.classOrInterfaceType();this.state=1222;this.variableDeclaratorId();break;case 2:this.state=1224;this.match(JavaParser.VAR);this.state=1225;this.identifier();break;}this.state=1228;this.match(JavaParser.ASSIGN);this.state=1229;this.expression(0);break;case 2:this.enterOuterAlt(localctx,2);this.state=1231;this.identifier();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}switchBlockStatementGroup(){let localctx=new SwitchBlockStatementGroupContext(this,this._ctx,this.state);this.enterRule(localctx,178,JavaParser.RULE_switchBlockStatementGroup);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1235;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=1234;this.switchLabel();this.state=1237;this._errHandler.sync(this);_la=this._input.LA(1);}while(_la===JavaParser.CASE||_la===JavaParser.DEFAULT);this.state=1240;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=1239;this.blockStatement();this.state=1242;this._errHandler.sync(this);_la=this._input.LA(1);}while((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.ABSTRACT|1<<JavaParser.ASSERT|1<<JavaParser.BOOLEAN|1<<JavaParser.BREAK|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.CLASS|1<<JavaParser.CONTINUE|1<<JavaParser.DO|1<<JavaParser.DOUBLE|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.FOR|1<<JavaParser.IF|1<<JavaParser.INT|1<<JavaParser.INTERFACE|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<JavaParser.PRIVATE-33|1<<JavaParser.PROTECTED-33|1<<JavaParser.PUBLIC-33|1<<JavaParser.RETURN-33|1<<JavaParser.SHORT-33|1<<JavaParser.STATIC-33|1<<JavaParser.STRICTFP-33|1<<JavaParser.SUPER-33|1<<JavaParser.SWITCH-33|1<<JavaParser.SYNCHRONIZED-33|1<<JavaParser.THIS-33|1<<JavaParser.THROW-33|1<<JavaParser.TRY-33|1<<JavaParser.VOID-33|1<<JavaParser.WHILE-33|1<<JavaParser.MODULE-33|1<<JavaParser.OPEN-33|1<<JavaParser.REQUIRES-33|1<<JavaParser.EXPORTS-33|1<<JavaParser.OPENS-33|1<<JavaParser.TO-33|1<<JavaParser.USES-33|1<<JavaParser.PROVIDES-33|1<<JavaParser.WITH-33|1<<JavaParser.TRANSITIVE-33|1<<JavaParser.VAR-33|1<<JavaParser.YIELD-33|1<<JavaParser.RECORD-33|1<<JavaParser.SEALED-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<JavaParser.PERMITS-65|1<<JavaParser.NON_SEALED-65|1<<JavaParser.DECIMAL_LITERAL-65|1<<JavaParser.HEX_LITERAL-65|1<<JavaParser.OCT_LITERAL-65|1<<JavaParser.BINARY_LITERAL-65|1<<JavaParser.FLOAT_LITERAL-65|1<<JavaParser.HEX_FLOAT_LITERAL-65|1<<JavaParser.BOOL_LITERAL-65|1<<JavaParser.CHAR_LITERAL-65|1<<JavaParser.STRING_LITERAL-65|1<<JavaParser.TEXT_BLOCK-65|1<<JavaParser.NULL_LITERAL-65|1<<JavaParser.LPAREN-65|1<<JavaParser.LBRACE-65|1<<JavaParser.SEMI-65|1<<JavaParser.LT-65|1<<JavaParser.BANG-65|1<<JavaParser.TILDE-65))!==0||(_la-100&~0x1f)==0&&(1<<_la-100&(1<<JavaParser.INC-100|1<<JavaParser.DEC-100|1<<JavaParser.ADD-100|1<<JavaParser.SUB-100|1<<JavaParser.AT-100|1<<JavaParser.IDENTIFIER-100))!==0);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}switchLabel(){let localctx=new SwitchLabelContext(this,this._ctx,this.state);this.enterRule(localctx,180,JavaParser.RULE_switchLabel);try{this.state=1255;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.CASE:this.enterOuterAlt(localctx,1);this.state=1244;this.match(JavaParser.CASE);this.state=1250;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,145,this._ctx);switch(la_){case 1:this.state=1245;localctx.constantExpression=this.expression(0);break;case 2:this.state=1246;localctx.enumConstantName=this.match(JavaParser.IDENTIFIER);break;case 3:this.state=1247;this.typeType();this.state=1248;localctx.varName=this.identifier();break;}this.state=1252;this.match(JavaParser.COLON);break;case JavaParser.DEFAULT:this.enterOuterAlt(localctx,2);this.state=1253;this.match(JavaParser.DEFAULT);this.state=1254;this.match(JavaParser.COLON);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}forControl(){let localctx=new ForControlContext(this,this._ctx,this.state);this.enterRule(localctx,182,JavaParser.RULE_forControl);var _la=0;// Token type
try{this.state=1269;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,150,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1257;this.enhancedForControl();break;case 2:this.enterOuterAlt(localctx,2);this.state=1259;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.SUPER-37|1<<JavaParser.SWITCH-37|1<<JavaParser.THIS-37|1<<JavaParser.VOID-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37|1<<JavaParser.DECIMAL_LITERAL-37|1<<JavaParser.HEX_LITERAL-37))!==0||(_la-69&~0x1f)==0&&(1<<_la-69&(1<<JavaParser.OCT_LITERAL-69|1<<JavaParser.BINARY_LITERAL-69|1<<JavaParser.FLOAT_LITERAL-69|1<<JavaParser.HEX_FLOAT_LITERAL-69|1<<JavaParser.BOOL_LITERAL-69|1<<JavaParser.CHAR_LITERAL-69|1<<JavaParser.STRING_LITERAL-69|1<<JavaParser.TEXT_BLOCK-69|1<<JavaParser.NULL_LITERAL-69|1<<JavaParser.LPAREN-69|1<<JavaParser.LT-69|1<<JavaParser.BANG-69|1<<JavaParser.TILDE-69|1<<JavaParser.INC-69))!==0||(_la-101&~0x1f)==0&&(1<<_la-101&(1<<JavaParser.DEC-101|1<<JavaParser.ADD-101|1<<JavaParser.SUB-101|1<<JavaParser.AT-101|1<<JavaParser.IDENTIFIER-101))!==0){this.state=1258;this.forInit();}this.state=1261;this.match(JavaParser.SEMI);this.state=1263;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.SUPER-37|1<<JavaParser.SWITCH-37|1<<JavaParser.THIS-37|1<<JavaParser.VOID-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37|1<<JavaParser.DECIMAL_LITERAL-37|1<<JavaParser.HEX_LITERAL-37))!==0||(_la-69&~0x1f)==0&&(1<<_la-69&(1<<JavaParser.OCT_LITERAL-69|1<<JavaParser.BINARY_LITERAL-69|1<<JavaParser.FLOAT_LITERAL-69|1<<JavaParser.HEX_FLOAT_LITERAL-69|1<<JavaParser.BOOL_LITERAL-69|1<<JavaParser.CHAR_LITERAL-69|1<<JavaParser.STRING_LITERAL-69|1<<JavaParser.TEXT_BLOCK-69|1<<JavaParser.NULL_LITERAL-69|1<<JavaParser.LPAREN-69|1<<JavaParser.LT-69|1<<JavaParser.BANG-69|1<<JavaParser.TILDE-69|1<<JavaParser.INC-69))!==0||(_la-101&~0x1f)==0&&(1<<_la-101&(1<<JavaParser.DEC-101|1<<JavaParser.ADD-101|1<<JavaParser.SUB-101|1<<JavaParser.AT-101|1<<JavaParser.IDENTIFIER-101))!==0){this.state=1262;this.expression(0);}this.state=1265;this.match(JavaParser.SEMI);this.state=1267;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.SUPER-37|1<<JavaParser.SWITCH-37|1<<JavaParser.THIS-37|1<<JavaParser.VOID-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37|1<<JavaParser.DECIMAL_LITERAL-37|1<<JavaParser.HEX_LITERAL-37))!==0||(_la-69&~0x1f)==0&&(1<<_la-69&(1<<JavaParser.OCT_LITERAL-69|1<<JavaParser.BINARY_LITERAL-69|1<<JavaParser.FLOAT_LITERAL-69|1<<JavaParser.HEX_FLOAT_LITERAL-69|1<<JavaParser.BOOL_LITERAL-69|1<<JavaParser.CHAR_LITERAL-69|1<<JavaParser.STRING_LITERAL-69|1<<JavaParser.TEXT_BLOCK-69|1<<JavaParser.NULL_LITERAL-69|1<<JavaParser.LPAREN-69|1<<JavaParser.LT-69|1<<JavaParser.BANG-69|1<<JavaParser.TILDE-69|1<<JavaParser.INC-69))!==0||(_la-101&~0x1f)==0&&(1<<_la-101&(1<<JavaParser.DEC-101|1<<JavaParser.ADD-101|1<<JavaParser.SUB-101|1<<JavaParser.AT-101|1<<JavaParser.IDENTIFIER-101))!==0){this.state=1266;localctx.forUpdate=this.expressionList();}break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}forInit(){let localctx=new ForInitContext(this,this._ctx,this.state);this.enterRule(localctx,184,JavaParser.RULE_forInit);try{this.state=1273;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,151,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1271;this.localVariableDeclaration();break;case 2:this.enterOuterAlt(localctx,2);this.state=1272;this.expressionList();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}enhancedForControl(){let localctx=new EnhancedForControlContext(this,this._ctx,this.state);this.enterRule(localctx,186,JavaParser.RULE_enhancedForControl);try{this.enterOuterAlt(localctx,1);this.state=1278;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,152,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1275;this.variableModifier();}this.state=1280;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,152,this._ctx);}this.state=1283;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,153,this._ctx);switch(la_){case 1:this.state=1281;this.typeType();break;case 2:this.state=1282;this.match(JavaParser.VAR);break;}this.state=1285;this.variableDeclaratorId();this.state=1286;this.match(JavaParser.COLON);this.state=1287;this.expression(0);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}parExpression(){let localctx=new ParExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,188,JavaParser.RULE_parExpression);try{this.enterOuterAlt(localctx,1);this.state=1289;this.match(JavaParser.LPAREN);this.state=1290;this.expression(0);this.state=1291;this.match(JavaParser.RPAREN);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}expressionList(){let localctx=new ExpressionListContext(this,this._ctx,this.state);this.enterRule(localctx,190,JavaParser.RULE_expressionList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1293;this.expression(0);this.state=1298;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=1294;this.match(JavaParser.COMMA);this.state=1295;this.expression(0);this.state=1300;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}methodCall(){let localctx=new MethodCallContext(this,this._ctx,this.state);this.enterRule(localctx,192,JavaParser.RULE_methodCall);var _la=0;// Token type
try{this.state=1320;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=1301;this.identifier();this.state=1302;this.match(JavaParser.LPAREN);this.state=1304;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.SUPER-37|1<<JavaParser.SWITCH-37|1<<JavaParser.THIS-37|1<<JavaParser.VOID-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37|1<<JavaParser.DECIMAL_LITERAL-37|1<<JavaParser.HEX_LITERAL-37))!==0||(_la-69&~0x1f)==0&&(1<<_la-69&(1<<JavaParser.OCT_LITERAL-69|1<<JavaParser.BINARY_LITERAL-69|1<<JavaParser.FLOAT_LITERAL-69|1<<JavaParser.HEX_FLOAT_LITERAL-69|1<<JavaParser.BOOL_LITERAL-69|1<<JavaParser.CHAR_LITERAL-69|1<<JavaParser.STRING_LITERAL-69|1<<JavaParser.TEXT_BLOCK-69|1<<JavaParser.NULL_LITERAL-69|1<<JavaParser.LPAREN-69|1<<JavaParser.LT-69|1<<JavaParser.BANG-69|1<<JavaParser.TILDE-69|1<<JavaParser.INC-69))!==0||(_la-101&~0x1f)==0&&(1<<_la-101&(1<<JavaParser.DEC-101|1<<JavaParser.ADD-101|1<<JavaParser.SUB-101|1<<JavaParser.AT-101|1<<JavaParser.IDENTIFIER-101))!==0){this.state=1303;this.expressionList();}this.state=1306;this.match(JavaParser.RPAREN);break;case JavaParser.THIS:this.enterOuterAlt(localctx,2);this.state=1308;this.match(JavaParser.THIS);this.state=1309;this.match(JavaParser.LPAREN);this.state=1311;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.SUPER-37|1<<JavaParser.SWITCH-37|1<<JavaParser.THIS-37|1<<JavaParser.VOID-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37|1<<JavaParser.DECIMAL_LITERAL-37|1<<JavaParser.HEX_LITERAL-37))!==0||(_la-69&~0x1f)==0&&(1<<_la-69&(1<<JavaParser.OCT_LITERAL-69|1<<JavaParser.BINARY_LITERAL-69|1<<JavaParser.FLOAT_LITERAL-69|1<<JavaParser.HEX_FLOAT_LITERAL-69|1<<JavaParser.BOOL_LITERAL-69|1<<JavaParser.CHAR_LITERAL-69|1<<JavaParser.STRING_LITERAL-69|1<<JavaParser.TEXT_BLOCK-69|1<<JavaParser.NULL_LITERAL-69|1<<JavaParser.LPAREN-69|1<<JavaParser.LT-69|1<<JavaParser.BANG-69|1<<JavaParser.TILDE-69|1<<JavaParser.INC-69))!==0||(_la-101&~0x1f)==0&&(1<<_la-101&(1<<JavaParser.DEC-101|1<<JavaParser.ADD-101|1<<JavaParser.SUB-101|1<<JavaParser.AT-101|1<<JavaParser.IDENTIFIER-101))!==0){this.state=1310;this.expressionList();}this.state=1313;this.match(JavaParser.RPAREN);break;case JavaParser.SUPER:this.enterOuterAlt(localctx,3);this.state=1314;this.match(JavaParser.SUPER);this.state=1315;this.match(JavaParser.LPAREN);this.state=1317;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.SUPER-37|1<<JavaParser.SWITCH-37|1<<JavaParser.THIS-37|1<<JavaParser.VOID-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37|1<<JavaParser.DECIMAL_LITERAL-37|1<<JavaParser.HEX_LITERAL-37))!==0||(_la-69&~0x1f)==0&&(1<<_la-69&(1<<JavaParser.OCT_LITERAL-69|1<<JavaParser.BINARY_LITERAL-69|1<<JavaParser.FLOAT_LITERAL-69|1<<JavaParser.HEX_FLOAT_LITERAL-69|1<<JavaParser.BOOL_LITERAL-69|1<<JavaParser.CHAR_LITERAL-69|1<<JavaParser.STRING_LITERAL-69|1<<JavaParser.TEXT_BLOCK-69|1<<JavaParser.NULL_LITERAL-69|1<<JavaParser.LPAREN-69|1<<JavaParser.LT-69|1<<JavaParser.BANG-69|1<<JavaParser.TILDE-69|1<<JavaParser.INC-69))!==0||(_la-101&~0x1f)==0&&(1<<_la-101&(1<<JavaParser.DEC-101|1<<JavaParser.ADD-101|1<<JavaParser.SUB-101|1<<JavaParser.AT-101|1<<JavaParser.IDENTIFIER-101))!==0){this.state=1316;this.expressionList();}this.state=1319;this.match(JavaParser.RPAREN);break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}expression(_p){if(_p===undefined){_p=0;}const _parentctx=this._ctx;const _parentState=this.state;let localctx=new ExpressionContext(this,this._ctx,_parentState);let _prevctx=localctx;const _startState=194;this.enterRecursionRule(localctx,194,JavaParser.RULE_expression,_p);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1367;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,164,this._ctx);switch(la_){case 1:this.state=1323;this.primary();break;case 2:this.state=1324;this.methodCall();break;case 3:this.state=1325;this.match(JavaParser.NEW);this.state=1326;this.creator();break;case 4:this.state=1327;this.match(JavaParser.LPAREN);this.state=1331;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,159,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1328;this.annotation();}this.state=1333;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,159,this._ctx);}this.state=1334;this.typeType();this.state=1339;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.BITAND){this.state=1335;this.match(JavaParser.BITAND);this.state=1336;this.typeType();this.state=1341;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1342;this.match(JavaParser.RPAREN);this.state=1343;this.expression(22);break;case 5:this.state=1345;localctx.prefix=this._input.LT(1);_la=this._input.LA(1);if(!((_la-100&~0x1f)==0&&(1<<_la-100&(1<<JavaParser.INC-100|1<<JavaParser.DEC-100|1<<JavaParser.ADD-100|1<<JavaParser.SUB-100))!==0)){localctx.prefix=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1346;this.expression(20);break;case 6:this.state=1347;localctx.prefix=this._input.LT(1);_la=this._input.LA(1);if(!(_la===JavaParser.BANG||_la===JavaParser.TILDE)){localctx.prefix=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1348;this.expression(19);break;case 7:this.state=1349;this.lambdaExpression();break;case 8:this.state=1350;this.switchExpression();break;case 9:this.state=1351;this.typeType();this.state=1352;this.match(JavaParser.COLONCOLON);this.state=1358;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.LT:case JavaParser.IDENTIFIER:this.state=1354;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=1353;this.typeArguments();}this.state=1356;this.identifier();break;case JavaParser.NEW:this.state=1357;this.match(JavaParser.NEW);break;default:throw new _antlr.default.error.NoViableAltException(this);}break;case 10:this.state=1360;this.classType();this.state=1361;this.match(JavaParser.COLONCOLON);this.state=1363;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=1362;this.typeArguments();}this.state=1365;this.match(JavaParser.NEW);break;}this._ctx.stop=this._input.LT(-1);this.state=1452;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,171,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;this.state=1450;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,170,this._ctx);switch(la_){case 1:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1369;if(!this.precpred(this._ctx,18)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 18)");}this.state=1370;localctx.bop=this._input.LT(1);_la=this._input.LA(1);if(!((_la-104&~0x1f)==0&&(1<<_la-104&(1<<JavaParser.MUL-104|1<<JavaParser.DIV-104|1<<JavaParser.MOD-104))!==0)){localctx.bop=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1371;this.expression(19);break;case 2:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1372;if(!this.precpred(this._ctx,17)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 17)");}this.state=1373;localctx.bop=this._input.LT(1);_la=this._input.LA(1);if(!(_la===JavaParser.ADD||_la===JavaParser.SUB)){localctx.bop=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1374;this.expression(18);break;case 3:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1375;if(!this.precpred(this._ctx,16)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 16)");}this.state=1383;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,165,this._ctx);switch(la_){case 1:this.state=1376;this.match(JavaParser.LT);this.state=1377;this.match(JavaParser.LT);break;case 2:this.state=1378;this.match(JavaParser.GT);this.state=1379;this.match(JavaParser.GT);this.state=1380;this.match(JavaParser.GT);break;case 3:this.state=1381;this.match(JavaParser.GT);this.state=1382;this.match(JavaParser.GT);break;}this.state=1385;this.expression(17);break;case 4:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1386;if(!this.precpred(this._ctx,15)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 15)");}this.state=1387;localctx.bop=this._input.LT(1);_la=this._input.LA(1);if(!((_la-88&~0x1f)==0&&(1<<_la-88&(1<<JavaParser.GT-88|1<<JavaParser.LT-88|1<<JavaParser.LE-88|1<<JavaParser.GE-88))!==0)){localctx.bop=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1388;this.expression(16);break;case 5:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1389;if(!this.precpred(this._ctx,13)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 13)");}this.state=1390;localctx.bop=this._input.LT(1);_la=this._input.LA(1);if(!(_la===JavaParser.EQUAL||_la===JavaParser.NOTEQUAL)){localctx.bop=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1391;this.expression(14);break;case 6:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1392;if(!this.precpred(this._ctx,12)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 12)");}this.state=1393;localctx.bop=this.match(JavaParser.BITAND);this.state=1394;this.expression(13);break;case 7:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1395;if(!this.precpred(this._ctx,11)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 11)");}this.state=1396;localctx.bop=this.match(JavaParser.CARET);this.state=1397;this.expression(12);break;case 8:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1398;if(!this.precpred(this._ctx,10)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 10)");}this.state=1399;localctx.bop=this.match(JavaParser.BITOR);this.state=1400;this.expression(11);break;case 9:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1401;if(!this.precpred(this._ctx,9)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 9)");}this.state=1402;localctx.bop=this.match(JavaParser.AND);this.state=1403;this.expression(10);break;case 10:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1404;if(!this.precpred(this._ctx,8)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 8)");}this.state=1405;localctx.bop=this.match(JavaParser.OR);this.state=1406;this.expression(9);break;case 11:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1407;if(!this.precpred(this._ctx,7)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 7)");}this.state=1408;localctx.bop=this.match(JavaParser.QUESTION);this.state=1409;this.expression(0);this.state=1410;this.match(JavaParser.COLON);this.state=1411;this.expression(7);break;case 12:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1413;if(!this.precpred(this._ctx,6)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 6)");}this.state=1414;localctx.bop=this._input.LT(1);_la=this._input.LA(1);if(!((_la-87&~0x1f)==0&&(1<<_la-87&(1<<JavaParser.ASSIGN-87|1<<JavaParser.ADD_ASSIGN-87|1<<JavaParser.SUB_ASSIGN-87|1<<JavaParser.MUL_ASSIGN-87|1<<JavaParser.DIV_ASSIGN-87|1<<JavaParser.AND_ASSIGN-87|1<<JavaParser.OR_ASSIGN-87|1<<JavaParser.XOR_ASSIGN-87|1<<JavaParser.MOD_ASSIGN-87|1<<JavaParser.LSHIFT_ASSIGN-87))!==0||_la===JavaParser.RSHIFT_ASSIGN||_la===JavaParser.URSHIFT_ASSIGN)){localctx.bop=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1415;this.expression(6);break;case 13:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1416;if(!this.precpred(this._ctx,26)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 26)");}this.state=1417;localctx.bop=this.match(JavaParser.DOT);this.state=1429;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,167,this._ctx);switch(la_){case 1:this.state=1418;this.identifier();break;case 2:this.state=1419;this.methodCall();break;case 3:this.state=1420;this.match(JavaParser.THIS);break;case 4:this.state=1421;this.match(JavaParser.NEW);this.state=1423;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=1422;this.nonWildcardTypeArguments();}this.state=1425;this.innerCreator();break;case 5:this.state=1426;this.match(JavaParser.SUPER);this.state=1427;this.superSuffix();break;case 6:this.state=1428;this.explicitGenericInvocation();break;}break;case 14:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1431;if(!this.precpred(this._ctx,25)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 25)");}this.state=1432;this.match(JavaParser.LBRACK);this.state=1433;this.expression(0);this.state=1434;this.match(JavaParser.RBRACK);break;case 15:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1436;if(!this.precpred(this._ctx,21)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 21)");}this.state=1437;localctx.postfix=this._input.LT(1);_la=this._input.LA(1);if(!(_la===JavaParser.INC||_la===JavaParser.DEC)){localctx.postfix=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}break;case 16:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1438;if(!this.precpred(this._ctx,14)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 14)");}this.state=1439;localctx.bop=this.match(JavaParser.INSTANCEOF);this.state=1442;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,168,this._ctx);switch(la_){case 1:this.state=1440;this.typeType();break;case 2:this.state=1441;this.pattern();break;}break;case 17:localctx=new ExpressionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_expression);this.state=1444;if(!this.precpred(this._ctx,3)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 3)");}this.state=1445;this.match(JavaParser.COLONCOLON);this.state=1447;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=1446;this.typeArguments();}this.state=1449;this.identifier();break;}}this.state=1454;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,171,this._ctx);}}catch(error){if(error instanceof _antlr.default.error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}pattern(){let localctx=new PatternContext(this,this._ctx,this.state);this.enterRule(localctx,196,JavaParser.RULE_pattern);try{this.enterOuterAlt(localctx,1);this.state=1458;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,172,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1455;this.variableModifier();}this.state=1460;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,172,this._ctx);}this.state=1461;this.typeType();this.state=1465;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,173,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1462;this.annotation();}this.state=1467;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,173,this._ctx);}this.state=1468;this.identifier();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}lambdaExpression(){let localctx=new LambdaExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,198,JavaParser.RULE_lambdaExpression);try{this.enterOuterAlt(localctx,1);this.state=1470;this.lambdaParameters();this.state=1471;this.match(JavaParser.ARROW);this.state=1472;this.lambdaBody();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}lambdaParameters(){let localctx=new LambdaParametersContext(this,this._ctx,this.state);this.enterRule(localctx,200,JavaParser.RULE_lambdaParameters);var _la=0;// Token type
try{this.state=1496;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,177,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1474;this.identifier();break;case 2:this.enterOuterAlt(localctx,2);this.state=1475;this.match(JavaParser.LPAREN);this.state=1477;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=1476;this.formalParameterList();}this.state=1479;this.match(JavaParser.RPAREN);break;case 3:this.enterOuterAlt(localctx,3);this.state=1480;this.match(JavaParser.LPAREN);this.state=1481;this.identifier();this.state=1486;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=1482;this.match(JavaParser.COMMA);this.state=1483;this.identifier();this.state=1488;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1489;this.match(JavaParser.RPAREN);break;case 4:this.enterOuterAlt(localctx,4);this.state=1491;this.match(JavaParser.LPAREN);this.state=1493;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.FINAL||(_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=1492;this.lambdaLVTIList();}this.state=1495;this.match(JavaParser.RPAREN);break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}lambdaBody(){let localctx=new LambdaBodyContext(this,this._ctx,this.state);this.enterRule(localctx,202,JavaParser.RULE_lambdaBody);try{this.state=1500;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.BOOLEAN:case JavaParser.BYTE:case JavaParser.CHAR:case JavaParser.DOUBLE:case JavaParser.FLOAT:case JavaParser.INT:case JavaParser.LONG:case JavaParser.NEW:case JavaParser.SHORT:case JavaParser.SUPER:case JavaParser.SWITCH:case JavaParser.THIS:case JavaParser.VOID:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.DECIMAL_LITERAL:case JavaParser.HEX_LITERAL:case JavaParser.OCT_LITERAL:case JavaParser.BINARY_LITERAL:case JavaParser.FLOAT_LITERAL:case JavaParser.HEX_FLOAT_LITERAL:case JavaParser.BOOL_LITERAL:case JavaParser.CHAR_LITERAL:case JavaParser.STRING_LITERAL:case JavaParser.TEXT_BLOCK:case JavaParser.NULL_LITERAL:case JavaParser.LPAREN:case JavaParser.LT:case JavaParser.BANG:case JavaParser.TILDE:case JavaParser.INC:case JavaParser.DEC:case JavaParser.ADD:case JavaParser.SUB:case JavaParser.AT:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=1498;this.expression(0);break;case JavaParser.LBRACE:this.enterOuterAlt(localctx,2);this.state=1499;this.block();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}primary(){let localctx=new PrimaryContext(this,this._ctx,this.state);this.enterRule(localctx,204,JavaParser.RULE_primary);try{this.state=1520;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,180,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1502;this.match(JavaParser.LPAREN);this.state=1503;this.expression(0);this.state=1504;this.match(JavaParser.RPAREN);break;case 2:this.enterOuterAlt(localctx,2);this.state=1506;this.match(JavaParser.THIS);break;case 3:this.enterOuterAlt(localctx,3);this.state=1507;this.match(JavaParser.SUPER);break;case 4:this.enterOuterAlt(localctx,4);this.state=1508;this.literal();break;case 5:this.enterOuterAlt(localctx,5);this.state=1509;this.identifier();break;case 6:this.enterOuterAlt(localctx,6);this.state=1510;this.typeTypeOrVoid();this.state=1511;this.match(JavaParser.DOT);this.state=1512;this.match(JavaParser.CLASS);break;case 7:this.enterOuterAlt(localctx,7);this.state=1514;this.nonWildcardTypeArguments();this.state=1518;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.SUPER:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.IDENTIFIER:this.state=1515;this.explicitGenericInvocationSuffix();break;case JavaParser.THIS:this.state=1516;this.match(JavaParser.THIS);this.state=1517;this.arguments();break;default:throw new _antlr.default.error.NoViableAltException(this);}break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}switchExpression(){let localctx=new SwitchExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,206,JavaParser.RULE_switchExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1522;this.match(JavaParser.SWITCH);this.state=1523;this.parExpression();this.state=1524;this.match(JavaParser.LBRACE);this.state=1528;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.CASE||_la===JavaParser.DEFAULT){this.state=1525;this.switchLabeledRule();this.state=1530;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1531;this.match(JavaParser.RBRACE);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}switchLabeledRule(){let localctx=new SwitchLabeledRuleContext(this,this._ctx,this.state);this.enterRule(localctx,208,JavaParser.RULE_switchLabeledRule);var _la=0;// Token type
try{this.state=1544;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.CASE:this.enterOuterAlt(localctx,1);this.state=1533;this.match(JavaParser.CASE);this.state=1537;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,182,this._ctx);switch(la_){case 1:this.state=1534;this.expressionList();break;case 2:this.state=1535;this.match(JavaParser.NULL_LITERAL);break;case 3:this.state=1536;this.guardedPattern(0);break;}this.state=1539;_la=this._input.LA(1);if(!(_la===JavaParser.COLON||_la===JavaParser.ARROW)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1540;this.switchRuleOutcome();break;case JavaParser.DEFAULT:this.enterOuterAlt(localctx,2);this.state=1541;this.match(JavaParser.DEFAULT);this.state=1542;_la=this._input.LA(1);if(!(_la===JavaParser.COLON||_la===JavaParser.ARROW)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1543;this.switchRuleOutcome();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}guardedPattern(_p){if(_p===undefined){_p=0;}const _parentctx=this._ctx;const _parentState=this.state;let localctx=new GuardedPatternContext(this,this._ctx,_parentState);let _prevctx=localctx;const _startState=210;this.enterRecursionRule(localctx,210,JavaParser.RULE_guardedPattern,_p);try{this.enterOuterAlt(localctx,1);this.state=1572;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.LPAREN:this.state=1547;this.match(JavaParser.LPAREN);this.state=1548;this.guardedPattern(0);this.state=1549;this.match(JavaParser.RPAREN);break;case JavaParser.BOOLEAN:case JavaParser.BYTE:case JavaParser.CHAR:case JavaParser.DOUBLE:case JavaParser.FINAL:case JavaParser.FLOAT:case JavaParser.INT:case JavaParser.LONG:case JavaParser.SHORT:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.AT:case JavaParser.IDENTIFIER:this.state=1554;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,184,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1551;this.variableModifier();}this.state=1556;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,184,this._ctx);}this.state=1557;this.typeType();this.state=1561;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,185,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1558;this.annotation();}this.state=1563;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,185,this._ctx);}this.state=1564;this.identifier();this.state=1569;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,186,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1565;this.match(JavaParser.AND);this.state=1566;this.expression(0);}this.state=1571;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,186,this._ctx);}break;default:throw new _antlr.default.error.NoViableAltException(this);}this._ctx.stop=this._input.LT(-1);this.state=1579;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,188,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new GuardedPatternContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,JavaParser.RULE_guardedPattern);this.state=1574;if(!this.precpred(this._ctx,1)){throw new _antlr.default.error.FailedPredicateException(this,"this.precpred(this._ctx, 1)");}this.state=1575;this.match(JavaParser.AND);this.state=1576;this.expression(0);}this.state=1581;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,188,this._ctx);}}catch(error){if(error instanceof _antlr.default.error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}switchRuleOutcome(){let localctx=new SwitchRuleOutcomeContext(this,this._ctx,this.state);this.enterRule(localctx,212,JavaParser.RULE_switchRuleOutcome);var _la=0;// Token type
try{this.state=1589;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,190,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1582;this.block();break;case 2:this.enterOuterAlt(localctx,2);this.state=1586;this._errHandler.sync(this);_la=this._input.LA(1);while((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.ABSTRACT|1<<JavaParser.ASSERT|1<<JavaParser.BOOLEAN|1<<JavaParser.BREAK|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.CLASS|1<<JavaParser.CONTINUE|1<<JavaParser.DO|1<<JavaParser.DOUBLE|1<<JavaParser.FINAL|1<<JavaParser.FLOAT|1<<JavaParser.FOR|1<<JavaParser.IF|1<<JavaParser.INT|1<<JavaParser.INTERFACE|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-33&~0x1f)==0&&(1<<_la-33&(1<<JavaParser.PRIVATE-33|1<<JavaParser.PROTECTED-33|1<<JavaParser.PUBLIC-33|1<<JavaParser.RETURN-33|1<<JavaParser.SHORT-33|1<<JavaParser.STATIC-33|1<<JavaParser.STRICTFP-33|1<<JavaParser.SUPER-33|1<<JavaParser.SWITCH-33|1<<JavaParser.SYNCHRONIZED-33|1<<JavaParser.THIS-33|1<<JavaParser.THROW-33|1<<JavaParser.TRY-33|1<<JavaParser.VOID-33|1<<JavaParser.WHILE-33|1<<JavaParser.MODULE-33|1<<JavaParser.OPEN-33|1<<JavaParser.REQUIRES-33|1<<JavaParser.EXPORTS-33|1<<JavaParser.OPENS-33|1<<JavaParser.TO-33|1<<JavaParser.USES-33|1<<JavaParser.PROVIDES-33|1<<JavaParser.WITH-33|1<<JavaParser.TRANSITIVE-33|1<<JavaParser.VAR-33|1<<JavaParser.YIELD-33|1<<JavaParser.RECORD-33|1<<JavaParser.SEALED-33))!==0||(_la-65&~0x1f)==0&&(1<<_la-65&(1<<JavaParser.PERMITS-65|1<<JavaParser.NON_SEALED-65|1<<JavaParser.DECIMAL_LITERAL-65|1<<JavaParser.HEX_LITERAL-65|1<<JavaParser.OCT_LITERAL-65|1<<JavaParser.BINARY_LITERAL-65|1<<JavaParser.FLOAT_LITERAL-65|1<<JavaParser.HEX_FLOAT_LITERAL-65|1<<JavaParser.BOOL_LITERAL-65|1<<JavaParser.CHAR_LITERAL-65|1<<JavaParser.STRING_LITERAL-65|1<<JavaParser.TEXT_BLOCK-65|1<<JavaParser.NULL_LITERAL-65|1<<JavaParser.LPAREN-65|1<<JavaParser.LBRACE-65|1<<JavaParser.SEMI-65|1<<JavaParser.LT-65|1<<JavaParser.BANG-65|1<<JavaParser.TILDE-65))!==0||(_la-100&~0x1f)==0&&(1<<_la-100&(1<<JavaParser.INC-100|1<<JavaParser.DEC-100|1<<JavaParser.ADD-100|1<<JavaParser.SUB-100|1<<JavaParser.AT-100|1<<JavaParser.IDENTIFIER-100))!==0){this.state=1583;this.blockStatement();this.state=1588;this._errHandler.sync(this);_la=this._input.LA(1);}break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classType(){let localctx=new ClassTypeContext(this,this._ctx,this.state);this.enterRule(localctx,214,JavaParser.RULE_classType);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1594;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,191,this._ctx);if(la_===1){this.state=1591;this.classOrInterfaceType();this.state=1592;this.match(JavaParser.DOT);}this.state=1599;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,192,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1596;this.annotation();}this.state=1601;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,192,this._ctx);}this.state=1602;this.identifier();this.state=1604;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=1603;this.typeArguments();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}creator(){let localctx=new CreatorContext(this,this._ctx,this.state);this.enterRule(localctx,216,JavaParser.RULE_creator);try{this.state=1615;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.LT:this.enterOuterAlt(localctx,1);this.state=1606;this.nonWildcardTypeArguments();this.state=1607;this.createdName();this.state=1608;this.classCreatorRest();break;case JavaParser.BOOLEAN:case JavaParser.BYTE:case JavaParser.CHAR:case JavaParser.DOUBLE:case JavaParser.FLOAT:case JavaParser.INT:case JavaParser.LONG:case JavaParser.SHORT:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,2);this.state=1610;this.createdName();this.state=1613;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.LBRACK:this.state=1611;this.arrayCreatorRest();break;case JavaParser.LPAREN:this.state=1612;this.classCreatorRest();break;default:throw new _antlr.default.error.NoViableAltException(this);}break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}createdName(){let localctx=new CreatedNameContext(this,this._ctx,this.state);this.enterRule(localctx,218,JavaParser.RULE_createdName);var _la=0;// Token type
try{this.state=1632;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=1617;this.identifier();this.state=1619;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=1618;this.typeArgumentsOrDiamond();}this.state=1628;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.DOT){this.state=1621;this.match(JavaParser.DOT);this.state=1622;this.identifier();this.state=1624;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=1623;this.typeArgumentsOrDiamond();}this.state=1630;this._errHandler.sync(this);_la=this._input.LA(1);}break;case JavaParser.BOOLEAN:case JavaParser.BYTE:case JavaParser.CHAR:case JavaParser.DOUBLE:case JavaParser.FLOAT:case JavaParser.INT:case JavaParser.LONG:case JavaParser.SHORT:this.enterOuterAlt(localctx,2);this.state=1631;this.primitiveType();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}innerCreator(){let localctx=new InnerCreatorContext(this,this._ctx,this.state);this.enterRule(localctx,220,JavaParser.RULE_innerCreator);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1634;this.identifier();this.state=1636;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=1635;this.nonWildcardTypeArgumentsOrDiamond();}this.state=1638;this.classCreatorRest();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}arrayCreatorRest(){let localctx=new ArrayCreatorRestContext(this,this._ctx,this.state);this.enterRule(localctx,222,JavaParser.RULE_arrayCreatorRest);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1640;this.match(JavaParser.LBRACK);this.state=1668;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.RBRACK:this.state=1641;this.match(JavaParser.RBRACK);this.state=1646;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.LBRACK){this.state=1642;this.match(JavaParser.LBRACK);this.state=1643;this.match(JavaParser.RBRACK);this.state=1648;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1649;this.arrayInitializer();break;case JavaParser.BOOLEAN:case JavaParser.BYTE:case JavaParser.CHAR:case JavaParser.DOUBLE:case JavaParser.FLOAT:case JavaParser.INT:case JavaParser.LONG:case JavaParser.NEW:case JavaParser.SHORT:case JavaParser.SUPER:case JavaParser.SWITCH:case JavaParser.THIS:case JavaParser.VOID:case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.DECIMAL_LITERAL:case JavaParser.HEX_LITERAL:case JavaParser.OCT_LITERAL:case JavaParser.BINARY_LITERAL:case JavaParser.FLOAT_LITERAL:case JavaParser.HEX_FLOAT_LITERAL:case JavaParser.BOOL_LITERAL:case JavaParser.CHAR_LITERAL:case JavaParser.STRING_LITERAL:case JavaParser.TEXT_BLOCK:case JavaParser.NULL_LITERAL:case JavaParser.LPAREN:case JavaParser.LT:case JavaParser.BANG:case JavaParser.TILDE:case JavaParser.INC:case JavaParser.DEC:case JavaParser.ADD:case JavaParser.SUB:case JavaParser.AT:case JavaParser.IDENTIFIER:this.state=1650;this.expression(0);this.state=1651;this.match(JavaParser.RBRACK);this.state=1658;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,202,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1652;this.match(JavaParser.LBRACK);this.state=1653;this.expression(0);this.state=1654;this.match(JavaParser.RBRACK);}this.state=1660;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,202,this._ctx);}this.state=1665;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,203,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1661;this.match(JavaParser.LBRACK);this.state=1662;this.match(JavaParser.RBRACK);}this.state=1667;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,203,this._ctx);}break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}classCreatorRest(){let localctx=new ClassCreatorRestContext(this,this._ctx,this.state);this.enterRule(localctx,224,JavaParser.RULE_classCreatorRest);try{this.enterOuterAlt(localctx,1);this.state=1670;this.arguments();this.state=1672;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,205,this._ctx);if(la_===1){this.state=1671;this.classBody();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}explicitGenericInvocation(){let localctx=new ExplicitGenericInvocationContext(this,this._ctx,this.state);this.enterRule(localctx,226,JavaParser.RULE_explicitGenericInvocation);try{this.enterOuterAlt(localctx,1);this.state=1674;this.nonWildcardTypeArguments();this.state=1675;this.explicitGenericInvocationSuffix();}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeArgumentsOrDiamond(){let localctx=new TypeArgumentsOrDiamondContext(this,this._ctx,this.state);this.enterRule(localctx,228,JavaParser.RULE_typeArgumentsOrDiamond);try{this.state=1680;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,206,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1677;this.match(JavaParser.LT);this.state=1678;this.match(JavaParser.GT);break;case 2:this.enterOuterAlt(localctx,2);this.state=1679;this.typeArguments();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}nonWildcardTypeArgumentsOrDiamond(){let localctx=new NonWildcardTypeArgumentsOrDiamondContext(this,this._ctx,this.state);this.enterRule(localctx,230,JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond);try{this.state=1685;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,207,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1682;this.match(JavaParser.LT);this.state=1683;this.match(JavaParser.GT);break;case 2:this.enterOuterAlt(localctx,2);this.state=1684;this.nonWildcardTypeArguments();break;}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}nonWildcardTypeArguments(){let localctx=new NonWildcardTypeArgumentsContext(this,this._ctx,this.state);this.enterRule(localctx,232,JavaParser.RULE_nonWildcardTypeArguments);try{this.enterOuterAlt(localctx,1);this.state=1687;this.match(JavaParser.LT);this.state=1688;this.typeList();this.state=1689;this.match(JavaParser.GT);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeList(){let localctx=new TypeListContext(this,this._ctx,this.state);this.enterRule(localctx,234,JavaParser.RULE_typeList);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1691;this.typeType();this.state=1696;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=1692;this.match(JavaParser.COMMA);this.state=1693;this.typeType();this.state=1698;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeType(){let localctx=new TypeTypeContext(this,this._ctx,this.state);this.enterRule(localctx,236,JavaParser.RULE_typeType);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1702;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,209,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1699;this.annotation();}this.state=1704;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,209,this._ctx);}this.state=1707;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.IDENTIFIER:this.state=1705;this.classOrInterfaceType();break;case JavaParser.BOOLEAN:case JavaParser.BYTE:case JavaParser.CHAR:case JavaParser.DOUBLE:case JavaParser.FLOAT:case JavaParser.INT:case JavaParser.LONG:case JavaParser.SHORT:this.state=1706;this.primitiveType();break;default:throw new _antlr.default.error.NoViableAltException(this);}this.state=1719;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,212,this._ctx);while(_alt!=2&&_alt!=_antlr.default.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1712;this._errHandler.sync(this);_la=this._input.LA(1);while((_la-51&~0x1f)==0&&(1<<_la-51&(1<<JavaParser.MODULE-51|1<<JavaParser.OPEN-51|1<<JavaParser.REQUIRES-51|1<<JavaParser.EXPORTS-51|1<<JavaParser.OPENS-51|1<<JavaParser.TO-51|1<<JavaParser.USES-51|1<<JavaParser.PROVIDES-51|1<<JavaParser.WITH-51|1<<JavaParser.TRANSITIVE-51|1<<JavaParser.VAR-51|1<<JavaParser.YIELD-51|1<<JavaParser.RECORD-51|1<<JavaParser.SEALED-51|1<<JavaParser.PERMITS-51))!==0||_la===JavaParser.AT||_la===JavaParser.IDENTIFIER){this.state=1709;this.annotation();this.state=1714;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1715;this.match(JavaParser.LBRACK);this.state=1716;this.match(JavaParser.RBRACK);}this.state=1721;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,212,this._ctx);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}primitiveType(){let localctx=new PrimitiveTypeContext(this,this._ctx,this.state);this.enterRule(localctx,238,JavaParser.RULE_primitiveType);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1722;_la=this._input.LA(1);if(!((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG))!==0||_la===JavaParser.SHORT)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}typeArguments(){let localctx=new TypeArgumentsContext(this,this._ctx,this.state);this.enterRule(localctx,240,JavaParser.RULE_typeArguments);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1724;this.match(JavaParser.LT);this.state=1725;this.typeArgument();this.state=1730;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===JavaParser.COMMA){this.state=1726;this.match(JavaParser.COMMA);this.state=1727;this.typeArgument();this.state=1732;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1733;this.match(JavaParser.GT);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}superSuffix(){let localctx=new SuperSuffixContext(this,this._ctx,this.state);this.enterRule(localctx,242,JavaParser.RULE_superSuffix);var _la=0;// Token type
try{this.state=1744;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.LPAREN:this.enterOuterAlt(localctx,1);this.state=1735;this.arguments();break;case JavaParser.DOT:this.enterOuterAlt(localctx,2);this.state=1736;this.match(JavaParser.DOT);this.state=1738;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===JavaParser.LT){this.state=1737;this.typeArguments();}this.state=1740;this.identifier();this.state=1742;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,215,this._ctx);if(la_===1){this.state=1741;this.arguments();}break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}explicitGenericInvocationSuffix(){let localctx=new ExplicitGenericInvocationSuffixContext(this,this._ctx,this.state);this.enterRule(localctx,244,JavaParser.RULE_explicitGenericInvocationSuffix);try{this.state=1751;this._errHandler.sync(this);switch(this._input.LA(1)){case JavaParser.SUPER:this.enterOuterAlt(localctx,1);this.state=1746;this.match(JavaParser.SUPER);this.state=1747;this.superSuffix();break;case JavaParser.MODULE:case JavaParser.OPEN:case JavaParser.REQUIRES:case JavaParser.EXPORTS:case JavaParser.OPENS:case JavaParser.TO:case JavaParser.USES:case JavaParser.PROVIDES:case JavaParser.WITH:case JavaParser.TRANSITIVE:case JavaParser.VAR:case JavaParser.YIELD:case JavaParser.RECORD:case JavaParser.SEALED:case JavaParser.PERMITS:case JavaParser.IDENTIFIER:this.enterOuterAlt(localctx,2);this.state=1748;this.identifier();this.state=1749;this.arguments();break;default:throw new _antlr.default.error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}arguments(){let localctx=new ArgumentsContext(this,this._ctx,this.state);this.enterRule(localctx,246,JavaParser.RULE_arguments);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1753;this.match(JavaParser.LPAREN);this.state=1755;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<JavaParser.BOOLEAN|1<<JavaParser.BYTE|1<<JavaParser.CHAR|1<<JavaParser.DOUBLE|1<<JavaParser.FLOAT|1<<JavaParser.INT|1<<JavaParser.LONG|1<<JavaParser.NEW))!==0||(_la-37&~0x1f)==0&&(1<<_la-37&(1<<JavaParser.SHORT-37|1<<JavaParser.SUPER-37|1<<JavaParser.SWITCH-37|1<<JavaParser.THIS-37|1<<JavaParser.VOID-37|1<<JavaParser.MODULE-37|1<<JavaParser.OPEN-37|1<<JavaParser.REQUIRES-37|1<<JavaParser.EXPORTS-37|1<<JavaParser.OPENS-37|1<<JavaParser.TO-37|1<<JavaParser.USES-37|1<<JavaParser.PROVIDES-37|1<<JavaParser.WITH-37|1<<JavaParser.TRANSITIVE-37|1<<JavaParser.VAR-37|1<<JavaParser.YIELD-37|1<<JavaParser.RECORD-37|1<<JavaParser.SEALED-37|1<<JavaParser.PERMITS-37|1<<JavaParser.DECIMAL_LITERAL-37|1<<JavaParser.HEX_LITERAL-37))!==0||(_la-69&~0x1f)==0&&(1<<_la-69&(1<<JavaParser.OCT_LITERAL-69|1<<JavaParser.BINARY_LITERAL-69|1<<JavaParser.FLOAT_LITERAL-69|1<<JavaParser.HEX_FLOAT_LITERAL-69|1<<JavaParser.BOOL_LITERAL-69|1<<JavaParser.CHAR_LITERAL-69|1<<JavaParser.STRING_LITERAL-69|1<<JavaParser.TEXT_BLOCK-69|1<<JavaParser.NULL_LITERAL-69|1<<JavaParser.LPAREN-69|1<<JavaParser.LT-69|1<<JavaParser.BANG-69|1<<JavaParser.TILDE-69|1<<JavaParser.INC-69))!==0||(_la-101&~0x1f)==0&&(1<<_la-101&(1<<JavaParser.DEC-101|1<<JavaParser.ADD-101|1<<JavaParser.SUB-101|1<<JavaParser.AT-101|1<<JavaParser.IDENTIFIER-101))!==0){this.state=1754;this.expressionList();}this.state=1757;this.match(JavaParser.RPAREN);}catch(re){if(re instanceof _antlr.default.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}}exports.default=JavaParser;JavaParser.EOF=_antlr.default.Token.EOF;JavaParser.ABSTRACT=1;JavaParser.ASSERT=2;JavaParser.BOOLEAN=3;JavaParser.BREAK=4;JavaParser.BYTE=5;JavaParser.CASE=6;JavaParser.CATCH=7;JavaParser.CHAR=8;JavaParser.CLASS=9;JavaParser.CONST=10;JavaParser.CONTINUE=11;JavaParser.DEFAULT=12;JavaParser.DO=13;JavaParser.DOUBLE=14;JavaParser.ELSE=15;JavaParser.ENUM=16;JavaParser.EXTENDS=17;JavaParser.FINAL=18;JavaParser.FINALLY=19;JavaParser.FLOAT=20;JavaParser.FOR=21;JavaParser.IF=22;JavaParser.GOTO=23;JavaParser.IMPLEMENTS=24;JavaParser.IMPORT=25;JavaParser.INSTANCEOF=26;JavaParser.INT=27;JavaParser.INTERFACE=28;JavaParser.LONG=29;JavaParser.NATIVE=30;JavaParser.NEW=31;JavaParser.PACKAGE=32;JavaParser.PRIVATE=33;JavaParser.PROTECTED=34;JavaParser.PUBLIC=35;JavaParser.RETURN=36;JavaParser.SHORT=37;JavaParser.STATIC=38;JavaParser.STRICTFP=39;JavaParser.SUPER=40;JavaParser.SWITCH=41;JavaParser.SYNCHRONIZED=42;JavaParser.THIS=43;JavaParser.THROW=44;JavaParser.THROWS=45;JavaParser.TRANSIENT=46;JavaParser.TRY=47;JavaParser.VOID=48;JavaParser.VOLATILE=49;JavaParser.WHILE=50;JavaParser.MODULE=51;JavaParser.OPEN=52;JavaParser.REQUIRES=53;JavaParser.EXPORTS=54;JavaParser.OPENS=55;JavaParser.TO=56;JavaParser.USES=57;JavaParser.PROVIDES=58;JavaParser.WITH=59;JavaParser.TRANSITIVE=60;JavaParser.VAR=61;JavaParser.YIELD=62;JavaParser.RECORD=63;JavaParser.SEALED=64;JavaParser.PERMITS=65;JavaParser.NON_SEALED=66;JavaParser.DECIMAL_LITERAL=67;JavaParser.HEX_LITERAL=68;JavaParser.OCT_LITERAL=69;JavaParser.BINARY_LITERAL=70;JavaParser.FLOAT_LITERAL=71;JavaParser.HEX_FLOAT_LITERAL=72;JavaParser.BOOL_LITERAL=73;JavaParser.CHAR_LITERAL=74;JavaParser.STRING_LITERAL=75;JavaParser.TEXT_BLOCK=76;JavaParser.NULL_LITERAL=77;JavaParser.LPAREN=78;JavaParser.RPAREN=79;JavaParser.LBRACE=80;JavaParser.RBRACE=81;JavaParser.LBRACK=82;JavaParser.RBRACK=83;JavaParser.SEMI=84;JavaParser.COMMA=85;JavaParser.DOT=86;JavaParser.ASSIGN=87;JavaParser.GT=88;JavaParser.LT=89;JavaParser.BANG=90;JavaParser.TILDE=91;JavaParser.QUESTION=92;JavaParser.COLON=93;JavaParser.EQUAL=94;JavaParser.LE=95;JavaParser.GE=96;JavaParser.NOTEQUAL=97;JavaParser.AND=98;JavaParser.OR=99;JavaParser.INC=100;JavaParser.DEC=101;JavaParser.ADD=102;JavaParser.SUB=103;JavaParser.MUL=104;JavaParser.DIV=105;JavaParser.BITAND=106;JavaParser.BITOR=107;JavaParser.CARET=108;JavaParser.MOD=109;JavaParser.ADD_ASSIGN=110;JavaParser.SUB_ASSIGN=111;JavaParser.MUL_ASSIGN=112;JavaParser.DIV_ASSIGN=113;JavaParser.AND_ASSIGN=114;JavaParser.OR_ASSIGN=115;JavaParser.XOR_ASSIGN=116;JavaParser.MOD_ASSIGN=117;JavaParser.LSHIFT_ASSIGN=118;JavaParser.RSHIFT_ASSIGN=119;JavaParser.URSHIFT_ASSIGN=120;JavaParser.ARROW=121;JavaParser.COLONCOLON=122;JavaParser.AT=123;JavaParser.ELLIPSIS=124;JavaParser.WS=125;JavaParser.COMMENT=126;JavaParser.LINE_COMMENT=127;JavaParser.IDENTIFIER=128;JavaParser.RULE_compilationUnit=0;JavaParser.RULE_packageDeclaration=1;JavaParser.RULE_importDeclaration=2;JavaParser.RULE_typeDeclaration=3;JavaParser.RULE_modifier=4;JavaParser.RULE_classOrInterfaceModifier=5;JavaParser.RULE_variableModifier=6;JavaParser.RULE_classDeclaration=7;JavaParser.RULE_typeParameters=8;JavaParser.RULE_typeParameter=9;JavaParser.RULE_typeBound=10;JavaParser.RULE_enumDeclaration=11;JavaParser.RULE_enumConstants=12;JavaParser.RULE_enumConstant=13;JavaParser.RULE_enumBodyDeclarations=14;JavaParser.RULE_interfaceDeclaration=15;JavaParser.RULE_classBody=16;JavaParser.RULE_interfaceBody=17;JavaParser.RULE_classBodyDeclaration=18;JavaParser.RULE_memberDeclaration=19;JavaParser.RULE_methodDeclaration=20;JavaParser.RULE_methodBody=21;JavaParser.RULE_typeTypeOrVoid=22;JavaParser.RULE_genericMethodDeclaration=23;JavaParser.RULE_genericConstructorDeclaration=24;JavaParser.RULE_constructorDeclaration=25;JavaParser.RULE_fieldDeclaration=26;JavaParser.RULE_interfaceBodyDeclaration=27;JavaParser.RULE_interfaceMemberDeclaration=28;JavaParser.RULE_constDeclaration=29;JavaParser.RULE_constantDeclarator=30;JavaParser.RULE_interfaceMethodDeclaration=31;JavaParser.RULE_interfaceMethodModifier=32;JavaParser.RULE_genericInterfaceMethodDeclaration=33;JavaParser.RULE_interfaceCommonBodyDeclaration=34;JavaParser.RULE_variableDeclarators=35;JavaParser.RULE_variableDeclarator=36;JavaParser.RULE_variableDeclaratorId=37;JavaParser.RULE_variableInitializer=38;JavaParser.RULE_arrayInitializer=39;JavaParser.RULE_classOrInterfaceType=40;JavaParser.RULE_typeArgument=41;JavaParser.RULE_qualifiedNameList=42;JavaParser.RULE_formalParameters=43;JavaParser.RULE_receiverParameter=44;JavaParser.RULE_formalParameterList=45;JavaParser.RULE_formalParameter=46;JavaParser.RULE_lastFormalParameter=47;JavaParser.RULE_lambdaLVTIList=48;JavaParser.RULE_lambdaLVTIParameter=49;JavaParser.RULE_qualifiedName=50;JavaParser.RULE_literal=51;JavaParser.RULE_integerLiteral=52;JavaParser.RULE_floatLiteral=53;JavaParser.RULE_altAnnotationQualifiedName=54;JavaParser.RULE_annotation=55;JavaParser.RULE_elementValuePairs=56;JavaParser.RULE_elementValuePair=57;JavaParser.RULE_elementValue=58;JavaParser.RULE_elementValueArrayInitializer=59;JavaParser.RULE_annotationTypeDeclaration=60;JavaParser.RULE_annotationTypeBody=61;JavaParser.RULE_annotationTypeElementDeclaration=62;JavaParser.RULE_annotationTypeElementRest=63;JavaParser.RULE_annotationMethodOrConstantRest=64;JavaParser.RULE_annotationMethodRest=65;JavaParser.RULE_annotationConstantRest=66;JavaParser.RULE_defaultValue=67;JavaParser.RULE_moduleDeclaration=68;JavaParser.RULE_moduleBody=69;JavaParser.RULE_moduleDirective=70;JavaParser.RULE_requiresModifier=71;JavaParser.RULE_recordDeclaration=72;JavaParser.RULE_recordHeader=73;JavaParser.RULE_recordComponentList=74;JavaParser.RULE_recordComponent=75;JavaParser.RULE_recordBody=76;JavaParser.RULE_block=77;JavaParser.RULE_blockStatement=78;JavaParser.RULE_localVariableDeclaration=79;JavaParser.RULE_identifier=80;JavaParser.RULE_localTypeDeclaration=81;JavaParser.RULE_statement=82;JavaParser.RULE_catchClause=83;JavaParser.RULE_catchType=84;JavaParser.RULE_finallyBlock=85;JavaParser.RULE_resourceSpecification=86;JavaParser.RULE_resources=87;JavaParser.RULE_resource=88;JavaParser.RULE_switchBlockStatementGroup=89;JavaParser.RULE_switchLabel=90;JavaParser.RULE_forControl=91;JavaParser.RULE_forInit=92;JavaParser.RULE_enhancedForControl=93;JavaParser.RULE_parExpression=94;JavaParser.RULE_expressionList=95;JavaParser.RULE_methodCall=96;JavaParser.RULE_expression=97;JavaParser.RULE_pattern=98;JavaParser.RULE_lambdaExpression=99;JavaParser.RULE_lambdaParameters=100;JavaParser.RULE_lambdaBody=101;JavaParser.RULE_primary=102;JavaParser.RULE_switchExpression=103;JavaParser.RULE_switchLabeledRule=104;JavaParser.RULE_guardedPattern=105;JavaParser.RULE_switchRuleOutcome=106;JavaParser.RULE_classType=107;JavaParser.RULE_creator=108;JavaParser.RULE_createdName=109;JavaParser.RULE_innerCreator=110;JavaParser.RULE_arrayCreatorRest=111;JavaParser.RULE_classCreatorRest=112;JavaParser.RULE_explicitGenericInvocation=113;JavaParser.RULE_typeArgumentsOrDiamond=114;JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond=115;JavaParser.RULE_nonWildcardTypeArguments=116;JavaParser.RULE_typeList=117;JavaParser.RULE_typeType=118;JavaParser.RULE_primitiveType=119;JavaParser.RULE_typeArguments=120;JavaParser.RULE_superSuffix=121;JavaParser.RULE_explicitGenericInvocationSuffix=122;JavaParser.RULE_arguments=123;class CompilationUnitContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_compilationUnit;}packageDeclaration(){return this.getTypedRuleContext(PackageDeclarationContext,0);}importDeclaration=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ImportDeclarationContext);}else{return this.getTypedRuleContext(ImportDeclarationContext,i);}};typeDeclaration=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TypeDeclarationContext);}else{return this.getTypedRuleContext(TypeDeclarationContext,i);}};moduleDeclaration(){return this.getTypedRuleContext(ModuleDeclarationContext,0);}EOF(){return this.getToken(JavaParser.EOF,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterCompilationUnit(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitCompilationUnit(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitCompilationUnit(this);}else{return visitor.visitChildren(this);}}}class PackageDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_packageDeclaration;}PACKAGE(){return this.getToken(JavaParser.PACKAGE,0);}qualifiedName(){return this.getTypedRuleContext(QualifiedNameContext,0);}SEMI(){return this.getToken(JavaParser.SEMI,0);}annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterPackageDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitPackageDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitPackageDeclaration(this);}else{return visitor.visitChildren(this);}}}class ImportDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_importDeclaration;}IMPORT(){return this.getToken(JavaParser.IMPORT,0);}qualifiedName(){return this.getTypedRuleContext(QualifiedNameContext,0);}SEMI(){return this.getToken(JavaParser.SEMI,0);}STATIC(){return this.getToken(JavaParser.STATIC,0);}DOT(){return this.getToken(JavaParser.DOT,0);}MUL(){return this.getToken(JavaParser.MUL,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterImportDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitImportDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitImportDeclaration(this);}else{return visitor.visitChildren(this);}}}class TypeDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_typeDeclaration;}classDeclaration(){return this.getTypedRuleContext(ClassDeclarationContext,0);}enumDeclaration(){return this.getTypedRuleContext(EnumDeclarationContext,0);}interfaceDeclaration(){return this.getTypedRuleContext(InterfaceDeclarationContext,0);}annotationTypeDeclaration(){return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);}recordDeclaration(){return this.getTypedRuleContext(RecordDeclarationContext,0);}classOrInterfaceModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);}else{return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);}};SEMI(){return this.getToken(JavaParser.SEMI,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterTypeDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitTypeDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitTypeDeclaration(this);}else{return visitor.visitChildren(this);}}}class ModifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_modifier;}classOrInterfaceModifier(){return this.getTypedRuleContext(ClassOrInterfaceModifierContext,0);}NATIVE(){return this.getToken(JavaParser.NATIVE,0);}SYNCHRONIZED(){return this.getToken(JavaParser.SYNCHRONIZED,0);}TRANSIENT(){return this.getToken(JavaParser.TRANSIENT,0);}VOLATILE(){return this.getToken(JavaParser.VOLATILE,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterModifier(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitModifier(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitModifier(this);}else{return visitor.visitChildren(this);}}}class ClassOrInterfaceModifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_classOrInterfaceModifier;}annotation(){return this.getTypedRuleContext(AnnotationContext,0);}PUBLIC(){return this.getToken(JavaParser.PUBLIC,0);}PROTECTED(){return this.getToken(JavaParser.PROTECTED,0);}PRIVATE(){return this.getToken(JavaParser.PRIVATE,0);}STATIC(){return this.getToken(JavaParser.STATIC,0);}ABSTRACT(){return this.getToken(JavaParser.ABSTRACT,0);}FINAL(){return this.getToken(JavaParser.FINAL,0);}STRICTFP(){return this.getToken(JavaParser.STRICTFP,0);}SEALED(){return this.getToken(JavaParser.SEALED,0);}NON_SEALED(){return this.getToken(JavaParser.NON_SEALED,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterClassOrInterfaceModifier(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitClassOrInterfaceModifier(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitClassOrInterfaceModifier(this);}else{return visitor.visitChildren(this);}}}class VariableModifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_variableModifier;}FINAL(){return this.getToken(JavaParser.FINAL,0);}annotation(){return this.getTypedRuleContext(AnnotationContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterVariableModifier(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitVariableModifier(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitVariableModifier(this);}else{return visitor.visitChildren(this);}}}class ClassDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_classDeclaration;}CLASS(){return this.getToken(JavaParser.CLASS,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}classBody(){return this.getTypedRuleContext(ClassBodyContext,0);}typeParameters(){return this.getTypedRuleContext(TypeParametersContext,0);}EXTENDS(){return this.getToken(JavaParser.EXTENDS,0);}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}IMPLEMENTS(){return this.getToken(JavaParser.IMPLEMENTS,0);}typeList=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TypeListContext);}else{return this.getTypedRuleContext(TypeListContext,i);}};PERMITS(){return this.getToken(JavaParser.PERMITS,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterClassDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitClassDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitClassDeclaration(this);}else{return visitor.visitChildren(this);}}}class TypeParametersContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_typeParameters;}LT(){return this.getToken(JavaParser.LT,0);}typeParameter=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TypeParameterContext);}else{return this.getTypedRuleContext(TypeParameterContext,i);}};GT(){return this.getToken(JavaParser.GT,0);}COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterTypeParameters(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitTypeParameters(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitTypeParameters(this);}else{return visitor.visitChildren(this);}}}class TypeParameterContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_typeParameter;}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};EXTENDS(){return this.getToken(JavaParser.EXTENDS,0);}typeBound(){return this.getTypedRuleContext(TypeBoundContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterTypeParameter(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitTypeParameter(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitTypeParameter(this);}else{return visitor.visitChildren(this);}}}class TypeBoundContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_typeBound;}typeType=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TypeTypeContext);}else{return this.getTypedRuleContext(TypeTypeContext,i);}};BITAND=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.BITAND);}else{return this.getToken(JavaParser.BITAND,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterTypeBound(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitTypeBound(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitTypeBound(this);}else{return visitor.visitChildren(this);}}}class EnumDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_enumDeclaration;}ENUM(){return this.getToken(JavaParser.ENUM,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}IMPLEMENTS(){return this.getToken(JavaParser.IMPLEMENTS,0);}typeList(){return this.getTypedRuleContext(TypeListContext,0);}enumConstants(){return this.getTypedRuleContext(EnumConstantsContext,0);}COMMA(){return this.getToken(JavaParser.COMMA,0);}enumBodyDeclarations(){return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterEnumDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitEnumDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitEnumDeclaration(this);}else{return visitor.visitChildren(this);}}}class EnumConstantsContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_enumConstants;}enumConstant=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(EnumConstantContext);}else{return this.getTypedRuleContext(EnumConstantContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterEnumConstants(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitEnumConstants(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitEnumConstants(this);}else{return visitor.visitChildren(this);}}}class EnumConstantContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_enumConstant;}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};arguments(){return this.getTypedRuleContext(ArgumentsContext,0);}classBody(){return this.getTypedRuleContext(ClassBodyContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterEnumConstant(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitEnumConstant(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitEnumConstant(this);}else{return visitor.visitChildren(this);}}}class EnumBodyDeclarationsContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_enumBodyDeclarations;}SEMI(){return this.getToken(JavaParser.SEMI,0);}classBodyDeclaration=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClassBodyDeclarationContext);}else{return this.getTypedRuleContext(ClassBodyDeclarationContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterEnumBodyDeclarations(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitEnumBodyDeclarations(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitEnumBodyDeclarations(this);}else{return visitor.visitChildren(this);}}}class InterfaceDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_interfaceDeclaration;}INTERFACE(){return this.getToken(JavaParser.INTERFACE,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}interfaceBody(){return this.getTypedRuleContext(InterfaceBodyContext,0);}typeParameters(){return this.getTypedRuleContext(TypeParametersContext,0);}EXTENDS(){return this.getToken(JavaParser.EXTENDS,0);}typeList(){return this.getTypedRuleContext(TypeListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterInterfaceDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitInterfaceDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitInterfaceDeclaration(this);}else{return visitor.visitChildren(this);}}}class ClassBodyContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_classBody;}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}classBodyDeclaration=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClassBodyDeclarationContext);}else{return this.getTypedRuleContext(ClassBodyDeclarationContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterClassBody(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitClassBody(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitClassBody(this);}else{return visitor.visitChildren(this);}}}class InterfaceBodyContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_interfaceBody;}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}interfaceBodyDeclaration=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);}else{return this.getTypedRuleContext(InterfaceBodyDeclarationContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterInterfaceBody(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitInterfaceBody(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitInterfaceBody(this);}else{return visitor.visitChildren(this);}}}class ClassBodyDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_classBodyDeclaration;}SEMI(){return this.getToken(JavaParser.SEMI,0);}block(){return this.getTypedRuleContext(BlockContext,0);}STATIC(){return this.getToken(JavaParser.STATIC,0);}memberDeclaration(){return this.getTypedRuleContext(MemberDeclarationContext,0);}modifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ModifierContext);}else{return this.getTypedRuleContext(ModifierContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterClassBodyDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitClassBodyDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitClassBodyDeclaration(this);}else{return visitor.visitChildren(this);}}}class MemberDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_memberDeclaration;}methodDeclaration(){return this.getTypedRuleContext(MethodDeclarationContext,0);}genericMethodDeclaration(){return this.getTypedRuleContext(GenericMethodDeclarationContext,0);}fieldDeclaration(){return this.getTypedRuleContext(FieldDeclarationContext,0);}constructorDeclaration(){return this.getTypedRuleContext(ConstructorDeclarationContext,0);}genericConstructorDeclaration(){return this.getTypedRuleContext(GenericConstructorDeclarationContext,0);}interfaceDeclaration(){return this.getTypedRuleContext(InterfaceDeclarationContext,0);}annotationTypeDeclaration(){return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);}classDeclaration(){return this.getTypedRuleContext(ClassDeclarationContext,0);}enumDeclaration(){return this.getTypedRuleContext(EnumDeclarationContext,0);}recordDeclaration(){return this.getTypedRuleContext(RecordDeclarationContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterMemberDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitMemberDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitMemberDeclaration(this);}else{return visitor.visitChildren(this);}}}class MethodDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_methodDeclaration;}typeTypeOrVoid(){return this.getTypedRuleContext(TypeTypeOrVoidContext,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}formalParameters(){return this.getTypedRuleContext(FormalParametersContext,0);}methodBody(){return this.getTypedRuleContext(MethodBodyContext,0);}LBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.LBRACK);}else{return this.getToken(JavaParser.LBRACK,i);}};RBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.RBRACK);}else{return this.getToken(JavaParser.RBRACK,i);}};THROWS(){return this.getToken(JavaParser.THROWS,0);}qualifiedNameList(){return this.getTypedRuleContext(QualifiedNameListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterMethodDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitMethodDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitMethodDeclaration(this);}else{return visitor.visitChildren(this);}}}class MethodBodyContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_methodBody;}block(){return this.getTypedRuleContext(BlockContext,0);}SEMI(){return this.getToken(JavaParser.SEMI,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterMethodBody(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitMethodBody(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitMethodBody(this);}else{return visitor.visitChildren(this);}}}class TypeTypeOrVoidContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_typeTypeOrVoid;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}VOID(){return this.getToken(JavaParser.VOID,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterTypeTypeOrVoid(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitTypeTypeOrVoid(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitTypeTypeOrVoid(this);}else{return visitor.visitChildren(this);}}}class GenericMethodDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_genericMethodDeclaration;}typeParameters(){return this.getTypedRuleContext(TypeParametersContext,0);}methodDeclaration(){return this.getTypedRuleContext(MethodDeclarationContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterGenericMethodDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitGenericMethodDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitGenericMethodDeclaration(this);}else{return visitor.visitChildren(this);}}}class GenericConstructorDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_genericConstructorDeclaration;}typeParameters(){return this.getTypedRuleContext(TypeParametersContext,0);}constructorDeclaration(){return this.getTypedRuleContext(ConstructorDeclarationContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterGenericConstructorDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitGenericConstructorDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitGenericConstructorDeclaration(this);}else{return visitor.visitChildren(this);}}}class ConstructorDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_constructorDeclaration;this.constructorBody=null;// BlockContext
}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}formalParameters(){return this.getTypedRuleContext(FormalParametersContext,0);}block(){return this.getTypedRuleContext(BlockContext,0);}THROWS(){return this.getToken(JavaParser.THROWS,0);}qualifiedNameList(){return this.getTypedRuleContext(QualifiedNameListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterConstructorDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitConstructorDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitConstructorDeclaration(this);}else{return visitor.visitChildren(this);}}}class FieldDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_fieldDeclaration;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}variableDeclarators(){return this.getTypedRuleContext(VariableDeclaratorsContext,0);}SEMI(){return this.getToken(JavaParser.SEMI,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterFieldDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitFieldDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitFieldDeclaration(this);}else{return visitor.visitChildren(this);}}}class InterfaceBodyDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_interfaceBodyDeclaration;}interfaceMemberDeclaration(){return this.getTypedRuleContext(InterfaceMemberDeclarationContext,0);}modifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ModifierContext);}else{return this.getTypedRuleContext(ModifierContext,i);}};SEMI(){return this.getToken(JavaParser.SEMI,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterInterfaceBodyDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitInterfaceBodyDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitInterfaceBodyDeclaration(this);}else{return visitor.visitChildren(this);}}}class InterfaceMemberDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_interfaceMemberDeclaration;}constDeclaration(){return this.getTypedRuleContext(ConstDeclarationContext,0);}interfaceMethodDeclaration(){return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);}genericInterfaceMethodDeclaration(){return this.getTypedRuleContext(GenericInterfaceMethodDeclarationContext,0);}interfaceDeclaration(){return this.getTypedRuleContext(InterfaceDeclarationContext,0);}annotationTypeDeclaration(){return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);}classDeclaration(){return this.getTypedRuleContext(ClassDeclarationContext,0);}enumDeclaration(){return this.getTypedRuleContext(EnumDeclarationContext,0);}recordDeclaration(){return this.getTypedRuleContext(RecordDeclarationContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterInterfaceMemberDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitInterfaceMemberDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitInterfaceMemberDeclaration(this);}else{return visitor.visitChildren(this);}}}class ConstDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_constDeclaration;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}constantDeclarator=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ConstantDeclaratorContext);}else{return this.getTypedRuleContext(ConstantDeclaratorContext,i);}};SEMI(){return this.getToken(JavaParser.SEMI,0);}COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterConstDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitConstDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitConstDeclaration(this);}else{return visitor.visitChildren(this);}}}class ConstantDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_constantDeclarator;}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}ASSIGN(){return this.getToken(JavaParser.ASSIGN,0);}variableInitializer(){return this.getTypedRuleContext(VariableInitializerContext,0);}LBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.LBRACK);}else{return this.getToken(JavaParser.LBRACK,i);}};RBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.RBRACK);}else{return this.getToken(JavaParser.RBRACK,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterConstantDeclarator(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitConstantDeclarator(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitConstantDeclarator(this);}else{return visitor.visitChildren(this);}}}class InterfaceMethodDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_interfaceMethodDeclaration;}interfaceCommonBodyDeclaration(){return this.getTypedRuleContext(InterfaceCommonBodyDeclarationContext,0);}interfaceMethodModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(InterfaceMethodModifierContext);}else{return this.getTypedRuleContext(InterfaceMethodModifierContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterInterfaceMethodDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitInterfaceMethodDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitInterfaceMethodDeclaration(this);}else{return visitor.visitChildren(this);}}}class InterfaceMethodModifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_interfaceMethodModifier;}annotation(){return this.getTypedRuleContext(AnnotationContext,0);}PUBLIC(){return this.getToken(JavaParser.PUBLIC,0);}ABSTRACT(){return this.getToken(JavaParser.ABSTRACT,0);}DEFAULT(){return this.getToken(JavaParser.DEFAULT,0);}STATIC(){return this.getToken(JavaParser.STATIC,0);}STRICTFP(){return this.getToken(JavaParser.STRICTFP,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterInterfaceMethodModifier(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitInterfaceMethodModifier(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitInterfaceMethodModifier(this);}else{return visitor.visitChildren(this);}}}class GenericInterfaceMethodDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_genericInterfaceMethodDeclaration;}typeParameters(){return this.getTypedRuleContext(TypeParametersContext,0);}interfaceCommonBodyDeclaration(){return this.getTypedRuleContext(InterfaceCommonBodyDeclarationContext,0);}interfaceMethodModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(InterfaceMethodModifierContext);}else{return this.getTypedRuleContext(InterfaceMethodModifierContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterGenericInterfaceMethodDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitGenericInterfaceMethodDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitGenericInterfaceMethodDeclaration(this);}else{return visitor.visitChildren(this);}}}class InterfaceCommonBodyDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_interfaceCommonBodyDeclaration;}typeTypeOrVoid(){return this.getTypedRuleContext(TypeTypeOrVoidContext,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}formalParameters(){return this.getTypedRuleContext(FormalParametersContext,0);}methodBody(){return this.getTypedRuleContext(MethodBodyContext,0);}annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};LBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.LBRACK);}else{return this.getToken(JavaParser.LBRACK,i);}};RBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.RBRACK);}else{return this.getToken(JavaParser.RBRACK,i);}};THROWS(){return this.getToken(JavaParser.THROWS,0);}qualifiedNameList(){return this.getTypedRuleContext(QualifiedNameListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterInterfaceCommonBodyDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitInterfaceCommonBodyDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitInterfaceCommonBodyDeclaration(this);}else{return visitor.visitChildren(this);}}}class VariableDeclaratorsContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_variableDeclarators;}variableDeclarator=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableDeclaratorContext);}else{return this.getTypedRuleContext(VariableDeclaratorContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterVariableDeclarators(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitVariableDeclarators(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitVariableDeclarators(this);}else{return visitor.visitChildren(this);}}}class VariableDeclaratorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_variableDeclarator;}variableDeclaratorId(){return this.getTypedRuleContext(VariableDeclaratorIdContext,0);}ASSIGN(){return this.getToken(JavaParser.ASSIGN,0);}variableInitializer(){return this.getTypedRuleContext(VariableInitializerContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterVariableDeclarator(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitVariableDeclarator(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitVariableDeclarator(this);}else{return visitor.visitChildren(this);}}}class VariableDeclaratorIdContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_variableDeclaratorId;}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}LBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.LBRACK);}else{return this.getToken(JavaParser.LBRACK,i);}};RBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.RBRACK);}else{return this.getToken(JavaParser.RBRACK,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterVariableDeclaratorId(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitVariableDeclaratorId(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitVariableDeclaratorId(this);}else{return visitor.visitChildren(this);}}}class VariableInitializerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_variableInitializer;}arrayInitializer(){return this.getTypedRuleContext(ArrayInitializerContext,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterVariableInitializer(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitVariableInitializer(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitVariableInitializer(this);}else{return visitor.visitChildren(this);}}}class ArrayInitializerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_arrayInitializer;}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}variableInitializer=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableInitializerContext);}else{return this.getTypedRuleContext(VariableInitializerContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterArrayInitializer(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitArrayInitializer(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitArrayInitializer(this);}else{return visitor.visitChildren(this);}}}class ClassOrInterfaceTypeContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_classOrInterfaceType;}identifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IdentifierContext);}else{return this.getTypedRuleContext(IdentifierContext,i);}};typeArguments=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TypeArgumentsContext);}else{return this.getTypedRuleContext(TypeArgumentsContext,i);}};DOT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.DOT);}else{return this.getToken(JavaParser.DOT,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterClassOrInterfaceType(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitClassOrInterfaceType(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitClassOrInterfaceType(this);}else{return visitor.visitChildren(this);}}}class TypeArgumentContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_typeArgument;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}QUESTION(){return this.getToken(JavaParser.QUESTION,0);}annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};EXTENDS(){return this.getToken(JavaParser.EXTENDS,0);}SUPER(){return this.getToken(JavaParser.SUPER,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterTypeArgument(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitTypeArgument(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitTypeArgument(this);}else{return visitor.visitChildren(this);}}}class QualifiedNameListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_qualifiedNameList;}qualifiedName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(QualifiedNameContext);}else{return this.getTypedRuleContext(QualifiedNameContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterQualifiedNameList(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitQualifiedNameList(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitQualifiedNameList(this);}else{return visitor.visitChildren(this);}}}class FormalParametersContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_formalParameters;}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}receiverParameter(){return this.getTypedRuleContext(ReceiverParameterContext,0);}COMMA(){return this.getToken(JavaParser.COMMA,0);}formalParameterList(){return this.getTypedRuleContext(FormalParameterListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterFormalParameters(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitFormalParameters(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitFormalParameters(this);}else{return visitor.visitChildren(this);}}}class ReceiverParameterContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_receiverParameter;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}THIS(){return this.getToken(JavaParser.THIS,0);}identifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IdentifierContext);}else{return this.getTypedRuleContext(IdentifierContext,i);}};DOT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.DOT);}else{return this.getToken(JavaParser.DOT,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterReceiverParameter(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitReceiverParameter(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitReceiverParameter(this);}else{return visitor.visitChildren(this);}}}class FormalParameterListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_formalParameterList;}formalParameter=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(FormalParameterContext);}else{return this.getTypedRuleContext(FormalParameterContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};lastFormalParameter(){return this.getTypedRuleContext(LastFormalParameterContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterFormalParameterList(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitFormalParameterList(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitFormalParameterList(this);}else{return visitor.visitChildren(this);}}}class FormalParameterContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_formalParameter;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}variableDeclaratorId(){return this.getTypedRuleContext(VariableDeclaratorIdContext,0);}variableModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableModifierContext);}else{return this.getTypedRuleContext(VariableModifierContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterFormalParameter(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitFormalParameter(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitFormalParameter(this);}else{return visitor.visitChildren(this);}}}class LastFormalParameterContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_lastFormalParameter;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}ELLIPSIS(){return this.getToken(JavaParser.ELLIPSIS,0);}variableDeclaratorId(){return this.getTypedRuleContext(VariableDeclaratorIdContext,0);}variableModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableModifierContext);}else{return this.getTypedRuleContext(VariableModifierContext,i);}};annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterLastFormalParameter(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitLastFormalParameter(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitLastFormalParameter(this);}else{return visitor.visitChildren(this);}}}class LambdaLVTIListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_lambdaLVTIList;}lambdaLVTIParameter=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(LambdaLVTIParameterContext);}else{return this.getTypedRuleContext(LambdaLVTIParameterContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterLambdaLVTIList(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitLambdaLVTIList(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitLambdaLVTIList(this);}else{return visitor.visitChildren(this);}}}class LambdaLVTIParameterContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_lambdaLVTIParameter;}VAR(){return this.getToken(JavaParser.VAR,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}variableModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableModifierContext);}else{return this.getTypedRuleContext(VariableModifierContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterLambdaLVTIParameter(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitLambdaLVTIParameter(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitLambdaLVTIParameter(this);}else{return visitor.visitChildren(this);}}}class QualifiedNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_qualifiedName;}identifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IdentifierContext);}else{return this.getTypedRuleContext(IdentifierContext,i);}};DOT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.DOT);}else{return this.getToken(JavaParser.DOT,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterQualifiedName(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitQualifiedName(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitQualifiedName(this);}else{return visitor.visitChildren(this);}}}class LiteralContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_literal;}integerLiteral(){return this.getTypedRuleContext(IntegerLiteralContext,0);}floatLiteral(){return this.getTypedRuleContext(FloatLiteralContext,0);}CHAR_LITERAL(){return this.getToken(JavaParser.CHAR_LITERAL,0);}STRING_LITERAL(){return this.getToken(JavaParser.STRING_LITERAL,0);}BOOL_LITERAL(){return this.getToken(JavaParser.BOOL_LITERAL,0);}NULL_LITERAL(){return this.getToken(JavaParser.NULL_LITERAL,0);}TEXT_BLOCK(){return this.getToken(JavaParser.TEXT_BLOCK,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterLiteral(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitLiteral(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitLiteral(this);}else{return visitor.visitChildren(this);}}}class IntegerLiteralContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_integerLiteral;}DECIMAL_LITERAL(){return this.getToken(JavaParser.DECIMAL_LITERAL,0);}HEX_LITERAL(){return this.getToken(JavaParser.HEX_LITERAL,0);}OCT_LITERAL(){return this.getToken(JavaParser.OCT_LITERAL,0);}BINARY_LITERAL(){return this.getToken(JavaParser.BINARY_LITERAL,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterIntegerLiteral(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitIntegerLiteral(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitIntegerLiteral(this);}else{return visitor.visitChildren(this);}}}class FloatLiteralContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_floatLiteral;}FLOAT_LITERAL(){return this.getToken(JavaParser.FLOAT_LITERAL,0);}HEX_FLOAT_LITERAL(){return this.getToken(JavaParser.HEX_FLOAT_LITERAL,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterFloatLiteral(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitFloatLiteral(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitFloatLiteral(this);}else{return visitor.visitChildren(this);}}}class AltAnnotationQualifiedNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_altAnnotationQualifiedName;}AT(){return this.getToken(JavaParser.AT,0);}identifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IdentifierContext);}else{return this.getTypedRuleContext(IdentifierContext,i);}};DOT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.DOT);}else{return this.getToken(JavaParser.DOT,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterAltAnnotationQualifiedName(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitAltAnnotationQualifiedName(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitAltAnnotationQualifiedName(this);}else{return visitor.visitChildren(this);}}}class AnnotationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_annotation;}AT(){return this.getToken(JavaParser.AT,0);}qualifiedName(){return this.getTypedRuleContext(QualifiedNameContext,0);}altAnnotationQualifiedName(){return this.getTypedRuleContext(AltAnnotationQualifiedNameContext,0);}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}elementValuePairs(){return this.getTypedRuleContext(ElementValuePairsContext,0);}elementValue(){return this.getTypedRuleContext(ElementValueContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterAnnotation(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitAnnotation(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitAnnotation(this);}else{return visitor.visitChildren(this);}}}class ElementValuePairsContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_elementValuePairs;}elementValuePair=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ElementValuePairContext);}else{return this.getTypedRuleContext(ElementValuePairContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterElementValuePairs(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitElementValuePairs(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitElementValuePairs(this);}else{return visitor.visitChildren(this);}}}class ElementValuePairContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_elementValuePair;}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}ASSIGN(){return this.getToken(JavaParser.ASSIGN,0);}elementValue(){return this.getTypedRuleContext(ElementValueContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterElementValuePair(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitElementValuePair(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitElementValuePair(this);}else{return visitor.visitChildren(this);}}}class ElementValueContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_elementValue;}expression(){return this.getTypedRuleContext(ExpressionContext,0);}annotation(){return this.getTypedRuleContext(AnnotationContext,0);}elementValueArrayInitializer(){return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterElementValue(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitElementValue(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitElementValue(this);}else{return visitor.visitChildren(this);}}}class ElementValueArrayInitializerContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_elementValueArrayInitializer;}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}elementValue=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ElementValueContext);}else{return this.getTypedRuleContext(ElementValueContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterElementValueArrayInitializer(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitElementValueArrayInitializer(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitElementValueArrayInitializer(this);}else{return visitor.visitChildren(this);}}}class AnnotationTypeDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_annotationTypeDeclaration;}AT(){return this.getToken(JavaParser.AT,0);}INTERFACE(){return this.getToken(JavaParser.INTERFACE,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}annotationTypeBody(){return this.getTypedRuleContext(AnnotationTypeBodyContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterAnnotationTypeDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitAnnotationTypeDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitAnnotationTypeDeclaration(this);}else{return visitor.visitChildren(this);}}}class AnnotationTypeBodyContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_annotationTypeBody;}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}annotationTypeElementDeclaration=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationTypeElementDeclarationContext);}else{return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterAnnotationTypeBody(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitAnnotationTypeBody(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitAnnotationTypeBody(this);}else{return visitor.visitChildren(this);}}}class AnnotationTypeElementDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_annotationTypeElementDeclaration;}annotationTypeElementRest(){return this.getTypedRuleContext(AnnotationTypeElementRestContext,0);}modifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ModifierContext);}else{return this.getTypedRuleContext(ModifierContext,i);}};SEMI(){return this.getToken(JavaParser.SEMI,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterAnnotationTypeElementDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitAnnotationTypeElementDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitAnnotationTypeElementDeclaration(this);}else{return visitor.visitChildren(this);}}}class AnnotationTypeElementRestContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_annotationTypeElementRest;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}annotationMethodOrConstantRest(){return this.getTypedRuleContext(AnnotationMethodOrConstantRestContext,0);}SEMI(){return this.getToken(JavaParser.SEMI,0);}classDeclaration(){return this.getTypedRuleContext(ClassDeclarationContext,0);}interfaceDeclaration(){return this.getTypedRuleContext(InterfaceDeclarationContext,0);}enumDeclaration(){return this.getTypedRuleContext(EnumDeclarationContext,0);}annotationTypeDeclaration(){return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);}recordDeclaration(){return this.getTypedRuleContext(RecordDeclarationContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterAnnotationTypeElementRest(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitAnnotationTypeElementRest(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitAnnotationTypeElementRest(this);}else{return visitor.visitChildren(this);}}}class AnnotationMethodOrConstantRestContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_annotationMethodOrConstantRest;}annotationMethodRest(){return this.getTypedRuleContext(AnnotationMethodRestContext,0);}annotationConstantRest(){return this.getTypedRuleContext(AnnotationConstantRestContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterAnnotationMethodOrConstantRest(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitAnnotationMethodOrConstantRest(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitAnnotationMethodOrConstantRest(this);}else{return visitor.visitChildren(this);}}}class AnnotationMethodRestContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_annotationMethodRest;}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}defaultValue(){return this.getTypedRuleContext(DefaultValueContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterAnnotationMethodRest(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitAnnotationMethodRest(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitAnnotationMethodRest(this);}else{return visitor.visitChildren(this);}}}class AnnotationConstantRestContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_annotationConstantRest;}variableDeclarators(){return this.getTypedRuleContext(VariableDeclaratorsContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterAnnotationConstantRest(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitAnnotationConstantRest(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitAnnotationConstantRest(this);}else{return visitor.visitChildren(this);}}}class DefaultValueContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_defaultValue;}DEFAULT(){return this.getToken(JavaParser.DEFAULT,0);}elementValue(){return this.getTypedRuleContext(ElementValueContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterDefaultValue(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitDefaultValue(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitDefaultValue(this);}else{return visitor.visitChildren(this);}}}class ModuleDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_moduleDeclaration;}MODULE(){return this.getToken(JavaParser.MODULE,0);}qualifiedName(){return this.getTypedRuleContext(QualifiedNameContext,0);}moduleBody(){return this.getTypedRuleContext(ModuleBodyContext,0);}OPEN(){return this.getToken(JavaParser.OPEN,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterModuleDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitModuleDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitModuleDeclaration(this);}else{return visitor.visitChildren(this);}}}class ModuleBodyContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_moduleBody;}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}moduleDirective=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ModuleDirectiveContext);}else{return this.getTypedRuleContext(ModuleDirectiveContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterModuleBody(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitModuleBody(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitModuleBody(this);}else{return visitor.visitChildren(this);}}}class ModuleDirectiveContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_moduleDirective;}REQUIRES(){return this.getToken(JavaParser.REQUIRES,0);}qualifiedName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(QualifiedNameContext);}else{return this.getTypedRuleContext(QualifiedNameContext,i);}};SEMI(){return this.getToken(JavaParser.SEMI,0);}requiresModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RequiresModifierContext);}else{return this.getTypedRuleContext(RequiresModifierContext,i);}};EXPORTS(){return this.getToken(JavaParser.EXPORTS,0);}TO(){return this.getToken(JavaParser.TO,0);}OPENS(){return this.getToken(JavaParser.OPENS,0);}USES(){return this.getToken(JavaParser.USES,0);}PROVIDES(){return this.getToken(JavaParser.PROVIDES,0);}WITH(){return this.getToken(JavaParser.WITH,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterModuleDirective(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitModuleDirective(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitModuleDirective(this);}else{return visitor.visitChildren(this);}}}class RequiresModifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_requiresModifier;}TRANSITIVE(){return this.getToken(JavaParser.TRANSITIVE,0);}STATIC(){return this.getToken(JavaParser.STATIC,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterRequiresModifier(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitRequiresModifier(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitRequiresModifier(this);}else{return visitor.visitChildren(this);}}}class RecordDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_recordDeclaration;}RECORD(){return this.getToken(JavaParser.RECORD,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}recordHeader(){return this.getTypedRuleContext(RecordHeaderContext,0);}recordBody(){return this.getTypedRuleContext(RecordBodyContext,0);}typeParameters(){return this.getTypedRuleContext(TypeParametersContext,0);}IMPLEMENTS(){return this.getToken(JavaParser.IMPLEMENTS,0);}typeList(){return this.getTypedRuleContext(TypeListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterRecordDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitRecordDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitRecordDeclaration(this);}else{return visitor.visitChildren(this);}}}class RecordHeaderContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_recordHeader;}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}recordComponentList(){return this.getTypedRuleContext(RecordComponentListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterRecordHeader(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitRecordHeader(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitRecordHeader(this);}else{return visitor.visitChildren(this);}}}class RecordComponentListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_recordComponentList;}recordComponent=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RecordComponentContext);}else{return this.getTypedRuleContext(RecordComponentContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterRecordComponentList(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitRecordComponentList(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitRecordComponentList(this);}else{return visitor.visitChildren(this);}}}class RecordComponentContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_recordComponent;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterRecordComponent(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitRecordComponent(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitRecordComponent(this);}else{return visitor.visitChildren(this);}}}class RecordBodyContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_recordBody;}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}classBodyDeclaration=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClassBodyDeclarationContext);}else{return this.getTypedRuleContext(ClassBodyDeclarationContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterRecordBody(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitRecordBody(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitRecordBody(this);}else{return visitor.visitChildren(this);}}}class BlockContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_block;}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}blockStatement=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(BlockStatementContext);}else{return this.getTypedRuleContext(BlockStatementContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterBlock(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitBlock(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitBlock(this);}else{return visitor.visitChildren(this);}}}class BlockStatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_blockStatement;}localVariableDeclaration(){return this.getTypedRuleContext(LocalVariableDeclarationContext,0);}SEMI(){return this.getToken(JavaParser.SEMI,0);}statement(){return this.getTypedRuleContext(StatementContext,0);}localTypeDeclaration(){return this.getTypedRuleContext(LocalTypeDeclarationContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterBlockStatement(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitBlockStatement(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitBlockStatement(this);}else{return visitor.visitChildren(this);}}}class LocalVariableDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_localVariableDeclaration;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}variableDeclarators(){return this.getTypedRuleContext(VariableDeclaratorsContext,0);}VAR(){return this.getToken(JavaParser.VAR,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}ASSIGN(){return this.getToken(JavaParser.ASSIGN,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}variableModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableModifierContext);}else{return this.getTypedRuleContext(VariableModifierContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterLocalVariableDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitLocalVariableDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitLocalVariableDeclaration(this);}else{return visitor.visitChildren(this);}}}class IdentifierContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_identifier;}IDENTIFIER(){return this.getToken(JavaParser.IDENTIFIER,0);}MODULE(){return this.getToken(JavaParser.MODULE,0);}OPEN(){return this.getToken(JavaParser.OPEN,0);}REQUIRES(){return this.getToken(JavaParser.REQUIRES,0);}EXPORTS(){return this.getToken(JavaParser.EXPORTS,0);}OPENS(){return this.getToken(JavaParser.OPENS,0);}TO(){return this.getToken(JavaParser.TO,0);}USES(){return this.getToken(JavaParser.USES,0);}PROVIDES(){return this.getToken(JavaParser.PROVIDES,0);}WITH(){return this.getToken(JavaParser.WITH,0);}TRANSITIVE(){return this.getToken(JavaParser.TRANSITIVE,0);}YIELD(){return this.getToken(JavaParser.YIELD,0);}SEALED(){return this.getToken(JavaParser.SEALED,0);}PERMITS(){return this.getToken(JavaParser.PERMITS,0);}RECORD(){return this.getToken(JavaParser.RECORD,0);}VAR(){return this.getToken(JavaParser.VAR,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterIdentifier(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitIdentifier(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitIdentifier(this);}else{return visitor.visitChildren(this);}}}class LocalTypeDeclarationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_localTypeDeclaration;}classDeclaration(){return this.getTypedRuleContext(ClassDeclarationContext,0);}interfaceDeclaration(){return this.getTypedRuleContext(InterfaceDeclarationContext,0);}recordDeclaration(){return this.getTypedRuleContext(RecordDeclarationContext,0);}classOrInterfaceModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);}else{return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);}};SEMI(){return this.getToken(JavaParser.SEMI,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterLocalTypeDeclaration(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitLocalTypeDeclaration(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitLocalTypeDeclaration(this);}else{return visitor.visitChildren(this);}}}class StatementContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_statement;this.blockLabel=null;// BlockContext
this.statementExpression=null;// ExpressionContext
this.identifierLabel=null;// IdentifierContext
}block(){return this.getTypedRuleContext(BlockContext,0);}ASSERT(){return this.getToken(JavaParser.ASSERT,0);}expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};SEMI(){return this.getToken(JavaParser.SEMI,0);}COLON(){return this.getToken(JavaParser.COLON,0);}IF(){return this.getToken(JavaParser.IF,0);}parExpression(){return this.getTypedRuleContext(ParExpressionContext,0);}statement=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StatementContext);}else{return this.getTypedRuleContext(StatementContext,i);}};ELSE(){return this.getToken(JavaParser.ELSE,0);}FOR(){return this.getToken(JavaParser.FOR,0);}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}forControl(){return this.getTypedRuleContext(ForControlContext,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}WHILE(){return this.getToken(JavaParser.WHILE,0);}DO(){return this.getToken(JavaParser.DO,0);}TRY(){return this.getToken(JavaParser.TRY,0);}finallyBlock(){return this.getTypedRuleContext(FinallyBlockContext,0);}catchClause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CatchClauseContext);}else{return this.getTypedRuleContext(CatchClauseContext,i);}};resourceSpecification(){return this.getTypedRuleContext(ResourceSpecificationContext,0);}SWITCH(){return this.getToken(JavaParser.SWITCH,0);}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}switchBlockStatementGroup=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);}else{return this.getTypedRuleContext(SwitchBlockStatementGroupContext,i);}};switchLabel=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SwitchLabelContext);}else{return this.getTypedRuleContext(SwitchLabelContext,i);}};SYNCHRONIZED(){return this.getToken(JavaParser.SYNCHRONIZED,0);}RETURN(){return this.getToken(JavaParser.RETURN,0);}THROW(){return this.getToken(JavaParser.THROW,0);}BREAK(){return this.getToken(JavaParser.BREAK,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}CONTINUE(){return this.getToken(JavaParser.CONTINUE,0);}YIELD(){return this.getToken(JavaParser.YIELD,0);}switchExpression(){return this.getTypedRuleContext(SwitchExpressionContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterStatement(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitStatement(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitStatement(this);}else{return visitor.visitChildren(this);}}}class CatchClauseContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_catchClause;}CATCH(){return this.getToken(JavaParser.CATCH,0);}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}catchType(){return this.getTypedRuleContext(CatchTypeContext,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}block(){return this.getTypedRuleContext(BlockContext,0);}variableModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableModifierContext);}else{return this.getTypedRuleContext(VariableModifierContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterCatchClause(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitCatchClause(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitCatchClause(this);}else{return visitor.visitChildren(this);}}}class CatchTypeContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_catchType;}qualifiedName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(QualifiedNameContext);}else{return this.getTypedRuleContext(QualifiedNameContext,i);}};BITOR=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.BITOR);}else{return this.getToken(JavaParser.BITOR,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterCatchType(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitCatchType(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitCatchType(this);}else{return visitor.visitChildren(this);}}}class FinallyBlockContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_finallyBlock;}FINALLY(){return this.getToken(JavaParser.FINALLY,0);}block(){return this.getTypedRuleContext(BlockContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterFinallyBlock(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitFinallyBlock(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitFinallyBlock(this);}else{return visitor.visitChildren(this);}}}class ResourceSpecificationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_resourceSpecification;}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}resources(){return this.getTypedRuleContext(ResourcesContext,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}SEMI(){return this.getToken(JavaParser.SEMI,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterResourceSpecification(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitResourceSpecification(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitResourceSpecification(this);}else{return visitor.visitChildren(this);}}}class ResourcesContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_resources;}resource=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ResourceContext);}else{return this.getTypedRuleContext(ResourceContext,i);}};SEMI=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.SEMI);}else{return this.getToken(JavaParser.SEMI,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterResources(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitResources(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitResources(this);}else{return visitor.visitChildren(this);}}}class ResourceContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_resource;}ASSIGN(){return this.getToken(JavaParser.ASSIGN,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}classOrInterfaceType(){return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);}variableDeclaratorId(){return this.getTypedRuleContext(VariableDeclaratorIdContext,0);}VAR(){return this.getToken(JavaParser.VAR,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}variableModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableModifierContext);}else{return this.getTypedRuleContext(VariableModifierContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterResource(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitResource(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitResource(this);}else{return visitor.visitChildren(this);}}}class SwitchBlockStatementGroupContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_switchBlockStatementGroup;}switchLabel=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SwitchLabelContext);}else{return this.getTypedRuleContext(SwitchLabelContext,i);}};blockStatement=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(BlockStatementContext);}else{return this.getTypedRuleContext(BlockStatementContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterSwitchBlockStatementGroup(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitSwitchBlockStatementGroup(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitSwitchBlockStatementGroup(this);}else{return visitor.visitChildren(this);}}}class SwitchLabelContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_switchLabel;this.constantExpression=null;// ExpressionContext
this.enumConstantName=null;// Token
this.varName=null;// IdentifierContext
}CASE(){return this.getToken(JavaParser.CASE,0);}COLON(){return this.getToken(JavaParser.COLON,0);}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}IDENTIFIER(){return this.getToken(JavaParser.IDENTIFIER,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}DEFAULT(){return this.getToken(JavaParser.DEFAULT,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterSwitchLabel(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitSwitchLabel(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitSwitchLabel(this);}else{return visitor.visitChildren(this);}}}class ForControlContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_forControl;this.forUpdate=null;// ExpressionListContext
}enhancedForControl(){return this.getTypedRuleContext(EnhancedForControlContext,0);}SEMI=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.SEMI);}else{return this.getToken(JavaParser.SEMI,i);}};forInit(){return this.getTypedRuleContext(ForInitContext,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}expressionList(){return this.getTypedRuleContext(ExpressionListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterForControl(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitForControl(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitForControl(this);}else{return visitor.visitChildren(this);}}}class ForInitContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_forInit;}localVariableDeclaration(){return this.getTypedRuleContext(LocalVariableDeclarationContext,0);}expressionList(){return this.getTypedRuleContext(ExpressionListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterForInit(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitForInit(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitForInit(this);}else{return visitor.visitChildren(this);}}}class EnhancedForControlContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_enhancedForControl;}variableDeclaratorId(){return this.getTypedRuleContext(VariableDeclaratorIdContext,0);}COLON(){return this.getToken(JavaParser.COLON,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}VAR(){return this.getToken(JavaParser.VAR,0);}variableModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableModifierContext);}else{return this.getTypedRuleContext(VariableModifierContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterEnhancedForControl(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitEnhancedForControl(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitEnhancedForControl(this);}else{return visitor.visitChildren(this);}}}class ParExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_parExpression;}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterParExpression(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitParExpression(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitParExpression(this);}else{return visitor.visitChildren(this);}}}class ExpressionListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_expressionList;}expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterExpressionList(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitExpressionList(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitExpressionList(this);}else{return visitor.visitChildren(this);}}}class MethodCallContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_methodCall;}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}expressionList(){return this.getTypedRuleContext(ExpressionListContext,0);}THIS(){return this.getToken(JavaParser.THIS,0);}SUPER(){return this.getToken(JavaParser.SUPER,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterMethodCall(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitMethodCall(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitMethodCall(this);}else{return visitor.visitChildren(this);}}}class ExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_expression;this.prefix=null;// Token
this.bop=null;// Token
this.postfix=null;// Token
}primary(){return this.getTypedRuleContext(PrimaryContext,0);}methodCall(){return this.getTypedRuleContext(MethodCallContext,0);}NEW(){return this.getToken(JavaParser.NEW,0);}creator(){return this.getTypedRuleContext(CreatorContext,0);}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}typeType=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TypeTypeContext);}else{return this.getTypedRuleContext(TypeTypeContext,i);}};RPAREN(){return this.getToken(JavaParser.RPAREN,0);}expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};BITAND=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.BITAND);}else{return this.getToken(JavaParser.BITAND,i);}};ADD(){return this.getToken(JavaParser.ADD,0);}SUB(){return this.getToken(JavaParser.SUB,0);}INC(){return this.getToken(JavaParser.INC,0);}DEC(){return this.getToken(JavaParser.DEC,0);}TILDE(){return this.getToken(JavaParser.TILDE,0);}BANG(){return this.getToken(JavaParser.BANG,0);}lambdaExpression(){return this.getTypedRuleContext(LambdaExpressionContext,0);}switchExpression(){return this.getTypedRuleContext(SwitchExpressionContext,0);}COLONCOLON(){return this.getToken(JavaParser.COLONCOLON,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}typeArguments(){return this.getTypedRuleContext(TypeArgumentsContext,0);}classType(){return this.getTypedRuleContext(ClassTypeContext,0);}MUL(){return this.getToken(JavaParser.MUL,0);}DIV(){return this.getToken(JavaParser.DIV,0);}MOD(){return this.getToken(JavaParser.MOD,0);}LT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.LT);}else{return this.getToken(JavaParser.LT,i);}};GT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.GT);}else{return this.getToken(JavaParser.GT,i);}};LE(){return this.getToken(JavaParser.LE,0);}GE(){return this.getToken(JavaParser.GE,0);}EQUAL(){return this.getToken(JavaParser.EQUAL,0);}NOTEQUAL(){return this.getToken(JavaParser.NOTEQUAL,0);}CARET(){return this.getToken(JavaParser.CARET,0);}BITOR(){return this.getToken(JavaParser.BITOR,0);}AND(){return this.getToken(JavaParser.AND,0);}OR(){return this.getToken(JavaParser.OR,0);}COLON(){return this.getToken(JavaParser.COLON,0);}QUESTION(){return this.getToken(JavaParser.QUESTION,0);}ASSIGN(){return this.getToken(JavaParser.ASSIGN,0);}ADD_ASSIGN(){return this.getToken(JavaParser.ADD_ASSIGN,0);}SUB_ASSIGN(){return this.getToken(JavaParser.SUB_ASSIGN,0);}MUL_ASSIGN(){return this.getToken(JavaParser.MUL_ASSIGN,0);}DIV_ASSIGN(){return this.getToken(JavaParser.DIV_ASSIGN,0);}AND_ASSIGN(){return this.getToken(JavaParser.AND_ASSIGN,0);}OR_ASSIGN(){return this.getToken(JavaParser.OR_ASSIGN,0);}XOR_ASSIGN(){return this.getToken(JavaParser.XOR_ASSIGN,0);}RSHIFT_ASSIGN(){return this.getToken(JavaParser.RSHIFT_ASSIGN,0);}URSHIFT_ASSIGN(){return this.getToken(JavaParser.URSHIFT_ASSIGN,0);}LSHIFT_ASSIGN(){return this.getToken(JavaParser.LSHIFT_ASSIGN,0);}MOD_ASSIGN(){return this.getToken(JavaParser.MOD_ASSIGN,0);}DOT(){return this.getToken(JavaParser.DOT,0);}THIS(){return this.getToken(JavaParser.THIS,0);}innerCreator(){return this.getTypedRuleContext(InnerCreatorContext,0);}SUPER(){return this.getToken(JavaParser.SUPER,0);}superSuffix(){return this.getTypedRuleContext(SuperSuffixContext,0);}explicitGenericInvocation(){return this.getTypedRuleContext(ExplicitGenericInvocationContext,0);}nonWildcardTypeArguments(){return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);}LBRACK(){return this.getToken(JavaParser.LBRACK,0);}RBRACK(){return this.getToken(JavaParser.RBRACK,0);}INSTANCEOF(){return this.getToken(JavaParser.INSTANCEOF,0);}pattern(){return this.getTypedRuleContext(PatternContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterExpression(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitExpression(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitExpression(this);}else{return visitor.visitChildren(this);}}}class PatternContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_pattern;}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}variableModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableModifierContext);}else{return this.getTypedRuleContext(VariableModifierContext,i);}};annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterPattern(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitPattern(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitPattern(this);}else{return visitor.visitChildren(this);}}}class LambdaExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_lambdaExpression;}lambdaParameters(){return this.getTypedRuleContext(LambdaParametersContext,0);}ARROW(){return this.getToken(JavaParser.ARROW,0);}lambdaBody(){return this.getTypedRuleContext(LambdaBodyContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterLambdaExpression(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitLambdaExpression(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitLambdaExpression(this);}else{return visitor.visitChildren(this);}}}class LambdaParametersContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_lambdaParameters;}identifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IdentifierContext);}else{return this.getTypedRuleContext(IdentifierContext,i);}};LPAREN(){return this.getToken(JavaParser.LPAREN,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}formalParameterList(){return this.getTypedRuleContext(FormalParameterListContext,0);}COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};lambdaLVTIList(){return this.getTypedRuleContext(LambdaLVTIListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterLambdaParameters(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitLambdaParameters(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitLambdaParameters(this);}else{return visitor.visitChildren(this);}}}class LambdaBodyContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_lambdaBody;}expression(){return this.getTypedRuleContext(ExpressionContext,0);}block(){return this.getTypedRuleContext(BlockContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterLambdaBody(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitLambdaBody(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitLambdaBody(this);}else{return visitor.visitChildren(this);}}}class PrimaryContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_primary;}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}expression(){return this.getTypedRuleContext(ExpressionContext,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}THIS(){return this.getToken(JavaParser.THIS,0);}SUPER(){return this.getToken(JavaParser.SUPER,0);}literal(){return this.getTypedRuleContext(LiteralContext,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}typeTypeOrVoid(){return this.getTypedRuleContext(TypeTypeOrVoidContext,0);}DOT(){return this.getToken(JavaParser.DOT,0);}CLASS(){return this.getToken(JavaParser.CLASS,0);}nonWildcardTypeArguments(){return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);}explicitGenericInvocationSuffix(){return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);}arguments(){return this.getTypedRuleContext(ArgumentsContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterPrimary(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitPrimary(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitPrimary(this);}else{return visitor.visitChildren(this);}}}class SwitchExpressionContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_switchExpression;}SWITCH(){return this.getToken(JavaParser.SWITCH,0);}parExpression(){return this.getTypedRuleContext(ParExpressionContext,0);}LBRACE(){return this.getToken(JavaParser.LBRACE,0);}RBRACE(){return this.getToken(JavaParser.RBRACE,0);}switchLabeledRule=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SwitchLabeledRuleContext);}else{return this.getTypedRuleContext(SwitchLabeledRuleContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterSwitchExpression(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitSwitchExpression(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitSwitchExpression(this);}else{return visitor.visitChildren(this);}}}class SwitchLabeledRuleContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_switchLabeledRule;}CASE(){return this.getToken(JavaParser.CASE,0);}switchRuleOutcome(){return this.getTypedRuleContext(SwitchRuleOutcomeContext,0);}ARROW(){return this.getToken(JavaParser.ARROW,0);}COLON(){return this.getToken(JavaParser.COLON,0);}expressionList(){return this.getTypedRuleContext(ExpressionListContext,0);}NULL_LITERAL(){return this.getToken(JavaParser.NULL_LITERAL,0);}guardedPattern(){return this.getTypedRuleContext(GuardedPatternContext,0);}DEFAULT(){return this.getToken(JavaParser.DEFAULT,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterSwitchLabeledRule(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitSwitchLabeledRule(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitSwitchLabeledRule(this);}else{return visitor.visitChildren(this);}}}class GuardedPatternContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_guardedPattern;}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}guardedPattern(){return this.getTypedRuleContext(GuardedPatternContext,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}typeType(){return this.getTypedRuleContext(TypeTypeContext,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}variableModifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableModifierContext);}else{return this.getTypedRuleContext(VariableModifierContext,i);}};annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};AND=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.AND);}else{return this.getToken(JavaParser.AND,i);}};expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterGuardedPattern(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitGuardedPattern(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitGuardedPattern(this);}else{return visitor.visitChildren(this);}}}class SwitchRuleOutcomeContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_switchRuleOutcome;}block(){return this.getTypedRuleContext(BlockContext,0);}blockStatement=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(BlockStatementContext);}else{return this.getTypedRuleContext(BlockStatementContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterSwitchRuleOutcome(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitSwitchRuleOutcome(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitSwitchRuleOutcome(this);}else{return visitor.visitChildren(this);}}}class ClassTypeContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_classType;}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}classOrInterfaceType(){return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);}DOT(){return this.getToken(JavaParser.DOT,0);}annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};typeArguments(){return this.getTypedRuleContext(TypeArgumentsContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterClassType(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitClassType(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitClassType(this);}else{return visitor.visitChildren(this);}}}class CreatorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_creator;}nonWildcardTypeArguments(){return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);}createdName(){return this.getTypedRuleContext(CreatedNameContext,0);}classCreatorRest(){return this.getTypedRuleContext(ClassCreatorRestContext,0);}arrayCreatorRest(){return this.getTypedRuleContext(ArrayCreatorRestContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterCreator(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitCreator(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitCreator(this);}else{return visitor.visitChildren(this);}}}class CreatedNameContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_createdName;}identifier=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IdentifierContext);}else{return this.getTypedRuleContext(IdentifierContext,i);}};typeArgumentsOrDiamond=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TypeArgumentsOrDiamondContext);}else{return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,i);}};DOT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.DOT);}else{return this.getToken(JavaParser.DOT,i);}};primitiveType(){return this.getTypedRuleContext(PrimitiveTypeContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterCreatedName(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitCreatedName(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitCreatedName(this);}else{return visitor.visitChildren(this);}}}class InnerCreatorContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_innerCreator;}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}classCreatorRest(){return this.getTypedRuleContext(ClassCreatorRestContext,0);}nonWildcardTypeArgumentsOrDiamond(){return this.getTypedRuleContext(NonWildcardTypeArgumentsOrDiamondContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterInnerCreator(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitInnerCreator(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitInnerCreator(this);}else{return visitor.visitChildren(this);}}}class ArrayCreatorRestContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_arrayCreatorRest;}LBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.LBRACK);}else{return this.getToken(JavaParser.LBRACK,i);}};RBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.RBRACK);}else{return this.getToken(JavaParser.RBRACK,i);}};arrayInitializer(){return this.getTypedRuleContext(ArrayInitializerContext,0);}expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterArrayCreatorRest(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitArrayCreatorRest(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitArrayCreatorRest(this);}else{return visitor.visitChildren(this);}}}class ClassCreatorRestContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_classCreatorRest;}arguments(){return this.getTypedRuleContext(ArgumentsContext,0);}classBody(){return this.getTypedRuleContext(ClassBodyContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterClassCreatorRest(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitClassCreatorRest(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitClassCreatorRest(this);}else{return visitor.visitChildren(this);}}}class ExplicitGenericInvocationContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_explicitGenericInvocation;}nonWildcardTypeArguments(){return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);}explicitGenericInvocationSuffix(){return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterExplicitGenericInvocation(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitExplicitGenericInvocation(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitExplicitGenericInvocation(this);}else{return visitor.visitChildren(this);}}}class TypeArgumentsOrDiamondContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_typeArgumentsOrDiamond;}LT(){return this.getToken(JavaParser.LT,0);}GT(){return this.getToken(JavaParser.GT,0);}typeArguments(){return this.getTypedRuleContext(TypeArgumentsContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterTypeArgumentsOrDiamond(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitTypeArgumentsOrDiamond(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitTypeArgumentsOrDiamond(this);}else{return visitor.visitChildren(this);}}}class NonWildcardTypeArgumentsOrDiamondContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond;}LT(){return this.getToken(JavaParser.LT,0);}GT(){return this.getToken(JavaParser.GT,0);}nonWildcardTypeArguments(){return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterNonWildcardTypeArgumentsOrDiamond(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitNonWildcardTypeArgumentsOrDiamond(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitNonWildcardTypeArgumentsOrDiamond(this);}else{return visitor.visitChildren(this);}}}class NonWildcardTypeArgumentsContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_nonWildcardTypeArguments;}LT(){return this.getToken(JavaParser.LT,0);}typeList(){return this.getTypedRuleContext(TypeListContext,0);}GT(){return this.getToken(JavaParser.GT,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterNonWildcardTypeArguments(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitNonWildcardTypeArguments(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitNonWildcardTypeArguments(this);}else{return visitor.visitChildren(this);}}}class TypeListContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_typeList;}typeType=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TypeTypeContext);}else{return this.getTypedRuleContext(TypeTypeContext,i);}};COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterTypeList(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitTypeList(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitTypeList(this);}else{return visitor.visitChildren(this);}}}class TypeTypeContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_typeType;}classOrInterfaceType(){return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);}primitiveType(){return this.getTypedRuleContext(PrimitiveTypeContext,0);}annotation=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnnotationContext);}else{return this.getTypedRuleContext(AnnotationContext,i);}};LBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.LBRACK);}else{return this.getToken(JavaParser.LBRACK,i);}};RBRACK=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.RBRACK);}else{return this.getToken(JavaParser.RBRACK,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterTypeType(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitTypeType(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitTypeType(this);}else{return visitor.visitChildren(this);}}}class PrimitiveTypeContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_primitiveType;}BOOLEAN(){return this.getToken(JavaParser.BOOLEAN,0);}CHAR(){return this.getToken(JavaParser.CHAR,0);}BYTE(){return this.getToken(JavaParser.BYTE,0);}SHORT(){return this.getToken(JavaParser.SHORT,0);}INT(){return this.getToken(JavaParser.INT,0);}LONG(){return this.getToken(JavaParser.LONG,0);}FLOAT(){return this.getToken(JavaParser.FLOAT,0);}DOUBLE(){return this.getToken(JavaParser.DOUBLE,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterPrimitiveType(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitPrimitiveType(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitPrimitiveType(this);}else{return visitor.visitChildren(this);}}}class TypeArgumentsContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_typeArguments;}LT(){return this.getToken(JavaParser.LT,0);}typeArgument=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(TypeArgumentContext);}else{return this.getTypedRuleContext(TypeArgumentContext,i);}};GT(){return this.getToken(JavaParser.GT,0);}COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(JavaParser.COMMA);}else{return this.getToken(JavaParser.COMMA,i);}};enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterTypeArguments(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitTypeArguments(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitTypeArguments(this);}else{return visitor.visitChildren(this);}}}class SuperSuffixContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_superSuffix;}arguments(){return this.getTypedRuleContext(ArgumentsContext,0);}DOT(){return this.getToken(JavaParser.DOT,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}typeArguments(){return this.getTypedRuleContext(TypeArgumentsContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterSuperSuffix(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitSuperSuffix(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitSuperSuffix(this);}else{return visitor.visitChildren(this);}}}class ExplicitGenericInvocationSuffixContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_explicitGenericInvocationSuffix;}SUPER(){return this.getToken(JavaParser.SUPER,0);}superSuffix(){return this.getTypedRuleContext(SuperSuffixContext,0);}identifier(){return this.getTypedRuleContext(IdentifierContext,0);}arguments(){return this.getTypedRuleContext(ArgumentsContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterExplicitGenericInvocationSuffix(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitExplicitGenericInvocationSuffix(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitExplicitGenericInvocationSuffix(this);}else{return visitor.visitChildren(this);}}}class ArgumentsContext extends _antlr.default.ParserRuleContext{constructor(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}super(parent,invokingState);this.parser=parser;this.ruleIndex=JavaParser.RULE_arguments;}LPAREN(){return this.getToken(JavaParser.LPAREN,0);}RPAREN(){return this.getToken(JavaParser.RPAREN,0);}expressionList(){return this.getTypedRuleContext(ExpressionListContext,0);}enterRule(listener){if(listener instanceof _JavaParserListener.default){listener.enterArguments(this);}}exitRule(listener){if(listener instanceof _JavaParserListener.default){listener.exitArguments(this);}}accept(visitor){if(visitor instanceof _JavaParserVisitor.default){return visitor.visitArguments(this);}else{return visitor.visitChildren(this);}}}JavaParser.CompilationUnitContext=CompilationUnitContext;JavaParser.PackageDeclarationContext=PackageDeclarationContext;JavaParser.ImportDeclarationContext=ImportDeclarationContext;JavaParser.TypeDeclarationContext=TypeDeclarationContext;JavaParser.ModifierContext=ModifierContext;JavaParser.ClassOrInterfaceModifierContext=ClassOrInterfaceModifierContext;JavaParser.VariableModifierContext=VariableModifierContext;JavaParser.ClassDeclarationContext=ClassDeclarationContext;JavaParser.TypeParametersContext=TypeParametersContext;JavaParser.TypeParameterContext=TypeParameterContext;JavaParser.TypeBoundContext=TypeBoundContext;JavaParser.EnumDeclarationContext=EnumDeclarationContext;JavaParser.EnumConstantsContext=EnumConstantsContext;JavaParser.EnumConstantContext=EnumConstantContext;JavaParser.EnumBodyDeclarationsContext=EnumBodyDeclarationsContext;JavaParser.InterfaceDeclarationContext=InterfaceDeclarationContext;JavaParser.ClassBodyContext=ClassBodyContext;JavaParser.InterfaceBodyContext=InterfaceBodyContext;JavaParser.ClassBodyDeclarationContext=ClassBodyDeclarationContext;JavaParser.MemberDeclarationContext=MemberDeclarationContext;JavaParser.MethodDeclarationContext=MethodDeclarationContext;JavaParser.MethodBodyContext=MethodBodyContext;JavaParser.TypeTypeOrVoidContext=TypeTypeOrVoidContext;JavaParser.GenericMethodDeclarationContext=GenericMethodDeclarationContext;JavaParser.GenericConstructorDeclarationContext=GenericConstructorDeclarationContext;JavaParser.ConstructorDeclarationContext=ConstructorDeclarationContext;JavaParser.FieldDeclarationContext=FieldDeclarationContext;JavaParser.InterfaceBodyDeclarationContext=InterfaceBodyDeclarationContext;JavaParser.InterfaceMemberDeclarationContext=InterfaceMemberDeclarationContext;JavaParser.ConstDeclarationContext=ConstDeclarationContext;JavaParser.ConstantDeclaratorContext=ConstantDeclaratorContext;JavaParser.InterfaceMethodDeclarationContext=InterfaceMethodDeclarationContext;JavaParser.InterfaceMethodModifierContext=InterfaceMethodModifierContext;JavaParser.GenericInterfaceMethodDeclarationContext=GenericInterfaceMethodDeclarationContext;JavaParser.InterfaceCommonBodyDeclarationContext=InterfaceCommonBodyDeclarationContext;JavaParser.VariableDeclaratorsContext=VariableDeclaratorsContext;JavaParser.VariableDeclaratorContext=VariableDeclaratorContext;JavaParser.VariableDeclaratorIdContext=VariableDeclaratorIdContext;JavaParser.VariableInitializerContext=VariableInitializerContext;JavaParser.ArrayInitializerContext=ArrayInitializerContext;JavaParser.ClassOrInterfaceTypeContext=ClassOrInterfaceTypeContext;JavaParser.TypeArgumentContext=TypeArgumentContext;JavaParser.QualifiedNameListContext=QualifiedNameListContext;JavaParser.FormalParametersContext=FormalParametersContext;JavaParser.ReceiverParameterContext=ReceiverParameterContext;JavaParser.FormalParameterListContext=FormalParameterListContext;JavaParser.FormalParameterContext=FormalParameterContext;JavaParser.LastFormalParameterContext=LastFormalParameterContext;JavaParser.LambdaLVTIListContext=LambdaLVTIListContext;JavaParser.LambdaLVTIParameterContext=LambdaLVTIParameterContext;JavaParser.QualifiedNameContext=QualifiedNameContext;JavaParser.LiteralContext=LiteralContext;JavaParser.IntegerLiteralContext=IntegerLiteralContext;JavaParser.FloatLiteralContext=FloatLiteralContext;JavaParser.AltAnnotationQualifiedNameContext=AltAnnotationQualifiedNameContext;JavaParser.AnnotationContext=AnnotationContext;JavaParser.ElementValuePairsContext=ElementValuePairsContext;JavaParser.ElementValuePairContext=ElementValuePairContext;JavaParser.ElementValueContext=ElementValueContext;JavaParser.ElementValueArrayInitializerContext=ElementValueArrayInitializerContext;JavaParser.AnnotationTypeDeclarationContext=AnnotationTypeDeclarationContext;JavaParser.AnnotationTypeBodyContext=AnnotationTypeBodyContext;JavaParser.AnnotationTypeElementDeclarationContext=AnnotationTypeElementDeclarationContext;JavaParser.AnnotationTypeElementRestContext=AnnotationTypeElementRestContext;JavaParser.AnnotationMethodOrConstantRestContext=AnnotationMethodOrConstantRestContext;JavaParser.AnnotationMethodRestContext=AnnotationMethodRestContext;JavaParser.AnnotationConstantRestContext=AnnotationConstantRestContext;JavaParser.DefaultValueContext=DefaultValueContext;JavaParser.ModuleDeclarationContext=ModuleDeclarationContext;JavaParser.ModuleBodyContext=ModuleBodyContext;JavaParser.ModuleDirectiveContext=ModuleDirectiveContext;JavaParser.RequiresModifierContext=RequiresModifierContext;JavaParser.RecordDeclarationContext=RecordDeclarationContext;JavaParser.RecordHeaderContext=RecordHeaderContext;JavaParser.RecordComponentListContext=RecordComponentListContext;JavaParser.RecordComponentContext=RecordComponentContext;JavaParser.RecordBodyContext=RecordBodyContext;JavaParser.BlockContext=BlockContext;JavaParser.BlockStatementContext=BlockStatementContext;JavaParser.LocalVariableDeclarationContext=LocalVariableDeclarationContext;JavaParser.IdentifierContext=IdentifierContext;JavaParser.LocalTypeDeclarationContext=LocalTypeDeclarationContext;JavaParser.StatementContext=StatementContext;JavaParser.CatchClauseContext=CatchClauseContext;JavaParser.CatchTypeContext=CatchTypeContext;JavaParser.FinallyBlockContext=FinallyBlockContext;JavaParser.ResourceSpecificationContext=ResourceSpecificationContext;JavaParser.ResourcesContext=ResourcesContext;JavaParser.ResourceContext=ResourceContext;JavaParser.SwitchBlockStatementGroupContext=SwitchBlockStatementGroupContext;JavaParser.SwitchLabelContext=SwitchLabelContext;JavaParser.ForControlContext=ForControlContext;JavaParser.ForInitContext=ForInitContext;JavaParser.EnhancedForControlContext=EnhancedForControlContext;JavaParser.ParExpressionContext=ParExpressionContext;JavaParser.ExpressionListContext=ExpressionListContext;JavaParser.MethodCallContext=MethodCallContext;JavaParser.ExpressionContext=ExpressionContext;JavaParser.PatternContext=PatternContext;JavaParser.LambdaExpressionContext=LambdaExpressionContext;JavaParser.LambdaParametersContext=LambdaParametersContext;JavaParser.LambdaBodyContext=LambdaBodyContext;JavaParser.PrimaryContext=PrimaryContext;JavaParser.SwitchExpressionContext=SwitchExpressionContext;JavaParser.SwitchLabeledRuleContext=SwitchLabeledRuleContext;JavaParser.GuardedPatternContext=GuardedPatternContext;JavaParser.SwitchRuleOutcomeContext=SwitchRuleOutcomeContext;JavaParser.ClassTypeContext=ClassTypeContext;JavaParser.CreatorContext=CreatorContext;JavaParser.CreatedNameContext=CreatedNameContext;JavaParser.InnerCreatorContext=InnerCreatorContext;JavaParser.ArrayCreatorRestContext=ArrayCreatorRestContext;JavaParser.ClassCreatorRestContext=ClassCreatorRestContext;JavaParser.ExplicitGenericInvocationContext=ExplicitGenericInvocationContext;JavaParser.TypeArgumentsOrDiamondContext=TypeArgumentsOrDiamondContext;JavaParser.NonWildcardTypeArgumentsOrDiamondContext=NonWildcardTypeArgumentsOrDiamondContext;JavaParser.NonWildcardTypeArgumentsContext=NonWildcardTypeArgumentsContext;JavaParser.TypeListContext=TypeListContext;JavaParser.TypeTypeContext=TypeTypeContext;JavaParser.PrimitiveTypeContext=PrimitiveTypeContext;JavaParser.TypeArgumentsContext=TypeArgumentsContext;JavaParser.SuperSuffixContext=SuperSuffixContext;JavaParser.ExplicitGenericInvocationSuffixContext=ExplicitGenericInvocationSuffixContext;JavaParser.ArgumentsContext=ArgumentsContext;

},{"./JavaParserListener.js":140,"./JavaParserVisitor.js":141,"antlr4":42}],140:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/JavaParser.g4 by ANTLR 4.9.2
// jshint ignore: start
// This class defines a complete listener for a parse tree produced by JavaParser.
class JavaParserListener extends _antlr.default.tree.ParseTreeListener {
  // Enter a parse tree produced by JavaParser#compilationUnit.
  enterCompilationUnit(ctx) {} // Exit a parse tree produced by JavaParser#compilationUnit.


  exitCompilationUnit(ctx) {} // Enter a parse tree produced by JavaParser#packageDeclaration.


  enterPackageDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#packageDeclaration.


  exitPackageDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#importDeclaration.


  enterImportDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#importDeclaration.


  exitImportDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#typeDeclaration.


  enterTypeDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#typeDeclaration.


  exitTypeDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#modifier.


  enterModifier(ctx) {} // Exit a parse tree produced by JavaParser#modifier.


  exitModifier(ctx) {} // Enter a parse tree produced by JavaParser#classOrInterfaceModifier.


  enterClassOrInterfaceModifier(ctx) {} // Exit a parse tree produced by JavaParser#classOrInterfaceModifier.


  exitClassOrInterfaceModifier(ctx) {} // Enter a parse tree produced by JavaParser#variableModifier.


  enterVariableModifier(ctx) {} // Exit a parse tree produced by JavaParser#variableModifier.


  exitVariableModifier(ctx) {} // Enter a parse tree produced by JavaParser#classDeclaration.


  enterClassDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#classDeclaration.


  exitClassDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#typeParameters.


  enterTypeParameters(ctx) {} // Exit a parse tree produced by JavaParser#typeParameters.


  exitTypeParameters(ctx) {} // Enter a parse tree produced by JavaParser#typeParameter.


  enterTypeParameter(ctx) {} // Exit a parse tree produced by JavaParser#typeParameter.


  exitTypeParameter(ctx) {} // Enter a parse tree produced by JavaParser#typeBound.


  enterTypeBound(ctx) {} // Exit a parse tree produced by JavaParser#typeBound.


  exitTypeBound(ctx) {} // Enter a parse tree produced by JavaParser#enumDeclaration.


  enterEnumDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#enumDeclaration.


  exitEnumDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#enumConstants.


  enterEnumConstants(ctx) {} // Exit a parse tree produced by JavaParser#enumConstants.


  exitEnumConstants(ctx) {} // Enter a parse tree produced by JavaParser#enumConstant.


  enterEnumConstant(ctx) {} // Exit a parse tree produced by JavaParser#enumConstant.


  exitEnumConstant(ctx) {} // Enter a parse tree produced by JavaParser#enumBodyDeclarations.


  enterEnumBodyDeclarations(ctx) {} // Exit a parse tree produced by JavaParser#enumBodyDeclarations.


  exitEnumBodyDeclarations(ctx) {} // Enter a parse tree produced by JavaParser#interfaceDeclaration.


  enterInterfaceDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#interfaceDeclaration.


  exitInterfaceDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#classBody.


  enterClassBody(ctx) {} // Exit a parse tree produced by JavaParser#classBody.


  exitClassBody(ctx) {} // Enter a parse tree produced by JavaParser#interfaceBody.


  enterInterfaceBody(ctx) {} // Exit a parse tree produced by JavaParser#interfaceBody.


  exitInterfaceBody(ctx) {} // Enter a parse tree produced by JavaParser#classBodyDeclaration.


  enterClassBodyDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#classBodyDeclaration.


  exitClassBodyDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#memberDeclaration.


  enterMemberDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#memberDeclaration.


  exitMemberDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#methodDeclaration.


  enterMethodDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#methodDeclaration.


  exitMethodDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#methodBody.


  enterMethodBody(ctx) {} // Exit a parse tree produced by JavaParser#methodBody.


  exitMethodBody(ctx) {} // Enter a parse tree produced by JavaParser#typeTypeOrVoid.


  enterTypeTypeOrVoid(ctx) {} // Exit a parse tree produced by JavaParser#typeTypeOrVoid.


  exitTypeTypeOrVoid(ctx) {} // Enter a parse tree produced by JavaParser#genericMethodDeclaration.


  enterGenericMethodDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#genericMethodDeclaration.


  exitGenericMethodDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#genericConstructorDeclaration.


  enterGenericConstructorDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#genericConstructorDeclaration.


  exitGenericConstructorDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#constructorDeclaration.


  enterConstructorDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#constructorDeclaration.


  exitConstructorDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#fieldDeclaration.


  enterFieldDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#fieldDeclaration.


  exitFieldDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#interfaceBodyDeclaration.


  enterInterfaceBodyDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#interfaceBodyDeclaration.


  exitInterfaceBodyDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#interfaceMemberDeclaration.


  enterInterfaceMemberDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#interfaceMemberDeclaration.


  exitInterfaceMemberDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#constDeclaration.


  enterConstDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#constDeclaration.


  exitConstDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#constantDeclarator.


  enterConstantDeclarator(ctx) {} // Exit a parse tree produced by JavaParser#constantDeclarator.


  exitConstantDeclarator(ctx) {} // Enter a parse tree produced by JavaParser#interfaceMethodDeclaration.


  enterInterfaceMethodDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#interfaceMethodDeclaration.


  exitInterfaceMethodDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#interfaceMethodModifier.


  enterInterfaceMethodModifier(ctx) {} // Exit a parse tree produced by JavaParser#interfaceMethodModifier.


  exitInterfaceMethodModifier(ctx) {} // Enter a parse tree produced by JavaParser#genericInterfaceMethodDeclaration.


  enterGenericInterfaceMethodDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#genericInterfaceMethodDeclaration.


  exitGenericInterfaceMethodDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#interfaceCommonBodyDeclaration.


  enterInterfaceCommonBodyDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#interfaceCommonBodyDeclaration.


  exitInterfaceCommonBodyDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#variableDeclarators.


  enterVariableDeclarators(ctx) {} // Exit a parse tree produced by JavaParser#variableDeclarators.


  exitVariableDeclarators(ctx) {} // Enter a parse tree produced by JavaParser#variableDeclarator.


  enterVariableDeclarator(ctx) {} // Exit a parse tree produced by JavaParser#variableDeclarator.


  exitVariableDeclarator(ctx) {} // Enter a parse tree produced by JavaParser#variableDeclaratorId.


  enterVariableDeclaratorId(ctx) {} // Exit a parse tree produced by JavaParser#variableDeclaratorId.


  exitVariableDeclaratorId(ctx) {} // Enter a parse tree produced by JavaParser#variableInitializer.


  enterVariableInitializer(ctx) {} // Exit a parse tree produced by JavaParser#variableInitializer.


  exitVariableInitializer(ctx) {} // Enter a parse tree produced by JavaParser#arrayInitializer.


  enterArrayInitializer(ctx) {} // Exit a parse tree produced by JavaParser#arrayInitializer.


  exitArrayInitializer(ctx) {} // Enter a parse tree produced by JavaParser#classOrInterfaceType.


  enterClassOrInterfaceType(ctx) {} // Exit a parse tree produced by JavaParser#classOrInterfaceType.


  exitClassOrInterfaceType(ctx) {} // Enter a parse tree produced by JavaParser#typeArgument.


  enterTypeArgument(ctx) {} // Exit a parse tree produced by JavaParser#typeArgument.


  exitTypeArgument(ctx) {} // Enter a parse tree produced by JavaParser#qualifiedNameList.


  enterQualifiedNameList(ctx) {} // Exit a parse tree produced by JavaParser#qualifiedNameList.


  exitQualifiedNameList(ctx) {} // Enter a parse tree produced by JavaParser#formalParameters.


  enterFormalParameters(ctx) {} // Exit a parse tree produced by JavaParser#formalParameters.


  exitFormalParameters(ctx) {} // Enter a parse tree produced by JavaParser#receiverParameter.


  enterReceiverParameter(ctx) {} // Exit a parse tree produced by JavaParser#receiverParameter.


  exitReceiverParameter(ctx) {} // Enter a parse tree produced by JavaParser#formalParameterList.


  enterFormalParameterList(ctx) {} // Exit a parse tree produced by JavaParser#formalParameterList.


  exitFormalParameterList(ctx) {} // Enter a parse tree produced by JavaParser#formalParameter.


  enterFormalParameter(ctx) {} // Exit a parse tree produced by JavaParser#formalParameter.


  exitFormalParameter(ctx) {} // Enter a parse tree produced by JavaParser#lastFormalParameter.


  enterLastFormalParameter(ctx) {} // Exit a parse tree produced by JavaParser#lastFormalParameter.


  exitLastFormalParameter(ctx) {} // Enter a parse tree produced by JavaParser#lambdaLVTIList.


  enterLambdaLVTIList(ctx) {} // Exit a parse tree produced by JavaParser#lambdaLVTIList.


  exitLambdaLVTIList(ctx) {} // Enter a parse tree produced by JavaParser#lambdaLVTIParameter.


  enterLambdaLVTIParameter(ctx) {} // Exit a parse tree produced by JavaParser#lambdaLVTIParameter.


  exitLambdaLVTIParameter(ctx) {} // Enter a parse tree produced by JavaParser#qualifiedName.


  enterQualifiedName(ctx) {} // Exit a parse tree produced by JavaParser#qualifiedName.


  exitQualifiedName(ctx) {} // Enter a parse tree produced by JavaParser#literal.


  enterLiteral(ctx) {} // Exit a parse tree produced by JavaParser#literal.


  exitLiteral(ctx) {} // Enter a parse tree produced by JavaParser#integerLiteral.


  enterIntegerLiteral(ctx) {} // Exit a parse tree produced by JavaParser#integerLiteral.


  exitIntegerLiteral(ctx) {} // Enter a parse tree produced by JavaParser#floatLiteral.


  enterFloatLiteral(ctx) {} // Exit a parse tree produced by JavaParser#floatLiteral.


  exitFloatLiteral(ctx) {} // Enter a parse tree produced by JavaParser#altAnnotationQualifiedName.


  enterAltAnnotationQualifiedName(ctx) {} // Exit a parse tree produced by JavaParser#altAnnotationQualifiedName.


  exitAltAnnotationQualifiedName(ctx) {} // Enter a parse tree produced by JavaParser#annotation.


  enterAnnotation(ctx) {} // Exit a parse tree produced by JavaParser#annotation.


  exitAnnotation(ctx) {} // Enter a parse tree produced by JavaParser#elementValuePairs.


  enterElementValuePairs(ctx) {} // Exit a parse tree produced by JavaParser#elementValuePairs.


  exitElementValuePairs(ctx) {} // Enter a parse tree produced by JavaParser#elementValuePair.


  enterElementValuePair(ctx) {} // Exit a parse tree produced by JavaParser#elementValuePair.


  exitElementValuePair(ctx) {} // Enter a parse tree produced by JavaParser#elementValue.


  enterElementValue(ctx) {} // Exit a parse tree produced by JavaParser#elementValue.


  exitElementValue(ctx) {} // Enter a parse tree produced by JavaParser#elementValueArrayInitializer.


  enterElementValueArrayInitializer(ctx) {} // Exit a parse tree produced by JavaParser#elementValueArrayInitializer.


  exitElementValueArrayInitializer(ctx) {} // Enter a parse tree produced by JavaParser#annotationTypeDeclaration.


  enterAnnotationTypeDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#annotationTypeDeclaration.


  exitAnnotationTypeDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#annotationTypeBody.


  enterAnnotationTypeBody(ctx) {} // Exit a parse tree produced by JavaParser#annotationTypeBody.


  exitAnnotationTypeBody(ctx) {} // Enter a parse tree produced by JavaParser#annotationTypeElementDeclaration.


  enterAnnotationTypeElementDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#annotationTypeElementDeclaration.


  exitAnnotationTypeElementDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#annotationTypeElementRest.


  enterAnnotationTypeElementRest(ctx) {} // Exit a parse tree produced by JavaParser#annotationTypeElementRest.


  exitAnnotationTypeElementRest(ctx) {} // Enter a parse tree produced by JavaParser#annotationMethodOrConstantRest.


  enterAnnotationMethodOrConstantRest(ctx) {} // Exit a parse tree produced by JavaParser#annotationMethodOrConstantRest.


  exitAnnotationMethodOrConstantRest(ctx) {} // Enter a parse tree produced by JavaParser#annotationMethodRest.


  enterAnnotationMethodRest(ctx) {} // Exit a parse tree produced by JavaParser#annotationMethodRest.


  exitAnnotationMethodRest(ctx) {} // Enter a parse tree produced by JavaParser#annotationConstantRest.


  enterAnnotationConstantRest(ctx) {} // Exit a parse tree produced by JavaParser#annotationConstantRest.


  exitAnnotationConstantRest(ctx) {} // Enter a parse tree produced by JavaParser#defaultValue.


  enterDefaultValue(ctx) {} // Exit a parse tree produced by JavaParser#defaultValue.


  exitDefaultValue(ctx) {} // Enter a parse tree produced by JavaParser#moduleDeclaration.


  enterModuleDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#moduleDeclaration.


  exitModuleDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#moduleBody.


  enterModuleBody(ctx) {} // Exit a parse tree produced by JavaParser#moduleBody.


  exitModuleBody(ctx) {} // Enter a parse tree produced by JavaParser#moduleDirective.


  enterModuleDirective(ctx) {} // Exit a parse tree produced by JavaParser#moduleDirective.


  exitModuleDirective(ctx) {} // Enter a parse tree produced by JavaParser#requiresModifier.


  enterRequiresModifier(ctx) {} // Exit a parse tree produced by JavaParser#requiresModifier.


  exitRequiresModifier(ctx) {} // Enter a parse tree produced by JavaParser#recordDeclaration.


  enterRecordDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#recordDeclaration.


  exitRecordDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#recordHeader.


  enterRecordHeader(ctx) {} // Exit a parse tree produced by JavaParser#recordHeader.


  exitRecordHeader(ctx) {} // Enter a parse tree produced by JavaParser#recordComponentList.


  enterRecordComponentList(ctx) {} // Exit a parse tree produced by JavaParser#recordComponentList.


  exitRecordComponentList(ctx) {} // Enter a parse tree produced by JavaParser#recordComponent.


  enterRecordComponent(ctx) {} // Exit a parse tree produced by JavaParser#recordComponent.


  exitRecordComponent(ctx) {} // Enter a parse tree produced by JavaParser#recordBody.


  enterRecordBody(ctx) {} // Exit a parse tree produced by JavaParser#recordBody.


  exitRecordBody(ctx) {} // Enter a parse tree produced by JavaParser#block.


  enterBlock(ctx) {} // Exit a parse tree produced by JavaParser#block.


  exitBlock(ctx) {} // Enter a parse tree produced by JavaParser#blockStatement.


  enterBlockStatement(ctx) {} // Exit a parse tree produced by JavaParser#blockStatement.


  exitBlockStatement(ctx) {} // Enter a parse tree produced by JavaParser#localVariableDeclaration.


  enterLocalVariableDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#localVariableDeclaration.


  exitLocalVariableDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#identifier.


  enterIdentifier(ctx) {} // Exit a parse tree produced by JavaParser#identifier.


  exitIdentifier(ctx) {} // Enter a parse tree produced by JavaParser#localTypeDeclaration.


  enterLocalTypeDeclaration(ctx) {} // Exit a parse tree produced by JavaParser#localTypeDeclaration.


  exitLocalTypeDeclaration(ctx) {} // Enter a parse tree produced by JavaParser#statement.


  enterStatement(ctx) {} // Exit a parse tree produced by JavaParser#statement.


  exitStatement(ctx) {} // Enter a parse tree produced by JavaParser#catchClause.


  enterCatchClause(ctx) {} // Exit a parse tree produced by JavaParser#catchClause.


  exitCatchClause(ctx) {} // Enter a parse tree produced by JavaParser#catchType.


  enterCatchType(ctx) {} // Exit a parse tree produced by JavaParser#catchType.


  exitCatchType(ctx) {} // Enter a parse tree produced by JavaParser#finallyBlock.


  enterFinallyBlock(ctx) {} // Exit a parse tree produced by JavaParser#finallyBlock.


  exitFinallyBlock(ctx) {} // Enter a parse tree produced by JavaParser#resourceSpecification.


  enterResourceSpecification(ctx) {} // Exit a parse tree produced by JavaParser#resourceSpecification.


  exitResourceSpecification(ctx) {} // Enter a parse tree produced by JavaParser#resources.


  enterResources(ctx) {} // Exit a parse tree produced by JavaParser#resources.


  exitResources(ctx) {} // Enter a parse tree produced by JavaParser#resource.


  enterResource(ctx) {} // Exit a parse tree produced by JavaParser#resource.


  exitResource(ctx) {} // Enter a parse tree produced by JavaParser#switchBlockStatementGroup.


  enterSwitchBlockStatementGroup(ctx) {} // Exit a parse tree produced by JavaParser#switchBlockStatementGroup.


  exitSwitchBlockStatementGroup(ctx) {} // Enter a parse tree produced by JavaParser#switchLabel.


  enterSwitchLabel(ctx) {} // Exit a parse tree produced by JavaParser#switchLabel.


  exitSwitchLabel(ctx) {} // Enter a parse tree produced by JavaParser#forControl.


  enterForControl(ctx) {} // Exit a parse tree produced by JavaParser#forControl.


  exitForControl(ctx) {} // Enter a parse tree produced by JavaParser#forInit.


  enterForInit(ctx) {} // Exit a parse tree produced by JavaParser#forInit.


  exitForInit(ctx) {} // Enter a parse tree produced by JavaParser#enhancedForControl.


  enterEnhancedForControl(ctx) {} // Exit a parse tree produced by JavaParser#enhancedForControl.


  exitEnhancedForControl(ctx) {} // Enter a parse tree produced by JavaParser#parExpression.


  enterParExpression(ctx) {} // Exit a parse tree produced by JavaParser#parExpression.


  exitParExpression(ctx) {} // Enter a parse tree produced by JavaParser#expressionList.


  enterExpressionList(ctx) {} // Exit a parse tree produced by JavaParser#expressionList.


  exitExpressionList(ctx) {} // Enter a parse tree produced by JavaParser#methodCall.


  enterMethodCall(ctx) {} // Exit a parse tree produced by JavaParser#methodCall.


  exitMethodCall(ctx) {} // Enter a parse tree produced by JavaParser#expression.


  enterExpression(ctx) {} // Exit a parse tree produced by JavaParser#expression.


  exitExpression(ctx) {} // Enter a parse tree produced by JavaParser#pattern.


  enterPattern(ctx) {} // Exit a parse tree produced by JavaParser#pattern.


  exitPattern(ctx) {} // Enter a parse tree produced by JavaParser#lambdaExpression.


  enterLambdaExpression(ctx) {} // Exit a parse tree produced by JavaParser#lambdaExpression.


  exitLambdaExpression(ctx) {} // Enter a parse tree produced by JavaParser#lambdaParameters.


  enterLambdaParameters(ctx) {} // Exit a parse tree produced by JavaParser#lambdaParameters.


  exitLambdaParameters(ctx) {} // Enter a parse tree produced by JavaParser#lambdaBody.


  enterLambdaBody(ctx) {} // Exit a parse tree produced by JavaParser#lambdaBody.


  exitLambdaBody(ctx) {} // Enter a parse tree produced by JavaParser#primary.


  enterPrimary(ctx) {} // Exit a parse tree produced by JavaParser#primary.


  exitPrimary(ctx) {} // Enter a parse tree produced by JavaParser#switchExpression.


  enterSwitchExpression(ctx) {} // Exit a parse tree produced by JavaParser#switchExpression.


  exitSwitchExpression(ctx) {} // Enter a parse tree produced by JavaParser#switchLabeledRule.


  enterSwitchLabeledRule(ctx) {} // Exit a parse tree produced by JavaParser#switchLabeledRule.


  exitSwitchLabeledRule(ctx) {} // Enter a parse tree produced by JavaParser#guardedPattern.


  enterGuardedPattern(ctx) {} // Exit a parse tree produced by JavaParser#guardedPattern.


  exitGuardedPattern(ctx) {} // Enter a parse tree produced by JavaParser#switchRuleOutcome.


  enterSwitchRuleOutcome(ctx) {} // Exit a parse tree produced by JavaParser#switchRuleOutcome.


  exitSwitchRuleOutcome(ctx) {} // Enter a parse tree produced by JavaParser#classType.


  enterClassType(ctx) {} // Exit a parse tree produced by JavaParser#classType.


  exitClassType(ctx) {} // Enter a parse tree produced by JavaParser#creator.


  enterCreator(ctx) {} // Exit a parse tree produced by JavaParser#creator.


  exitCreator(ctx) {} // Enter a parse tree produced by JavaParser#createdName.


  enterCreatedName(ctx) {} // Exit a parse tree produced by JavaParser#createdName.


  exitCreatedName(ctx) {} // Enter a parse tree produced by JavaParser#innerCreator.


  enterInnerCreator(ctx) {} // Exit a parse tree produced by JavaParser#innerCreator.


  exitInnerCreator(ctx) {} // Enter a parse tree produced by JavaParser#arrayCreatorRest.


  enterArrayCreatorRest(ctx) {} // Exit a parse tree produced by JavaParser#arrayCreatorRest.


  exitArrayCreatorRest(ctx) {} // Enter a parse tree produced by JavaParser#classCreatorRest.


  enterClassCreatorRest(ctx) {} // Exit a parse tree produced by JavaParser#classCreatorRest.


  exitClassCreatorRest(ctx) {} // Enter a parse tree produced by JavaParser#explicitGenericInvocation.


  enterExplicitGenericInvocation(ctx) {} // Exit a parse tree produced by JavaParser#explicitGenericInvocation.


  exitExplicitGenericInvocation(ctx) {} // Enter a parse tree produced by JavaParser#typeArgumentsOrDiamond.


  enterTypeArgumentsOrDiamond(ctx) {} // Exit a parse tree produced by JavaParser#typeArgumentsOrDiamond.


  exitTypeArgumentsOrDiamond(ctx) {} // Enter a parse tree produced by JavaParser#nonWildcardTypeArgumentsOrDiamond.


  enterNonWildcardTypeArgumentsOrDiamond(ctx) {} // Exit a parse tree produced by JavaParser#nonWildcardTypeArgumentsOrDiamond.


  exitNonWildcardTypeArgumentsOrDiamond(ctx) {} // Enter a parse tree produced by JavaParser#nonWildcardTypeArguments.


  enterNonWildcardTypeArguments(ctx) {} // Exit a parse tree produced by JavaParser#nonWildcardTypeArguments.


  exitNonWildcardTypeArguments(ctx) {} // Enter a parse tree produced by JavaParser#typeList.


  enterTypeList(ctx) {} // Exit a parse tree produced by JavaParser#typeList.


  exitTypeList(ctx) {} // Enter a parse tree produced by JavaParser#typeType.


  enterTypeType(ctx) {} // Exit a parse tree produced by JavaParser#typeType.


  exitTypeType(ctx) {} // Enter a parse tree produced by JavaParser#primitiveType.


  enterPrimitiveType(ctx) {} // Exit a parse tree produced by JavaParser#primitiveType.


  exitPrimitiveType(ctx) {} // Enter a parse tree produced by JavaParser#typeArguments.


  enterTypeArguments(ctx) {} // Exit a parse tree produced by JavaParser#typeArguments.


  exitTypeArguments(ctx) {} // Enter a parse tree produced by JavaParser#superSuffix.


  enterSuperSuffix(ctx) {} // Exit a parse tree produced by JavaParser#superSuffix.


  exitSuperSuffix(ctx) {} // Enter a parse tree produced by JavaParser#explicitGenericInvocationSuffix.


  enterExplicitGenericInvocationSuffix(ctx) {} // Exit a parse tree produced by JavaParser#explicitGenericInvocationSuffix.


  exitExplicitGenericInvocationSuffix(ctx) {} // Enter a parse tree produced by JavaParser#arguments.


  enterArguments(ctx) {} // Exit a parse tree produced by JavaParser#arguments.


  exitArguments(ctx) {}

}

exports.default = JavaParserListener;

},{"antlr4":42}],141:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/JavaParser.g4 by ANTLR 4.9.2
// jshint ignore: start
// This class defines a complete generic visitor for a parse tree produced by JavaParser.
class JavaParserVisitor extends _antlr.default.tree.ParseTreeVisitor {
  // Visit a parse tree produced by JavaParser#compilationUnit.
  visitCompilationUnit(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#packageDeclaration.


  visitPackageDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#importDeclaration.


  visitImportDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#typeDeclaration.


  visitTypeDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#modifier.


  visitModifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#classOrInterfaceModifier.


  visitClassOrInterfaceModifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#variableModifier.


  visitVariableModifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#classDeclaration.


  visitClassDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#typeParameters.


  visitTypeParameters(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#typeParameter.


  visitTypeParameter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#typeBound.


  visitTypeBound(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#enumDeclaration.


  visitEnumDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#enumConstants.


  visitEnumConstants(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#enumConstant.


  visitEnumConstant(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#enumBodyDeclarations.


  visitEnumBodyDeclarations(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#interfaceDeclaration.


  visitInterfaceDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#classBody.


  visitClassBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#interfaceBody.


  visitInterfaceBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#classBodyDeclaration.


  visitClassBodyDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#memberDeclaration.


  visitMemberDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#methodDeclaration.


  visitMethodDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#methodBody.


  visitMethodBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#typeTypeOrVoid.


  visitTypeTypeOrVoid(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#genericMethodDeclaration.


  visitGenericMethodDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#genericConstructorDeclaration.


  visitGenericConstructorDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#constructorDeclaration.


  visitConstructorDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#fieldDeclaration.


  visitFieldDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#interfaceBodyDeclaration.


  visitInterfaceBodyDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#interfaceMemberDeclaration.


  visitInterfaceMemberDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#constDeclaration.


  visitConstDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#constantDeclarator.


  visitConstantDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#interfaceMethodDeclaration.


  visitInterfaceMethodDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#interfaceMethodModifier.


  visitInterfaceMethodModifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#genericInterfaceMethodDeclaration.


  visitGenericInterfaceMethodDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#interfaceCommonBodyDeclaration.


  visitInterfaceCommonBodyDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#variableDeclarators.


  visitVariableDeclarators(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#variableDeclarator.


  visitVariableDeclarator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#variableDeclaratorId.


  visitVariableDeclaratorId(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#variableInitializer.


  visitVariableInitializer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#arrayInitializer.


  visitArrayInitializer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#classOrInterfaceType.


  visitClassOrInterfaceType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#typeArgument.


  visitTypeArgument(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#qualifiedNameList.


  visitQualifiedNameList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#formalParameters.


  visitFormalParameters(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#receiverParameter.


  visitReceiverParameter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#formalParameterList.


  visitFormalParameterList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#formalParameter.


  visitFormalParameter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#lastFormalParameter.


  visitLastFormalParameter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#lambdaLVTIList.


  visitLambdaLVTIList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#lambdaLVTIParameter.


  visitLambdaLVTIParameter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#qualifiedName.


  visitQualifiedName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#literal.


  visitLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#integerLiteral.


  visitIntegerLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#floatLiteral.


  visitFloatLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#altAnnotationQualifiedName.


  visitAltAnnotationQualifiedName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#annotation.


  visitAnnotation(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#elementValuePairs.


  visitElementValuePairs(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#elementValuePair.


  visitElementValuePair(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#elementValue.


  visitElementValue(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#elementValueArrayInitializer.


  visitElementValueArrayInitializer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#annotationTypeDeclaration.


  visitAnnotationTypeDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#annotationTypeBody.


  visitAnnotationTypeBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#annotationTypeElementDeclaration.


  visitAnnotationTypeElementDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#annotationTypeElementRest.


  visitAnnotationTypeElementRest(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#annotationMethodOrConstantRest.


  visitAnnotationMethodOrConstantRest(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#annotationMethodRest.


  visitAnnotationMethodRest(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#annotationConstantRest.


  visitAnnotationConstantRest(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#defaultValue.


  visitDefaultValue(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#moduleDeclaration.


  visitModuleDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#moduleBody.


  visitModuleBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#moduleDirective.


  visitModuleDirective(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#requiresModifier.


  visitRequiresModifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#recordDeclaration.


  visitRecordDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#recordHeader.


  visitRecordHeader(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#recordComponentList.


  visitRecordComponentList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#recordComponent.


  visitRecordComponent(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#recordBody.


  visitRecordBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#block.


  visitBlock(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#blockStatement.


  visitBlockStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#localVariableDeclaration.


  visitLocalVariableDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#identifier.


  visitIdentifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#localTypeDeclaration.


  visitLocalTypeDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#statement.


  visitStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#catchClause.


  visitCatchClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#catchType.


  visitCatchType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#finallyBlock.


  visitFinallyBlock(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#resourceSpecification.


  visitResourceSpecification(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#resources.


  visitResources(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#resource.


  visitResource(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#switchBlockStatementGroup.


  visitSwitchBlockStatementGroup(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#switchLabel.


  visitSwitchLabel(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#forControl.


  visitForControl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#forInit.


  visitForInit(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#enhancedForControl.


  visitEnhancedForControl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#parExpression.


  visitParExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#expressionList.


  visitExpressionList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#methodCall.


  visitMethodCall(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#expression.


  visitExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#pattern.


  visitPattern(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#lambdaExpression.


  visitLambdaExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#lambdaParameters.


  visitLambdaParameters(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#lambdaBody.


  visitLambdaBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#primary.


  visitPrimary(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#switchExpression.


  visitSwitchExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#switchLabeledRule.


  visitSwitchLabeledRule(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#guardedPattern.


  visitGuardedPattern(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#switchRuleOutcome.


  visitSwitchRuleOutcome(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#classType.


  visitClassType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#creator.


  visitCreator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#createdName.


  visitCreatedName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#innerCreator.


  visitInnerCreator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#arrayCreatorRest.


  visitArrayCreatorRest(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#classCreatorRest.


  visitClassCreatorRest(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#explicitGenericInvocation.


  visitExplicitGenericInvocation(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#typeArgumentsOrDiamond.


  visitTypeArgumentsOrDiamond(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#nonWildcardTypeArgumentsOrDiamond.


  visitNonWildcardTypeArgumentsOrDiamond(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#nonWildcardTypeArguments.


  visitNonWildcardTypeArguments(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#typeList.


  visitTypeList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#typeType.


  visitTypeType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#primitiveType.


  visitPrimitiveType(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#typeArguments.


  visitTypeArguments(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#superSuffix.


  visitSuperSuffix(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#explicitGenericInvocationSuffix.


  visitExplicitGenericInvocationSuffix(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaParser#arguments.


  visitArguments(ctx) {
    return this.visitChildren(ctx);
  }

}

exports.default = JavaParserVisitor;

},{"antlr4":42}],142:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _JavaScriptParser = _interopRequireDefault(require("./JavaScriptParser.js"));

var _JavaScriptParserListener = _interopRequireDefault(require("./JavaScriptParserListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class JavaScriptAWSListener extends _JavaScriptParserListener.default {
  constructor() {
    super();
    this.SDKDeclarations = [];
    this.ClientDeclarations = [];
    this.ClientCalls = [];
    this.VariableDeclarations = [];
  }

  generateObjectLiteralMap(treeitem) {
    let propertyMap = {};

    for (let objectLiteralChild of treeitem.children[0].children) {
      if (objectLiteralChild instanceof _JavaScriptParser.default.PropertyExpressionAssignmentContext) {
        let propertyName = objectLiteralChild.children[0].getText().replace(/^['"](.*)['"]$/g, '$1'); // blah = {###'abc'###: 'def'}

        if (objectLiteralChild.children[2] instanceof _JavaScriptParser.default.LiteralExpressionContext) {
          // blah = {'abc': ###'def'###}
          let propertyValue = objectLiteralChild.children[2].getText().replace(/^['"](.*)['"]$/g, '$1');
          propertyMap[propertyName] = {
            'type': 'literal',
            'value': propertyValue
          };
        }

        if (objectLiteralChild.children[2] instanceof _JavaScriptParser.default.ObjectLiteralExpressionContext) {
          // blah = {'abc': ###{...}###}
          propertyMap[propertyName] = {
            'type': 'object',
            'value': this.generateObjectLiteralMap(objectLiteralChild.children[2])
          };
        }
      }
    }

    return propertyMap;
  }

  resolvePropertyMap(obj) {
    let ret = {};

    for (let k of Object.keys(obj)) {
      if (obj[k].type == "object") {
        ret[k] = this.resolvePropertyMap(obj[k].value);
      } else {
        ret[k] = obj[k].value;
      }
    }

    return ret;
  }

  resolveArgs(argsRaw) {
    let args = {};

    for (let argument of argsRaw.children) {
      if (argument instanceof _JavaScriptParser.default.ArgumentContext) {
        if (argument.children.length == 1) {
          // blah(###abc###) 
          if (argument.children[0] instanceof _JavaScriptParser.default.IdentifierExpressionContext) {
            let argumentsVariable = argument.children[0].getText();

            for (let variable of this.VariableDeclarations) {
              if (variable.variable == argumentsVariable) {
                if (variable.type == "object") {
                  args = this.resolvePropertyMap(variable.propertyMap);
                }
              }
            }
          }
        } // else blah(...###x###, )

      }
    }

    return args;
  }

  exitVariableDeclaration(ctx) {
    const assignable = ctx.children[0]; // ### = blah

    if (assignable.children.length && assignable.children[0] instanceof _JavaScriptParser.default.IdentifierContext) {
      if (ctx.children.length == 3) {
        const expression = ctx.children[2]; // blah = ###

        if (expression instanceof _JavaScriptParser.default.ArgumentsExpressionContext) {
          // find SDK requires
          if (expression.children[0].getText() == "require" && ["('aws-sdk')", "(\"aws-sdk\")"].includes(expression.children[1].getText())) {
            this.SDKDeclarations.push({
              'variable': assignable.getText()
            });
          }
        }

        if (expression instanceof _JavaScriptParser.default.NewExpressionContext) {
          // find client instantiations
          const className = expression.children[1]; // new ### (...)

          let argsRaw = null;

          if (expression.children.length == 3) {
            argsRaw = expression.children[2]; // new blah###(...)###
          }

          if (className instanceof _JavaScriptParser.default.MemberDotExpressionContext) {
            // blah.blah
            const namespace = className.children[0]; // ###.blah

            const method = className.children[className.children.length - 1]; // blah.###

            let foundDeclaration = false;

            for (let sdkDeclaration of this.SDKDeclarations) {
              if (namespace.getText() == sdkDeclaration['variable']) {
                this.ClientDeclarations.push({
                  'type': method.getText(),
                  'variable': assignable.getText(),
                  'argsRaw': argsRaw,
                  'sdk': sdkDeclaration
                });
                foundDeclaration = true;
                break;
              }
            }

            if (!foundDeclaration && namespace.getText() == "AWS") {
              // 2nd chance default
              this.ClientDeclarations.push({
                'type': method.getText(),
                'variable': assignable.getText(),
                'argsRaw': argsRaw,
                'sdk': null
              });
            }
          }
        }

        if (expression instanceof _JavaScriptParser.default.ObjectLiteralExpressionContext) {
          // blah = ###{...}###
          this.VariableDeclarations.push({
            'variable': assignable.getText(),
            'type': 'object',
            'propertyMap': this.generateObjectLiteralMap(expression)
          });
        }
      }
    }
  }

  exitArgumentsExpression(ctx) {
    const callMethod = ctx.children[0]; // ###()

    const argsRaw = ctx.children[1]; // blah###

    if (callMethod instanceof _JavaScriptParser.default.MemberDotExpressionContext) {
      const namespace = callMethod.children[0]; // ###.blah

      const method = callMethod.children[callMethod.children.length - 1]; // blah.###

      for (let clientDeclaration of this.ClientDeclarations) {
        if (namespace.getText() == clientDeclaration['variable']) {
          this.ClientCalls.push({
            'client': clientDeclaration,
            'method': method.getText(),
            'argsRaw': argsRaw,
            'args': this.resolveArgs(argsRaw)
          });
          break;
        }
      }
    }
  }

}

exports.default = JavaScriptAWSListener;

},{"./JavaScriptParser.js":145,"./JavaScriptParserListener.js":147}],143:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _JavaScriptLexerBase = _interopRequireDefault(require("./JavaScriptLexerBase.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/JavaScriptLexer.g4 by ANTLR 4.9.2
// jshint ignore: start
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786", "\u5964\u0002\u0081\u0489\b\u0001\b\u0001\u0004\u0002\t\u0002\u0004\u0003", "\t\u0003\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006", "\u0004\u0007\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b", "\t\u000b\u0004\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f", "\u0004\u0010\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013", "\t\u0013\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016", "\u0004\u0017\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a", "\t\u001a\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d", "\u0004\u001e\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"", "\t\"\u0004#\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004", ")\t)\u0004*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u0004", "0\t0\u00041\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u0004", "7\t7\u00048\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004", ">\t>\u0004?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004", "E\tE\u0004F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004", "L\tL\u0004M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004", "S\tS\u0004T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004", "Z\tZ\u0004[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004", "a\ta\u0004b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004", "h\th\u0004i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004", "o\to\u0004p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004", "v\tv\u0004w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004", "}\t}\u0004~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t", "\u0081\u0004\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004", "\u0085\t\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t", "\u0088\u0004\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004", "\u008c\t\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t", "\u008f\u0004\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004", "\u0093\t\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0003\u0002\u0003", "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u0132\n\u0002", "\f\u0002\u000e\u0002\u0135\u000b\u0002\u0003\u0003\u0003\u0003\u0003", "\u0003\u0003\u0003\u0007\u0003\u013b\n\u0003\f\u0003\u000e\u0003\u013e", "\u000b\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003", "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u0149\n", "\u0004\f\u0004\u000e\u0004\u014c\u000b\u0004\u0003\u0004\u0003\u0004", "\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0153\n\u0005\f\u0005", "\u000e\u0005\u0156\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007", "\u0005\u015b\n\u0005\f\u0005\u000e\u0005\u015e\u000b\u0005\u0003\u0006", "\u0003\u0006\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t", "\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b", "\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\u000e\u0003", "\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003", "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003", "\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003", "\u0015\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003", "\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003", "\u001b\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003", "\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003 \u0003", " \u0003 \u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003", "#\u0003#\u0003$\u0003$\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003", "\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)", "\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003-\u0003", "-\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u00030\u00030\u00030\u0003", "1\u00031\u00031\u00032\u00032\u00032\u00033\u00033\u00033\u00034\u0003", "4\u00034\u00035\u00035\u00035\u00035\u00036\u00036\u00036\u00036\u0003", "7\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00039\u00039\u0003", "9\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003", "<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003", ">\u0003>\u0003>\u0003>\u0003>\u0005>\u0207\n>\u0003?\u0003?\u0003?\u0003", "?\u0007?\u020d\n?\f?\u000e?\u0210\u000b?\u0003?\u0005?\u0213\n?\u0003", "?\u0003?\u0003?\u0007?\u0218\n?\f?\u000e?\u021b\u000b?\u0003?\u0005", "?\u021e\n?\u0003?\u0003?\u0005?\u0222\n?\u0005?\u0224\n?\u0003@\u0003", "@\u0003@\u0003@\u0007@\u022a\n@\f@\u000e@\u022d\u000b@\u0003A\u0003", "A\u0006A\u0231\nA\rA\u000eA\u0232\u0003A\u0003A\u0003B\u0003B\u0003", "B\u0003B\u0007B\u023b\nB\fB\u000eB\u023e\u000bB\u0003C\u0003C\u0003", "C\u0003C\u0007C\u0244\nC\fC\u000eC\u0247\u000bC\u0003D\u0003D\u0003", "D\u0003D\u0007D\u024d\nD\fD\u000eD\u0250\u000bD\u0003D\u0003D\u0003", "E\u0003E\u0003E\u0003E\u0007E\u0258\nE\fE\u000eE\u025b\u000bE\u0003", "E\u0003E\u0003F\u0003F\u0003F\u0003F\u0007F\u0263\nF\fF\u000eF\u0266", "\u000bF\u0003F\u0003F\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003", "H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003", "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003", "K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003M\u0003", "M\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003", "O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003", "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003", "R\u0003R\u0003R\u0003S\u0003S\u0003S\u0003S\u0003S\u0003T\u0003T\u0003", "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003", "U\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003W\u0003W\u0003", "W\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003", "X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003", "Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003", "[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003", "\\\u0003]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003", "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003", "a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003c\u0003c\u0003c\u0003", "c\u0003c\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003e\u0003e\u0003", "e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003", "f\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003h\u0003h\u0003h\u0003", "h\u0003h\u0003h\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003", "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003k\u0003k\u0003k\u0003", "k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003m\u0003", "m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003", "m\u0003m\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003o\u0003o\u0003", "o\u0003o\u0003o\u0003o\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003", "p\u0003p\u0003p\u0003p\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003", "q\u0003q\u0003q\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003", "r\u0003r\u0003r\u0003r\u0003r\u0003s\u0003s\u0003s\u0003s\u0003s\u0003", "s\u0003s\u0003s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003t\u0003t\u0003", "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003u\u0003u\u0003u\u0003", "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003v\u0003v\u0003v\u0003v\u0003", "v\u0003v\u0003v\u0003v\u0003w\u0003w\u0007w\u03ab\nw\fw\u000ew\u03ae", "\u000bw\u0003x\u0003x\u0007x\u03b2\nx\fx\u000ex\u03b5\u000bx\u0003x", "\u0003x\u0003x\u0007x\u03ba\nx\fx\u000ex\u03bd\u000bx\u0003x\u0005x", "\u03c0\nx\u0003x\u0003x\u0003y\u0003y\u0003y\u0003y\u0003y\u0003z\u0006", "z\u03ca\nz\rz\u000ez\u03cb\u0003z\u0003z\u0003{\u0003{\u0003{\u0003", "{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0007|\u03da\n|\f|\u000e", "|\u03dd\u000b|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003}\u0003", "}\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0007", "}\u03f0\n}\f}\u000e}\u03f3\u000b}\u0003}\u0003}\u0003}\u0003}\u0003", "}\u0003}\u0003~\u0003~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u007f", "\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0080", "\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0082\u0003\u0082", "\u0003\u0082\u0003\u0082\u0005\u0082\u0410\n\u0082\u0003\u0083\u0003", "\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0416\n\u0083\u0003\u0084", "\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u041d\n", "\u0084\u0003\u0085\u0003\u0085\u0005\u0085\u0421\n\u0085\u0003\u0086", "\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0003\u0087", "\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087", "\u0003\u0087\u0006\u0087\u0431\n\u0087\r\u0087\u000e\u0087\u0432\u0003", "\u0087\u0003\u0087\u0005\u0087\u0437\n\u0087\u0003\u0088\u0003\u0088", "\u0003\u0088\u0006\u0088\u043c\n\u0088\r\u0088\u000e\u0088\u043d\u0003", "\u0088\u0003\u0088\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003", "\u008b\u0003\u008b\u0005\u008b\u0448\n\u008b\u0003\u008c\u0003\u008c", "\u0003\u008c\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0003\u008e", "\u0007\u008e\u0452\n\u008e\f\u008e\u000e\u008e\u0455\u000b\u008e\u0005", "\u008e\u0457\n\u008e\u0003\u008f\u0003\u008f\u0005\u008f\u045b\n\u008f", "\u0003\u008f\u0006\u008f\u045e\n\u008f\r\u008f\u000e\u008f\u045f\u0003", "\u0090\u0003\u0090\u0005\u0090\u0464\n\u0090\u0003\u0091\u0003\u0091", "\u0003\u0091\u0005\u0091\u0469\n\u0091\u0003\u0092\u0003\u0092\u0003", "\u0092\u0003\u0092\u0007\u0092\u046f\n\u0092\f\u0092\u000e\u0092\u0472", "\u000b\u0092\u0003\u0092\u0005\u0092\u0475\n\u0092\u0003\u0093\u0003", "\u0093\u0003\u0093\u0003\u0093\u0007\u0093\u047b\n\u0093\f\u0093\u000e", "\u0093\u047e\u000b\u0093\u0003\u0093\u0005\u0093\u0481\n\u0093\u0003", "\u0094\u0003\u0094\u0005\u0094\u0485\n\u0094\u0003\u0095\u0003\u0095", "\u0003\u0095\u0005\u013c\u03db\u03f1\u0002\u0096\u0004\u0003\u0006\u0004", "\b\u0005\n\u0006\f\u0007\u000e\b\u0010\t\u0012\n\u0014\u000b\u0016\f", "\u0018\r\u001a\u000e\u001c\u000f\u001e\u0010 \u0011\"\u0012$\u0013&", "\u0014(\u0015*\u0016,\u0017.\u00180\u00192\u001a4\u001b6\u001c8\u001d", ":\u001e<\u001f> @!B\"D#F$H%J&L\'N(P)R*T+V,X-Z.\\/^0`1b2d3f4h5j6l7n8", "p9r:t;v<x=z>|?~@\u0080A\u0082B\u0084C\u0086D\u0088E\u008aF\u008cG\u008e", "H\u0090I\u0092J\u0094K\u0096L\u0098M\u009aN\u009cO\u009eP\u00a0Q\u00a2", "R\u00a4S\u00a6T\u00a8U\u00aaV\u00acW\u00aeX\u00b0Y\u00b2Z\u00b4[\u00b6", "\\\u00b8]\u00ba^\u00bc_\u00be`\u00c0a\u00c2b\u00c4c\u00c6d\u00c8e\u00ca", "f\u00ccg\u00ceh\u00d0i\u00d2j\u00d4k\u00d6l\u00d8m\u00dan\u00dco\u00de", "p\u00e0q\u00e2r\u00e4s\u00e6t\u00e8u\u00eav\u00ecw\u00eex\u00f0y\u00f2", "z\u00f4{\u00f6|\u00f8}\u00fa~\u00fc\u007f\u00fe\u0002\u0100\u0080\u0102", "\u0081\u0104\u0002\u0106\u0002\u0108\u0002\u010a\u0002\u010c\u0002\u010e", "\u0002\u0110\u0002\u0112\u0002\u0114\u0002\u0116\u0002\u0118\u0002\u011a", "\u0002\u011c\u0002\u011e\u0002\u0120\u0002\u0122\u0002\u0124\u0002\u0126", "\u0002\u0128\u0002\u012a\u0002\u0004\u0002\u0003\u001b\u0005\u0002\f", "\f\u000f\u000f\u202a\u202b\u0003\u00022;\u0004\u00022;aa\u0004\u0002", "ZZzz\u0005\u00022;CHch\u0003\u000229\u0004\u0002QQqq\u0004\u000229a", "a\u0004\u0002DDdd\u0003\u000223\u0004\u000223aa\u0006\u0002\u000b\u000b", "\r\u000e\"\"\u00a2\u00a2\u0003\u0002bb\u0006\u0002\f\f\u000f\u000f$", "$^^\u0006\u0002\f\f\u000f\u000f))^^\u000b\u0002$$))^^ddhhppttvvxx\u000e", "\u0002\f\f\u000f\u000f$$))2;^^ddhhppttvxzz\u0005\u00022;wwzz\u0006\u0002", "2;CHaach\u0003\u00023;\u0004\u0002GGgg\u0004\u0002--//\b\u0002\f\f\u000f", "\u000f,,11]^\u202a\u202b\u0007\u0002\f\f\u000f\u000f11]^\u202a\u202b", "\u0006\u0002\f\f\u000f\u000f^_\u202a\u202b\u0004\u016a\u00022\u0002", ";\u0002a\u0002a\u0002\u0302\u0002\u0371\u0002\u0485\u0002\u0489\u0002", "\u0593\u0002\u05bf\u0002\u05c1\u0002\u05c1\u0002\u05c3\u0002\u05c4\u0002", "\u05c6\u0002\u05c7\u0002\u05c9\u0002\u05c9\u0002\u0612\u0002\u061c\u0002", "\u064d\u0002\u066b\u0002\u0672\u0002\u0672\u0002\u06d8\u0002\u06de\u0002", "\u06e1\u0002\u06e6\u0002\u06e9\u0002\u06ea\u0002\u06ec\u0002\u06ef\u0002", "\u06f2\u0002\u06fb\u0002\u0713\u0002\u0713\u0002\u0732\u0002\u074c\u0002", "\u07a8\u0002\u07b2\u0002\u07c2\u0002\u07cb\u0002\u07ed\u0002\u07f5\u0002", "\u0818\u0002\u081b\u0002\u081d\u0002\u0825\u0002\u0827\u0002\u0829\u0002", "\u082b\u0002\u082f\u0002\u085b\u0002\u085d\u0002\u08d6\u0002\u08e3\u0002", "\u08e5\u0002\u0904\u0002\u093c\u0002\u093c\u0002\u093e\u0002\u093e\u0002", "\u0943\u0002\u094a\u0002\u094f\u0002\u094f\u0002\u0953\u0002\u0959\u0002", "\u0964\u0002\u0965\u0002\u0968\u0002\u0971\u0002\u0983\u0002\u0983\u0002", "\u09be\u0002\u09be\u0002\u09c3\u0002\u09c6\u0002\u09cf\u0002\u09cf\u0002", "\u09e4\u0002\u09e5\u0002\u09e8\u0002\u09f1\u0002\u0a03\u0002\u0a04\u0002", "\u0a3e\u0002\u0a3e\u0002\u0a43\u0002\u0a44\u0002\u0a49\u0002\u0a4a\u0002", "\u0a4d\u0002\u0a4f\u0002\u0a53\u0002\u0a53\u0002\u0a68\u0002\u0a73\u0002", "\u0a77\u0002\u0a77\u0002\u0a83\u0002\u0a84\u0002\u0abe\u0002\u0abe\u0002", "\u0ac3\u0002\u0ac7\u0002\u0ac9\u0002\u0aca\u0002\u0acf\u0002\u0acf\u0002", "\u0ae4\u0002\u0ae5\u0002\u0ae8\u0002\u0af1\u0002\u0afc\u0002\u0b01\u0002", "\u0b03\u0002\u0b03\u0002\u0b3e\u0002\u0b3e\u0002\u0b41\u0002\u0b41\u0002", "\u0b43\u0002\u0b46\u0002\u0b4f\u0002\u0b4f\u0002\u0b58\u0002\u0b58\u0002", "\u0b64\u0002\u0b65\u0002\u0b68\u0002\u0b71\u0002\u0b84\u0002\u0b84\u0002", "\u0bc2\u0002\u0bc2\u0002\u0bcf\u0002\u0bcf\u0002\u0be8\u0002\u0bf1\u0002", "\u0c02\u0002\u0c02\u0002\u0c40\u0002\u0c42\u0002\u0c48\u0002\u0c4a\u0002", "\u0c4c\u0002\u0c4f\u0002\u0c57\u0002\u0c58\u0002\u0c64\u0002\u0c65\u0002", "\u0c68\u0002\u0c71\u0002\u0c83\u0002\u0c83\u0002\u0cbe\u0002\u0cbe\u0002", "\u0cc1\u0002\u0cc1\u0002\u0cc8\u0002\u0cc8\u0002\u0cce\u0002\u0ccf\u0002", "\u0ce4\u0002\u0ce5\u0002\u0ce8\u0002\u0cf1\u0002\u0d02\u0002\u0d03\u0002", "\u0d3d\u0002\u0d3e\u0002\u0d43\u0002\u0d46\u0002\u0d4f\u0002\u0d4f\u0002", "\u0d64\u0002\u0d65\u0002\u0d68\u0002\u0d71\u0002\u0dcc\u0002\u0dcc\u0002", "\u0dd4\u0002\u0dd6\u0002\u0dd8\u0002\u0dd8\u0002\u0de8\u0002\u0df1\u0002", "\u0e33\u0002\u0e33\u0002\u0e36\u0002\u0e3c\u0002\u0e49\u0002\u0e50\u0002", "\u0e52\u0002\u0e5b\u0002\u0eb3\u0002\u0eb3\u0002\u0eb6\u0002\u0ebb\u0002", "\u0ebd\u0002\u0ebe\u0002\u0eca\u0002\u0ecf\u0002\u0ed2\u0002\u0edb\u0002", "\u0f1a\u0002\u0f1b\u0002\u0f22\u0002\u0f2b\u0002\u0f37\u0002\u0f37\u0002", "\u0f39\u0002\u0f39\u0002\u0f3b\u0002\u0f3b\u0002\u0f73\u0002\u0f80\u0002", "\u0f82\u0002\u0f86\u0002\u0f88\u0002\u0f89\u0002\u0f8f\u0002\u0f99\u0002", "\u0f9b\u0002\u0fbe\u0002\u0fc8\u0002\u0fc8\u0002\u102f\u0002\u1032\u0002", "\u1034\u0002\u1039\u0002\u103b\u0002\u103c\u0002\u103f\u0002\u1040\u0002", "\u1042\u0002\u104b\u0002\u105a\u0002\u105b\u0002\u1060\u0002\u1062\u0002", "\u1073\u0002\u1076\u0002\u1084\u0002\u1084\u0002\u1087\u0002\u1088\u0002", "\u108f\u0002\u108f\u0002\u1092\u0002\u109b\u0002\u109f\u0002\u109f\u0002", "\u135f\u0002\u1361\u0002\u1714\u0002\u1716\u0002\u1734\u0002\u1736\u0002", "\u1754\u0002\u1755\u0002\u1774\u0002\u1775\u0002\u17b6\u0002\u17b7\u0002", "\u17b9\u0002\u17bf\u0002\u17c8\u0002\u17c8\u0002\u17cb\u0002\u17d5\u0002", "\u17df\u0002\u17df\u0002\u17e2\u0002\u17eb\u0002\u180d\u0002\u180f\u0002", "\u1812\u0002\u181b\u0002\u1887\u0002\u1888\u0002\u18ab\u0002\u18ab\u0002", "\u1922\u0002\u1924\u0002\u1929\u0002\u192a\u0002\u1934\u0002\u1934\u0002", "\u193b\u0002\u193d\u0002\u1948\u0002\u1951\u0002\u19d2\u0002\u19db\u0002", "\u1a19\u0002\u1a1a\u0002\u1a1d\u0002\u1a1d\u0002\u1a58\u0002\u1a58\u0002", "\u1a5a\u0002\u1a60\u0002\u1a62\u0002\u1a62\u0002\u1a64\u0002\u1a64\u0002", "\u1a67\u0002\u1a6e\u0002\u1a75\u0002\u1a7e\u0002\u1a81\u0002\u1a8b\u0002", "\u1a92\u0002\u1a9b\u0002\u1ab2\u0002\u1abf\u0002\u1b02\u0002\u1b05\u0002", "\u1b36\u0002\u1b36\u0002\u1b38\u0002\u1b3c\u0002\u1b3e\u0002\u1b3e\u0002", "\u1b44\u0002\u1b44\u0002\u1b52\u0002\u1b5b\u0002\u1b6d\u0002\u1b75\u0002", "\u1b82\u0002\u1b83\u0002\u1ba4\u0002\u1ba7\u0002\u1baa\u0002\u1bab\u0002", "\u1bad\u0002\u1baf\u0002\u1bb2\u0002\u1bbb\u0002\u1be8\u0002\u1be8\u0002", "\u1bea\u0002\u1beb\u0002\u1bef\u0002\u1bef\u0002\u1bf1\u0002\u1bf3\u0002", "\u1c2e\u0002\u1c35\u0002\u1c38\u0002\u1c39\u0002\u1c42\u0002\u1c4b\u0002", "\u1c52\u0002\u1c5b\u0002\u1cd2\u0002\u1cd4\u0002\u1cd6\u0002\u1ce2\u0002", "\u1ce4\u0002\u1cea\u0002\u1cef\u0002\u1cef\u0002\u1cf6\u0002\u1cf6\u0002", "\u1cfa\u0002\u1cfb\u0002\u1dc2\u0002\u1dfb\u0002\u1dfd\u0002\u1e01\u0002", "\u200e\u0002\u200f\u0002\u2041\u0002\u2042\u0002\u2056\u0002\u2056\u0002", "\u20d2\u0002\u20de\u0002\u20e3\u0002\u20e3\u0002\u20e7\u0002\u20f2\u0002", "\u2cf1\u0002\u2cf3\u0002\u2d81\u0002\u2d81\u0002\u2de2\u0002\u2e01\u0002", "\u302c\u0002\u302f\u0002\u309b\u0002\u309c\u0002\ua622\u0002\ua62b\u0002", "\ua671\u0002\ua671\u0002\ua676\u0002\ua67f\u0002\ua6a0\u0002\ua6a1\u0002", "\ua6f2\u0002\ua6f3\u0002\ua804\u0002\ua804\u0002\ua808\u0002\ua808\u0002", "\ua80d\u0002\ua80d\u0002\ua827\u0002\ua828\u0002\ua8c6\u0002\ua8c7\u0002", "\ua8d2\u0002\ua8db\u0002\ua8e2\u0002\ua8f3\u0002\ua902\u0002\ua90b\u0002", "\ua928\u0002\ua92f\u0002\ua949\u0002\ua953\u0002\ua982\u0002\ua984\u0002", "\ua9b5\u0002\ua9b5\u0002\ua9b8\u0002\ua9bb\u0002\ua9be\u0002\ua9be\u0002", "\ua9d2\u0002\ua9db\u0002\ua9e7\u0002\ua9e7\u0002\ua9f2\u0002\ua9fb\u0002", "\uaa2b\u0002\uaa30\u0002\uaa33\u0002\uaa34\u0002\uaa37\u0002\uaa38\u0002", "\uaa45\u0002\uaa45\u0002\uaa4e\u0002\uaa4e\u0002\uaa52\u0002\uaa5b\u0002", "\uaa7e\u0002\uaa7e\u0002\uaab2\u0002\uaab2\u0002\uaab4\u0002\uaab6\u0002", "\uaab9\u0002\uaaba\u0002\uaac0\u0002\uaac1\u0002\uaac3\u0002\uaac3\u0002", "\uaaee\u0002\uaaef\u0002\uaaf8\u0002\uaaf8\u0002\uabe7\u0002\uabe7\u0002", "\uabea\u0002\uabea\u0002\uabef\u0002\uabef\u0002\uabf2\u0002\uabfb\u0002", "\ufb20\u0002\ufb20\u0002\ufe02\u0002\ufe11\u0002\ufe22\u0002\ufe31\u0002", "\ufe35\u0002\ufe36\u0002\ufe4f\u0002\ufe51\u0002\uff12\u0002\uff1b\u0002", "\uff41\u0002\uff41\u0002\u01ff\u0003\u01ff\u0003\u02e2\u0003\u02e2\u0003", "\u0378\u0003\u037c\u0003\u04a2\u0003\u04ab\u0003\u0a03\u0003\u0a05\u0003", "\u0a07\u0003\u0a08\u0003\u0a0e\u0003\u0a11\u0003\u0a3a\u0003\u0a3c\u0003", "\u0a41\u0003\u0a41\u0003\u0ae7\u0003\u0ae8\u0003\u1003\u0003\u1003\u0003", "\u103a\u0003\u1048\u0003\u1068\u0003\u1071\u0003\u1081\u0003\u1083\u0003", "\u10b5\u0003\u10b8\u0003\u10bb\u0003\u10bc\u0003\u10f2\u0003\u10fb\u0003", "\u1102\u0003\u1104\u0003\u1129\u0003\u112d\u0003\u112f\u0003\u1136\u0003", "\u1138\u0003\u1141\u0003\u1175\u0003\u1175\u0003\u1182\u0003\u1183\u0003", "\u11b8\u0003\u11c0\u0003\u11cc\u0003\u11ce\u0003\u11d2\u0003\u11db\u0003", "\u1231\u0003\u1233\u0003\u1236\u0003\u1236\u0003\u1238\u0003\u1239\u0003", "\u1240\u0003\u1240\u0003\u12e1\u0003\u12e1\u0003\u12e5\u0003\u12ec\u0003", "\u12f2\u0003\u12fb\u0003\u1302\u0003\u1303\u0003\u133e\u0003\u133e\u0003", "\u1342\u0003\u1342\u0003\u1368\u0003\u136e\u0003\u1372\u0003\u1376\u0003", "\u143a\u0003\u1441\u0003\u1444\u0003\u1446\u0003\u1448\u0003\u1448\u0003", "\u1452\u0003\u145b\u0003\u14b5\u0003\u14ba\u0003\u14bc\u0003\u14bc\u0003", "\u14c1\u0003\u14c2\u0003\u14c4\u0003\u14c5\u0003\u14d2\u0003\u14db\u0003", "\u15b4\u0003\u15b7\u0003\u15be\u0003\u15bf\u0003\u15c1\u0003\u15c2\u0003", "\u15de\u0003\u15df\u0003\u1635\u0003\u163c\u0003\u163f\u0003\u163f\u0003", "\u1641\u0003\u1642\u0003\u1652\u0003\u165b\u0003\u16ad\u0003\u16ad\u0003", "\u16af\u0003\u16af\u0003\u16b2\u0003\u16b7\u0003\u16b9\u0003\u16b9\u0003", "\u16c2\u0003\u16cb\u0003\u171f\u0003\u1721\u0003\u1724\u0003\u1727\u0003", "\u1729\u0003\u172d\u0003\u1732\u0003\u173b\u0003\u18e2\u0003\u18eb\u0003", "\u1a03\u0003\u1a08\u0003\u1a0b\u0003\u1a0c\u0003\u1a35\u0003\u1a3a\u0003", "\u1a3d\u0003\u1a40\u0003\u1a49\u0003\u1a49\u0003\u1a53\u0003\u1a58\u0003", "\u1a5b\u0003\u1a5d\u0003\u1a8c\u0003\u1a98\u0003\u1a9a\u0003\u1a9b\u0003", "\u1c32\u0003\u1c38\u0003\u1c3a\u0003\u1c3f\u0003\u1c41\u0003\u1c41\u0003", "\u1c52\u0003\u1c5b\u0003\u1c94\u0003\u1ca9\u0003\u1cac\u0003\u1cb2\u0003", "\u1cb4\u0003\u1cb5\u0003\u1cb7\u0003\u1cb8\u0003\u1d33\u0003\u1d38\u0003", "\u1d3c\u0003\u1d3c\u0003\u1d3e\u0003\u1d3f\u0003\u1d41\u0003\u1d47\u0003", "\u1d49\u0003\u1d49\u0003\u1d52\u0003\u1d5b\u0003\u6a62\u0003\u6a6b\u0003", "\u6af2\u0003\u6af6\u0003\u6b32\u0003\u6b38\u0003\u6b52\u0003\u6b5b\u0003", "\u6f91\u0003\u6f94\u0003\ubc9f\u0003\ubca0\u0003\ud169\u0003\ud16b\u0003", "\ud17d\u0003\ud184\u0003\ud187\u0003\ud18d\u0003\ud1ac\u0003\ud1af\u0003", "\ud244\u0003\ud246\u0003\ud7d0\u0003\ud801\u0003\uda02\u0003\uda38\u0003", "\uda3d\u0003\uda6e\u0003\uda77\u0003\uda77\u0003\uda86\u0003\uda86\u0003", "\uda9d\u0003\udaa1\u0003\udaa3\u0003\udab1\u0003\ue002\u0003\ue008\u0003", "\ue00a\u0003\ue01a\u0003\ue01d\u0003\ue023\u0003\ue025\u0003\ue026\u0003", "\ue028\u0003\ue02c\u0003\ue8d2\u0003\ue8d8\u0003\ue946\u0003\ue94c\u0003", "\ue952\u0003\ue95b\u0003\u0102\u0010\u01f1\u0010\u024d\u0002&\u0002", "&\u0002C\u0002\\\u0002a\u0002a\u0002c\u0002|\u0002\u00ac\u0002\u00ac", "\u0002\u00b7\u0002\u00b7\u0002\u00bc\u0002\u00bc\u0002\u00c2\u0002\u00d8", "\u0002\u00da\u0002\u00f8\u0002\u00fa\u0002\u02c3\u0002\u02c8\u0002\u02d3", "\u0002\u02e2\u0002\u02e6\u0002\u02ee\u0002\u02ee\u0002\u02f0\u0002\u02f0", "\u0002\u0372\u0002\u0376\u0002\u0378\u0002\u0379\u0002\u037c\u0002\u037f", "\u0002\u0381\u0002\u0381\u0002\u0388\u0002\u0388\u0002\u038a\u0002\u038c", "\u0002\u038e\u0002\u038e\u0002\u0390\u0002\u03a3\u0002\u03a5\u0002\u03f7", "\u0002\u03f9\u0002\u0483\u0002\u048c\u0002\u0531\u0002\u0533\u0002\u0558", "\u0002\u055b\u0002\u055b\u0002\u0563\u0002\u0589\u0002\u05d2\u0002\u05ec", "\u0002\u05f2\u0002\u05f4\u0002\u0622\u0002\u064c\u0002\u0670\u0002\u0671", "\u0002\u0673\u0002\u06d5\u0002\u06d7\u0002\u06d7\u0002\u06e7\u0002\u06e8", "\u0002\u06f0\u0002\u06f1\u0002\u06fc\u0002\u06fe\u0002\u0701\u0002\u0701", "\u0002\u0712\u0002\u0712\u0002\u0714\u0002\u0731\u0002\u074f\u0002\u07a7", "\u0002\u07b3\u0002\u07b3\u0002\u07cc\u0002\u07ec\u0002\u07f6\u0002\u07f7", "\u0002\u07fc\u0002\u07fc\u0002\u0802\u0002\u0817\u0002\u081c\u0002\u081c", "\u0002\u0826\u0002\u0826\u0002\u082a\u0002\u082a\u0002\u0842\u0002\u085a", "\u0002\u0862\u0002\u086c\u0002\u08a2\u0002\u08b6\u0002\u08b8\u0002\u08bf", "\u0002\u0906\u0002\u093b\u0002\u093f\u0002\u093f\u0002\u0952\u0002\u0952", "\u0002\u095a\u0002\u0963\u0002\u0973\u0002\u0982\u0002\u0987\u0002\u098e", "\u0002\u0991\u0002\u0992\u0002\u0995\u0002\u09aa\u0002\u09ac\u0002\u09b2", "\u0002\u09b4\u0002\u09b4\u0002\u09b8\u0002\u09bb\u0002\u09bf\u0002\u09bf", "\u0002\u09d0\u0002\u09d0\u0002\u09de\u0002\u09df\u0002\u09e1\u0002\u09e3", "\u0002\u09f2\u0002\u09f3\u0002\u09fe\u0002\u09fe\u0002\u0a07\u0002\u0a0c", "\u0002\u0a11\u0002\u0a12\u0002\u0a15\u0002\u0a2a\u0002\u0a2c\u0002\u0a32", "\u0002\u0a34\u0002\u0a35\u0002\u0a37\u0002\u0a38\u0002\u0a3a\u0002\u0a3b", "\u0002\u0a5b\u0002\u0a5e\u0002\u0a60\u0002\u0a60\u0002\u0a74\u0002\u0a76", "\u0002\u0a87\u0002\u0a8f\u0002\u0a91\u0002\u0a93\u0002\u0a95\u0002\u0aaa", "\u0002\u0aac\u0002\u0ab2\u0002\u0ab4\u0002\u0ab5\u0002\u0ab7\u0002\u0abb", "\u0002\u0abf\u0002\u0abf\u0002\u0ad2\u0002\u0ad2\u0002\u0ae2\u0002\u0ae3", "\u0002\u0afb\u0002\u0afb\u0002\u0b07\u0002\u0b0e\u0002\u0b11\u0002\u0b12", "\u0002\u0b15\u0002\u0b2a\u0002\u0b2c\u0002\u0b32\u0002\u0b34\u0002\u0b35", "\u0002\u0b37\u0002\u0b3b\u0002\u0b3f\u0002\u0b3f\u0002\u0b5e\u0002\u0b5f", "\u0002\u0b61\u0002\u0b63\u0002\u0b73\u0002\u0b73\u0002\u0b85\u0002\u0b85", "\u0002\u0b87\u0002\u0b8c\u0002\u0b90\u0002\u0b92\u0002\u0b94\u0002\u0b97", "\u0002\u0b9b\u0002\u0b9c\u0002\u0b9e\u0002\u0b9e\u0002\u0ba0\u0002\u0ba1", "\u0002\u0ba5\u0002\u0ba6\u0002\u0baa\u0002\u0bac\u0002\u0bb0\u0002\u0bbb", "\u0002\u0bd2\u0002\u0bd2\u0002\u0c07\u0002\u0c0e\u0002\u0c10\u0002\u0c12", "\u0002\u0c14\u0002\u0c2a\u0002\u0c2c\u0002\u0c3b\u0002\u0c3f\u0002\u0c3f", "\u0002\u0c5a\u0002\u0c5c\u0002\u0c62\u0002\u0c63\u0002\u0c82\u0002\u0c82", "\u0002\u0c87\u0002\u0c8e\u0002\u0c90\u0002\u0c92\u0002\u0c94\u0002\u0caa", "\u0002\u0cac\u0002\u0cb5\u0002\u0cb7\u0002\u0cbb\u0002\u0cbf\u0002\u0cbf", "\u0002\u0ce0\u0002\u0ce0\u0002\u0ce2\u0002\u0ce3\u0002\u0cf3\u0002\u0cf4", "\u0002\u0d07\u0002\u0d0e\u0002\u0d10\u0002\u0d12\u0002\u0d14\u0002\u0d3c", "\u0002\u0d3f\u0002\u0d3f\u0002\u0d50\u0002\u0d50\u0002\u0d56\u0002\u0d58", "\u0002\u0d61\u0002\u0d63\u0002\u0d7c\u0002\u0d81\u0002\u0d87\u0002\u0d98", "\u0002\u0d9c\u0002\u0db3\u0002\u0db5\u0002\u0dbd\u0002\u0dbf\u0002\u0dbf", "\u0002\u0dc2\u0002\u0dc8\u0002\u0e03\u0002\u0e32\u0002\u0e34\u0002\u0e35", "\u0002\u0e42\u0002\u0e48\u0002\u0e83\u0002\u0e84\u0002\u0e86\u0002\u0e86", "\u0002\u0e89\u0002\u0e8a\u0002\u0e8c\u0002\u0e8c\u0002\u0e8f\u0002\u0e8f", "\u0002\u0e96\u0002\u0e99\u0002\u0e9b\u0002\u0ea1\u0002\u0ea3\u0002\u0ea5", "\u0002\u0ea7\u0002\u0ea7\u0002\u0ea9\u0002\u0ea9\u0002\u0eac\u0002\u0ead", "\u0002\u0eaf\u0002\u0eb2\u0002\u0eb4\u0002\u0eb5\u0002\u0ebf\u0002\u0ebf", "\u0002\u0ec2\u0002\u0ec6\u0002\u0ec8\u0002\u0ec8\u0002\u0ede\u0002\u0ee1", "\u0002\u0f02\u0002\u0f02\u0002\u0f42\u0002\u0f49\u0002\u0f4b\u0002\u0f6e", "\u0002\u0f8a\u0002\u0f8e\u0002\u1002\u0002\u102c\u0002\u1041\u0002\u1041", "\u0002\u1052\u0002\u1057\u0002\u105c\u0002\u105f\u0002\u1063\u0002\u1063", "\u0002\u1067\u0002\u1068\u0002\u1070\u0002\u1072\u0002\u1077\u0002\u1083", "\u0002\u1090\u0002\u1090\u0002\u10a2\u0002\u10c7\u0002\u10c9\u0002\u10c9", "\u0002\u10cf\u0002\u10cf\u0002\u10d2\u0002\u10fc\u0002\u10fe\u0002\u124a", "\u0002\u124c\u0002\u124f\u0002\u1252\u0002\u1258\u0002\u125a\u0002\u125a", "\u0002\u125c\u0002\u125f\u0002\u1262\u0002\u128a\u0002\u128c\u0002\u128f", "\u0002\u1292\u0002\u12b2\u0002\u12b4\u0002\u12b7\u0002\u12ba\u0002\u12c0", "\u0002\u12c2\u0002\u12c2\u0002\u12c4\u0002\u12c7\u0002\u12ca\u0002\u12d8", "\u0002\u12da\u0002\u1312\u0002\u1314\u0002\u1317\u0002\u131a\u0002\u135c", "\u0002\u1382\u0002\u1391\u0002\u13a2\u0002\u13f7\u0002\u13fa\u0002\u13ff", "\u0002\u1403\u0002\u166e\u0002\u1671\u0002\u1681\u0002\u1683\u0002\u169c", "\u0002\u16a2\u0002\u16ec\u0002\u16f3\u0002\u16fa\u0002\u1702\u0002\u170e", "\u0002\u1710\u0002\u1713\u0002\u1722\u0002\u1733\u0002\u1742\u0002\u1753", "\u0002\u1762\u0002\u176e\u0002\u1770\u0002\u1772\u0002\u1782\u0002\u17b5", "\u0002\u17d9\u0002\u17d9\u0002\u17de\u0002\u17de\u0002\u1822\u0002\u1879", "\u0002\u1882\u0002\u1886\u0002\u1889\u0002\u18aa\u0002\u18ac\u0002\u18ac", "\u0002\u18b2\u0002\u18f7\u0002\u1902\u0002\u1920\u0002\u1952\u0002\u196f", "\u0002\u1972\u0002\u1976\u0002\u1982\u0002\u19ad\u0002\u19b2\u0002\u19cb", "\u0002\u1a02\u0002\u1a18\u0002\u1a22\u0002\u1a56\u0002\u1aa9\u0002\u1aa9", "\u0002\u1b07\u0002\u1b35\u0002\u1b47\u0002\u1b4d\u0002\u1b85\u0002\u1ba2", "\u0002\u1bb0\u0002\u1bb1\u0002\u1bbc\u0002\u1be7\u0002\u1c02\u0002\u1c25", "\u0002\u1c4f\u0002\u1c51\u0002\u1c5c\u0002\u1c7f\u0002\u1c82\u0002\u1c8a", "\u0002\u1ceb\u0002\u1cee\u0002\u1cf0\u0002\u1cf3\u0002\u1cf7\u0002\u1cf8", "\u0002\u1d02\u0002\u1dc1\u0002\u1e02\u0002\u1f17\u0002\u1f1a\u0002\u1f1f", "\u0002\u1f22\u0002\u1f47\u0002\u1f4a\u0002\u1f4f\u0002\u1f52\u0002\u1f59", "\u0002\u1f5b\u0002\u1f5b\u0002\u1f5d\u0002\u1f5d\u0002\u1f5f\u0002\u1f5f", "\u0002\u1f61\u0002\u1f7f\u0002\u1f82\u0002\u1fb6\u0002\u1fb8\u0002\u1fbe", "\u0002\u1fc0\u0002\u1fc0\u0002\u1fc4\u0002\u1fc6\u0002\u1fc8\u0002\u1fce", "\u0002\u1fd2\u0002\u1fd5\u0002\u1fd8\u0002\u1fdd\u0002\u1fe2\u0002\u1fee", "\u0002\u1ff4\u0002\u1ff6\u0002\u1ff8\u0002\u1ffe\u0002\u2073\u0002\u2073", "\u0002\u2081\u0002\u2081\u0002\u2092\u0002\u209e\u0002\u2104\u0002\u2104", "\u0002\u2109\u0002\u2109\u0002\u210c\u0002\u2115\u0002\u2117\u0002\u2117", "\u0002\u211b\u0002\u211f\u0002\u2126\u0002\u2126\u0002\u2128\u0002\u2128", "\u0002\u212a\u0002\u212a\u0002\u212c\u0002\u212f\u0002\u2131\u0002\u213b", "\u0002\u213e\u0002\u2141\u0002\u2147\u0002\u214b\u0002\u2150\u0002\u2150", "\u0002\u2185\u0002\u2186\u0002\u2c02\u0002\u2c30\u0002\u2c32\u0002\u2c60", "\u0002\u2c62\u0002\u2ce6\u0002\u2ced\u0002\u2cf0\u0002\u2cf4\u0002\u2cf5", "\u0002\u2d02\u0002\u2d27\u0002\u2d29\u0002\u2d29\u0002\u2d2f\u0002\u2d2f", "\u0002\u2d32\u0002\u2d69\u0002\u2d71\u0002\u2d71\u0002\u2d82\u0002\u2d98", "\u0002\u2da2\u0002\u2da8\u0002\u2daa\u0002\u2db0\u0002\u2db2\u0002\u2db8", "\u0002\u2dba\u0002\u2dc0\u0002\u2dc2\u0002\u2dc8\u0002\u2dca\u0002\u2dd0", "\u0002\u2dd2\u0002\u2dd8\u0002\u2dda\u0002\u2de0\u0002\u2e31\u0002\u2e31", "\u0002\u3007\u0002\u3008\u0002\u3033\u0002\u3037\u0002\u303d\u0002\u303e", "\u0002\u3043\u0002\u3098\u0002\u309f\u0002\u30a1\u0002\u30a3\u0002\u30fc", "\u0002\u30fe\u0002\u3101\u0002\u3107\u0002\u3130\u0002\u3133\u0002\u3190", "\u0002\u31a2\u0002\u31bc\u0002\u31f2\u0002\u3201\u0002\u3402\u0002\u4db7", "\u0002\u4e02\u0002\u9fec\u0002\ua002\u0002\ua48e\u0002\ua4d2\u0002\ua4ff", "\u0002\ua502\u0002\ua60e\u0002\ua612\u0002\ua621\u0002\ua62c\u0002\ua62d", "\u0002\ua642\u0002\ua670\u0002\ua681\u0002\ua69f\u0002\ua6a2\u0002\ua6e7", "\u0002\ua719\u0002\ua721\u0002\ua724\u0002\ua78a\u0002\ua78d\u0002\ua7b0", "\u0002\ua7b2\u0002\ua7b9\u0002\ua7f9\u0002\ua803\u0002\ua805\u0002\ua807", "\u0002\ua809\u0002\ua80c\u0002\ua80e\u0002\ua824\u0002\ua842\u0002\ua875", "\u0002\ua884\u0002\ua8b5\u0002\ua8f4\u0002\ua8f9\u0002\ua8fd\u0002\ua8fd", "\u0002\ua8ff\u0002\ua8ff\u0002\ua90c\u0002\ua927\u0002\ua932\u0002\ua948", "\u0002\ua962\u0002\ua97e\u0002\ua986\u0002\ua9b4\u0002\ua9d1\u0002\ua9d1", "\u0002\ua9e2\u0002\ua9e6\u0002\ua9e8\u0002\ua9f1\u0002\ua9fc\u0002\uaa00", "\u0002\uaa02\u0002\uaa2a\u0002\uaa42\u0002\uaa44\u0002\uaa46\u0002\uaa4d", "\u0002\uaa62\u0002\uaa78\u0002\uaa7c\u0002\uaa7c\u0002\uaa80\u0002\uaab1", "\u0002\uaab3\u0002\uaab3\u0002\uaab7\u0002\uaab8\u0002\uaabb\u0002\uaabf", "\u0002\uaac2\u0002\uaac2\u0002\uaac4\u0002\uaac4\u0002\uaadd\u0002\uaadf", "\u0002\uaae2\u0002\uaaec\u0002\uaaf4\u0002\uaaf6\u0002\uab03\u0002\uab08", "\u0002\uab0b\u0002\uab10\u0002\uab13\u0002\uab18\u0002\uab22\u0002\uab28", "\u0002\uab2a\u0002\uab30\u0002\uab32\u0002\uab5c\u0002\uab5e\u0002\uab67", "\u0002\uab72\u0002\uabe4\u0002\uac02\u0002\ud7a5\u0002\ud7b2\u0002\ud7c8", "\u0002\ud7cd\u0002\ud7fd\u0002\uf902\u0002\ufa6f\u0002\ufa72\u0002\ufadb", "\u0002\ufb02\u0002\ufb08\u0002\ufb15\u0002\ufb19\u0002\ufb1f\u0002\ufb1f", "\u0002\ufb21\u0002\ufb2a\u0002\ufb2c\u0002\ufb38\u0002\ufb3a\u0002\ufb3e", "\u0002\ufb40\u0002\ufb40\u0002\ufb42\u0002\ufb43\u0002\ufb45\u0002\ufb46", "\u0002\ufb48\u0002\ufbb3\u0002\ufbd5\u0002\ufd3f\u0002\ufd52\u0002\ufd91", "\u0002\ufd94\u0002\ufdc9\u0002\ufdf2\u0002\ufdfd\u0002\ufe72\u0002\ufe76", "\u0002\ufe78\u0002\ufefe\u0002\uff23\u0002\uff3c\u0002\uff43\u0002\uff5c", "\u0002\uff68\u0002\uffc0\u0002\uffc4\u0002\uffc9\u0002\uffcc\u0002\uffd1", "\u0002\uffd4\u0002\uffd9\u0002\uffdc\u0002\uffde\u0002\u0002\u0003\r", "\u0003\u000f\u0003(\u0003*\u0003<\u0003>\u0003?\u0003A\u0003O\u0003", "R\u0003_\u0003\u0082\u0003\u00fc\u0003\u0282\u0003\u029e\u0003\u02a2", "\u0003\u02d2\u0003\u0302\u0003\u0321\u0003\u032f\u0003\u0342\u0003\u0344", "\u0003\u034b\u0003\u0352\u0003\u0377\u0003\u0382\u0003\u039f\u0003\u03a2", "\u0003\u03c5\u0003\u03ca\u0003\u03d1\u0003\u0402\u0003\u049f\u0003\u04b2", "\u0003\u04d5\u0003\u04da\u0003\u04fd\u0003\u0502\u0003\u0529\u0003\u0532", "\u0003\u0565\u0003\u0602\u0003\u0738\u0003\u0742\u0003\u0757\u0003\u0762", "\u0003\u0769\u0003\u0802\u0003\u0807\u0003\u080a\u0003\u080a\u0003\u080c", "\u0003\u0837\u0003\u0839\u0003\u083a\u0003\u083e\u0003\u083e\u0003\u0841", "\u0003\u0857\u0003\u0862\u0003\u0878\u0003\u0882\u0003\u08a0\u0003\u08e2", "\u0003\u08f4\u0003\u08f6\u0003\u08f7\u0003\u0902\u0003\u0917\u0003\u0922", "\u0003\u093b\u0003\u0982\u0003\u09b9\u0003\u09c0\u0003\u09c1\u0003\u0a02", "\u0003\u0a02\u0003\u0a12\u0003\u0a15\u0003\u0a17\u0003\u0a19\u0003\u0a1b", "\u0003\u0a35\u0003\u0a62\u0003\u0a7e\u0003\u0a82\u0003\u0a9e\u0003\u0ac2", "\u0003\u0ac9\u0003\u0acb\u0003\u0ae6\u0003\u0b02\u0003\u0b37\u0003\u0b42", "\u0003\u0b57\u0003\u0b62\u0003\u0b74\u0003\u0b82\u0003\u0b93\u0003\u0c02", "\u0003\u0c4a\u0003\u0c82\u0003\u0cb4\u0003\u0cc2\u0003\u0cf4\u0003\u1005", "\u0003\u1039\u0003\u1085\u0003\u10b1\u0003\u10d2\u0003\u10ea\u0003\u1105", "\u0003\u1128\u0003\u1152\u0003\u1174\u0003\u1178\u0003\u1178\u0003\u1185", "\u0003\u11b4\u0003\u11c3\u0003\u11c6\u0003\u11dc\u0003\u11dc\u0003\u11de", "\u0003\u11de\u0003\u1202\u0003\u1213\u0003\u1215\u0003\u122d\u0003\u1282", "\u0003\u1288\u0003\u128a\u0003\u128a\u0003\u128c\u0003\u128f\u0003\u1291", "\u0003\u129f\u0003\u12a1\u0003\u12aa\u0003\u12b2\u0003\u12e0\u0003\u1307", "\u0003\u130e\u0003\u1311\u0003\u1312\u0003\u1315\u0003\u132a\u0003\u132c", "\u0003\u1332\u0003\u1334\u0003\u1335\u0003\u1337\u0003\u133b\u0003\u133f", "\u0003\u133f\u0003\u1352\u0003\u1352\u0003\u135f\u0003\u1363\u0003\u1402", "\u0003\u1436\u0003\u1449\u0003\u144c\u0003\u1482\u0003\u14b1\u0003\u14c6", "\u0003\u14c7\u0003\u14c9\u0003\u14c9\u0003\u1582\u0003\u15b0\u0003\u15da", "\u0003\u15dd\u0003\u1602\u0003\u1631\u0003\u1646\u0003\u1646\u0003\u1682", "\u0003\u16ac\u0003\u1702\u0003\u171b\u0003\u18a2\u0003\u18e1\u0003\u1901", "\u0003\u1901\u0003\u1a02\u0003\u1a02\u0003\u1a0d\u0003\u1a34\u0003\u1a3c", "\u0003\u1a3c\u0003\u1a52\u0003\u1a52\u0003\u1a5e\u0003\u1a85\u0003\u1a88", "\u0003\u1a8b\u0003\u1ac2\u0003\u1afa\u0003\u1c02\u0003\u1c0a\u0003\u1c0c", "\u0003\u1c30\u0003\u1c42\u0003\u1c42\u0003\u1c74\u0003\u1c91\u0003\u1d02", "\u0003\u1d08\u0003\u1d0a\u0003\u1d0b\u0003\u1d0d\u0003\u1d32\u0003\u1d48", "\u0003\u1d48\u0003\u2002\u0003\u239b\u0003\u2482\u0003\u2545\u0003\u3002", "\u0003\u3430\u0003\u4402\u0003\u4648\u0003\u6802\u0003\u6a3a\u0003\u6a42", "\u0003\u6a60\u0003\u6ad2\u0003\u6aef\u0003\u6b02\u0003\u6b31\u0003\u6b42", "\u0003\u6b45\u0003\u6b65\u0003\u6b79\u0003\u6b7f\u0003\u6b91\u0003\u6f02", "\u0003\u6f46\u0003\u6f52\u0003\u6f52\u0003\u6f95\u0003\u6fa1\u0003\u6fe2", "\u0003\u6fe3\u0003\u7002\u0003\u87ee\u0003\u8802\u0003\u8af4\u0003\ub002", "\u0003\ub120\u0003\ub172\u0003\ub2fd\u0003\ubc02\u0003\ubc6c\u0003\ubc72", "\u0003\ubc7e\u0003\ubc82\u0003\ubc8a\u0003\ubc92\u0003\ubc9b\u0003\ud402", "\u0003\ud456\u0003\ud458\u0003\ud49e\u0003\ud4a0\u0003\ud4a1\u0003\ud4a4", "\u0003\ud4a4\u0003\ud4a7\u0003\ud4a8\u0003\ud4ab\u0003\ud4ae\u0003\ud4b0", "\u0003\ud4bb\u0003\ud4bd\u0003\ud4bd\u0003\ud4bf\u0003\ud4c5\u0003\ud4c7", "\u0003\ud507\u0003\ud509\u0003\ud50c\u0003\ud50f\u0003\ud516\u0003\ud518", "\u0003\ud51e\u0003\ud520\u0003\ud53b\u0003\ud53d\u0003\ud540\u0003\ud542", "\u0003\ud546\u0003\ud548\u0003\ud548\u0003\ud54c\u0003\ud552\u0003\ud554", "\u0003\ud6a7\u0003\ud6aa\u0003\ud6c2\u0003\ud6c4\u0003\ud6dc\u0003\ud6de", "\u0003\ud6fc\u0003\ud6fe\u0003\ud716\u0003\ud718\u0003\ud736\u0003\ud738", "\u0003\ud750\u0003\ud752\u0003\ud770\u0003\ud772\u0003\ud78a\u0003\ud78c", "\u0003\ud7aa\u0003\ud7ac\u0003\ud7c4\u0003\ud7c6\u0003\ud7cd\u0003\ue802", "\u0003\ue8c6\u0003\ue902\u0003\ue945\u0003\uee02\u0003\uee05\u0003\uee07", "\u0003\uee21\u0003\uee23\u0003\uee24\u0003\uee26\u0003\uee26\u0003\uee29", "\u0003\uee29\u0003\uee2b\u0003\uee34\u0003\uee36\u0003\uee39\u0003\uee3b", "\u0003\uee3b\u0003\uee3d\u0003\uee3d\u0003\uee44\u0003\uee44\u0003\uee49", "\u0003\uee49\u0003\uee4b\u0003\uee4b\u0003\uee4d\u0003\uee4d\u0003\uee4f", "\u0003\uee51\u0003\uee53\u0003\uee54\u0003\uee56\u0003\uee56\u0003\uee59", "\u0003\uee59\u0003\uee5b\u0003\uee5b\u0003\uee5d\u0003\uee5d\u0003\uee5f", "\u0003\uee5f\u0003\uee61\u0003\uee61\u0003\uee63\u0003\uee64\u0003\uee66", "\u0003\uee66\u0003\uee69\u0003\uee6c\u0003\uee6e\u0003\uee74\u0003\uee76", "\u0003\uee79\u0003\uee7b\u0003\uee7e\u0003\uee80\u0003\uee80\u0003\uee82", "\u0003\uee8b\u0003\uee8d\u0003\uee9d\u0003\ueea3\u0003\ueea5\u0003\ueea7", "\u0003\ueeab\u0003\ueead\u0003\ueebd\u0003\u0002\u0004\ua6d8\u0004\ua702", "\u0004\ub736\u0004\ub742\u0004\ub81f\u0004\ub822\u0004\ucea3\u0004\uceb2", "\u0004\uebe2\u0004\uf802\u0004\ufa1f\u0004\u04a8\u0002\u0004\u0003\u0002", "\u0002\u0002\u0002\u0006\u0003\u0002\u0002\u0002\u0002\b\u0003\u0002", "\u0002\u0002\u0002\n\u0003\u0002\u0002\u0002\u0002\f\u0003\u0002\u0002", "\u0002\u0002\u000e\u0003\u0002\u0002\u0002\u0002\u0010\u0003\u0002\u0002", "\u0002\u0002\u0012\u0003\u0002\u0002\u0002\u0002\u0014\u0003\u0002\u0002", "\u0002\u0002\u0016\u0003\u0002\u0002\u0002\u0002\u0018\u0003\u0002\u0002", "\u0002\u0002\u001a\u0003\u0002\u0002\u0002\u0002\u001c\u0003\u0002\u0002", "\u0002\u0002\u001e\u0003\u0002\u0002\u0002\u0002 \u0003\u0002\u0002", "\u0002\u0002\"\u0003\u0002\u0002\u0002\u0002$\u0003\u0002\u0002\u0002", "\u0002&\u0003\u0002\u0002\u0002\u0002(\u0003\u0002\u0002\u0002\u0002", "*\u0003\u0002\u0002\u0002\u0002,\u0003\u0002\u0002\u0002\u0002.\u0003", "\u0002\u0002\u0002\u00020\u0003\u0002\u0002\u0002\u00022\u0003\u0002", "\u0002\u0002\u00024\u0003\u0002\u0002\u0002\u00026\u0003\u0002\u0002", "\u0002\u00028\u0003\u0002\u0002\u0002\u0002:\u0003\u0002\u0002\u0002", "\u0002<\u0003\u0002\u0002\u0002\u0002>\u0003\u0002\u0002\u0002\u0002", "@\u0003\u0002\u0002\u0002\u0002B\u0003\u0002\u0002\u0002\u0002D\u0003", "\u0002\u0002\u0002\u0002F\u0003\u0002\u0002\u0002\u0002H\u0003\u0002", "\u0002\u0002\u0002J\u0003\u0002\u0002\u0002\u0002L\u0003\u0002\u0002", "\u0002\u0002N\u0003\u0002\u0002\u0002\u0002P\u0003\u0002\u0002\u0002", "\u0002R\u0003\u0002\u0002\u0002\u0002T\u0003\u0002\u0002\u0002\u0002", "V\u0003\u0002\u0002\u0002\u0002X\u0003\u0002\u0002\u0002\u0002Z\u0003", "\u0002\u0002\u0002\u0002\\\u0003\u0002\u0002\u0002\u0002^\u0003\u0002", "\u0002\u0002\u0002`\u0003\u0002\u0002\u0002\u0002b\u0003\u0002\u0002", "\u0002\u0002d\u0003\u0002\u0002\u0002\u0002f\u0003\u0002\u0002\u0002", "\u0002h\u0003\u0002\u0002\u0002\u0002j\u0003\u0002\u0002\u0002\u0002", "l\u0003\u0002\u0002\u0002\u0002n\u0003\u0002\u0002\u0002\u0002p\u0003", "\u0002\u0002\u0002\u0002r\u0003\u0002\u0002\u0002\u0002t\u0003\u0002", "\u0002\u0002\u0002v\u0003\u0002\u0002\u0002\u0002x\u0003\u0002\u0002", "\u0002\u0002z\u0003\u0002\u0002\u0002\u0002|\u0003\u0002\u0002\u0002", "\u0002~\u0003\u0002\u0002\u0002\u0002\u0080\u0003\u0002\u0002\u0002", "\u0002\u0082\u0003\u0002\u0002\u0002\u0002\u0084\u0003\u0002\u0002\u0002", "\u0002\u0086\u0003\u0002\u0002\u0002\u0002\u0088\u0003\u0002\u0002\u0002", "\u0002\u008a\u0003\u0002\u0002\u0002\u0002\u008c\u0003\u0002\u0002\u0002", "\u0002\u008e\u0003\u0002\u0002\u0002\u0002\u0090\u0003\u0002\u0002\u0002", "\u0002\u0092\u0003\u0002\u0002\u0002\u0002\u0094\u0003\u0002\u0002\u0002", "\u0002\u0096\u0003\u0002\u0002\u0002\u0002\u0098\u0003\u0002\u0002\u0002", "\u0002\u009a\u0003\u0002\u0002\u0002\u0002\u009c\u0003\u0002\u0002\u0002", "\u0002\u009e\u0003\u0002\u0002\u0002\u0002\u00a0\u0003\u0002\u0002\u0002", "\u0002\u00a2\u0003\u0002\u0002\u0002\u0002\u00a4\u0003\u0002\u0002\u0002", "\u0002\u00a6\u0003\u0002\u0002\u0002\u0002\u00a8\u0003\u0002\u0002\u0002", "\u0002\u00aa\u0003\u0002\u0002\u0002\u0002\u00ac\u0003\u0002\u0002\u0002", "\u0002\u00ae\u0003\u0002\u0002\u0002\u0002\u00b0\u0003\u0002\u0002\u0002", "\u0002\u00b2\u0003\u0002\u0002\u0002\u0002\u00b4\u0003\u0002\u0002\u0002", "\u0002\u00b6\u0003\u0002\u0002\u0002\u0002\u00b8\u0003\u0002\u0002\u0002", "\u0002\u00ba\u0003\u0002\u0002\u0002\u0002\u00bc\u0003\u0002\u0002\u0002", "\u0002\u00be\u0003\u0002\u0002\u0002\u0002\u00c0\u0003\u0002\u0002\u0002", "\u0002\u00c2\u0003\u0002\u0002\u0002\u0002\u00c4\u0003\u0002\u0002\u0002", "\u0002\u00c6\u0003\u0002\u0002\u0002\u0002\u00c8\u0003\u0002\u0002\u0002", "\u0002\u00ca\u0003\u0002\u0002\u0002\u0002\u00cc\u0003\u0002\u0002\u0002", "\u0002\u00ce\u0003\u0002\u0002\u0002\u0002\u00d0\u0003\u0002\u0002\u0002", "\u0002\u00d2\u0003\u0002\u0002\u0002\u0002\u00d4\u0003\u0002\u0002\u0002", "\u0002\u00d6\u0003\u0002\u0002\u0002\u0002\u00d8\u0003\u0002\u0002\u0002", "\u0002\u00da\u0003\u0002\u0002\u0002\u0002\u00dc\u0003\u0002\u0002\u0002", "\u0002\u00de\u0003\u0002\u0002\u0002\u0002\u00e0\u0003\u0002\u0002\u0002", "\u0002\u00e2\u0003\u0002\u0002\u0002\u0002\u00e4\u0003\u0002\u0002\u0002", "\u0002\u00e6\u0003\u0002\u0002\u0002\u0002\u00e8\u0003\u0002\u0002\u0002", "\u0002\u00ea\u0003\u0002\u0002\u0002\u0002\u00ec\u0003\u0002\u0002\u0002", "\u0002\u00ee\u0003\u0002\u0002\u0002\u0002\u00f0\u0003\u0002\u0002\u0002", "\u0002\u00f2\u0003\u0002\u0002\u0002\u0002\u00f4\u0003\u0002\u0002\u0002", "\u0002\u00f6\u0003\u0002\u0002\u0002\u0002\u00f8\u0003\u0002\u0002\u0002", "\u0002\u00fa\u0003\u0002\u0002\u0002\u0002\u00fc\u0003\u0002\u0002\u0002", "\u0003\u00fe\u0003\u0002\u0002\u0002\u0003\u0100\u0003\u0002\u0002\u0002", "\u0003\u0102\u0003\u0002\u0002\u0002\u0004\u012c\u0003\u0002\u0002\u0002", "\u0006\u0136\u0003\u0002\u0002\u0002\b\u0144\u0003\u0002\u0002\u0002", "\n\u014f\u0003\u0002\u0002\u0002\f\u015f\u0003\u0002\u0002\u0002\u000e", "\u0161\u0003\u0002\u0002\u0002\u0010\u0163\u0003\u0002\u0002\u0002\u0012", "\u0165\u0003\u0002\u0002\u0002\u0014\u0167\u0003\u0002\u0002\u0002\u0016", "\u016a\u0003\u0002\u0002\u0002\u0018\u016f\u0003\u0002\u0002\u0002\u001a", "\u0172\u0003\u0002\u0002\u0002\u001c\u0174\u0003\u0002\u0002\u0002\u001e", "\u0176\u0003\u0002\u0002\u0002 \u0178\u0003\u0002\u0002\u0002\"\u017a", "\u0003\u0002\u0002\u0002$\u017c\u0003\u0002\u0002\u0002&\u0180\u0003", "\u0002\u0002\u0002(\u0182\u0003\u0002\u0002\u0002*\u0185\u0003\u0002", "\u0002\u0002,\u0188\u0003\u0002\u0002\u0002.\u018a\u0003\u0002\u0002", "\u00020\u018c\u0003\u0002\u0002\u00022\u018e\u0003\u0002\u0002\u0002", "4\u0190\u0003\u0002\u0002\u00026\u0192\u0003\u0002\u0002\u00028\u0194", "\u0003\u0002\u0002\u0002:\u0196\u0003\u0002\u0002\u0002<\u0199\u0003", "\u0002\u0002\u0002>\u019c\u0003\u0002\u0002\u0002@\u019e\u0003\u0002", "\u0002\u0002B\u01a1\u0003\u0002\u0002\u0002D\u01a4\u0003\u0002\u0002", "\u0002F\u01a8\u0003\u0002\u0002\u0002H\u01aa\u0003\u0002\u0002\u0002", "J\u01ac\u0003\u0002\u0002\u0002L\u01af\u0003\u0002\u0002\u0002N\u01b2", "\u0003\u0002\u0002\u0002P\u01b5\u0003\u0002\u0002\u0002R\u01b8\u0003", "\u0002\u0002\u0002T\u01bc\u0003\u0002\u0002\u0002V\u01c0\u0003\u0002", "\u0002\u0002X\u01c2\u0003\u0002\u0002\u0002Z\u01c4\u0003\u0002\u0002", "\u0002\\\u01c6\u0003\u0002\u0002\u0002^\u01c9\u0003\u0002\u0002\u0002", "`\u01cc\u0003\u0002\u0002\u0002b\u01cf\u0003\u0002\u0002\u0002d\u01d2", "\u0003\u0002\u0002\u0002f\u01d5\u0003\u0002\u0002\u0002h\u01d8\u0003", "\u0002\u0002\u0002j\u01db\u0003\u0002\u0002\u0002l\u01df\u0003\u0002", "\u0002\u0002n\u01e3\u0003\u0002\u0002\u0002p\u01e8\u0003\u0002\u0002", "\u0002r\u01eb\u0003\u0002\u0002\u0002t\u01ee\u0003\u0002\u0002\u0002", "v\u01f1\u0003\u0002\u0002\u0002x\u01f5\u0003\u0002\u0002\u0002z\u01f8", "\u0003\u0002\u0002\u0002|\u0206\u0003\u0002\u0002\u0002~\u0223\u0003", "\u0002\u0002\u0002\u0080\u0225\u0003\u0002\u0002\u0002\u0082\u022e\u0003", "\u0002\u0002\u0002\u0084\u0236\u0003\u0002\u0002\u0002\u0086\u023f\u0003", "\u0002\u0002\u0002\u0088\u0248\u0003\u0002\u0002\u0002\u008a\u0253\u0003", "\u0002\u0002\u0002\u008c\u025e\u0003\u0002\u0002\u0002\u008e\u0269\u0003", "\u0002\u0002\u0002\u0090\u026c\u0003\u0002\u0002\u0002\u0092\u0272\u0003", "\u0002\u0002\u0002\u0094\u0275\u0003\u0002\u0002\u0002\u0096\u0280\u0003", "\u0002\u0002\u0002\u0098\u0287\u0003\u0002\u0002\u0002\u009a\u028c\u0003", "\u0002\u0002\u0002\u009c\u0291\u0003\u0002\u0002\u0002\u009e\u0295\u0003", "\u0002\u0002\u0002\u00a0\u0299\u0003\u0002\u0002\u0002\u00a2\u029f\u0003", "\u0002\u0002\u0002\u00a4\u02a7\u0003\u0002\u0002\u0002\u00a6\u02ae\u0003", "\u0002\u0002\u0002\u00a8\u02b3\u0003\u0002\u0002\u0002\u00aa\u02bc\u0003", "\u0002\u0002\u0002\u00ac\u02c0\u0003\u0002\u0002\u0002\u00ae\u02c7\u0003", "\u0002\u0002\u0002\u00b0\u02cd\u0003\u0002\u0002\u0002\u00b2\u02d6\u0003", "\u0002\u0002\u0002\u00b4\u02df\u0003\u0002\u0002\u0002\u00b6\u02e4\u0003", "\u0002\u0002\u0002\u00b8\u02e9\u0003\u0002\u0002\u0002\u00ba\u02f1\u0003", "\u0002\u0002\u0002\u00bc\u02f4\u0003\u0002\u0002\u0002\u00be\u02fa\u0003", "\u0002\u0002\u0002\u00c0\u0301\u0003\u0002\u0002\u0002\u00c2\u0304\u0003", "\u0002\u0002\u0002\u00c4\u0308\u0003\u0002\u0002\u0002\u00c6\u030b\u0003", "\u0002\u0002\u0002\u00c8\u0310\u0003\u0002\u0002\u0002\u00ca\u0316\u0003", "\u0002\u0002\u0002\u00cc\u031b\u0003\u0002\u0002\u0002\u00ce\u0323\u0003", "\u0002\u0002\u0002\u00d0\u0329\u0003\u0002\u0002\u0002\u00d2\u032f\u0003", "\u0002\u0002\u0002\u00d4\u0336\u0003\u0002\u0002\u0002\u00d6\u033d\u0003", "\u0002\u0002\u0002\u00d8\u0343\u0003\u0002\u0002\u0002\u00da\u0349\u0003", "\u0002\u0002\u0002\u00dc\u0356\u0003\u0002\u0002\u0002\u00de\u035c\u0003", "\u0002\u0002\u0002\u00e0\u0362\u0003\u0002\u0002\u0002\u00e2\u036c\u0003", "\u0002\u0002\u0002\u00e4\u0375\u0003\u0002\u0002\u0002\u00e6\u0381\u0003", "\u0002\u0002\u0002\u00e8\u038b\u0003\u0002\u0002\u0002\u00ea\u0397\u0003", "\u0002\u0002\u0002\u00ec\u03a0\u0003\u0002\u0002\u0002\u00ee\u03a8\u0003", "\u0002\u0002\u0002\u00f0\u03bf\u0003\u0002\u0002\u0002\u00f2\u03c3\u0003", "\u0002\u0002\u0002\u00f4\u03c9\u0003\u0002\u0002\u0002\u00f6\u03cf\u0003", "\u0002\u0002\u0002\u00f8\u03d3\u0003\u0002\u0002\u0002\u00fa\u03e4\u0003", "\u0002\u0002\u0002\u00fc\u03fa\u0003\u0002\u0002\u0002\u00fe\u03fe\u0003", "\u0002\u0002\u0002\u0100\u0404\u0003\u0002\u0002\u0002\u0102\u0409\u0003", "\u0002\u0002\u0002\u0104\u040f\u0003\u0002\u0002\u0002\u0106\u0415\u0003", "\u0002\u0002\u0002\u0108\u041c\u0003\u0002\u0002\u0002\u010a\u0420\u0003", "\u0002\u0002\u0002\u010c\u0422\u0003\u0002\u0002\u0002\u010e\u0436\u0003", "\u0002\u0002\u0002\u0110\u0438\u0003\u0002\u0002\u0002\u0112\u0441\u0003", "\u0002\u0002\u0002\u0114\u0443\u0003\u0002\u0002\u0002\u0116\u0447\u0003", "\u0002\u0002\u0002\u0118\u0449\u0003\u0002\u0002\u0002\u011a\u044c\u0003", "\u0002\u0002\u0002\u011c\u0456\u0003\u0002\u0002\u0002\u011e\u0458\u0003", "\u0002\u0002\u0002\u0120\u0463\u0003\u0002\u0002\u0002\u0122\u0468\u0003", "\u0002\u0002\u0002\u0124\u0474\u0003\u0002\u0002\u0002\u0126\u0480\u0003", "\u0002\u0002\u0002\u0128\u0484\u0003\u0002\u0002\u0002\u012a\u0486\u0003", "\u0002\u0002\u0002\u012c\u012d\u0006\u0002\u0002\u0002\u012d\u012e\u0007", "%\u0002\u0002\u012e\u012f\u0007#\u0002\u0002\u012f\u0133\u0003\u0002", "\u0002\u0002\u0130\u0132\n\u0002\u0002\u0002\u0131\u0130\u0003\u0002", "\u0002\u0002\u0132\u0135\u0003\u0002\u0002\u0002\u0133\u0131\u0003\u0002", "\u0002\u0002\u0133\u0134\u0003\u0002\u0002\u0002\u0134\u0005\u0003\u0002", "\u0002\u0002\u0135\u0133\u0003\u0002\u0002\u0002\u0136\u0137\u00071", "\u0002\u0002\u0137\u0138\u0007,\u0002\u0002\u0138\u013c\u0003\u0002", "\u0002\u0002\u0139\u013b\u000b\u0002\u0002\u0002\u013a\u0139\u0003\u0002", "\u0002\u0002\u013b\u013e\u0003\u0002\u0002\u0002\u013c\u013d\u0003\u0002", "\u0002\u0002\u013c\u013a\u0003\u0002\u0002\u0002\u013d\u013f\u0003\u0002", "\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013f\u0140\u0007,", "\u0002\u0002\u0140\u0141\u00071\u0002\u0002\u0141\u0142\u0003\u0002", "\u0002\u0002\u0142\u0143\b\u0003\u0002\u0002\u0143\u0007\u0003\u0002", "\u0002\u0002\u0144\u0145\u00071\u0002\u0002\u0145\u0146\u00071\u0002", "\u0002\u0146\u014a\u0003\u0002\u0002\u0002\u0147\u0149\n\u0002\u0002", "\u0002\u0148\u0147\u0003\u0002\u0002\u0002\u0149\u014c\u0003\u0002\u0002", "\u0002\u014a\u0148\u0003\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002", "\u0002\u014b\u014d\u0003\u0002\u0002\u0002\u014c\u014a\u0003\u0002\u0002", "\u0002\u014d\u014e\b\u0004\u0002\u0002\u014e\t\u0003\u0002\u0002\u0002", "\u014f\u0150\u00071\u0002\u0002\u0150\u0154\u0005\u0124\u0092\u0002", "\u0151\u0153\u0005\u0126\u0093\u0002\u0152\u0151\u0003\u0002\u0002\u0002", "\u0153\u0156\u0003\u0002\u0002\u0002\u0154\u0152\u0003\u0002\u0002\u0002", "\u0154\u0155\u0003\u0002\u0002\u0002\u0155\u0157\u0003\u0002\u0002\u0002", "\u0156\u0154\u0003\u0002\u0002\u0002\u0157\u0158\u0006\u0005\u0003\u0002", "\u0158\u015c\u00071\u0002\u0002\u0159\u015b\u0005\u0120\u0090\u0002", "\u015a\u0159\u0003\u0002\u0002\u0002\u015b\u015e\u0003\u0002\u0002\u0002", "\u015c\u015a\u0003\u0002\u0002\u0002\u015c\u015d\u0003\u0002\u0002\u0002", "\u015d\u000b\u0003\u0002\u0002\u0002\u015e\u015c\u0003\u0002\u0002\u0002", "\u015f\u0160\u0007]\u0002\u0002\u0160\r\u0003\u0002\u0002\u0002\u0161", "\u0162\u0007_\u0002\u0002\u0162\u000f\u0003\u0002\u0002\u0002\u0163", "\u0164\u0007*\u0002\u0002\u0164\u0011\u0003\u0002\u0002\u0002\u0165", "\u0166\u0007+\u0002\u0002\u0166\u0013\u0003\u0002\u0002\u0002\u0167", "\u0168\u0007}\u0002\u0002\u0168\u0169\b\n\u0003\u0002\u0169\u0015\u0003", "\u0002\u0002\u0002\u016a\u016b\u0006\u000b\u0004\u0002\u016b\u016c\u0007", "\u007f\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u016e\b", "\u000b\u0004\u0002\u016e\u0017\u0003\u0002\u0002\u0002\u016f\u0170\u0007", "\u007f\u0002\u0002\u0170\u0171\b\f\u0005\u0002\u0171\u0019\u0003\u0002", "\u0002\u0002\u0172\u0173\u0007=\u0002\u0002\u0173\u001b\u0003\u0002", "\u0002\u0002\u0174\u0175\u0007.\u0002\u0002\u0175\u001d\u0003\u0002", "\u0002\u0002\u0176\u0177\u0007?\u0002\u0002\u0177\u001f\u0003\u0002", "\u0002\u0002\u0178\u0179\u0007A\u0002\u0002\u0179!\u0003\u0002\u0002", "\u0002\u017a\u017b\u0007<\u0002\u0002\u017b#\u0003\u0002\u0002\u0002", "\u017c\u017d\u00070\u0002\u0002\u017d\u017e\u00070\u0002\u0002\u017e", "\u017f\u00070\u0002\u0002\u017f%\u0003\u0002\u0002\u0002\u0180\u0181", "\u00070\u0002\u0002\u0181\'\u0003\u0002\u0002\u0002\u0182\u0183\u0007", "-\u0002\u0002\u0183\u0184\u0007-\u0002\u0002\u0184)\u0003\u0002\u0002", "\u0002\u0185\u0186\u0007/\u0002\u0002\u0186\u0187\u0007/\u0002\u0002", "\u0187+\u0003\u0002\u0002\u0002\u0188\u0189\u0007-\u0002\u0002\u0189", "-\u0003\u0002\u0002\u0002\u018a\u018b\u0007/\u0002\u0002\u018b/\u0003", "\u0002\u0002\u0002\u018c\u018d\u0007\u0080\u0002\u0002\u018d1\u0003", "\u0002\u0002\u0002\u018e\u018f\u0007#\u0002\u0002\u018f3\u0003\u0002", "\u0002\u0002\u0190\u0191\u0007,\u0002\u0002\u01915\u0003\u0002\u0002", "\u0002\u0192\u0193\u00071\u0002\u0002\u01937\u0003\u0002\u0002\u0002", "\u0194\u0195\u0007\'\u0002\u0002\u01959\u0003\u0002\u0002\u0002\u0196", "\u0197\u0007,\u0002\u0002\u0197\u0198\u0007,\u0002\u0002\u0198;\u0003", "\u0002\u0002\u0002\u0199\u019a\u0007A\u0002\u0002\u019a\u019b\u0007", "A\u0002\u0002\u019b=\u0003\u0002\u0002\u0002\u019c\u019d\u0007%\u0002", "\u0002\u019d?\u0003\u0002\u0002\u0002\u019e\u019f\u0007@\u0002\u0002", "\u019f\u01a0\u0007@\u0002\u0002\u01a0A\u0003\u0002\u0002\u0002\u01a1", "\u01a2\u0007>\u0002\u0002\u01a2\u01a3\u0007>\u0002\u0002\u01a3C\u0003", "\u0002\u0002\u0002\u01a4\u01a5\u0007@\u0002\u0002\u01a5\u01a6\u0007", "@\u0002\u0002\u01a6\u01a7\u0007@\u0002\u0002\u01a7E\u0003\u0002\u0002", "\u0002\u01a8\u01a9\u0007>\u0002\u0002\u01a9G\u0003\u0002\u0002\u0002", "\u01aa\u01ab\u0007@\u0002\u0002\u01abI\u0003\u0002\u0002\u0002\u01ac", "\u01ad\u0007>\u0002\u0002\u01ad\u01ae\u0007?\u0002\u0002\u01aeK\u0003", "\u0002\u0002\u0002\u01af\u01b0\u0007@\u0002\u0002\u01b0\u01b1\u0007", "?\u0002\u0002\u01b1M\u0003\u0002\u0002\u0002\u01b2\u01b3\u0007?\u0002", "\u0002\u01b3\u01b4\u0007?\u0002\u0002\u01b4O\u0003\u0002\u0002\u0002", "\u01b5\u01b6\u0007#\u0002\u0002\u01b6\u01b7\u0007?\u0002\u0002\u01b7", "Q\u0003\u0002\u0002\u0002\u01b8\u01b9\u0007?\u0002\u0002\u01b9\u01ba", "\u0007?\u0002\u0002\u01ba\u01bb\u0007?\u0002\u0002\u01bbS\u0003\u0002", "\u0002\u0002\u01bc\u01bd\u0007#\u0002\u0002\u01bd\u01be\u0007?\u0002", "\u0002\u01be\u01bf\u0007?\u0002\u0002\u01bfU\u0003\u0002\u0002\u0002", "\u01c0\u01c1\u0007(\u0002\u0002\u01c1W\u0003\u0002\u0002\u0002\u01c2", "\u01c3\u0007`\u0002\u0002\u01c3Y\u0003\u0002\u0002\u0002\u01c4\u01c5", "\u0007~\u0002\u0002\u01c5[\u0003\u0002\u0002\u0002\u01c6\u01c7\u0007", "(\u0002\u0002\u01c7\u01c8\u0007(\u0002\u0002\u01c8]\u0003\u0002\u0002", "\u0002\u01c9\u01ca\u0007~\u0002\u0002\u01ca\u01cb\u0007~\u0002\u0002", "\u01cb_\u0003\u0002\u0002\u0002\u01cc\u01cd\u0007,\u0002\u0002\u01cd", "\u01ce\u0007?\u0002\u0002\u01cea\u0003\u0002\u0002\u0002\u01cf\u01d0", "\u00071\u0002\u0002\u01d0\u01d1\u0007?\u0002\u0002\u01d1c\u0003\u0002", "\u0002\u0002\u01d2\u01d3\u0007\'\u0002\u0002\u01d3\u01d4\u0007?\u0002", "\u0002\u01d4e\u0003\u0002\u0002\u0002\u01d5\u01d6\u0007-\u0002\u0002", "\u01d6\u01d7\u0007?\u0002\u0002\u01d7g\u0003\u0002\u0002\u0002\u01d8", "\u01d9\u0007/\u0002\u0002\u01d9\u01da\u0007?\u0002\u0002\u01dai\u0003", "\u0002\u0002\u0002\u01db\u01dc\u0007>\u0002\u0002\u01dc\u01dd\u0007", ">\u0002\u0002\u01dd\u01de\u0007?\u0002\u0002\u01dek\u0003\u0002\u0002", "\u0002\u01df\u01e0\u0007@\u0002\u0002\u01e0\u01e1\u0007@\u0002\u0002", "\u01e1\u01e2\u0007?\u0002\u0002\u01e2m\u0003\u0002\u0002\u0002\u01e3", "\u01e4\u0007@\u0002\u0002\u01e4\u01e5\u0007@\u0002\u0002\u01e5\u01e6", "\u0007@\u0002\u0002\u01e6\u01e7\u0007?\u0002\u0002\u01e7o\u0003\u0002", "\u0002\u0002\u01e8\u01e9\u0007(\u0002\u0002\u01e9\u01ea\u0007?\u0002", "\u0002\u01eaq\u0003\u0002\u0002\u0002\u01eb\u01ec\u0007`\u0002\u0002", "\u01ec\u01ed\u0007?\u0002\u0002\u01eds\u0003\u0002\u0002\u0002\u01ee", "\u01ef\u0007~\u0002\u0002\u01ef\u01f0\u0007?\u0002\u0002\u01f0u\u0003", "\u0002\u0002\u0002\u01f1\u01f2\u0007,\u0002\u0002\u01f2\u01f3\u0007", ",\u0002\u0002\u01f3\u01f4\u0007?\u0002\u0002\u01f4w\u0003\u0002\u0002", "\u0002\u01f5\u01f6\u0007?\u0002\u0002\u01f6\u01f7\u0007@\u0002\u0002", "\u01f7y\u0003\u0002\u0002\u0002\u01f8\u01f9\u0007p\u0002\u0002\u01f9", "\u01fa\u0007w\u0002\u0002\u01fa\u01fb\u0007n\u0002\u0002\u01fb\u01fc", "\u0007n\u0002\u0002\u01fc{\u0003\u0002\u0002\u0002\u01fd\u01fe\u0007", "v\u0002\u0002\u01fe\u01ff\u0007t\u0002\u0002\u01ff\u0200\u0007w\u0002", "\u0002\u0200\u0207\u0007g\u0002\u0002\u0201\u0202\u0007h\u0002\u0002", "\u0202\u0203\u0007c\u0002\u0002\u0203\u0204\u0007n\u0002\u0002\u0204", "\u0205\u0007u\u0002\u0002\u0205\u0207\u0007g\u0002\u0002\u0206\u01fd", "\u0003\u0002\u0002\u0002\u0206\u0201\u0003\u0002\u0002\u0002\u0207}", "\u0003\u0002\u0002\u0002\u0208\u0209\u0005\u011c\u008e\u0002\u0209\u020a", "\u00070\u0002\u0002\u020a\u020e\t\u0003\u0002\u0002\u020b\u020d\t\u0004", "\u0002\u0002\u020c\u020b\u0003\u0002\u0002\u0002\u020d\u0210\u0003\u0002", "\u0002\u0002\u020e\u020c\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002", "\u0002\u0002\u020f\u0212\u0003\u0002\u0002\u0002\u0210\u020e\u0003\u0002", "\u0002\u0002\u0211\u0213\u0005\u011e\u008f\u0002\u0212\u0211\u0003\u0002", "\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002\u0213\u0224\u0003\u0002", "\u0002\u0002\u0214\u0215\u00070\u0002\u0002\u0215\u0219\t\u0003\u0002", "\u0002\u0216\u0218\t\u0004\u0002\u0002\u0217\u0216\u0003\u0002\u0002", "\u0002\u0218\u021b\u0003\u0002\u0002\u0002\u0219\u0217\u0003\u0002\u0002", "\u0002\u0219\u021a\u0003\u0002\u0002\u0002\u021a\u021d\u0003\u0002\u0002", "\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021c\u021e\u0005\u011e\u008f", "\u0002\u021d\u021c\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002\u0002", "\u0002\u021e\u0224\u0003\u0002\u0002\u0002\u021f\u0221\u0005\u011c\u008e", "\u0002\u0220\u0222\u0005\u011e\u008f\u0002\u0221\u0220\u0003\u0002\u0002", "\u0002\u0221\u0222\u0003\u0002\u0002\u0002\u0222\u0224\u0003\u0002\u0002", "\u0002\u0223\u0208\u0003\u0002\u0002\u0002\u0223\u0214\u0003\u0002\u0002", "\u0002\u0223\u021f\u0003\u0002\u0002\u0002\u0224\u007f\u0003\u0002\u0002", "\u0002\u0225\u0226\u00072\u0002\u0002\u0226\u0227\t\u0005\u0002\u0002", "\u0227\u022b\t\u0006\u0002\u0002\u0228\u022a\u0005\u011a\u008d\u0002", "\u0229\u0228\u0003\u0002\u0002\u0002\u022a\u022d\u0003\u0002\u0002\u0002", "\u022b\u0229\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002\u0002\u0002", "\u022c\u0081\u0003\u0002\u0002\u0002\u022d\u022b\u0003\u0002\u0002\u0002", "\u022e\u0230\u00072\u0002\u0002\u022f\u0231\t\u0007\u0002\u0002\u0230", "\u022f\u0003\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232", "\u0230\u0003\u0002\u0002\u0002\u0232\u0233\u0003\u0002\u0002\u0002\u0233", "\u0234\u0003\u0002\u0002\u0002\u0234\u0235\u0006A\u0005\u0002\u0235", "\u0083\u0003\u0002\u0002\u0002\u0236\u0237\u00072\u0002\u0002\u0237", "\u0238\t\b\u0002\u0002\u0238\u023c\t\u0007\u0002\u0002\u0239\u023b\t", "\t\u0002\u0002\u023a\u0239\u0003\u0002\u0002\u0002\u023b\u023e\u0003", "\u0002\u0002\u0002\u023c\u023a\u0003\u0002\u0002\u0002\u023c\u023d\u0003", "\u0002\u0002\u0002\u023d\u0085\u0003\u0002\u0002\u0002\u023e\u023c\u0003", "\u0002\u0002\u0002\u023f\u0240\u00072\u0002\u0002\u0240\u0241\t\n\u0002", "\u0002\u0241\u0245\t\u000b\u0002\u0002\u0242\u0244\t\f\u0002\u0002\u0243", "\u0242\u0003\u0002\u0002\u0002\u0244\u0247\u0003\u0002\u0002\u0002\u0245", "\u0243\u0003\u0002\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246", "\u0087\u0003\u0002\u0002\u0002\u0247\u0245\u0003\u0002\u0002\u0002\u0248", "\u0249\u00072\u0002\u0002\u0249\u024a\t\u0005\u0002\u0002\u024a\u024e", "\t\u0006\u0002\u0002\u024b\u024d\u0005\u011a\u008d\u0002\u024c\u024b", "\u0003\u0002\u0002\u0002\u024d\u0250\u0003\u0002\u0002\u0002\u024e\u024c", "\u0003\u0002\u0002\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0251", "\u0003\u0002\u0002\u0002\u0250\u024e\u0003\u0002\u0002\u0002\u0251\u0252", "\u0007p\u0002\u0002\u0252\u0089\u0003\u0002\u0002\u0002\u0253\u0254", "\u00072\u0002\u0002\u0254\u0255\t\b\u0002\u0002\u0255\u0259\t\u0007", "\u0002\u0002\u0256\u0258\t\t\u0002\u0002\u0257\u0256\u0003\u0002\u0002", "\u0002\u0258\u025b\u0003\u0002\u0002\u0002\u0259\u0257\u0003\u0002\u0002", "\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u025c\u0003\u0002\u0002", "\u0002\u025b\u0259\u0003\u0002\u0002\u0002\u025c\u025d\u0007p\u0002", "\u0002\u025d\u008b\u0003\u0002\u0002\u0002\u025e\u025f\u00072\u0002", "\u0002\u025f\u0260\t\n\u0002\u0002\u0260\u0264\t\u000b\u0002\u0002\u0261", "\u0263\t\f\u0002\u0002\u0262\u0261\u0003\u0002\u0002\u0002\u0263\u0266", "\u0003\u0002\u0002\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0264\u0265", "\u0003\u0002\u0002\u0002\u0265\u0267\u0003\u0002\u0002\u0002\u0266\u0264", "\u0003\u0002\u0002\u0002\u0267\u0268\u0007p\u0002\u0002\u0268\u008d", "\u0003\u0002\u0002\u0002\u0269\u026a\u0005\u011c\u008e\u0002\u026a\u026b", "\u0007p\u0002\u0002\u026b\u008f\u0003\u0002\u0002\u0002\u026c\u026d", "\u0007d\u0002\u0002\u026d\u026e\u0007t\u0002\u0002\u026e\u026f\u0007", "g\u0002\u0002\u026f\u0270\u0007c\u0002\u0002\u0270\u0271\u0007m\u0002", "\u0002\u0271\u0091\u0003\u0002\u0002\u0002\u0272\u0273\u0007f\u0002", "\u0002\u0273\u0274\u0007q\u0002\u0002\u0274\u0093\u0003\u0002\u0002", "\u0002\u0275\u0276\u0007k\u0002\u0002\u0276\u0277\u0007p\u0002\u0002", "\u0277\u0278\u0007u\u0002\u0002\u0278\u0279\u0007v\u0002\u0002\u0279", "\u027a\u0007c\u0002\u0002\u027a\u027b\u0007p\u0002\u0002\u027b\u027c", "\u0007e\u0002\u0002\u027c\u027d\u0007g\u0002\u0002\u027d\u027e\u0007", "q\u0002\u0002\u027e\u027f\u0007h\u0002\u0002\u027f\u0095\u0003\u0002", "\u0002\u0002\u0280\u0281\u0007v\u0002\u0002\u0281\u0282\u0007{\u0002", "\u0002\u0282\u0283\u0007r\u0002\u0002\u0283\u0284\u0007g\u0002\u0002", "\u0284\u0285\u0007q\u0002\u0002\u0285\u0286\u0007h\u0002\u0002\u0286", "\u0097\u0003\u0002\u0002\u0002\u0287\u0288\u0007e\u0002\u0002\u0288", "\u0289\u0007c\u0002\u0002\u0289\u028a\u0007u\u0002\u0002\u028a\u028b", "\u0007g\u0002\u0002\u028b\u0099\u0003\u0002\u0002\u0002\u028c\u028d", "\u0007g\u0002\u0002\u028d\u028e\u0007n\u0002\u0002\u028e\u028f\u0007", "u\u0002\u0002\u028f\u0290\u0007g\u0002\u0002\u0290\u009b\u0003\u0002", "\u0002\u0002\u0291\u0292\u0007p\u0002\u0002\u0292\u0293\u0007g\u0002", "\u0002\u0293\u0294\u0007y\u0002\u0002\u0294\u009d\u0003\u0002\u0002", "\u0002\u0295\u0296\u0007x\u0002\u0002\u0296\u0297\u0007c\u0002\u0002", "\u0297\u0298\u0007t\u0002\u0002\u0298\u009f\u0003\u0002\u0002\u0002", "\u0299\u029a\u0007e\u0002\u0002\u029a\u029b\u0007c\u0002\u0002\u029b", "\u029c\u0007v\u0002\u0002\u029c\u029d\u0007e\u0002\u0002\u029d\u029e", "\u0007j\u0002\u0002\u029e\u00a1\u0003\u0002\u0002\u0002\u029f\u02a0", "\u0007h\u0002\u0002\u02a0\u02a1\u0007k\u0002\u0002\u02a1\u02a2\u0007", "p\u0002\u0002\u02a2\u02a3\u0007c\u0002\u0002\u02a3\u02a4\u0007n\u0002", "\u0002\u02a4\u02a5\u0007n\u0002\u0002\u02a5\u02a6\u0007{\u0002\u0002", "\u02a6\u00a3\u0003\u0002\u0002\u0002\u02a7\u02a8\u0007t\u0002\u0002", "\u02a8\u02a9\u0007g\u0002\u0002\u02a9\u02aa\u0007v\u0002\u0002\u02aa", "\u02ab\u0007w\u0002\u0002\u02ab\u02ac\u0007t\u0002\u0002\u02ac\u02ad", "\u0007p\u0002\u0002\u02ad\u00a5\u0003\u0002\u0002\u0002\u02ae\u02af", "\u0007x\u0002\u0002\u02af\u02b0\u0007q\u0002\u0002\u02b0\u02b1\u0007", "k\u0002\u0002\u02b1\u02b2\u0007f\u0002\u0002\u02b2\u00a7\u0003\u0002", "\u0002\u0002\u02b3\u02b4\u0007e\u0002\u0002\u02b4\u02b5\u0007q\u0002", "\u0002\u02b5\u02b6\u0007p\u0002\u0002\u02b6\u02b7\u0007v\u0002\u0002", "\u02b7\u02b8\u0007k\u0002\u0002\u02b8\u02b9\u0007p\u0002\u0002\u02b9", "\u02ba\u0007w\u0002\u0002\u02ba\u02bb\u0007g\u0002\u0002\u02bb\u00a9", "\u0003\u0002\u0002\u0002\u02bc\u02bd\u0007h\u0002\u0002\u02bd\u02be", "\u0007q\u0002\u0002\u02be\u02bf\u0007t\u0002\u0002\u02bf\u00ab\u0003", "\u0002\u0002\u0002\u02c0\u02c1\u0007u\u0002\u0002\u02c1\u02c2\u0007", "y\u0002\u0002\u02c2\u02c3\u0007k\u0002\u0002\u02c3\u02c4\u0007v\u0002", "\u0002\u02c4\u02c5\u0007e\u0002\u0002\u02c5\u02c6\u0007j\u0002\u0002", "\u02c6\u00ad\u0003\u0002\u0002\u0002\u02c7\u02c8\u0007y\u0002\u0002", "\u02c8\u02c9\u0007j\u0002\u0002\u02c9\u02ca\u0007k\u0002\u0002\u02ca", "\u02cb\u0007n\u0002\u0002\u02cb\u02cc\u0007g\u0002\u0002\u02cc\u00af", "\u0003\u0002\u0002\u0002\u02cd\u02ce\u0007f\u0002\u0002\u02ce\u02cf", "\u0007g\u0002\u0002\u02cf\u02d0\u0007d\u0002\u0002\u02d0\u02d1\u0007", "w\u0002\u0002\u02d1\u02d2\u0007i\u0002\u0002\u02d2\u02d3\u0007i\u0002", "\u0002\u02d3\u02d4\u0007g\u0002\u0002\u02d4\u02d5\u0007t\u0002\u0002", "\u02d5\u00b1\u0003\u0002\u0002\u0002\u02d6\u02d7\u0007h\u0002\u0002", "\u02d7\u02d8\u0007w\u0002\u0002\u02d8\u02d9\u0007p\u0002\u0002\u02d9", "\u02da\u0007e\u0002\u0002\u02da\u02db\u0007v\u0002\u0002\u02db\u02dc", "\u0007k\u0002\u0002\u02dc\u02dd\u0007q\u0002\u0002\u02dd\u02de\u0007", "p\u0002\u0002\u02de\u00b3\u0003\u0002\u0002\u0002\u02df\u02e0\u0007", "v\u0002\u0002\u02e0\u02e1\u0007j\u0002\u0002\u02e1\u02e2\u0007k\u0002", "\u0002\u02e2\u02e3\u0007u\u0002\u0002\u02e3\u00b5\u0003\u0002\u0002", "\u0002\u02e4\u02e5\u0007y\u0002\u0002\u02e5\u02e6\u0007k\u0002\u0002", "\u02e6\u02e7\u0007v\u0002\u0002\u02e7\u02e8\u0007j\u0002\u0002\u02e8", "\u00b7\u0003\u0002\u0002\u0002\u02e9\u02ea\u0007f\u0002\u0002\u02ea", "\u02eb\u0007g\u0002\u0002\u02eb\u02ec\u0007h\u0002\u0002\u02ec\u02ed", "\u0007c\u0002\u0002\u02ed\u02ee\u0007w\u0002\u0002\u02ee\u02ef\u0007", "n\u0002\u0002\u02ef\u02f0\u0007v\u0002\u0002\u02f0\u00b9\u0003\u0002", "\u0002\u0002\u02f1\u02f2\u0007k\u0002\u0002\u02f2\u02f3\u0007h\u0002", "\u0002\u02f3\u00bb\u0003\u0002\u0002\u0002\u02f4\u02f5\u0007v\u0002", "\u0002\u02f5\u02f6\u0007j\u0002\u0002\u02f6\u02f7\u0007t\u0002\u0002", "\u02f7\u02f8\u0007q\u0002\u0002\u02f8\u02f9\u0007y\u0002\u0002\u02f9", "\u00bd\u0003\u0002\u0002\u0002\u02fa\u02fb\u0007f\u0002\u0002\u02fb", "\u02fc\u0007g\u0002\u0002\u02fc\u02fd\u0007n\u0002\u0002\u02fd\u02fe", "\u0007g\u0002\u0002\u02fe\u02ff\u0007v\u0002\u0002\u02ff\u0300\u0007", "g\u0002\u0002\u0300\u00bf\u0003\u0002\u0002\u0002\u0301\u0302\u0007", "k\u0002\u0002\u0302\u0303\u0007p\u0002\u0002\u0303\u00c1\u0003\u0002", "\u0002\u0002\u0304\u0305\u0007v\u0002\u0002\u0305\u0306\u0007t\u0002", "\u0002\u0306\u0307\u0007{\u0002\u0002\u0307\u00c3\u0003\u0002\u0002", "\u0002\u0308\u0309\u0007c\u0002\u0002\u0309\u030a\u0007u\u0002\u0002", "\u030a\u00c5\u0003\u0002\u0002\u0002\u030b\u030c\u0007h\u0002\u0002", "\u030c\u030d\u0007t\u0002\u0002\u030d\u030e\u0007q\u0002\u0002\u030e", "\u030f\u0007o\u0002\u0002\u030f\u00c7\u0003\u0002\u0002\u0002\u0310", "\u0311\u0007e\u0002\u0002\u0311\u0312\u0007n\u0002\u0002\u0312\u0313", "\u0007c\u0002\u0002\u0313\u0314\u0007u\u0002\u0002\u0314\u0315\u0007", "u\u0002\u0002\u0315\u00c9\u0003\u0002\u0002\u0002\u0316\u0317\u0007", "g\u0002\u0002\u0317\u0318\u0007p\u0002\u0002\u0318\u0319\u0007w\u0002", "\u0002\u0319\u031a\u0007o\u0002\u0002\u031a\u00cb\u0003\u0002\u0002", "\u0002\u031b\u031c\u0007g\u0002\u0002\u031c\u031d\u0007z\u0002\u0002", "\u031d\u031e\u0007v\u0002\u0002\u031e\u031f\u0007g\u0002\u0002\u031f", "\u0320\u0007p\u0002\u0002\u0320\u0321\u0007f\u0002\u0002\u0321\u0322", "\u0007u\u0002\u0002\u0322\u00cd\u0003\u0002\u0002\u0002\u0323\u0324", "\u0007u\u0002\u0002\u0324\u0325\u0007w\u0002\u0002\u0325\u0326\u0007", "r\u0002\u0002\u0326\u0327\u0007g\u0002\u0002\u0327\u0328\u0007t\u0002", "\u0002\u0328\u00cf\u0003\u0002\u0002\u0002\u0329\u032a\u0007e\u0002", "\u0002\u032a\u032b\u0007q\u0002\u0002\u032b\u032c\u0007p\u0002\u0002", "\u032c\u032d\u0007u\u0002\u0002\u032d\u032e\u0007v\u0002\u0002\u032e", "\u00d1\u0003\u0002\u0002\u0002\u032f\u0330\u0007g\u0002\u0002\u0330", "\u0331\u0007z\u0002\u0002\u0331\u0332\u0007r\u0002\u0002\u0332\u0333", "\u0007q\u0002\u0002\u0333\u0334\u0007t\u0002\u0002\u0334\u0335\u0007", "v\u0002\u0002\u0335\u00d3\u0003\u0002\u0002\u0002\u0336\u0337\u0007", "k\u0002\u0002\u0337\u0338\u0007o\u0002\u0002\u0338\u0339\u0007r\u0002", "\u0002\u0339\u033a\u0007q\u0002\u0002\u033a\u033b\u0007t\u0002\u0002", "\u033b\u033c\u0007v\u0002\u0002\u033c\u00d5\u0003\u0002\u0002\u0002", "\u033d\u033e\u0007c\u0002\u0002\u033e\u033f\u0007u\u0002\u0002\u033f", "\u0340\u0007{\u0002\u0002\u0340\u0341\u0007p\u0002\u0002\u0341\u0342", "\u0007e\u0002\u0002\u0342\u00d7\u0003\u0002\u0002\u0002\u0343\u0344", "\u0007c\u0002\u0002\u0344\u0345\u0007y\u0002\u0002\u0345\u0346\u0007", "c\u0002\u0002\u0346\u0347\u0007k\u0002\u0002\u0347\u0348\u0007v\u0002", "\u0002\u0348\u00d9\u0003\u0002\u0002\u0002\u0349\u034a\u0007k\u0002", "\u0002\u034a\u034b\u0007o\u0002\u0002\u034b\u034c\u0007r\u0002\u0002", "\u034c\u034d\u0007n\u0002\u0002\u034d\u034e\u0007g\u0002\u0002\u034e", "\u034f\u0007o\u0002\u0002\u034f\u0350\u0007g\u0002\u0002\u0350\u0351", "\u0007p\u0002\u0002\u0351\u0352\u0007v\u0002\u0002\u0352\u0353\u0007", "u\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354\u0355\u0006", "m\u0006\u0002\u0355\u00db\u0003\u0002\u0002\u0002\u0356\u0357\u0007", "n\u0002\u0002\u0357\u0358\u0007g\u0002\u0002\u0358\u0359\u0007v\u0002", "\u0002\u0359\u035a\u0003\u0002\u0002\u0002\u035a\u035b\u0006n\u0007", "\u0002\u035b\u00dd\u0003\u0002\u0002\u0002\u035c\u035d\u0007n\u0002", "\u0002\u035d\u035e\u0007g\u0002\u0002\u035e\u035f\u0007v\u0002\u0002", "\u035f\u0360\u0003\u0002\u0002\u0002\u0360\u0361\u0006o\b\u0002\u0361", "\u00df\u0003\u0002\u0002\u0002\u0362\u0363\u0007r\u0002\u0002\u0363", "\u0364\u0007t\u0002\u0002\u0364\u0365\u0007k\u0002\u0002\u0365\u0366", "\u0007x\u0002\u0002\u0366\u0367\u0007c\u0002\u0002\u0367\u0368\u0007", "v\u0002\u0002\u0368\u0369\u0007g\u0002\u0002\u0369\u036a\u0003\u0002", "\u0002\u0002\u036a\u036b\u0006p\t\u0002\u036b\u00e1\u0003\u0002\u0002", "\u0002\u036c\u036d\u0007r\u0002\u0002\u036d\u036e\u0007w\u0002\u0002", "\u036e\u036f\u0007d\u0002\u0002\u036f\u0370\u0007n\u0002\u0002\u0370", "\u0371\u0007k\u0002\u0002\u0371\u0372\u0007e\u0002\u0002\u0372\u0373", "\u0003\u0002\u0002\u0002\u0373\u0374\u0006q\n\u0002\u0374\u00e3\u0003", "\u0002\u0002\u0002\u0375\u0376\u0007k\u0002\u0002\u0376\u0377\u0007", "p\u0002\u0002\u0377\u0378\u0007v\u0002\u0002\u0378\u0379\u0007g\u0002", "\u0002\u0379\u037a\u0007t\u0002\u0002\u037a\u037b\u0007h\u0002\u0002", "\u037b\u037c\u0007c\u0002\u0002\u037c\u037d\u0007e\u0002\u0002\u037d", "\u037e\u0007g\u0002\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f", "\u0380\u0006r\u000b\u0002\u0380\u00e5\u0003\u0002\u0002\u0002\u0381", "\u0382\u0007r\u0002\u0002\u0382\u0383\u0007c\u0002\u0002\u0383\u0384", "\u0007e\u0002\u0002\u0384\u0385\u0007m\u0002\u0002\u0385\u0386\u0007", "c\u0002\u0002\u0386\u0387\u0007i\u0002\u0002\u0387\u0388\u0007g\u0002", "\u0002\u0388\u0389\u0003\u0002\u0002\u0002\u0389\u038a\u0006s\f\u0002", "\u038a\u00e7\u0003\u0002\u0002\u0002\u038b\u038c\u0007r\u0002\u0002", "\u038c\u038d\u0007t\u0002\u0002\u038d\u038e\u0007q\u0002\u0002\u038e", "\u038f\u0007v\u0002\u0002\u038f\u0390\u0007g\u0002\u0002\u0390\u0391", "\u0007e\u0002\u0002\u0391\u0392\u0007v\u0002\u0002\u0392\u0393\u0007", "g\u0002\u0002\u0393\u0394\u0007f\u0002\u0002\u0394\u0395\u0003\u0002", "\u0002\u0002\u0395\u0396\u0006t\r\u0002\u0396\u00e9\u0003\u0002\u0002", "\u0002\u0397\u0398\u0007u\u0002\u0002\u0398\u0399\u0007v\u0002\u0002", "\u0399\u039a\u0007c\u0002\u0002\u039a\u039b\u0007v\u0002\u0002\u039b", "\u039c\u0007k\u0002\u0002\u039c\u039d\u0007e\u0002\u0002\u039d\u039e", "\u0003\u0002\u0002\u0002\u039e\u039f\u0006u\u000e\u0002\u039f\u00eb", "\u0003\u0002\u0002\u0002\u03a0\u03a1\u0007{\u0002\u0002\u03a1\u03a2", "\u0007k\u0002\u0002\u03a2\u03a3\u0007g\u0002\u0002\u03a3\u03a4\u0007", "n\u0002\u0002\u03a4\u03a5\u0007f\u0002\u0002\u03a5\u03a6\u0003\u0002", "\u0002\u0002\u03a6\u03a7\u0006v\u000f\u0002\u03a7\u00ed\u0003\u0002", "\u0002\u0002\u03a8\u03ac\u0005\u0122\u0091\u0002\u03a9\u03ab\u0005\u0120", "\u0090\u0002\u03aa\u03a9\u0003\u0002\u0002\u0002\u03ab\u03ae\u0003\u0002", "\u0002\u0002\u03ac\u03aa\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002", "\u0002\u0002\u03ad\u00ef\u0003\u0002\u0002\u0002\u03ae\u03ac\u0003\u0002", "\u0002\u0002\u03af\u03b3\u0007$\u0002\u0002\u03b0\u03b2\u0005\u0104", "\u0082\u0002\u03b1\u03b0\u0003\u0002\u0002\u0002\u03b2\u03b5\u0003\u0002", "\u0002\u0002\u03b3\u03b1\u0003\u0002\u0002\u0002\u03b3\u03b4\u0003\u0002", "\u0002\u0002\u03b4\u03b6\u0003\u0002\u0002\u0002\u03b5\u03b3\u0003\u0002", "\u0002\u0002\u03b6\u03c0\u0007$\u0002\u0002\u03b7\u03bb\u0007)\u0002", "\u0002\u03b8\u03ba\u0005\u0106\u0083\u0002\u03b9\u03b8\u0003\u0002\u0002", "\u0002\u03ba\u03bd\u0003\u0002\u0002\u0002\u03bb\u03b9\u0003\u0002\u0002", "\u0002\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03be\u0003\u0002\u0002", "\u0002\u03bd\u03bb\u0003\u0002\u0002\u0002\u03be\u03c0\u0007)\u0002", "\u0002\u03bf\u03af\u0003\u0002\u0002\u0002\u03bf\u03b7\u0003\u0002\u0002", "\u0002\u03c0\u03c1\u0003\u0002\u0002\u0002\u03c1\u03c2\bx\u0006\u0002", "\u03c2\u00f1\u0003\u0002\u0002\u0002\u03c3\u03c4\u0007b\u0002\u0002", "\u03c4\u03c5\by\u0007\u0002\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6", "\u03c7\by\b\u0002\u03c7\u00f3\u0003\u0002\u0002\u0002\u03c8\u03ca\t", "\r\u0002\u0002\u03c9\u03c8\u0003\u0002\u0002\u0002\u03ca\u03cb\u0003", "\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002\u0002\u0002\u03cb\u03cc\u0003", "\u0002\u0002\u0002\u03cc\u03cd\u0003\u0002\u0002\u0002\u03cd\u03ce\b", "z\u0002\u0002\u03ce\u00f5\u0003\u0002\u0002\u0002\u03cf\u03d0\t\u0002", "\u0002\u0002\u03d0\u03d1\u0003\u0002\u0002\u0002\u03d1\u03d2\b{\u0002", "\u0002\u03d2\u00f7\u0003\u0002\u0002\u0002\u03d3\u03d4\u0007>\u0002", "\u0002\u03d4\u03d5\u0007#\u0002\u0002\u03d5\u03d6\u0007/\u0002\u0002", "\u03d6\u03d7\u0007/\u0002\u0002\u03d7\u03db\u0003\u0002\u0002\u0002", "\u03d8\u03da\u000b\u0002\u0002\u0002\u03d9\u03d8\u0003\u0002\u0002\u0002", "\u03da\u03dd\u0003\u0002\u0002\u0002\u03db\u03dc\u0003\u0002\u0002\u0002", "\u03db\u03d9\u0003\u0002\u0002\u0002\u03dc\u03de\u0003\u0002\u0002\u0002", "\u03dd\u03db\u0003\u0002\u0002\u0002\u03de\u03df\u0007/\u0002\u0002", "\u03df\u03e0\u0007/\u0002\u0002\u03e0\u03e1\u0007@\u0002\u0002\u03e1", "\u03e2\u0003\u0002\u0002\u0002\u03e2\u03e3\b|\u0002\u0002\u03e3\u00f9", "\u0003\u0002\u0002\u0002\u03e4\u03e5\u0007>\u0002\u0002\u03e5\u03e6", "\u0007#\u0002\u0002\u03e6\u03e7\u0007]\u0002\u0002\u03e7\u03e8\u0007", "E\u0002\u0002\u03e8\u03e9\u0007F\u0002\u0002\u03e9\u03ea\u0007C\u0002", "\u0002\u03ea\u03eb\u0007V\u0002\u0002\u03eb\u03ec\u0007C\u0002\u0002", "\u03ec\u03ed\u0007]\u0002\u0002\u03ed\u03f1\u0003\u0002\u0002\u0002", "\u03ee\u03f0\u000b\u0002\u0002\u0002\u03ef\u03ee\u0003\u0002\u0002\u0002", "\u03f0\u03f3\u0003\u0002\u0002\u0002\u03f1\u03f2\u0003\u0002\u0002\u0002", "\u03f1\u03ef\u0003\u0002\u0002\u0002\u03f2\u03f4\u0003\u0002\u0002\u0002", "\u03f3\u03f1\u0003\u0002\u0002\u0002\u03f4\u03f5\u0007_\u0002\u0002", "\u03f5\u03f6\u0007_\u0002\u0002\u03f6\u03f7\u0007@\u0002\u0002\u03f7", "\u03f8\u0003\u0002\u0002\u0002\u03f8\u03f9\b}\u0002\u0002\u03f9\u00fb", "\u0003\u0002\u0002\u0002\u03fa\u03fb\u000b\u0002\u0002\u0002\u03fb\u03fc", "\u0003\u0002\u0002\u0002\u03fc\u03fd\b~\t\u0002\u03fd\u00fd\u0003\u0002", "\u0002\u0002\u03fe\u03ff\u0007b\u0002\u0002\u03ff\u0400\b\u007f\n\u0002", "\u0400\u0401\u0003\u0002\u0002\u0002\u0401\u0402\b\u007f\u000b\u0002", "\u0402\u0403\b\u007f\u0004\u0002\u0403\u00ff\u0003\u0002\u0002\u0002", "\u0404\u0405\u0007&\u0002\u0002\u0405\u0406\u0007}\u0002\u0002\u0406", "\u0407\u0003\u0002\u0002\u0002\u0407\u0408\b\u0080\f\u0002\u0408\u0101", "\u0003\u0002\u0002\u0002\u0409\u040a\n\u000e\u0002\u0002\u040a\u0103", "\u0003\u0002\u0002\u0002\u040b\u0410\n\u000f\u0002\u0002\u040c\u040d", "\u0007^\u0002\u0002\u040d\u0410\u0005\u0108\u0084\u0002\u040e\u0410", "\u0005\u0118\u008c\u0002\u040f\u040b\u0003\u0002\u0002\u0002\u040f\u040c", "\u0003\u0002\u0002\u0002\u040f\u040e\u0003\u0002\u0002\u0002\u0410\u0105", "\u0003\u0002\u0002\u0002\u0411\u0416\n\u0010\u0002\u0002\u0412\u0413", "\u0007^\u0002\u0002\u0413\u0416\u0005\u0108\u0084\u0002\u0414\u0416", "\u0005\u0118\u008c\u0002\u0415\u0411\u0003\u0002\u0002\u0002\u0415\u0412", "\u0003\u0002\u0002\u0002\u0415\u0414\u0003\u0002\u0002\u0002\u0416\u0107", "\u0003\u0002\u0002\u0002\u0417\u041d\u0005\u010a\u0085\u0002\u0418\u041d", "\u00072\u0002\u0002\u0419\u041d\u0005\u010c\u0086\u0002\u041a\u041d", "\u0005\u010e\u0087\u0002\u041b\u041d\u0005\u0110\u0088\u0002\u041c\u0417", "\u0003\u0002\u0002\u0002\u041c\u0418\u0003\u0002\u0002\u0002\u041c\u0419", "\u0003\u0002\u0002\u0002\u041c\u041a\u0003\u0002\u0002\u0002\u041c\u041b", "\u0003\u0002\u0002\u0002\u041d\u0109\u0003\u0002\u0002\u0002\u041e\u0421", "\u0005\u0112\u0089\u0002\u041f\u0421\u0005\u0114\u008a\u0002\u0420\u041e", "\u0003\u0002\u0002\u0002\u0420\u041f\u0003\u0002\u0002\u0002\u0421\u010b", "\u0003\u0002\u0002\u0002\u0422\u0423\u0007z\u0002\u0002\u0423\u0424", "\u0005\u011a\u008d\u0002\u0424\u0425\u0005\u011a\u008d\u0002\u0425\u010d", "\u0003\u0002\u0002\u0002\u0426\u0427\u0007w\u0002\u0002\u0427\u0428", "\u0005\u011a\u008d\u0002\u0428\u0429\u0005\u011a\u008d\u0002\u0429\u042a", "\u0005\u011a\u008d\u0002\u042a\u042b\u0005\u011a\u008d\u0002\u042b\u0437", "\u0003\u0002\u0002\u0002\u042c\u042d\u0007w\u0002\u0002\u042d\u042e", "\u0007}\u0002\u0002\u042e\u0430\u0005\u011a\u008d\u0002\u042f\u0431", "\u0005\u011a\u008d\u0002\u0430\u042f\u0003\u0002\u0002\u0002\u0431\u0432", "\u0003\u0002\u0002\u0002\u0432\u0430\u0003\u0002\u0002\u0002\u0432\u0433", "\u0003\u0002\u0002\u0002\u0433\u0434\u0003\u0002\u0002\u0002\u0434\u0435", "\u0007\u007f\u0002\u0002\u0435\u0437\u0003\u0002\u0002\u0002\u0436\u0426", "\u0003\u0002\u0002\u0002\u0436\u042c\u0003\u0002\u0002\u0002\u0437\u010f", "\u0003\u0002\u0002\u0002\u0438\u0439\u0007w\u0002\u0002\u0439\u043b", "\u0007}\u0002\u0002\u043a\u043c\u0005\u011a\u008d\u0002\u043b\u043a", "\u0003\u0002\u0002\u0002\u043c\u043d\u0003\u0002\u0002\u0002\u043d\u043b", "\u0003\u0002\u0002\u0002\u043d\u043e\u0003\u0002\u0002\u0002\u043e\u043f", "\u0003\u0002\u0002\u0002\u043f\u0440\u0007\u007f\u0002\u0002\u0440\u0111", "\u0003\u0002\u0002\u0002\u0441\u0442\t\u0011\u0002\u0002\u0442\u0113", "\u0003\u0002\u0002\u0002\u0443\u0444\n\u0012\u0002\u0002\u0444\u0115", "\u0003\u0002\u0002\u0002\u0445\u0448\u0005\u0112\u0089\u0002\u0446\u0448", "\t\u0013\u0002\u0002\u0447\u0445\u0003\u0002\u0002\u0002\u0447\u0446", "\u0003\u0002\u0002\u0002\u0448\u0117\u0003\u0002\u0002\u0002\u0449\u044a", "\u0007^\u0002\u0002\u044a\u044b\t\u0002\u0002\u0002\u044b\u0119\u0003", "\u0002\u0002\u0002\u044c\u044d\t\u0014\u0002\u0002\u044d\u011b\u0003", "\u0002\u0002\u0002\u044e\u0457\u00072\u0002\u0002\u044f\u0453\t\u0015", "\u0002\u0002\u0450\u0452\t\u0004\u0002\u0002\u0451\u0450\u0003\u0002", "\u0002\u0002\u0452\u0455\u0003\u0002\u0002\u0002\u0453\u0451\u0003\u0002", "\u0002\u0002\u0453\u0454\u0003\u0002\u0002\u0002\u0454\u0457\u0003\u0002", "\u0002\u0002\u0455\u0453\u0003\u0002\u0002\u0002\u0456\u044e\u0003\u0002", "\u0002\u0002\u0456\u044f\u0003\u0002\u0002\u0002\u0457\u011d\u0003\u0002", "\u0002\u0002\u0458\u045a\t\u0016\u0002\u0002\u0459\u045b\t\u0017\u0002", "\u0002\u045a\u0459\u0003\u0002\u0002\u0002\u045a\u045b\u0003\u0002\u0002", "\u0002\u045b\u045d\u0003\u0002\u0002\u0002\u045c\u045e\t\u0004\u0002", "\u0002\u045d\u045c\u0003\u0002\u0002\u0002\u045e\u045f\u0003\u0002\u0002", "\u0002\u045f\u045d\u0003\u0002\u0002\u0002\u045f\u0460\u0003\u0002\u0002", "\u0002\u0460\u011f\u0003\u0002\u0002\u0002\u0461\u0464\u0005\u0122\u0091", "\u0002\u0462\u0464\t\u001b\u0002\u0002\u0463\u0461\u0003\u0002\u0002", "\u0002\u0463\u0462\u0003\u0002\u0002\u0002\u0464\u0121\u0003\u0002\u0002", "\u0002\u0465\u0469\t\u001c\u0002\u0002\u0466\u0467\u0007^\u0002\u0002", "\u0467\u0469\u0005\u010e\u0087\u0002\u0468\u0465\u0003\u0002\u0002\u0002", "\u0468\u0466\u0003\u0002\u0002\u0002\u0469\u0123\u0003\u0002\u0002\u0002", "\u046a\u0475\n\u0018\u0002\u0002\u046b\u0475\u0005\u012a\u0095\u0002", "\u046c\u0470\u0007]\u0002\u0002\u046d\u046f\u0005\u0128\u0094\u0002", "\u046e\u046d\u0003\u0002\u0002\u0002\u046f\u0472\u0003\u0002\u0002\u0002", "\u0470\u046e\u0003\u0002\u0002\u0002\u0470\u0471\u0003\u0002\u0002\u0002", "\u0471\u0473\u0003\u0002\u0002\u0002\u0472\u0470\u0003\u0002\u0002\u0002", "\u0473\u0475\u0007_\u0002\u0002\u0474\u046a\u0003\u0002\u0002\u0002", "\u0474\u046b\u0003\u0002\u0002\u0002\u0474\u046c\u0003\u0002\u0002\u0002", "\u0475\u0125\u0003\u0002\u0002\u0002\u0476\u0481\n\u0019\u0002\u0002", "\u0477\u0481\u0005\u012a\u0095\u0002\u0478\u047c\u0007]\u0002\u0002", "\u0479\u047b\u0005\u0128\u0094\u0002\u047a\u0479\u0003\u0002\u0002\u0002", "\u047b\u047e\u0003\u0002\u0002\u0002\u047c\u047a\u0003\u0002\u0002\u0002", "\u047c\u047d\u0003\u0002\u0002\u0002\u047d\u047f\u0003\u0002\u0002\u0002", "\u047e\u047c\u0003\u0002\u0002\u0002\u047f\u0481\u0007_\u0002\u0002", "\u0480\u0476\u0003\u0002\u0002\u0002\u0480\u0477\u0003\u0002\u0002\u0002", "\u0480\u0478\u0003\u0002\u0002\u0002\u0481\u0127\u0003\u0002\u0002\u0002", "\u0482\u0485\n\u001a\u0002\u0002\u0483\u0485\u0005\u012a\u0095\u0002", "\u0484\u0482\u0003\u0002\u0002\u0002\u0484\u0483\u0003\u0002\u0002\u0002", "\u0485\u0129\u0003\u0002\u0002\u0002\u0486\u0487\u0007^\u0002\u0002", "\u0487\u0488\n\u0002\u0002\u0002\u0488\u012b\u0003\u0002\u0002\u0002", "1\u0002\u0003\u0133\u013c\u014a\u0154\u015c\u0206\u020e\u0212\u0219", "\u021d\u0221\u0223\u022b\u0232\u023c\u0245\u024e\u0259\u0264\u03ac\u03b3", "\u03bb\u03bf\u03cb\u03db\u03f1\u040f\u0415\u041c\u0420\u0432\u0436\u043d", "\u0447\u0453\u0456\u045a\u045f\u0463\u0468\u0470\u0474\u047c\u0480\u0484", "\r\u0002\u0003\u0002\u0003\n\u0002\u0006\u0002\u0002\u0003\f\u0003\u0003", "x\u0004\u0003y\u0005\u0007\u0003\u0002\u0002\u0004\u0002\u0003\u007f", "\u0006\tz\u0002\u0007\u0002\u0002"].join("");
const atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new _antlr.default.dfa.DFA(ds, index));

class JavaScriptLexer extends _JavaScriptLexerBase.default {
  static grammarFileName = "JavaScriptLexer.g4";
  static channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR"];
  static modeNames = ["DEFAULT_MODE", "TEMPLATE"];
  static literalNames = [null, null, null, null, null, "'['", "']'", "'('", "')'", "'{'", null, "'}'", "';'", "','", "'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'**='", "'=>'", "'null'", null, null, null, null, null, null, null, null, null, null, "'break'", "'do'", "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", "'var'", "'catch'", "'finally'", "'return'", "'void'", "'continue'", "'for'", "'switch'", "'while'", "'debugger'", "'function'", "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", "'as'", "'from'", "'class'", "'enum'", "'extends'", "'super'", "'const'", "'export'", "'import'", "'async'", "'await'", "'implements'", null, null, "'private'", "'public'", "'interface'", "'package'", "'protected'", "'static'", "'yield'", null, null, null, null, null, null, null, null, "'${'"];
  static symbolicNames = [null, "HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", "For", "Switch", "While", "Debugger", "Function_", "This", "With", "Default", "If", "Throw", "Delete", "In", "Try", "As", "From", "Class", "Enum", "Extends", "Super", "Const", "Export", "Import", "Async", "Await", "Implements", "StrictLet", "NonStrictLet", "Private", "Public", "Interface", "Package", "Protected", "Static", "Yield", "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter", "TemplateStringStartExpression", "TemplateStringAtom"];
  static ruleNames = ["HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", "For", "Switch", "While", "Debugger", "Function_", "This", "With", "Default", "If", "Throw", "Delete", "In", "Try", "As", "From", "Class", "Enum", "Extends", "Super", "Const", "Export", "Import", "Async", "Await", "Implements", "StrictLet", "NonStrictLet", "Private", "Public", "Interface", "Package", "Protected", "Static", "Yield", "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter", "BackTickInside", "TemplateStringStartExpression", "TemplateStringAtom", "DoubleStringCharacter", "SingleStringCharacter", "EscapeSequence", "CharacterEscapeSequence", "HexEscapeSequence", "UnicodeEscapeSequence", "ExtendedUnicodeEscapeSequence", "SingleEscapeCharacter", "NonEscapeCharacter", "EscapeCharacter", "LineContinuation", "HexDigit", "DecimalIntegerLiteral", "ExponentPart", "IdentifierPart", "IdentifierStart", "RegularExpressionFirstChar", "RegularExpressionChar", "RegularExpressionClassChar", "RegularExpressionBackslashSequence"];

  constructor(input) {
    super(input);
    this._interp = new _antlr.default.atn.LexerATNSimulator(this, atn, decisionsToDFA, new _antlr.default.PredictionContextCache());
  }

  get atn() {
    return atn;
  }

}

exports.default = JavaScriptLexer;
JavaScriptLexer.EOF = _antlr.default.Token.EOF;
JavaScriptLexer.HashBangLine = 1;
JavaScriptLexer.MultiLineComment = 2;
JavaScriptLexer.SingleLineComment = 3;
JavaScriptLexer.RegularExpressionLiteral = 4;
JavaScriptLexer.OpenBracket = 5;
JavaScriptLexer.CloseBracket = 6;
JavaScriptLexer.OpenParen = 7;
JavaScriptLexer.CloseParen = 8;
JavaScriptLexer.OpenBrace = 9;
JavaScriptLexer.TemplateCloseBrace = 10;
JavaScriptLexer.CloseBrace = 11;
JavaScriptLexer.SemiColon = 12;
JavaScriptLexer.Comma = 13;
JavaScriptLexer.Assign = 14;
JavaScriptLexer.QuestionMark = 15;
JavaScriptLexer.Colon = 16;
JavaScriptLexer.Ellipsis = 17;
JavaScriptLexer.Dot = 18;
JavaScriptLexer.PlusPlus = 19;
JavaScriptLexer.MinusMinus = 20;
JavaScriptLexer.Plus = 21;
JavaScriptLexer.Minus = 22;
JavaScriptLexer.BitNot = 23;
JavaScriptLexer.Not = 24;
JavaScriptLexer.Multiply = 25;
JavaScriptLexer.Divide = 26;
JavaScriptLexer.Modulus = 27;
JavaScriptLexer.Power = 28;
JavaScriptLexer.NullCoalesce = 29;
JavaScriptLexer.Hashtag = 30;
JavaScriptLexer.RightShiftArithmetic = 31;
JavaScriptLexer.LeftShiftArithmetic = 32;
JavaScriptLexer.RightShiftLogical = 33;
JavaScriptLexer.LessThan = 34;
JavaScriptLexer.MoreThan = 35;
JavaScriptLexer.LessThanEquals = 36;
JavaScriptLexer.GreaterThanEquals = 37;
JavaScriptLexer.Equals_ = 38;
JavaScriptLexer.NotEquals = 39;
JavaScriptLexer.IdentityEquals = 40;
JavaScriptLexer.IdentityNotEquals = 41;
JavaScriptLexer.BitAnd = 42;
JavaScriptLexer.BitXOr = 43;
JavaScriptLexer.BitOr = 44;
JavaScriptLexer.And = 45;
JavaScriptLexer.Or = 46;
JavaScriptLexer.MultiplyAssign = 47;
JavaScriptLexer.DivideAssign = 48;
JavaScriptLexer.ModulusAssign = 49;
JavaScriptLexer.PlusAssign = 50;
JavaScriptLexer.MinusAssign = 51;
JavaScriptLexer.LeftShiftArithmeticAssign = 52;
JavaScriptLexer.RightShiftArithmeticAssign = 53;
JavaScriptLexer.RightShiftLogicalAssign = 54;
JavaScriptLexer.BitAndAssign = 55;
JavaScriptLexer.BitXorAssign = 56;
JavaScriptLexer.BitOrAssign = 57;
JavaScriptLexer.PowerAssign = 58;
JavaScriptLexer.ARROW = 59;
JavaScriptLexer.NullLiteral = 60;
JavaScriptLexer.BooleanLiteral = 61;
JavaScriptLexer.DecimalLiteral = 62;
JavaScriptLexer.HexIntegerLiteral = 63;
JavaScriptLexer.OctalIntegerLiteral = 64;
JavaScriptLexer.OctalIntegerLiteral2 = 65;
JavaScriptLexer.BinaryIntegerLiteral = 66;
JavaScriptLexer.BigHexIntegerLiteral = 67;
JavaScriptLexer.BigOctalIntegerLiteral = 68;
JavaScriptLexer.BigBinaryIntegerLiteral = 69;
JavaScriptLexer.BigDecimalIntegerLiteral = 70;
JavaScriptLexer.Break = 71;
JavaScriptLexer.Do = 72;
JavaScriptLexer.Instanceof = 73;
JavaScriptLexer.Typeof = 74;
JavaScriptLexer.Case = 75;
JavaScriptLexer.Else = 76;
JavaScriptLexer.New = 77;
JavaScriptLexer.Var = 78;
JavaScriptLexer.Catch = 79;
JavaScriptLexer.Finally = 80;
JavaScriptLexer.Return = 81;
JavaScriptLexer.Void = 82;
JavaScriptLexer.Continue = 83;
JavaScriptLexer.For = 84;
JavaScriptLexer.Switch = 85;
JavaScriptLexer.While = 86;
JavaScriptLexer.Debugger = 87;
JavaScriptLexer.Function_ = 88;
JavaScriptLexer.This = 89;
JavaScriptLexer.With = 90;
JavaScriptLexer.Default = 91;
JavaScriptLexer.If = 92;
JavaScriptLexer.Throw = 93;
JavaScriptLexer.Delete = 94;
JavaScriptLexer.In = 95;
JavaScriptLexer.Try = 96;
JavaScriptLexer.As = 97;
JavaScriptLexer.From = 98;
JavaScriptLexer.Class = 99;
JavaScriptLexer.Enum = 100;
JavaScriptLexer.Extends = 101;
JavaScriptLexer.Super = 102;
JavaScriptLexer.Const = 103;
JavaScriptLexer.Export = 104;
JavaScriptLexer.Import = 105;
JavaScriptLexer.Async = 106;
JavaScriptLexer.Await = 107;
JavaScriptLexer.Implements = 108;
JavaScriptLexer.StrictLet = 109;
JavaScriptLexer.NonStrictLet = 110;
JavaScriptLexer.Private = 111;
JavaScriptLexer.Public = 112;
JavaScriptLexer.Interface = 113;
JavaScriptLexer.Package = 114;
JavaScriptLexer.Protected = 115;
JavaScriptLexer.Static = 116;
JavaScriptLexer.Yield = 117;
JavaScriptLexer.Identifier = 118;
JavaScriptLexer.StringLiteral = 119;
JavaScriptLexer.BackTick = 120;
JavaScriptLexer.WhiteSpaces = 121;
JavaScriptLexer.LineTerminator = 122;
JavaScriptLexer.HtmlComment = 123;
JavaScriptLexer.CDataComment = 124;
JavaScriptLexer.UnexpectedCharacter = 125;
JavaScriptLexer.TemplateStringStartExpression = 126;
JavaScriptLexer.TemplateStringAtom = 127;
JavaScriptLexer.ERROR = 2;
JavaScriptLexer.TEMPLATE = 1;

JavaScriptLexer.prototype.action = function (localctx, ruleIndex, actionIndex) {
  switch (ruleIndex) {
    case 8:
      this.OpenBrace_action(localctx, actionIndex);
      break;

    case 10:
      this.CloseBrace_action(localctx, actionIndex);
      break;

    case 118:
      this.StringLiteral_action(localctx, actionIndex);
      break;

    case 119:
      this.BackTick_action(localctx, actionIndex);
      break;

    case 125:
      this.BackTickInside_action(localctx, actionIndex);
      break;

    default:
      throw "No registered action for:" + ruleIndex;
  }
};

JavaScriptLexer.prototype.OpenBrace_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 0:
      this.ProcessOpenBrace();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

JavaScriptLexer.prototype.CloseBrace_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 1:
      this.ProcessCloseBrace();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

JavaScriptLexer.prototype.StringLiteral_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 2:
      this.ProcessStringLiteral();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

JavaScriptLexer.prototype.BackTick_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 3:
      this.IncreaseTemplateDepth();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

JavaScriptLexer.prototype.BackTickInside_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 4:
      this.DecreaseTemplateDepth();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

JavaScriptLexer.prototype.sempred = function (localctx, ruleIndex, predIndex) {
  switch (ruleIndex) {
    case 0:
      return this.HashBangLine_sempred(localctx, predIndex);

    case 3:
      return this.RegularExpressionLiteral_sempred(localctx, predIndex);

    case 9:
      return this.TemplateCloseBrace_sempred(localctx, predIndex);

    case 63:
      return this.OctalIntegerLiteral_sempred(localctx, predIndex);

    case 107:
      return this.Implements_sempred(localctx, predIndex);

    case 108:
      return this.StrictLet_sempred(localctx, predIndex);

    case 109:
      return this.NonStrictLet_sempred(localctx, predIndex);

    case 110:
      return this.Private_sempred(localctx, predIndex);

    case 111:
      return this.Public_sempred(localctx, predIndex);

    case 112:
      return this.Interface_sempred(localctx, predIndex);

    case 113:
      return this.Package_sempred(localctx, predIndex);

    case 114:
      return this.Protected_sempred(localctx, predIndex);

    case 115:
      return this.Static_sempred(localctx, predIndex);

    case 116:
      return this.Yield_sempred(localctx, predIndex);

    default:
      throw "No registered predicate for:" + ruleIndex;
  }
};

JavaScriptLexer.prototype.HashBangLine_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 0:
      return this.IsStartOfFile();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.RegularExpressionLiteral_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 1:
      return this.IsRegexPossible();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.TemplateCloseBrace_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 2:
      return this.IsInTemplateString();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.OctalIntegerLiteral_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 3:
      return !this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.Implements_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 4:
      return this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.StrictLet_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 5:
      return this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.NonStrictLet_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 6:
      return !this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.Private_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 7:
      return this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.Public_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 8:
      return this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.Interface_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 9:
      return this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.Package_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 10:
      return this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.Protected_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 11:
      return this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.Static_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 12:
      return this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

JavaScriptLexer.prototype.Yield_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 13:
      return this.IsStrictMode();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

},{"./JavaScriptLexerBase.js":144,"antlr4":42}],144:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _JavaScriptLexer = _interopRequireDefault(require("./JavaScriptLexer.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class JavaScriptLexerBase extends _antlr.default.Lexer {
  constructor(input) {
    super(input);
    this.scopeStrictModes = new Array();
    this.lastToken = null;
    this.useStrictDefault = false;
    this.useStrictCurrent = false;
    this.templateDepth = 0;
  }

  getStrictDefault() {
    return this.useStrictDefault;
  }

  setUseStrictDefault(value) {
    this.useStrictDefault = value;
    this.useStrictCurrent = value;
  }

  IsStrictMode() {
    return this.useStrictCurrent;
  }

  IsInTemplateString() {
    return this.templateDepth > 0;
  }

  getCurrentToken() {
    return this.nextToken();
  }

  nextToken() {
    var next = super.nextToken();

    if (next.channel === _antlr.default.Token.DEFAULT_CHANNEL) {
      this.lastToken = next;
    }

    return next;
  }

  ProcessOpenBrace() {
    this.useStrictCurrent = this.scopeStrictModes.length > 0 && this.scopeStrictModes[this.scopeStrictModes.length - 1] ? true : this.useStrictDefault;
    this.scopeStrictModes.push(this.useStrictCurrent);
  }

  ProcessCloseBrace() {
    this.useStrictCurrent = this.scopeStrictModes.length > 0 ? this.scopeStrictModes.pop() : this.useStrictDefault;
  }

  ProcessStringLiteral() {
    if (this.lastToken === null || this.lastToken.type === _JavaScriptLexer.default.OpenBrace) {
      if (super.text === '"use strict"' || super.text === "'use strict'") {
        if (this.scopeStrictModes.length > 0) {
          this.scopeStrictModes.pop();
        }

        this.useStrictCurrent = true;
        this.scopeStrictModes.push(this.useStrictCurrent);
      }
    }
  }

  IncreaseTemplateDepth() {
    this.templateDepth++;
  }

  DecreaseTemplateDepth() {
    this.templateDepth--;
  }

  IsRegexPossible() {
    if (this.lastToken === null) {
      return true;
    }

    switch (this.lastToken.type) {
      case _JavaScriptLexer.default.Identifier:
      case _JavaScriptLexer.default.NullLiteral:
      case _JavaScriptLexer.default.BooleanLiteral:
      case _JavaScriptLexer.default.This:
      case _JavaScriptLexer.default.CloseBracket:
      case _JavaScriptLexer.default.CloseParen:
      case _JavaScriptLexer.default.OctalIntegerLiteral:
      case _JavaScriptLexer.default.DecimalLiteral:
      case _JavaScriptLexer.default.HexIntegerLiteral:
      case _JavaScriptLexer.default.StringLiteral:
      case _JavaScriptLexer.default.PlusPlus:
      case _JavaScriptLexer.default.MinusMinus:
        return false;

      default:
        return true;
    }
  }

  IsStartOfFile() {
    return this.lastToken === null;
  }

}

exports.default = JavaScriptLexerBase;

},{"./JavaScriptLexer.js":143,"antlr4":42}],145:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _JavaScriptParserListener = _interopRequireDefault(require("./JavaScriptParserListener.js"));

var _JavaScriptParserVisitor = _interopRequireDefault(require("./JavaScriptParserVisitor.js"));

var _JavaScriptParserBase = _interopRequireDefault(require("./JavaScriptParserBase.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/JavaScriptParser.g4 by ANTLR 4.9.2
// jshint ignore: start
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786", "\u5964\u0003\u0081\u0407\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004", "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t", "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004", "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010", "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013", "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017", "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a", "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e", "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#", "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004", "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004", "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004", "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004", "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004", "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004", "M\tM\u0004N\tN\u0003\u0002\u0005\u0002\u009e\n\u0002\u0003\u0002\u0005", "\u0002\u00a1\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003", "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004", "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004", "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004", "\u0003\u0004\u0003\u0004\u0005\u0004\u00bb\n\u0004\u0003\u0005\u0003", "\u0005\u0005\u0005\u00bf\n\u0005\u0003\u0005\u0003\u0005\u0003\u0006", "\u0006\u0006\u00c4\n\u0006\r\u0006\u000e\u0006\u00c5\u0003\u0007\u0003", "\u0007\u0003\u0007\u0003\b\u0005\b\u00cc\n\b\u0003\b\u0003\b\u0005\b", "\u00d0\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u00d7\n\b", "\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u00dd\n\t\f\t\u000e\t\u00e0", "\u000b\t\u0003\t\u0003\t\u0005\t\u00e4\n\t\u0005\t\u00e6\n\t\u0003\t", "\u0003\t\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0005\u000b", "\u00ef\n\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u00f3\n\u000b\u0003", "\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0005\r\u00fb\n\r\u0003\u000e", "\u0003\u000e\u0003\u000e\u0005\u000e\u0100\n\u000e\u0003\u000e\u0003", "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005", "\u000e\u0109\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f", "\u0003\u000f\u0003\u000f\u0005\u000f\u0111\n\u000f\u0003\u000f\u0003", "\u000f\u0005\u000f\u0115\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010", "\u0005\u0010\u011a\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003", "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u0123\n\u0012", "\f\u0012\u000e\u0012\u0126\u000b\u0012\u0003\u0013\u0003\u0013\u0003", "\u0013\u0005\u0013\u012b\n\u0013\u0003\u0014\u0003\u0014\u0003\u0015", "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016", "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u013a\n", "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003", "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003", "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003", "\u0017\u0005\u0017\u014e\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017", "\u0152\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0156\n\u0017\u0003", "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005", "\u0017\u015e\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017", "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0167\n\u0017\u0003", "\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u016c\n\u0017\u0003\u0017", "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017", "\u0174\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0179", "\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u017e\n\u0019", "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a", "\u0185\n\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003", "\u001b\u0005\u001b\u018c\n\u001b\u0003\u001b\u0003\u001b\u0003\u001c", "\u0003\u001c\u0003\u001c\u0005\u001c\u0193\n\u001c\u0003\u001c\u0003", "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003", "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003", "\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u01a5\n\u001f\u0003\u001f", "\u0003\u001f\u0005\u001f\u01a9\n\u001f\u0005\u001f\u01ab\n\u001f\u0003", "\u001f\u0003\u001f\u0003 \u0006 \u01b0\n \r \u000e \u01b1\u0003!\u0003", "!\u0003!\u0003!\u0005!\u01b8\n!\u0003\"\u0003\"\u0003\"\u0005\"\u01bd", "\n\"\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$", "\u0003%\u0003%\u0003%\u0003%\u0005%\u01cc\n%\u0003%\u0005%\u01cf\n%", "\u0003&\u0003&\u0003&\u0005&\u01d4\n&\u0003&\u0005&\u01d7\n&\u0003&", "\u0003&\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003)\u0005)\u01e2", "\n)\u0003)\u0003)\u0005)\u01e6\n)\u0003)\u0003)\u0003)\u0005)\u01eb", "\n)\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0005", "+\u01f6\n+\u0003+\u0003+\u0007+\u01fa\n+\f+\u000e+\u01fd\u000b+\u0003", "+\u0003+\u0003,\u0003,\u0003,\u0003,\u0007,\u0205\n,\f,\u000e,\u0208", "\u000b,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u0210\n,\u0003", ",\u0003,\u0005,\u0214\n,\u0003,\u0003,\u0003,\u0003,\u0005,\u021a\n", ",\u0003-\u0005-\u021d\n-\u0003-\u0005-\u0220\n-\u0003-\u0003-\u0003", "-\u0005-\u0225\n-\u0003-\u0003-\u0003-\u0003-\u0005-\u022b\n-\u0003", "-\u0005-\u022e\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0236", "\n-\u0003-\u0005-\u0239\n-\u0003-\u0003-\u0003-\u0005-\u023e\n-\u0003", "-\u0003-\u0003-\u0005-\u0243\n-\u0003.\u0003.\u0003.\u0007.\u0248\n", ".\f.\u000e.\u024b\u000b.\u0003.\u0003.\u0005.\u024f\n.\u0003.\u0005", ".\u0252\n.\u0003/\u0003/\u0003/\u0005/\u0257\n/\u00030\u00030\u0003", "0\u00031\u00031\u00051\u025e\n1\u00031\u00031\u00032\u00062\u0263\n", "2\r2\u000e2\u0264\u00033\u00033\u00033\u00033\u00034\u00074\u026c\n", "4\f4\u000e4\u026f\u000b4\u00034\u00054\u0272\n4\u00034\u00064\u0275", "\n4\r4\u000e4\u0276\u00034\u00074\u027a\n4\f4\u000e4\u027d\u000b4\u0003", "4\u00074\u0280\n4\f4\u000e4\u0283\u000b4\u00035\u00055\u0286\n5\u0003", "5\u00035\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003", "6\u00036\u00036\u00056\u0295\n6\u00036\u00056\u0298\n6\u00036\u0003", "6\u00036\u00056\u029d\n6\u00036\u00036\u00036\u00036\u00036\u00036\u0003", "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00056\u02ae", "\n6\u00036\u00056\u02b1\n6\u00037\u00037\u00037\u00037\u00037\u0003", "7\u00037\u00057\u02ba\n7\u00038\u00038\u00038\u00038\u00078\u02c0\n", "8\f8\u000e8\u02c3\u000b8\u00038\u00058\u02c6\n8\u00058\u02c8\n8\u0003", "8\u00038\u00039\u00059\u02cd\n9\u00039\u00039\u00059\u02d1\n9\u0003", ":\u0003:\u0003:\u0007:\u02d6\n:\f:\u000e:\u02d9\u000b:\u0003;\u0003", ";\u0003;\u0003;\u0005;\u02df\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0005;\u030f\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0005;\u034f\n;\u0003;\u0003;\u0005;\u0353", "\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0007;\u0360\n;\f;\u000e;\u0363\u000b;\u0003<\u0003<\u0003", "<\u0005<\u0368\n<\u0003=\u0003=\u0003=\u0003=\u0007=\u036e\n=\f=\u000e", "=\u0371\u000b=\u0003=\u0005=\u0374\n=\u0005=\u0376\n=\u0003=\u0003=", "\u0003>\u0003>\u0005>\u037c\n>\u0003>\u0003>\u0005>\u0380\n>\u0003>", "\u0003>\u0005>\u0384\n>\u0003>\u0003>\u0003>\u0005>\u0389\n>\u0003>", "\u0003>\u0003>\u0003>\u0005>\u038f\n>\u0003?\u0003?\u0003?\u0005?\u0394", "\n?\u0003?\u0005?\u0397\n?\u0003@\u0003@\u0005@\u039b\n@\u0003A\u0003", "A\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u03a6\nB\u0003", "C\u0003C\u0007C\u03aa\nC\fC\u000eC\u03ad\u000bC\u0003C\u0003C\u0003", "D\u0003D\u0003D\u0003D\u0003D\u0005D\u03b6\nD\u0003E\u0003E\u0003F\u0003", "F\u0003G\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003I\u0003", "I\u0005I\u03c6\nI\u0003J\u0003J\u0003K\u0003K\u0003K\u0005K\u03cd\n", "K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003", "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003", "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003", "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003", "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u03fd\nL\u0003M\u0003", "M\u0003N\u0003N\u0003N\u0003N\u0005N\u0405\nN\u0003N\u0002\u0003tO\u0002", "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e", " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084", "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u0002", "\f\u0003\u0002\u001b\u001d\u0003\u0002\u0017\u0018\u0003\u0002!#\u0003", "\u0002$\'\u0003\u0002(+\u0003\u00021<\u0003\u0002@D\u0003\u0002EH\u0005", "\u0002llppxx\u0003\u0002op\u0002\u04ab\u0002\u009d\u0003\u0002\u0002", "\u0002\u0004\u00a4\u0003\u0002\u0002\u0002\u0006\u00ba\u0003\u0002\u0002", "\u0002\b\u00bc\u0003\u0002\u0002\u0002\n\u00c3\u0003\u0002\u0002\u0002", "\f\u00c7\u0003\u0002\u0002\u0002\u000e\u00d6\u0003\u0002\u0002\u0002", "\u0010\u00d8\u0003\u0002\u0002\u0002\u0012\u00e9\u0003\u0002\u0002\u0002", "\u0014\u00ee\u0003\u0002\u0002\u0002\u0016\u00f4\u0003\u0002\u0002\u0002", "\u0018\u00f7\u0003\u0002\u0002\u0002\u001a\u0108\u0003\u0002\u0002\u0002", "\u001c\u0114\u0003\u0002\u0002\u0002\u001e\u0119\u0003\u0002\u0002\u0002", " \u011b\u0003\u0002\u0002\u0002\"\u011e\u0003\u0002\u0002\u0002$\u0127", "\u0003\u0002\u0002\u0002&\u012c\u0003\u0002\u0002\u0002(\u012e\u0003", "\u0002\u0002\u0002*\u0132\u0003\u0002\u0002\u0002,\u0173\u0003\u0002", "\u0002\u0002.\u0178\u0003\u0002\u0002\u00020\u017a\u0003\u0002\u0002", "\u00022\u0181\u0003\u0002\u0002\u00024\u0188\u0003\u0002\u0002\u0002", "6\u018f\u0003\u0002\u0002\u00028\u0196\u0003\u0002\u0002\u0002:\u019c", "\u0003\u0002\u0002\u0002<\u01a2\u0003\u0002\u0002\u0002>\u01af\u0003", "\u0002\u0002\u0002@\u01b3\u0003\u0002\u0002\u0002B\u01b9\u0003\u0002", "\u0002\u0002D\u01be\u0003\u0002\u0002\u0002F\u01c2\u0003\u0002\u0002", "\u0002H\u01c7\u0003\u0002\u0002\u0002J\u01d0\u0003\u0002\u0002\u0002", "L\u01da\u0003\u0002\u0002\u0002N\u01dd\u0003\u0002\u0002\u0002P\u01e1", "\u0003\u0002\u0002\u0002R\u01ef\u0003\u0002\u0002\u0002T\u01f5\u0003", "\u0002\u0002\u0002V\u0219\u0003\u0002\u0002\u0002X\u0242\u0003\u0002", "\u0002\u0002Z\u0251\u0003\u0002\u0002\u0002\\\u0253\u0003\u0002\u0002", "\u0002^\u0258\u0003\u0002\u0002\u0002`\u025b\u0003\u0002\u0002\u0002", "b\u0262\u0003\u0002\u0002\u0002d\u0266\u0003\u0002\u0002\u0002f\u026d", "\u0003\u0002\u0002\u0002h\u0285\u0003\u0002\u0002\u0002j\u02b0\u0003", "\u0002\u0002\u0002l\u02b9\u0003\u0002\u0002\u0002n\u02bb\u0003\u0002", "\u0002\u0002p\u02cc\u0003\u0002\u0002\u0002r\u02d2\u0003\u0002\u0002", "\u0002t\u030e\u0003\u0002\u0002\u0002v\u0367\u0003\u0002\u0002\u0002", "x\u0369\u0003\u0002\u0002\u0002z\u038e\u0003\u0002\u0002\u0002|\u0396", "\u0003\u0002\u0002\u0002~\u039a\u0003\u0002\u0002\u0002\u0080\u039c", "\u0003\u0002\u0002\u0002\u0082\u03a5\u0003\u0002\u0002\u0002\u0084\u03a7", "\u0003\u0002\u0002\u0002\u0086\u03b5\u0003\u0002\u0002\u0002\u0088\u03b7", "\u0003\u0002\u0002\u0002\u008a\u03b9\u0003\u0002\u0002\u0002\u008c\u03bb", "\u0003\u0002\u0002\u0002\u008e\u03bf\u0003\u0002\u0002\u0002\u0090\u03c5", "\u0003\u0002\u0002\u0002\u0092\u03c7\u0003\u0002\u0002\u0002\u0094\u03cc", "\u0003\u0002\u0002\u0002\u0096\u03fc\u0003\u0002\u0002\u0002\u0098\u03fe", "\u0003\u0002\u0002\u0002\u009a\u0404\u0003\u0002\u0002\u0002\u009c\u009e", "\u0007\u0003\u0002\u0002\u009d\u009c\u0003\u0002\u0002\u0002\u009d\u009e", "\u0003\u0002\u0002\u0002\u009e\u00a0\u0003\u0002\u0002\u0002\u009f\u00a1", "\u0005b2\u0002\u00a0\u009f\u0003\u0002\u0002\u0002\u00a0\u00a1\u0003", "\u0002\u0002\u0002\u00a1\u00a2\u0003\u0002\u0002\u0002\u00a2\u00a3\u0007", "\u0002\u0002\u0003\u00a3\u0003\u0003\u0002\u0002\u0002\u00a4\u00a5\u0005", "\u0006\u0004\u0002\u00a5\u0005\u0003\u0002\u0002\u0002\u00a6\u00bb\u0005", "\b\u0005\u0002\u00a7\u00bb\u0005 \u0011\u0002\u00a8\u00bb\u0005\f\u0007", "\u0002\u00a9\u00bb\u0005\u001a\u000e\u0002\u00aa\u00bb\u0005&\u0014", "\u0002\u00ab\u00bb\u0005R*\u0002\u00ac\u00bb\u0005(\u0015\u0002\u00ad", "\u00bb\u0005*\u0016\u0002\u00ae\u00bb\u0005,\u0017\u0002\u00af\u00bb", "\u00050\u0019\u0002\u00b0\u00bb\u00052\u001a\u0002\u00b1\u00bb\u0005", "4\u001b\u0002\u00b2\u00bb\u00056\u001c\u0002\u00b3\u00bb\u00058\u001d", "\u0002\u00b4\u00bb\u0005D#\u0002\u00b5\u00bb\u0005:\u001e\u0002\u00b6", "\u00bb\u0005F$\u0002\u00b7\u00bb\u0005H%\u0002\u00b8\u00bb\u0005N(\u0002", "\u00b9\u00bb\u0005P)\u0002\u00ba\u00a6\u0003\u0002\u0002\u0002\u00ba", "\u00a7\u0003\u0002\u0002\u0002\u00ba\u00a8\u0003\u0002\u0002\u0002\u00ba", "\u00a9\u0003\u0002\u0002\u0002\u00ba\u00aa\u0003\u0002\u0002\u0002\u00ba", "\u00ab\u0003\u0002\u0002\u0002\u00ba\u00ac\u0003\u0002\u0002\u0002\u00ba", "\u00ad\u0003\u0002\u0002\u0002\u00ba\u00ae\u0003\u0002\u0002\u0002\u00ba", "\u00af\u0003\u0002\u0002\u0002\u00ba\u00b0\u0003\u0002\u0002\u0002\u00ba", "\u00b1\u0003\u0002\u0002\u0002\u00ba\u00b2\u0003\u0002\u0002\u0002\u00ba", "\u00b3\u0003\u0002\u0002\u0002\u00ba\u00b4\u0003\u0002\u0002\u0002\u00ba", "\u00b5\u0003\u0002\u0002\u0002\u00ba\u00b6\u0003\u0002\u0002\u0002\u00ba", "\u00b7\u0003\u0002\u0002\u0002\u00ba\u00b8\u0003\u0002\u0002\u0002\u00ba", "\u00b9\u0003\u0002\u0002\u0002\u00bb\u0007\u0003\u0002\u0002\u0002\u00bc", "\u00be\u0007\u000b\u0002\u0002\u00bd\u00bf\u0005\n\u0006\u0002\u00be", "\u00bd\u0003\u0002\u0002\u0002\u00be\u00bf\u0003\u0002\u0002\u0002\u00bf", "\u00c0\u0003\u0002\u0002\u0002\u00c0\u00c1\u0007\r\u0002\u0002\u00c1", "\t\u0003\u0002\u0002\u0002\u00c2\u00c4\u0005\u0006\u0004\u0002\u00c3", "\u00c2\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002\u00c5", "\u00c3\u0003\u0002\u0002\u0002\u00c5\u00c6\u0003\u0002\u0002\u0002\u00c6", "\u000b\u0003\u0002\u0002\u0002\u00c7\u00c8\u0007k\u0002\u0002\u00c8", "\u00c9\u0005\u000e\b\u0002\u00c9\r\u0003\u0002\u0002\u0002\u00ca\u00cc", "\u0005\u0012\n\u0002\u00cb\u00ca\u0003\u0002\u0002\u0002\u00cb\u00cc", "\u0003\u0002\u0002\u0002\u00cc\u00cf\u0003\u0002\u0002\u0002\u00cd\u00d0", "\u0005\u0014\u000b\u0002\u00ce\u00d0\u0005\u0010\t\u0002\u00cf\u00cd", "\u0003\u0002\u0002\u0002\u00cf\u00ce\u0003\u0002\u0002\u0002\u00d0\u00d1", "\u0003\u0002\u0002\u0002\u00d1\u00d2\u0005\u0016\f\u0002\u00d2\u00d3", "\u0005\u009aN\u0002\u00d3\u00d7\u0003\u0002\u0002\u0002\u00d4\u00d5", "\u0007y\u0002\u0002\u00d5\u00d7\u0005\u009aN\u0002\u00d6\u00cb\u0003", "\u0002\u0002\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d7\u000f\u0003", "\u0002\u0002\u0002\u00d8\u00de\u0007\u000b\u0002\u0002\u00d9\u00da\u0005", "\u0018\r\u0002\u00da\u00db\u0007\u000f\u0002\u0002\u00db\u00dd\u0003", "\u0002\u0002\u0002\u00dc\u00d9\u0003\u0002\u0002\u0002\u00dd\u00e0\u0003", "\u0002\u0002\u0002\u00de\u00dc\u0003\u0002\u0002\u0002\u00de\u00df\u0003", "\u0002\u0002\u0002\u00df\u00e5\u0003\u0002\u0002\u0002\u00e0\u00de\u0003", "\u0002\u0002\u0002\u00e1\u00e3\u0005\u0018\r\u0002\u00e2\u00e4\u0007", "\u000f\u0002\u0002\u00e3\u00e2\u0003\u0002\u0002\u0002\u00e3\u00e4\u0003", "\u0002\u0002\u0002\u00e4\u00e6\u0003\u0002\u0002\u0002\u00e5\u00e1\u0003", "\u0002\u0002\u0002\u00e5\u00e6\u0003\u0002\u0002\u0002\u00e6\u00e7\u0003", "\u0002\u0002\u0002\u00e7\u00e8\u0007\r\u0002\u0002\u00e8\u0011\u0003", "\u0002\u0002\u0002\u00e9\u00ea\u0005\u0018\r\u0002\u00ea\u00eb\u0007", "\u000f\u0002\u0002\u00eb\u0013\u0003\u0002\u0002\u0002\u00ec\u00ef\u0007", "\u001b\u0002\u0002\u00ed\u00ef\u0005\u0090I\u0002\u00ee\u00ec\u0003", "\u0002\u0002\u0002\u00ee\u00ed\u0003\u0002\u0002\u0002\u00ef\u00f2\u0003", "\u0002\u0002\u0002\u00f0\u00f1\u0007c\u0002\u0002\u00f1\u00f3\u0005", "\u0090I\u0002\u00f2\u00f0\u0003\u0002\u0002\u0002\u00f2\u00f3\u0003", "\u0002\u0002\u0002\u00f3\u0015\u0003\u0002\u0002\u0002\u00f4\u00f5\u0007", "d\u0002\u0002\u00f5\u00f6\u0007y\u0002\u0002\u00f6\u0017\u0003\u0002", "\u0002\u0002\u00f7\u00fa\u0005\u0090I\u0002\u00f8\u00f9\u0007c\u0002", "\u0002\u00f9\u00fb\u0005\u0090I\u0002\u00fa\u00f8\u0003\u0002\u0002", "\u0002\u00fa\u00fb\u0003\u0002\u0002\u0002\u00fb\u0019\u0003\u0002\u0002", "\u0002\u00fc\u00ff\u0007j\u0002\u0002\u00fd\u0100\u0005\u001c\u000f", "\u0002\u00fe\u0100\u0005\u001e\u0010\u0002\u00ff\u00fd\u0003\u0002\u0002", "\u0002\u00ff\u00fe\u0003\u0002\u0002\u0002\u0100\u0101\u0003\u0002\u0002", "\u0002\u0101\u0102\u0005\u009aN\u0002\u0102\u0109\u0003\u0002\u0002", "\u0002\u0103\u0104\u0007j\u0002\u0002\u0104\u0105\u0007]\u0002\u0002", "\u0105\u0106\u0005t;\u0002\u0106\u0107\u0005\u009aN\u0002\u0107\u0109", "\u0003\u0002\u0002\u0002\u0108\u00fc\u0003\u0002\u0002\u0002\u0108\u0103", "\u0003\u0002\u0002\u0002\u0109\u001b\u0003\u0002\u0002\u0002\u010a\u010b", "\u0005\u0014\u000b\u0002\u010b\u010c\u0005\u0016\f\u0002\u010c\u010d", "\u0005\u009aN\u0002\u010d\u0115\u0003\u0002\u0002\u0002\u010e\u0110", "\u0005\u0010\t\u0002\u010f\u0111\u0005\u0016\f\u0002\u0110\u010f\u0003", "\u0002\u0002\u0002\u0110\u0111\u0003\u0002\u0002\u0002\u0111\u0112\u0003", "\u0002\u0002\u0002\u0112\u0113\u0005\u009aN\u0002\u0113\u0115\u0003", "\u0002\u0002\u0002\u0114\u010a\u0003\u0002\u0002\u0002\u0114\u010e\u0003", "\u0002\u0002\u0002\u0115\u001d\u0003\u0002\u0002\u0002\u0116\u011a\u0005", " \u0011\u0002\u0117\u011a\u0005R*\u0002\u0118\u011a\u0005P)\u0002\u0119", "\u0116\u0003\u0002\u0002\u0002\u0119\u0117\u0003\u0002\u0002\u0002\u0119", "\u0118\u0003\u0002\u0002\u0002\u011a\u001f\u0003\u0002\u0002\u0002\u011b", "\u011c\u0005\"\u0012\u0002\u011c\u011d\u0005\u009aN\u0002\u011d!\u0003", "\u0002\u0002\u0002\u011e\u011f\u0005.\u0018\u0002\u011f\u0124\u0005", "$\u0013\u0002\u0120\u0121\u0007\u000f\u0002\u0002\u0121\u0123\u0005", "$\u0013\u0002\u0122\u0120\u0003\u0002\u0002\u0002\u0123\u0126\u0003", "\u0002\u0002\u0002\u0124\u0122\u0003\u0002\u0002\u0002\u0124\u0125\u0003", "\u0002\u0002\u0002\u0125#\u0003\u0002\u0002\u0002\u0126\u0124\u0003", "\u0002\u0002\u0002\u0127\u012a\u0005v<\u0002\u0128\u0129\u0007\u0010", "\u0002\u0002\u0129\u012b\u0005t;\u0002\u012a\u0128\u0003\u0002\u0002", "\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b%\u0003\u0002\u0002", "\u0002\u012c\u012d\u0007\u000e\u0002\u0002\u012d\'\u0003\u0002\u0002", "\u0002\u012e\u012f\u0006\u0015\u0002\u0002\u012f\u0130\u0005r:\u0002", "\u0130\u0131\u0005\u009aN\u0002\u0131)\u0003\u0002\u0002\u0002\u0132", "\u0133\u0007^\u0002\u0002\u0133\u0134\u0007\t\u0002\u0002\u0134\u0135", "\u0005r:\u0002\u0135\u0136\u0007\n\u0002\u0002\u0136\u0139\u0005\u0006", "\u0004\u0002\u0137\u0138\u0007N\u0002\u0002\u0138\u013a\u0005\u0006", "\u0004\u0002\u0139\u0137\u0003\u0002\u0002\u0002\u0139\u013a\u0003\u0002", "\u0002\u0002\u013a+\u0003\u0002\u0002\u0002\u013b\u013c\u0007J\u0002", "\u0002\u013c\u013d\u0005\u0006\u0004\u0002\u013d\u013e\u0007X\u0002", "\u0002\u013e\u013f\u0007\t\u0002\u0002\u013f\u0140\u0005r:\u0002\u0140", "\u0141\u0007\n\u0002\u0002\u0141\u0142\u0005\u009aN\u0002\u0142\u0174", "\u0003\u0002\u0002\u0002\u0143\u0144\u0007X\u0002\u0002\u0144\u0145", "\u0007\t\u0002\u0002\u0145\u0146\u0005r:\u0002\u0146\u0147\u0007\n\u0002", "\u0002\u0147\u0148\u0005\u0006\u0004\u0002\u0148\u0174\u0003\u0002\u0002", "\u0002\u0149\u014a\u0007V\u0002\u0002\u014a\u014d\u0007\t\u0002\u0002", "\u014b\u014e\u0005r:\u0002\u014c\u014e\u0005\"\u0012\u0002\u014d\u014b", "\u0003\u0002\u0002\u0002\u014d\u014c\u0003\u0002\u0002\u0002\u014d\u014e", "\u0003\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002\u014f\u0151", "\u0007\u000e\u0002\u0002\u0150\u0152\u0005r:\u0002\u0151\u0150\u0003", "\u0002\u0002\u0002\u0151\u0152\u0003\u0002\u0002\u0002\u0152\u0153\u0003", "\u0002\u0002\u0002\u0153\u0155\u0007\u000e\u0002\u0002\u0154\u0156\u0005", "r:\u0002\u0155\u0154\u0003\u0002\u0002\u0002\u0155\u0156\u0003\u0002", "\u0002\u0002\u0156\u0157\u0003\u0002\u0002\u0002\u0157\u0158\u0007\n", "\u0002\u0002\u0158\u0174\u0005\u0006\u0004\u0002\u0159\u015a\u0007V", "\u0002\u0002\u015a\u015d\u0007\t\u0002\u0002\u015b\u015e\u0005t;\u0002", "\u015c\u015e\u0005\"\u0012\u0002\u015d\u015b\u0003\u0002\u0002\u0002", "\u015d\u015c\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002", "\u015f\u0160\u0007a\u0002\u0002\u0160\u0161\u0005r:\u0002\u0161\u0162", "\u0007\n\u0002\u0002\u0162\u0163\u0005\u0006\u0004\u0002\u0163\u0174", "\u0003\u0002\u0002\u0002\u0164\u0166\u0007V\u0002\u0002\u0165\u0167", "\u0007m\u0002\u0002\u0166\u0165\u0003\u0002\u0002\u0002\u0166\u0167", "\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002\u0002\u0168\u016b", "\u0007\t\u0002\u0002\u0169\u016c\u0005t;\u0002\u016a\u016c\u0005\"\u0012", "\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016b\u016a\u0003\u0002\u0002", "\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u016e\u0005\u0092J", "\u0002\u016e\u016f\u0006\u0017\u0003\u0002\u016f\u0170\u0005r:\u0002", "\u0170\u0171\u0007\n\u0002\u0002\u0171\u0172\u0005\u0006\u0004\u0002", "\u0172\u0174\u0003\u0002\u0002\u0002\u0173\u013b\u0003\u0002\u0002\u0002", "\u0173\u0143\u0003\u0002\u0002\u0002\u0173\u0149\u0003\u0002\u0002\u0002", "\u0173\u0159\u0003\u0002\u0002\u0002\u0173\u0164\u0003\u0002\u0002\u0002", "\u0174-\u0003\u0002\u0002\u0002\u0175\u0179\u0007P\u0002\u0002\u0176", "\u0179\u0005\u0098M\u0002\u0177\u0179\u0007i\u0002\u0002\u0178\u0175", "\u0003\u0002\u0002\u0002\u0178\u0176\u0003\u0002\u0002\u0002\u0178\u0177", "\u0003\u0002\u0002\u0002\u0179/\u0003\u0002\u0002\u0002\u017a\u017d", "\u0007U\u0002\u0002\u017b\u017c\u0006\u0019\u0004\u0002\u017c\u017e", "\u0005\u0092J\u0002\u017d\u017b\u0003\u0002\u0002\u0002\u017d\u017e", "\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002\u017f\u0180", "\u0005\u009aN\u0002\u01801\u0003\u0002\u0002\u0002\u0181\u0184\u0007", "I\u0002\u0002\u0182\u0183\u0006\u001a\u0005\u0002\u0183\u0185\u0005", "\u0092J\u0002\u0184\u0182\u0003\u0002\u0002\u0002\u0184\u0185\u0003", "\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0187\u0005", "\u009aN\u0002\u01873\u0003\u0002\u0002\u0002\u0188\u018b\u0007S\u0002", "\u0002\u0189\u018a\u0006\u001b\u0006\u0002\u018a\u018c\u0005r:\u0002", "\u018b\u0189\u0003\u0002\u0002\u0002\u018b\u018c\u0003\u0002\u0002\u0002", "\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018e\u0005\u009aN\u0002", "\u018e5\u0003\u0002\u0002\u0002\u018f\u0192\u0007w\u0002\u0002\u0190", "\u0191\u0006\u001c\u0007\u0002\u0191\u0193\u0005r:\u0002\u0192\u0190", "\u0003\u0002\u0002\u0002\u0192\u0193\u0003\u0002\u0002\u0002\u0193\u0194", "\u0003\u0002\u0002\u0002\u0194\u0195\u0005\u009aN\u0002\u01957\u0003", "\u0002\u0002\u0002\u0196\u0197\u0007\\\u0002\u0002\u0197\u0198\u0007", "\t\u0002\u0002\u0198\u0199\u0005r:\u0002\u0199\u019a\u0007\n\u0002\u0002", "\u019a\u019b\u0005\u0006\u0004\u0002\u019b9\u0003\u0002\u0002\u0002", "\u019c\u019d\u0007W\u0002\u0002\u019d\u019e\u0007\t\u0002\u0002\u019e", "\u019f\u0005r:\u0002\u019f\u01a0\u0007\n\u0002\u0002\u01a0\u01a1\u0005", "<\u001f\u0002\u01a1;\u0003\u0002\u0002\u0002\u01a2\u01a4\u0007\u000b", "\u0002\u0002\u01a3\u01a5\u0005> \u0002\u01a4\u01a3\u0003\u0002\u0002", "\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01aa\u0003\u0002\u0002", "\u0002\u01a6\u01a8\u0005B\"\u0002\u01a7\u01a9\u0005> \u0002\u01a8\u01a7", "\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9\u01ab", "\u0003\u0002\u0002\u0002\u01aa\u01a6\u0003\u0002\u0002\u0002\u01aa\u01ab", "\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002\u0002\u01ac\u01ad", "\u0007\r\u0002\u0002\u01ad=\u0003\u0002\u0002\u0002\u01ae\u01b0\u0005", "@!\u0002\u01af\u01ae\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003\u0002", "\u0002\u0002\u01b1\u01af\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003\u0002", "\u0002\u0002\u01b2?\u0003\u0002\u0002\u0002\u01b3\u01b4\u0007M\u0002", "\u0002\u01b4\u01b5\u0005r:\u0002\u01b5\u01b7\u0007\u0012\u0002\u0002", "\u01b6\u01b8\u0005\n\u0006\u0002\u01b7\u01b6\u0003\u0002\u0002\u0002", "\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8A\u0003\u0002\u0002\u0002", "\u01b9\u01ba\u0007]\u0002\u0002\u01ba\u01bc\u0007\u0012\u0002\u0002", "\u01bb\u01bd\u0005\n\u0006\u0002\u01bc\u01bb\u0003\u0002\u0002\u0002", "\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bdC\u0003\u0002\u0002\u0002", "\u01be\u01bf\u0005\u0092J\u0002\u01bf\u01c0\u0007\u0012\u0002\u0002", "\u01c0\u01c1\u0005\u0006\u0004\u0002\u01c1E\u0003\u0002\u0002\u0002", "\u01c2\u01c3\u0007_\u0002\u0002\u01c3\u01c4\u0006$\b\u0002\u01c4\u01c5", "\u0005r:\u0002\u01c5\u01c6\u0005\u009aN\u0002\u01c6G\u0003\u0002\u0002", "\u0002\u01c7\u01c8\u0007b\u0002\u0002\u01c8\u01ce\u0005\b\u0005\u0002", "\u01c9\u01cb\u0005J&\u0002\u01ca\u01cc\u0005L\'\u0002\u01cb\u01ca\u0003", "\u0002\u0002\u0002\u01cb\u01cc\u0003\u0002\u0002\u0002\u01cc\u01cf\u0003", "\u0002\u0002\u0002\u01cd\u01cf\u0005L\'\u0002\u01ce\u01c9\u0003\u0002", "\u0002\u0002\u01ce\u01cd\u0003\u0002\u0002\u0002\u01cfI\u0003\u0002", "\u0002\u0002\u01d0\u01d6\u0007Q\u0002\u0002\u01d1\u01d3\u0007\t\u0002", "\u0002\u01d2\u01d4\u0005v<\u0002\u01d3\u01d2\u0003\u0002\u0002\u0002", "\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002", "\u01d5\u01d7\u0007\n\u0002\u0002\u01d6\u01d1\u0003\u0002\u0002\u0002", "\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002", "\u01d8\u01d9\u0005\b\u0005\u0002\u01d9K\u0003\u0002\u0002\u0002\u01da", "\u01db\u0007R\u0002\u0002\u01db\u01dc\u0005\b\u0005\u0002\u01dcM\u0003", "\u0002\u0002\u0002\u01dd\u01de\u0007Y\u0002\u0002\u01de\u01df\u0005", "\u009aN\u0002\u01dfO\u0003\u0002\u0002\u0002\u01e0\u01e2\u0007l\u0002", "\u0002\u01e1\u01e0\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003\u0002\u0002", "\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e5\u0007Z\u0002", "\u0002\u01e4\u01e6\u0007\u001b\u0002\u0002\u01e5\u01e4\u0003\u0002\u0002", "\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002", "\u0002\u01e7\u01e8\u0005\u0092J\u0002\u01e8\u01ea\u0007\t\u0002\u0002", "\u01e9\u01eb\u0005Z.\u0002\u01ea\u01e9\u0003\u0002\u0002\u0002\u01ea", "\u01eb\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec", "\u01ed\u0007\n\u0002\u0002\u01ed\u01ee\u0005`1\u0002\u01eeQ\u0003\u0002", "\u0002\u0002\u01ef\u01f0\u0007e\u0002\u0002\u01f0\u01f1\u0005\u0092", "J\u0002\u01f1\u01f2\u0005T+\u0002\u01f2S\u0003\u0002\u0002\u0002\u01f3", "\u01f4\u0007g\u0002\u0002\u01f4\u01f6\u0005t;\u0002\u01f5\u01f3\u0003", "\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003", "\u0002\u0002\u0002\u01f7\u01fb\u0007\u000b\u0002\u0002\u01f8\u01fa\u0005", "V,\u0002\u01f9\u01f8\u0003\u0002\u0002\u0002\u01fa\u01fd\u0003\u0002", "\u0002\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002", "\u0002\u0002\u01fc\u01fe\u0003\u0002\u0002\u0002\u01fd\u01fb\u0003\u0002", "\u0002\u0002\u01fe\u01ff\u0007\r\u0002\u0002\u01ffU\u0003\u0002\u0002", "\u0002\u0200\u0205\u0007v\u0002\u0002\u0201\u0202\u0006,\t\u0002\u0202", "\u0205\u0005\u0092J\u0002\u0203\u0205\u0007l\u0002\u0002\u0204\u0200", "\u0003\u0002\u0002\u0002\u0204\u0201\u0003\u0002\u0002\u0002\u0204\u0203", "\u0003\u0002\u0002\u0002\u0205\u0208\u0003\u0002\u0002\u0002\u0206\u0204", "\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207\u020f", "\u0003\u0002\u0002\u0002\u0208\u0206\u0003\u0002\u0002\u0002\u0209\u0210", "\u0005X-\u0002\u020a\u020b\u0005v<\u0002\u020b\u020c\u0007\u0010\u0002", "\u0002\u020c\u020d\u0005x=\u0002\u020d\u020e\u0007\u000e\u0002\u0002", "\u020e\u0210\u0003\u0002\u0002\u0002\u020f\u0209\u0003\u0002\u0002\u0002", "\u020f\u020a\u0003\u0002\u0002\u0002\u0210\u021a\u0003\u0002\u0002\u0002", "\u0211\u021a\u0005&\u0014\u0002\u0212\u0214\u0007 \u0002\u0002\u0213", "\u0212\u0003\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214", "\u0215\u0003\u0002\u0002\u0002\u0215\u0216\u0005l7\u0002\u0216\u0217", "\u0007\u0010\u0002\u0002\u0217\u0218\u0005t;\u0002\u0218\u021a\u0003", "\u0002\u0002\u0002\u0219\u0206\u0003\u0002\u0002\u0002\u0219\u0211\u0003", "\u0002\u0002\u0002\u0219\u0213\u0003\u0002\u0002\u0002\u021aW\u0003", "\u0002\u0002\u0002\u021b\u021d\u0007\u001b\u0002\u0002\u021c\u021b\u0003", "\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002\u021d\u021f\u0003", "\u0002\u0002\u0002\u021e\u0220\u0007 \u0002\u0002\u021f\u021e\u0003", "\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0221\u0003", "\u0002\u0002\u0002\u0221\u0222\u0005l7\u0002\u0222\u0224\u0007\t\u0002", "\u0002\u0223\u0225\u0005Z.\u0002\u0224\u0223\u0003\u0002\u0002\u0002", "\u0224\u0225\u0003\u0002\u0002\u0002\u0225\u0226\u0003\u0002\u0002\u0002", "\u0226\u0227\u0007\n\u0002\u0002\u0227\u0228\u0005`1\u0002\u0228\u0243", "\u0003\u0002\u0002\u0002\u0229\u022b\u0007\u001b\u0002\u0002\u022a\u0229", "\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022d", "\u0003\u0002\u0002\u0002\u022c\u022e\u0007 \u0002\u0002\u022d\u022c", "\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002\u0002\u0002\u022e\u022f", "\u0003\u0002\u0002\u0002\u022f\u0230\u0005\u008cG\u0002\u0230\u0231", "\u0007\t\u0002\u0002\u0231\u0232\u0007\n\u0002\u0002\u0232\u0233\u0005", "`1\u0002\u0233\u0243\u0003\u0002\u0002\u0002\u0234\u0236\u0007\u001b", "\u0002\u0002\u0235\u0234\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002", "\u0002\u0002\u0236\u0238\u0003\u0002\u0002\u0002\u0237\u0239\u0007 ", "\u0002\u0002\u0238\u0237\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002", "\u0002\u0002\u0239\u023a\u0003\u0002\u0002\u0002\u023a\u023b\u0005\u008e", "H\u0002\u023b\u023d\u0007\t\u0002\u0002\u023c\u023e\u0005Z.\u0002\u023d", "\u023c\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e", "\u023f\u0003\u0002\u0002\u0002\u023f\u0240\u0007\n\u0002\u0002\u0240", "\u0241\u0005`1\u0002\u0241\u0243\u0003\u0002\u0002\u0002\u0242\u021c", "\u0003\u0002\u0002\u0002\u0242\u022a\u0003\u0002\u0002\u0002\u0242\u0235", "\u0003\u0002\u0002\u0002\u0243Y\u0003\u0002\u0002\u0002\u0244\u0249", "\u0005\\/\u0002\u0245\u0246\u0007\u000f\u0002\u0002\u0246\u0248\u0005", "\\/\u0002\u0247\u0245\u0003\u0002\u0002\u0002\u0248\u024b\u0003\u0002", "\u0002\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002", "\u0002\u0002\u024a\u024e\u0003\u0002\u0002\u0002\u024b\u0249\u0003\u0002", "\u0002\u0002\u024c\u024d\u0007\u000f\u0002\u0002\u024d\u024f\u0005^", "0\u0002\u024e\u024c\u0003\u0002\u0002\u0002\u024e\u024f\u0003\u0002", "\u0002\u0002\u024f\u0252\u0003\u0002\u0002\u0002\u0250\u0252\u0005^", "0\u0002\u0251\u0244\u0003\u0002\u0002\u0002\u0251\u0250\u0003\u0002", "\u0002\u0002\u0252[\u0003\u0002\u0002\u0002\u0253\u0256\u0005v<\u0002", "\u0254\u0255\u0007\u0010\u0002\u0002\u0255\u0257\u0005t;\u0002\u0256", "\u0254\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257", "]\u0003\u0002\u0002\u0002\u0258\u0259\u0007\u0013\u0002\u0002\u0259", "\u025a\u0005t;\u0002\u025a_\u0003\u0002\u0002\u0002\u025b\u025d\u0007", "\u000b\u0002\u0002\u025c\u025e\u0005b2\u0002\u025d\u025c\u0003\u0002", "\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002\u025e\u025f\u0003\u0002", "\u0002\u0002\u025f\u0260\u0007\r\u0002\u0002\u0260a\u0003\u0002\u0002", "\u0002\u0261\u0263\u0005\u0004\u0003\u0002\u0262\u0261\u0003\u0002\u0002", "\u0002\u0263\u0264\u0003\u0002\u0002\u0002\u0264\u0262\u0003\u0002\u0002", "\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265c\u0003\u0002\u0002", "\u0002\u0266\u0267\u0007\u0007\u0002\u0002\u0267\u0268\u0005f4\u0002", "\u0268\u0269\u0007\b\u0002\u0002\u0269e\u0003\u0002\u0002\u0002\u026a", "\u026c\u0007\u000f\u0002\u0002\u026b\u026a\u0003\u0002\u0002\u0002\u026c", "\u026f\u0003\u0002\u0002\u0002\u026d\u026b\u0003\u0002\u0002\u0002\u026d", "\u026e\u0003\u0002\u0002\u0002\u026e\u0271\u0003\u0002\u0002\u0002\u026f", "\u026d\u0003\u0002\u0002\u0002\u0270\u0272\u0005h5\u0002\u0271\u0270", "\u0003\u0002\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002\u0272\u027b", "\u0003\u0002\u0002\u0002\u0273\u0275\u0007\u000f\u0002\u0002\u0274\u0273", "\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002\u0002\u0002\u0276\u0274", "\u0003\u0002\u0002\u0002\u0276\u0277\u0003\u0002\u0002\u0002\u0277\u0278", "\u0003\u0002\u0002\u0002\u0278\u027a\u0005h5\u0002\u0279\u0274\u0003", "\u0002\u0002\u0002\u027a\u027d\u0003\u0002\u0002\u0002\u027b\u0279\u0003", "\u0002\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u0281\u0003", "\u0002\u0002\u0002\u027d\u027b\u0003\u0002\u0002\u0002\u027e\u0280\u0007", "\u000f\u0002\u0002\u027f\u027e\u0003\u0002\u0002\u0002\u0280\u0283\u0003", "\u0002\u0002\u0002\u0281\u027f\u0003\u0002\u0002\u0002\u0281\u0282\u0003", "\u0002\u0002\u0002\u0282g\u0003\u0002\u0002\u0002\u0283\u0281\u0003", "\u0002\u0002\u0002\u0284\u0286\u0007\u0013\u0002\u0002\u0285\u0284\u0003", "\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0287\u0003", "\u0002\u0002\u0002\u0287\u0288\u0005t;\u0002\u0288i\u0003\u0002\u0002", "\u0002\u0289\u028a\u0005l7\u0002\u028a\u028b\u0007\u0012\u0002\u0002", "\u028b\u028c\u0005t;\u0002\u028c\u02b1\u0003\u0002\u0002\u0002\u028d", "\u028e\u0007\u0007\u0002\u0002\u028e\u028f\u0005t;\u0002\u028f\u0290", "\u0007\b\u0002\u0002\u0290\u0291\u0007\u0012\u0002\u0002\u0291\u0292", "\u0005t;\u0002\u0292\u02b1\u0003\u0002\u0002\u0002\u0293\u0295\u0007", "l\u0002\u0002\u0294\u0293\u0003\u0002\u0002\u0002\u0294\u0295\u0003", "\u0002\u0002\u0002\u0295\u0297\u0003\u0002\u0002\u0002\u0296\u0298\u0007", "\u001b\u0002\u0002\u0297\u0296\u0003\u0002\u0002\u0002\u0297\u0298\u0003", "\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002\u0299\u029a\u0005", "l7\u0002\u029a\u029c\u0007\t\u0002\u0002\u029b\u029d\u0005Z.\u0002\u029c", "\u029b\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d", "\u029e\u0003\u0002\u0002\u0002\u029e\u029f\u0007\n\u0002\u0002\u029f", "\u02a0\u0005`1\u0002\u02a0\u02b1\u0003\u0002\u0002\u0002\u02a1\u02a2", "\u0005\u008cG\u0002\u02a2\u02a3\u0007\t\u0002\u0002\u02a3\u02a4\u0007", "\n\u0002\u0002\u02a4\u02a5\u0005`1\u0002\u02a5\u02b1\u0003\u0002\u0002", "\u0002\u02a6\u02a7\u0005\u008eH\u0002\u02a7\u02a8\u0007\t\u0002\u0002", "\u02a8\u02a9\u0005\\/\u0002\u02a9\u02aa\u0007\n\u0002\u0002\u02aa\u02ab", "\u0005`1\u0002\u02ab\u02b1\u0003\u0002\u0002\u0002\u02ac\u02ae\u0007", "\u0013\u0002\u0002\u02ad\u02ac\u0003\u0002\u0002\u0002\u02ad\u02ae\u0003", "\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02af\u02b1\u0005", "t;\u0002\u02b0\u0289\u0003\u0002\u0002\u0002\u02b0\u028d\u0003\u0002", "\u0002\u0002\u02b0\u0294\u0003\u0002\u0002\u0002\u02b0\u02a1\u0003\u0002", "\u0002\u0002\u02b0\u02a6\u0003\u0002\u0002\u0002\u02b0\u02ad\u0003\u0002", "\u0002\u0002\u02b1k\u0003\u0002\u0002\u0002\u02b2\u02ba\u0005\u0090", "I\u0002\u02b3\u02ba\u0007y\u0002\u0002\u02b4\u02ba\u0005\u0088E\u0002", "\u02b5\u02b6\u0007\u0007\u0002\u0002\u02b6\u02b7\u0005t;\u0002\u02b7", "\u02b8\u0007\b\u0002\u0002\u02b8\u02ba\u0003\u0002\u0002\u0002\u02b9", "\u02b2\u0003\u0002\u0002\u0002\u02b9\u02b3\u0003\u0002\u0002\u0002\u02b9", "\u02b4\u0003\u0002\u0002\u0002\u02b9\u02b5\u0003\u0002\u0002\u0002\u02ba", "m\u0003\u0002\u0002\u0002\u02bb\u02c7\u0007\t\u0002\u0002\u02bc\u02c1", "\u0005p9\u0002\u02bd\u02be\u0007\u000f\u0002\u0002\u02be\u02c0\u0005", "p9\u0002\u02bf\u02bd\u0003\u0002\u0002\u0002\u02c0\u02c3\u0003\u0002", "\u0002\u0002\u02c1\u02bf\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002", "\u0002\u0002\u02c2\u02c5\u0003\u0002\u0002\u0002\u02c3\u02c1\u0003\u0002", "\u0002\u0002\u02c4\u02c6\u0007\u000f\u0002\u0002\u02c5\u02c4\u0003\u0002", "\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c8\u0003\u0002", "\u0002\u0002\u02c7\u02bc\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002", "\u0002\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02ca\u0007\n", "\u0002\u0002\u02cao\u0003\u0002\u0002\u0002\u02cb\u02cd\u0007\u0013", "\u0002\u0002\u02cc\u02cb\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002", "\u0002\u0002\u02cd\u02d0\u0003\u0002\u0002\u0002\u02ce\u02d1\u0005t", ";\u0002\u02cf\u02d1\u0005\u0092J\u0002\u02d0\u02ce\u0003\u0002\u0002", "\u0002\u02d0\u02cf\u0003\u0002\u0002\u0002\u02d1q\u0003\u0002\u0002", "\u0002\u02d2\u02d7\u0005t;\u0002\u02d3\u02d4\u0007\u000f\u0002\u0002", "\u02d4\u02d6\u0005t;\u0002\u02d5\u02d3\u0003\u0002\u0002\u0002\u02d6", "\u02d9\u0003\u0002\u0002\u0002\u02d7\u02d5\u0003\u0002\u0002\u0002\u02d7", "\u02d8\u0003\u0002\u0002\u0002\u02d8s\u0003\u0002\u0002\u0002\u02d9", "\u02d7\u0003\u0002\u0002\u0002\u02da\u02db\b;\u0001\u0002\u02db\u030f", "\u0005z>\u0002\u02dc\u02de\u0007e\u0002\u0002\u02dd\u02df\u0005\u0092", "J\u0002\u02de\u02dd\u0003\u0002\u0002\u0002\u02de\u02df\u0003\u0002", "\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u030f\u0005T", "+\u0002\u02e1\u02e2\u0007O\u0002\u0002\u02e2\u02e3\u0005t;\u0002\u02e3", "\u02e4\u0005n8\u0002\u02e4\u030f\u0003\u0002\u0002\u0002\u02e5\u02e6", "\u0007O\u0002\u0002\u02e6\u030f\u0005t;,\u02e7\u02e8\u0007O\u0002\u0002", "\u02e8\u02e9\u0007\u0014\u0002\u0002\u02e9\u030f\u0005\u0092J\u0002", "\u02ea\u02eb\u0007`\u0002\u0002\u02eb\u030f\u0005t;\'\u02ec\u02ed\u0007", "T\u0002\u0002\u02ed\u030f\u0005t;&\u02ee\u02ef\u0007L\u0002\u0002\u02ef", "\u030f\u0005t;%\u02f0\u02f1\u0007\u0015\u0002\u0002\u02f1\u030f\u0005", "t;$\u02f2\u02f3\u0007\u0016\u0002\u0002\u02f3\u030f\u0005t;#\u02f4\u02f5", "\u0007\u0017\u0002\u0002\u02f5\u030f\u0005t;\"\u02f6\u02f7\u0007\u0018", "\u0002\u0002\u02f7\u030f\u0005t;!\u02f8\u02f9\u0007\u0019\u0002\u0002", "\u02f9\u030f\u0005t; \u02fa\u02fb\u0007\u001a\u0002\u0002\u02fb\u030f", "\u0005t;\u001f\u02fc\u02fd\u0007m\u0002\u0002\u02fd\u030f\u0005t;\u001e", "\u02fe\u02ff\u0007k\u0002\u0002\u02ff\u0300\u0007\t\u0002\u0002\u0300", "\u0301\u0005t;\u0002\u0301\u0302\u0007\n\u0002\u0002\u0302\u030f\u0003", "\u0002\u0002\u0002\u0303\u030f\u00056\u001c\u0002\u0304\u030f\u0007", "[\u0002\u0002\u0305\u030f\u0005\u0092J\u0002\u0306\u030f\u0007h\u0002", "\u0002\u0307\u030f\u0005\u0082B\u0002\u0308\u030f\u0005d3\u0002\u0309", "\u030f\u0005x=\u0002\u030a\u030b\u0007\t\u0002\u0002\u030b\u030c\u0005", "r:\u0002\u030c\u030d\u0007\n\u0002\u0002\u030d\u030f\u0003\u0002\u0002", "\u0002\u030e\u02da\u0003\u0002\u0002\u0002\u030e\u02dc\u0003\u0002\u0002", "\u0002\u030e\u02e1\u0003\u0002\u0002\u0002\u030e\u02e5\u0003\u0002\u0002", "\u0002\u030e\u02e7\u0003\u0002\u0002\u0002\u030e\u02ea\u0003\u0002\u0002", "\u0002\u030e\u02ec\u0003\u0002\u0002\u0002\u030e\u02ee\u0003\u0002\u0002", "\u0002\u030e\u02f0\u0003\u0002\u0002\u0002\u030e\u02f2\u0003\u0002\u0002", "\u0002\u030e\u02f4\u0003\u0002\u0002\u0002\u030e\u02f6\u0003\u0002\u0002", "\u0002\u030e\u02f8\u0003\u0002\u0002\u0002\u030e\u02fa\u0003\u0002\u0002", "\u0002\u030e\u02fc\u0003\u0002\u0002\u0002\u030e\u02fe\u0003\u0002\u0002", "\u0002\u030e\u0303\u0003\u0002\u0002\u0002\u030e\u0304\u0003\u0002\u0002", "\u0002\u030e\u0305\u0003\u0002\u0002\u0002\u030e\u0306\u0003\u0002\u0002", "\u0002\u030e\u0307\u0003\u0002\u0002\u0002\u030e\u0308\u0003\u0002\u0002", "\u0002\u030e\u0309\u0003\u0002\u0002\u0002\u030e\u030a\u0003\u0002\u0002", "\u0002\u030f\u0361\u0003\u0002\u0002\u0002\u0310\u0311\f\u001d\u0002", "\u0002\u0311\u0312\u0007\u001e\u0002\u0002\u0312\u0360\u0005t;\u001d", "\u0313\u0314\f\u001c\u0002\u0002\u0314\u0315\t\u0002\u0002\u0002\u0315", "\u0360\u0005t;\u001d\u0316\u0317\f\u001b\u0002\u0002\u0317\u0318\t\u0003", "\u0002\u0002\u0318\u0360\u0005t;\u001c\u0319\u031a\f\u001a\u0002\u0002", "\u031a\u031b\u0007\u001f\u0002\u0002\u031b\u0360\u0005t;\u001b\u031c", "\u031d\f\u0019\u0002\u0002\u031d\u031e\t\u0004\u0002\u0002\u031e\u0360", "\u0005t;\u001a\u031f\u0320\f\u0018\u0002\u0002\u0320\u0321\t\u0005\u0002", "\u0002\u0321\u0360\u0005t;\u0019\u0322\u0323\f\u0017\u0002\u0002\u0323", "\u0324\u0007K\u0002\u0002\u0324\u0360\u0005t;\u0018\u0325\u0326\f\u0016", "\u0002\u0002\u0326\u0327\u0007a\u0002\u0002\u0327\u0360\u0005t;\u0017", "\u0328\u0329\f\u0015\u0002\u0002\u0329\u032a\t\u0006\u0002\u0002\u032a", "\u0360\u0005t;\u0016\u032b\u032c\f\u0014\u0002\u0002\u032c\u032d\u0007", ",\u0002\u0002\u032d\u0360\u0005t;\u0015\u032e\u032f\f\u0013\u0002\u0002", "\u032f\u0330\u0007-\u0002\u0002\u0330\u0360\u0005t;\u0014\u0331\u0332", "\f\u0012\u0002\u0002\u0332\u0333\u0007.\u0002\u0002\u0333\u0360\u0005", "t;\u0013\u0334\u0335\f\u0011\u0002\u0002\u0335\u0336\u0007/\u0002\u0002", "\u0336\u0360\u0005t;\u0012\u0337\u0338\f\u0010\u0002\u0002\u0338\u0339", "\u00070\u0002\u0002\u0339\u0360\u0005t;\u0011\u033a\u033b\f\u000f\u0002", "\u0002\u033b\u033c\u0007\u0011\u0002\u0002\u033c\u033d\u0005t;\u0002", "\u033d\u033e\u0007\u0012\u0002\u0002\u033e\u033f\u0005t;\u0010\u033f", "\u0360\u0003\u0002\u0002\u0002\u0340\u0341\f\u000e\u0002\u0002\u0341", "\u0342\u0007\u0010\u0002\u0002\u0342\u0360\u0005t;\u000e\u0343\u0344", "\f\r\u0002\u0002\u0344\u0345\u0005\u0080A\u0002\u0345\u0346\u0005t;", "\r\u0346\u0360\u0003\u0002\u0002\u0002\u0347\u0348\f/\u0002\u0002\u0348", "\u0349\u0007\u0007\u0002\u0002\u0349\u034a\u0005r:\u0002\u034a\u034b", "\u0007\b\u0002\u0002\u034b\u0360\u0003\u0002\u0002\u0002\u034c\u034e", "\f.\u0002\u0002\u034d\u034f\u0007\u0011\u0002\u0002\u034e\u034d\u0003", "\u0002\u0002\u0002\u034e\u034f\u0003\u0002\u0002\u0002\u034f\u0350\u0003", "\u0002\u0002\u0002\u0350\u0352\u0007\u0014\u0002\u0002\u0351\u0353\u0007", " \u0002\u0002\u0352\u0351\u0003\u0002\u0002\u0002\u0352\u0353\u0003", "\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354\u0360\u0005", "\u0090I\u0002\u0355\u0356\f+\u0002\u0002\u0356\u0360\u0005n8\u0002\u0357", "\u0358\f)\u0002\u0002\u0358\u0359\u0006;\u001f\u0002\u0359\u0360\u0007", "\u0015\u0002\u0002\u035a\u035b\f(\u0002\u0002\u035b\u035c\u0006;!\u0002", "\u035c\u0360\u0007\u0016\u0002\u0002\u035d\u035e\f\u000b\u0002\u0002", "\u035e\u0360\u0005\u0084C\u0002\u035f\u0310\u0003\u0002\u0002\u0002", "\u035f\u0313\u0003\u0002\u0002\u0002\u035f\u0316\u0003\u0002\u0002\u0002", "\u035f\u0319\u0003\u0002\u0002\u0002\u035f\u031c\u0003\u0002\u0002\u0002", "\u035f\u031f\u0003\u0002\u0002\u0002\u035f\u0322\u0003\u0002\u0002\u0002", "\u035f\u0325\u0003\u0002\u0002\u0002\u035f\u0328\u0003\u0002\u0002\u0002", "\u035f\u032b\u0003\u0002\u0002\u0002\u035f\u032e\u0003\u0002\u0002\u0002", "\u035f\u0331\u0003\u0002\u0002\u0002\u035f\u0334\u0003\u0002\u0002\u0002", "\u035f\u0337\u0003\u0002\u0002\u0002\u035f\u033a\u0003\u0002\u0002\u0002", "\u035f\u0340\u0003\u0002\u0002\u0002\u035f\u0343\u0003\u0002\u0002\u0002", "\u035f\u0347\u0003\u0002\u0002\u0002\u035f\u034c\u0003\u0002\u0002\u0002", "\u035f\u0355\u0003\u0002\u0002\u0002\u035f\u0357\u0003\u0002\u0002\u0002", "\u035f\u035a\u0003\u0002\u0002\u0002\u035f\u035d\u0003\u0002\u0002\u0002", "\u0360\u0363\u0003\u0002\u0002\u0002\u0361\u035f\u0003\u0002\u0002\u0002", "\u0361\u0362\u0003\u0002\u0002\u0002\u0362u\u0003\u0002\u0002\u0002", "\u0363\u0361\u0003\u0002\u0002\u0002\u0364\u0368\u0005\u0092J\u0002", "\u0365\u0368\u0005d3\u0002\u0366\u0368\u0005x=\u0002\u0367\u0364\u0003", "\u0002\u0002\u0002\u0367\u0365\u0003\u0002\u0002\u0002\u0367\u0366\u0003", "\u0002\u0002\u0002\u0368w\u0003\u0002\u0002\u0002\u0369\u0375\u0007", "\u000b\u0002\u0002\u036a\u036f\u0005j6\u0002\u036b\u036c\u0007\u000f", "\u0002\u0002\u036c\u036e\u0005j6\u0002\u036d\u036b\u0003\u0002\u0002", "\u0002\u036e\u0371\u0003\u0002\u0002\u0002\u036f\u036d\u0003\u0002\u0002", "\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0373\u0003\u0002\u0002", "\u0002\u0371\u036f\u0003\u0002\u0002\u0002\u0372\u0374\u0007\u000f\u0002", "\u0002\u0373\u0372\u0003\u0002\u0002\u0002\u0373\u0374\u0003\u0002\u0002", "\u0002\u0374\u0376\u0003\u0002\u0002\u0002\u0375\u036a\u0003\u0002\u0002", "\u0002\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002", "\u0002\u0377\u0378\u0007\r\u0002\u0002\u0378y\u0003\u0002\u0002\u0002", "\u0379\u038f\u0005P)\u0002\u037a\u037c\u0007l\u0002\u0002\u037b\u037a", "\u0003\u0002\u0002\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037c\u037d", "\u0003\u0002\u0002\u0002\u037d\u037f\u0007Z\u0002\u0002\u037e\u0380", "\u0007\u001b\u0002\u0002\u037f\u037e\u0003\u0002\u0002\u0002\u037f\u0380", "\u0003\u0002\u0002\u0002\u0380\u0381\u0003\u0002\u0002\u0002\u0381\u0383", "\u0007\t\u0002\u0002\u0382\u0384\u0005Z.\u0002\u0383\u0382\u0003\u0002", "\u0002\u0002\u0383\u0384\u0003\u0002\u0002\u0002\u0384\u0385\u0003\u0002", "\u0002\u0002\u0385\u0386\u0007\n\u0002\u0002\u0386\u038f\u0005`1\u0002", "\u0387\u0389\u0007l\u0002\u0002\u0388\u0387\u0003\u0002\u0002\u0002", "\u0388\u0389\u0003\u0002\u0002\u0002\u0389\u038a\u0003\u0002\u0002\u0002", "\u038a\u038b\u0005|?\u0002\u038b\u038c\u0007=\u0002\u0002\u038c\u038d", "\u0005~@\u0002\u038d\u038f\u0003\u0002\u0002\u0002\u038e\u0379\u0003", "\u0002\u0002\u0002\u038e\u037b\u0003\u0002\u0002\u0002\u038e\u0388\u0003", "\u0002\u0002\u0002\u038f{\u0003\u0002\u0002\u0002\u0390\u0397\u0005", "\u0092J\u0002\u0391\u0393\u0007\t\u0002\u0002\u0392\u0394\u0005Z.\u0002", "\u0393\u0392\u0003\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002\u0002", "\u0394\u0395\u0003\u0002\u0002\u0002\u0395\u0397\u0007\n\u0002\u0002", "\u0396\u0390\u0003\u0002\u0002\u0002\u0396\u0391\u0003\u0002\u0002\u0002", "\u0397}\u0003\u0002\u0002\u0002\u0398\u039b\u0005t;\u0002\u0399\u039b", "\u0005`1\u0002\u039a\u0398\u0003\u0002\u0002\u0002\u039a\u0399\u0003", "\u0002\u0002\u0002\u039b\u007f\u0003\u0002\u0002\u0002\u039c\u039d\t", "\u0007\u0002\u0002\u039d\u0081\u0003\u0002\u0002\u0002\u039e\u03a6\u0007", ">\u0002\u0002\u039f\u03a6\u0007?\u0002\u0002\u03a0\u03a6\u0007y\u0002", "\u0002\u03a1\u03a6\u0005\u0084C\u0002\u03a2\u03a6\u0007\u0006\u0002", "\u0002\u03a3\u03a6\u0005\u0088E\u0002\u03a4\u03a6\u0005\u008aF\u0002", "\u03a5\u039e\u0003\u0002\u0002\u0002\u03a5\u039f\u0003\u0002\u0002\u0002", "\u03a5\u03a0\u0003\u0002\u0002\u0002\u03a5\u03a1\u0003\u0002\u0002\u0002", "\u03a5\u03a2\u0003\u0002\u0002\u0002\u03a5\u03a3\u0003\u0002\u0002\u0002", "\u03a5\u03a4\u0003\u0002\u0002\u0002\u03a6\u0083\u0003\u0002\u0002\u0002", "\u03a7\u03ab\u0007z\u0002\u0002\u03a8\u03aa\u0005\u0086D\u0002\u03a9", "\u03a8\u0003\u0002\u0002\u0002\u03aa\u03ad\u0003\u0002\u0002\u0002\u03ab", "\u03a9\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003\u0002\u0002\u0002\u03ac", "\u03ae\u0003\u0002\u0002\u0002\u03ad\u03ab\u0003\u0002\u0002\u0002\u03ae", "\u03af\u0007z\u0002\u0002\u03af\u0085\u0003\u0002\u0002\u0002\u03b0", "\u03b6\u0007\u0081\u0002\u0002\u03b1\u03b2\u0007\u0080\u0002\u0002\u03b2", "\u03b3\u0005t;\u0002\u03b3\u03b4\u0007\f\u0002\u0002\u03b4\u03b6\u0003", "\u0002\u0002\u0002\u03b5\u03b0\u0003\u0002\u0002\u0002\u03b5\u03b1\u0003", "\u0002\u0002\u0002\u03b6\u0087\u0003\u0002\u0002\u0002\u03b7\u03b8\t", "\b\u0002\u0002\u03b8\u0089\u0003\u0002\u0002\u0002\u03b9\u03ba\t\t\u0002", "\u0002\u03ba\u008b\u0003\u0002\u0002\u0002\u03bb\u03bc\u0006G#\u0002", "\u03bc\u03bd\u0005\u0092J\u0002\u03bd\u03be\u0005l7\u0002\u03be\u008d", "\u0003\u0002\u0002\u0002\u03bf\u03c0\u0006H$\u0002\u03c0\u03c1\u0005", "\u0092J\u0002\u03c1\u03c2\u0005l7\u0002\u03c2\u008f\u0003\u0002\u0002", "\u0002\u03c3\u03c6\u0005\u0092J\u0002\u03c4\u03c6\u0005\u0094K\u0002", "\u03c5\u03c3\u0003\u0002\u0002\u0002\u03c5\u03c4\u0003\u0002\u0002\u0002", "\u03c6\u0091\u0003\u0002\u0002\u0002\u03c7\u03c8\t\n\u0002\u0002\u03c8", "\u0093\u0003\u0002\u0002\u0002\u03c9\u03cd\u0005\u0096L\u0002\u03ca", "\u03cd\u0007>\u0002\u0002\u03cb\u03cd\u0007?\u0002\u0002\u03cc\u03c9", "\u0003\u0002\u0002\u0002\u03cc\u03ca\u0003\u0002\u0002\u0002\u03cc\u03cb", "\u0003\u0002\u0002\u0002\u03cd\u0095\u0003\u0002\u0002\u0002\u03ce\u03fd", "\u0007I\u0002\u0002\u03cf\u03fd\u0007J\u0002\u0002\u03d0\u03fd\u0007", "K\u0002\u0002\u03d1\u03fd\u0007L\u0002\u0002\u03d2\u03fd\u0007M\u0002", "\u0002\u03d3\u03fd\u0007N\u0002\u0002\u03d4\u03fd\u0007O\u0002\u0002", "\u03d5\u03fd\u0007P\u0002\u0002\u03d6\u03fd\u0007Q\u0002\u0002\u03d7", "\u03fd\u0007R\u0002\u0002\u03d8\u03fd\u0007S\u0002\u0002\u03d9\u03fd", "\u0007T\u0002\u0002\u03da\u03fd\u0007U\u0002\u0002\u03db\u03fd\u0007", "V\u0002\u0002\u03dc\u03fd\u0007W\u0002\u0002\u03dd\u03fd\u0007X\u0002", "\u0002\u03de\u03fd\u0007Y\u0002\u0002\u03df\u03fd\u0007Z\u0002\u0002", "\u03e0\u03fd\u0007[\u0002\u0002\u03e1\u03fd\u0007\\\u0002\u0002\u03e2", "\u03fd\u0007]\u0002\u0002\u03e3\u03fd\u0007^\u0002\u0002\u03e4\u03fd", "\u0007_\u0002\u0002\u03e5\u03fd\u0007`\u0002\u0002\u03e6\u03fd\u0007", "a\u0002\u0002\u03e7\u03fd\u0007b\u0002\u0002\u03e8\u03fd\u0007e\u0002", "\u0002\u03e9\u03fd\u0007f\u0002\u0002\u03ea\u03fd\u0007g\u0002\u0002", "\u03eb\u03fd\u0007h\u0002\u0002\u03ec\u03fd\u0007i\u0002\u0002\u03ed", "\u03fd\u0007j\u0002\u0002\u03ee\u03fd\u0007k\u0002\u0002\u03ef\u03fd", "\u0007n\u0002\u0002\u03f0\u03fd\u0005\u0098M\u0002\u03f1\u03fd\u0007", "q\u0002\u0002\u03f2\u03fd\u0007r\u0002\u0002\u03f3\u03fd\u0007s\u0002", "\u0002\u03f4\u03fd\u0007t\u0002\u0002\u03f5\u03fd\u0007u\u0002\u0002", "\u03f6\u03fd\u0007v\u0002\u0002\u03f7\u03fd\u0007w\u0002\u0002\u03f8", "\u03fd\u0007l\u0002\u0002\u03f9\u03fd\u0007m\u0002\u0002\u03fa\u03fd", "\u0007d\u0002\u0002\u03fb\u03fd\u0007c\u0002\u0002\u03fc\u03ce\u0003", "\u0002\u0002\u0002\u03fc\u03cf\u0003\u0002\u0002\u0002\u03fc\u03d0\u0003", "\u0002\u0002\u0002\u03fc\u03d1\u0003\u0002\u0002\u0002\u03fc\u03d2\u0003", "\u0002\u0002\u0002\u03fc\u03d3\u0003\u0002\u0002\u0002\u03fc\u03d4\u0003", "\u0002\u0002\u0002\u03fc\u03d5\u0003\u0002\u0002\u0002\u03fc\u03d6\u0003", "\u0002\u0002\u0002\u03fc\u03d7\u0003\u0002\u0002\u0002\u03fc\u03d8\u0003", "\u0002\u0002\u0002\u03fc\u03d9\u0003\u0002\u0002\u0002\u03fc\u03da\u0003", "\u0002\u0002\u0002\u03fc\u03db\u0003\u0002\u0002\u0002\u03fc\u03dc\u0003", "\u0002\u0002\u0002\u03fc\u03dd\u0003\u0002\u0002\u0002\u03fc\u03de\u0003", "\u0002\u0002\u0002\u03fc\u03df\u0003\u0002\u0002\u0002\u03fc\u03e0\u0003", "\u0002\u0002\u0002\u03fc\u03e1\u0003\u0002\u0002\u0002\u03fc\u03e2\u0003", "\u0002\u0002\u0002\u03fc\u03e3\u0003\u0002\u0002\u0002\u03fc\u03e4\u0003", "\u0002\u0002\u0002\u03fc\u03e5\u0003\u0002\u0002\u0002\u03fc\u03e6\u0003", "\u0002\u0002\u0002\u03fc\u03e7\u0003\u0002\u0002\u0002\u03fc\u03e8\u0003", "\u0002\u0002\u0002\u03fc\u03e9\u0003\u0002\u0002\u0002\u03fc\u03ea\u0003", "\u0002\u0002\u0002\u03fc\u03eb\u0003\u0002\u0002\u0002\u03fc\u03ec\u0003", "\u0002\u0002\u0002\u03fc\u03ed\u0003\u0002\u0002\u0002\u03fc\u03ee\u0003", "\u0002\u0002\u0002\u03fc\u03ef\u0003\u0002\u0002\u0002\u03fc\u03f0\u0003", "\u0002\u0002\u0002\u03fc\u03f1\u0003\u0002\u0002\u0002\u03fc\u03f2\u0003", "\u0002\u0002\u0002\u03fc\u03f3\u0003\u0002\u0002\u0002\u03fc\u03f4\u0003", "\u0002\u0002\u0002\u03fc\u03f5\u0003\u0002\u0002\u0002\u03fc\u03f6\u0003", "\u0002\u0002\u0002\u03fc\u03f7\u0003\u0002\u0002\u0002\u03fc\u03f8\u0003", "\u0002\u0002\u0002\u03fc\u03f9\u0003\u0002\u0002\u0002\u03fc\u03fa\u0003", "\u0002\u0002\u0002\u03fc\u03fb\u0003\u0002\u0002\u0002\u03fd\u0097\u0003", "\u0002\u0002\u0002\u03fe\u03ff\t\u000b\u0002\u0002\u03ff\u0099\u0003", "\u0002\u0002\u0002\u0400\u0405\u0007\u000e\u0002\u0002\u0401\u0405\u0007", "\u0002\u0002\u0003\u0402\u0405\u0006N%\u0002\u0403\u0405\u0006N&\u0002", "\u0404\u0400\u0003\u0002\u0002\u0002\u0404\u0401\u0003\u0002\u0002\u0002", "\u0404\u0402\u0003\u0002\u0002\u0002\u0404\u0403\u0003\u0002\u0002\u0002", "\u0405\u009b\u0003\u0002\u0002\u0002r\u009d\u00a0\u00ba\u00be\u00c5", "\u00cb\u00cf\u00d6\u00de\u00e3\u00e5\u00ee\u00f2\u00fa\u00ff\u0108\u0110", "\u0114\u0119\u0124\u012a\u0139\u014d\u0151\u0155\u015d\u0166\u016b\u0173", "\u0178\u017d\u0184\u018b\u0192\u01a4\u01a8\u01aa\u01b1\u01b7\u01bc\u01cb", "\u01ce\u01d3\u01d6\u01e1\u01e5\u01ea\u01f5\u01fb\u0204\u0206\u020f\u0213", "\u0219\u021c\u021f\u0224\u022a\u022d\u0235\u0238\u023d\u0242\u0249\u024e", "\u0251\u0256\u025d\u0264\u026d\u0271\u0276\u027b\u0281\u0285\u0294\u0297", "\u029c\u02ad\u02b0\u02b9\u02c1\u02c5\u02c7\u02cc\u02d0\u02d7\u02de\u030e", "\u034e\u0352\u035f\u0361\u0367\u036f\u0373\u0375\u037b\u037f\u0383\u0388", "\u038e\u0393\u0396\u039a\u03a5\u03ab\u03b5\u03c5\u03cc\u03fc\u0404"].join("");
const atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new _antlr.default.dfa.DFA(ds, index));
const sharedContextCache = new _antlr.default.PredictionContextCache();

class JavaScriptParser extends _JavaScriptParserBase.default {
  static grammarFileName = "JavaScriptParser.g4";
  static literalNames = [null, null, null, null, null, "'['", "']'", "'('", "')'", "'{'", null, "'}'", "';'", "','", "'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'**='", "'=>'", "'null'", null, null, null, null, null, null, null, null, null, null, "'break'", "'do'", "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", "'var'", "'catch'", "'finally'", "'return'", "'void'", "'continue'", "'for'", "'switch'", "'while'", "'debugger'", "'function'", "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", "'as'", "'from'", "'class'", "'enum'", "'extends'", "'super'", "'const'", "'export'", "'import'", "'async'", "'await'", "'implements'", null, null, "'private'", "'public'", "'interface'", "'package'", "'protected'", "'static'", "'yield'", null, null, null, null, null, null, null, null, "'${'"];
  static symbolicNames = [null, "HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", "For", "Switch", "While", "Debugger", "Function_", "This", "With", "Default", "If", "Throw", "Delete", "In", "Try", "As", "From", "Class", "Enum", "Extends", "Super", "Const", "Export", "Import", "Async", "Await", "Implements", "StrictLet", "NonStrictLet", "Private", "Public", "Interface", "Package", "Protected", "Static", "Yield", "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter", "TemplateStringStartExpression", "TemplateStringAtom"];
  static ruleNames = ["program", "sourceElement", "statement", "block", "statementList", "importStatement", "importFromBlock", "moduleItems", "importDefault", "importNamespace", "importFrom", "aliasName", "exportStatement", "exportFromBlock", "declaration", "variableStatement", "variableDeclarationList", "variableDeclaration", "emptyStatement_", "expressionStatement", "ifStatement", "iterationStatement", "varModifier", "continueStatement", "breakStatement", "returnStatement", "yieldStatement", "withStatement", "switchStatement", "caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", "throwStatement", "tryStatement", "catchProduction", "finallyProduction", "debuggerStatement", "functionDeclaration", "classDeclaration", "classTail", "classElement", "methodDefinition", "formalParameterList", "formalParameterArg", "lastFormalParameterArg", "functionBody", "sourceElements", "arrayLiteral", "elementList", "arrayElement", "propertyAssignment", "propertyName", "arguments", "argument", "expressionSequence", "singleExpression", "assignable", "objectLiteral", "anonymousFunction", "arrowFunctionParameters", "arrowFunctionBody", "assignmentOperator", "literal", "templateStringLiteral", "templateStringAtom", "numericLiteral", "bigintLiteral", "getter", "setter", "identifierName", "identifier", "reservedWord", "keyword", "let_", "eos"];

  constructor(input) {
    super(input);
    this._interp = new _antlr.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = JavaScriptParser.ruleNames;
    this.literalNames = JavaScriptParser.literalNames;
    this.symbolicNames = JavaScriptParser.symbolicNames;
  }

  get atn() {
    return atn;
  }

  sempred(localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 19:
        return this.expressionStatement_sempred(localctx, predIndex);

      case 21:
        return this.iterationStatement_sempred(localctx, predIndex);

      case 23:
        return this.continueStatement_sempred(localctx, predIndex);

      case 24:
        return this.breakStatement_sempred(localctx, predIndex);

      case 25:
        return this.returnStatement_sempred(localctx, predIndex);

      case 26:
        return this.yieldStatement_sempred(localctx, predIndex);

      case 34:
        return this.throwStatement_sempred(localctx, predIndex);

      case 42:
        return this.classElement_sempred(localctx, predIndex);

      case 57:
        return this.singleExpression_sempred(localctx, predIndex);

      case 69:
        return this.getter_sempred(localctx, predIndex);

      case 70:
        return this.setter_sempred(localctx, predIndex);

      case 76:
        return this.eos_sempred(localctx, predIndex);

      default:
        throw "No predicate with index:" + ruleIndex;
    }
  }

  expressionStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.notOpenBraceAndNotFunction();

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  iterationStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 1:
        return this.p("of");

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  continueStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 2:
        return this.notLineTerminator();

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  breakStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 3:
        return this.notLineTerminator();

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  returnStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 4:
        return this.notLineTerminator();

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  yieldStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 5:
        return this.notLineTerminator();

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  throwStatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 6:
        return this.notLineTerminator();

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  classElement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 7:
        return this.n("static");

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  singleExpression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 8:
        return this.precpred(this._ctx, 27);

      case 9:
        return this.precpred(this._ctx, 26);

      case 10:
        return this.precpred(this._ctx, 25);

      case 11:
        return this.precpred(this._ctx, 24);

      case 12:
        return this.precpred(this._ctx, 23);

      case 13:
        return this.precpred(this._ctx, 22);

      case 14:
        return this.precpred(this._ctx, 21);

      case 15:
        return this.precpred(this._ctx, 20);

      case 16:
        return this.precpred(this._ctx, 19);

      case 17:
        return this.precpred(this._ctx, 18);

      case 18:
        return this.precpred(this._ctx, 17);

      case 19:
        return this.precpred(this._ctx, 16);

      case 20:
        return this.precpred(this._ctx, 15);

      case 21:
        return this.precpred(this._ctx, 14);

      case 22:
        return this.precpred(this._ctx, 13);

      case 23:
        return this.precpred(this._ctx, 12);

      case 24:
        return this.precpred(this._ctx, 11);

      case 25:
        return this.precpred(this._ctx, 45);

      case 26:
        return this.precpred(this._ctx, 44);

      case 27:
        return this.precpred(this._ctx, 41);

      case 28:
        return this.precpred(this._ctx, 39);

      case 29:
        return this.notLineTerminator();

      case 30:
        return this.precpred(this._ctx, 38);

      case 31:
        return this.notLineTerminator();

      case 32:
        return this.precpred(this._ctx, 9);

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  getter_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 33:
        return this.n("get");

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  setter_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 34:
        return this.n("set");

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  eos_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 35:
        return this.lineTerminatorAhead();

      case 36:
        return this.closeBrace();

      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  program() {
    let localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, JavaScriptParser.RULE_program);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 155;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);

      if (la_ === 1) {
        this.state = 154;
        this.match(JavaScriptParser.HashBangLine);
      }

      this.state = 158;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);

      if (la_ === 1) {
        this.state = 157;
        this.sourceElements();
      }

      this.state = 160;
      this.match(JavaScriptParser.EOF);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  sourceElement() {
    let localctx = new SourceElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, JavaScriptParser.RULE_sourceElement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 162;
      this.statement();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  statement() {
    let localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, JavaScriptParser.RULE_statement);

    try {
      this.state = 184;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 164;
          this.block();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 165;
          this.variableStatement();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 166;
          this.importStatement();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 167;
          this.exportStatement();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 168;
          this.emptyStatement_();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 169;
          this.classDeclaration();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 170;
          this.expressionStatement();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 171;
          this.ifStatement();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 172;
          this.iterationStatement();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 173;
          this.continueStatement();
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 174;
          this.breakStatement();
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 175;
          this.returnStatement();
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 176;
          this.yieldStatement();
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 177;
          this.withStatement();
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 178;
          this.labelledStatement();
          break;

        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 179;
          this.switchStatement();
          break;

        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 180;
          this.throwStatement();
          break;

        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 181;
          this.tryStatement();
          break;

        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 182;
          this.debuggerStatement();
          break;

        case 20:
          this.enterOuterAlt(localctx, 20);
          this.state = 183;
          this.functionDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  block() {
    let localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, JavaScriptParser.RULE_block);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 186;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 188;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);

      if (la_ === 1) {
        this.state = 187;
        this.statementList();
      }

      this.state = 190;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  statementList() {
    let localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, JavaScriptParser.RULE_statementList);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 193;

      this._errHandler.sync(this);

      var _alt = 1;

      do {
        switch (_alt) {
          case 1:
            this.state = 192;
            this.statement();
            break;

          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }

        this.state = 195;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
      } while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  importStatement() {
    let localctx = new ImportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, JavaScriptParser.RULE_importStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 197;
      this.match(JavaScriptParser.Import);
      this.state = 198;
      this.importFromBlock();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  importFromBlock() {
    let localctx = new ImportFromBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, JavaScriptParser.RULE_importFromBlock);

    try {
      this.state = 212;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.OpenBrace:
        case JavaScriptParser.Multiply:
        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function_:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.As:
        case JavaScriptParser.From:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Async:
        case JavaScriptParser.Await:
        case JavaScriptParser.Implements:
        case JavaScriptParser.StrictLet:
        case JavaScriptParser.NonStrictLet:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
        case JavaScriptParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 201;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 5, this._ctx);

          if (la_ === 1) {
            this.state = 200;
            this.importDefault();
          }

          this.state = 205;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case JavaScriptParser.Multiply:
            case JavaScriptParser.NullLiteral:
            case JavaScriptParser.BooleanLiteral:
            case JavaScriptParser.Break:
            case JavaScriptParser.Do:
            case JavaScriptParser.Instanceof:
            case JavaScriptParser.Typeof:
            case JavaScriptParser.Case:
            case JavaScriptParser.Else:
            case JavaScriptParser.New:
            case JavaScriptParser.Var:
            case JavaScriptParser.Catch:
            case JavaScriptParser.Finally:
            case JavaScriptParser.Return:
            case JavaScriptParser.Void:
            case JavaScriptParser.Continue:
            case JavaScriptParser.For:
            case JavaScriptParser.Switch:
            case JavaScriptParser.While:
            case JavaScriptParser.Debugger:
            case JavaScriptParser.Function_:
            case JavaScriptParser.This:
            case JavaScriptParser.With:
            case JavaScriptParser.Default:
            case JavaScriptParser.If:
            case JavaScriptParser.Throw:
            case JavaScriptParser.Delete:
            case JavaScriptParser.In:
            case JavaScriptParser.Try:
            case JavaScriptParser.As:
            case JavaScriptParser.From:
            case JavaScriptParser.Class:
            case JavaScriptParser.Enum:
            case JavaScriptParser.Extends:
            case JavaScriptParser.Super:
            case JavaScriptParser.Const:
            case JavaScriptParser.Export:
            case JavaScriptParser.Import:
            case JavaScriptParser.Async:
            case JavaScriptParser.Await:
            case JavaScriptParser.Implements:
            case JavaScriptParser.StrictLet:
            case JavaScriptParser.NonStrictLet:
            case JavaScriptParser.Private:
            case JavaScriptParser.Public:
            case JavaScriptParser.Interface:
            case JavaScriptParser.Package:
            case JavaScriptParser.Protected:
            case JavaScriptParser.Static:
            case JavaScriptParser.Yield:
            case JavaScriptParser.Identifier:
              this.state = 203;
              this.importNamespace();
              break;

            case JavaScriptParser.OpenBrace:
              this.state = 204;
              this.moduleItems();
              break;

            default:
              throw new _antlr.default.error.NoViableAltException(this);
          }

          this.state = 207;
          this.importFrom();
          this.state = 208;
          this.eos();
          break;

        case JavaScriptParser.StringLiteral:
          this.enterOuterAlt(localctx, 2);
          this.state = 210;
          this.match(JavaScriptParser.StringLiteral);
          this.state = 211;
          this.eos();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  moduleItems() {
    let localctx = new ModuleItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, JavaScriptParser.RULE_moduleItems);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 214;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 220;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 215;
          this.aliasName();
          this.state = 216;
          this.match(JavaScriptParser.Comma);
        }

        this.state = 222;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
      }

      this.state = 227;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 60 & ~0x1f) == 0 && (1 << _la - 60 & (1 << JavaScriptParser.NullLiteral - 60 | 1 << JavaScriptParser.BooleanLiteral - 60 | 1 << JavaScriptParser.Break - 60 | 1 << JavaScriptParser.Do - 60 | 1 << JavaScriptParser.Instanceof - 60 | 1 << JavaScriptParser.Typeof - 60 | 1 << JavaScriptParser.Case - 60 | 1 << JavaScriptParser.Else - 60 | 1 << JavaScriptParser.New - 60 | 1 << JavaScriptParser.Var - 60 | 1 << JavaScriptParser.Catch - 60 | 1 << JavaScriptParser.Finally - 60 | 1 << JavaScriptParser.Return - 60 | 1 << JavaScriptParser.Void - 60 | 1 << JavaScriptParser.Continue - 60 | 1 << JavaScriptParser.For - 60 | 1 << JavaScriptParser.Switch - 60 | 1 << JavaScriptParser.While - 60 | 1 << JavaScriptParser.Debugger - 60 | 1 << JavaScriptParser.Function_ - 60 | 1 << JavaScriptParser.This - 60 | 1 << JavaScriptParser.With - 60 | 1 << JavaScriptParser.Default - 60)) !== 0 || (_la - 92 & ~0x1f) == 0 && (1 << _la - 92 & (1 << JavaScriptParser.If - 92 | 1 << JavaScriptParser.Throw - 92 | 1 << JavaScriptParser.Delete - 92 | 1 << JavaScriptParser.In - 92 | 1 << JavaScriptParser.Try - 92 | 1 << JavaScriptParser.As - 92 | 1 << JavaScriptParser.From - 92 | 1 << JavaScriptParser.Class - 92 | 1 << JavaScriptParser.Enum - 92 | 1 << JavaScriptParser.Extends - 92 | 1 << JavaScriptParser.Super - 92 | 1 << JavaScriptParser.Const - 92 | 1 << JavaScriptParser.Export - 92 | 1 << JavaScriptParser.Import - 92 | 1 << JavaScriptParser.Async - 92 | 1 << JavaScriptParser.Await - 92 | 1 << JavaScriptParser.Implements - 92 | 1 << JavaScriptParser.StrictLet - 92 | 1 << JavaScriptParser.NonStrictLet - 92 | 1 << JavaScriptParser.Private - 92 | 1 << JavaScriptParser.Public - 92 | 1 << JavaScriptParser.Interface - 92 | 1 << JavaScriptParser.Package - 92 | 1 << JavaScriptParser.Protected - 92 | 1 << JavaScriptParser.Static - 92 | 1 << JavaScriptParser.Yield - 92 | 1 << JavaScriptParser.Identifier - 92)) !== 0) {
        this.state = 223;
        this.aliasName();
        this.state = 225;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === JavaScriptParser.Comma) {
          this.state = 224;
          this.match(JavaScriptParser.Comma);
        }
      }

      this.state = 229;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  importDefault() {
    let localctx = new ImportDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, JavaScriptParser.RULE_importDefault);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 231;
      this.aliasName();
      this.state = 232;
      this.match(JavaScriptParser.Comma);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  importNamespace() {
    let localctx = new ImportNamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, JavaScriptParser.RULE_importNamespace);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 236;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.Multiply:
          this.state = 234;
          this.match(JavaScriptParser.Multiply);
          break;

        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function_:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.As:
        case JavaScriptParser.From:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Async:
        case JavaScriptParser.Await:
        case JavaScriptParser.Implements:
        case JavaScriptParser.StrictLet:
        case JavaScriptParser.NonStrictLet:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
        case JavaScriptParser.Identifier:
          this.state = 235;
          this.identifierName();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }

      this.state = 240;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.As) {
        this.state = 238;
        this.match(JavaScriptParser.As);
        this.state = 239;
        this.identifierName();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  importFrom() {
    let localctx = new ImportFromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, JavaScriptParser.RULE_importFrom);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 242;
      this.match(JavaScriptParser.From);
      this.state = 243;
      this.match(JavaScriptParser.StringLiteral);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  aliasName() {
    let localctx = new AliasNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, JavaScriptParser.RULE_aliasName);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 245;
      this.identifierName();
      this.state = 248;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.As) {
        this.state = 246;
        this.match(JavaScriptParser.As);
        this.state = 247;
        this.identifierName();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  exportStatement() {
    let localctx = new ExportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, JavaScriptParser.RULE_exportStatement);

    try {
      this.state = 262;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);

      switch (la_) {
        case 1:
          localctx = new ExportDeclarationContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 250;
          this.match(JavaScriptParser.Export);
          this.state = 253;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 14, this._ctx);

          switch (la_) {
            case 1:
              this.state = 251;
              this.exportFromBlock();
              break;

            case 2:
              this.state = 252;
              this.declaration();
              break;
          }

          this.state = 255;
          this.eos();
          break;

        case 2:
          localctx = new ExportDefaultDeclarationContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 257;
          this.match(JavaScriptParser.Export);
          this.state = 258;
          this.match(JavaScriptParser.Default);
          this.state = 259;
          this.singleExpression(0);
          this.state = 260;
          this.eos();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  exportFromBlock() {
    let localctx = new ExportFromBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, JavaScriptParser.RULE_exportFromBlock);

    try {
      this.state = 274;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.Multiply:
        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function_:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.As:
        case JavaScriptParser.From:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Async:
        case JavaScriptParser.Await:
        case JavaScriptParser.Implements:
        case JavaScriptParser.StrictLet:
        case JavaScriptParser.NonStrictLet:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
        case JavaScriptParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 264;
          this.importNamespace();
          this.state = 265;
          this.importFrom();
          this.state = 266;
          this.eos();
          break;

        case JavaScriptParser.OpenBrace:
          this.enterOuterAlt(localctx, 2);
          this.state = 268;
          this.moduleItems();
          this.state = 270;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);

          if (la_ === 1) {
            this.state = 269;
            this.importFrom();
          }

          this.state = 272;
          this.eos();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  declaration() {
    let localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, JavaScriptParser.RULE_declaration);

    try {
      this.state = 279;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.Var:
        case JavaScriptParser.Const:
        case JavaScriptParser.StrictLet:
        case JavaScriptParser.NonStrictLet:
          this.enterOuterAlt(localctx, 1);
          this.state = 276;
          this.variableStatement();
          break;

        case JavaScriptParser.Class:
          this.enterOuterAlt(localctx, 2);
          this.state = 277;
          this.classDeclaration();
          break;

        case JavaScriptParser.Function_:
        case JavaScriptParser.Async:
          this.enterOuterAlt(localctx, 3);
          this.state = 278;
          this.functionDeclaration();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  variableStatement() {
    let localctx = new VariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, JavaScriptParser.RULE_variableStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 281;
      this.variableDeclarationList();
      this.state = 282;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  variableDeclarationList() {
    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, JavaScriptParser.RULE_variableDeclarationList);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 284;
      this.varModifier();
      this.state = 285;
      this.variableDeclaration();
      this.state = 290;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 19, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 286;
          this.match(JavaScriptParser.Comma);
          this.state = 287;
          this.variableDeclaration();
        }

        this.state = 292;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 19, this._ctx);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  variableDeclaration() {
    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, JavaScriptParser.RULE_variableDeclaration);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 293;
      this.assignable();
      this.state = 296;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);

      if (la_ === 1) {
        this.state = 294;
        this.match(JavaScriptParser.Assign);
        this.state = 295;
        this.singleExpression(0);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  emptyStatement_() {
    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 36, JavaScriptParser.RULE_emptyStatement_);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 298;
      this.match(JavaScriptParser.SemiColon);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  expressionStatement() {
    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, JavaScriptParser.RULE_expressionStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 300;

      if (!this.notOpenBraceAndNotFunction()) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
      }

      this.state = 301;
      this.expressionSequence();
      this.state = 302;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  ifStatement() {
    let localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, JavaScriptParser.RULE_ifStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 304;
      this.match(JavaScriptParser.If);
      this.state = 305;
      this.match(JavaScriptParser.OpenParen);
      this.state = 306;
      this.expressionSequence();
      this.state = 307;
      this.match(JavaScriptParser.CloseParen);
      this.state = 308;
      this.statement();
      this.state = 311;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 21, this._ctx);

      if (la_ === 1) {
        this.state = 309;
        this.match(JavaScriptParser.Else);
        this.state = 310;
        this.statement();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  iterationStatement() {
    let localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, JavaScriptParser.RULE_iterationStatement);
    var _la = 0; // Token type

    try {
      this.state = 369;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);

      switch (la_) {
        case 1:
          localctx = new DoStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 313;
          this.match(JavaScriptParser.Do);
          this.state = 314;
          this.statement();
          this.state = 315;
          this.match(JavaScriptParser.While);
          this.state = 316;
          this.match(JavaScriptParser.OpenParen);
          this.state = 317;
          this.expressionSequence();
          this.state = 318;
          this.match(JavaScriptParser.CloseParen);
          this.state = 319;
          this.eos();
          break;

        case 2:
          localctx = new WhileStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 321;
          this.match(JavaScriptParser.While);
          this.state = 322;
          this.match(JavaScriptParser.OpenParen);
          this.state = 323;
          this.expressionSequence();
          this.state = 324;
          this.match(JavaScriptParser.CloseParen);
          this.state = 325;
          this.statement();
          break;

        case 3:
          localctx = new ForStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          this.state = 327;
          this.match(JavaScriptParser.For);
          this.state = 328;
          this.match(JavaScriptParser.OpenParen);
          this.state = 331;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);

          if (la_ === 1) {
            this.state = 329;
            this.expressionSequence();
          } else if (la_ === 2) {
            this.state = 330;
            this.variableDeclarationList();
          }

          this.state = 333;
          this.match(JavaScriptParser.SemiColon);
          this.state = 335;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.RegularExpressionLiteral | 1 << JavaScriptParser.OpenBracket | 1 << JavaScriptParser.OpenParen | 1 << JavaScriptParser.OpenBrace | 1 << JavaScriptParser.PlusPlus | 1 << JavaScriptParser.MinusMinus | 1 << JavaScriptParser.Plus | 1 << JavaScriptParser.Minus | 1 << JavaScriptParser.BitNot | 1 << JavaScriptParser.Not)) !== 0 || (_la - 60 & ~0x1f) == 0 && (1 << _la - 60 & (1 << JavaScriptParser.NullLiteral - 60 | 1 << JavaScriptParser.BooleanLiteral - 60 | 1 << JavaScriptParser.DecimalLiteral - 60 | 1 << JavaScriptParser.HexIntegerLiteral - 60 | 1 << JavaScriptParser.OctalIntegerLiteral - 60 | 1 << JavaScriptParser.OctalIntegerLiteral2 - 60 | 1 << JavaScriptParser.BinaryIntegerLiteral - 60 | 1 << JavaScriptParser.BigHexIntegerLiteral - 60 | 1 << JavaScriptParser.BigOctalIntegerLiteral - 60 | 1 << JavaScriptParser.BigBinaryIntegerLiteral - 60 | 1 << JavaScriptParser.BigDecimalIntegerLiteral - 60 | 1 << JavaScriptParser.Typeof - 60 | 1 << JavaScriptParser.New - 60 | 1 << JavaScriptParser.Void - 60 | 1 << JavaScriptParser.Function_ - 60 | 1 << JavaScriptParser.This - 60)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << JavaScriptParser.Delete - 94 | 1 << JavaScriptParser.Class - 94 | 1 << JavaScriptParser.Super - 94 | 1 << JavaScriptParser.Import - 94 | 1 << JavaScriptParser.Async - 94 | 1 << JavaScriptParser.Await - 94 | 1 << JavaScriptParser.NonStrictLet - 94 | 1 << JavaScriptParser.Yield - 94 | 1 << JavaScriptParser.Identifier - 94 | 1 << JavaScriptParser.StringLiteral - 94 | 1 << JavaScriptParser.BackTick - 94)) !== 0) {
            this.state = 334;
            this.expressionSequence();
          }

          this.state = 337;
          this.match(JavaScriptParser.SemiColon);
          this.state = 339;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.RegularExpressionLiteral | 1 << JavaScriptParser.OpenBracket | 1 << JavaScriptParser.OpenParen | 1 << JavaScriptParser.OpenBrace | 1 << JavaScriptParser.PlusPlus | 1 << JavaScriptParser.MinusMinus | 1 << JavaScriptParser.Plus | 1 << JavaScriptParser.Minus | 1 << JavaScriptParser.BitNot | 1 << JavaScriptParser.Not)) !== 0 || (_la - 60 & ~0x1f) == 0 && (1 << _la - 60 & (1 << JavaScriptParser.NullLiteral - 60 | 1 << JavaScriptParser.BooleanLiteral - 60 | 1 << JavaScriptParser.DecimalLiteral - 60 | 1 << JavaScriptParser.HexIntegerLiteral - 60 | 1 << JavaScriptParser.OctalIntegerLiteral - 60 | 1 << JavaScriptParser.OctalIntegerLiteral2 - 60 | 1 << JavaScriptParser.BinaryIntegerLiteral - 60 | 1 << JavaScriptParser.BigHexIntegerLiteral - 60 | 1 << JavaScriptParser.BigOctalIntegerLiteral - 60 | 1 << JavaScriptParser.BigBinaryIntegerLiteral - 60 | 1 << JavaScriptParser.BigDecimalIntegerLiteral - 60 | 1 << JavaScriptParser.Typeof - 60 | 1 << JavaScriptParser.New - 60 | 1 << JavaScriptParser.Void - 60 | 1 << JavaScriptParser.Function_ - 60 | 1 << JavaScriptParser.This - 60)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << JavaScriptParser.Delete - 94 | 1 << JavaScriptParser.Class - 94 | 1 << JavaScriptParser.Super - 94 | 1 << JavaScriptParser.Import - 94 | 1 << JavaScriptParser.Async - 94 | 1 << JavaScriptParser.Await - 94 | 1 << JavaScriptParser.NonStrictLet - 94 | 1 << JavaScriptParser.Yield - 94 | 1 << JavaScriptParser.Identifier - 94 | 1 << JavaScriptParser.StringLiteral - 94 | 1 << JavaScriptParser.BackTick - 94)) !== 0) {
            this.state = 338;
            this.expressionSequence();
          }

          this.state = 341;
          this.match(JavaScriptParser.CloseParen);
          this.state = 342;
          this.statement();
          break;

        case 4:
          localctx = new ForInStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          this.state = 343;
          this.match(JavaScriptParser.For);
          this.state = 344;
          this.match(JavaScriptParser.OpenParen);
          this.state = 347;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 25, this._ctx);

          switch (la_) {
            case 1:
              this.state = 345;
              this.singleExpression(0);
              break;

            case 2:
              this.state = 346;
              this.variableDeclarationList();
              break;
          }

          this.state = 349;
          this.match(JavaScriptParser.In);
          this.state = 350;
          this.expressionSequence();
          this.state = 351;
          this.match(JavaScriptParser.CloseParen);
          this.state = 352;
          this.statement();
          break;

        case 5:
          localctx = new ForOfStatementContext(this, localctx);
          this.enterOuterAlt(localctx, 5);
          this.state = 354;
          this.match(JavaScriptParser.For);
          this.state = 356;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === JavaScriptParser.Await) {
            this.state = 355;
            this.match(JavaScriptParser.Await);
          }

          this.state = 358;
          this.match(JavaScriptParser.OpenParen);
          this.state = 361;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);

          switch (la_) {
            case 1:
              this.state = 359;
              this.singleExpression(0);
              break;

            case 2:
              this.state = 360;
              this.variableDeclarationList();
              break;
          }

          this.state = 363;
          this.identifier();
          this.state = 364;

          if (!this.p("of")) {
            throw new _antlr.default.error.FailedPredicateException(this, "this.p(\"of\")");
          }

          this.state = 365;
          this.expressionSequence();
          this.state = 366;
          this.match(JavaScriptParser.CloseParen);
          this.state = 367;
          this.statement();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  varModifier() {
    let localctx = new VarModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, JavaScriptParser.RULE_varModifier);

    try {
      this.state = 374;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.Var:
          this.enterOuterAlt(localctx, 1);
          this.state = 371;
          this.match(JavaScriptParser.Var);
          break;

        case JavaScriptParser.StrictLet:
        case JavaScriptParser.NonStrictLet:
          this.enterOuterAlt(localctx, 2);
          this.state = 372;
          this.let_();
          break;

        case JavaScriptParser.Const:
          this.enterOuterAlt(localctx, 3);
          this.state = 373;
          this.match(JavaScriptParser.Const);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  continueStatement() {
    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, JavaScriptParser.RULE_continueStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 376;
      this.match(JavaScriptParser.Continue);
      this.state = 379;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 30, this._ctx);

      if (la_ === 1) {
        this.state = 377;

        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }

        this.state = 378;
        this.identifier();
      }

      this.state = 381;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  breakStatement() {
    let localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, JavaScriptParser.RULE_breakStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 383;
      this.match(JavaScriptParser.Break);
      this.state = 386;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 31, this._ctx);

      if (la_ === 1) {
        this.state = 384;

        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }

        this.state = 385;
        this.identifier();
      }

      this.state = 388;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  returnStatement() {
    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, JavaScriptParser.RULE_returnStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 390;
      this.match(JavaScriptParser.Return);
      this.state = 393;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);

      if (la_ === 1) {
        this.state = 391;

        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }

        this.state = 392;
        this.expressionSequence();
      }

      this.state = 395;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  yieldStatement() {
    let localctx = new YieldStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, JavaScriptParser.RULE_yieldStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 397;
      this.match(JavaScriptParser.Yield);
      this.state = 400;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx);

      if (la_ === 1) {
        this.state = 398;

        if (!this.notLineTerminator()) {
          throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
        }

        this.state = 399;
        this.expressionSequence();
      }

      this.state = 402;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  withStatement() {
    let localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, JavaScriptParser.RULE_withStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 404;
      this.match(JavaScriptParser.With);
      this.state = 405;
      this.match(JavaScriptParser.OpenParen);
      this.state = 406;
      this.expressionSequence();
      this.state = 407;
      this.match(JavaScriptParser.CloseParen);
      this.state = 408;
      this.statement();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  switchStatement() {
    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, JavaScriptParser.RULE_switchStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 410;
      this.match(JavaScriptParser.Switch);
      this.state = 411;
      this.match(JavaScriptParser.OpenParen);
      this.state = 412;
      this.expressionSequence();
      this.state = 413;
      this.match(JavaScriptParser.CloseParen);
      this.state = 414;
      this.caseBlock();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  caseBlock() {
    let localctx = new CaseBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, JavaScriptParser.RULE_caseBlock);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 416;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 418;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.Case) {
        this.state = 417;
        this.caseClauses();
      }

      this.state = 424;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.Default) {
        this.state = 420;
        this.defaultClause();
        this.state = 422;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === JavaScriptParser.Case) {
          this.state = 421;
          this.caseClauses();
        }
      }

      this.state = 426;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  caseClauses() {
    let localctx = new CaseClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, JavaScriptParser.RULE_caseClauses);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 429;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      do {
        this.state = 428;
        this.caseClause();
        this.state = 431;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      } while (_la === JavaScriptParser.Case);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  caseClause() {
    let localctx = new CaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, JavaScriptParser.RULE_caseClause);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 433;
      this.match(JavaScriptParser.Case);
      this.state = 434;
      this.expressionSequence();
      this.state = 435;
      this.match(JavaScriptParser.Colon);
      this.state = 437;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);

      if (la_ === 1) {
        this.state = 436;
        this.statementList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  defaultClause() {
    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, JavaScriptParser.RULE_defaultClause);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 439;
      this.match(JavaScriptParser.Default);
      this.state = 440;
      this.match(JavaScriptParser.Colon);
      this.state = 442;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);

      if (la_ === 1) {
        this.state = 441;
        this.statementList();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  labelledStatement() {
    let localctx = new LabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, JavaScriptParser.RULE_labelledStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 444;
      this.identifier();
      this.state = 445;
      this.match(JavaScriptParser.Colon);
      this.state = 446;
      this.statement();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  throwStatement() {
    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, JavaScriptParser.RULE_throwStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 448;
      this.match(JavaScriptParser.Throw);
      this.state = 449;

      if (!this.notLineTerminator()) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
      }

      this.state = 450;
      this.expressionSequence();
      this.state = 451;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  tryStatement() {
    let localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, JavaScriptParser.RULE_tryStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 453;
      this.match(JavaScriptParser.Try);
      this.state = 454;
      this.block();
      this.state = 460;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.Catch:
          this.state = 455;
          this.catchProduction();
          this.state = 457;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 40, this._ctx);

          if (la_ === 1) {
            this.state = 456;
            this.finallyProduction();
          }

          break;

        case JavaScriptParser.Finally:
          this.state = 459;
          this.finallyProduction();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  catchProduction() {
    let localctx = new CatchProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, JavaScriptParser.RULE_catchProduction);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 462;
      this.match(JavaScriptParser.Catch);
      this.state = 468;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.OpenParen) {
        this.state = 463;
        this.match(JavaScriptParser.OpenParen);
        this.state = 465;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === JavaScriptParser.OpenBracket || _la === JavaScriptParser.OpenBrace || (_la - 106 & ~0x1f) == 0 && (1 << _la - 106 & (1 << JavaScriptParser.Async - 106 | 1 << JavaScriptParser.NonStrictLet - 106 | 1 << JavaScriptParser.Identifier - 106)) !== 0) {
          this.state = 464;
          this.assignable();
        }

        this.state = 467;
        this.match(JavaScriptParser.CloseParen);
      }

      this.state = 470;
      this.block();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  finallyProduction() {
    let localctx = new FinallyProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, JavaScriptParser.RULE_finallyProduction);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 472;
      this.match(JavaScriptParser.Finally);
      this.state = 473;
      this.block();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  debuggerStatement() {
    let localctx = new DebuggerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, JavaScriptParser.RULE_debuggerStatement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 475;
      this.match(JavaScriptParser.Debugger);
      this.state = 476;
      this.eos();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  functionDeclaration() {
    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, JavaScriptParser.RULE_functionDeclaration);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 479;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.Async) {
        this.state = 478;
        this.match(JavaScriptParser.Async);
      }

      this.state = 481;
      this.match(JavaScriptParser.Function_);
      this.state = 483;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.Multiply) {
        this.state = 482;
        this.match(JavaScriptParser.Multiply);
      }

      this.state = 485;
      this.identifier();
      this.state = 486;
      this.match(JavaScriptParser.OpenParen);
      this.state = 488;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.OpenBracket | 1 << JavaScriptParser.OpenBrace | 1 << JavaScriptParser.Ellipsis)) !== 0 || (_la - 106 & ~0x1f) == 0 && (1 << _la - 106 & (1 << JavaScriptParser.Async - 106 | 1 << JavaScriptParser.NonStrictLet - 106 | 1 << JavaScriptParser.Identifier - 106)) !== 0) {
        this.state = 487;
        this.formalParameterList();
      }

      this.state = 490;
      this.match(JavaScriptParser.CloseParen);
      this.state = 491;
      this.functionBody();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  classDeclaration() {
    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, JavaScriptParser.RULE_classDeclaration);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 493;
      this.match(JavaScriptParser.Class);
      this.state = 494;
      this.identifier();
      this.state = 495;
      this.classTail();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  classTail() {
    let localctx = new ClassTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, JavaScriptParser.RULE_classTail);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 499;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.Extends) {
        this.state = 497;
        this.match(JavaScriptParser.Extends);
        this.state = 498;
        this.singleExpression(0);
      }

      this.state = 501;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 505;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 48, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 502;
          this.classElement();
        }

        this.state = 507;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 48, this._ctx);
      }

      this.state = 508;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  classElement() {
    let localctx = new ClassElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, JavaScriptParser.RULE_classElement);
    var _la = 0; // Token type

    try {
      this.state = 535;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 53, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 516;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 50, this._ctx);

          while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 514;

              this._errHandler.sync(this);

              var la_ = this._interp.adaptivePredict(this._input, 49, this._ctx);

              switch (la_) {
                case 1:
                  this.state = 510;
                  this.match(JavaScriptParser.Static);
                  break;

                case 2:
                  this.state = 511;

                  if (!this.n("static")) {
                    throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"static\")");
                  }

                  this.state = 512;
                  this.identifier();
                  break;

                case 3:
                  this.state = 513;
                  this.match(JavaScriptParser.Async);
                  break;
              }
            }

            this.state = 518;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 50, this._ctx);
          }

          this.state = 525;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);

          switch (la_) {
            case 1:
              this.state = 519;
              this.methodDefinition();
              break;

            case 2:
              this.state = 520;
              this.assignable();
              this.state = 521;
              this.match(JavaScriptParser.Assign);
              this.state = 522;
              this.objectLiteral();
              this.state = 523;
              this.match(JavaScriptParser.SemiColon);
              break;
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 527;
          this.emptyStatement_();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 529;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === JavaScriptParser.Hashtag) {
            this.state = 528;
            this.match(JavaScriptParser.Hashtag);
          }

          this.state = 531;
          this.propertyName();
          this.state = 532;
          this.match(JavaScriptParser.Assign);
          this.state = 533;
          this.singleExpression(0);
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  methodDefinition() {
    let localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, JavaScriptParser.RULE_methodDefinition);
    var _la = 0; // Token type

    try {
      this.state = 576;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 538;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === JavaScriptParser.Multiply) {
            this.state = 537;
            this.match(JavaScriptParser.Multiply);
          }

          this.state = 541;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === JavaScriptParser.Hashtag) {
            this.state = 540;
            this.match(JavaScriptParser.Hashtag);
          }

          this.state = 543;
          this.propertyName();
          this.state = 544;
          this.match(JavaScriptParser.OpenParen);
          this.state = 546;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.OpenBracket | 1 << JavaScriptParser.OpenBrace | 1 << JavaScriptParser.Ellipsis)) !== 0 || (_la - 106 & ~0x1f) == 0 && (1 << _la - 106 & (1 << JavaScriptParser.Async - 106 | 1 << JavaScriptParser.NonStrictLet - 106 | 1 << JavaScriptParser.Identifier - 106)) !== 0) {
            this.state = 545;
            this.formalParameterList();
          }

          this.state = 548;
          this.match(JavaScriptParser.CloseParen);
          this.state = 549;
          this.functionBody();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 552;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 57, this._ctx);

          if (la_ === 1) {
            this.state = 551;
            this.match(JavaScriptParser.Multiply);
          }

          this.state = 555;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 58, this._ctx);

          if (la_ === 1) {
            this.state = 554;
            this.match(JavaScriptParser.Hashtag);
          }

          this.state = 557;
          this.getter();
          this.state = 558;
          this.match(JavaScriptParser.OpenParen);
          this.state = 559;
          this.match(JavaScriptParser.CloseParen);
          this.state = 560;
          this.functionBody();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 563;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);

          if (la_ === 1) {
            this.state = 562;
            this.match(JavaScriptParser.Multiply);
          }

          this.state = 566;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 60, this._ctx);

          if (la_ === 1) {
            this.state = 565;
            this.match(JavaScriptParser.Hashtag);
          }

          this.state = 568;
          this.setter();
          this.state = 569;
          this.match(JavaScriptParser.OpenParen);
          this.state = 571;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.OpenBracket | 1 << JavaScriptParser.OpenBrace | 1 << JavaScriptParser.Ellipsis)) !== 0 || (_la - 106 & ~0x1f) == 0 && (1 << _la - 106 & (1 << JavaScriptParser.Async - 106 | 1 << JavaScriptParser.NonStrictLet - 106 | 1 << JavaScriptParser.Identifier - 106)) !== 0) {
            this.state = 570;
            this.formalParameterList();
          }

          this.state = 573;
          this.match(JavaScriptParser.CloseParen);
          this.state = 574;
          this.functionBody();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  formalParameterList() {
    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, JavaScriptParser.RULE_formalParameterList);
    var _la = 0; // Token type

    try {
      this.state = 591;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.OpenBracket:
        case JavaScriptParser.OpenBrace:
        case JavaScriptParser.Async:
        case JavaScriptParser.NonStrictLet:
        case JavaScriptParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 578;
          this.formalParameterArg();
          this.state = 583;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 63, this._ctx);

          while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 579;
              this.match(JavaScriptParser.Comma);
              this.state = 580;
              this.formalParameterArg();
            }

            this.state = 585;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 63, this._ctx);
          }

          this.state = 588;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === JavaScriptParser.Comma) {
            this.state = 586;
            this.match(JavaScriptParser.Comma);
            this.state = 587;
            this.lastFormalParameterArg();
          }

          break;

        case JavaScriptParser.Ellipsis:
          this.enterOuterAlt(localctx, 2);
          this.state = 590;
          this.lastFormalParameterArg();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  formalParameterArg() {
    let localctx = new FormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, JavaScriptParser.RULE_formalParameterArg);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 593;
      this.assignable();
      this.state = 596;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.Assign) {
        this.state = 594;
        this.match(JavaScriptParser.Assign);
        this.state = 595;
        this.singleExpression(0);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  lastFormalParameterArg() {
    let localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, JavaScriptParser.RULE_lastFormalParameterArg);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 598;
      this.match(JavaScriptParser.Ellipsis);
      this.state = 599;
      this.singleExpression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  functionBody() {
    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, JavaScriptParser.RULE_functionBody);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 601;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 603;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);

      if (la_ === 1) {
        this.state = 602;
        this.sourceElements();
      }

      this.state = 605;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  sourceElements() {
    let localctx = new SourceElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, JavaScriptParser.RULE_sourceElements);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 608;

      this._errHandler.sync(this);

      var _alt = 1;

      do {
        switch (_alt) {
          case 1:
            this.state = 607;
            this.sourceElement();
            break;

          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }

        this.state = 610;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 68, this._ctx);
      } while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  arrayLiteral() {
    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, JavaScriptParser.RULE_arrayLiteral);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 612;
      this.match(JavaScriptParser.OpenBracket);
      this.state = 613;
      this.elementList();
      this.state = 614;
      this.match(JavaScriptParser.CloseBracket);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  elementList() {
    let localctx = new ElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, JavaScriptParser.RULE_elementList);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 619;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 69, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 616;
          this.match(JavaScriptParser.Comma);
        }

        this.state = 621;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 69, this._ctx);
      }

      this.state = 623;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.RegularExpressionLiteral | 1 << JavaScriptParser.OpenBracket | 1 << JavaScriptParser.OpenParen | 1 << JavaScriptParser.OpenBrace | 1 << JavaScriptParser.Ellipsis | 1 << JavaScriptParser.PlusPlus | 1 << JavaScriptParser.MinusMinus | 1 << JavaScriptParser.Plus | 1 << JavaScriptParser.Minus | 1 << JavaScriptParser.BitNot | 1 << JavaScriptParser.Not)) !== 0 || (_la - 60 & ~0x1f) == 0 && (1 << _la - 60 & (1 << JavaScriptParser.NullLiteral - 60 | 1 << JavaScriptParser.BooleanLiteral - 60 | 1 << JavaScriptParser.DecimalLiteral - 60 | 1 << JavaScriptParser.HexIntegerLiteral - 60 | 1 << JavaScriptParser.OctalIntegerLiteral - 60 | 1 << JavaScriptParser.OctalIntegerLiteral2 - 60 | 1 << JavaScriptParser.BinaryIntegerLiteral - 60 | 1 << JavaScriptParser.BigHexIntegerLiteral - 60 | 1 << JavaScriptParser.BigOctalIntegerLiteral - 60 | 1 << JavaScriptParser.BigBinaryIntegerLiteral - 60 | 1 << JavaScriptParser.BigDecimalIntegerLiteral - 60 | 1 << JavaScriptParser.Typeof - 60 | 1 << JavaScriptParser.New - 60 | 1 << JavaScriptParser.Void - 60 | 1 << JavaScriptParser.Function_ - 60 | 1 << JavaScriptParser.This - 60)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << JavaScriptParser.Delete - 94 | 1 << JavaScriptParser.Class - 94 | 1 << JavaScriptParser.Super - 94 | 1 << JavaScriptParser.Import - 94 | 1 << JavaScriptParser.Async - 94 | 1 << JavaScriptParser.Await - 94 | 1 << JavaScriptParser.NonStrictLet - 94 | 1 << JavaScriptParser.Yield - 94 | 1 << JavaScriptParser.Identifier - 94 | 1 << JavaScriptParser.StringLiteral - 94 | 1 << JavaScriptParser.BackTick - 94)) !== 0) {
        this.state = 622;
        this.arrayElement();
      }

      this.state = 633;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 72, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 626;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          do {
            this.state = 625;
            this.match(JavaScriptParser.Comma);
            this.state = 628;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          } while (_la === JavaScriptParser.Comma);

          this.state = 630;
          this.arrayElement();
        }

        this.state = 635;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 72, this._ctx);
      }

      this.state = 639;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === JavaScriptParser.Comma) {
        this.state = 636;
        this.match(JavaScriptParser.Comma);
        this.state = 641;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  arrayElement() {
    let localctx = new ArrayElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, JavaScriptParser.RULE_arrayElement);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 643;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.Ellipsis) {
        this.state = 642;
        this.match(JavaScriptParser.Ellipsis);
      }

      this.state = 645;
      this.singleExpression(0);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  propertyAssignment() {
    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, JavaScriptParser.RULE_propertyAssignment);
    var _la = 0; // Token type

    try {
      this.state = 686;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 79, this._ctx);

      switch (la_) {
        case 1:
          localctx = new PropertyExpressionAssignmentContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 647;
          this.propertyName();
          this.state = 648;
          this.match(JavaScriptParser.Colon);
          this.state = 649;
          this.singleExpression(0);
          break;

        case 2:
          localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 651;
          this.match(JavaScriptParser.OpenBracket);
          this.state = 652;
          this.singleExpression(0);
          this.state = 653;
          this.match(JavaScriptParser.CloseBracket);
          this.state = 654;
          this.match(JavaScriptParser.Colon);
          this.state = 655;
          this.singleExpression(0);
          break;

        case 3:
          localctx = new FunctionPropertyContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          this.state = 658;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 75, this._ctx);

          if (la_ === 1) {
            this.state = 657;
            this.match(JavaScriptParser.Async);
          }

          this.state = 661;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === JavaScriptParser.Multiply) {
            this.state = 660;
            this.match(JavaScriptParser.Multiply);
          }

          this.state = 663;
          this.propertyName();
          this.state = 664;
          this.match(JavaScriptParser.OpenParen);
          this.state = 666;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.OpenBracket | 1 << JavaScriptParser.OpenBrace | 1 << JavaScriptParser.Ellipsis)) !== 0 || (_la - 106 & ~0x1f) == 0 && (1 << _la - 106 & (1 << JavaScriptParser.Async - 106 | 1 << JavaScriptParser.NonStrictLet - 106 | 1 << JavaScriptParser.Identifier - 106)) !== 0) {
            this.state = 665;
            this.formalParameterList();
          }

          this.state = 668;
          this.match(JavaScriptParser.CloseParen);
          this.state = 669;
          this.functionBody();
          break;

        case 4:
          localctx = new PropertyGetterContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          this.state = 671;
          this.getter();
          this.state = 672;
          this.match(JavaScriptParser.OpenParen);
          this.state = 673;
          this.match(JavaScriptParser.CloseParen);
          this.state = 674;
          this.functionBody();
          break;

        case 5:
          localctx = new PropertySetterContext(this, localctx);
          this.enterOuterAlt(localctx, 5);
          this.state = 676;
          this.setter();
          this.state = 677;
          this.match(JavaScriptParser.OpenParen);
          this.state = 678;
          this.formalParameterArg();
          this.state = 679;
          this.match(JavaScriptParser.CloseParen);
          this.state = 680;
          this.functionBody();
          break;

        case 6:
          localctx = new PropertyShorthandContext(this, localctx);
          this.enterOuterAlt(localctx, 6);
          this.state = 683;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === JavaScriptParser.Ellipsis) {
            this.state = 682;
            this.match(JavaScriptParser.Ellipsis);
          }

          this.state = 685;
          this.singleExpression(0);
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  propertyName() {
    let localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, JavaScriptParser.RULE_propertyName);

    try {
      this.state = 695;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function_:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.As:
        case JavaScriptParser.From:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Async:
        case JavaScriptParser.Await:
        case JavaScriptParser.Implements:
        case JavaScriptParser.StrictLet:
        case JavaScriptParser.NonStrictLet:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
        case JavaScriptParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 688;
          this.identifierName();
          break;

        case JavaScriptParser.StringLiteral:
          this.enterOuterAlt(localctx, 2);
          this.state = 689;
          this.match(JavaScriptParser.StringLiteral);
          break;

        case JavaScriptParser.DecimalLiteral:
        case JavaScriptParser.HexIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral2:
        case JavaScriptParser.BinaryIntegerLiteral:
          this.enterOuterAlt(localctx, 3);
          this.state = 690;
          this.numericLiteral();
          break;

        case JavaScriptParser.OpenBracket:
          this.enterOuterAlt(localctx, 4);
          this.state = 691;
          this.match(JavaScriptParser.OpenBracket);
          this.state = 692;
          this.singleExpression(0);
          this.state = 693;
          this.match(JavaScriptParser.CloseBracket);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  arguments() {
    let localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, JavaScriptParser.RULE_arguments);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 697;
      this.match(JavaScriptParser.OpenParen);
      this.state = 709;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.RegularExpressionLiteral | 1 << JavaScriptParser.OpenBracket | 1 << JavaScriptParser.OpenParen | 1 << JavaScriptParser.OpenBrace | 1 << JavaScriptParser.Ellipsis | 1 << JavaScriptParser.PlusPlus | 1 << JavaScriptParser.MinusMinus | 1 << JavaScriptParser.Plus | 1 << JavaScriptParser.Minus | 1 << JavaScriptParser.BitNot | 1 << JavaScriptParser.Not)) !== 0 || (_la - 60 & ~0x1f) == 0 && (1 << _la - 60 & (1 << JavaScriptParser.NullLiteral - 60 | 1 << JavaScriptParser.BooleanLiteral - 60 | 1 << JavaScriptParser.DecimalLiteral - 60 | 1 << JavaScriptParser.HexIntegerLiteral - 60 | 1 << JavaScriptParser.OctalIntegerLiteral - 60 | 1 << JavaScriptParser.OctalIntegerLiteral2 - 60 | 1 << JavaScriptParser.BinaryIntegerLiteral - 60 | 1 << JavaScriptParser.BigHexIntegerLiteral - 60 | 1 << JavaScriptParser.BigOctalIntegerLiteral - 60 | 1 << JavaScriptParser.BigBinaryIntegerLiteral - 60 | 1 << JavaScriptParser.BigDecimalIntegerLiteral - 60 | 1 << JavaScriptParser.Typeof - 60 | 1 << JavaScriptParser.New - 60 | 1 << JavaScriptParser.Void - 60 | 1 << JavaScriptParser.Function_ - 60 | 1 << JavaScriptParser.This - 60)) !== 0 || (_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << JavaScriptParser.Delete - 94 | 1 << JavaScriptParser.Class - 94 | 1 << JavaScriptParser.Super - 94 | 1 << JavaScriptParser.Import - 94 | 1 << JavaScriptParser.Async - 94 | 1 << JavaScriptParser.Await - 94 | 1 << JavaScriptParser.NonStrictLet - 94 | 1 << JavaScriptParser.Yield - 94 | 1 << JavaScriptParser.Identifier - 94 | 1 << JavaScriptParser.StringLiteral - 94 | 1 << JavaScriptParser.BackTick - 94)) !== 0) {
        this.state = 698;
        this.argument();
        this.state = 703;

        this._errHandler.sync(this);

        var _alt = this._interp.adaptivePredict(this._input, 81, this._ctx);

        while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 699;
            this.match(JavaScriptParser.Comma);
            this.state = 700;
            this.argument();
          }

          this.state = 705;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 81, this._ctx);
        }

        this.state = 707;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === JavaScriptParser.Comma) {
          this.state = 706;
          this.match(JavaScriptParser.Comma);
        }
      }

      this.state = 711;
      this.match(JavaScriptParser.CloseParen);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  argument() {
    let localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, JavaScriptParser.RULE_argument);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 714;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === JavaScriptParser.Ellipsis) {
        this.state = 713;
        this.match(JavaScriptParser.Ellipsis);
      }

      this.state = 718;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 85, this._ctx);

      switch (la_) {
        case 1:
          this.state = 716;
          this.singleExpression(0);
          break;

        case 2:
          this.state = 717;
          this.identifier();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  expressionSequence() {
    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, JavaScriptParser.RULE_expressionSequence);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 720;
      this.singleExpression(0);
      this.state = 725;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 86, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 721;
          this.match(JavaScriptParser.Comma);
          this.state = 722;
          this.singleExpression(0);
        }

        this.state = 727;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 86, this._ctx);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  singleExpression(_p) {
    if (_p === undefined) {
      _p = 0;
    }

    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new SingleExpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 114;
    this.enterRecursionRule(localctx, 114, JavaScriptParser.RULE_singleExpression, _p);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 780;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);

      switch (la_) {
        case 1:
          localctx = new FunctionExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 729;
          this.anonymousFunction();
          break;

        case 2:
          localctx = new ClassExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 730;
          this.match(JavaScriptParser.Class);
          this.state = 732;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la - 106 & ~0x1f) == 0 && (1 << _la - 106 & (1 << JavaScriptParser.Async - 106 | 1 << JavaScriptParser.NonStrictLet - 106 | 1 << JavaScriptParser.Identifier - 106)) !== 0) {
            this.state = 731;
            this.identifier();
          }

          this.state = 734;
          this.classTail();
          break;

        case 3:
          localctx = new NewExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 735;
          this.match(JavaScriptParser.New);
          this.state = 736;
          this.singleExpression(0);
          this.state = 737;
          this.arguments();
          break;

        case 4:
          localctx = new NewExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 739;
          this.match(JavaScriptParser.New);
          this.state = 740;
          this.singleExpression(42);
          break;

        case 5:
          localctx = new MetaExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 741;
          this.match(JavaScriptParser.New);
          this.state = 742;
          this.match(JavaScriptParser.Dot);
          this.state = 743;
          this.identifier();
          break;

        case 6:
          localctx = new DeleteExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 744;
          this.match(JavaScriptParser.Delete);
          this.state = 745;
          this.singleExpression(37);
          break;

        case 7:
          localctx = new VoidExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 746;
          this.match(JavaScriptParser.Void);
          this.state = 747;
          this.singleExpression(36);
          break;

        case 8:
          localctx = new TypeofExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 748;
          this.match(JavaScriptParser.Typeof);
          this.state = 749;
          this.singleExpression(35);
          break;

        case 9:
          localctx = new PreIncrementExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 750;
          this.match(JavaScriptParser.PlusPlus);
          this.state = 751;
          this.singleExpression(34);
          break;

        case 10:
          localctx = new PreDecreaseExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 752;
          this.match(JavaScriptParser.MinusMinus);
          this.state = 753;
          this.singleExpression(33);
          break;

        case 11:
          localctx = new UnaryPlusExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 754;
          this.match(JavaScriptParser.Plus);
          this.state = 755;
          this.singleExpression(32);
          break;

        case 12:
          localctx = new UnaryMinusExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 756;
          this.match(JavaScriptParser.Minus);
          this.state = 757;
          this.singleExpression(31);
          break;

        case 13:
          localctx = new BitNotExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 758;
          this.match(JavaScriptParser.BitNot);
          this.state = 759;
          this.singleExpression(30);
          break;

        case 14:
          localctx = new NotExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 760;
          this.match(JavaScriptParser.Not);
          this.state = 761;
          this.singleExpression(29);
          break;

        case 15:
          localctx = new AwaitExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 762;
          this.match(JavaScriptParser.Await);
          this.state = 763;
          this.singleExpression(28);
          break;

        case 16:
          localctx = new ImportExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 764;
          this.match(JavaScriptParser.Import);
          this.state = 765;
          this.match(JavaScriptParser.OpenParen);
          this.state = 766;
          this.singleExpression(0);
          this.state = 767;
          this.match(JavaScriptParser.CloseParen);
          break;

        case 17:
          localctx = new YieldExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 769;
          this.yieldStatement();
          break;

        case 18:
          localctx = new ThisExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 770;
          this.match(JavaScriptParser.This);
          break;

        case 19:
          localctx = new IdentifierExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 771;
          this.identifier();
          break;

        case 20:
          localctx = new SuperExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 772;
          this.match(JavaScriptParser.Super);
          break;

        case 21:
          localctx = new LiteralExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 773;
          this.literal();
          break;

        case 22:
          localctx = new ArrayLiteralExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 774;
          this.arrayLiteral();
          break;

        case 23:
          localctx = new ObjectLiteralExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 775;
          this.objectLiteral();
          break;

        case 24:
          localctx = new ParenthesizedExpressionContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 776;
          this.match(JavaScriptParser.OpenParen);
          this.state = 777;
          this.expressionSequence();
          this.state = 778;
          this.match(JavaScriptParser.CloseParen);
          break;
      }

      this._ctx.stop = this._input.LT(-1);
      this.state = 863;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }

          _prevctx = localctx;
          this.state = 861;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 91, this._ctx);

          switch (la_) {
            case 1:
              localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 782;

              if (!this.precpred(this._ctx, 27)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
              }

              this.state = 783;
              this.match(JavaScriptParser.Power);
              this.state = 784;
              this.singleExpression(27);
              break;

            case 2:
              localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 785;

              if (!this.precpred(this._ctx, 26)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
              }

              this.state = 786;
              _la = this._input.LA(1);

              if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.Multiply | 1 << JavaScriptParser.Divide | 1 << JavaScriptParser.Modulus)) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 787;
              this.singleExpression(27);
              break;

            case 3:
              localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 788;

              if (!this.precpred(this._ctx, 25)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
              }

              this.state = 789;
              _la = this._input.LA(1);

              if (!(_la === JavaScriptParser.Plus || _la === JavaScriptParser.Minus)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 790;
              this.singleExpression(26);
              break;

            case 4:
              localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 791;

              if (!this.precpred(this._ctx, 24)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
              }

              this.state = 792;
              this.match(JavaScriptParser.NullCoalesce);
              this.state = 793;
              this.singleExpression(25);
              break;

            case 5:
              localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 794;

              if (!this.precpred(this._ctx, 23)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
              }

              this.state = 795;
              _la = this._input.LA(1);

              if (!((_la - 31 & ~0x1f) == 0 && (1 << _la - 31 & (1 << JavaScriptParser.RightShiftArithmetic - 31 | 1 << JavaScriptParser.LeftShiftArithmetic - 31 | 1 << JavaScriptParser.RightShiftLogical - 31)) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 796;
              this.singleExpression(24);
              break;

            case 6:
              localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 797;

              if (!this.precpred(this._ctx, 22)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
              }

              this.state = 798;
              _la = this._input.LA(1);

              if (!((_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << JavaScriptParser.LessThan - 34 | 1 << JavaScriptParser.MoreThan - 34 | 1 << JavaScriptParser.LessThanEquals - 34 | 1 << JavaScriptParser.GreaterThanEquals - 34)) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 799;
              this.singleExpression(23);
              break;

            case 7:
              localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 800;

              if (!this.precpred(this._ctx, 21)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
              }

              this.state = 801;
              this.match(JavaScriptParser.Instanceof);
              this.state = 802;
              this.singleExpression(22);
              break;

            case 8:
              localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 803;

              if (!this.precpred(this._ctx, 20)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
              }

              this.state = 804;
              this.match(JavaScriptParser.In);
              this.state = 805;
              this.singleExpression(21);
              break;

            case 9:
              localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 806;

              if (!this.precpred(this._ctx, 19)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
              }

              this.state = 807;
              _la = this._input.LA(1);

              if (!((_la - 38 & ~0x1f) == 0 && (1 << _la - 38 & (1 << JavaScriptParser.Equals_ - 38 | 1 << JavaScriptParser.NotEquals - 38 | 1 << JavaScriptParser.IdentityEquals - 38 | 1 << JavaScriptParser.IdentityNotEquals - 38)) !== 0)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);

                this.consume();
              }

              this.state = 808;
              this.singleExpression(20);
              break;

            case 10:
              localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 809;

              if (!this.precpred(this._ctx, 18)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
              }

              this.state = 810;
              this.match(JavaScriptParser.BitAnd);
              this.state = 811;
              this.singleExpression(19);
              break;

            case 11:
              localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 812;

              if (!this.precpred(this._ctx, 17)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
              }

              this.state = 813;
              this.match(JavaScriptParser.BitXOr);
              this.state = 814;
              this.singleExpression(18);
              break;

            case 12:
              localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 815;

              if (!this.precpred(this._ctx, 16)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
              }

              this.state = 816;
              this.match(JavaScriptParser.BitOr);
              this.state = 817;
              this.singleExpression(17);
              break;

            case 13:
              localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 818;

              if (!this.precpred(this._ctx, 15)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
              }

              this.state = 819;
              this.match(JavaScriptParser.And);
              this.state = 820;
              this.singleExpression(16);
              break;

            case 14:
              localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 821;

              if (!this.precpred(this._ctx, 14)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
              }

              this.state = 822;
              this.match(JavaScriptParser.Or);
              this.state = 823;
              this.singleExpression(15);
              break;

            case 15:
              localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 824;

              if (!this.precpred(this._ctx, 13)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
              }

              this.state = 825;
              this.match(JavaScriptParser.QuestionMark);
              this.state = 826;
              this.singleExpression(0);
              this.state = 827;
              this.match(JavaScriptParser.Colon);
              this.state = 828;
              this.singleExpression(14);
              break;

            case 16:
              localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 830;

              if (!this.precpred(this._ctx, 12)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
              }

              this.state = 831;
              this.match(JavaScriptParser.Assign);
              this.state = 832;
              this.singleExpression(12);
              break;

            case 17:
              localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 833;

              if (!this.precpred(this._ctx, 11)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
              }

              this.state = 834;
              this.assignmentOperator();
              this.state = 835;
              this.singleExpression(11);
              break;

            case 18:
              localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 837;

              if (!this.precpred(this._ctx, 45)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 45)");
              }

              this.state = 838;
              this.match(JavaScriptParser.OpenBracket);
              this.state = 839;
              this.expressionSequence();
              this.state = 840;
              this.match(JavaScriptParser.CloseBracket);
              break;

            case 19:
              localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 842;

              if (!this.precpred(this._ctx, 44)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 44)");
              }

              this.state = 844;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === JavaScriptParser.QuestionMark) {
                this.state = 843;
                this.match(JavaScriptParser.QuestionMark);
              }

              this.state = 846;
              this.match(JavaScriptParser.Dot);
              this.state = 848;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === JavaScriptParser.Hashtag) {
                this.state = 847;
                this.match(JavaScriptParser.Hashtag);
              }

              this.state = 850;
              this.identifierName();
              break;

            case 20:
              localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 851;

              if (!this.precpred(this._ctx, 41)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 41)");
              }

              this.state = 852;
              this.arguments();
              break;

            case 21:
              localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 853;

              if (!this.precpred(this._ctx, 39)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
              }

              this.state = 854;

              if (!this.notLineTerminator()) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
              }

              this.state = 855;
              this.match(JavaScriptParser.PlusPlus);
              break;

            case 22:
              localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 856;

              if (!this.precpred(this._ctx, 38)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
              }

              this.state = 857;

              if (!this.notLineTerminator()) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.notLineTerminator()");
              }

              this.state = 858;
              this.match(JavaScriptParser.MinusMinus);
              break;

            case 23:
              localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
              this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
              this.state = 859;

              if (!this.precpred(this._ctx, 9)) {
                throw new _antlr.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
              }

              this.state = 860;
              this.templateStringLiteral();
              break;
          }
        }

        this.state = 865;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);
      }
    } catch (error) {
      if (error instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = error;

        this._errHandler.reportError(this, error);

        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }

    return localctx;
  }

  assignable() {
    let localctx = new AssignableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, JavaScriptParser.RULE_assignable);

    try {
      this.state = 869;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.Async:
        case JavaScriptParser.NonStrictLet:
        case JavaScriptParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 866;
          this.identifier();
          break;

        case JavaScriptParser.OpenBracket:
          this.enterOuterAlt(localctx, 2);
          this.state = 867;
          this.arrayLiteral();
          break;

        case JavaScriptParser.OpenBrace:
          this.enterOuterAlt(localctx, 3);
          this.state = 868;
          this.objectLiteral();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  objectLiteral() {
    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, JavaScriptParser.RULE_objectLiteral);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 871;
      this.match(JavaScriptParser.OpenBrace);
      this.state = 883;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);

      if (la_ === 1) {
        this.state = 872;
        this.propertyAssignment();
        this.state = 877;

        this._errHandler.sync(this);

        var _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);

        while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 873;
            this.match(JavaScriptParser.Comma);
            this.state = 874;
            this.propertyAssignment();
          }

          this.state = 879;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);
        }

        this.state = 881;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === JavaScriptParser.Comma) {
          this.state = 880;
          this.match(JavaScriptParser.Comma);
        }
      }

      this.state = 885;
      this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  anonymousFunction() {
    let localctx = new AnonymousFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, JavaScriptParser.RULE_anonymousFunction);
    var _la = 0; // Token type

    try {
      this.state = 908;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 101, this._ctx);

      switch (la_) {
        case 1:
          localctx = new FunctionDeclContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          this.state = 887;
          this.functionDeclaration();
          break;

        case 2:
          localctx = new AnonymousFunctionDeclContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          this.state = 889;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === JavaScriptParser.Async) {
            this.state = 888;
            this.match(JavaScriptParser.Async);
          }

          this.state = 891;
          this.match(JavaScriptParser.Function_);
          this.state = 893;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === JavaScriptParser.Multiply) {
            this.state = 892;
            this.match(JavaScriptParser.Multiply);
          }

          this.state = 895;
          this.match(JavaScriptParser.OpenParen);
          this.state = 897;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.OpenBracket | 1 << JavaScriptParser.OpenBrace | 1 << JavaScriptParser.Ellipsis)) !== 0 || (_la - 106 & ~0x1f) == 0 && (1 << _la - 106 & (1 << JavaScriptParser.Async - 106 | 1 << JavaScriptParser.NonStrictLet - 106 | 1 << JavaScriptParser.Identifier - 106)) !== 0) {
            this.state = 896;
            this.formalParameterList();
          }

          this.state = 899;
          this.match(JavaScriptParser.CloseParen);
          this.state = 900;
          this.functionBody();
          break;

        case 3:
          localctx = new ArrowFunctionContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          this.state = 902;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);

          if (la_ === 1) {
            this.state = 901;
            this.match(JavaScriptParser.Async);
          }

          this.state = 904;
          this.arrowFunctionParameters();
          this.state = 905;
          this.match(JavaScriptParser.ARROW);
          this.state = 906;
          this.arrowFunctionBody();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  arrowFunctionParameters() {
    let localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, JavaScriptParser.RULE_arrowFunctionParameters);
    var _la = 0; // Token type

    try {
      this.state = 916;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.Async:
        case JavaScriptParser.NonStrictLet:
        case JavaScriptParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 910;
          this.identifier();
          break;

        case JavaScriptParser.OpenParen:
          this.enterOuterAlt(localctx, 2);
          this.state = 911;
          this.match(JavaScriptParser.OpenParen);
          this.state = 913;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << JavaScriptParser.OpenBracket | 1 << JavaScriptParser.OpenBrace | 1 << JavaScriptParser.Ellipsis)) !== 0 || (_la - 106 & ~0x1f) == 0 && (1 << _la - 106 & (1 << JavaScriptParser.Async - 106 | 1 << JavaScriptParser.NonStrictLet - 106 | 1 << JavaScriptParser.Identifier - 106)) !== 0) {
            this.state = 912;
            this.formalParameterList();
          }

          this.state = 915;
          this.match(JavaScriptParser.CloseParen);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  arrowFunctionBody() {
    let localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, JavaScriptParser.RULE_arrowFunctionBody);

    try {
      this.state = 920;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 104, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 918;
          this.singleExpression(0);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 919;
          this.functionBody();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  assignmentOperator() {
    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, JavaScriptParser.RULE_assignmentOperator);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 922;
      _la = this._input.LA(1);

      if (!((_la - 47 & ~0x1f) == 0 && (1 << _la - 47 & (1 << JavaScriptParser.MultiplyAssign - 47 | 1 << JavaScriptParser.DivideAssign - 47 | 1 << JavaScriptParser.ModulusAssign - 47 | 1 << JavaScriptParser.PlusAssign - 47 | 1 << JavaScriptParser.MinusAssign - 47 | 1 << JavaScriptParser.LeftShiftArithmeticAssign - 47 | 1 << JavaScriptParser.RightShiftArithmeticAssign - 47 | 1 << JavaScriptParser.RightShiftLogicalAssign - 47 | 1 << JavaScriptParser.BitAndAssign - 47 | 1 << JavaScriptParser.BitXorAssign - 47 | 1 << JavaScriptParser.BitOrAssign - 47 | 1 << JavaScriptParser.PowerAssign - 47)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  literal() {
    let localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, JavaScriptParser.RULE_literal);

    try {
      this.state = 931;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.NullLiteral:
          this.enterOuterAlt(localctx, 1);
          this.state = 924;
          this.match(JavaScriptParser.NullLiteral);
          break;

        case JavaScriptParser.BooleanLiteral:
          this.enterOuterAlt(localctx, 2);
          this.state = 925;
          this.match(JavaScriptParser.BooleanLiteral);
          break;

        case JavaScriptParser.StringLiteral:
          this.enterOuterAlt(localctx, 3);
          this.state = 926;
          this.match(JavaScriptParser.StringLiteral);
          break;

        case JavaScriptParser.BackTick:
          this.enterOuterAlt(localctx, 4);
          this.state = 927;
          this.templateStringLiteral();
          break;

        case JavaScriptParser.RegularExpressionLiteral:
          this.enterOuterAlt(localctx, 5);
          this.state = 928;
          this.match(JavaScriptParser.RegularExpressionLiteral);
          break;

        case JavaScriptParser.DecimalLiteral:
        case JavaScriptParser.HexIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral2:
        case JavaScriptParser.BinaryIntegerLiteral:
          this.enterOuterAlt(localctx, 6);
          this.state = 929;
          this.numericLiteral();
          break;

        case JavaScriptParser.BigHexIntegerLiteral:
        case JavaScriptParser.BigOctalIntegerLiteral:
        case JavaScriptParser.BigBinaryIntegerLiteral:
        case JavaScriptParser.BigDecimalIntegerLiteral:
          this.enterOuterAlt(localctx, 7);
          this.state = 930;
          this.bigintLiteral();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  templateStringLiteral() {
    let localctx = new TemplateStringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, JavaScriptParser.RULE_templateStringLiteral);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 933;
      this.match(JavaScriptParser.BackTick);
      this.state = 937;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === JavaScriptParser.TemplateStringStartExpression || _la === JavaScriptParser.TemplateStringAtom) {
        this.state = 934;
        this.templateStringAtom();
        this.state = 939;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 940;
      this.match(JavaScriptParser.BackTick);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  templateStringAtom() {
    let localctx = new TemplateStringAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, JavaScriptParser.RULE_templateStringAtom);

    try {
      this.state = 947;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.TemplateStringAtom:
          this.enterOuterAlt(localctx, 1);
          this.state = 942;
          this.match(JavaScriptParser.TemplateStringAtom);
          break;

        case JavaScriptParser.TemplateStringStartExpression:
          this.enterOuterAlt(localctx, 2);
          this.state = 943;
          this.match(JavaScriptParser.TemplateStringStartExpression);
          this.state = 944;
          this.singleExpression(0);
          this.state = 945;
          this.match(JavaScriptParser.TemplateCloseBrace);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  numericLiteral() {
    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, JavaScriptParser.RULE_numericLiteral);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 949;
      _la = this._input.LA(1);

      if (!((_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << JavaScriptParser.DecimalLiteral - 62 | 1 << JavaScriptParser.HexIntegerLiteral - 62 | 1 << JavaScriptParser.OctalIntegerLiteral - 62 | 1 << JavaScriptParser.OctalIntegerLiteral2 - 62 | 1 << JavaScriptParser.BinaryIntegerLiteral - 62)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  bigintLiteral() {
    let localctx = new BigintLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, JavaScriptParser.RULE_bigintLiteral);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 951;
      _la = this._input.LA(1);

      if (!((_la - 67 & ~0x1f) == 0 && (1 << _la - 67 & (1 << JavaScriptParser.BigHexIntegerLiteral - 67 | 1 << JavaScriptParser.BigOctalIntegerLiteral - 67 | 1 << JavaScriptParser.BigBinaryIntegerLiteral - 67 | 1 << JavaScriptParser.BigDecimalIntegerLiteral - 67)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  getter() {
    let localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, JavaScriptParser.RULE_getter);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 953;

      if (!this.n("get")) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"get\")");
      }

      this.state = 954;
      this.identifier();
      this.state = 955;
      this.propertyName();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  setter() {
    let localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, JavaScriptParser.RULE_setter);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 957;

      if (!this.n("set")) {
        throw new _antlr.default.error.FailedPredicateException(this, "this.n(\"set\")");
      }

      this.state = 958;
      this.identifier();
      this.state = 959;
      this.propertyName();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  identifierName() {
    let localctx = new IdentifierNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, JavaScriptParser.RULE_identifierName);

    try {
      this.state = 963;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 108, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 961;
          this.identifier();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 962;
          this.reservedWord();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  identifier() {
    let localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, JavaScriptParser.RULE_identifier);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 965;
      _la = this._input.LA(1);

      if (!((_la - 106 & ~0x1f) == 0 && (1 << _la - 106 & (1 << JavaScriptParser.Async - 106 | 1 << JavaScriptParser.NonStrictLet - 106 | 1 << JavaScriptParser.Identifier - 106)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  reservedWord() {
    let localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, JavaScriptParser.RULE_reservedWord);

    try {
      this.state = 970;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function_:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.As:
        case JavaScriptParser.From:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Async:
        case JavaScriptParser.Await:
        case JavaScriptParser.Implements:
        case JavaScriptParser.StrictLet:
        case JavaScriptParser.NonStrictLet:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
          this.enterOuterAlt(localctx, 1);
          this.state = 967;
          this.keyword();
          break;

        case JavaScriptParser.NullLiteral:
          this.enterOuterAlt(localctx, 2);
          this.state = 968;
          this.match(JavaScriptParser.NullLiteral);
          break;

        case JavaScriptParser.BooleanLiteral:
          this.enterOuterAlt(localctx, 3);
          this.state = 969;
          this.match(JavaScriptParser.BooleanLiteral);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  keyword() {
    let localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, JavaScriptParser.RULE_keyword);

    try {
      this.state = 1018;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case JavaScriptParser.Break:
          this.enterOuterAlt(localctx, 1);
          this.state = 972;
          this.match(JavaScriptParser.Break);
          break;

        case JavaScriptParser.Do:
          this.enterOuterAlt(localctx, 2);
          this.state = 973;
          this.match(JavaScriptParser.Do);
          break;

        case JavaScriptParser.Instanceof:
          this.enterOuterAlt(localctx, 3);
          this.state = 974;
          this.match(JavaScriptParser.Instanceof);
          break;

        case JavaScriptParser.Typeof:
          this.enterOuterAlt(localctx, 4);
          this.state = 975;
          this.match(JavaScriptParser.Typeof);
          break;

        case JavaScriptParser.Case:
          this.enterOuterAlt(localctx, 5);
          this.state = 976;
          this.match(JavaScriptParser.Case);
          break;

        case JavaScriptParser.Else:
          this.enterOuterAlt(localctx, 6);
          this.state = 977;
          this.match(JavaScriptParser.Else);
          break;

        case JavaScriptParser.New:
          this.enterOuterAlt(localctx, 7);
          this.state = 978;
          this.match(JavaScriptParser.New);
          break;

        case JavaScriptParser.Var:
          this.enterOuterAlt(localctx, 8);
          this.state = 979;
          this.match(JavaScriptParser.Var);
          break;

        case JavaScriptParser.Catch:
          this.enterOuterAlt(localctx, 9);
          this.state = 980;
          this.match(JavaScriptParser.Catch);
          break;

        case JavaScriptParser.Finally:
          this.enterOuterAlt(localctx, 10);
          this.state = 981;
          this.match(JavaScriptParser.Finally);
          break;

        case JavaScriptParser.Return:
          this.enterOuterAlt(localctx, 11);
          this.state = 982;
          this.match(JavaScriptParser.Return);
          break;

        case JavaScriptParser.Void:
          this.enterOuterAlt(localctx, 12);
          this.state = 983;
          this.match(JavaScriptParser.Void);
          break;

        case JavaScriptParser.Continue:
          this.enterOuterAlt(localctx, 13);
          this.state = 984;
          this.match(JavaScriptParser.Continue);
          break;

        case JavaScriptParser.For:
          this.enterOuterAlt(localctx, 14);
          this.state = 985;
          this.match(JavaScriptParser.For);
          break;

        case JavaScriptParser.Switch:
          this.enterOuterAlt(localctx, 15);
          this.state = 986;
          this.match(JavaScriptParser.Switch);
          break;

        case JavaScriptParser.While:
          this.enterOuterAlt(localctx, 16);
          this.state = 987;
          this.match(JavaScriptParser.While);
          break;

        case JavaScriptParser.Debugger:
          this.enterOuterAlt(localctx, 17);
          this.state = 988;
          this.match(JavaScriptParser.Debugger);
          break;

        case JavaScriptParser.Function_:
          this.enterOuterAlt(localctx, 18);
          this.state = 989;
          this.match(JavaScriptParser.Function_);
          break;

        case JavaScriptParser.This:
          this.enterOuterAlt(localctx, 19);
          this.state = 990;
          this.match(JavaScriptParser.This);
          break;

        case JavaScriptParser.With:
          this.enterOuterAlt(localctx, 20);
          this.state = 991;
          this.match(JavaScriptParser.With);
          break;

        case JavaScriptParser.Default:
          this.enterOuterAlt(localctx, 21);
          this.state = 992;
          this.match(JavaScriptParser.Default);
          break;

        case JavaScriptParser.If:
          this.enterOuterAlt(localctx, 22);
          this.state = 993;
          this.match(JavaScriptParser.If);
          break;

        case JavaScriptParser.Throw:
          this.enterOuterAlt(localctx, 23);
          this.state = 994;
          this.match(JavaScriptParser.Throw);
          break;

        case JavaScriptParser.Delete:
          this.enterOuterAlt(localctx, 24);
          this.state = 995;
          this.match(JavaScriptParser.Delete);
          break;

        case JavaScriptParser.In:
          this.enterOuterAlt(localctx, 25);
          this.state = 996;
          this.match(JavaScriptParser.In);
          break;

        case JavaScriptParser.Try:
          this.enterOuterAlt(localctx, 26);
          this.state = 997;
          this.match(JavaScriptParser.Try);
          break;

        case JavaScriptParser.Class:
          this.enterOuterAlt(localctx, 27);
          this.state = 998;
          this.match(JavaScriptParser.Class);
          break;

        case JavaScriptParser.Enum:
          this.enterOuterAlt(localctx, 28);
          this.state = 999;
          this.match(JavaScriptParser.Enum);
          break;

        case JavaScriptParser.Extends:
          this.enterOuterAlt(localctx, 29);
          this.state = 1000;
          this.match(JavaScriptParser.Extends);
          break;

        case JavaScriptParser.Super:
          this.enterOuterAlt(localctx, 30);
          this.state = 1001;
          this.match(JavaScriptParser.Super);
          break;

        case JavaScriptParser.Const:
          this.enterOuterAlt(localctx, 31);
          this.state = 1002;
          this.match(JavaScriptParser.Const);
          break;

        case JavaScriptParser.Export:
          this.enterOuterAlt(localctx, 32);
          this.state = 1003;
          this.match(JavaScriptParser.Export);
          break;

        case JavaScriptParser.Import:
          this.enterOuterAlt(localctx, 33);
          this.state = 1004;
          this.match(JavaScriptParser.Import);
          break;

        case JavaScriptParser.Implements:
          this.enterOuterAlt(localctx, 34);
          this.state = 1005;
          this.match(JavaScriptParser.Implements);
          break;

        case JavaScriptParser.StrictLet:
        case JavaScriptParser.NonStrictLet:
          this.enterOuterAlt(localctx, 35);
          this.state = 1006;
          this.let_();
          break;

        case JavaScriptParser.Private:
          this.enterOuterAlt(localctx, 36);
          this.state = 1007;
          this.match(JavaScriptParser.Private);
          break;

        case JavaScriptParser.Public:
          this.enterOuterAlt(localctx, 37);
          this.state = 1008;
          this.match(JavaScriptParser.Public);
          break;

        case JavaScriptParser.Interface:
          this.enterOuterAlt(localctx, 38);
          this.state = 1009;
          this.match(JavaScriptParser.Interface);
          break;

        case JavaScriptParser.Package:
          this.enterOuterAlt(localctx, 39);
          this.state = 1010;
          this.match(JavaScriptParser.Package);
          break;

        case JavaScriptParser.Protected:
          this.enterOuterAlt(localctx, 40);
          this.state = 1011;
          this.match(JavaScriptParser.Protected);
          break;

        case JavaScriptParser.Static:
          this.enterOuterAlt(localctx, 41);
          this.state = 1012;
          this.match(JavaScriptParser.Static);
          break;

        case JavaScriptParser.Yield:
          this.enterOuterAlt(localctx, 42);
          this.state = 1013;
          this.match(JavaScriptParser.Yield);
          break;

        case JavaScriptParser.Async:
          this.enterOuterAlt(localctx, 43);
          this.state = 1014;
          this.match(JavaScriptParser.Async);
          break;

        case JavaScriptParser.Await:
          this.enterOuterAlt(localctx, 44);
          this.state = 1015;
          this.match(JavaScriptParser.Await);
          break;

        case JavaScriptParser.From:
          this.enterOuterAlt(localctx, 45);
          this.state = 1016;
          this.match(JavaScriptParser.From);
          break;

        case JavaScriptParser.As:
          this.enterOuterAlt(localctx, 46);
          this.state = 1017;
          this.match(JavaScriptParser.As);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  let_() {
    let localctx = new Let_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 150, JavaScriptParser.RULE_let_);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1020;
      _la = this._input.LA(1);

      if (!(_la === JavaScriptParser.StrictLet || _la === JavaScriptParser.NonStrictLet)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  eos() {
    let localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, JavaScriptParser.RULE_eos);

    try {
      this.state = 1026;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 111, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1022;
          this.match(JavaScriptParser.SemiColon);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1023;
          this.match(JavaScriptParser.EOF);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1024;

          if (!this.lineTerminatorAhead()) {
            throw new _antlr.default.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
          }

          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1025;

          if (!this.closeBrace()) {
            throw new _antlr.default.error.FailedPredicateException(this, "this.closeBrace()");
          }

          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

}

exports.default = JavaScriptParser;
JavaScriptParser.EOF = _antlr.default.Token.EOF;
JavaScriptParser.HashBangLine = 1;
JavaScriptParser.MultiLineComment = 2;
JavaScriptParser.SingleLineComment = 3;
JavaScriptParser.RegularExpressionLiteral = 4;
JavaScriptParser.OpenBracket = 5;
JavaScriptParser.CloseBracket = 6;
JavaScriptParser.OpenParen = 7;
JavaScriptParser.CloseParen = 8;
JavaScriptParser.OpenBrace = 9;
JavaScriptParser.TemplateCloseBrace = 10;
JavaScriptParser.CloseBrace = 11;
JavaScriptParser.SemiColon = 12;
JavaScriptParser.Comma = 13;
JavaScriptParser.Assign = 14;
JavaScriptParser.QuestionMark = 15;
JavaScriptParser.Colon = 16;
JavaScriptParser.Ellipsis = 17;
JavaScriptParser.Dot = 18;
JavaScriptParser.PlusPlus = 19;
JavaScriptParser.MinusMinus = 20;
JavaScriptParser.Plus = 21;
JavaScriptParser.Minus = 22;
JavaScriptParser.BitNot = 23;
JavaScriptParser.Not = 24;
JavaScriptParser.Multiply = 25;
JavaScriptParser.Divide = 26;
JavaScriptParser.Modulus = 27;
JavaScriptParser.Power = 28;
JavaScriptParser.NullCoalesce = 29;
JavaScriptParser.Hashtag = 30;
JavaScriptParser.RightShiftArithmetic = 31;
JavaScriptParser.LeftShiftArithmetic = 32;
JavaScriptParser.RightShiftLogical = 33;
JavaScriptParser.LessThan = 34;
JavaScriptParser.MoreThan = 35;
JavaScriptParser.LessThanEquals = 36;
JavaScriptParser.GreaterThanEquals = 37;
JavaScriptParser.Equals_ = 38;
JavaScriptParser.NotEquals = 39;
JavaScriptParser.IdentityEquals = 40;
JavaScriptParser.IdentityNotEquals = 41;
JavaScriptParser.BitAnd = 42;
JavaScriptParser.BitXOr = 43;
JavaScriptParser.BitOr = 44;
JavaScriptParser.And = 45;
JavaScriptParser.Or = 46;
JavaScriptParser.MultiplyAssign = 47;
JavaScriptParser.DivideAssign = 48;
JavaScriptParser.ModulusAssign = 49;
JavaScriptParser.PlusAssign = 50;
JavaScriptParser.MinusAssign = 51;
JavaScriptParser.LeftShiftArithmeticAssign = 52;
JavaScriptParser.RightShiftArithmeticAssign = 53;
JavaScriptParser.RightShiftLogicalAssign = 54;
JavaScriptParser.BitAndAssign = 55;
JavaScriptParser.BitXorAssign = 56;
JavaScriptParser.BitOrAssign = 57;
JavaScriptParser.PowerAssign = 58;
JavaScriptParser.ARROW = 59;
JavaScriptParser.NullLiteral = 60;
JavaScriptParser.BooleanLiteral = 61;
JavaScriptParser.DecimalLiteral = 62;
JavaScriptParser.HexIntegerLiteral = 63;
JavaScriptParser.OctalIntegerLiteral = 64;
JavaScriptParser.OctalIntegerLiteral2 = 65;
JavaScriptParser.BinaryIntegerLiteral = 66;
JavaScriptParser.BigHexIntegerLiteral = 67;
JavaScriptParser.BigOctalIntegerLiteral = 68;
JavaScriptParser.BigBinaryIntegerLiteral = 69;
JavaScriptParser.BigDecimalIntegerLiteral = 70;
JavaScriptParser.Break = 71;
JavaScriptParser.Do = 72;
JavaScriptParser.Instanceof = 73;
JavaScriptParser.Typeof = 74;
JavaScriptParser.Case = 75;
JavaScriptParser.Else = 76;
JavaScriptParser.New = 77;
JavaScriptParser.Var = 78;
JavaScriptParser.Catch = 79;
JavaScriptParser.Finally = 80;
JavaScriptParser.Return = 81;
JavaScriptParser.Void = 82;
JavaScriptParser.Continue = 83;
JavaScriptParser.For = 84;
JavaScriptParser.Switch = 85;
JavaScriptParser.While = 86;
JavaScriptParser.Debugger = 87;
JavaScriptParser.Function_ = 88;
JavaScriptParser.This = 89;
JavaScriptParser.With = 90;
JavaScriptParser.Default = 91;
JavaScriptParser.If = 92;
JavaScriptParser.Throw = 93;
JavaScriptParser.Delete = 94;
JavaScriptParser.In = 95;
JavaScriptParser.Try = 96;
JavaScriptParser.As = 97;
JavaScriptParser.From = 98;
JavaScriptParser.Class = 99;
JavaScriptParser.Enum = 100;
JavaScriptParser.Extends = 101;
JavaScriptParser.Super = 102;
JavaScriptParser.Const = 103;
JavaScriptParser.Export = 104;
JavaScriptParser.Import = 105;
JavaScriptParser.Async = 106;
JavaScriptParser.Await = 107;
JavaScriptParser.Implements = 108;
JavaScriptParser.StrictLet = 109;
JavaScriptParser.NonStrictLet = 110;
JavaScriptParser.Private = 111;
JavaScriptParser.Public = 112;
JavaScriptParser.Interface = 113;
JavaScriptParser.Package = 114;
JavaScriptParser.Protected = 115;
JavaScriptParser.Static = 116;
JavaScriptParser.Yield = 117;
JavaScriptParser.Identifier = 118;
JavaScriptParser.StringLiteral = 119;
JavaScriptParser.BackTick = 120;
JavaScriptParser.WhiteSpaces = 121;
JavaScriptParser.LineTerminator = 122;
JavaScriptParser.HtmlComment = 123;
JavaScriptParser.CDataComment = 124;
JavaScriptParser.UnexpectedCharacter = 125;
JavaScriptParser.TemplateStringStartExpression = 126;
JavaScriptParser.TemplateStringAtom = 127;
JavaScriptParser.RULE_program = 0;
JavaScriptParser.RULE_sourceElement = 1;
JavaScriptParser.RULE_statement = 2;
JavaScriptParser.RULE_block = 3;
JavaScriptParser.RULE_statementList = 4;
JavaScriptParser.RULE_importStatement = 5;
JavaScriptParser.RULE_importFromBlock = 6;
JavaScriptParser.RULE_moduleItems = 7;
JavaScriptParser.RULE_importDefault = 8;
JavaScriptParser.RULE_importNamespace = 9;
JavaScriptParser.RULE_importFrom = 10;
JavaScriptParser.RULE_aliasName = 11;
JavaScriptParser.RULE_exportStatement = 12;
JavaScriptParser.RULE_exportFromBlock = 13;
JavaScriptParser.RULE_declaration = 14;
JavaScriptParser.RULE_variableStatement = 15;
JavaScriptParser.RULE_variableDeclarationList = 16;
JavaScriptParser.RULE_variableDeclaration = 17;
JavaScriptParser.RULE_emptyStatement_ = 18;
JavaScriptParser.RULE_expressionStatement = 19;
JavaScriptParser.RULE_ifStatement = 20;
JavaScriptParser.RULE_iterationStatement = 21;
JavaScriptParser.RULE_varModifier = 22;
JavaScriptParser.RULE_continueStatement = 23;
JavaScriptParser.RULE_breakStatement = 24;
JavaScriptParser.RULE_returnStatement = 25;
JavaScriptParser.RULE_yieldStatement = 26;
JavaScriptParser.RULE_withStatement = 27;
JavaScriptParser.RULE_switchStatement = 28;
JavaScriptParser.RULE_caseBlock = 29;
JavaScriptParser.RULE_caseClauses = 30;
JavaScriptParser.RULE_caseClause = 31;
JavaScriptParser.RULE_defaultClause = 32;
JavaScriptParser.RULE_labelledStatement = 33;
JavaScriptParser.RULE_throwStatement = 34;
JavaScriptParser.RULE_tryStatement = 35;
JavaScriptParser.RULE_catchProduction = 36;
JavaScriptParser.RULE_finallyProduction = 37;
JavaScriptParser.RULE_debuggerStatement = 38;
JavaScriptParser.RULE_functionDeclaration = 39;
JavaScriptParser.RULE_classDeclaration = 40;
JavaScriptParser.RULE_classTail = 41;
JavaScriptParser.RULE_classElement = 42;
JavaScriptParser.RULE_methodDefinition = 43;
JavaScriptParser.RULE_formalParameterList = 44;
JavaScriptParser.RULE_formalParameterArg = 45;
JavaScriptParser.RULE_lastFormalParameterArg = 46;
JavaScriptParser.RULE_functionBody = 47;
JavaScriptParser.RULE_sourceElements = 48;
JavaScriptParser.RULE_arrayLiteral = 49;
JavaScriptParser.RULE_elementList = 50;
JavaScriptParser.RULE_arrayElement = 51;
JavaScriptParser.RULE_propertyAssignment = 52;
JavaScriptParser.RULE_propertyName = 53;
JavaScriptParser.RULE_arguments = 54;
JavaScriptParser.RULE_argument = 55;
JavaScriptParser.RULE_expressionSequence = 56;
JavaScriptParser.RULE_singleExpression = 57;
JavaScriptParser.RULE_assignable = 58;
JavaScriptParser.RULE_objectLiteral = 59;
JavaScriptParser.RULE_anonymousFunction = 60;
JavaScriptParser.RULE_arrowFunctionParameters = 61;
JavaScriptParser.RULE_arrowFunctionBody = 62;
JavaScriptParser.RULE_assignmentOperator = 63;
JavaScriptParser.RULE_literal = 64;
JavaScriptParser.RULE_templateStringLiteral = 65;
JavaScriptParser.RULE_templateStringAtom = 66;
JavaScriptParser.RULE_numericLiteral = 67;
JavaScriptParser.RULE_bigintLiteral = 68;
JavaScriptParser.RULE_getter = 69;
JavaScriptParser.RULE_setter = 70;
JavaScriptParser.RULE_identifierName = 71;
JavaScriptParser.RULE_identifier = 72;
JavaScriptParser.RULE_reservedWord = 73;
JavaScriptParser.RULE_keyword = 74;
JavaScriptParser.RULE_let_ = 75;
JavaScriptParser.RULE_eos = 76;

class ProgramContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_program;
  }

  EOF() {
    return this.getToken(JavaScriptParser.EOF, 0);
  }

  HashBangLine() {
    return this.getToken(JavaScriptParser.HashBangLine, 0);
  }

  sourceElements() {
    return this.getTypedRuleContext(SourceElementsContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterProgram(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitProgram(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitProgram(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SourceElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_sourceElement;
  }

  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSourceElement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSourceElement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSourceElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class StatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_statement;
  }

  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }

  variableStatement() {
    return this.getTypedRuleContext(VariableStatementContext, 0);
  }

  importStatement() {
    return this.getTypedRuleContext(ImportStatementContext, 0);
  }

  exportStatement() {
    return this.getTypedRuleContext(ExportStatementContext, 0);
  }

  emptyStatement_() {
    return this.getTypedRuleContext(EmptyStatement_Context, 0);
  }

  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }

  expressionStatement() {
    return this.getTypedRuleContext(ExpressionStatementContext, 0);
  }

  ifStatement() {
    return this.getTypedRuleContext(IfStatementContext, 0);
  }

  iterationStatement() {
    return this.getTypedRuleContext(IterationStatementContext, 0);
  }

  continueStatement() {
    return this.getTypedRuleContext(ContinueStatementContext, 0);
  }

  breakStatement() {
    return this.getTypedRuleContext(BreakStatementContext, 0);
  }

  returnStatement() {
    return this.getTypedRuleContext(ReturnStatementContext, 0);
  }

  yieldStatement() {
    return this.getTypedRuleContext(YieldStatementContext, 0);
  }

  withStatement() {
    return this.getTypedRuleContext(WithStatementContext, 0);
  }

  labelledStatement() {
    return this.getTypedRuleContext(LabelledStatementContext, 0);
  }

  switchStatement() {
    return this.getTypedRuleContext(SwitchStatementContext, 0);
  }

  throwStatement() {
    return this.getTypedRuleContext(ThrowStatementContext, 0);
  }

  tryStatement() {
    return this.getTypedRuleContext(TryStatementContext, 0);
  }

  debuggerStatement() {
    return this.getTypedRuleContext(DebuggerStatementContext, 0);
  }

  functionDeclaration() {
    return this.getTypedRuleContext(FunctionDeclarationContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class BlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_block;
  }

  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }

  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }

  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBlock(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBlock(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class StatementListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_statementList;
  }

  statement = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterStatementList(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitStatementList(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitStatementList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ImportStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importStatement;
  }

  Import() {
    return this.getToken(JavaScriptParser.Import, 0);
  }

  importFromBlock() {
    return this.getTypedRuleContext(ImportFromBlockContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ImportFromBlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importFromBlock;
  }

  importFrom() {
    return this.getTypedRuleContext(ImportFromContext, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  importNamespace() {
    return this.getTypedRuleContext(ImportNamespaceContext, 0);
  }

  moduleItems() {
    return this.getTypedRuleContext(ModuleItemsContext, 0);
  }

  importDefault() {
    return this.getTypedRuleContext(ImportDefaultContext, 0);
  }

  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportFromBlock(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportFromBlock(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportFromBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ModuleItemsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_moduleItems;
  }

  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }

  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }

  aliasName = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(AliasNameContext);
    } else {
      return this.getTypedRuleContext(AliasNameContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterModuleItems(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitModuleItems(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitModuleItems(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ImportDefaultContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importDefault;
  }

  aliasName() {
    return this.getTypedRuleContext(AliasNameContext, 0);
  }

  Comma() {
    return this.getToken(JavaScriptParser.Comma, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportDefault(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportDefault(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportDefault(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ImportNamespaceContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importNamespace;
  }

  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }

  identifierName = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
      return this.getTypedRuleContext(IdentifierNameContext, i);
    }
  };

  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportNamespace(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportNamespace(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportNamespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ImportFromContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importFrom;
  }

  From() {
    return this.getToken(JavaScriptParser.From, 0);
  }

  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportFrom(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportFrom(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportFrom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class AliasNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_aliasName;
  }

  identifierName = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
      return this.getTypedRuleContext(IdentifierNameContext, i);
    }
  };

  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAliasName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAliasName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAliasName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExportStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_exportStatement;
  }

  copyFrom(ctx) {
    super.copyFrom(ctx);
  }

}

class ExportDefaultDeclarationContext extends ExportStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Export() {
    return this.getToken(JavaScriptParser.Export, 0);
  }

  Default() {
    return this.getToken(JavaScriptParser.Default, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportDefaultDeclaration(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportDefaultDeclaration(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportDefaultDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;

class ExportDeclarationContext extends ExportStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Export() {
    return this.getToken(JavaScriptParser.Export, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  exportFromBlock() {
    return this.getTypedRuleContext(ExportFromBlockContext, 0);
  }

  declaration() {
    return this.getTypedRuleContext(DeclarationContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportDeclaration(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportDeclaration(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ExportDeclarationContext = ExportDeclarationContext;

class ExportFromBlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_exportFromBlock;
  }

  importNamespace() {
    return this.getTypedRuleContext(ImportNamespaceContext, 0);
  }

  importFrom() {
    return this.getTypedRuleContext(ImportFromContext, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  moduleItems() {
    return this.getTypedRuleContext(ModuleItemsContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExportFromBlock(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExportFromBlock(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExportFromBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class DeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_declaration;
  }

  variableStatement() {
    return this.getTypedRuleContext(VariableStatementContext, 0);
  }

  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }

  functionDeclaration() {
    return this.getTypedRuleContext(FunctionDeclarationContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDeclaration(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDeclaration(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class VariableStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableStatement;
  }

  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVariableStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVariableStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVariableStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class VariableDeclarationListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableDeclarationList;
  }

  varModifier() {
    return this.getTypedRuleContext(VarModifierContext, 0);
  }

  variableDeclaration = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
      return this.getTypedRuleContext(VariableDeclarationContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVariableDeclarationList(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVariableDeclarationList(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVariableDeclarationList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class VariableDeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableDeclaration;
  }

  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }

  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVariableDeclaration(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVariableDeclaration(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVariableDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class EmptyStatement_Context extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_emptyStatement_;
  }

  SemiColon() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterEmptyStatement_(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitEmptyStatement_(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitEmptyStatement_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExpressionStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_expressionStatement;
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExpressionStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExpressionStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExpressionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class IfStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_ifStatement;
  }

  If() {
    return this.getToken(JavaScriptParser.If, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  statement = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };

  Else() {
    return this.getToken(JavaScriptParser.Else, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIfStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIfStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIfStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class IterationStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_iterationStatement;
  }

  copyFrom(ctx) {
    super.copyFrom(ctx);
  }

}

class DoStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Do() {
    return this.getToken(JavaScriptParser.Do, 0);
  }

  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }

  While() {
    return this.getToken(JavaScriptParser.While, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDoStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDoStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDoStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.DoStatementContext = DoStatementContext;

class WhileStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  While() {
    return this.getToken(JavaScriptParser.While, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterWhileStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitWhileStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitWhileStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.WhileStatementContext = WhileStatementContext;

class ForStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  SemiColon = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.SemiColon);
    } else {
      return this.getToken(JavaScriptParser.SemiColon, i);
    }
  };

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }

  expressionSequence = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ExpressionSequenceContext);
    } else {
      return this.getTypedRuleContext(ExpressionSequenceContext, i);
    }
  };

  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterForStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitForStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitForStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ForStatementContext = ForStatementContext;

class ForInStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  In() {
    return this.getToken(JavaScriptParser.In, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterForInStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitForInStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitForInStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ForInStatementContext = ForInStatementContext;

class ForOfStatementContext extends IterationStatementContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  variableDeclarationList() {
    return this.getTypedRuleContext(VariableDeclarationListContext, 0);
  }

  Await() {
    return this.getToken(JavaScriptParser.Await, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterForOfStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitForOfStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitForOfStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ForOfStatementContext = ForOfStatementContext;

class VarModifierContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_varModifier;
  }

  Var() {
    return this.getToken(JavaScriptParser.Var, 0);
  }

  let_() {
    return this.getTypedRuleContext(Let_Context, 0);
  }

  Const() {
    return this.getToken(JavaScriptParser.Const, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVarModifier(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVarModifier(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVarModifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ContinueStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_continueStatement;
  }

  Continue() {
    return this.getToken(JavaScriptParser.Continue, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterContinueStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitContinueStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitContinueStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class BreakStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_breakStatement;
  }

  Break() {
    return this.getToken(JavaScriptParser.Break, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBreakStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBreakStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBreakStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ReturnStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_returnStatement;
  }

  Return() {
    return this.getToken(JavaScriptParser.Return, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterReturnStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitReturnStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitReturnStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class YieldStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_yieldStatement;
  }

  Yield() {
    return this.getToken(JavaScriptParser.Yield, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterYieldStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitYieldStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitYieldStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class WithStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_withStatement;
  }

  With() {
    return this.getToken(JavaScriptParser.With, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterWithStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitWithStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitWithStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SwitchStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_switchStatement;
  }

  Switch() {
    return this.getToken(JavaScriptParser.Switch, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  caseBlock() {
    return this.getTypedRuleContext(CaseBlockContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSwitchStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSwitchStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSwitchStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class CaseBlockContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseBlock;
  }

  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }

  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }

  caseClauses = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(CaseClausesContext);
    } else {
      return this.getTypedRuleContext(CaseClausesContext, i);
    }
  };

  defaultClause() {
    return this.getTypedRuleContext(DefaultClauseContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCaseBlock(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCaseBlock(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCaseBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class CaseClausesContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseClauses;
  }

  caseClause = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(CaseClauseContext);
    } else {
      return this.getTypedRuleContext(CaseClauseContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCaseClauses(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCaseClauses(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCaseClauses(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class CaseClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseClause;
  }

  Case() {
    return this.getToken(JavaScriptParser.Case, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }

  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCaseClause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCaseClause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCaseClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class DefaultClauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_defaultClause;
  }

  Default() {
    return this.getToken(JavaScriptParser.Default, 0);
  }

  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }

  statementList() {
    return this.getTypedRuleContext(StatementListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDefaultClause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDefaultClause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDefaultClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class LabelledStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_labelledStatement;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }

  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLabelledStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLabelledStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLabelledStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ThrowStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_throwStatement;
  }

  Throw() {
    return this.getToken(JavaScriptParser.Throw, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterThrowStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitThrowStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitThrowStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TryStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_tryStatement;
  }

  Try() {
    return this.getToken(JavaScriptParser.Try, 0);
  }

  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }

  catchProduction() {
    return this.getTypedRuleContext(CatchProductionContext, 0);
  }

  finallyProduction() {
    return this.getTypedRuleContext(FinallyProductionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTryStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTryStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTryStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class CatchProductionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_catchProduction;
  }

  Catch() {
    return this.getToken(JavaScriptParser.Catch, 0);
  }

  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCatchProduction(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCatchProduction(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCatchProduction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FinallyProductionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_finallyProduction;
  }

  Finally() {
    return this.getToken(JavaScriptParser.Finally, 0);
  }

  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFinallyProduction(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFinallyProduction(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFinallyProduction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class DebuggerStatementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_debuggerStatement;
  }

  Debugger() {
    return this.getToken(JavaScriptParser.Debugger, 0);
  }

  eos() {
    return this.getTypedRuleContext(EosContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDebuggerStatement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDebuggerStatement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDebuggerStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FunctionDeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_functionDeclaration;
  }

  Function_() {
    return this.getToken(JavaScriptParser.Function_, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }

  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }

  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }

  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionDeclaration(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionDeclaration(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ClassDeclarationContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classDeclaration;
  }

  Class() {
    return this.getToken(JavaScriptParser.Class, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  classTail() {
    return this.getTypedRuleContext(ClassTailContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassDeclaration(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassDeclaration(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ClassTailContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classTail;
  }

  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }

  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }

  Extends() {
    return this.getToken(JavaScriptParser.Extends, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  classElement = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ClassElementContext);
    } else {
      return this.getTypedRuleContext(ClassElementContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassTail(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassTail(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassTail(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ClassElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classElement;
  }

  methodDefinition() {
    return this.getTypedRuleContext(MethodDefinitionContext, 0);
  }

  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }

  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }

  objectLiteral() {
    return this.getTypedRuleContext(ObjectLiteralContext, 0);
  }

  SemiColon() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
  }

  Static = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.Static);
    } else {
      return this.getToken(JavaScriptParser.Static, i);
    }
  };
  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };
  Async = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.Async);
    } else {
      return this.getToken(JavaScriptParser.Async, i);
    }
  };

  emptyStatement_() {
    return this.getTypedRuleContext(EmptyStatement_Context, 0);
  }

  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  Hashtag() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassElement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassElement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class MethodDefinitionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_methodDefinition;
  }

  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }

  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }

  Hashtag() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
  }

  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }

  getter() {
    return this.getTypedRuleContext(GetterContext, 0);
  }

  setter() {
    return this.getTypedRuleContext(SetterContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMethodDefinition(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMethodDefinition(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMethodDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FormalParameterListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_formalParameterList;
  }

  formalParameterArg = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(FormalParameterArgContext);
    } else {
      return this.getTypedRuleContext(FormalParameterArgContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };

  lastFormalParameterArg() {
    return this.getTypedRuleContext(LastFormalParameterArgContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFormalParameterList(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFormalParameterList(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFormalParameterList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FormalParameterArgContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_formalParameterArg;
  }

  assignable() {
    return this.getTypedRuleContext(AssignableContext, 0);
  }

  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFormalParameterArg(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFormalParameterArg(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFormalParameterArg(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class LastFormalParameterArgContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_lastFormalParameterArg;
  }

  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLastFormalParameterArg(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLastFormalParameterArg(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLastFormalParameterArg(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FunctionBodyContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_functionBody;
  }

  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }

  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }

  sourceElements() {
    return this.getTypedRuleContext(SourceElementsContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionBody(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionBody(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SourceElementsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_sourceElements;
  }

  sourceElement = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SourceElementContext);
    } else {
      return this.getTypedRuleContext(SourceElementContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSourceElements(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSourceElements(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSourceElements(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ArrayLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrayLiteral;
  }

  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }

  elementList() {
    return this.getTypedRuleContext(ElementListContext, 0);
  }

  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrayLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrayLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrayLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ElementListContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_elementList;
  }

  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };
  arrayElement = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ArrayElementContext);
    } else {
      return this.getTypedRuleContext(ArrayElementContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterElementList(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitElementList(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitElementList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ArrayElementContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrayElement;
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrayElement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrayElement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrayElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class PropertyAssignmentContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_propertyAssignment;
  }

  copyFrom(ctx) {
    super.copyFrom(ctx);
  }

}

class PropertyExpressionAssignmentContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }

  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyExpressionAssignment(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyExpressionAssignment(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyExpressionAssignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

class ComputedPropertyExpressionAssignmentContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }

  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterComputedPropertyExpressionAssignment(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitComputedPropertyExpressionAssignment(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitComputedPropertyExpressionAssignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

class PropertyShorthandContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyShorthand(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyShorthand(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyShorthand(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.PropertyShorthandContext = PropertyShorthandContext;

class PropertySetterContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  setter() {
    return this.getTypedRuleContext(SetterContext, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  formalParameterArg() {
    return this.getTypedRuleContext(FormalParameterArgContext, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertySetter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertySetter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertySetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.PropertySetterContext = PropertySetterContext;

class PropertyGetterContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  getter() {
    return this.getTypedRuleContext(GetterContext, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyGetter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyGetter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyGetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.PropertyGetterContext = PropertyGetterContext;

class FunctionPropertyContext extends PropertyAssignmentContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }

  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }

  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }

  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionProperty(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionProperty(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionProperty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.FunctionPropertyContext = FunctionPropertyContext;

class PropertyNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_propertyName;
  }

  identifierName() {
    return this.getTypedRuleContext(IdentifierNameContext, 0);
  }

  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }

  numericLiteral() {
    return this.getTypedRuleContext(NumericLiteralContext, 0);
  }

  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPropertyName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPropertyName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPropertyName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ArgumentsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arguments;
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  argument = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ArgumentContext);
    } else {
      return this.getTypedRuleContext(ArgumentContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArguments(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArguments(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArguments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ArgumentContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_argument;
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  Ellipsis() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArgument(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArgument(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArgument(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExpressionSequenceContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_expressionSequence;
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterExpressionSequence(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitExpressionSequence(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitExpressionSequence(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SingleExpressionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_singleExpression;
  }

  copyFrom(ctx) {
    super.copyFrom(ctx);
  }

}

class TemplateStringExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  templateStringLiteral() {
    return this.getTypedRuleContext(TemplateStringLiteralContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTemplateStringExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTemplateStringExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTemplateStringExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

class TernaryExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  QuestionMark() {
    return this.getToken(JavaScriptParser.QuestionMark, 0);
  }

  Colon() {
    return this.getToken(JavaScriptParser.Colon, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTernaryExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTernaryExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTernaryExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.TernaryExpressionContext = TernaryExpressionContext;

class LogicalAndExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  And() {
    return this.getToken(JavaScriptParser.And, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLogicalAndExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLogicalAndExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLogicalAndExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class PowerExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  Power() {
    return this.getToken(JavaScriptParser.Power, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPowerExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPowerExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPowerExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.PowerExpressionContext = PowerExpressionContext;

class PreIncrementExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  PlusPlus() {
    return this.getToken(JavaScriptParser.PlusPlus, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPreIncrementExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPreIncrementExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPreIncrementExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

class ObjectLiteralExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  objectLiteral() {
    return this.getTypedRuleContext(ObjectLiteralContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterObjectLiteralExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitObjectLiteralExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitObjectLiteralExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

class MetaExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  New() {
    return this.getToken(JavaScriptParser.New, 0);
  }

  Dot() {
    return this.getToken(JavaScriptParser.Dot, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMetaExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMetaExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMetaExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.MetaExpressionContext = MetaExpressionContext;

class InExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  In() {
    return this.getToken(JavaScriptParser.In, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterInExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitInExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitInExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.InExpressionContext = InExpressionContext;

class LogicalOrExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  Or() {
    return this.getToken(JavaScriptParser.Or, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLogicalOrExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLogicalOrExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLogicalOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class NotExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Not() {
    return this.getToken(JavaScriptParser.Not, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterNotExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitNotExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitNotExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.NotExpressionContext = NotExpressionContext;

class PreDecreaseExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  MinusMinus() {
    return this.getToken(JavaScriptParser.MinusMinus, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPreDecreaseExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPreDecreaseExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPreDecreaseExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

class ArgumentsExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArgumentsExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArgumentsExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArgumentsExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

class AwaitExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Await() {
    return this.getToken(JavaScriptParser.Await, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAwaitExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAwaitExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAwaitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.AwaitExpressionContext = AwaitExpressionContext;

class ThisExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  This() {
    return this.getToken(JavaScriptParser.This, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterThisExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitThisExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitThisExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ThisExpressionContext = ThisExpressionContext;

class FunctionExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  anonymousFunction() {
    return this.getTypedRuleContext(AnonymousFunctionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.FunctionExpressionContext = FunctionExpressionContext;

class UnaryMinusExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Minus() {
    return this.getToken(JavaScriptParser.Minus, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterUnaryMinusExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitUnaryMinusExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitUnaryMinusExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

class AssignmentExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  Assign() {
    return this.getToken(JavaScriptParser.Assign, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignmentExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignmentExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignmentExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;

class PostDecreaseExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  MinusMinus() {
    return this.getToken(JavaScriptParser.MinusMinus, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPostDecreaseExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPostDecreaseExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPostDecreaseExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

class TypeofExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Typeof() {
    return this.getToken(JavaScriptParser.Typeof, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTypeofExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTypeofExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTypeofExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.TypeofExpressionContext = TypeofExpressionContext;

class InstanceofExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  Instanceof() {
    return this.getToken(JavaScriptParser.Instanceof, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterInstanceofExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitInstanceofExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitInstanceofExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;

class UnaryPlusExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Plus() {
    return this.getToken(JavaScriptParser.Plus, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterUnaryPlusExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitUnaryPlusExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitUnaryPlusExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

class DeleteExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Delete() {
    return this.getToken(JavaScriptParser.Delete, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterDeleteExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitDeleteExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitDeleteExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.DeleteExpressionContext = DeleteExpressionContext;

class ImportExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Import() {
    return this.getToken(JavaScriptParser.Import, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterImportExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitImportExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitImportExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ImportExpressionContext = ImportExpressionContext;

class EqualityExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  Equals_() {
    return this.getToken(JavaScriptParser.Equals_, 0);
  }

  NotEquals() {
    return this.getToken(JavaScriptParser.NotEquals, 0);
  }

  IdentityEquals() {
    return this.getToken(JavaScriptParser.IdentityEquals, 0);
  }

  IdentityNotEquals() {
    return this.getToken(JavaScriptParser.IdentityNotEquals, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterEqualityExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitEqualityExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitEqualityExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.EqualityExpressionContext = EqualityExpressionContext;

class BitXOrExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  BitXOr() {
    return this.getToken(JavaScriptParser.BitXOr, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitXOrExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitXOrExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitXOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;

class SuperExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Super() {
    return this.getToken(JavaScriptParser.Super, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSuperExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSuperExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSuperExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.SuperExpressionContext = SuperExpressionContext;

class MultiplicativeExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }

  Divide() {
    return this.getToken(JavaScriptParser.Divide, 0);
  }

  Modulus() {
    return this.getToken(JavaScriptParser.Modulus, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMultiplicativeExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMultiplicativeExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMultiplicativeExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class BitShiftExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  LeftShiftArithmetic() {
    return this.getToken(JavaScriptParser.LeftShiftArithmetic, 0);
  }

  RightShiftArithmetic() {
    return this.getToken(JavaScriptParser.RightShiftArithmetic, 0);
  }

  RightShiftLogical() {
    return this.getToken(JavaScriptParser.RightShiftLogical, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitShiftExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitShiftExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitShiftExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;

class ParenthesizedExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterParenthesizedExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitParenthesizedExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitParenthesizedExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class AdditiveExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  Plus() {
    return this.getToken(JavaScriptParser.Plus, 0);
  }

  Minus() {
    return this.getToken(JavaScriptParser.Minus, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAdditiveExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAdditiveExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAdditiveExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

class RelationalExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  LessThan() {
    return this.getToken(JavaScriptParser.LessThan, 0);
  }

  MoreThan() {
    return this.getToken(JavaScriptParser.MoreThan, 0);
  }

  LessThanEquals() {
    return this.getToken(JavaScriptParser.LessThanEquals, 0);
  }

  GreaterThanEquals() {
    return this.getToken(JavaScriptParser.GreaterThanEquals, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterRelationalExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitRelationalExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitRelationalExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.RelationalExpressionContext = RelationalExpressionContext;

class PostIncrementExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  PlusPlus() {
    return this.getToken(JavaScriptParser.PlusPlus, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterPostIncrementExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitPostIncrementExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitPostIncrementExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

class YieldExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  yieldStatement() {
    return this.getTypedRuleContext(YieldStatementContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterYieldExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitYieldExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitYieldExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.YieldExpressionContext = YieldExpressionContext;

class BitNotExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  BitNot() {
    return this.getToken(JavaScriptParser.BitNot, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitNotExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitNotExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitNotExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.BitNotExpressionContext = BitNotExpressionContext;

class NewExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  New() {
    return this.getToken(JavaScriptParser.New, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterNewExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitNewExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitNewExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.NewExpressionContext = NewExpressionContext;

class LiteralExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  literal() {
    return this.getTypedRuleContext(LiteralContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLiteralExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLiteralExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLiteralExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.LiteralExpressionContext = LiteralExpressionContext;

class ArrayLiteralExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  arrayLiteral() {
    return this.getTypedRuleContext(ArrayLiteralContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrayLiteralExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrayLiteralExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrayLiteralExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

class MemberDotExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  Dot() {
    return this.getToken(JavaScriptParser.Dot, 0);
  }

  identifierName() {
    return this.getTypedRuleContext(IdentifierNameContext, 0);
  }

  QuestionMark() {
    return this.getToken(JavaScriptParser.QuestionMark, 0);
  }

  Hashtag() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMemberDotExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMemberDotExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMemberDotExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;

class ClassExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Class() {
    return this.getToken(JavaScriptParser.Class, 0);
  }

  classTail() {
    return this.getTypedRuleContext(ClassTailContext, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterClassExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitClassExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitClassExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ClassExpressionContext = ClassExpressionContext;

class MemberIndexExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  OpenBracket() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
  }

  expressionSequence() {
    return this.getTypedRuleContext(ExpressionSequenceContext, 0);
  }

  CloseBracket() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterMemberIndexExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitMemberIndexExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitMemberIndexExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

class IdentifierExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIdentifierExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIdentifierExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIdentifierExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;

class BitAndExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  BitAnd() {
    return this.getToken(JavaScriptParser.BitAnd, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitAndExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitAndExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitAndExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.BitAndExpressionContext = BitAndExpressionContext;

class BitOrExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  BitOr() {
    return this.getToken(JavaScriptParser.BitOr, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBitOrExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBitOrExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBitOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.BitOrExpressionContext = BitOrExpressionContext;

class AssignmentOperatorExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  assignmentOperator() {
    return this.getTypedRuleContext(AssignmentOperatorContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignmentOperatorExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignmentOperatorExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignmentOperatorExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

class VoidExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Void() {
    return this.getToken(JavaScriptParser.Void, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterVoidExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitVoidExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitVoidExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.VoidExpressionContext = VoidExpressionContext;

class CoalesceExpressionContext extends SingleExpressionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  singleExpression = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
      return this.getTypedRuleContext(SingleExpressionContext, i);
    }
  };

  NullCoalesce() {
    return this.getToken(JavaScriptParser.NullCoalesce, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterCoalesceExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitCoalesceExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitCoalesceExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.CoalesceExpressionContext = CoalesceExpressionContext;

class AssignableContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_assignable;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  arrayLiteral() {
    return this.getTypedRuleContext(ArrayLiteralContext, 0);
  }

  objectLiteral() {
    return this.getTypedRuleContext(ObjectLiteralContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignable(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignable(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ObjectLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_objectLiteral;
  }

  OpenBrace() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
  }

  CloseBrace() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
  }

  propertyAssignment = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(PropertyAssignmentContext);
    } else {
      return this.getTypedRuleContext(PropertyAssignmentContext, i);
    }
  };
  Comma = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.Comma);
    } else {
      return this.getToken(JavaScriptParser.Comma, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterObjectLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitObjectLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitObjectLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class AnonymousFunctionContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_anonymousFunction;
  }

  copyFrom(ctx) {
    super.copyFrom(ctx);
  }

}

class AnonymousFunctionDeclContext extends AnonymousFunctionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  Function_() {
    return this.getToken(JavaScriptParser.Function_, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }

  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }

  Multiply() {
    return this.getToken(JavaScriptParser.Multiply, 0);
  }

  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAnonymousFunctionDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAnonymousFunctionDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAnonymousFunctionDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.AnonymousFunctionDeclContext = AnonymousFunctionDeclContext;

class ArrowFunctionContext extends AnonymousFunctionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  arrowFunctionParameters() {
    return this.getTypedRuleContext(ArrowFunctionParametersContext, 0);
  }

  ARROW() {
    return this.getToken(JavaScriptParser.ARROW, 0);
  }

  arrowFunctionBody() {
    return this.getTypedRuleContext(ArrowFunctionBodyContext, 0);
  }

  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrowFunction(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrowFunction(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrowFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ArrowFunctionContext = ArrowFunctionContext;

class FunctionDeclContext extends AnonymousFunctionContext {
  constructor(parser, ctx) {
    super(parser);
    super.copyFrom(ctx);
  }

  functionDeclaration() {
    return this.getTypedRuleContext(FunctionDeclarationContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterFunctionDecl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitFunctionDecl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitFunctionDecl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.FunctionDeclContext = FunctionDeclContext;

class ArrowFunctionParametersContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrowFunctionParameters;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  OpenParen() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
  }

  CloseParen() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
  }

  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrowFunctionParameters(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrowFunctionParameters(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrowFunctionParameters(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ArrowFunctionBodyContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrowFunctionBody;
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterArrowFunctionBody(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitArrowFunctionBody(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitArrowFunctionBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class AssignmentOperatorContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_assignmentOperator;
  }

  MultiplyAssign() {
    return this.getToken(JavaScriptParser.MultiplyAssign, 0);
  }

  DivideAssign() {
    return this.getToken(JavaScriptParser.DivideAssign, 0);
  }

  ModulusAssign() {
    return this.getToken(JavaScriptParser.ModulusAssign, 0);
  }

  PlusAssign() {
    return this.getToken(JavaScriptParser.PlusAssign, 0);
  }

  MinusAssign() {
    return this.getToken(JavaScriptParser.MinusAssign, 0);
  }

  LeftShiftArithmeticAssign() {
    return this.getToken(JavaScriptParser.LeftShiftArithmeticAssign, 0);
  }

  RightShiftArithmeticAssign() {
    return this.getToken(JavaScriptParser.RightShiftArithmeticAssign, 0);
  }

  RightShiftLogicalAssign() {
    return this.getToken(JavaScriptParser.RightShiftLogicalAssign, 0);
  }

  BitAndAssign() {
    return this.getToken(JavaScriptParser.BitAndAssign, 0);
  }

  BitXorAssign() {
    return this.getToken(JavaScriptParser.BitXorAssign, 0);
  }

  BitOrAssign() {
    return this.getToken(JavaScriptParser.BitOrAssign, 0);
  }

  PowerAssign() {
    return this.getToken(JavaScriptParser.PowerAssign, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterAssignmentOperator(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitAssignmentOperator(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitAssignmentOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class LiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_literal;
  }

  NullLiteral() {
    return this.getToken(JavaScriptParser.NullLiteral, 0);
  }

  BooleanLiteral() {
    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
  }

  StringLiteral() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
  }

  templateStringLiteral() {
    return this.getTypedRuleContext(TemplateStringLiteralContext, 0);
  }

  RegularExpressionLiteral() {
    return this.getToken(JavaScriptParser.RegularExpressionLiteral, 0);
  }

  numericLiteral() {
    return this.getTypedRuleContext(NumericLiteralContext, 0);
  }

  bigintLiteral() {
    return this.getTypedRuleContext(BigintLiteralContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TemplateStringLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_templateStringLiteral;
  }

  BackTick = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(JavaScriptParser.BackTick);
    } else {
      return this.getToken(JavaScriptParser.BackTick, i);
    }
  };
  templateStringAtom = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TemplateStringAtomContext);
    } else {
      return this.getTypedRuleContext(TemplateStringAtomContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTemplateStringLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTemplateStringLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTemplateStringLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TemplateStringAtomContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_templateStringAtom;
  }

  TemplateStringAtom() {
    return this.getToken(JavaScriptParser.TemplateStringAtom, 0);
  }

  TemplateStringStartExpression() {
    return this.getToken(JavaScriptParser.TemplateStringStartExpression, 0);
  }

  singleExpression() {
    return this.getTypedRuleContext(SingleExpressionContext, 0);
  }

  TemplateCloseBrace() {
    return this.getToken(JavaScriptParser.TemplateCloseBrace, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterTemplateStringAtom(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitTemplateStringAtom(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitTemplateStringAtom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class NumericLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_numericLiteral;
  }

  DecimalLiteral() {
    return this.getToken(JavaScriptParser.DecimalLiteral, 0);
  }

  HexIntegerLiteral() {
    return this.getToken(JavaScriptParser.HexIntegerLiteral, 0);
  }

  OctalIntegerLiteral() {
    return this.getToken(JavaScriptParser.OctalIntegerLiteral, 0);
  }

  OctalIntegerLiteral2() {
    return this.getToken(JavaScriptParser.OctalIntegerLiteral2, 0);
  }

  BinaryIntegerLiteral() {
    return this.getToken(JavaScriptParser.BinaryIntegerLiteral, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterNumericLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitNumericLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitNumericLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class BigintLiteralContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_bigintLiteral;
  }

  BigDecimalIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigDecimalIntegerLiteral, 0);
  }

  BigHexIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigHexIntegerLiteral, 0);
  }

  BigOctalIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigOctalIntegerLiteral, 0);
  }

  BigBinaryIntegerLiteral() {
    return this.getToken(JavaScriptParser.BigBinaryIntegerLiteral, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterBigintLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitBigintLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitBigintLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class GetterContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_getter;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterGetter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitGetter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitGetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SetterContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_setter;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  propertyName() {
    return this.getTypedRuleContext(PropertyNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterSetter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitSetter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitSetter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class IdentifierNameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_identifierName;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  reservedWord() {
    return this.getTypedRuleContext(ReservedWordContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIdentifierName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIdentifierName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIdentifierName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class IdentifierContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_identifier;
  }

  Identifier() {
    return this.getToken(JavaScriptParser.Identifier, 0);
  }

  NonStrictLet() {
    return this.getToken(JavaScriptParser.NonStrictLet, 0);
  }

  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterIdentifier(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitIdentifier(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ReservedWordContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_reservedWord;
  }

  keyword() {
    return this.getTypedRuleContext(KeywordContext, 0);
  }

  NullLiteral() {
    return this.getToken(JavaScriptParser.NullLiteral, 0);
  }

  BooleanLiteral() {
    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterReservedWord(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitReservedWord(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitReservedWord(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class KeywordContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_keyword;
  }

  Break() {
    return this.getToken(JavaScriptParser.Break, 0);
  }

  Do() {
    return this.getToken(JavaScriptParser.Do, 0);
  }

  Instanceof() {
    return this.getToken(JavaScriptParser.Instanceof, 0);
  }

  Typeof() {
    return this.getToken(JavaScriptParser.Typeof, 0);
  }

  Case() {
    return this.getToken(JavaScriptParser.Case, 0);
  }

  Else() {
    return this.getToken(JavaScriptParser.Else, 0);
  }

  New() {
    return this.getToken(JavaScriptParser.New, 0);
  }

  Var() {
    return this.getToken(JavaScriptParser.Var, 0);
  }

  Catch() {
    return this.getToken(JavaScriptParser.Catch, 0);
  }

  Finally() {
    return this.getToken(JavaScriptParser.Finally, 0);
  }

  Return() {
    return this.getToken(JavaScriptParser.Return, 0);
  }

  Void() {
    return this.getToken(JavaScriptParser.Void, 0);
  }

  Continue() {
    return this.getToken(JavaScriptParser.Continue, 0);
  }

  For() {
    return this.getToken(JavaScriptParser.For, 0);
  }

  Switch() {
    return this.getToken(JavaScriptParser.Switch, 0);
  }

  While() {
    return this.getToken(JavaScriptParser.While, 0);
  }

  Debugger() {
    return this.getToken(JavaScriptParser.Debugger, 0);
  }

  Function_() {
    return this.getToken(JavaScriptParser.Function_, 0);
  }

  This() {
    return this.getToken(JavaScriptParser.This, 0);
  }

  With() {
    return this.getToken(JavaScriptParser.With, 0);
  }

  Default() {
    return this.getToken(JavaScriptParser.Default, 0);
  }

  If() {
    return this.getToken(JavaScriptParser.If, 0);
  }

  Throw() {
    return this.getToken(JavaScriptParser.Throw, 0);
  }

  Delete() {
    return this.getToken(JavaScriptParser.Delete, 0);
  }

  In() {
    return this.getToken(JavaScriptParser.In, 0);
  }

  Try() {
    return this.getToken(JavaScriptParser.Try, 0);
  }

  Class() {
    return this.getToken(JavaScriptParser.Class, 0);
  }

  Enum() {
    return this.getToken(JavaScriptParser.Enum, 0);
  }

  Extends() {
    return this.getToken(JavaScriptParser.Extends, 0);
  }

  Super() {
    return this.getToken(JavaScriptParser.Super, 0);
  }

  Const() {
    return this.getToken(JavaScriptParser.Const, 0);
  }

  Export() {
    return this.getToken(JavaScriptParser.Export, 0);
  }

  Import() {
    return this.getToken(JavaScriptParser.Import, 0);
  }

  Implements() {
    return this.getToken(JavaScriptParser.Implements, 0);
  }

  let_() {
    return this.getTypedRuleContext(Let_Context, 0);
  }

  Private() {
    return this.getToken(JavaScriptParser.Private, 0);
  }

  Public() {
    return this.getToken(JavaScriptParser.Public, 0);
  }

  Interface() {
    return this.getToken(JavaScriptParser.Interface, 0);
  }

  Package() {
    return this.getToken(JavaScriptParser.Package, 0);
  }

  Protected() {
    return this.getToken(JavaScriptParser.Protected, 0);
  }

  Static() {
    return this.getToken(JavaScriptParser.Static, 0);
  }

  Yield() {
    return this.getToken(JavaScriptParser.Yield, 0);
  }

  Async() {
    return this.getToken(JavaScriptParser.Async, 0);
  }

  Await() {
    return this.getToken(JavaScriptParser.Await, 0);
  }

  From() {
    return this.getToken(JavaScriptParser.From, 0);
  }

  As() {
    return this.getToken(JavaScriptParser.As, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterKeyword(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitKeyword(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitKeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Let_Context extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_let_;
  }

  NonStrictLet() {
    return this.getToken(JavaScriptParser.NonStrictLet, 0);
  }

  StrictLet() {
    return this.getToken(JavaScriptParser.StrictLet, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterLet_(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitLet_(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitLet_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class EosContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_eos;
  }

  SemiColon() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
  }

  EOF() {
    return this.getToken(JavaScriptParser.EOF, 0);
  }

  enterRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.enterEos(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _JavaScriptParserListener.default) {
      listener.exitEos(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _JavaScriptParserVisitor.default) {
      return visitor.visitEos(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

JavaScriptParser.ProgramContext = ProgramContext;
JavaScriptParser.SourceElementContext = SourceElementContext;
JavaScriptParser.StatementContext = StatementContext;
JavaScriptParser.BlockContext = BlockContext;
JavaScriptParser.StatementListContext = StatementListContext;
JavaScriptParser.ImportStatementContext = ImportStatementContext;
JavaScriptParser.ImportFromBlockContext = ImportFromBlockContext;
JavaScriptParser.ModuleItemsContext = ModuleItemsContext;
JavaScriptParser.ImportDefaultContext = ImportDefaultContext;
JavaScriptParser.ImportNamespaceContext = ImportNamespaceContext;
JavaScriptParser.ImportFromContext = ImportFromContext;
JavaScriptParser.AliasNameContext = AliasNameContext;
JavaScriptParser.ExportStatementContext = ExportStatementContext;
JavaScriptParser.ExportFromBlockContext = ExportFromBlockContext;
JavaScriptParser.DeclarationContext = DeclarationContext;
JavaScriptParser.VariableStatementContext = VariableStatementContext;
JavaScriptParser.VariableDeclarationListContext = VariableDeclarationListContext;
JavaScriptParser.VariableDeclarationContext = VariableDeclarationContext;
JavaScriptParser.EmptyStatement_Context = EmptyStatement_Context;
JavaScriptParser.ExpressionStatementContext = ExpressionStatementContext;
JavaScriptParser.IfStatementContext = IfStatementContext;
JavaScriptParser.IterationStatementContext = IterationStatementContext;
JavaScriptParser.VarModifierContext = VarModifierContext;
JavaScriptParser.ContinueStatementContext = ContinueStatementContext;
JavaScriptParser.BreakStatementContext = BreakStatementContext;
JavaScriptParser.ReturnStatementContext = ReturnStatementContext;
JavaScriptParser.YieldStatementContext = YieldStatementContext;
JavaScriptParser.WithStatementContext = WithStatementContext;
JavaScriptParser.SwitchStatementContext = SwitchStatementContext;
JavaScriptParser.CaseBlockContext = CaseBlockContext;
JavaScriptParser.CaseClausesContext = CaseClausesContext;
JavaScriptParser.CaseClauseContext = CaseClauseContext;
JavaScriptParser.DefaultClauseContext = DefaultClauseContext;
JavaScriptParser.LabelledStatementContext = LabelledStatementContext;
JavaScriptParser.ThrowStatementContext = ThrowStatementContext;
JavaScriptParser.TryStatementContext = TryStatementContext;
JavaScriptParser.CatchProductionContext = CatchProductionContext;
JavaScriptParser.FinallyProductionContext = FinallyProductionContext;
JavaScriptParser.DebuggerStatementContext = DebuggerStatementContext;
JavaScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;
JavaScriptParser.ClassDeclarationContext = ClassDeclarationContext;
JavaScriptParser.ClassTailContext = ClassTailContext;
JavaScriptParser.ClassElementContext = ClassElementContext;
JavaScriptParser.MethodDefinitionContext = MethodDefinitionContext;
JavaScriptParser.FormalParameterListContext = FormalParameterListContext;
JavaScriptParser.FormalParameterArgContext = FormalParameterArgContext;
JavaScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext;
JavaScriptParser.FunctionBodyContext = FunctionBodyContext;
JavaScriptParser.SourceElementsContext = SourceElementsContext;
JavaScriptParser.ArrayLiteralContext = ArrayLiteralContext;
JavaScriptParser.ElementListContext = ElementListContext;
JavaScriptParser.ArrayElementContext = ArrayElementContext;
JavaScriptParser.PropertyAssignmentContext = PropertyAssignmentContext;
JavaScriptParser.PropertyNameContext = PropertyNameContext;
JavaScriptParser.ArgumentsContext = ArgumentsContext;
JavaScriptParser.ArgumentContext = ArgumentContext;
JavaScriptParser.ExpressionSequenceContext = ExpressionSequenceContext;
JavaScriptParser.SingleExpressionContext = SingleExpressionContext;
JavaScriptParser.AssignableContext = AssignableContext;
JavaScriptParser.ObjectLiteralContext = ObjectLiteralContext;
JavaScriptParser.AnonymousFunctionContext = AnonymousFunctionContext;
JavaScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext;
JavaScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext;
JavaScriptParser.AssignmentOperatorContext = AssignmentOperatorContext;
JavaScriptParser.LiteralContext = LiteralContext;
JavaScriptParser.TemplateStringLiteralContext = TemplateStringLiteralContext;
JavaScriptParser.TemplateStringAtomContext = TemplateStringAtomContext;
JavaScriptParser.NumericLiteralContext = NumericLiteralContext;
JavaScriptParser.BigintLiteralContext = BigintLiteralContext;
JavaScriptParser.GetterContext = GetterContext;
JavaScriptParser.SetterContext = SetterContext;
JavaScriptParser.IdentifierNameContext = IdentifierNameContext;
JavaScriptParser.IdentifierContext = IdentifierContext;
JavaScriptParser.ReservedWordContext = ReservedWordContext;
JavaScriptParser.KeywordContext = KeywordContext;
JavaScriptParser.Let_Context = Let_Context;
JavaScriptParser.EosContext = EosContext;

},{"./JavaScriptParserBase.js":146,"./JavaScriptParserListener.js":147,"./JavaScriptParserVisitor.js":148,"antlr4":42}],146:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _JavaScriptParser = _interopRequireDefault(require("./JavaScriptParser.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class JavaScriptParserBase extends _antlr.default.Parser {
  constructor(input) {
    super(input);
  }

  p(str) {
    return this.prev(str);
  }

  prev(str) {
    return this._input.LT(-1).text === str;
  } // Short form for next(String str)


  n(str) {
    return this.next(str);
  } // Whether the next token value equals to @param str


  next(str) {
    return this._input.LT(1).text === str;
  }

  notLineTerminator() {
    return !this.here(_JavaScriptParser.default.LineTerminator);
  }

  notOpenBraceAndNotFunction() {
    const nextTokenType = this._input.LT(1).type;

    return nextTokenType !== _JavaScriptParser.default.OpenBrace && nextTokenType !== _JavaScriptParser.default.Function_;
  }

  closeBrace() {
    return this._input.LT(1).type === _JavaScriptParser.default.CloseBrace;
  }

  here(type) {
    const possibleIndexEosToken = this.getCurrentToken().tokenIndex - 1;

    const ahead = this._input.get(possibleIndexEosToken);

    return ahead.channel === _antlr.default.Lexer.HIDDEN && ahead.type === type;
  }

  lineTerminatorAhead() {
    let possibleIndexEosToken = this.getCurrentToken().tokenIndex - 1;

    let ahead = this._input.get(possibleIndexEosToken);

    if (ahead.channel !== _antlr.default.Lexer.HIDDEN) {
      return false;
    }

    if (ahead.type === _JavaScriptParser.default.LineTerminator) {
      return true;
    }

    if (ahead.type === _JavaScriptParser.default.WhiteSpaces) {
      possibleIndexEosToken = this.getCurrentToken().tokenIndex - 2;
      ahead = this._input.get(possibleIndexEosToken);
    }

    const text = ahead.text;
    const type = ahead.type;
    return type === _JavaScriptParser.default.MultiLineComment && (text.includes("\r") || text.includes("\n")) || type === _JavaScriptParser.default.LineTerminator;
  }

}

exports.default = JavaScriptParserBase;

},{"./JavaScriptParser.js":145,"antlr4":42}],147:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/JavaScriptParser.g4 by ANTLR 4.9.2
// jshint ignore: start
// This class defines a complete listener for a parse tree produced by JavaScriptParser.
class JavaScriptParserListener extends _antlr.default.tree.ParseTreeListener {
  // Enter a parse tree produced by JavaScriptParser#program.
  enterProgram(ctx) {} // Exit a parse tree produced by JavaScriptParser#program.


  exitProgram(ctx) {} // Enter a parse tree produced by JavaScriptParser#sourceElement.


  enterSourceElement(ctx) {} // Exit a parse tree produced by JavaScriptParser#sourceElement.


  exitSourceElement(ctx) {} // Enter a parse tree produced by JavaScriptParser#statement.


  enterStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#statement.


  exitStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#block.


  enterBlock(ctx) {} // Exit a parse tree produced by JavaScriptParser#block.


  exitBlock(ctx) {} // Enter a parse tree produced by JavaScriptParser#statementList.


  enterStatementList(ctx) {} // Exit a parse tree produced by JavaScriptParser#statementList.


  exitStatementList(ctx) {} // Enter a parse tree produced by JavaScriptParser#importStatement.


  enterImportStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#importStatement.


  exitImportStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#importFromBlock.


  enterImportFromBlock(ctx) {} // Exit a parse tree produced by JavaScriptParser#importFromBlock.


  exitImportFromBlock(ctx) {} // Enter a parse tree produced by JavaScriptParser#moduleItems.


  enterModuleItems(ctx) {} // Exit a parse tree produced by JavaScriptParser#moduleItems.


  exitModuleItems(ctx) {} // Enter a parse tree produced by JavaScriptParser#importDefault.


  enterImportDefault(ctx) {} // Exit a parse tree produced by JavaScriptParser#importDefault.


  exitImportDefault(ctx) {} // Enter a parse tree produced by JavaScriptParser#importNamespace.


  enterImportNamespace(ctx) {} // Exit a parse tree produced by JavaScriptParser#importNamespace.


  exitImportNamespace(ctx) {} // Enter a parse tree produced by JavaScriptParser#importFrom.


  enterImportFrom(ctx) {} // Exit a parse tree produced by JavaScriptParser#importFrom.


  exitImportFrom(ctx) {} // Enter a parse tree produced by JavaScriptParser#aliasName.


  enterAliasName(ctx) {} // Exit a parse tree produced by JavaScriptParser#aliasName.


  exitAliasName(ctx) {} // Enter a parse tree produced by JavaScriptParser#ExportDeclaration.


  enterExportDeclaration(ctx) {} // Exit a parse tree produced by JavaScriptParser#ExportDeclaration.


  exitExportDeclaration(ctx) {} // Enter a parse tree produced by JavaScriptParser#ExportDefaultDeclaration.


  enterExportDefaultDeclaration(ctx) {} // Exit a parse tree produced by JavaScriptParser#ExportDefaultDeclaration.


  exitExportDefaultDeclaration(ctx) {} // Enter a parse tree produced by JavaScriptParser#exportFromBlock.


  enterExportFromBlock(ctx) {} // Exit a parse tree produced by JavaScriptParser#exportFromBlock.


  exitExportFromBlock(ctx) {} // Enter a parse tree produced by JavaScriptParser#declaration.


  enterDeclaration(ctx) {} // Exit a parse tree produced by JavaScriptParser#declaration.


  exitDeclaration(ctx) {} // Enter a parse tree produced by JavaScriptParser#variableStatement.


  enterVariableStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#variableStatement.


  exitVariableStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#variableDeclarationList.


  enterVariableDeclarationList(ctx) {} // Exit a parse tree produced by JavaScriptParser#variableDeclarationList.


  exitVariableDeclarationList(ctx) {} // Enter a parse tree produced by JavaScriptParser#variableDeclaration.


  enterVariableDeclaration(ctx) {} // Exit a parse tree produced by JavaScriptParser#variableDeclaration.


  exitVariableDeclaration(ctx) {} // Enter a parse tree produced by JavaScriptParser#emptyStatement_.


  enterEmptyStatement_(ctx) {} // Exit a parse tree produced by JavaScriptParser#emptyStatement_.


  exitEmptyStatement_(ctx) {} // Enter a parse tree produced by JavaScriptParser#expressionStatement.


  enterExpressionStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#expressionStatement.


  exitExpressionStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#ifStatement.


  enterIfStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#ifStatement.


  exitIfStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#DoStatement.


  enterDoStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#DoStatement.


  exitDoStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#WhileStatement.


  enterWhileStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#WhileStatement.


  exitWhileStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#ForStatement.


  enterForStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#ForStatement.


  exitForStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#ForInStatement.


  enterForInStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#ForInStatement.


  exitForInStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#ForOfStatement.


  enterForOfStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#ForOfStatement.


  exitForOfStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#varModifier.


  enterVarModifier(ctx) {} // Exit a parse tree produced by JavaScriptParser#varModifier.


  exitVarModifier(ctx) {} // Enter a parse tree produced by JavaScriptParser#continueStatement.


  enterContinueStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#continueStatement.


  exitContinueStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#breakStatement.


  enterBreakStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#breakStatement.


  exitBreakStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#returnStatement.


  enterReturnStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#returnStatement.


  exitReturnStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#yieldStatement.


  enterYieldStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#yieldStatement.


  exitYieldStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#withStatement.


  enterWithStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#withStatement.


  exitWithStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#switchStatement.


  enterSwitchStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#switchStatement.


  exitSwitchStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#caseBlock.


  enterCaseBlock(ctx) {} // Exit a parse tree produced by JavaScriptParser#caseBlock.


  exitCaseBlock(ctx) {} // Enter a parse tree produced by JavaScriptParser#caseClauses.


  enterCaseClauses(ctx) {} // Exit a parse tree produced by JavaScriptParser#caseClauses.


  exitCaseClauses(ctx) {} // Enter a parse tree produced by JavaScriptParser#caseClause.


  enterCaseClause(ctx) {} // Exit a parse tree produced by JavaScriptParser#caseClause.


  exitCaseClause(ctx) {} // Enter a parse tree produced by JavaScriptParser#defaultClause.


  enterDefaultClause(ctx) {} // Exit a parse tree produced by JavaScriptParser#defaultClause.


  exitDefaultClause(ctx) {} // Enter a parse tree produced by JavaScriptParser#labelledStatement.


  enterLabelledStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#labelledStatement.


  exitLabelledStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#throwStatement.


  enterThrowStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#throwStatement.


  exitThrowStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#tryStatement.


  enterTryStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#tryStatement.


  exitTryStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#catchProduction.


  enterCatchProduction(ctx) {} // Exit a parse tree produced by JavaScriptParser#catchProduction.


  exitCatchProduction(ctx) {} // Enter a parse tree produced by JavaScriptParser#finallyProduction.


  enterFinallyProduction(ctx) {} // Exit a parse tree produced by JavaScriptParser#finallyProduction.


  exitFinallyProduction(ctx) {} // Enter a parse tree produced by JavaScriptParser#debuggerStatement.


  enterDebuggerStatement(ctx) {} // Exit a parse tree produced by JavaScriptParser#debuggerStatement.


  exitDebuggerStatement(ctx) {} // Enter a parse tree produced by JavaScriptParser#functionDeclaration.


  enterFunctionDeclaration(ctx) {} // Exit a parse tree produced by JavaScriptParser#functionDeclaration.


  exitFunctionDeclaration(ctx) {} // Enter a parse tree produced by JavaScriptParser#classDeclaration.


  enterClassDeclaration(ctx) {} // Exit a parse tree produced by JavaScriptParser#classDeclaration.


  exitClassDeclaration(ctx) {} // Enter a parse tree produced by JavaScriptParser#classTail.


  enterClassTail(ctx) {} // Exit a parse tree produced by JavaScriptParser#classTail.


  exitClassTail(ctx) {} // Enter a parse tree produced by JavaScriptParser#classElement.


  enterClassElement(ctx) {} // Exit a parse tree produced by JavaScriptParser#classElement.


  exitClassElement(ctx) {} // Enter a parse tree produced by JavaScriptParser#methodDefinition.


  enterMethodDefinition(ctx) {} // Exit a parse tree produced by JavaScriptParser#methodDefinition.


  exitMethodDefinition(ctx) {} // Enter a parse tree produced by JavaScriptParser#formalParameterList.


  enterFormalParameterList(ctx) {} // Exit a parse tree produced by JavaScriptParser#formalParameterList.


  exitFormalParameterList(ctx) {} // Enter a parse tree produced by JavaScriptParser#formalParameterArg.


  enterFormalParameterArg(ctx) {} // Exit a parse tree produced by JavaScriptParser#formalParameterArg.


  exitFormalParameterArg(ctx) {} // Enter a parse tree produced by JavaScriptParser#lastFormalParameterArg.


  enterLastFormalParameterArg(ctx) {} // Exit a parse tree produced by JavaScriptParser#lastFormalParameterArg.


  exitLastFormalParameterArg(ctx) {} // Enter a parse tree produced by JavaScriptParser#functionBody.


  enterFunctionBody(ctx) {} // Exit a parse tree produced by JavaScriptParser#functionBody.


  exitFunctionBody(ctx) {} // Enter a parse tree produced by JavaScriptParser#sourceElements.


  enterSourceElements(ctx) {} // Exit a parse tree produced by JavaScriptParser#sourceElements.


  exitSourceElements(ctx) {} // Enter a parse tree produced by JavaScriptParser#arrayLiteral.


  enterArrayLiteral(ctx) {} // Exit a parse tree produced by JavaScriptParser#arrayLiteral.


  exitArrayLiteral(ctx) {} // Enter a parse tree produced by JavaScriptParser#elementList.


  enterElementList(ctx) {} // Exit a parse tree produced by JavaScriptParser#elementList.


  exitElementList(ctx) {} // Enter a parse tree produced by JavaScriptParser#arrayElement.


  enterArrayElement(ctx) {} // Exit a parse tree produced by JavaScriptParser#arrayElement.


  exitArrayElement(ctx) {} // Enter a parse tree produced by JavaScriptParser#PropertyExpressionAssignment.


  enterPropertyExpressionAssignment(ctx) {} // Exit a parse tree produced by JavaScriptParser#PropertyExpressionAssignment.


  exitPropertyExpressionAssignment(ctx) {} // Enter a parse tree produced by JavaScriptParser#ComputedPropertyExpressionAssignment.


  enterComputedPropertyExpressionAssignment(ctx) {} // Exit a parse tree produced by JavaScriptParser#ComputedPropertyExpressionAssignment.


  exitComputedPropertyExpressionAssignment(ctx) {} // Enter a parse tree produced by JavaScriptParser#FunctionProperty.


  enterFunctionProperty(ctx) {} // Exit a parse tree produced by JavaScriptParser#FunctionProperty.


  exitFunctionProperty(ctx) {} // Enter a parse tree produced by JavaScriptParser#PropertyGetter.


  enterPropertyGetter(ctx) {} // Exit a parse tree produced by JavaScriptParser#PropertyGetter.


  exitPropertyGetter(ctx) {} // Enter a parse tree produced by JavaScriptParser#PropertySetter.


  enterPropertySetter(ctx) {} // Exit a parse tree produced by JavaScriptParser#PropertySetter.


  exitPropertySetter(ctx) {} // Enter a parse tree produced by JavaScriptParser#PropertyShorthand.


  enterPropertyShorthand(ctx) {} // Exit a parse tree produced by JavaScriptParser#PropertyShorthand.


  exitPropertyShorthand(ctx) {} // Enter a parse tree produced by JavaScriptParser#propertyName.


  enterPropertyName(ctx) {} // Exit a parse tree produced by JavaScriptParser#propertyName.


  exitPropertyName(ctx) {} // Enter a parse tree produced by JavaScriptParser#arguments.


  enterArguments(ctx) {} // Exit a parse tree produced by JavaScriptParser#arguments.


  exitArguments(ctx) {} // Enter a parse tree produced by JavaScriptParser#argument.


  enterArgument(ctx) {} // Exit a parse tree produced by JavaScriptParser#argument.


  exitArgument(ctx) {} // Enter a parse tree produced by JavaScriptParser#expressionSequence.


  enterExpressionSequence(ctx) {} // Exit a parse tree produced by JavaScriptParser#expressionSequence.


  exitExpressionSequence(ctx) {} // Enter a parse tree produced by JavaScriptParser#TemplateStringExpression.


  enterTemplateStringExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#TemplateStringExpression.


  exitTemplateStringExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#TernaryExpression.


  enterTernaryExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#TernaryExpression.


  exitTernaryExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#LogicalAndExpression.


  enterLogicalAndExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#LogicalAndExpression.


  exitLogicalAndExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#PowerExpression.


  enterPowerExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#PowerExpression.


  exitPowerExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#PreIncrementExpression.


  enterPreIncrementExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#PreIncrementExpression.


  exitPreIncrementExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#ObjectLiteralExpression.


  enterObjectLiteralExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#ObjectLiteralExpression.


  exitObjectLiteralExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#MetaExpression.


  enterMetaExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#MetaExpression.


  exitMetaExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#InExpression.


  enterInExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#InExpression.


  exitInExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#LogicalOrExpression.


  enterLogicalOrExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#LogicalOrExpression.


  exitLogicalOrExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#NotExpression.


  enterNotExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#NotExpression.


  exitNotExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#PreDecreaseExpression.


  enterPreDecreaseExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#PreDecreaseExpression.


  exitPreDecreaseExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#ArgumentsExpression.


  enterArgumentsExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#ArgumentsExpression.


  exitArgumentsExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#AwaitExpression.


  enterAwaitExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#AwaitExpression.


  exitAwaitExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#ThisExpression.


  enterThisExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#ThisExpression.


  exitThisExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#FunctionExpression.


  enterFunctionExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#FunctionExpression.


  exitFunctionExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#UnaryMinusExpression.


  enterUnaryMinusExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#UnaryMinusExpression.


  exitUnaryMinusExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#AssignmentExpression.


  enterAssignmentExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#AssignmentExpression.


  exitAssignmentExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#PostDecreaseExpression.


  enterPostDecreaseExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#PostDecreaseExpression.


  exitPostDecreaseExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#TypeofExpression.


  enterTypeofExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#TypeofExpression.


  exitTypeofExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#InstanceofExpression.


  enterInstanceofExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#InstanceofExpression.


  exitInstanceofExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#UnaryPlusExpression.


  enterUnaryPlusExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#UnaryPlusExpression.


  exitUnaryPlusExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#DeleteExpression.


  enterDeleteExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#DeleteExpression.


  exitDeleteExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#ImportExpression.


  enterImportExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#ImportExpression.


  exitImportExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#EqualityExpression.


  enterEqualityExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#EqualityExpression.


  exitEqualityExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#BitXOrExpression.


  enterBitXOrExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#BitXOrExpression.


  exitBitXOrExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#SuperExpression.


  enterSuperExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#SuperExpression.


  exitSuperExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#MultiplicativeExpression.


  enterMultiplicativeExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#MultiplicativeExpression.


  exitMultiplicativeExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#BitShiftExpression.


  enterBitShiftExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#BitShiftExpression.


  exitBitShiftExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#ParenthesizedExpression.


  enterParenthesizedExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#ParenthesizedExpression.


  exitParenthesizedExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#AdditiveExpression.


  enterAdditiveExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#AdditiveExpression.


  exitAdditiveExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#RelationalExpression.


  enterRelationalExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#RelationalExpression.


  exitRelationalExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#PostIncrementExpression.


  enterPostIncrementExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#PostIncrementExpression.


  exitPostIncrementExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#YieldExpression.


  enterYieldExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#YieldExpression.


  exitYieldExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#BitNotExpression.


  enterBitNotExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#BitNotExpression.


  exitBitNotExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#NewExpression.


  enterNewExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#NewExpression.


  exitNewExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#LiteralExpression.


  enterLiteralExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#LiteralExpression.


  exitLiteralExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#ArrayLiteralExpression.


  enterArrayLiteralExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#ArrayLiteralExpression.


  exitArrayLiteralExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#MemberDotExpression.


  enterMemberDotExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#MemberDotExpression.


  exitMemberDotExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#ClassExpression.


  enterClassExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#ClassExpression.


  exitClassExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#MemberIndexExpression.


  enterMemberIndexExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#MemberIndexExpression.


  exitMemberIndexExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#IdentifierExpression.


  enterIdentifierExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#IdentifierExpression.


  exitIdentifierExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#BitAndExpression.


  enterBitAndExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#BitAndExpression.


  exitBitAndExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#BitOrExpression.


  enterBitOrExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#BitOrExpression.


  exitBitOrExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#AssignmentOperatorExpression.


  enterAssignmentOperatorExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#AssignmentOperatorExpression.


  exitAssignmentOperatorExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#VoidExpression.


  enterVoidExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#VoidExpression.


  exitVoidExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#CoalesceExpression.


  enterCoalesceExpression(ctx) {} // Exit a parse tree produced by JavaScriptParser#CoalesceExpression.


  exitCoalesceExpression(ctx) {} // Enter a parse tree produced by JavaScriptParser#assignable.


  enterAssignable(ctx) {} // Exit a parse tree produced by JavaScriptParser#assignable.


  exitAssignable(ctx) {} // Enter a parse tree produced by JavaScriptParser#objectLiteral.


  enterObjectLiteral(ctx) {} // Exit a parse tree produced by JavaScriptParser#objectLiteral.


  exitObjectLiteral(ctx) {} // Enter a parse tree produced by JavaScriptParser#FunctionDecl.


  enterFunctionDecl(ctx) {} // Exit a parse tree produced by JavaScriptParser#FunctionDecl.


  exitFunctionDecl(ctx) {} // Enter a parse tree produced by JavaScriptParser#AnonymousFunctionDecl.


  enterAnonymousFunctionDecl(ctx) {} // Exit a parse tree produced by JavaScriptParser#AnonymousFunctionDecl.


  exitAnonymousFunctionDecl(ctx) {} // Enter a parse tree produced by JavaScriptParser#ArrowFunction.


  enterArrowFunction(ctx) {} // Exit a parse tree produced by JavaScriptParser#ArrowFunction.


  exitArrowFunction(ctx) {} // Enter a parse tree produced by JavaScriptParser#arrowFunctionParameters.


  enterArrowFunctionParameters(ctx) {} // Exit a parse tree produced by JavaScriptParser#arrowFunctionParameters.


  exitArrowFunctionParameters(ctx) {} // Enter a parse tree produced by JavaScriptParser#arrowFunctionBody.


  enterArrowFunctionBody(ctx) {} // Exit a parse tree produced by JavaScriptParser#arrowFunctionBody.


  exitArrowFunctionBody(ctx) {} // Enter a parse tree produced by JavaScriptParser#assignmentOperator.


  enterAssignmentOperator(ctx) {} // Exit a parse tree produced by JavaScriptParser#assignmentOperator.


  exitAssignmentOperator(ctx) {} // Enter a parse tree produced by JavaScriptParser#literal.


  enterLiteral(ctx) {} // Exit a parse tree produced by JavaScriptParser#literal.


  exitLiteral(ctx) {} // Enter a parse tree produced by JavaScriptParser#templateStringLiteral.


  enterTemplateStringLiteral(ctx) {} // Exit a parse tree produced by JavaScriptParser#templateStringLiteral.


  exitTemplateStringLiteral(ctx) {} // Enter a parse tree produced by JavaScriptParser#templateStringAtom.


  enterTemplateStringAtom(ctx) {} // Exit a parse tree produced by JavaScriptParser#templateStringAtom.


  exitTemplateStringAtom(ctx) {} // Enter a parse tree produced by JavaScriptParser#numericLiteral.


  enterNumericLiteral(ctx) {} // Exit a parse tree produced by JavaScriptParser#numericLiteral.


  exitNumericLiteral(ctx) {} // Enter a parse tree produced by JavaScriptParser#bigintLiteral.


  enterBigintLiteral(ctx) {} // Exit a parse tree produced by JavaScriptParser#bigintLiteral.


  exitBigintLiteral(ctx) {} // Enter a parse tree produced by JavaScriptParser#getter.


  enterGetter(ctx) {} // Exit a parse tree produced by JavaScriptParser#getter.


  exitGetter(ctx) {} // Enter a parse tree produced by JavaScriptParser#setter.


  enterSetter(ctx) {} // Exit a parse tree produced by JavaScriptParser#setter.


  exitSetter(ctx) {} // Enter a parse tree produced by JavaScriptParser#identifierName.


  enterIdentifierName(ctx) {} // Exit a parse tree produced by JavaScriptParser#identifierName.


  exitIdentifierName(ctx) {} // Enter a parse tree produced by JavaScriptParser#identifier.


  enterIdentifier(ctx) {} // Exit a parse tree produced by JavaScriptParser#identifier.


  exitIdentifier(ctx) {} // Enter a parse tree produced by JavaScriptParser#reservedWord.


  enterReservedWord(ctx) {} // Exit a parse tree produced by JavaScriptParser#reservedWord.


  exitReservedWord(ctx) {} // Enter a parse tree produced by JavaScriptParser#keyword.


  enterKeyword(ctx) {} // Exit a parse tree produced by JavaScriptParser#keyword.


  exitKeyword(ctx) {} // Enter a parse tree produced by JavaScriptParser#let_.


  enterLet_(ctx) {} // Exit a parse tree produced by JavaScriptParser#let_.


  exitLet_(ctx) {} // Enter a parse tree produced by JavaScriptParser#eos.


  enterEos(ctx) {} // Exit a parse tree produced by JavaScriptParser#eos.


  exitEos(ctx) {}

}

exports.default = JavaScriptParserListener;

},{"antlr4":42}],148:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/JavaScriptParser.g4 by ANTLR 4.9.2
// jshint ignore: start
// This class defines a complete generic visitor for a parse tree produced by JavaScriptParser.
class JavaScriptParserVisitor extends _antlr.default.tree.ParseTreeVisitor {
  // Visit a parse tree produced by JavaScriptParser#program.
  visitProgram(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#sourceElement.


  visitSourceElement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#statement.


  visitStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#block.


  visitBlock(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#statementList.


  visitStatementList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#importStatement.


  visitImportStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#importFromBlock.


  visitImportFromBlock(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#moduleItems.


  visitModuleItems(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#importDefault.


  visitImportDefault(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#importNamespace.


  visitImportNamespace(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#importFrom.


  visitImportFrom(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#aliasName.


  visitAliasName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ExportDeclaration.


  visitExportDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ExportDefaultDeclaration.


  visitExportDefaultDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#exportFromBlock.


  visitExportFromBlock(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#declaration.


  visitDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#variableStatement.


  visitVariableStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#variableDeclarationList.


  visitVariableDeclarationList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#variableDeclaration.


  visitVariableDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#emptyStatement_.


  visitEmptyStatement_(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#expressionStatement.


  visitExpressionStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ifStatement.


  visitIfStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#DoStatement.


  visitDoStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#WhileStatement.


  visitWhileStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ForStatement.


  visitForStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ForInStatement.


  visitForInStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ForOfStatement.


  visitForOfStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#varModifier.


  visitVarModifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#continueStatement.


  visitContinueStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#breakStatement.


  visitBreakStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#returnStatement.


  visitReturnStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#yieldStatement.


  visitYieldStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#withStatement.


  visitWithStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#switchStatement.


  visitSwitchStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#caseBlock.


  visitCaseBlock(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#caseClauses.


  visitCaseClauses(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#caseClause.


  visitCaseClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#defaultClause.


  visitDefaultClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#labelledStatement.


  visitLabelledStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#throwStatement.


  visitThrowStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#tryStatement.


  visitTryStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#catchProduction.


  visitCatchProduction(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#finallyProduction.


  visitFinallyProduction(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#debuggerStatement.


  visitDebuggerStatement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#functionDeclaration.


  visitFunctionDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#classDeclaration.


  visitClassDeclaration(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#classTail.


  visitClassTail(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#classElement.


  visitClassElement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#methodDefinition.


  visitMethodDefinition(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#formalParameterList.


  visitFormalParameterList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#formalParameterArg.


  visitFormalParameterArg(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#lastFormalParameterArg.


  visitLastFormalParameterArg(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#functionBody.


  visitFunctionBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#sourceElements.


  visitSourceElements(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#arrayLiteral.


  visitArrayLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#elementList.


  visitElementList(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#arrayElement.


  visitArrayElement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#PropertyExpressionAssignment.


  visitPropertyExpressionAssignment(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ComputedPropertyExpressionAssignment.


  visitComputedPropertyExpressionAssignment(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#FunctionProperty.


  visitFunctionProperty(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#PropertyGetter.


  visitPropertyGetter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#PropertySetter.


  visitPropertySetter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#PropertyShorthand.


  visitPropertyShorthand(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#propertyName.


  visitPropertyName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#arguments.


  visitArguments(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#argument.


  visitArgument(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#expressionSequence.


  visitExpressionSequence(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#TemplateStringExpression.


  visitTemplateStringExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#TernaryExpression.


  visitTernaryExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#LogicalAndExpression.


  visitLogicalAndExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#PowerExpression.


  visitPowerExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#PreIncrementExpression.


  visitPreIncrementExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ObjectLiteralExpression.


  visitObjectLiteralExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#MetaExpression.


  visitMetaExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#InExpression.


  visitInExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#LogicalOrExpression.


  visitLogicalOrExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#NotExpression.


  visitNotExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#PreDecreaseExpression.


  visitPreDecreaseExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ArgumentsExpression.


  visitArgumentsExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#AwaitExpression.


  visitAwaitExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ThisExpression.


  visitThisExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#FunctionExpression.


  visitFunctionExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#UnaryMinusExpression.


  visitUnaryMinusExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#AssignmentExpression.


  visitAssignmentExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#PostDecreaseExpression.


  visitPostDecreaseExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#TypeofExpression.


  visitTypeofExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#InstanceofExpression.


  visitInstanceofExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#UnaryPlusExpression.


  visitUnaryPlusExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#DeleteExpression.


  visitDeleteExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ImportExpression.


  visitImportExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#EqualityExpression.


  visitEqualityExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#BitXOrExpression.


  visitBitXOrExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#SuperExpression.


  visitSuperExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#MultiplicativeExpression.


  visitMultiplicativeExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#BitShiftExpression.


  visitBitShiftExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ParenthesizedExpression.


  visitParenthesizedExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#AdditiveExpression.


  visitAdditiveExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#RelationalExpression.


  visitRelationalExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#PostIncrementExpression.


  visitPostIncrementExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#YieldExpression.


  visitYieldExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#BitNotExpression.


  visitBitNotExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#NewExpression.


  visitNewExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#LiteralExpression.


  visitLiteralExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ArrayLiteralExpression.


  visitArrayLiteralExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#MemberDotExpression.


  visitMemberDotExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ClassExpression.


  visitClassExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#MemberIndexExpression.


  visitMemberIndexExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#IdentifierExpression.


  visitIdentifierExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#BitAndExpression.


  visitBitAndExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#BitOrExpression.


  visitBitOrExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#AssignmentOperatorExpression.


  visitAssignmentOperatorExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#VoidExpression.


  visitVoidExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#CoalesceExpression.


  visitCoalesceExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#assignable.


  visitAssignable(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#objectLiteral.


  visitObjectLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#FunctionDecl.


  visitFunctionDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#AnonymousFunctionDecl.


  visitAnonymousFunctionDecl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#ArrowFunction.


  visitArrowFunction(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#arrowFunctionParameters.


  visitArrowFunctionParameters(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#arrowFunctionBody.


  visitArrowFunctionBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#assignmentOperator.


  visitAssignmentOperator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#literal.


  visitLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#templateStringLiteral.


  visitTemplateStringLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#templateStringAtom.


  visitTemplateStringAtom(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#numericLiteral.


  visitNumericLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#bigintLiteral.


  visitBigintLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#getter.


  visitGetter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#setter.


  visitSetter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#identifierName.


  visitIdentifierName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#identifier.


  visitIdentifier(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#reservedWord.


  visitReservedWord(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#keyword.


  visitKeyword(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#let_.


  visitLet_(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by JavaScriptParser#eos.


  visitEos(ctx) {
    return this.visitChildren(ctx);
  }

}

exports.default = JavaScriptParserVisitor;

},{"antlr4":42}],149:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Python3Parser = _interopRequireDefault(require("./Python3Parser.js"));

var _Python3ParserListener = _interopRequireDefault(require("./Python3ParserListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Python3AWSListener extends _Python3ParserListener.default {
  constructor() {
    super();
    this.SDKDeclarations = [];
    this.ClientDeclarations = [];
    this.ClientCalls = [];
    this.VariableDeclarations = [];
  }

  resolveArgs(argsRaw) {
    let args = {}; // TBC

    return args;
  }

  drillToAtomExprs(treeitem) {
    let items = [];

    if (treeitem.children) {
      treeitem.children.forEach(child => {
        if (child instanceof _Python3Parser.default.Atom_exprContext) {
          items.push(child);
        } else {
          items = items.concat(this.drillToAtomExprs(child));
        }
      });
    }

    return items;
  }

  exitImport_name(ctx) {
    if (ctx.children[1].getText() == "boto3") {
      if (ctx.children[1].children[0].children.length == 3) {
        this.SDKDeclarations.push({
          'variable': ctx.children[1].children[0].children[2].getText()
        });
      } else {
        this.SDKDeclarations.push({
          'variable': 'boto3'
        });
      }
    }
  }

  exitExpr_stmt(ctx) {
    if (ctx.children.length == 3 && ctx.children[0] instanceof _Python3Parser.default.Testlist_star_exprContext && ctx.children[1].getText() == "=" && ctx.children[2] instanceof _Python3Parser.default.Testlist_star_exprContext) {
      // w = x
      let atomExprLhs = this.drillToAtomExprs(ctx.children[0]);
      let atomExprRhs = this.drillToAtomExprs(ctx.children[2]);

      for (let assignable of atomExprLhs) {
        for (let rhs of atomExprRhs) {
          if (rhs.children.length == 3 && rhs.children[0] instanceof _Python3Parser.default.AtomContext && rhs.children[1] instanceof _Python3Parser.default.TrailerContext && rhs.children[2] instanceof _Python3Parser.default.TrailerContext && rhs.children[2].getText().startsWith("(") && rhs.children[2].getText().endsWith(")")) {
            // x.y(z)
            let namespace = rhs.children[0];

            if (rhs.children[1].children.length == 2 && rhs.children[1].children[0].getText() == ".") {
              let method = rhs.children[1].children[1];
              let argsRaw = rhs.children[2];

              for (let sdkDeclaration of this.SDKDeclarations) {
                if (namespace.getText() == sdkDeclaration['variable'] && method.getText() == 'client') {
                  // boto3.client('servicename', ...)
                  if (argsRaw.children.length == 3 && argsRaw.children[1] instanceof _Python3Parser.default.ArglistContext && argsRaw.children[1].children && argsRaw.children[1].children[0].children) {
                    let arg1 = this.drillToAtomExprs(argsRaw.children[1].children[0])[0];
                    let arg1filtered = arg1.getText().replace(/^['"](.*)['"]$/g, '$1');
                    this.ClientDeclarations.push({
                      'type': arg1filtered,
                      'variable': assignable.getText(),
                      'argsRaw': argsRaw,
                      'sdk': sdkDeclaration
                    });
                    break;
                  }
                }
              }

              for (let clientDeclaration of this.ClientDeclarations) {
                if (namespace.getText() == clientDeclaration['variable']) {
                  this.ClientCalls.push({
                    'client': clientDeclaration,
                    'method': method.getText(),
                    'argsRaw': argsRaw,
                    'args': this.resolveArgs(argsRaw),
                    'variable': assignable.getText()
                  });
                  break;
                }
              }
            }
          }
        }
      }
    }
  }

}

exports.default = Python3AWSListener;

},{"./Python3Parser.js":152,"./Python3ParserListener.js":153}],150:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _Python3LexerBase = _interopRequireDefault(require("./Python3LexerBase.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/Python3Lexer.g4 by ANTLR 4.9.2
// jshint ignore: start
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786", "\u5964\u0002e\u037d\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003", "\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007", "\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004", "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010", "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013", "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017", "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a", "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e", "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#", "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004", "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004", "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004", "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004", "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004", "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004", "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004", "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004", "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004", "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004", "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004", "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004", "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004", "~\t~\u0004\u007f\t\u007f\u0003\u0002\u0003\u0002\u0005\u0002\u0102\n", "\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0107\n\u0003", "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u010d\n", "\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003", "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003", "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003", "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003", "\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003", "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003", "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003", "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003", "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003", "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003", "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003", "\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003", "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003", "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003", "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003", "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003", "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003", "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003", "\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003", "\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003", "\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003", "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003", "\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003", "!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003", "#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003", "$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003", "&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003", "\'\u0003\'\u0003(\u0003(\u0003(\u0005(\u01d0\n(\u0003(\u0003(\u0005", "(\u01d4\n(\u0003(\u0005(\u01d7\n(\u0005(\u01d9\n(\u0003(\u0003(\u0003", ")\u0003)\u0007)\u01df\n)\f)\u000e)\u01e2\u000b)\u0003*\u0003*\u0003", "*\u0003*\u0003*\u0005*\u01e9\n*\u0003*\u0003*\u0005*\u01ed\n*\u0003", "+\u0003+\u0003+\u0003+\u0003+\u0005+\u01f4\n+\u0003+\u0003+\u0005+\u01f8", "\n+\u0003,\u0003,\u0007,\u01fc\n,\f,\u000e,\u01ff\u000b,\u0003,\u0006", ",\u0202\n,\r,\u000e,\u0203\u0005,\u0206\n,\u0003-\u0003-\u0003-\u0006", "-\u020b\n-\r-\u000e-\u020c\u0003.\u0003.\u0003.\u0006.\u0212\n.\r.\u000e", ".\u0213\u0003/\u0003/\u0003/\u0006/\u0219\n/\r/\u000e/\u021a\u00030", "\u00030\u00050\u021f\n0\u00031\u00031\u00051\u0223\n1\u00031\u00031", "\u00032\u00032\u00033\u00033\u00033\u00033\u00034\u00034\u00035\u0003", "5\u00035\u00036\u00036\u00036\u00037\u00037\u00038\u00038\u00039\u0003", "9\u0003:\u0003:\u0003:\u0003;\u0003;\u0003<\u0003<\u0003<\u0003=\u0003", "=\u0003=\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0003A\u0003A\u0003", "A\u0003B\u0003B\u0003B\u0003C\u0003C\u0003D\u0003D\u0003E\u0003E\u0003", "F\u0003F\u0003G\u0003G\u0003G\u0003H\u0003H\u0003I\u0003I\u0003I\u0003", "J\u0003J\u0003J\u0003K\u0003K\u0003L\u0003L\u0003M\u0003M\u0003M\u0003", "N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003Q\u0003", "Q\u0003Q\u0003R\u0003R\u0003S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003", "U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003W\u0003W\u0003W\u0003X\u0003", "X\u0003X\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003", "[\u0003\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003]\u0003^\u0003^", "\u0003^\u0003^\u0003_\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003", "`\u0003a\u0003a\u0003a\u0005a\u02ab\na\u0003a\u0003a\u0003b\u0003b\u0003", "c\u0003c\u0003c\u0007c\u02b4\nc\fc\u000ec\u02b7\u000bc\u0003c\u0003", "c\u0003c\u0003c\u0007c\u02bd\nc\fc\u000ec\u02c0\u000bc\u0003c\u0005", "c\u02c3\nc\u0003d\u0003d\u0003d\u0003d\u0003d\u0007d\u02ca\nd\fd\u000e", "d\u02cd\u000bd\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003", "d\u0007d\u02d7\nd\fd\u000ed\u02da\u000bd\u0003d\u0003d\u0003d\u0005", "d\u02df\nd\u0003e\u0003e\u0005e\u02e3\ne\u0003f\u0003f\u0003g\u0003", "g\u0003g\u0003g\u0005g\u02eb\ng\u0003h\u0003h\u0003i\u0003i\u0003j\u0003", "j\u0003k\u0003k\u0003l\u0003l\u0003m\u0005m\u02f8\nm\u0003m\u0003m\u0003", "m\u0003m\u0005m\u02fe\nm\u0003n\u0003n\u0005n\u0302\nn\u0003n\u0003", "n\u0003o\u0006o\u0307\no\ro\u000eo\u0308\u0003p\u0003p\u0006p\u030d", "\np\rp\u000ep\u030e\u0003q\u0003q\u0005q\u0313\nq\u0003q\u0006q\u0316", "\nq\rq\u000eq\u0317\u0003r\u0003r\u0003r\u0007r\u031d\nr\fr\u000er\u0320", "\u000br\u0003r\u0003r\u0003r\u0003r\u0007r\u0326\nr\fr\u000er\u0329", "\u000br\u0003r\u0005r\u032c\nr\u0003s\u0003s\u0003s\u0003s\u0003s\u0007", "s\u0333\ns\fs\u000es\u0336\u000bs\u0003s\u0003s\u0003s\u0003s\u0003", "s\u0003s\u0003s\u0003s\u0007s\u0340\ns\fs\u000es\u0343\u000bs\u0003", "s\u0003s\u0003s\u0005s\u0348\ns\u0003t\u0003t\u0005t\u034c\nt\u0003", "u\u0005u\u034f\nu\u0003v\u0005v\u0352\nv\u0003w\u0005w\u0355\nw\u0003", "x\u0003x\u0003x\u0003y\u0006y\u035b\ny\ry\u000ey\u035c\u0003z\u0003", "z\u0007z\u0361\nz\fz\u000ez\u0364\u000bz\u0003{\u0003{\u0005{\u0368", "\n{\u0003{\u0005{\u036b\n{\u0003{\u0003{\u0005{\u036f\n{\u0003|\u0003", "|\u0003}\u0003}\u0003~\u0003~\u0005~\u0377\n~\u0003\u007f\u0003\u007f", "\u0003\u007f\u0005\u007f\u037c\n\u007f\u0006\u02cb\u02d8\u0334\u0341", "\u0002\u0080\u0003\u0005\u0005\u0006\u0007\u0007\t\b\u000b\t\r\n\u000f", "\u000b\u0011\f\u0013\r\u0015\u000e\u0017\u000f\u0019\u0010\u001b\u0011", "\u001d\u0012\u001f\u0013!\u0014#\u0015%\u0016\'\u0017)\u0018+\u0019", "-\u001a/\u001b1\u001c3\u001d5\u001e7\u001f9 ;!=\"?#A$C%E&G\'I(K)M*O", "+Q,S-U.W/Y0[1]2_3a4c5e6g7i8k9m:o;q<s=u>w?y@{A}B\u007fC\u0081D\u0083", "E\u0085F\u0087G\u0089H\u008bI\u008dJ\u008fK\u0091L\u0093M\u0095N\u0097", "O\u0099P\u009bQ\u009dR\u009fS\u00a1T\u00a3U\u00a5V\u00a7W\u00a9X\u00ab", "Y\u00adZ\u00af[\u00b1\\\u00b3]\u00b5^\u00b7_\u00b9`\u00bba\u00bdb\u00bf", "c\u00c1d\u00c3e\u00c5\u0002\u00c7\u0002\u00c9\u0002\u00cb\u0002\u00cd", "\u0002\u00cf\u0002\u00d1\u0002\u00d3\u0002\u00d5\u0002\u00d7\u0002\u00d9", "\u0002\u00db\u0002\u00dd\u0002\u00df\u0002\u00e1\u0002\u00e3\u0002\u00e5", "\u0002\u00e7\u0002\u00e9\u0002\u00eb\u0002\u00ed\u0002\u00ef\u0002\u00f1", "\u0002\u00f3\u0002\u00f5\u0002\u00f7\u0002\u00f9\u0002\u00fb\u0002\u00fd", "\u0002\u0003\u0002\u001b\b\u0002HHTTWWhhttww\u0004\u0002HHhh\u0004\u0002", "TTtt\u0004\u0002DDdd\u0004\u0002QQqq\u0004\u0002ZZzz\u0004\u0002LLl", "l\u0006\u0002\f\f\u000e\u000f))^^\u0006\u0002\f\f\u000e\u000f$$^^\u0003", "\u0002^^\u0003\u00023;\u0003\u00022;\u0003\u000229\u0005\u00022;CHc", "h\u0003\u000223\u0004\u0002GGgg\u0004\u0002--//\u0007\u0002\u0002\u000b", "\r\u000e\u0010(*]_\u0081\u0007\u0002\u0002\u000b\r\u000e\u0010#%]_\u0081", "\u0004\u0002\u0002]_\u0081\u0003\u0002\u0002\u0081\u0004\u0002\u000b", "\u000b\"\"\u0004\u0002\f\f\u000e\u000f\u0006\u0002\u1887\u1888\u211a", "\u211a\u2130\u2130\u309d\u309e\u0006\u0002\u00b9\u00b9\u0389\u0389\u136b", "\u1373\u19dc\u19dc\u0004\u024f\u0002C\u0002\\\u0002a\u0002a\u0002c\u0002", "|\u0002\u00ac\u0002\u00ac\u0002\u00b7\u0002\u00b7\u0002\u00bc\u0002", "\u00bc\u0002\u00c2\u0002\u00d8\u0002\u00da\u0002\u00f8\u0002\u00fa\u0002", "\u02c3\u0002\u02c8\u0002\u02d3\u0002\u02e2\u0002\u02e6\u0002\u02ee\u0002", "\u02ee\u0002\u02f0\u0002\u02f0\u0002\u0372\u0002\u0376\u0002\u0378\u0002", "\u0379\u0002\u037c\u0002\u037f\u0002\u0381\u0002\u0381\u0002\u0388\u0002", "\u0388\u0002\u038a\u0002\u038c\u0002\u038e\u0002\u038e\u0002\u0390\u0002", "\u03a3\u0002\u03a5\u0002\u03f7\u0002\u03f9\u0002\u0483\u0002\u048c\u0002", "\u0531\u0002\u0533\u0002\u0558\u0002\u055b\u0002\u055b\u0002\u0563\u0002", "\u0589\u0002\u05d2\u0002\u05ec\u0002\u05f2\u0002\u05f4\u0002\u0622\u0002", "\u064c\u0002\u0670\u0002\u0671\u0002\u0673\u0002\u06d5\u0002\u06d7\u0002", "\u06d7\u0002\u06e7\u0002\u06e8\u0002\u06f0\u0002\u06f1\u0002\u06fc\u0002", "\u06fe\u0002\u0701\u0002\u0701\u0002\u0712\u0002\u0712\u0002\u0714\u0002", "\u0731\u0002\u074f\u0002\u07a7\u0002\u07b3\u0002\u07b3\u0002\u07cc\u0002", "\u07ec\u0002\u07f6\u0002\u07f7\u0002\u07fc\u0002\u07fc\u0002\u0802\u0002", "\u0817\u0002\u081c\u0002\u081c\u0002\u0826\u0002\u0826\u0002\u082a\u0002", "\u082a\u0002\u0842\u0002\u085a\u0002\u0862\u0002\u086c\u0002\u08a2\u0002", "\u08b6\u0002\u08b8\u0002\u08bf\u0002\u0906\u0002\u093b\u0002\u093f\u0002", "\u093f\u0002\u0952\u0002\u0952\u0002\u095a\u0002\u0963\u0002\u0973\u0002", "\u0982\u0002\u0987\u0002\u098e\u0002\u0991\u0002\u0992\u0002\u0995\u0002", "\u09aa\u0002\u09ac\u0002\u09b2\u0002\u09b4\u0002\u09b4\u0002\u09b8\u0002", "\u09bb\u0002\u09bf\u0002\u09bf\u0002\u09d0\u0002\u09d0\u0002\u09de\u0002", "\u09df\u0002\u09e1\u0002\u09e3\u0002\u09f2\u0002\u09f3\u0002\u09fe\u0002", "\u09fe\u0002\u0a07\u0002\u0a0c\u0002\u0a11\u0002\u0a12\u0002\u0a15\u0002", "\u0a2a\u0002\u0a2c\u0002\u0a32\u0002\u0a34\u0002\u0a35\u0002\u0a37\u0002", "\u0a38\u0002\u0a3a\u0002\u0a3b\u0002\u0a5b\u0002\u0a5e\u0002\u0a60\u0002", "\u0a60\u0002\u0a74\u0002\u0a76\u0002\u0a87\u0002\u0a8f\u0002\u0a91\u0002", "\u0a93\u0002\u0a95\u0002\u0aaa\u0002\u0aac\u0002\u0ab2\u0002\u0ab4\u0002", "\u0ab5\u0002\u0ab7\u0002\u0abb\u0002\u0abf\u0002\u0abf\u0002\u0ad2\u0002", "\u0ad2\u0002\u0ae2\u0002\u0ae3\u0002\u0afb\u0002\u0afb\u0002\u0b07\u0002", "\u0b0e\u0002\u0b11\u0002\u0b12\u0002\u0b15\u0002\u0b2a\u0002\u0b2c\u0002", "\u0b32\u0002\u0b34\u0002\u0b35\u0002\u0b37\u0002\u0b3b\u0002\u0b3f\u0002", "\u0b3f\u0002\u0b5e\u0002\u0b5f\u0002\u0b61\u0002\u0b63\u0002\u0b73\u0002", "\u0b73\u0002\u0b85\u0002\u0b85\u0002\u0b87\u0002\u0b8c\u0002\u0b90\u0002", "\u0b92\u0002\u0b94\u0002\u0b97\u0002\u0b9b\u0002\u0b9c\u0002\u0b9e\u0002", "\u0b9e\u0002\u0ba0\u0002\u0ba1\u0002\u0ba5\u0002\u0ba6\u0002\u0baa\u0002", "\u0bac\u0002\u0bb0\u0002\u0bbb\u0002\u0bd2\u0002\u0bd2\u0002\u0c07\u0002", "\u0c0e\u0002\u0c10\u0002\u0c12\u0002\u0c14\u0002\u0c2a\u0002\u0c2c\u0002", "\u0c3b\u0002\u0c3f\u0002\u0c3f\u0002\u0c5a\u0002\u0c5c\u0002\u0c62\u0002", "\u0c63\u0002\u0c82\u0002\u0c82\u0002\u0c87\u0002\u0c8e\u0002\u0c90\u0002", "\u0c92\u0002\u0c94\u0002\u0caa\u0002\u0cac\u0002\u0cb5\u0002\u0cb7\u0002", "\u0cbb\u0002\u0cbf\u0002\u0cbf\u0002\u0ce0\u0002\u0ce0\u0002\u0ce2\u0002", "\u0ce3\u0002\u0cf3\u0002\u0cf4\u0002\u0d07\u0002\u0d0e\u0002\u0d10\u0002", "\u0d12\u0002\u0d14\u0002\u0d3c\u0002\u0d3f\u0002\u0d3f\u0002\u0d50\u0002", "\u0d50\u0002\u0d56\u0002\u0d58\u0002\u0d61\u0002\u0d63\u0002\u0d7c\u0002", "\u0d81\u0002\u0d87\u0002\u0d98\u0002\u0d9c\u0002\u0db3\u0002\u0db5\u0002", "\u0dbd\u0002\u0dbf\u0002\u0dbf\u0002\u0dc2\u0002\u0dc8\u0002\u0e03\u0002", "\u0e32\u0002\u0e34\u0002\u0e35\u0002\u0e42\u0002\u0e48\u0002\u0e83\u0002", "\u0e84\u0002\u0e86\u0002\u0e86\u0002\u0e89\u0002\u0e8a\u0002\u0e8c\u0002", "\u0e8c\u0002\u0e8f\u0002\u0e8f\u0002\u0e96\u0002\u0e99\u0002\u0e9b\u0002", "\u0ea1\u0002\u0ea3\u0002\u0ea5\u0002\u0ea7\u0002\u0ea7\u0002\u0ea9\u0002", "\u0ea9\u0002\u0eac\u0002\u0ead\u0002\u0eaf\u0002\u0eb2\u0002\u0eb4\u0002", "\u0eb5\u0002\u0ebf\u0002\u0ebf\u0002\u0ec2\u0002\u0ec6\u0002\u0ec8\u0002", "\u0ec8\u0002\u0ede\u0002\u0ee1\u0002\u0f02\u0002\u0f02\u0002\u0f42\u0002", "\u0f49\u0002\u0f4b\u0002\u0f6e\u0002\u0f8a\u0002\u0f8e\u0002\u1002\u0002", "\u102c\u0002\u1041\u0002\u1041\u0002\u1052\u0002\u1057\u0002\u105c\u0002", "\u105f\u0002\u1063\u0002\u1063\u0002\u1067\u0002\u1068\u0002\u1070\u0002", "\u1072\u0002\u1077\u0002\u1083\u0002\u1090\u0002\u1090\u0002\u10a2\u0002", "\u10c7\u0002\u10c9\u0002\u10c9\u0002\u10cf\u0002\u10cf\u0002\u10d2\u0002", "\u10fc\u0002\u10fe\u0002\u124a\u0002\u124c\u0002\u124f\u0002\u1252\u0002", "\u1258\u0002\u125a\u0002\u125a\u0002\u125c\u0002\u125f\u0002\u1262\u0002", "\u128a\u0002\u128c\u0002\u128f\u0002\u1292\u0002\u12b2\u0002\u12b4\u0002", "\u12b7\u0002\u12ba\u0002\u12c0\u0002\u12c2\u0002\u12c2\u0002\u12c4\u0002", "\u12c7\u0002\u12ca\u0002\u12d8\u0002\u12da\u0002\u1312\u0002\u1314\u0002", "\u1317\u0002\u131a\u0002\u135c\u0002\u1382\u0002\u1391\u0002\u13a2\u0002", "\u13f7\u0002\u13fa\u0002\u13ff\u0002\u1403\u0002\u166e\u0002\u1671\u0002", "\u1681\u0002\u1683\u0002\u169c\u0002\u16a2\u0002\u16ec\u0002\u16f0\u0002", "\u16fa\u0002\u1702\u0002\u170e\u0002\u1710\u0002\u1713\u0002\u1722\u0002", "\u1733\u0002\u1742\u0002\u1753\u0002\u1762\u0002\u176e\u0002\u1770\u0002", "\u1772\u0002\u1782\u0002\u17b5\u0002\u17d9\u0002\u17d9\u0002\u17de\u0002", "\u17de\u0002\u1822\u0002\u1879\u0002\u1882\u0002\u1886\u0002\u1889\u0002", "\u18aa\u0002\u18ac\u0002\u18ac\u0002\u18b2\u0002\u18f7\u0002\u1902\u0002", "\u1920\u0002\u1952\u0002\u196f\u0002\u1972\u0002\u1976\u0002\u1982\u0002", "\u19ad\u0002\u19b2\u0002\u19cb\u0002\u1a02\u0002\u1a18\u0002\u1a22\u0002", "\u1a56\u0002\u1aa9\u0002\u1aa9\u0002\u1b07\u0002\u1b35\u0002\u1b47\u0002", "\u1b4d\u0002\u1b85\u0002\u1ba2\u0002\u1bb0\u0002\u1bb1\u0002\u1bbc\u0002", "\u1be7\u0002\u1c02\u0002\u1c25\u0002\u1c4f\u0002\u1c51\u0002\u1c5c\u0002", "\u1c7f\u0002\u1c82\u0002\u1c8a\u0002\u1ceb\u0002\u1cee\u0002\u1cf0\u0002", "\u1cf3\u0002\u1cf7\u0002\u1cf8\u0002\u1d02\u0002\u1dc1\u0002\u1e02\u0002", "\u1f17\u0002\u1f1a\u0002\u1f1f\u0002\u1f22\u0002\u1f47\u0002\u1f4a\u0002", "\u1f4f\u0002\u1f52\u0002\u1f59\u0002\u1f5b\u0002\u1f5b\u0002\u1f5d\u0002", "\u1f5d\u0002\u1f5f\u0002\u1f5f\u0002\u1f61\u0002\u1f7f\u0002\u1f82\u0002", "\u1fb6\u0002\u1fb8\u0002\u1fbe\u0002\u1fc0\u0002\u1fc0\u0002\u1fc4\u0002", "\u1fc6\u0002\u1fc8\u0002\u1fce\u0002\u1fd2\u0002\u1fd5\u0002\u1fd8\u0002", "\u1fdd\u0002\u1fe2\u0002\u1fee\u0002\u1ff4\u0002\u1ff6\u0002\u1ff8\u0002", "\u1ffe\u0002\u2073\u0002\u2073\u0002\u2081\u0002\u2081\u0002\u2092\u0002", "\u209e\u0002\u2104\u0002\u2104\u0002\u2109\u0002\u2109\u0002\u210c\u0002", "\u2115\u0002\u2117\u0002\u2117\u0002\u211b\u0002\u211f\u0002\u2126\u0002", "\u2126\u0002\u2128\u0002\u2128\u0002\u212a\u0002\u212a\u0002\u212c\u0002", "\u212f\u0002\u2131\u0002\u213b\u0002\u213e\u0002\u2141\u0002\u2147\u0002", "\u214b\u0002\u2150\u0002\u2150\u0002\u2162\u0002\u218a\u0002\u2c02\u0002", "\u2c30\u0002\u2c32\u0002\u2c60\u0002\u2c62\u0002\u2ce6\u0002\u2ced\u0002", "\u2cf0\u0002\u2cf4\u0002\u2cf5\u0002\u2d02\u0002\u2d27\u0002\u2d29\u0002", "\u2d29\u0002\u2d2f\u0002\u2d2f\u0002\u2d32\u0002\u2d69\u0002\u2d71\u0002", "\u2d71\u0002\u2d82\u0002\u2d98\u0002\u2da2\u0002\u2da8\u0002\u2daa\u0002", "\u2db0\u0002\u2db2\u0002\u2db8\u0002\u2dba\u0002\u2dc0\u0002\u2dc2\u0002", "\u2dc8\u0002\u2dca\u0002\u2dd0\u0002\u2dd2\u0002\u2dd8\u0002\u2dda\u0002", "\u2de0\u0002\u2e31\u0002\u2e31\u0002\u3007\u0002\u3009\u0002\u3023\u0002", "\u302b\u0002\u3033\u0002\u3037\u0002\u303a\u0002\u303e\u0002\u3043\u0002", "\u3098\u0002\u309f\u0002\u30a1\u0002\u30a3\u0002\u30fc\u0002\u30fe\u0002", "\u3101\u0002\u3107\u0002\u3130\u0002\u3133\u0002\u3190\u0002\u31a2\u0002", "\u31bc\u0002\u31f2\u0002\u3201\u0002\u3402\u0002\u4db7\u0002\u4e02\u0002", "\u9fec\u0002\ua002\u0002\ua48e\u0002\ua4d2\u0002\ua4ff\u0002\ua502\u0002", "\ua60e\u0002\ua612\u0002\ua621\u0002\ua62c\u0002\ua62d\u0002\ua642\u0002", "\ua670\u0002\ua681\u0002\ua69f\u0002\ua6a2\u0002\ua6f1\u0002\ua719\u0002", "\ua721\u0002\ua724\u0002\ua78a\u0002\ua78d\u0002\ua7b0\u0002\ua7b2\u0002", "\ua7b9\u0002\ua7f9\u0002\ua803\u0002\ua805\u0002\ua807\u0002\ua809\u0002", "\ua80c\u0002\ua80e\u0002\ua824\u0002\ua842\u0002\ua875\u0002\ua884\u0002", "\ua8b5\u0002\ua8f4\u0002\ua8f9\u0002\ua8fd\u0002\ua8fd\u0002\ua8ff\u0002", "\ua8ff\u0002\ua90c\u0002\ua927\u0002\ua932\u0002\ua948\u0002\ua962\u0002", "\ua97e\u0002\ua986\u0002\ua9b4\u0002\ua9d1\u0002\ua9d1\u0002\ua9e2\u0002", "\ua9e6\u0002\ua9e8\u0002\ua9f1\u0002\ua9fc\u0002\uaa00\u0002\uaa02\u0002", "\uaa2a\u0002\uaa42\u0002\uaa44\u0002\uaa46\u0002\uaa4d\u0002\uaa62\u0002", "\uaa78\u0002\uaa7c\u0002\uaa7c\u0002\uaa80\u0002\uaab1\u0002\uaab3\u0002", "\uaab3\u0002\uaab7\u0002\uaab8\u0002\uaabb\u0002\uaabf\u0002\uaac2\u0002", "\uaac2\u0002\uaac4\u0002\uaac4\u0002\uaadd\u0002\uaadf\u0002\uaae2\u0002", "\uaaec\u0002\uaaf4\u0002\uaaf6\u0002\uab03\u0002\uab08\u0002\uab0b\u0002", "\uab10\u0002\uab13\u0002\uab18\u0002\uab22\u0002\uab28\u0002\uab2a\u0002", "\uab30\u0002\uab32\u0002\uab5c\u0002\uab5e\u0002\uab67\u0002\uab72\u0002", "\uabe4\u0002\uac02\u0002\ud7a5\u0002\ud7b2\u0002\ud7c8\u0002\ud7cd\u0002", "\ud7fd\u0002\uf902\u0002\ufa6f\u0002\ufa72\u0002\ufadb\u0002\ufb02\u0002", "\ufb08\u0002\ufb15\u0002\ufb19\u0002\ufb1f\u0002\ufb1f\u0002\ufb21\u0002", "\ufb2a\u0002\ufb2c\u0002\ufb38\u0002\ufb3a\u0002\ufb3e\u0002\ufb40\u0002", "\ufb40\u0002\ufb42\u0002\ufb43\u0002\ufb45\u0002\ufb46\u0002\ufb48\u0002", "\ufbb3\u0002\ufbd5\u0002\ufd3f\u0002\ufd52\u0002\ufd91\u0002\ufd94\u0002", "\ufdc9\u0002\ufdf2\u0002\ufdfd\u0002\ufe72\u0002\ufe76\u0002\ufe78\u0002", "\ufefe\u0002\uff23\u0002\uff3c\u0002\uff43\u0002\uff5c\u0002\uff68\u0002", "\uffc0\u0002\uffc4\u0002\uffc9\u0002\uffcc\u0002\uffd1\u0002\uffd4\u0002", "\uffd9\u0002\uffdc\u0002\uffde\u0002\u0002\u0003\r\u0003\u000f\u0003", "(\u0003*\u0003<\u0003>\u0003?\u0003A\u0003O\u0003R\u0003_\u0003\u0082", "\u0003\u00fc\u0003\u0142\u0003\u0176\u0003\u0282\u0003\u029e\u0003\u02a2", "\u0003\u02d2\u0003\u0302\u0003\u0321\u0003\u032f\u0003\u034c\u0003\u0352", "\u0003\u0377\u0003\u0382\u0003\u039f\u0003\u03a2\u0003\u03c5\u0003\u03ca", "\u0003\u03d1\u0003\u03d3\u0003\u03d7\u0003\u0402\u0003\u049f\u0003\u04b2", "\u0003\u04d5\u0003\u04da\u0003\u04fd\u0003\u0502\u0003\u0529\u0003\u0532", "\u0003\u0565\u0003\u0602\u0003\u0738\u0003\u0742\u0003\u0757\u0003\u0762", "\u0003\u0769\u0003\u0802\u0003\u0807\u0003\u080a\u0003\u080a\u0003\u080c", "\u0003\u0837\u0003\u0839\u0003\u083a\u0003\u083e\u0003\u083e\u0003\u0841", "\u0003\u0857\u0003\u0862\u0003\u0878\u0003\u0882\u0003\u08a0\u0003\u08e2", "\u0003\u08f4\u0003\u08f6\u0003\u08f7\u0003\u0902\u0003\u0917\u0003\u0922", "\u0003\u093b\u0003\u0982\u0003\u09b9\u0003\u09c0\u0003\u09c1\u0003\u0a02", "\u0003\u0a02\u0003\u0a12\u0003\u0a15\u0003\u0a17\u0003\u0a19\u0003\u0a1b", "\u0003\u0a35\u0003\u0a62\u0003\u0a7e\u0003\u0a82\u0003\u0a9e\u0003\u0ac2", "\u0003\u0ac9\u0003\u0acb\u0003\u0ae6\u0003\u0b02\u0003\u0b37\u0003\u0b42", "\u0003\u0b57\u0003\u0b62\u0003\u0b74\u0003\u0b82\u0003\u0b93\u0003\u0c02", "\u0003\u0c4a\u0003\u0c82\u0003\u0cb4\u0003\u0cc2\u0003\u0cf4\u0003\u1005", "\u0003\u1039\u0003\u1085\u0003\u10b1\u0003\u10d2\u0003\u10ea\u0003\u1105", "\u0003\u1128\u0003\u1152\u0003\u1174\u0003\u1178\u0003\u1178\u0003\u1185", "\u0003\u11b4\u0003\u11c3\u0003\u11c6\u0003\u11dc\u0003\u11dc\u0003\u11de", "\u0003\u11de\u0003\u1202\u0003\u1213\u0003\u1215\u0003\u122d\u0003\u1282", "\u0003\u1288\u0003\u128a\u0003\u128a\u0003\u128c\u0003\u128f\u0003\u1291", "\u0003\u129f\u0003\u12a1\u0003\u12aa\u0003\u12b2\u0003\u12e0\u0003\u1307", "\u0003\u130e\u0003\u1311\u0003\u1312\u0003\u1315\u0003\u132a\u0003\u132c", "\u0003\u1332\u0003\u1334\u0003\u1335\u0003\u1337\u0003\u133b\u0003\u133f", "\u0003\u133f\u0003\u1352\u0003\u1352\u0003\u135f\u0003\u1363\u0003\u1402", "\u0003\u1436\u0003\u1449\u0003\u144c\u0003\u1482\u0003\u14b1\u0003\u14c6", "\u0003\u14c7\u0003\u14c9\u0003\u14c9\u0003\u1582\u0003\u15b0\u0003\u15da", "\u0003\u15dd\u0003\u1602\u0003\u1631\u0003\u1646\u0003\u1646\u0003\u1682", "\u0003\u16ac\u0003\u1702\u0003\u171b\u0003\u18a2\u0003\u18e1\u0003\u1901", "\u0003\u1901\u0003\u1a02\u0003\u1a02\u0003\u1a0d\u0003\u1a34\u0003\u1a3c", "\u0003\u1a3c\u0003\u1a52\u0003\u1a52\u0003\u1a5e\u0003\u1a85\u0003\u1a88", "\u0003\u1a8b\u0003\u1ac2\u0003\u1afa\u0003\u1c02\u0003\u1c0a\u0003\u1c0c", "\u0003\u1c30\u0003\u1c42\u0003\u1c42\u0003\u1c74\u0003\u1c91\u0003\u1d02", "\u0003\u1d08\u0003\u1d0a\u0003\u1d0b\u0003\u1d0d\u0003\u1d32\u0003\u1d48", "\u0003\u1d48\u0003\u2002\u0003\u239b\u0003\u2402\u0003\u2470\u0003\u2482", "\u0003\u2545\u0003\u3002\u0003\u3430\u0003\u4402\u0003\u4648\u0003\u6802", "\u0003\u6a3a\u0003\u6a42\u0003\u6a60\u0003\u6ad2\u0003\u6aef\u0003\u6b02", "\u0003\u6b31\u0003\u6b42\u0003\u6b45\u0003\u6b65\u0003\u6b79\u0003\u6b7f", "\u0003\u6b91\u0003\u6f02\u0003\u6f46\u0003\u6f52\u0003\u6f52\u0003\u6f95", "\u0003\u6fa1\u0003\u6fe2\u0003\u6fe3\u0003\u7002\u0003\u87ee\u0003\u8802", "\u0003\u8af4\u0003\ub002\u0003\ub120\u0003\ub172\u0003\ub2fd\u0003\ubc02", "\u0003\ubc6c\u0003\ubc72\u0003\ubc7e\u0003\ubc82\u0003\ubc8a\u0003\ubc92", "\u0003\ubc9b\u0003\ud402\u0003\ud456\u0003\ud458\u0003\ud49e\u0003\ud4a0", "\u0003\ud4a1\u0003\ud4a4\u0003\ud4a4\u0003\ud4a7\u0003\ud4a8\u0003\ud4ab", "\u0003\ud4ae\u0003\ud4b0\u0003\ud4bb\u0003\ud4bd\u0003\ud4bd\u0003\ud4bf", "\u0003\ud4c5\u0003\ud4c7\u0003\ud507\u0003\ud509\u0003\ud50c\u0003\ud50f", "\u0003\ud516\u0003\ud518\u0003\ud51e\u0003\ud520\u0003\ud53b\u0003\ud53d", "\u0003\ud540\u0003\ud542\u0003\ud546\u0003\ud548\u0003\ud548\u0003\ud54c", "\u0003\ud552\u0003\ud554\u0003\ud6a7\u0003\ud6aa\u0003\ud6c2\u0003\ud6c4", "\u0003\ud6dc\u0003\ud6de\u0003\ud6fc\u0003\ud6fe\u0003\ud716\u0003\ud718", "\u0003\ud736\u0003\ud738\u0003\ud750\u0003\ud752\u0003\ud770\u0003\ud772", "\u0003\ud78a\u0003\ud78c\u0003\ud7aa\u0003\ud7ac\u0003\ud7c4\u0003\ud7c6", "\u0003\ud7cd\u0003\ue802\u0003\ue8c6\u0003\ue902\u0003\ue945\u0003\uee02", "\u0003\uee05\u0003\uee07\u0003\uee21\u0003\uee23\u0003\uee24\u0003\uee26", "\u0003\uee26\u0003\uee29\u0003\uee29\u0003\uee2b\u0003\uee34\u0003\uee36", "\u0003\uee39\u0003\uee3b\u0003\uee3b\u0003\uee3d\u0003\uee3d\u0003\uee44", "\u0003\uee44\u0003\uee49\u0003\uee49\u0003\uee4b\u0003\uee4b\u0003\uee4d", "\u0003\uee4d\u0003\uee4f\u0003\uee51\u0003\uee53\u0003\uee54\u0003\uee56", "\u0003\uee56\u0003\uee59\u0003\uee59\u0003\uee5b\u0003\uee5b\u0003\uee5d", "\u0003\uee5d\u0003\uee5f\u0003\uee5f\u0003\uee61\u0003\uee61\u0003\uee63", "\u0003\uee64\u0003\uee66\u0003\uee66\u0003\uee69\u0003\uee6c\u0003\uee6e", "\u0003\uee74\u0003\uee76\u0003\uee79\u0003\uee7b\u0003\uee7e\u0003\uee80", "\u0003\uee80\u0003\uee82\u0003\uee8b\u0003\uee8d\u0003\uee9d\u0003\ueea3", "\u0003\ueea5\u0003\ueea7\u0003\ueeab\u0003\ueead\u0003\ueebd\u0003\u0002", "\u0004\ua6d8\u0004\ua702\u0004\ub736\u0004\ub742\u0004\ub81f\u0004\ub822", "\u0004\ucea3\u0004\uceb2\u0004\uebe2\u0004\uf802\u0004\ufa1f\u0004\u0143", "\u00022\u0002;\u0002a\u0002a\u0002\u0302\u0002\u0371\u0002\u0485\u0002", "\u0489\u0002\u0593\u0002\u05bf\u0002\u05c1\u0002\u05c1\u0002\u05c3\u0002", "\u05c4\u0002\u05c6\u0002\u05c7\u0002\u05c9\u0002\u05c9\u0002\u0612\u0002", "\u061c\u0002\u064d\u0002\u066b\u0002\u0672\u0002\u0672\u0002\u06d8\u0002", "\u06de\u0002\u06e1\u0002\u06e6\u0002\u06e9\u0002\u06ea\u0002\u06ec\u0002", "\u06ef\u0002\u06f2\u0002\u06fb\u0002\u0713\u0002\u0713\u0002\u0732\u0002", "\u074c\u0002\u07a8\u0002\u07b2\u0002\u07c2\u0002\u07cb\u0002\u07ed\u0002", "\u07f5\u0002\u0818\u0002\u081b\u0002\u081d\u0002\u0825\u0002\u0827\u0002", "\u0829\u0002\u082b\u0002\u082f\u0002\u085b\u0002\u085d\u0002\u08d6\u0002", "\u08e3\u0002\u08e5\u0002\u0905\u0002\u093c\u0002\u093e\u0002\u0940\u0002", "\u0951\u0002\u0953\u0002\u0959\u0002\u0964\u0002\u0965\u0002\u0968\u0002", "\u0971\u0002\u0983\u0002\u0985\u0002\u09be\u0002\u09be\u0002\u09c0\u0002", "\u09c6\u0002\u09c9\u0002\u09ca\u0002\u09cd\u0002\u09cf\u0002\u09d9\u0002", "\u09d9\u0002\u09e4\u0002\u09e5\u0002\u09e8\u0002\u09f1\u0002\u0a03\u0002", "\u0a05\u0002\u0a3e\u0002\u0a3e\u0002\u0a40\u0002\u0a44\u0002\u0a49\u0002", "\u0a4a\u0002\u0a4d\u0002\u0a4f\u0002\u0a53\u0002\u0a53\u0002\u0a68\u0002", "\u0a73\u0002\u0a77\u0002\u0a77\u0002\u0a83\u0002\u0a85\u0002\u0abe\u0002", "\u0abe\u0002\u0ac0\u0002\u0ac7\u0002\u0ac9\u0002\u0acb\u0002\u0acd\u0002", "\u0acf\u0002\u0ae4\u0002\u0ae5\u0002\u0ae8\u0002\u0af1\u0002\u0afc\u0002", "\u0b01\u0002\u0b03\u0002\u0b05\u0002\u0b3e\u0002\u0b3e\u0002\u0b40\u0002", "\u0b46\u0002\u0b49\u0002\u0b4a\u0002\u0b4d\u0002\u0b4f\u0002\u0b58\u0002", "\u0b59\u0002\u0b64\u0002\u0b65\u0002\u0b68\u0002\u0b71\u0002\u0b84\u0002", "\u0b84\u0002\u0bc0\u0002\u0bc4\u0002\u0bc8\u0002\u0bca\u0002\u0bcc\u0002", "\u0bcf\u0002\u0bd9\u0002\u0bd9\u0002\u0be8\u0002\u0bf1\u0002\u0c02\u0002", "\u0c05\u0002\u0c40\u0002\u0c46\u0002\u0c48\u0002\u0c4a\u0002\u0c4c\u0002", "\u0c4f\u0002\u0c57\u0002\u0c58\u0002\u0c64\u0002\u0c65\u0002\u0c68\u0002", "\u0c71\u0002\u0c83\u0002\u0c85\u0002\u0cbe\u0002\u0cbe\u0002\u0cc0\u0002", "\u0cc6\u0002\u0cc8\u0002\u0cca\u0002\u0ccc\u0002\u0ccf\u0002\u0cd7\u0002", "\u0cd8\u0002\u0ce4\u0002\u0ce5\u0002\u0ce8\u0002\u0cf1\u0002\u0d02\u0002", "\u0d05\u0002\u0d3d\u0002\u0d3e\u0002\u0d40\u0002\u0d46\u0002\u0d48\u0002", "\u0d4a\u0002\u0d4c\u0002\u0d4f\u0002\u0d59\u0002\u0d59\u0002\u0d64\u0002", "\u0d65\u0002\u0d68\u0002\u0d71\u0002\u0d84\u0002\u0d85\u0002\u0dcc\u0002", "\u0dcc\u0002\u0dd1\u0002\u0dd6\u0002\u0dd8\u0002\u0dd8\u0002\u0dda\u0002", "\u0de1\u0002\u0de8\u0002\u0df1\u0002\u0df4\u0002\u0df5\u0002\u0e33\u0002", "\u0e33\u0002\u0e36\u0002\u0e3c\u0002\u0e49\u0002\u0e50\u0002\u0e52\u0002", "\u0e5b\u0002\u0eb3\u0002\u0eb3\u0002\u0eb6\u0002\u0ebb\u0002\u0ebd\u0002", "\u0ebe\u0002\u0eca\u0002\u0ecf\u0002\u0ed2\u0002\u0edb\u0002\u0f1a\u0002", "\u0f1b\u0002\u0f22\u0002\u0f2b\u0002\u0f37\u0002\u0f37\u0002\u0f39\u0002", "\u0f39\u0002\u0f3b\u0002\u0f3b\u0002\u0f40\u0002\u0f41\u0002\u0f73\u0002", "\u0f86\u0002\u0f88\u0002\u0f89\u0002\u0f8f\u0002\u0f99\u0002\u0f9b\u0002", "\u0fbe\u0002\u0fc8\u0002\u0fc8\u0002\u102d\u0002\u1040\u0002\u1042\u0002", "\u104b\u0002\u1058\u0002\u105b\u0002\u1060\u0002\u1062\u0002\u1064\u0002", "\u1066\u0002\u1069\u0002\u106f\u0002\u1073\u0002\u1076\u0002\u1084\u0002", "\u108f\u0002\u1091\u0002\u109f\u0002\u135f\u0002\u1361\u0002\u1714\u0002", "\u1716\u0002\u1734\u0002\u1736\u0002\u1754\u0002\u1755\u0002\u1774\u0002", "\u1775\u0002\u17b6\u0002\u17d5\u0002\u17df\u0002\u17df\u0002\u17e2\u0002", "\u17eb\u0002\u180d\u0002\u180f\u0002\u1812\u0002\u181b\u0002\u1887\u0002", "\u1888\u0002\u18ab\u0002\u18ab\u0002\u1922\u0002\u192d\u0002\u1932\u0002", "\u193d\u0002\u1948\u0002\u1951\u0002\u19d2\u0002\u19db\u0002\u1a19\u0002", "\u1a1d\u0002\u1a57\u0002\u1a60\u0002\u1a62\u0002\u1a7e\u0002\u1a81\u0002", "\u1a8b\u0002\u1a92\u0002\u1a9b\u0002\u1ab2\u0002\u1abf\u0002\u1b02\u0002", "\u1b06\u0002\u1b36\u0002\u1b46\u0002\u1b52\u0002\u1b5b\u0002\u1b6d\u0002", "\u1b75\u0002\u1b82\u0002\u1b84\u0002\u1ba3\u0002\u1baf\u0002\u1bb2\u0002", "\u1bbb\u0002\u1be8\u0002\u1bf5\u0002\u1c26\u0002\u1c39\u0002\u1c42\u0002", "\u1c4b\u0002\u1c52\u0002\u1c5b\u0002\u1cd2\u0002\u1cd4\u0002\u1cd6\u0002", "\u1cea\u0002\u1cef\u0002\u1cef\u0002\u1cf4\u0002\u1cf6\u0002\u1cf9\u0002", "\u1cfb\u0002\u1dc2\u0002\u1dfb\u0002\u1dfd\u0002\u1e01\u0002\u2041\u0002", "\u2042\u0002\u2056\u0002\u2056\u0002\u20d2\u0002\u20de\u0002\u20e3\u0002", "\u20e3\u0002\u20e7\u0002\u20f2\u0002\u2cf1\u0002\u2cf3\u0002\u2d81\u0002", "\u2d81\u0002\u2de2\u0002\u2e01\u0002\u302c\u0002\u3031\u0002\u309b\u0002", "\u309c\u0002\ua622\u0002\ua62b\u0002\ua671\u0002\ua671\u0002\ua676\u0002", "\ua67f\u0002\ua6a0\u0002\ua6a1\u0002\ua6f2\u0002\ua6f3\u0002\ua804\u0002", "\ua804\u0002\ua808\u0002\ua808\u0002\ua80d\u0002\ua80d\u0002\ua825\u0002", "\ua829\u0002\ua882\u0002\ua883\u0002\ua8b6\u0002\ua8c7\u0002\ua8d2\u0002", "\ua8db\u0002\ua8e2\u0002\ua8f3\u0002\ua902\u0002\ua90b\u0002\ua928\u0002", "\ua92f\u0002\ua949\u0002\ua955\u0002\ua982\u0002\ua985\u0002\ua9b5\u0002", "\ua9c2\u0002\ua9d2\u0002\ua9db\u0002\ua9e7\u0002\ua9e7\u0002\ua9f2\u0002", "\ua9fb\u0002\uaa2b\u0002\uaa38\u0002\uaa45\u0002\uaa45\u0002\uaa4e\u0002", "\uaa4f\u0002\uaa52\u0002\uaa5b\u0002\uaa7d\u0002\uaa7f\u0002\uaab2\u0002", "\uaab2\u0002\uaab4\u0002\uaab6\u0002\uaab9\u0002\uaaba\u0002\uaac0\u0002", "\uaac1\u0002\uaac3\u0002\uaac3\u0002\uaaed\u0002\uaaf1\u0002\uaaf7\u0002", "\uaaf8\u0002\uabe5\u0002\uabec\u0002\uabee\u0002\uabef\u0002\uabf2\u0002", "\uabfb\u0002\ufb20\u0002\ufb20\u0002\ufe02\u0002\ufe11\u0002\ufe22\u0002", "\ufe31\u0002\ufe35\u0002\ufe36\u0002\ufe4f\u0002\ufe51\u0002\uff12\u0002", "\uff1b\u0002\uff41\u0002\uff41\u0002\u01ff\u0003\u01ff\u0003\u02e2\u0003", "\u02e2\u0003\u0378\u0003\u037c\u0003\u04a2\u0003\u04ab\u0003\u0a03\u0003", "\u0a05\u0003\u0a07\u0003\u0a08\u0003\u0a0e\u0003\u0a11\u0003\u0a3a\u0003", "\u0a3c\u0003\u0a41\u0003\u0a41\u0003\u0ae7\u0003\u0ae8\u0003\u1002\u0003", "\u1004\u0003\u103a\u0003\u1048\u0003\u1068\u0003\u1071\u0003\u1081\u0003", "\u1084\u0003\u10b2\u0003\u10bc\u0003\u10f2\u0003\u10fb\u0003\u1102\u0003", "\u1104\u0003\u1129\u0003\u1136\u0003\u1138\u0003\u1141\u0003\u1175\u0003", "\u1175\u0003\u1182\u0003\u1184\u0003\u11b5\u0003\u11c2\u0003\u11cc\u0003", "\u11ce\u0003\u11d2\u0003\u11db\u0003\u122e\u0003\u1239\u0003\u1240\u0003", "\u1240\u0003\u12e1\u0003\u12ec\u0003\u12f2\u0003\u12fb\u0003\u1302\u0003", "\u1305\u0003\u133e\u0003\u133e\u0003\u1340\u0003\u1346\u0003\u1349\u0003", "\u134a\u0003\u134d\u0003\u134f\u0003\u1359\u0003\u1359\u0003\u1364\u0003", "\u1365\u0003\u1368\u0003\u136e\u0003\u1372\u0003\u1376\u0003\u1437\u0003", "\u1448\u0003\u1452\u0003\u145b\u0003\u14b2\u0003\u14c5\u0003\u14d2\u0003", "\u14db\u0003\u15b1\u0003\u15b7\u0003\u15ba\u0003\u15c2\u0003\u15de\u0003", "\u15df\u0003\u1632\u0003\u1642\u0003\u1652\u0003\u165b\u0003\u16ad\u0003", "\u16b9\u0003\u16c2\u0003\u16cb\u0003\u171f\u0003\u172d\u0003\u1732\u0003", "\u173b\u0003\u18e2\u0003\u18eb\u0003\u1a03\u0003\u1a0c\u0003\u1a35\u0003", "\u1a3b\u0003\u1a3d\u0003\u1a40\u0003\u1a49\u0003\u1a49\u0003\u1a53\u0003", "\u1a5d\u0003\u1a8c\u0003\u1a9b\u0003\u1c31\u0003\u1c38\u0003\u1c3a\u0003", "\u1c41\u0003\u1c52\u0003\u1c5b\u0003\u1c94\u0003\u1ca9\u0003\u1cab\u0003", "\u1cb8\u0003\u1d33\u0003\u1d38\u0003\u1d3c\u0003\u1d3c\u0003\u1d3e\u0003", "\u1d3f\u0003\u1d41\u0003\u1d47\u0003\u1d49\u0003\u1d49\u0003\u1d52\u0003", "\u1d5b\u0003\u6a62\u0003\u6a6b\u0003\u6af2\u0003\u6af6\u0003\u6b32\u0003", "\u6b38\u0003\u6b52\u0003\u6b5b\u0003\u6f53\u0003\u6f80\u0003\u6f91\u0003", "\u6f94\u0003\ubc9f\u0003\ubca0\u0003\ud167\u0003\ud16b\u0003\ud16f\u0003", "\ud174\u0003\ud17d\u0003\ud184\u0003\ud187\u0003\ud18d\u0003\ud1ac\u0003", "\ud1af\u0003\ud244\u0003\ud246\u0003\ud7d0\u0003\ud801\u0003\uda02\u0003", "\uda38\u0003\uda3d\u0003\uda6e\u0003\uda77\u0003\uda77\u0003\uda86\u0003", "\uda86\u0003\uda9d\u0003\udaa1\u0003\udaa3\u0003\udab1\u0003\ue002\u0003", "\ue008\u0003\ue00a\u0003\ue01a\u0003\ue01d\u0003\ue023\u0003\ue025\u0003", "\ue026\u0003\ue028\u0003\ue02c\u0003\ue8d2\u0003\ue8d8\u0003\ue946\u0003", "\ue94c\u0003\ue952\u0003\ue95b\u0003\u0102\u0010\u01f1\u0010\u039d\u0002", "\u0003\u0003\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002", "\u0007\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002", "\u000b\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002", "\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002", "\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002", "\u0017\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0002", "\u001b\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002\u0002\u0002", "\u001f\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002\u0002\u0002", "#\u0003\u0002\u0002\u0002\u0002%\u0003\u0002\u0002\u0002\u0002\'\u0003", "\u0002\u0002\u0002\u0002)\u0003\u0002\u0002\u0002\u0002+\u0003\u0002", "\u0002\u0002\u0002-\u0003\u0002\u0002\u0002\u0002/\u0003\u0002\u0002", "\u0002\u00021\u0003\u0002\u0002\u0002\u00023\u0003\u0002\u0002\u0002", "\u00025\u0003\u0002\u0002\u0002\u00027\u0003\u0002\u0002\u0002\u0002", "9\u0003\u0002\u0002\u0002\u0002;\u0003\u0002\u0002\u0002\u0002=\u0003", "\u0002\u0002\u0002\u0002?\u0003\u0002\u0002\u0002\u0002A\u0003\u0002", "\u0002\u0002\u0002C\u0003\u0002\u0002\u0002\u0002E\u0003\u0002\u0002", "\u0002\u0002G\u0003\u0002\u0002\u0002\u0002I\u0003\u0002\u0002\u0002", "\u0002K\u0003\u0002\u0002\u0002\u0002M\u0003\u0002\u0002\u0002\u0002", "O\u0003\u0002\u0002\u0002\u0002Q\u0003\u0002\u0002\u0002\u0002S\u0003", "\u0002\u0002\u0002\u0002U\u0003\u0002\u0002\u0002\u0002W\u0003\u0002", "\u0002\u0002\u0002Y\u0003\u0002\u0002\u0002\u0002[\u0003\u0002\u0002", "\u0002\u0002]\u0003\u0002\u0002\u0002\u0002_\u0003\u0002\u0002\u0002", "\u0002a\u0003\u0002\u0002\u0002\u0002c\u0003\u0002\u0002\u0002\u0002", "e\u0003\u0002\u0002\u0002\u0002g\u0003\u0002\u0002\u0002\u0002i\u0003", "\u0002\u0002\u0002\u0002k\u0003\u0002\u0002\u0002\u0002m\u0003\u0002", "\u0002\u0002\u0002o\u0003\u0002\u0002\u0002\u0002q\u0003\u0002\u0002", "\u0002\u0002s\u0003\u0002\u0002\u0002\u0002u\u0003\u0002\u0002\u0002", "\u0002w\u0003\u0002\u0002\u0002\u0002y\u0003\u0002\u0002\u0002\u0002", "{\u0003\u0002\u0002\u0002\u0002}\u0003\u0002\u0002\u0002\u0002\u007f", "\u0003\u0002\u0002\u0002\u0002\u0081\u0003\u0002\u0002\u0002\u0002\u0083", "\u0003\u0002\u0002\u0002\u0002\u0085\u0003\u0002\u0002\u0002\u0002\u0087", "\u0003\u0002\u0002\u0002\u0002\u0089\u0003\u0002\u0002\u0002\u0002\u008b", "\u0003\u0002\u0002\u0002\u0002\u008d\u0003\u0002\u0002\u0002\u0002\u008f", "\u0003\u0002\u0002\u0002\u0002\u0091\u0003\u0002\u0002\u0002\u0002\u0093", "\u0003\u0002\u0002\u0002\u0002\u0095\u0003\u0002\u0002\u0002\u0002\u0097", "\u0003\u0002\u0002\u0002\u0002\u0099\u0003\u0002\u0002\u0002\u0002\u009b", "\u0003\u0002\u0002\u0002\u0002\u009d\u0003\u0002\u0002\u0002\u0002\u009f", "\u0003\u0002\u0002\u0002\u0002\u00a1\u0003\u0002\u0002\u0002\u0002\u00a3", "\u0003\u0002\u0002\u0002\u0002\u00a5\u0003\u0002\u0002\u0002\u0002\u00a7", "\u0003\u0002\u0002\u0002\u0002\u00a9\u0003\u0002\u0002\u0002\u0002\u00ab", "\u0003\u0002\u0002\u0002\u0002\u00ad\u0003\u0002\u0002\u0002\u0002\u00af", "\u0003\u0002\u0002\u0002\u0002\u00b1\u0003\u0002\u0002\u0002\u0002\u00b3", "\u0003\u0002\u0002\u0002\u0002\u00b5\u0003\u0002\u0002\u0002\u0002\u00b7", "\u0003\u0002\u0002\u0002\u0002\u00b9\u0003\u0002\u0002\u0002\u0002\u00bb", "\u0003\u0002\u0002\u0002\u0002\u00bd\u0003\u0002\u0002\u0002\u0002\u00bf", "\u0003\u0002\u0002\u0002\u0002\u00c1\u0003\u0002\u0002\u0002\u0002\u00c3", "\u0003\u0002\u0002\u0002\u0003\u0101\u0003\u0002\u0002\u0002\u0005\u0106", "\u0003\u0002\u0002\u0002\u0007\u010c\u0003\u0002\u0002\u0002\t\u010e", "\u0003\u0002\u0002\u0002\u000b\u0112\u0003\u0002\u0002\u0002\r\u0119", "\u0003\u0002\u0002\u0002\u000f\u011f\u0003\u0002\u0002\u0002\u0011\u0124", "\u0003\u0002\u0002\u0002\u0013\u012b\u0003\u0002\u0002\u0002\u0015\u012e", "\u0003\u0002\u0002\u0002\u0017\u0135\u0003\u0002\u0002\u0002\u0019\u013e", "\u0003\u0002\u0002\u0002\u001b\u0145\u0003\u0002\u0002\u0002\u001d\u0148", "\u0003\u0002\u0002\u0002\u001f\u014d\u0003\u0002\u0002\u0002!\u0152", "\u0003\u0002\u0002\u0002#\u0158\u0003\u0002\u0002\u0002%\u015c\u0003", "\u0002\u0002\u0002\'\u015f\u0003\u0002\u0002\u0002)\u0163\u0003\u0002", "\u0002\u0002+\u016b\u0003\u0002\u0002\u0002-\u0170\u0003\u0002\u0002", "\u0002/\u0177\u0003\u0002\u0002\u00021\u017e\u0003\u0002\u0002\u0002", "3\u0181\u0003\u0002\u0002\u00025\u0185\u0003\u0002\u0002\u00027\u0189", "\u0003\u0002\u0002\u00029\u018c\u0003\u0002\u0002\u0002;\u0191\u0003", "\u0002\u0002\u0002=\u0196\u0003\u0002\u0002\u0002?\u019c\u0003\u0002", "\u0002\u0002A\u01a2\u0003\u0002\u0002\u0002C\u01a8\u0003\u0002\u0002", "\u0002E\u01ac\u0003\u0002\u0002\u0002G\u01b1\u0003\u0002\u0002\u0002", "I\u01ba\u0003\u0002\u0002\u0002K\u01c0\u0003\u0002\u0002\u0002M\u01c6", "\u0003\u0002\u0002\u0002O\u01d8\u0003\u0002\u0002\u0002Q\u01dc\u0003", "\u0002\u0002\u0002S\u01e8\u0003\u0002\u0002\u0002U\u01f3\u0003\u0002", "\u0002\u0002W\u0205\u0003\u0002\u0002\u0002Y\u0207\u0003\u0002\u0002", "\u0002[\u020e\u0003\u0002\u0002\u0002]\u0215\u0003\u0002\u0002\u0002", "_\u021e\u0003\u0002\u0002\u0002a\u0222\u0003\u0002\u0002\u0002c\u0226", "\u0003\u0002\u0002\u0002e\u0228\u0003\u0002\u0002\u0002g\u022c\u0003", "\u0002\u0002\u0002i\u022e\u0003\u0002\u0002\u0002k\u0231\u0003\u0002", "\u0002\u0002m\u0234\u0003\u0002\u0002\u0002o\u0236\u0003\u0002\u0002", "\u0002q\u0238\u0003\u0002\u0002\u0002s\u023a\u0003\u0002\u0002\u0002", "u\u023d\u0003\u0002\u0002\u0002w\u023f\u0003\u0002\u0002\u0002y\u0242", "\u0003\u0002\u0002\u0002{\u0245\u0003\u0002\u0002\u0002}\u0247\u0003", "\u0002\u0002\u0002\u007f\u0249\u0003\u0002\u0002\u0002\u0081\u024b\u0003", "\u0002\u0002\u0002\u0083\u024e\u0003\u0002\u0002\u0002\u0085\u0251\u0003", "\u0002\u0002\u0002\u0087\u0253\u0003\u0002\u0002\u0002\u0089\u0255\u0003", "\u0002\u0002\u0002\u008b\u0257\u0003\u0002\u0002\u0002\u008d\u0259\u0003", "\u0002\u0002\u0002\u008f\u025c\u0003\u0002\u0002\u0002\u0091\u025e\u0003", "\u0002\u0002\u0002\u0093\u0261\u0003\u0002\u0002\u0002\u0095\u0264\u0003", "\u0002\u0002\u0002\u0097\u0266\u0003\u0002\u0002\u0002\u0099\u0268\u0003", "\u0002\u0002\u0002\u009b\u026b\u0003\u0002\u0002\u0002\u009d\u026e\u0003", "\u0002\u0002\u0002\u009f\u0271\u0003\u0002\u0002\u0002\u00a1\u0274\u0003", "\u0002\u0002\u0002\u00a3\u0277\u0003\u0002\u0002\u0002\u00a5\u0279\u0003", "\u0002\u0002\u0002\u00a7\u027c\u0003\u0002\u0002\u0002\u00a9\u027f\u0003", "\u0002\u0002\u0002\u00ab\u0282\u0003\u0002\u0002\u0002\u00ad\u0285\u0003", "\u0002\u0002\u0002\u00af\u0288\u0003\u0002\u0002\u0002\u00b1\u028b\u0003", "\u0002\u0002\u0002\u00b3\u028e\u0003\u0002\u0002\u0002\u00b5\u0291\u0003", "\u0002\u0002\u0002\u00b7\u0294\u0003\u0002\u0002\u0002\u00b9\u0297\u0003", "\u0002\u0002\u0002\u00bb\u029b\u0003\u0002\u0002\u0002\u00bd\u029f\u0003", "\u0002\u0002\u0002\u00bf\u02a3\u0003\u0002\u0002\u0002\u00c1\u02aa\u0003", "\u0002\u0002\u0002\u00c3\u02ae\u0003\u0002\u0002\u0002\u00c5\u02c2\u0003", "\u0002\u0002\u0002\u00c7\u02de\u0003\u0002\u0002\u0002\u00c9\u02e2\u0003", "\u0002\u0002\u0002\u00cb\u02e4\u0003\u0002\u0002\u0002\u00cd\u02ea\u0003", "\u0002\u0002\u0002\u00cf\u02ec\u0003\u0002\u0002\u0002\u00d1\u02ee\u0003", "\u0002\u0002\u0002\u00d3\u02f0\u0003\u0002\u0002\u0002\u00d5\u02f2\u0003", "\u0002\u0002\u0002\u00d7\u02f4\u0003\u0002\u0002\u0002\u00d9\u02fd\u0003", "\u0002\u0002\u0002\u00db\u0301\u0003\u0002\u0002\u0002\u00dd\u0306\u0003", "\u0002\u0002\u0002\u00df\u030a\u0003\u0002\u0002\u0002\u00e1\u0310\u0003", "\u0002\u0002\u0002\u00e3\u032b\u0003\u0002\u0002\u0002\u00e5\u0347\u0003", "\u0002\u0002\u0002\u00e7\u034b\u0003\u0002\u0002\u0002\u00e9\u034e\u0003", "\u0002\u0002\u0002\u00eb\u0351\u0003\u0002\u0002\u0002\u00ed\u0354\u0003", "\u0002\u0002\u0002\u00ef\u0356\u0003\u0002\u0002\u0002\u00f1\u035a\u0003", "\u0002\u0002\u0002\u00f3\u035e\u0003\u0002\u0002\u0002\u00f5\u0365\u0003", "\u0002\u0002\u0002\u00f7\u0370\u0003\u0002\u0002\u0002\u00f9\u0372\u0003", "\u0002\u0002\u0002\u00fb\u0376\u0003\u0002\u0002\u0002\u00fd\u037b\u0003", "\u0002\u0002\u0002\u00ff\u0102\u0005S*\u0002\u0100\u0102\u0005U+\u0002", "\u0101\u00ff\u0003\u0002\u0002\u0002\u0101\u0100\u0003\u0002\u0002\u0002", "\u0102\u0004\u0003\u0002\u0002\u0002\u0103\u0107\u0005\u0007\u0004\u0002", "\u0104\u0107\u0005_0\u0002\u0105\u0107\u0005a1\u0002\u0106\u0103\u0003", "\u0002\u0002\u0002\u0106\u0104\u0003\u0002\u0002\u0002\u0106\u0105\u0003", "\u0002\u0002\u0002\u0107\u0006\u0003\u0002\u0002\u0002\u0108\u010d\u0005", "W,\u0002\u0109\u010d\u0005Y-\u0002\u010a\u010d\u0005[.\u0002\u010b\u010d", "\u0005]/\u0002\u010c\u0108\u0003\u0002\u0002\u0002\u010c\u0109\u0003", "\u0002\u0002\u0002\u010c\u010a\u0003\u0002\u0002\u0002\u010c\u010b\u0003", "\u0002\u0002\u0002\u010d\b\u0003\u0002\u0002\u0002\u010e\u010f\u0007", "f\u0002\u0002\u010f\u0110\u0007g\u0002\u0002\u0110\u0111\u0007h\u0002", "\u0002\u0111\n\u0003\u0002\u0002\u0002\u0112\u0113\u0007t\u0002\u0002", "\u0113\u0114\u0007g\u0002\u0002\u0114\u0115\u0007v\u0002\u0002\u0115", "\u0116\u0007w\u0002\u0002\u0116\u0117\u0007t\u0002\u0002\u0117\u0118", "\u0007p\u0002\u0002\u0118\f\u0003\u0002\u0002\u0002\u0119\u011a\u0007", "t\u0002\u0002\u011a\u011b\u0007c\u0002\u0002\u011b\u011c\u0007k\u0002", "\u0002\u011c\u011d\u0007u\u0002\u0002\u011d\u011e\u0007g\u0002\u0002", "\u011e\u000e\u0003\u0002\u0002\u0002\u011f\u0120\u0007h\u0002\u0002", "\u0120\u0121\u0007t\u0002\u0002\u0121\u0122\u0007q\u0002\u0002\u0122", "\u0123\u0007o\u0002\u0002\u0123\u0010\u0003\u0002\u0002\u0002\u0124", "\u0125\u0007k\u0002\u0002\u0125\u0126\u0007o\u0002\u0002\u0126\u0127", "\u0007r\u0002\u0002\u0127\u0128\u0007q\u0002\u0002\u0128\u0129\u0007", "t\u0002\u0002\u0129\u012a\u0007v\u0002\u0002\u012a\u0012\u0003\u0002", "\u0002\u0002\u012b\u012c\u0007c\u0002\u0002\u012c\u012d\u0007u\u0002", "\u0002\u012d\u0014\u0003\u0002\u0002\u0002\u012e\u012f\u0007i\u0002", "\u0002\u012f\u0130\u0007n\u0002\u0002\u0130\u0131\u0007q\u0002\u0002", "\u0131\u0132\u0007d\u0002\u0002\u0132\u0133\u0007c\u0002\u0002\u0133", "\u0134\u0007n\u0002\u0002\u0134\u0016\u0003\u0002\u0002\u0002\u0135", "\u0136\u0007p\u0002\u0002\u0136\u0137\u0007q\u0002\u0002\u0137\u0138", "\u0007p\u0002\u0002\u0138\u0139\u0007n\u0002\u0002\u0139\u013a\u0007", "q\u0002\u0002\u013a\u013b\u0007e\u0002\u0002\u013b\u013c\u0007c\u0002", "\u0002\u013c\u013d\u0007n\u0002\u0002\u013d\u0018\u0003\u0002\u0002", "\u0002\u013e\u013f\u0007c\u0002\u0002\u013f\u0140\u0007u\u0002\u0002", "\u0140\u0141\u0007u\u0002\u0002\u0141\u0142\u0007g\u0002\u0002\u0142", "\u0143\u0007t\u0002\u0002\u0143\u0144\u0007v\u0002\u0002\u0144\u001a", "\u0003\u0002\u0002\u0002\u0145\u0146\u0007k\u0002\u0002\u0146\u0147", "\u0007h\u0002\u0002\u0147\u001c\u0003\u0002\u0002\u0002\u0148\u0149", "\u0007g\u0002\u0002\u0149\u014a\u0007n\u0002\u0002\u014a\u014b\u0007", "k\u0002\u0002\u014b\u014c\u0007h\u0002\u0002\u014c\u001e\u0003\u0002", "\u0002\u0002\u014d\u014e\u0007g\u0002\u0002\u014e\u014f\u0007n\u0002", "\u0002\u014f\u0150\u0007u\u0002\u0002\u0150\u0151\u0007g\u0002\u0002", "\u0151 \u0003\u0002\u0002\u0002\u0152\u0153\u0007y\u0002\u0002\u0153", "\u0154\u0007j\u0002\u0002\u0154\u0155\u0007k\u0002\u0002\u0155\u0156", "\u0007n\u0002\u0002\u0156\u0157\u0007g\u0002\u0002\u0157\"\u0003\u0002", "\u0002\u0002\u0158\u0159\u0007h\u0002\u0002\u0159\u015a\u0007q\u0002", "\u0002\u015a\u015b\u0007t\u0002\u0002\u015b$\u0003\u0002\u0002\u0002", "\u015c\u015d\u0007k\u0002\u0002\u015d\u015e\u0007p\u0002\u0002\u015e", "&\u0003\u0002\u0002\u0002\u015f\u0160\u0007v\u0002\u0002\u0160\u0161", "\u0007t\u0002\u0002\u0161\u0162\u0007{\u0002\u0002\u0162(\u0003\u0002", "\u0002\u0002\u0163\u0164\u0007h\u0002\u0002\u0164\u0165\u0007k\u0002", "\u0002\u0165\u0166\u0007p\u0002\u0002\u0166\u0167\u0007c\u0002\u0002", "\u0167\u0168\u0007n\u0002\u0002\u0168\u0169\u0007n\u0002\u0002\u0169", "\u016a\u0007{\u0002\u0002\u016a*\u0003\u0002\u0002\u0002\u016b\u016c", "\u0007y\u0002\u0002\u016c\u016d\u0007k\u0002\u0002\u016d\u016e\u0007", "v\u0002\u0002\u016e\u016f\u0007j\u0002\u0002\u016f,\u0003\u0002\u0002", "\u0002\u0170\u0171\u0007g\u0002\u0002\u0171\u0172\u0007z\u0002\u0002", "\u0172\u0173\u0007e\u0002\u0002\u0173\u0174\u0007g\u0002\u0002\u0174", "\u0175\u0007r\u0002\u0002\u0175\u0176\u0007v\u0002\u0002\u0176.\u0003", "\u0002\u0002\u0002\u0177\u0178\u0007n\u0002\u0002\u0178\u0179\u0007", "c\u0002\u0002\u0179\u017a\u0007o\u0002\u0002\u017a\u017b\u0007d\u0002", "\u0002\u017b\u017c\u0007f\u0002\u0002\u017c\u017d\u0007c\u0002\u0002", "\u017d0\u0003\u0002\u0002\u0002\u017e\u017f\u0007q\u0002\u0002\u017f", "\u0180\u0007t\u0002\u0002\u01802\u0003\u0002\u0002\u0002\u0181\u0182", "\u0007c\u0002\u0002\u0182\u0183\u0007p\u0002\u0002\u0183\u0184\u0007", "f\u0002\u0002\u01844\u0003\u0002\u0002\u0002\u0185\u0186\u0007p\u0002", "\u0002\u0186\u0187\u0007q\u0002\u0002\u0187\u0188\u0007v\u0002\u0002", "\u01886\u0003\u0002\u0002\u0002\u0189\u018a\u0007k\u0002\u0002\u018a", "\u018b\u0007u\u0002\u0002\u018b8\u0003\u0002\u0002\u0002\u018c\u018d", "\u0007P\u0002\u0002\u018d\u018e\u0007q\u0002\u0002\u018e\u018f\u0007", "p\u0002\u0002\u018f\u0190\u0007g\u0002\u0002\u0190:\u0003\u0002\u0002", "\u0002\u0191\u0192\u0007V\u0002\u0002\u0192\u0193\u0007t\u0002\u0002", "\u0193\u0194\u0007w\u0002\u0002\u0194\u0195\u0007g\u0002\u0002\u0195", "<\u0003\u0002\u0002\u0002\u0196\u0197\u0007H\u0002\u0002\u0197\u0198", "\u0007c\u0002\u0002\u0198\u0199\u0007n\u0002\u0002\u0199\u019a\u0007", "u\u0002\u0002\u019a\u019b\u0007g\u0002\u0002\u019b>\u0003\u0002\u0002", "\u0002\u019c\u019d\u0007e\u0002\u0002\u019d\u019e\u0007n\u0002\u0002", "\u019e\u019f\u0007c\u0002\u0002\u019f\u01a0\u0007u\u0002\u0002\u01a0", "\u01a1\u0007u\u0002\u0002\u01a1@\u0003\u0002\u0002\u0002\u01a2\u01a3", "\u0007{\u0002\u0002\u01a3\u01a4\u0007k\u0002\u0002\u01a4\u01a5\u0007", "g\u0002\u0002\u01a5\u01a6\u0007n\u0002\u0002\u01a6\u01a7\u0007f\u0002", "\u0002\u01a7B\u0003\u0002\u0002\u0002\u01a8\u01a9\u0007f\u0002\u0002", "\u01a9\u01aa\u0007g\u0002\u0002\u01aa\u01ab\u0007n\u0002\u0002\u01ab", "D\u0003\u0002\u0002\u0002\u01ac\u01ad\u0007r\u0002\u0002\u01ad\u01ae", "\u0007c\u0002\u0002\u01ae\u01af\u0007u\u0002\u0002\u01af\u01b0\u0007", "u\u0002\u0002\u01b0F\u0003\u0002\u0002\u0002\u01b1\u01b2\u0007e\u0002", "\u0002\u01b2\u01b3\u0007q\u0002\u0002\u01b3\u01b4\u0007p\u0002\u0002", "\u01b4\u01b5\u0007v\u0002\u0002\u01b5\u01b6\u0007k\u0002\u0002\u01b6", "\u01b7\u0007p\u0002\u0002\u01b7\u01b8\u0007w\u0002\u0002\u01b8\u01b9", "\u0007g\u0002\u0002\u01b9H\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007", "d\u0002\u0002\u01bb\u01bc\u0007t\u0002\u0002\u01bc\u01bd\u0007g\u0002", "\u0002\u01bd\u01be\u0007c\u0002\u0002\u01be\u01bf\u0007m\u0002\u0002", "\u01bfJ\u0003\u0002\u0002\u0002\u01c0\u01c1\u0007c\u0002\u0002\u01c1", "\u01c2\u0007u\u0002\u0002\u01c2\u01c3\u0007{\u0002\u0002\u01c3\u01c4", "\u0007p\u0002\u0002\u01c4\u01c5\u0007e\u0002\u0002\u01c5L\u0003\u0002", "\u0002\u0002\u01c6\u01c7\u0007c\u0002\u0002\u01c7\u01c8\u0007y\u0002", "\u0002\u01c8\u01c9\u0007c\u0002\u0002\u01c9\u01ca\u0007k\u0002\u0002", "\u01ca\u01cb\u0007v\u0002\u0002\u01cbN\u0003\u0002\u0002\u0002\u01cc", "\u01cd\u0006(\u0002\u0002\u01cd\u01d9\u0005\u00f1y\u0002\u01ce\u01d0", "\u0007\u000f\u0002\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002\u01cf\u01d0", "\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002\u01d1\u01d4", "\u0007\f\u0002\u0002\u01d2\u01d4\u0004\u000e\u000f\u0002\u01d3\u01cf", "\u0003\u0002\u0002\u0002\u01d3\u01d2\u0003\u0002\u0002\u0002\u01d4\u01d6", "\u0003\u0002\u0002\u0002\u01d5\u01d7\u0005\u00f1y\u0002\u01d6\u01d5", "\u0003\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01d9", "\u0003\u0002\u0002\u0002\u01d8\u01cc\u0003\u0002\u0002\u0002\u01d8\u01d3", "\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002\u01da\u01db", "\b(\u0002\u0002\u01dbP\u0003\u0002\u0002\u0002\u01dc\u01e0\u0005\u00fb", "~\u0002\u01dd\u01df\u0005\u00fd\u007f\u0002\u01de\u01dd\u0003\u0002", "\u0002\u0002\u01df\u01e2\u0003\u0002\u0002\u0002\u01e0\u01de\u0003\u0002", "\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1R\u0003\u0002", "\u0002\u0002\u01e2\u01e0\u0003\u0002\u0002\u0002\u01e3\u01e9\t\u0002", "\u0002\u0002\u01e4\u01e5\t\u0003\u0002\u0002\u01e5\u01e9\t\u0004\u0002", "\u0002\u01e6\u01e7\t\u0004\u0002\u0002\u01e7\u01e9\t\u0003\u0002\u0002", "\u01e8\u01e3\u0003\u0002\u0002\u0002\u01e8\u01e4\u0003\u0002\u0002\u0002", "\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e8\u01e9\u0003\u0002\u0002\u0002", "\u01e9\u01ec\u0003\u0002\u0002\u0002\u01ea\u01ed\u0005\u00c5c\u0002", "\u01eb\u01ed\u0005\u00c7d\u0002\u01ec\u01ea\u0003\u0002\u0002\u0002", "\u01ec\u01eb\u0003\u0002\u0002\u0002\u01edT\u0003\u0002\u0002\u0002", "\u01ee\u01f4\t\u0005\u0002\u0002\u01ef\u01f0\t\u0005\u0002\u0002\u01f0", "\u01f4\t\u0004\u0002\u0002\u01f1\u01f2\t\u0004\u0002\u0002\u01f2\u01f4", "\t\u0005\u0002\u0002\u01f3\u01ee\u0003\u0002\u0002\u0002\u01f3\u01ef", "\u0003\u0002\u0002\u0002\u01f3\u01f1\u0003\u0002\u0002\u0002\u01f4\u01f7", "\u0003\u0002\u0002\u0002\u01f5\u01f8\u0005\u00e3r\u0002\u01f6\u01f8", "\u0005\u00e5s\u0002\u01f7\u01f5\u0003\u0002\u0002\u0002\u01f7\u01f6", "\u0003\u0002\u0002\u0002\u01f8V\u0003\u0002\u0002\u0002\u01f9\u01fd", "\u0005\u00cfh\u0002\u01fa\u01fc\u0005\u00d1i\u0002\u01fb\u01fa\u0003", "\u0002\u0002\u0002\u01fc\u01ff\u0003\u0002\u0002\u0002\u01fd\u01fb\u0003", "\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002\u0002\u01fe\u0206\u0003", "\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002\u0200\u0202\u0007", "2\u0002\u0002\u0201\u0200\u0003\u0002\u0002\u0002\u0202\u0203\u0003", "\u0002\u0002\u0002\u0203\u0201\u0003\u0002\u0002\u0002\u0203\u0204\u0003", "\u0002\u0002\u0002\u0204\u0206\u0003\u0002\u0002\u0002\u0205\u01f9\u0003", "\u0002\u0002\u0002\u0205\u0201\u0003\u0002\u0002\u0002\u0206X\u0003", "\u0002\u0002\u0002\u0207\u0208\u00072\u0002\u0002\u0208\u020a\t\u0006", "\u0002\u0002\u0209\u020b\u0005\u00d3j\u0002\u020a\u0209\u0003\u0002", "\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c\u020a\u0003\u0002", "\u0002\u0002\u020c\u020d\u0003\u0002\u0002\u0002\u020dZ\u0003\u0002", "\u0002\u0002\u020e\u020f\u00072\u0002\u0002\u020f\u0211\t\u0007\u0002", "\u0002\u0210\u0212\u0005\u00d5k\u0002\u0211\u0210\u0003\u0002\u0002", "\u0002\u0212\u0213\u0003\u0002\u0002\u0002\u0213\u0211\u0003\u0002\u0002", "\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\\\u0003\u0002\u0002", "\u0002\u0215\u0216\u00072\u0002\u0002\u0216\u0218\t\u0005\u0002\u0002", "\u0217\u0219\u0005\u00d7l\u0002\u0218\u0217\u0003\u0002\u0002\u0002", "\u0219\u021a\u0003\u0002\u0002\u0002\u021a\u0218\u0003\u0002\u0002\u0002", "\u021a\u021b\u0003\u0002\u0002\u0002\u021b^\u0003\u0002\u0002\u0002", "\u021c\u021f\u0005\u00d9m\u0002\u021d\u021f\u0005\u00dbn\u0002\u021e", "\u021c\u0003\u0002\u0002\u0002\u021e\u021d\u0003\u0002\u0002\u0002\u021f", "`\u0003\u0002\u0002\u0002\u0220\u0223\u0005_0\u0002\u0221\u0223\u0005", "\u00ddo\u0002\u0222\u0220\u0003\u0002\u0002\u0002\u0222\u0221\u0003", "\u0002\u0002\u0002\u0223\u0224\u0003\u0002\u0002\u0002\u0224\u0225\t", "\b\u0002\u0002\u0225b\u0003\u0002\u0002\u0002\u0226\u0227\u00070\u0002", "\u0002\u0227d\u0003\u0002\u0002\u0002\u0228\u0229\u00070\u0002\u0002", "\u0229\u022a\u00070\u0002\u0002\u022a\u022b\u00070\u0002\u0002\u022b", "f\u0003\u0002\u0002\u0002\u022c\u022d\u0007,\u0002\u0002\u022dh\u0003", "\u0002\u0002\u0002\u022e\u022f\u0007*\u0002\u0002\u022f\u0230\b5\u0003", "\u0002\u0230j\u0003\u0002\u0002\u0002\u0231\u0232\u0007+\u0002\u0002", "\u0232\u0233\b6\u0004\u0002\u0233l\u0003\u0002\u0002\u0002\u0234\u0235", "\u0007.\u0002\u0002\u0235n\u0003\u0002\u0002\u0002\u0236\u0237\u0007", "<\u0002\u0002\u0237p\u0003\u0002\u0002\u0002\u0238\u0239\u0007=\u0002", "\u0002\u0239r\u0003\u0002\u0002\u0002\u023a\u023b\u0007,\u0002\u0002", "\u023b\u023c\u0007,\u0002\u0002\u023ct\u0003\u0002\u0002\u0002\u023d", "\u023e\u0007?\u0002\u0002\u023ev\u0003\u0002\u0002\u0002\u023f\u0240", "\u0007]\u0002\u0002\u0240\u0241\b<\u0005\u0002\u0241x\u0003\u0002\u0002", "\u0002\u0242\u0243\u0007_\u0002\u0002\u0243\u0244\b=\u0006\u0002\u0244", "z\u0003\u0002\u0002\u0002\u0245\u0246\u0007~\u0002\u0002\u0246|\u0003", "\u0002\u0002\u0002\u0247\u0248\u0007`\u0002\u0002\u0248~\u0003\u0002", "\u0002\u0002\u0249\u024a\u0007(\u0002\u0002\u024a\u0080\u0003\u0002", "\u0002\u0002\u024b\u024c\u0007>\u0002\u0002\u024c\u024d\u0007>\u0002", "\u0002\u024d\u0082\u0003\u0002\u0002\u0002\u024e\u024f\u0007@\u0002", "\u0002\u024f\u0250\u0007@\u0002\u0002\u0250\u0084\u0003\u0002\u0002", "\u0002\u0251\u0252\u0007-\u0002\u0002\u0252\u0086\u0003\u0002\u0002", "\u0002\u0253\u0254\u0007/\u0002\u0002\u0254\u0088\u0003\u0002\u0002", "\u0002\u0255\u0256\u00071\u0002\u0002\u0256\u008a\u0003\u0002\u0002", "\u0002\u0257\u0258\u0007\'\u0002\u0002\u0258\u008c\u0003\u0002\u0002", "\u0002\u0259\u025a\u00071\u0002\u0002\u025a\u025b\u00071\u0002\u0002", "\u025b\u008e\u0003\u0002\u0002\u0002\u025c\u025d\u0007\u0080\u0002\u0002", "\u025d\u0090\u0003\u0002\u0002\u0002\u025e\u025f\u0007}\u0002\u0002", "\u025f\u0260\bI\u0007\u0002\u0260\u0092\u0003\u0002\u0002\u0002\u0261", "\u0262\u0007\u007f\u0002\u0002\u0262\u0263\bJ\b\u0002\u0263\u0094\u0003", "\u0002\u0002\u0002\u0264\u0265\u0007>\u0002\u0002\u0265\u0096\u0003", "\u0002\u0002\u0002\u0266\u0267\u0007@\u0002\u0002\u0267\u0098\u0003", "\u0002\u0002\u0002\u0268\u0269\u0007?\u0002\u0002\u0269\u026a\u0007", "?\u0002\u0002\u026a\u009a\u0003\u0002\u0002\u0002\u026b\u026c\u0007", "@\u0002\u0002\u026c\u026d\u0007?\u0002\u0002\u026d\u009c\u0003\u0002", "\u0002\u0002\u026e\u026f\u0007>\u0002\u0002\u026f\u0270\u0007?\u0002", "\u0002\u0270\u009e\u0003\u0002\u0002\u0002\u0271\u0272\u0007>\u0002", "\u0002\u0272\u0273\u0007@\u0002\u0002\u0273\u00a0\u0003\u0002\u0002", "\u0002\u0274\u0275\u0007#\u0002\u0002\u0275\u0276\u0007?\u0002\u0002", "\u0276\u00a2\u0003\u0002\u0002\u0002\u0277\u0278\u0007B\u0002\u0002", "\u0278\u00a4\u0003\u0002\u0002\u0002\u0279\u027a\u0007/\u0002\u0002", "\u027a\u027b\u0007@\u0002\u0002\u027b\u00a6\u0003\u0002\u0002\u0002", "\u027c\u027d\u0007-\u0002\u0002\u027d\u027e\u0007?\u0002\u0002\u027e", "\u00a8\u0003\u0002\u0002\u0002\u027f\u0280\u0007/\u0002\u0002\u0280", "\u0281\u0007?\u0002\u0002\u0281\u00aa\u0003\u0002\u0002\u0002\u0282", "\u0283\u0007,\u0002\u0002\u0283\u0284\u0007?\u0002\u0002\u0284\u00ac", "\u0003\u0002\u0002\u0002\u0285\u0286\u0007B\u0002\u0002\u0286\u0287", "\u0007?\u0002\u0002\u0287\u00ae\u0003\u0002\u0002\u0002\u0288\u0289", "\u00071\u0002\u0002\u0289\u028a\u0007?\u0002\u0002\u028a\u00b0\u0003", "\u0002\u0002\u0002\u028b\u028c\u0007\'\u0002\u0002\u028c\u028d\u0007", "?\u0002\u0002\u028d\u00b2\u0003\u0002\u0002\u0002\u028e\u028f\u0007", "(\u0002\u0002\u028f\u0290\u0007?\u0002\u0002\u0290\u00b4\u0003\u0002", "\u0002\u0002\u0291\u0292\u0007~\u0002\u0002\u0292\u0293\u0007?\u0002", "\u0002\u0293\u00b6\u0003\u0002\u0002\u0002\u0294\u0295\u0007`\u0002", "\u0002\u0295\u0296\u0007?\u0002\u0002\u0296\u00b8\u0003\u0002\u0002", "\u0002\u0297\u0298\u0007>\u0002\u0002\u0298\u0299\u0007>\u0002\u0002", "\u0299\u029a\u0007?\u0002\u0002\u029a\u00ba\u0003\u0002\u0002\u0002", "\u029b\u029c\u0007@\u0002\u0002\u029c\u029d\u0007@\u0002\u0002\u029d", "\u029e\u0007?\u0002\u0002\u029e\u00bc\u0003\u0002\u0002\u0002\u029f", "\u02a0\u0007,\u0002\u0002\u02a0\u02a1\u0007,\u0002\u0002\u02a1\u02a2", "\u0007?\u0002\u0002\u02a2\u00be\u0003\u0002\u0002\u0002\u02a3\u02a4", "\u00071\u0002\u0002\u02a4\u02a5\u00071\u0002\u0002\u02a5\u02a6\u0007", "?\u0002\u0002\u02a6\u00c0\u0003\u0002\u0002\u0002\u02a7\u02ab\u0005", "\u00f1y\u0002\u02a8\u02ab\u0005\u00f3z\u0002\u02a9\u02ab\u0005\u00f5", "{\u0002\u02aa\u02a7\u0003\u0002\u0002\u0002\u02aa\u02a8\u0003\u0002", "\u0002\u0002\u02aa\u02a9\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002", "\u0002\u0002\u02ac\u02ad\ba\t\u0002\u02ad\u00c2\u0003\u0002\u0002\u0002", "\u02ae\u02af\u000b\u0002\u0002\u0002\u02af\u00c4\u0003\u0002\u0002\u0002", "\u02b0\u02b5\u0007)\u0002\u0002\u02b1\u02b4\u0005\u00cdg\u0002\u02b2", "\u02b4\n\t\u0002\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b2", "\u0003\u0002\u0002\u0002\u02b4\u02b7\u0003\u0002\u0002\u0002\u02b5\u02b3", "\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6\u02b8", "\u0003\u0002\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b8\u02c3", "\u0007)\u0002\u0002\u02b9\u02be\u0007$\u0002\u0002\u02ba\u02bd\u0005", "\u00cdg\u0002\u02bb\u02bd\n\n\u0002\u0002\u02bc\u02ba\u0003\u0002\u0002", "\u0002\u02bc\u02bb\u0003\u0002\u0002\u0002\u02bd\u02c0\u0003\u0002\u0002", "\u0002\u02be\u02bc\u0003\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002", "\u0002\u02bf\u02c1\u0003\u0002\u0002\u0002\u02c0\u02be\u0003\u0002\u0002", "\u0002\u02c1\u02c3\u0007$\u0002\u0002\u02c2\u02b0\u0003\u0002\u0002", "\u0002\u02c2\u02b9\u0003\u0002\u0002\u0002\u02c3\u00c6\u0003\u0002\u0002", "\u0002\u02c4\u02c5\u0007)\u0002\u0002\u02c5\u02c6\u0007)\u0002\u0002", "\u02c6\u02c7\u0007)\u0002\u0002\u02c7\u02cb\u0003\u0002\u0002\u0002", "\u02c8\u02ca\u0005\u00c9e\u0002\u02c9\u02c8\u0003\u0002\u0002\u0002", "\u02ca\u02cd\u0003\u0002\u0002\u0002\u02cb\u02cc\u0003\u0002\u0002\u0002", "\u02cb\u02c9\u0003\u0002\u0002\u0002\u02cc\u02ce\u0003\u0002\u0002\u0002", "\u02cd\u02cb\u0003\u0002\u0002\u0002\u02ce\u02cf\u0007)\u0002\u0002", "\u02cf\u02d0\u0007)\u0002\u0002\u02d0\u02df\u0007)\u0002\u0002\u02d1", "\u02d2\u0007$\u0002\u0002\u02d2\u02d3\u0007$\u0002\u0002\u02d3\u02d4", "\u0007$\u0002\u0002\u02d4\u02d8\u0003\u0002\u0002\u0002\u02d5\u02d7", "\u0005\u00c9e\u0002\u02d6\u02d5\u0003\u0002\u0002\u0002\u02d7\u02da", "\u0003\u0002\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d8\u02d6", "\u0003\u0002\u0002\u0002\u02d9\u02db\u0003\u0002\u0002\u0002\u02da\u02d8", "\u0003\u0002\u0002\u0002\u02db\u02dc\u0007$\u0002\u0002\u02dc\u02dd", "\u0007$\u0002\u0002\u02dd\u02df\u0007$\u0002\u0002\u02de\u02c4\u0003", "\u0002\u0002\u0002\u02de\u02d1\u0003\u0002\u0002\u0002\u02df\u00c8\u0003", "\u0002\u0002\u0002\u02e0\u02e3\u0005\u00cbf\u0002\u02e1\u02e3\u0005", "\u00cdg\u0002\u02e2\u02e0\u0003\u0002\u0002\u0002\u02e2\u02e1\u0003", "\u0002\u0002\u0002\u02e3\u00ca\u0003\u0002\u0002\u0002\u02e4\u02e5\n", "\u000b\u0002\u0002\u02e5\u00cc\u0003\u0002\u0002\u0002\u02e6\u02e7\u0007", "^\u0002\u0002\u02e7\u02eb\u000b\u0002\u0002\u0002\u02e8\u02e9\u0007", "^\u0002\u0002\u02e9\u02eb\u0005O(\u0002\u02ea\u02e6\u0003\u0002\u0002", "\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002\u02eb\u00ce\u0003\u0002\u0002", "\u0002\u02ec\u02ed\t\f\u0002\u0002\u02ed\u00d0\u0003\u0002\u0002\u0002", "\u02ee\u02ef\t\r\u0002\u0002\u02ef\u00d2\u0003\u0002\u0002\u0002\u02f0", "\u02f1\t\u000e\u0002\u0002\u02f1\u00d4\u0003\u0002\u0002\u0002\u02f2", "\u02f3\t\u000f\u0002\u0002\u02f3\u00d6\u0003\u0002\u0002\u0002\u02f4", "\u02f5\t\u0010\u0002\u0002\u02f5\u00d8\u0003\u0002\u0002\u0002\u02f6", "\u02f8\u0005\u00ddo\u0002\u02f7\u02f6\u0003\u0002\u0002\u0002\u02f7", "\u02f8\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9", "\u02fe\u0005\u00dfp\u0002\u02fa\u02fb\u0005\u00ddo\u0002\u02fb\u02fc", "\u00070\u0002\u0002\u02fc\u02fe\u0003\u0002\u0002\u0002\u02fd\u02f7", "\u0003\u0002\u0002\u0002\u02fd\u02fa\u0003\u0002\u0002\u0002\u02fe\u00da", "\u0003\u0002\u0002\u0002\u02ff\u0302\u0005\u00ddo\u0002\u0300\u0302", "\u0005\u00d9m\u0002\u0301\u02ff\u0003\u0002\u0002\u0002\u0301\u0300", "\u0003\u0002\u0002\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303\u0304", "\u0005\u00e1q\u0002\u0304\u00dc\u0003\u0002\u0002\u0002\u0305\u0307", "\u0005\u00d1i\u0002\u0306\u0305\u0003\u0002\u0002\u0002\u0307\u0308", "\u0003\u0002\u0002\u0002\u0308\u0306\u0003\u0002\u0002\u0002\u0308\u0309", "\u0003\u0002\u0002\u0002\u0309\u00de\u0003\u0002\u0002\u0002\u030a\u030c", "\u00070\u0002\u0002\u030b\u030d\u0005\u00d1i\u0002\u030c\u030b\u0003", "\u0002\u0002\u0002\u030d\u030e\u0003\u0002\u0002\u0002\u030e\u030c\u0003", "\u0002\u0002\u0002\u030e\u030f\u0003\u0002\u0002\u0002\u030f\u00e0\u0003", "\u0002\u0002\u0002\u0310\u0312\t\u0011\u0002\u0002\u0311\u0313\t\u0012", "\u0002\u0002\u0312\u0311\u0003\u0002\u0002\u0002\u0312\u0313\u0003\u0002", "\u0002\u0002\u0313\u0315\u0003\u0002\u0002\u0002\u0314\u0316\u0005\u00d1", "i\u0002\u0315\u0314\u0003\u0002\u0002\u0002\u0316\u0317\u0003\u0002", "\u0002\u0002\u0317\u0315\u0003\u0002\u0002\u0002\u0317\u0318\u0003\u0002", "\u0002\u0002\u0318\u00e2\u0003\u0002\u0002\u0002\u0319\u031e\u0007)", "\u0002\u0002\u031a\u031d\u0005\u00e9u\u0002\u031b\u031d\u0005\u00ef", "x\u0002\u031c\u031a\u0003\u0002\u0002\u0002\u031c\u031b\u0003\u0002", "\u0002\u0002\u031d\u0320\u0003\u0002\u0002\u0002\u031e\u031c\u0003\u0002", "\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002\u031f\u0321\u0003\u0002", "\u0002\u0002\u0320\u031e\u0003\u0002\u0002\u0002\u0321\u032c\u0007)", "\u0002\u0002\u0322\u0327\u0007$\u0002\u0002\u0323\u0326\u0005\u00eb", "v\u0002\u0324\u0326\u0005\u00efx\u0002\u0325\u0323\u0003\u0002\u0002", "\u0002\u0325\u0324\u0003\u0002\u0002\u0002\u0326\u0329\u0003\u0002\u0002", "\u0002\u0327\u0325\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002", "\u0002\u0328\u032a\u0003\u0002\u0002\u0002\u0329\u0327\u0003\u0002\u0002", "\u0002\u032a\u032c\u0007$\u0002\u0002\u032b\u0319\u0003\u0002\u0002", "\u0002\u032b\u0322\u0003\u0002\u0002\u0002\u032c\u00e4\u0003\u0002\u0002", "\u0002\u032d\u032e\u0007)\u0002\u0002\u032e\u032f\u0007)\u0002\u0002", "\u032f\u0330\u0007)\u0002\u0002\u0330\u0334\u0003\u0002\u0002\u0002", "\u0331\u0333\u0005\u00e7t\u0002\u0332\u0331\u0003\u0002\u0002\u0002", "\u0333\u0336\u0003\u0002\u0002\u0002\u0334\u0335\u0003\u0002\u0002\u0002", "\u0334\u0332\u0003\u0002\u0002\u0002\u0335\u0337\u0003\u0002\u0002\u0002", "\u0336\u0334\u0003\u0002\u0002\u0002\u0337\u0338\u0007)\u0002\u0002", "\u0338\u0339\u0007)\u0002\u0002\u0339\u0348\u0007)\u0002\u0002\u033a", "\u033b\u0007$\u0002\u0002\u033b\u033c\u0007$\u0002\u0002\u033c\u033d", "\u0007$\u0002\u0002\u033d\u0341\u0003\u0002\u0002\u0002\u033e\u0340", "\u0005\u00e7t\u0002\u033f\u033e\u0003\u0002\u0002\u0002\u0340\u0343", "\u0003\u0002\u0002\u0002\u0341\u0342\u0003\u0002\u0002\u0002\u0341\u033f", "\u0003\u0002\u0002\u0002\u0342\u0344\u0003\u0002\u0002\u0002\u0343\u0341", "\u0003\u0002\u0002\u0002\u0344\u0345\u0007$\u0002\u0002\u0345\u0346", "\u0007$\u0002\u0002\u0346\u0348\u0007$\u0002\u0002\u0347\u032d\u0003", "\u0002\u0002\u0002\u0347\u033a\u0003\u0002\u0002\u0002\u0348\u00e6\u0003", "\u0002\u0002\u0002\u0349\u034c\u0005\u00edw\u0002\u034a\u034c\u0005", "\u00efx\u0002\u034b\u0349\u0003\u0002\u0002\u0002\u034b\u034a\u0003", "\u0002\u0002\u0002\u034c\u00e8\u0003\u0002\u0002\u0002\u034d\u034f\t", "\u0013\u0002\u0002\u034e\u034d\u0003\u0002\u0002\u0002\u034f\u00ea\u0003", "\u0002\u0002\u0002\u0350\u0352\t\u0014\u0002\u0002\u0351\u0350\u0003", "\u0002\u0002\u0002\u0352\u00ec\u0003\u0002\u0002\u0002\u0353\u0355\t", "\u0015\u0002\u0002\u0354\u0353\u0003\u0002\u0002\u0002\u0355\u00ee\u0003", "\u0002\u0002\u0002\u0356\u0357\u0007^\u0002\u0002\u0357\u0358\t\u0016", "\u0002\u0002\u0358\u00f0\u0003\u0002\u0002\u0002\u0359\u035b\t\u0017", "\u0002\u0002\u035a\u0359\u0003\u0002\u0002\u0002\u035b\u035c\u0003\u0002", "\u0002\u0002\u035c\u035a\u0003\u0002\u0002\u0002\u035c\u035d\u0003\u0002", "\u0002\u0002\u035d\u00f2\u0003\u0002\u0002\u0002\u035e\u0362\u0007%", "\u0002\u0002\u035f\u0361\n\u0018\u0002\u0002\u0360\u035f\u0003\u0002", "\u0002\u0002\u0361\u0364\u0003\u0002\u0002\u0002\u0362\u0360\u0003\u0002", "\u0002\u0002\u0362\u0363\u0003\u0002\u0002\u0002\u0363\u00f4\u0003\u0002", "\u0002\u0002\u0364\u0362\u0003\u0002\u0002\u0002\u0365\u0367\u0007^", "\u0002\u0002\u0366\u0368\u0005\u00f1y\u0002\u0367\u0366\u0003\u0002", "\u0002\u0002\u0367\u0368\u0003\u0002\u0002\u0002\u0368\u036e\u0003\u0002", "\u0002\u0002\u0369\u036b\u0007\u000f\u0002\u0002\u036a\u0369\u0003\u0002", "\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u036c\u0003\u0002", "\u0002\u0002\u036c\u036f\u0007\f\u0002\u0002\u036d\u036f\u0004\u000e", "\u000f\u0002\u036e\u036a\u0003\u0002\u0002\u0002\u036e\u036d\u0003\u0002", "\u0002\u0002\u036f\u00f6\u0003\u0002\u0002\u0002\u0370\u0371\t\u0019", "\u0002\u0002\u0371\u00f8\u0003\u0002\u0002\u0002\u0372\u0373\t\u001a", "\u0002\u0002\u0373\u00fa\u0003\u0002\u0002\u0002\u0374\u0377\t\u001b", "\u0002\u0002\u0375\u0377\u0005\u00f7|\u0002\u0376\u0374\u0003\u0002", "\u0002\u0002\u0376\u0375\u0003\u0002\u0002\u0002\u0377\u00fc\u0003\u0002", "\u0002\u0002\u0378\u037c\u0005\u00fb~\u0002\u0379\u037c\t\u001c\u0002", "\u0002\u037a\u037c\u0005\u00f9}\u0002\u037b\u0378\u0003\u0002\u0002", "\u0002\u037b\u0379\u0003\u0002\u0002\u0002\u037b\u037a\u0003\u0002\u0002", "\u0002\u037c\u00fe\u0003\u0002\u0002\u0002<\u0002\u0101\u0106\u010c", "\u01cf\u01d3\u01d6\u01d8\u01e0\u01e8\u01ec\u01f3\u01f7\u01fd\u0203\u0205", "\u020c\u0213\u021a\u021e\u0222\u02aa\u02b3\u02b5\u02bc\u02be\u02c2\u02cb", "\u02d8\u02de\u02e2\u02ea\u02f7\u02fd\u0301\u0308\u030e\u0312\u0317\u031c", "\u031e\u0325\u0327\u032b\u0334\u0341\u0347\u034b\u034e\u0351\u0354\u035c", "\u0362\u0367\u036a\u036e\u0376\u037b\n\u0003(\u0002\u00035\u0003\u0003", "6\u0004\u0003<\u0005\u0003=\u0006\u0003I\u0007\u0003J\b\b\u0002\u0002"].join("");
const atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new _antlr.default.dfa.DFA(ds, index));

class Python3Lexer extends _Python3LexerBase.default {
  static grammarFileName = "Python3Lexer.g4";
  static channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];
  static modeNames = ["DEFAULT_MODE"];
  static literalNames = [null, null, null, null, null, null, "'def'", "'return'", "'raise'", "'from'", "'import'", "'as'", "'global'", "'nonlocal'", "'assert'", "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", "'finally'", "'with'", "'except'", "'lambda'", "'or'", "'and'", "'not'", "'is'", "'None'", "'True'", "'False'", "'class'", "'yield'", "'del'", "'pass'", "'continue'", "'break'", "'async'", "'await'", null, null, null, null, null, null, null, null, null, null, "'.'", "'...'", "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='"];
  static symbolicNames = [null, "INDENT", "DEDENT", "STRING", "NUMBER", "INTEGER", "DEF", "RETURN", "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR"];
  static ruleNames = ["STRING", "NUMBER", "INTEGER", "DEF", "RETURN", "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "SHORT_STRING", "LONG_STRING", "LONG_STRING_ITEM", "LONG_STRING_CHAR", "STRING_ESCAPE_SEQ", "NON_ZERO_DIGIT", "DIGIT", "OCT_DIGIT", "HEX_DIGIT", "BIN_DIGIT", "POINT_FLOAT", "EXPONENT_FLOAT", "INT_PART", "FRACTION", "EXPONENT", "SHORT_BYTES", "LONG_BYTES", "LONG_BYTES_ITEM", "SHORT_BYTES_CHAR_NO_SINGLE_QUOTE", "SHORT_BYTES_CHAR_NO_DOUBLE_QUOTE", "LONG_BYTES_CHAR", "BYTES_ESCAPE_SEQ", "SPACES", "COMMENT", "LINE_JOINING", "UNICODE_OIDS", "UNICODE_OIDC", "ID_START", "ID_CONTINUE"];

  constructor(input) {
    super(input);
    this._interp = new _antlr.default.atn.LexerATNSimulator(this, atn, decisionsToDFA, new _antlr.default.PredictionContextCache());
  }

  get atn() {
    return atn;
  }

}

exports.default = Python3Lexer;
Python3Lexer.EOF = _antlr.default.Token.EOF;
Python3Lexer.INDENT = 1;
Python3Lexer.DEDENT = 2;
Python3Lexer.STRING = 3;
Python3Lexer.NUMBER = 4;
Python3Lexer.INTEGER = 5;
Python3Lexer.DEF = 6;
Python3Lexer.RETURN = 7;
Python3Lexer.RAISE = 8;
Python3Lexer.FROM = 9;
Python3Lexer.IMPORT = 10;
Python3Lexer.AS = 11;
Python3Lexer.GLOBAL = 12;
Python3Lexer.NONLOCAL = 13;
Python3Lexer.ASSERT = 14;
Python3Lexer.IF = 15;
Python3Lexer.ELIF = 16;
Python3Lexer.ELSE = 17;
Python3Lexer.WHILE = 18;
Python3Lexer.FOR = 19;
Python3Lexer.IN = 20;
Python3Lexer.TRY = 21;
Python3Lexer.FINALLY = 22;
Python3Lexer.WITH = 23;
Python3Lexer.EXCEPT = 24;
Python3Lexer.LAMBDA = 25;
Python3Lexer.OR = 26;
Python3Lexer.AND = 27;
Python3Lexer.NOT = 28;
Python3Lexer.IS = 29;
Python3Lexer.NONE = 30;
Python3Lexer.TRUE = 31;
Python3Lexer.FALSE = 32;
Python3Lexer.CLASS = 33;
Python3Lexer.YIELD = 34;
Python3Lexer.DEL = 35;
Python3Lexer.PASS = 36;
Python3Lexer.CONTINUE = 37;
Python3Lexer.BREAK = 38;
Python3Lexer.ASYNC = 39;
Python3Lexer.AWAIT = 40;
Python3Lexer.NEWLINE = 41;
Python3Lexer.NAME = 42;
Python3Lexer.STRING_LITERAL = 43;
Python3Lexer.BYTES_LITERAL = 44;
Python3Lexer.DECIMAL_INTEGER = 45;
Python3Lexer.OCT_INTEGER = 46;
Python3Lexer.HEX_INTEGER = 47;
Python3Lexer.BIN_INTEGER = 48;
Python3Lexer.FLOAT_NUMBER = 49;
Python3Lexer.IMAG_NUMBER = 50;
Python3Lexer.DOT = 51;
Python3Lexer.ELLIPSIS = 52;
Python3Lexer.STAR = 53;
Python3Lexer.OPEN_PAREN = 54;
Python3Lexer.CLOSE_PAREN = 55;
Python3Lexer.COMMA = 56;
Python3Lexer.COLON = 57;
Python3Lexer.SEMI_COLON = 58;
Python3Lexer.POWER = 59;
Python3Lexer.ASSIGN = 60;
Python3Lexer.OPEN_BRACK = 61;
Python3Lexer.CLOSE_BRACK = 62;
Python3Lexer.OR_OP = 63;
Python3Lexer.XOR = 64;
Python3Lexer.AND_OP = 65;
Python3Lexer.LEFT_SHIFT = 66;
Python3Lexer.RIGHT_SHIFT = 67;
Python3Lexer.ADD = 68;
Python3Lexer.MINUS = 69;
Python3Lexer.DIV = 70;
Python3Lexer.MOD = 71;
Python3Lexer.IDIV = 72;
Python3Lexer.NOT_OP = 73;
Python3Lexer.OPEN_BRACE = 74;
Python3Lexer.CLOSE_BRACE = 75;
Python3Lexer.LESS_THAN = 76;
Python3Lexer.GREATER_THAN = 77;
Python3Lexer.EQUALS = 78;
Python3Lexer.GT_EQ = 79;
Python3Lexer.LT_EQ = 80;
Python3Lexer.NOT_EQ_1 = 81;
Python3Lexer.NOT_EQ_2 = 82;
Python3Lexer.AT = 83;
Python3Lexer.ARROW = 84;
Python3Lexer.ADD_ASSIGN = 85;
Python3Lexer.SUB_ASSIGN = 86;
Python3Lexer.MULT_ASSIGN = 87;
Python3Lexer.AT_ASSIGN = 88;
Python3Lexer.DIV_ASSIGN = 89;
Python3Lexer.MOD_ASSIGN = 90;
Python3Lexer.AND_ASSIGN = 91;
Python3Lexer.OR_ASSIGN = 92;
Python3Lexer.XOR_ASSIGN = 93;
Python3Lexer.LEFT_SHIFT_ASSIGN = 94;
Python3Lexer.RIGHT_SHIFT_ASSIGN = 95;
Python3Lexer.POWER_ASSIGN = 96;
Python3Lexer.IDIV_ASSIGN = 97;
Python3Lexer.SKIP_ = 98;
Python3Lexer.UNKNOWN_CHAR = 99;

Python3Lexer.prototype.action = function (localctx, ruleIndex, actionIndex) {
  switch (ruleIndex) {
    case 38:
      this.NEWLINE_action(localctx, actionIndex);
      break;

    case 51:
      this.OPEN_PAREN_action(localctx, actionIndex);
      break;

    case 52:
      this.CLOSE_PAREN_action(localctx, actionIndex);
      break;

    case 58:
      this.OPEN_BRACK_action(localctx, actionIndex);
      break;

    case 59:
      this.CLOSE_BRACK_action(localctx, actionIndex);
      break;

    case 71:
      this.OPEN_BRACE_action(localctx, actionIndex);
      break;

    case 72:
      this.CLOSE_BRACE_action(localctx, actionIndex);
      break;

    default:
      throw "No registered action for:" + ruleIndex;
  }
};

Python3Lexer.prototype.NEWLINE_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 0:
      this.onNewLine();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

Python3Lexer.prototype.OPEN_PAREN_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 1:
      this.openBrace();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

Python3Lexer.prototype.CLOSE_PAREN_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 2:
      this.closeBrace();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

Python3Lexer.prototype.OPEN_BRACK_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 3:
      this.openBrace();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

Python3Lexer.prototype.CLOSE_BRACK_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 4:
      this.closeBrace();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

Python3Lexer.prototype.OPEN_BRACE_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 5:
      this.openBrace();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

Python3Lexer.prototype.CLOSE_BRACE_action = function (localctx, actionIndex) {
  switch (actionIndex) {
    case 6:
      this.closeBrace();
      break;

    default:
      throw "No registered action for:" + actionIndex;
  }
};

Python3Lexer.prototype.sempred = function (localctx, ruleIndex, predIndex) {
  switch (ruleIndex) {
    case 38:
      return this.NEWLINE_sempred(localctx, predIndex);

    default:
      throw "No registered predicate for:" + ruleIndex;
  }
};

Python3Lexer.prototype.NEWLINE_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 0:
      return this.atStartOfInput();

    default:
      throw "No predicate with index:" + predIndex;
  }
};

},{"./Python3LexerBase.js":151,"antlr4":42}],151:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _Python3Parser = _interopRequireDefault(require("./Python3Parser.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Python3LexerBase extends _antlr.default.Lexer {
  constructor(input) {
    super(input);
    this.tokens = [];
    this.indents = [];
    this.opened = 0;
  }

  reset() {
    // A queue where extra tokens are pushed on (see the NEWLINE lexer rule).
    this.tokens = []; // The stack that keeps track of the indentation level.

    this.indents = []; // The amount of opened braces, brackets and parenthesis.

    this.opened = 0;
    super.reset();
  }

  emitToken(token) {
    this._token = token;
    this.tokens.push(token);
  }

  nextToken() {
    // Check if the end-of-file is ahead and there are still some DEDENTS expected.
    if (this._input.LA(1) === _Python3Parser.default.EOF && this.indents.length) {
      // Remove any trailing EOF tokens from our buffer.
      this.tokens = this.tokens.filter(function (val) {
        return val.type !== _Python3Parser.default.EOF;
      }); // First emit an extra line break that serves as the end of the statement.

      this.emitToken(this.commonToken(_Python3Parser.default.NEWLINE, "\n")); // Now emit as much DEDENT tokens as needed.

      while (this.indents.length) {
        this.emitToken(this.createDedent());
        this.indents.pop();
      } // Put the EOF back on the token stream.


      this.emitToken(this.commonToken(_Python3Parser.default.EOF, "<EOF>"));
    }

    let next = super.nextToken();
    return this.tokens.length ? this.tokens.shift() : next;
  }

  createDedent() {
    return this.commonToken(_Python3Parser.default.DEDENT, "");
  }

  commonToken(type, text) {
    let stop = this.getCharIndex() - 1;
    let start = text.length ? stop - text.length + 1 : stop;
    return new _antlr.default.CommonToken(this._tokenFactorySourcePair, type, _antlr.default.Lexer.DEFAULT_TOKEN_CHANNEL, start, stop);
  }

  getIndentationCount(whitespace) {
    let count = 0;

    for (let i = 0; i < whitespace.length; i++) {
      if (whitespace[i] === '\t') {
        count += 8 - count % 8;
      } else {
        count++;
      }
    }

    return count;
  }

  getIndentationCount(whitespace) {
    let count = 0;

    for (let i = 0; i < whitespace.length; i++) {
      if (whitespace[i] === '\t') {
        count += 8 - count % 8;
      } else {
        count++;
      }
    }

    return count;
  }

  atStartOfInput() {
    return this.getCharIndex() === 0;
  }

  openBrace() {
    this.opened++;
  }

  closeBrace() {
    this.opened--;
  }

  onNewLine() {
    let newLine = this.text.replace(/[^\r\n]+/g, '');
    let spaces = this.text.replace(/[\r\n]+/g, ''); // Strip newlines inside open clauses except if we are near EOF. We keep NEWLINEs near EOF to
    // satisfy the final newline needed by the single_put rule used by the REPL.

    let next = this._input.LA(1);

    let nextnext = this._input.LA(2);

    if (this.opened > 0 || nextnext != -1
    /* EOF */
    && (next === 13
    /* '\r' */
    || next === 10
    /* '\n' */
    || next === 35
    /* '#' */
    )) {
      // If we're inside a list or on a blank line, ignore all indents,
      // dedents and line breaks.
      this.skip();
    } else {
      this.emitToken(this.commonToken(_Python3Parser.default.NEWLINE, newLine));
      let indent = this.getIndentationCount(spaces);
      let previous = this.indents.length ? this.indents[this.indents.length - 1] : 0;

      if (indent === previous) {
        // skip indents of the same size as the present indent-size
        this.skip();
      } else if (indent > previous) {
        this.indents.push(indent);
        this.emitToken(this.commonToken(_Python3Parser.default.INDENT, spaces));
      } else {
        // Possibly emit more than 1 DEDENT token.
        while (this.indents.length && this.indents[this.indents.length - 1] > indent) {
          this.emitToken(this.createDedent());
          this.indents.pop();
        }
      }
    }
  }

}

exports.default = Python3LexerBase;

},{"./Python3Parser.js":152,"antlr4":42}],152:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _Python3ParserListener = _interopRequireDefault(require("./Python3ParserListener.js"));

var _Python3ParserVisitor = _interopRequireDefault(require("./Python3ParserVisitor.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/Python3Parser.g4 by ANTLR 4.9.2
// jshint ignore: start
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786", "\u5964\u0003e\u0452\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004", "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007", "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f", "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010", "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014", "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017", "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b", "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e", "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004", "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004", "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004", "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004", "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004", "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004", "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004", "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004", "U\tU\u0004V\tV\u0004W\tW\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002", "\u0003\u0002\u0005\u0002\u00b4\n\u0002\u0003\u0003\u0003\u0003\u0007", "\u0003\u00b8\n\u0003\f\u0003\u000e\u0003\u00bb\u000b\u0003\u0003\u0003", "\u0003\u0003\u0003\u0004\u0003\u0004\u0007\u0004\u00c1\n\u0004\f\u0004", "\u000e\u0004\u00c4\u000b\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003", "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00cc\n\u0005\u0003\u0005", "\u0005\u0005\u00cf\n\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0006", "\u0006\u00d4\n\u0006\r\u0006\u000e\u0006\u00d5\u0003\u0007\u0003\u0007", "\u0003\u0007\u0003\u0007\u0005\u0007\u00dc\n\u0007\u0003\b\u0003\b\u0003", "\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00e6\n\t\u0003\t", "\u0003\t\u0003\t\u0003\n\u0003\n\u0005\n\u00ed\n\n\u0003\n\u0003\n\u0003", "\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u00f4\n\u000b\u0003\u000b", "\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u00fa\n\u000b\u0007", "\u000b\u00fc\n\u000b\f\u000b\u000e\u000b\u00ff\u000b\u000b\u0003\u000b", "\u0003\u000b\u0003\u000b\u0005\u000b\u0104\n\u000b\u0003\u000b\u0003", "\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u010a\n\u000b\u0007\u000b", "\u010c\n\u000b\f\u000b\u000e\u000b\u010f\u000b\u000b\u0003\u000b\u0003", "\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0115\n\u000b\u0005\u000b", "\u0117\n\u000b\u0005\u000b\u0119\n\u000b\u0003\u000b\u0003\u000b\u0003", "\u000b\u0005\u000b\u011e\n\u000b\u0005\u000b\u0120\n\u000b\u0005\u000b", "\u0122\n\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0126\n\u000b\u0003", "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u012c\n\u000b", "\u0007\u000b\u012e\n\u000b\f\u000b\u000e\u000b\u0131\u000b\u000b\u0003", "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0137\n\u000b", "\u0005\u000b\u0139\n\u000b\u0005\u000b\u013b\n\u000b\u0003\u000b\u0003", "\u000b\u0003\u000b\u0005\u000b\u0140\n\u000b\u0005\u000b\u0142\n\u000b", "\u0003\f\u0003\f\u0003\f\u0005\f\u0147\n\f\u0003\r\u0003\r\u0003\r\u0005", "\r\u014c\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0152\n\r\u0007", "\r\u0154\n\r\f\r\u000e\r\u0157\u000b\r\u0003\r\u0003\r\u0003\r\u0005", "\r\u015c\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0162\n\r\u0007", "\r\u0164\n\r\f\r\u000e\r\u0167\u000b\r\u0003\r\u0003\r\u0003\r\u0003", "\r\u0005\r\u016d\n\r\u0005\r\u016f\n\r\u0005\r\u0171\n\r\u0003\r\u0003", "\r\u0003\r\u0005\r\u0176\n\r\u0005\r\u0178\n\r\u0005\r\u017a\n\r\u0003", "\r\u0003\r\u0005\r\u017e\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r", "\u0184\n\r\u0007\r\u0186\n\r\f\r\u000e\r\u0189\u000b\r\u0003\r\u0003", "\r\u0003\r\u0003\r\u0005\r\u018f\n\r\u0005\r\u0191\n\r\u0005\r\u0193", "\n\r\u0003\r\u0003\r\u0003\r\u0005\r\u0198\n\r\u0005\r\u019a\n\r\u0003", "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0005\u000f\u01a0\n\u000f", "\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u01a5\n\u0010\f\u0010", "\u000e\u0010\u01a8\u000b\u0010\u0003\u0010\u0005\u0010\u01ab\n\u0010", "\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011", "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u01b7\n", "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005", "\u0012\u01be\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012", "\u01c3\n\u0012\u0007\u0012\u01c5\n\u0012\f\u0012\u000e\u0012\u01c8\u000b", "\u0012\u0005\u0012\u01ca\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013", "\u0003\u0013\u0005\u0013\u01d0\n\u0013\u0003\u0014\u0003\u0014\u0005", "\u0014\u01d4\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014", "\u01d9\n\u0014\u0007\u0014\u01db\n\u0014\f\u0014\u000e\u0014\u01de\u000b", "\u0014\u0003\u0014\u0005\u0014\u01e1\n\u0014\u0003\u0015\u0003\u0015", "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0018", "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01ef\n", "\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003", "\u001b\u0005\u001b\u01f7\n\u001b\u0003\u001c\u0003\u001c\u0003\u001d", "\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u01ff\n\u001d\u0005", "\u001d\u0201\n\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u0205\n\u001e", "\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0007 \u020c\n \f", " \u000e \u020f\u000b \u0003 \u0003 \u0006 \u0213\n \r \u000e \u0214", "\u0005 \u0217\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005", " \u0220\n \u0003!\u0003!\u0003!\u0005!\u0225\n!\u0003\"\u0003\"\u0003", "\"\u0005\"\u022a\n\"\u0003#\u0003#\u0003#\u0007#\u022f\n#\f#\u000e#", "\u0232\u000b#\u0003#\u0005#\u0235\n#\u0003$\u0003$\u0003$\u0007$\u023a", "\n$\f$\u000e$\u023d\u000b$\u0003%\u0003%\u0003%\u0007%\u0242\n%\f%\u000e", "%\u0245\u000b%\u0003&\u0003&\u0003&\u0003&\u0007&\u024b\n&\f&\u000e", "&\u024e\u000b&\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u0254\n\'\f\'", "\u000e\'\u0257\u000b\'\u0003(\u0003(\u0003(\u0003(\u0005(\u025d\n(\u0003", ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u0268", "\n)\u0003*\u0003*\u0003*\u0003*\u0005*\u026e\n*\u0003+\u0003+\u0003", "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0007+\u0279\n+\f+\u000e", "+\u027c\u000b+\u0003+\u0003+\u0003+\u0005+\u0281\n+\u0003,\u0003,\u0003", ",\u0003,\u0003,\u0003,\u0003,\u0005,\u028a\n,\u0003-\u0003-\u0003-\u0003", "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0295\n-\u0003.\u0003.\u0003", ".\u0003.\u0003.\u0003.\u0003.\u0006.\u029e\n.\r.\u000e.\u029f\u0003", ".\u0003.\u0003.\u0005.\u02a5\n.\u0003.\u0003.\u0003.\u0005.\u02aa\n", ".\u0003.\u0003.\u0003.\u0005.\u02af\n.\u0003/\u0003/\u0003/\u0003/\u0007", "/\u02b5\n/\f/\u000e/\u02b8\u000b/\u0003/\u0003/\u0003/\u00030\u0003", "0\u00030\u00050\u02c0\n0\u00031\u00031\u00031\u00031\u00051\u02c6\n", "1\u00051\u02c8\n1\u00032\u00032\u00032\u00032\u00062\u02ce\n2\r2\u000e", "2\u02cf\u00032\u00032\u00052\u02d4\n2\u00033\u00033\u00033\u00033\u0003", "3\u00033\u00053\u02dc\n3\u00033\u00053\u02df\n3\u00034\u00034\u0005", "4\u02e3\n4\u00035\u00035\u00055\u02e7\n5\u00035\u00035\u00035\u0003", "6\u00036\u00056\u02ee\n6\u00036\u00036\u00036\u00037\u00037\u00037\u0007", "7\u02f6\n7\f7\u000e7\u02f9\u000b7\u00038\u00038\u00038\u00078\u02fe", "\n8\f8\u000e8\u0301\u000b8\u00039\u00039\u00039\u00059\u0306\n9\u0003", ":\u0003:\u0003:\u0003:\u0007:\u030c\n:\f:\u000e:\u030f\u000b:\u0003", ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003", ";\u0003;\u0003;\u0005;\u031e\n;\u0003<\u0003<\u0003<\u0003=\u0003=\u0003", "=\u0007=\u0326\n=\f=\u000e=\u0329\u000b=\u0003>\u0003>\u0003>\u0007", ">\u032e\n>\f>\u000e>\u0331\u000b>\u0003?\u0003?\u0003?\u0007?\u0336", "\n?\f?\u000e?\u0339\u000b?\u0003@\u0003@\u0003@\u0007@\u033e\n@\f@\u000e", "@\u0341\u000b@\u0003A\u0003A\u0003A\u0007A\u0346\nA\fA\u000eA\u0349", "\u000bA\u0003B\u0003B\u0003B\u0007B\u034e\nB\fB\u000eB\u0351\u000bB", "\u0003C\u0003C\u0003C\u0005C\u0356\nC\u0003D\u0003D\u0003D\u0005D\u035b", "\nD\u0003E\u0005E\u035e\nE\u0003E\u0003E\u0007E\u0362\nE\fE\u000eE\u0365", "\u000bE\u0003F\u0003F\u0003F\u0005F\u036a\nF\u0003F\u0003F\u0003F\u0005", "F\u036f\nF\u0003F\u0003F\u0003F\u0005F\u0374\nF\u0003F\u0003F\u0003", "F\u0003F\u0006F\u037a\nF\rF\u000eF\u037b\u0003F\u0003F\u0003F\u0003", "F\u0005F\u0382\nF\u0003G\u0003G\u0005G\u0386\nG\u0003G\u0003G\u0003", "G\u0003G\u0005G\u038c\nG\u0007G\u038e\nG\fG\u000eG\u0391\u000bG\u0003", "G\u0005G\u0394\nG\u0005G\u0396\nG\u0003H\u0003H\u0005H\u039a\nH\u0003", "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0005H\u03a3\nH\u0003I\u0003", "I\u0003I\u0007I\u03a8\nI\fI\u000eI\u03ab\u000bI\u0003I\u0005I\u03ae", "\nI\u0003J\u0003J\u0005J\u03b2\nJ\u0003J\u0003J\u0005J\u03b6\nJ\u0003", "J\u0005J\u03b9\nJ\u0005J\u03bb\nJ\u0003K\u0003K\u0005K\u03bf\nK\u0003", "L\u0003L\u0005L\u03c3\nL\u0003L\u0003L\u0003L\u0005L\u03c8\nL\u0007", "L\u03ca\nL\fL\u000eL\u03cd\u000bL\u0003L\u0005L\u03d0\nL\u0003M\u0003", "M\u0003M\u0007M\u03d5\nM\fM\u000eM\u03d8\u000bM\u0003M\u0005M\u03db", "\nM\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u03e3\nN\u0003", "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u03ed\nN\u0007", "N\u03ef\nN\fN\u000eN\u03f2\u000bN\u0003N\u0005N\u03f5\nN\u0005N\u03f7", "\nN\u0003N\u0003N\u0005N\u03fb\nN\u0003N\u0003N\u0003N\u0003N\u0005", "N\u0401\nN\u0007N\u0403\nN\fN\u000eN\u0406\u000bN\u0003N\u0005N\u0409", "\nN\u0005N\u040b\nN\u0005N\u040d\nN\u0003O\u0003O\u0003O\u0003O\u0005", "O\u0413\nO\u0003O\u0005O\u0416\nO\u0003O\u0003O\u0003O\u0003P\u0003", "P\u0003P\u0007P\u041e\nP\fP\u000eP\u0421\u000bP\u0003P\u0005P\u0424", "\nP\u0003Q\u0003Q\u0005Q\u0428\nQ\u0003Q\u0003Q\u0003Q\u0003Q\u0003", "Q\u0003Q\u0003Q\u0003Q\u0005Q\u0432\nQ\u0003R\u0003R\u0005R\u0436\n", "R\u0003S\u0005S\u0439\nS\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u0440", "\nS\u0003T\u0003T\u0003T\u0005T\u0445\nT\u0003U\u0003U\u0003V\u0003", "V\u0005V\u044b\nV\u0003W\u0003W\u0003W\u0005W\u0450\nW\u0003W\u0002", "\u0002X\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018", "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|", "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094", "\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac", "\u0002\b\u0003\u0002Wc\u0003\u000256\u0003\u0002DE\u0003\u0002FG\u0005", "\u000277HJUU\u0004\u0002FGKK\u0002\u04cf\u0002\u00b3\u0003\u0002\u0002", "\u0002\u0004\u00b9\u0003\u0002\u0002\u0002\u0006\u00be\u0003\u0002\u0002", "\u0002\b\u00c7\u0003\u0002\u0002\u0002\n\u00d3\u0003\u0002\u0002\u0002", "\f\u00d7\u0003\u0002\u0002\u0002\u000e\u00dd\u0003\u0002\u0002\u0002", "\u0010\u00e0\u0003\u0002\u0002\u0002\u0012\u00ea\u0003\u0002\u0002\u0002", "\u0014\u0141\u0003\u0002\u0002\u0002\u0016\u0143\u0003\u0002\u0002\u0002", "\u0018\u0199\u0003\u0002\u0002\u0002\u001a\u019b\u0003\u0002\u0002\u0002", "\u001c\u019f\u0003\u0002\u0002\u0002\u001e\u01a1\u0003\u0002\u0002\u0002", " \u01b6\u0003\u0002\u0002\u0002\"\u01b8\u0003\u0002\u0002\u0002$\u01cb", "\u0003\u0002\u0002\u0002&\u01d3\u0003\u0002\u0002\u0002(\u01e2\u0003", "\u0002\u0002\u0002*\u01e4\u0003\u0002\u0002\u0002,\u01e7\u0003\u0002", "\u0002\u0002.\u01ee\u0003\u0002\u0002\u00020\u01f0\u0003\u0002\u0002", "\u00022\u01f2\u0003\u0002\u0002\u00024\u01f4\u0003\u0002\u0002\u0002", "6\u01f8\u0003\u0002\u0002\u00028\u01fa\u0003\u0002\u0002\u0002:\u0204", "\u0003\u0002\u0002\u0002<\u0206\u0003\u0002\u0002\u0002>\u0209\u0003", "\u0002\u0002\u0002@\u0221\u0003\u0002\u0002\u0002B\u0226\u0003\u0002", "\u0002\u0002D\u022b\u0003\u0002\u0002\u0002F\u0236\u0003\u0002\u0002", "\u0002H\u023e\u0003\u0002\u0002\u0002J\u0246\u0003\u0002\u0002\u0002", "L\u024f\u0003\u0002\u0002\u0002N\u0258\u0003\u0002\u0002\u0002P\u0267", "\u0003\u0002\u0002\u0002R\u0269\u0003\u0002\u0002\u0002T\u026f\u0003", "\u0002\u0002\u0002V\u0282\u0003\u0002\u0002\u0002X\u028b\u0003\u0002", "\u0002\u0002Z\u0296\u0003\u0002\u0002\u0002\\\u02b0\u0003\u0002\u0002", "\u0002^\u02bc\u0003\u0002\u0002\u0002`\u02c1\u0003\u0002\u0002\u0002", "b\u02d3\u0003\u0002\u0002\u0002d\u02de\u0003\u0002\u0002\u0002f\u02e2", "\u0003\u0002\u0002\u0002h\u02e4\u0003\u0002\u0002\u0002j\u02eb\u0003", "\u0002\u0002\u0002l\u02f2\u0003\u0002\u0002\u0002n\u02fa\u0003\u0002", "\u0002\u0002p\u0305\u0003\u0002\u0002\u0002r\u0307\u0003\u0002\u0002", "\u0002t\u031d\u0003\u0002\u0002\u0002v\u031f\u0003\u0002\u0002\u0002", "x\u0322\u0003\u0002\u0002\u0002z\u032a\u0003\u0002\u0002\u0002|\u0332", "\u0003\u0002\u0002\u0002~\u033a\u0003\u0002\u0002\u0002\u0080\u0342", "\u0003\u0002\u0002\u0002\u0082\u034a\u0003\u0002\u0002\u0002\u0084\u0355", "\u0003\u0002\u0002\u0002\u0086\u0357\u0003\u0002\u0002\u0002\u0088\u035d", "\u0003\u0002\u0002\u0002\u008a\u0381\u0003\u0002\u0002\u0002\u008c\u0385", "\u0003\u0002\u0002\u0002\u008e\u03a2\u0003\u0002\u0002\u0002\u0090\u03a4", "\u0003\u0002\u0002\u0002\u0092\u03ba\u0003\u0002\u0002\u0002\u0094\u03bc", "\u0003\u0002\u0002\u0002\u0096\u03c2\u0003\u0002\u0002\u0002\u0098\u03d1", "\u0003\u0002\u0002\u0002\u009a\u040c\u0003\u0002\u0002\u0002\u009c\u040e", "\u0003\u0002\u0002\u0002\u009e\u041a\u0003\u0002\u0002\u0002\u00a0\u0431", "\u0003\u0002\u0002\u0002\u00a2\u0435\u0003\u0002\u0002\u0002\u00a4\u0438", "\u0003\u0002\u0002\u0002\u00a6\u0441\u0003\u0002\u0002\u0002\u00a8\u0446", "\u0003\u0002\u0002\u0002\u00aa\u0448\u0003\u0002\u0002\u0002\u00ac\u044f", "\u0003\u0002\u0002\u0002\u00ae\u00b4\u0007+\u0002\u0002\u00af\u00b4", "\u0005\u001e\u0010\u0002\u00b0\u00b1\u0005P)\u0002\u00b1\u00b2\u0007", "+\u0002\u0002\u00b2\u00b4\u0003\u0002\u0002\u0002\u00b3\u00ae\u0003", "\u0002\u0002\u0002\u00b3\u00af\u0003\u0002\u0002\u0002\u00b3\u00b0\u0003", "\u0002\u0002\u0002\u00b4\u0003\u0003\u0002\u0002\u0002\u00b5\u00b8\u0007", "+\u0002\u0002\u00b6\u00b8\u0005\u001c\u000f\u0002\u00b7\u00b5\u0003", "\u0002\u0002\u0002\u00b7\u00b6\u0003\u0002\u0002\u0002\u00b8\u00bb\u0003", "\u0002\u0002\u0002\u00b9\u00b7\u0003\u0002\u0002\u0002\u00b9\u00ba\u0003", "\u0002\u0002\u0002\u00ba\u00bc\u0003\u0002\u0002\u0002\u00bb\u00b9\u0003", "\u0002\u0002\u0002\u00bc\u00bd\u0007\u0002\u0002\u0003\u00bd\u0005\u0003", "\u0002\u0002\u0002\u00be\u00c2\u0005\u0098M\u0002\u00bf\u00c1\u0007", "+\u0002\u0002\u00c0\u00bf\u0003\u0002\u0002\u0002\u00c1\u00c4\u0003", "\u0002\u0002\u0002\u00c2\u00c0\u0003\u0002\u0002\u0002\u00c2\u00c3\u0003", "\u0002\u0002\u0002\u00c3\u00c5\u0003\u0002\u0002\u0002\u00c4\u00c2\u0003", "\u0002\u0002\u0002\u00c5\u00c6\u0007\u0002\u0002\u0003\u00c6\u0007\u0003", "\u0002\u0002\u0002\u00c7\u00c8\u0007U\u0002\u0002\u00c8\u00ce\u0005", "H%\u0002\u00c9\u00cb\u00078\u0002\u0002\u00ca\u00cc\u0005\u009eP\u0002", "\u00cb\u00ca\u0003\u0002\u0002\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002", "\u00cc\u00cd\u0003\u0002\u0002\u0002\u00cd\u00cf\u00079\u0002\u0002", "\u00ce\u00c9\u0003\u0002\u0002\u0002\u00ce\u00cf\u0003\u0002\u0002\u0002", "\u00cf\u00d0\u0003\u0002\u0002\u0002\u00d0\u00d1\u0007+\u0002\u0002", "\u00d1\t\u0003\u0002\u0002\u0002\u00d2\u00d4\u0005\b\u0005\u0002\u00d3", "\u00d2\u0003\u0002\u0002\u0002\u00d4\u00d5\u0003\u0002\u0002\u0002\u00d5", "\u00d3\u0003\u0002\u0002\u0002\u00d5\u00d6\u0003\u0002\u0002\u0002\u00d6", "\u000b\u0003\u0002\u0002\u0002\u00d7\u00db\u0005\n\u0006\u0002\u00d8", "\u00dc\u0005\u009cO\u0002\u00d9\u00dc\u0005\u0010\t\u0002\u00da\u00dc", "\u0005\u000e\b\u0002\u00db\u00d8\u0003\u0002\u0002\u0002\u00db\u00d9", "\u0003\u0002\u0002\u0002\u00db\u00da\u0003\u0002\u0002\u0002\u00dc\r", "\u0003\u0002\u0002\u0002\u00dd\u00de\u0007)\u0002\u0002\u00de\u00df", "\u0005\u0010\t\u0002\u00df\u000f\u0003\u0002\u0002\u0002\u00e0\u00e1", "\u0007\b\u0002\u0002\u00e1\u00e2\u0007,\u0002\u0002\u00e2\u00e5\u0005", "\u0012\n\u0002\u00e3\u00e4\u0007V\u0002\u0002\u00e4\u00e6\u0005d3\u0002", "\u00e5\u00e3\u0003\u0002\u0002\u0002\u00e5\u00e6\u0003\u0002\u0002\u0002", "\u00e6\u00e7\u0003\u0002\u0002\u0002\u00e7\u00e8\u0007;\u0002\u0002", "\u00e8\u00e9\u0005b2\u0002\u00e9\u0011\u0003\u0002\u0002\u0002\u00ea", "\u00ec\u00078\u0002\u0002\u00eb\u00ed\u0005\u0014\u000b\u0002\u00ec", "\u00eb\u0003\u0002\u0002\u0002\u00ec\u00ed\u0003\u0002\u0002\u0002\u00ed", "\u00ee\u0003\u0002\u0002\u0002\u00ee\u00ef\u00079\u0002\u0002\u00ef", "\u0013\u0003\u0002\u0002\u0002\u00f0\u00f3\u0005\u0016\f\u0002\u00f1", "\u00f2\u0007>\u0002\u0002\u00f2\u00f4\u0005d3\u0002\u00f3\u00f1\u0003", "\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002\u0002\u0002\u00f4\u00fd\u0003", "\u0002\u0002\u0002\u00f5\u00f6\u0007:\u0002\u0002\u00f6\u00f9\u0005", "\u0016\f\u0002\u00f7\u00f8\u0007>\u0002\u0002\u00f8\u00fa\u0005d3\u0002", "\u00f9\u00f7\u0003\u0002\u0002\u0002\u00f9\u00fa\u0003\u0002\u0002\u0002", "\u00fa\u00fc\u0003\u0002\u0002\u0002\u00fb\u00f5\u0003\u0002\u0002\u0002", "\u00fc\u00ff\u0003\u0002\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002", "\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe\u0121\u0003\u0002\u0002\u0002", "\u00ff\u00fd\u0003\u0002\u0002\u0002\u0100\u011f\u0007:\u0002\u0002", "\u0101\u0103\u00077\u0002\u0002\u0102\u0104\u0005\u0016\f\u0002\u0103", "\u0102\u0003\u0002\u0002\u0002\u0103\u0104\u0003\u0002\u0002\u0002\u0104", "\u010d\u0003\u0002\u0002\u0002\u0105\u0106\u0007:\u0002\u0002\u0106", "\u0109\u0005\u0016\f\u0002\u0107\u0108\u0007>\u0002\u0002\u0108\u010a", "\u0005d3\u0002\u0109\u0107\u0003\u0002\u0002\u0002\u0109\u010a\u0003", "\u0002\u0002\u0002\u010a\u010c\u0003\u0002\u0002\u0002\u010b\u0105\u0003", "\u0002\u0002\u0002\u010c\u010f\u0003\u0002\u0002\u0002\u010d\u010b\u0003", "\u0002\u0002\u0002\u010d\u010e\u0003\u0002\u0002\u0002\u010e\u0118\u0003", "\u0002\u0002\u0002\u010f\u010d\u0003\u0002\u0002\u0002\u0110\u0116\u0007", ":\u0002\u0002\u0111\u0112\u0007=\u0002\u0002\u0112\u0114\u0005\u0016", "\f\u0002\u0113\u0115\u0007:\u0002\u0002\u0114\u0113\u0003\u0002\u0002", "\u0002\u0114\u0115\u0003\u0002\u0002\u0002\u0115\u0117\u0003\u0002\u0002", "\u0002\u0116\u0111\u0003\u0002\u0002\u0002\u0116\u0117\u0003\u0002\u0002", "\u0002\u0117\u0119\u0003\u0002\u0002\u0002\u0118\u0110\u0003\u0002\u0002", "\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u0120\u0003\u0002\u0002", "\u0002\u011a\u011b\u0007=\u0002\u0002\u011b\u011d\u0005\u0016\f\u0002", "\u011c\u011e\u0007:\u0002\u0002\u011d\u011c\u0003\u0002\u0002\u0002", "\u011d\u011e\u0003\u0002\u0002\u0002\u011e\u0120\u0003\u0002\u0002\u0002", "\u011f\u0101\u0003\u0002\u0002\u0002\u011f\u011a\u0003\u0002\u0002\u0002", "\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u0122\u0003\u0002\u0002\u0002", "\u0121\u0100\u0003\u0002\u0002\u0002\u0121\u0122\u0003\u0002\u0002\u0002", "\u0122\u0142\u0003\u0002\u0002\u0002\u0123\u0125\u00077\u0002\u0002", "\u0124\u0126\u0005\u0016\f\u0002\u0125\u0124\u0003\u0002\u0002\u0002", "\u0125\u0126\u0003\u0002\u0002\u0002\u0126\u012f\u0003\u0002\u0002\u0002", "\u0127\u0128\u0007:\u0002\u0002\u0128\u012b\u0005\u0016\f\u0002\u0129", "\u012a\u0007>\u0002\u0002\u012a\u012c\u0005d3\u0002\u012b\u0129\u0003", "\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002\u0002\u012c\u012e\u0003", "\u0002\u0002\u0002\u012d\u0127\u0003\u0002\u0002\u0002\u012e\u0131\u0003", "\u0002\u0002\u0002\u012f\u012d\u0003\u0002\u0002\u0002\u012f\u0130\u0003", "\u0002\u0002\u0002\u0130\u013a\u0003\u0002\u0002\u0002\u0131\u012f\u0003", "\u0002\u0002\u0002\u0132\u0138\u0007:\u0002\u0002\u0133\u0134\u0007", "=\u0002\u0002\u0134\u0136\u0005\u0016\f\u0002\u0135\u0137\u0007:\u0002", "\u0002\u0136\u0135\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002", "\u0002\u0137\u0139\u0003\u0002\u0002\u0002\u0138\u0133\u0003\u0002\u0002", "\u0002\u0138\u0139\u0003\u0002\u0002\u0002\u0139\u013b\u0003\u0002\u0002", "\u0002\u013a\u0132\u0003\u0002\u0002\u0002\u013a\u013b\u0003\u0002\u0002", "\u0002\u013b\u0142\u0003\u0002\u0002\u0002\u013c\u013d\u0007=\u0002", "\u0002\u013d\u013f\u0005\u0016\f\u0002\u013e\u0140\u0007:\u0002\u0002", "\u013f\u013e\u0003\u0002\u0002\u0002\u013f\u0140\u0003\u0002\u0002\u0002", "\u0140\u0142\u0003\u0002\u0002\u0002\u0141\u00f0\u0003\u0002\u0002\u0002", "\u0141\u0123\u0003\u0002\u0002\u0002\u0141\u013c\u0003\u0002\u0002\u0002", "\u0142\u0015\u0003\u0002\u0002\u0002\u0143\u0146\u0007,\u0002\u0002", "\u0144\u0145\u0007;\u0002\u0002\u0145\u0147\u0005d3\u0002\u0146\u0144", "\u0003\u0002\u0002\u0002\u0146\u0147\u0003\u0002\u0002\u0002\u0147\u0017", "\u0003\u0002\u0002\u0002\u0148\u014b\u0005\u001a\u000e\u0002\u0149\u014a", "\u0007>\u0002\u0002\u014a\u014c\u0005d3\u0002\u014b\u0149\u0003\u0002", "\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c\u0155\u0003\u0002", "\u0002\u0002\u014d\u014e\u0007:\u0002\u0002\u014e\u0151\u0005\u001a", "\u000e\u0002\u014f\u0150\u0007>\u0002\u0002\u0150\u0152\u0005d3\u0002", "\u0151\u014f\u0003\u0002\u0002\u0002\u0151\u0152\u0003\u0002\u0002\u0002", "\u0152\u0154\u0003\u0002\u0002\u0002\u0153\u014d\u0003\u0002\u0002\u0002", "\u0154\u0157\u0003\u0002\u0002\u0002\u0155\u0153\u0003\u0002\u0002\u0002", "\u0155\u0156\u0003\u0002\u0002\u0002\u0156\u0179\u0003\u0002\u0002\u0002", "\u0157\u0155\u0003\u0002\u0002\u0002\u0158\u0177\u0007:\u0002\u0002", "\u0159\u015b\u00077\u0002\u0002\u015a\u015c\u0005\u001a\u000e\u0002", "\u015b\u015a\u0003\u0002\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002", "\u015c\u0165\u0003\u0002\u0002\u0002\u015d\u015e\u0007:\u0002\u0002", "\u015e\u0161\u0005\u001a\u000e\u0002\u015f\u0160\u0007>\u0002\u0002", "\u0160\u0162\u0005d3\u0002\u0161\u015f\u0003\u0002\u0002\u0002\u0161", "\u0162\u0003\u0002\u0002\u0002\u0162\u0164\u0003\u0002\u0002\u0002\u0163", "\u015d\u0003\u0002\u0002\u0002\u0164\u0167\u0003\u0002\u0002\u0002\u0165", "\u0163\u0003\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166", "\u0170\u0003\u0002\u0002\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0168", "\u016e\u0007:\u0002\u0002\u0169\u016a\u0007=\u0002\u0002\u016a\u016c", "\u0005\u001a\u000e\u0002\u016b\u016d\u0007:\u0002\u0002\u016c\u016b", "\u0003\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u016f", "\u0003\u0002\u0002\u0002\u016e\u0169\u0003\u0002\u0002\u0002\u016e\u016f", "\u0003\u0002\u0002\u0002\u016f\u0171\u0003\u0002\u0002\u0002\u0170\u0168", "\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002\u0171\u0178", "\u0003\u0002\u0002\u0002\u0172\u0173\u0007=\u0002\u0002\u0173\u0175", "\u0005\u001a\u000e\u0002\u0174\u0176\u0007:\u0002\u0002\u0175\u0174", "\u0003\u0002\u0002\u0002\u0175\u0176\u0003\u0002\u0002\u0002\u0176\u0178", "\u0003\u0002\u0002\u0002\u0177\u0159\u0003\u0002\u0002\u0002\u0177\u0172", "\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178\u017a", "\u0003\u0002\u0002\u0002\u0179\u0158\u0003\u0002\u0002\u0002\u0179\u017a", "\u0003\u0002\u0002\u0002\u017a\u019a\u0003\u0002\u0002\u0002\u017b\u017d", "\u00077\u0002\u0002\u017c\u017e\u0005\u001a\u000e\u0002\u017d\u017c", "\u0003\u0002\u0002\u0002\u017d\u017e\u0003\u0002\u0002\u0002\u017e\u0187", "\u0003\u0002\u0002\u0002\u017f\u0180\u0007:\u0002\u0002\u0180\u0183", "\u0005\u001a\u000e\u0002\u0181\u0182\u0007>\u0002\u0002\u0182\u0184", "\u0005d3\u0002\u0183\u0181\u0003\u0002\u0002\u0002\u0183\u0184\u0003", "\u0002\u0002\u0002\u0184\u0186\u0003\u0002\u0002\u0002\u0185\u017f\u0003", "\u0002\u0002\u0002\u0186\u0189\u0003\u0002\u0002\u0002\u0187\u0185\u0003", "\u0002\u0002\u0002\u0187\u0188\u0003\u0002\u0002\u0002\u0188\u0192\u0003", "\u0002\u0002\u0002\u0189\u0187\u0003\u0002\u0002\u0002\u018a\u0190\u0007", ":\u0002\u0002\u018b\u018c\u0007=\u0002\u0002\u018c\u018e\u0005\u001a", "\u000e\u0002\u018d\u018f\u0007:\u0002\u0002\u018e\u018d\u0003\u0002", "\u0002\u0002\u018e\u018f\u0003\u0002\u0002\u0002\u018f\u0191\u0003\u0002", "\u0002\u0002\u0190\u018b\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002", "\u0002\u0002\u0191\u0193\u0003\u0002\u0002\u0002\u0192\u018a\u0003\u0002", "\u0002\u0002\u0192\u0193\u0003\u0002\u0002\u0002\u0193\u019a\u0003\u0002", "\u0002\u0002\u0194\u0195\u0007=\u0002\u0002\u0195\u0197\u0005\u001a", "\u000e\u0002\u0196\u0198\u0007:\u0002\u0002\u0197\u0196\u0003\u0002", "\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u019a\u0003\u0002", "\u0002\u0002\u0199\u0148\u0003\u0002\u0002\u0002\u0199\u017b\u0003\u0002", "\u0002\u0002\u0199\u0194\u0003\u0002\u0002\u0002\u019a\u0019\u0003\u0002", "\u0002\u0002\u019b\u019c\u0007,\u0002\u0002\u019c\u001b\u0003\u0002", "\u0002\u0002\u019d\u01a0\u0005\u001e\u0010\u0002\u019e\u01a0\u0005P", ")\u0002\u019f\u019d\u0003\u0002\u0002\u0002\u019f\u019e\u0003\u0002", "\u0002\u0002\u01a0\u001d\u0003\u0002\u0002\u0002\u01a1\u01a6\u0005 ", "\u0011\u0002\u01a2\u01a3\u0007<\u0002\u0002\u01a3\u01a5\u0005 \u0011", "\u0002\u01a4\u01a2\u0003\u0002\u0002\u0002\u01a5\u01a8\u0003\u0002\u0002", "\u0002\u01a6\u01a4\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002", "\u0002\u01a7\u01aa\u0003\u0002\u0002\u0002\u01a8\u01a6\u0003\u0002\u0002", "\u0002\u01a9\u01ab\u0007<\u0002\u0002\u01aa\u01a9\u0003\u0002\u0002", "\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002", "\u0002\u01ac\u01ad\u0007+\u0002\u0002\u01ad\u001f\u0003\u0002\u0002", "\u0002\u01ae\u01b7\u0005\"\u0012\u0002\u01af\u01b7\u0005*\u0016\u0002", "\u01b0\u01b7\u0005,\u0017\u0002\u01b1\u01b7\u0005.\u0018\u0002\u01b2", "\u01b7\u0005:\u001e\u0002\u01b3\u01b7\u0005J&\u0002\u01b4\u01b7\u0005", "L\'\u0002\u01b5\u01b7\u0005N(\u0002\u01b6\u01ae\u0003\u0002\u0002\u0002", "\u01b6\u01af\u0003\u0002\u0002\u0002\u01b6\u01b0\u0003\u0002\u0002\u0002", "\u01b6\u01b1\u0003\u0002\u0002\u0002\u01b6\u01b2\u0003\u0002\u0002\u0002", "\u01b6\u01b3\u0003\u0002\u0002\u0002\u01b6\u01b4\u0003\u0002\u0002\u0002", "\u01b6\u01b5\u0003\u0002\u0002\u0002\u01b7!\u0003\u0002\u0002\u0002", "\u01b8\u01c9\u0005&\u0014\u0002\u01b9\u01ca\u0005$\u0013\u0002\u01ba", "\u01bd\u0005(\u0015\u0002\u01bb\u01be\u0005\u00aaV\u0002\u01bc\u01be", "\u0005\u0098M\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd\u01bc", "\u0003\u0002\u0002\u0002\u01be\u01ca\u0003\u0002\u0002\u0002\u01bf\u01c2", "\u0007>\u0002\u0002\u01c0\u01c3\u0005\u00aaV\u0002\u01c1\u01c3\u0005", "&\u0014\u0002\u01c2\u01c0\u0003\u0002\u0002\u0002\u01c2\u01c1\u0003", "\u0002\u0002\u0002\u01c3\u01c5\u0003\u0002\u0002\u0002\u01c4\u01bf\u0003", "\u0002\u0002\u0002\u01c5\u01c8\u0003\u0002\u0002\u0002\u01c6\u01c4\u0003", "\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c7\u01ca\u0003", "\u0002\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c9\u01b9\u0003", "\u0002\u0002\u0002\u01c9\u01ba\u0003\u0002\u0002\u0002\u01c9\u01c6\u0003", "\u0002\u0002\u0002\u01ca#\u0003\u0002\u0002\u0002\u01cb\u01cc\u0007", ";\u0002\u0002\u01cc\u01cf\u0005d3\u0002\u01cd\u01ce\u0007>\u0002\u0002", "\u01ce\u01d0\u0005d3\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002\u01cf", "\u01d0\u0003\u0002\u0002\u0002\u01d0%\u0003\u0002\u0002\u0002\u01d1", "\u01d4\u0005d3\u0002\u01d2\u01d4\u0005v<\u0002\u01d3\u01d1\u0003\u0002", "\u0002\u0002\u01d3\u01d2\u0003\u0002\u0002\u0002\u01d4\u01dc\u0003\u0002", "\u0002\u0002\u01d5\u01d8\u0007:\u0002\u0002\u01d6\u01d9\u0005d3\u0002", "\u01d7\u01d9\u0005v<\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002\u01d8", "\u01d7\u0003\u0002\u0002\u0002\u01d9\u01db\u0003\u0002\u0002\u0002\u01da", "\u01d5\u0003\u0002\u0002\u0002\u01db\u01de\u0003\u0002\u0002\u0002\u01dc", "\u01da\u0003\u0002\u0002\u0002\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd", "\u01e0\u0003\u0002\u0002\u0002\u01de\u01dc\u0003\u0002\u0002\u0002\u01df", "\u01e1\u0007:\u0002\u0002\u01e0\u01df\u0003\u0002\u0002\u0002\u01e0", "\u01e1\u0003\u0002\u0002\u0002\u01e1\'\u0003\u0002\u0002\u0002\u01e2", "\u01e3\t\u0002\u0002\u0002\u01e3)\u0003\u0002\u0002\u0002\u01e4\u01e5", "\u0007%\u0002\u0002\u01e5\u01e6\u0005\u0096L\u0002\u01e6+\u0003\u0002", "\u0002\u0002\u01e7\u01e8\u0007&\u0002\u0002\u01e8-\u0003\u0002\u0002", "\u0002\u01e9\u01ef\u00050\u0019\u0002\u01ea\u01ef\u00052\u001a\u0002", "\u01eb\u01ef\u00054\u001b\u0002\u01ec\u01ef\u00058\u001d\u0002\u01ed", "\u01ef\u00056\u001c\u0002\u01ee\u01e9\u0003\u0002\u0002\u0002\u01ee", "\u01ea\u0003\u0002\u0002\u0002\u01ee\u01eb\u0003\u0002\u0002\u0002\u01ee", "\u01ec\u0003\u0002\u0002\u0002\u01ee\u01ed\u0003\u0002\u0002\u0002\u01ef", "/\u0003\u0002\u0002\u0002\u01f0\u01f1\u0007(\u0002\u0002\u01f11\u0003", "\u0002\u0002\u0002\u01f2\u01f3\u0007\'\u0002\u0002\u01f33\u0003\u0002", "\u0002\u0002\u01f4\u01f6\u0007\t\u0002\u0002\u01f5\u01f7\u0005\u0098", "M\u0002\u01f6\u01f5\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002", "\u0002\u0002\u01f75\u0003\u0002\u0002\u0002\u01f8\u01f9\u0005\u00aa", "V\u0002\u01f97\u0003\u0002\u0002\u0002\u01fa\u0200\u0007\n\u0002\u0002", "\u01fb\u01fe\u0005d3\u0002\u01fc\u01fd\u0007\u000b\u0002\u0002\u01fd", "\u01ff\u0005d3\u0002\u01fe\u01fc\u0003\u0002\u0002\u0002\u01fe\u01ff", "\u0003\u0002\u0002\u0002\u01ff\u0201\u0003\u0002\u0002\u0002\u0200\u01fb", "\u0003\u0002\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u02019", "\u0003\u0002\u0002\u0002\u0202\u0205\u0005<\u001f\u0002\u0203\u0205", "\u0005> \u0002\u0204\u0202\u0003\u0002\u0002\u0002\u0204\u0203\u0003", "\u0002\u0002\u0002\u0205;\u0003\u0002\u0002\u0002\u0206\u0207\u0007", "\f\u0002\u0002\u0207\u0208\u0005F$\u0002\u0208=\u0003\u0002\u0002\u0002", "\u0209\u0216\u0007\u000b\u0002\u0002\u020a\u020c\t\u0003\u0002\u0002", "\u020b\u020a\u0003\u0002\u0002\u0002\u020c\u020f\u0003\u0002\u0002\u0002", "\u020d\u020b\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002", "\u020e\u0210\u0003\u0002\u0002\u0002\u020f\u020d\u0003\u0002\u0002\u0002", "\u0210\u0217\u0005H%\u0002\u0211\u0213\t\u0003\u0002\u0002\u0212\u0211", "\u0003\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0212", "\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215\u0217", "\u0003\u0002\u0002\u0002\u0216\u020d\u0003\u0002\u0002\u0002\u0216\u0212", "\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u021f", "\u0007\f\u0002\u0002\u0219\u0220\u00077\u0002\u0002\u021a\u021b\u0007", "8\u0002\u0002\u021b\u021c\u0005D#\u0002\u021c\u021d\u00079\u0002\u0002", "\u021d\u0220\u0003\u0002\u0002\u0002\u021e\u0220\u0005D#\u0002\u021f", "\u0219\u0003\u0002\u0002\u0002\u021f\u021a\u0003\u0002\u0002\u0002\u021f", "\u021e\u0003\u0002\u0002\u0002\u0220?\u0003\u0002\u0002\u0002\u0221", "\u0224\u0007,\u0002\u0002\u0222\u0223\u0007\r\u0002\u0002\u0223\u0225", "\u0007,\u0002\u0002\u0224\u0222\u0003\u0002\u0002\u0002\u0224\u0225", "\u0003\u0002\u0002\u0002\u0225A\u0003\u0002\u0002\u0002\u0226\u0229", "\u0005H%\u0002\u0227\u0228\u0007\r\u0002\u0002\u0228\u022a\u0007,\u0002", "\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002", "\u0002\u022aC\u0003\u0002\u0002\u0002\u022b\u0230\u0005@!\u0002\u022c", "\u022d\u0007:\u0002\u0002\u022d\u022f\u0005@!\u0002\u022e\u022c\u0003", "\u0002\u0002\u0002\u022f\u0232\u0003\u0002\u0002\u0002\u0230\u022e\u0003", "\u0002\u0002\u0002\u0230\u0231\u0003\u0002\u0002\u0002\u0231\u0234\u0003", "\u0002\u0002\u0002\u0232\u0230\u0003\u0002\u0002\u0002\u0233\u0235\u0007", ":\u0002\u0002\u0234\u0233\u0003\u0002\u0002\u0002\u0234\u0235\u0003", "\u0002\u0002\u0002\u0235E\u0003\u0002\u0002\u0002\u0236\u023b\u0005", "B\"\u0002\u0237\u0238\u0007:\u0002\u0002\u0238\u023a\u0005B\"\u0002", "\u0239\u0237\u0003\u0002\u0002\u0002\u023a\u023d\u0003\u0002\u0002\u0002", "\u023b\u0239\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002", "\u023cG\u0003\u0002\u0002\u0002\u023d\u023b\u0003\u0002\u0002\u0002", "\u023e\u0243\u0007,\u0002\u0002\u023f\u0240\u00075\u0002\u0002\u0240", "\u0242\u0007,\u0002\u0002\u0241\u023f\u0003\u0002\u0002\u0002\u0242", "\u0245\u0003\u0002\u0002\u0002\u0243\u0241\u0003\u0002\u0002\u0002\u0243", "\u0244\u0003\u0002\u0002\u0002\u0244I\u0003\u0002\u0002\u0002\u0245", "\u0243\u0003\u0002\u0002\u0002\u0246\u0247\u0007\u000e\u0002\u0002\u0247", "\u024c\u0007,\u0002\u0002\u0248\u0249\u0007:\u0002\u0002\u0249\u024b", "\u0007,\u0002\u0002\u024a\u0248\u0003\u0002\u0002\u0002\u024b\u024e", "\u0003\u0002\u0002\u0002\u024c\u024a\u0003\u0002\u0002\u0002\u024c\u024d", "\u0003\u0002\u0002\u0002\u024dK\u0003\u0002\u0002\u0002\u024e\u024c", "\u0003\u0002\u0002\u0002\u024f\u0250\u0007\u000f\u0002\u0002\u0250\u0255", "\u0007,\u0002\u0002\u0251\u0252\u0007:\u0002\u0002\u0252\u0254\u0007", ",\u0002\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0254\u0257\u0003", "\u0002\u0002\u0002\u0255\u0253\u0003\u0002\u0002\u0002\u0255\u0256\u0003", "\u0002\u0002\u0002\u0256M\u0003\u0002\u0002\u0002\u0257\u0255\u0003", "\u0002\u0002\u0002\u0258\u0259\u0007\u0010\u0002\u0002\u0259\u025c\u0005", "d3\u0002\u025a\u025b\u0007:\u0002\u0002\u025b\u025d\u0005d3\u0002\u025c", "\u025a\u0003\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d", "O\u0003\u0002\u0002\u0002\u025e\u0268\u0005T+\u0002\u025f\u0268\u0005", "V,\u0002\u0260\u0268\u0005X-\u0002\u0261\u0268\u0005Z.\u0002\u0262\u0268", "\u0005\\/\u0002\u0263\u0268\u0005\u0010\t\u0002\u0264\u0268\u0005\u009c", "O\u0002\u0265\u0268\u0005\f\u0007\u0002\u0266\u0268\u0005R*\u0002\u0267", "\u025e\u0003\u0002\u0002\u0002\u0267\u025f\u0003\u0002\u0002\u0002\u0267", "\u0260\u0003\u0002\u0002\u0002\u0267\u0261\u0003\u0002\u0002\u0002\u0267", "\u0262\u0003\u0002\u0002\u0002\u0267\u0263\u0003\u0002\u0002\u0002\u0267", "\u0264\u0003\u0002\u0002\u0002\u0267\u0265\u0003\u0002\u0002\u0002\u0267", "\u0266\u0003\u0002\u0002\u0002\u0268Q\u0003\u0002\u0002\u0002\u0269", "\u026d\u0007)\u0002\u0002\u026a\u026e\u0005\u0010\t\u0002\u026b\u026e", "\u0005\\/\u0002\u026c\u026e\u0005X-\u0002\u026d\u026a\u0003\u0002\u0002", "\u0002\u026d\u026b\u0003\u0002\u0002\u0002\u026d\u026c\u0003\u0002\u0002", "\u0002\u026eS\u0003\u0002\u0002\u0002\u026f\u0270\u0007\u0011\u0002", "\u0002\u0270\u0271\u0005d3\u0002\u0271\u0272\u0007;\u0002\u0002\u0272", "\u027a\u0005b2\u0002\u0273\u0274\u0007\u0012\u0002\u0002\u0274\u0275", "\u0005d3\u0002\u0275\u0276\u0007;\u0002\u0002\u0276\u0277\u0005b2\u0002", "\u0277\u0279\u0003\u0002\u0002\u0002\u0278\u0273\u0003\u0002\u0002\u0002", "\u0279\u027c\u0003\u0002\u0002\u0002\u027a\u0278\u0003\u0002\u0002\u0002", "\u027a\u027b\u0003\u0002\u0002\u0002\u027b\u0280\u0003\u0002\u0002\u0002", "\u027c\u027a\u0003\u0002\u0002\u0002\u027d\u027e\u0007\u0013\u0002\u0002", "\u027e\u027f\u0007;\u0002\u0002\u027f\u0281\u0005b2\u0002\u0280\u027d", "\u0003\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281U", "\u0003\u0002\u0002\u0002\u0282\u0283\u0007\u0014\u0002\u0002\u0283\u0284", "\u0005d3\u0002\u0284\u0285\u0007;\u0002\u0002\u0285\u0289\u0005b2\u0002", "\u0286\u0287\u0007\u0013\u0002\u0002\u0287\u0288\u0007;\u0002\u0002", "\u0288\u028a\u0005b2\u0002\u0289\u0286\u0003\u0002\u0002\u0002\u0289", "\u028a\u0003\u0002\u0002\u0002\u028aW\u0003\u0002\u0002\u0002\u028b", "\u028c\u0007\u0015\u0002\u0002\u028c\u028d\u0005\u0096L\u0002\u028d", "\u028e\u0007\u0016\u0002\u0002\u028e\u028f\u0005\u0098M\u0002\u028f", "\u0290\u0007;\u0002\u0002\u0290\u0294\u0005b2\u0002\u0291\u0292\u0007", "\u0013\u0002\u0002\u0292\u0293\u0007;\u0002\u0002\u0293\u0295\u0005", "b2\u0002\u0294\u0291\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002", "\u0002\u0002\u0295Y\u0003\u0002\u0002\u0002\u0296\u0297\u0007\u0017", "\u0002\u0002\u0297\u0298\u0007;\u0002\u0002\u0298\u02ae\u0005b2\u0002", "\u0299\u029a\u0005`1\u0002\u029a\u029b\u0007;\u0002\u0002\u029b\u029c", "\u0005b2\u0002\u029c\u029e\u0003\u0002\u0002\u0002\u029d\u0299\u0003", "\u0002\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002\u029f\u029d\u0003", "\u0002\u0002\u0002\u029f\u02a0\u0003\u0002\u0002\u0002\u02a0\u02a4\u0003", "\u0002\u0002\u0002\u02a1\u02a2\u0007\u0013\u0002\u0002\u02a2\u02a3\u0007", ";\u0002\u0002\u02a3\u02a5\u0005b2\u0002\u02a4\u02a1\u0003\u0002\u0002", "\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5\u02a9\u0003\u0002\u0002", "\u0002\u02a6\u02a7\u0007\u0018\u0002\u0002\u02a7\u02a8\u0007;\u0002", "\u0002\u02a8\u02aa\u0005b2\u0002\u02a9\u02a6\u0003\u0002\u0002\u0002", "\u02a9\u02aa\u0003\u0002\u0002\u0002\u02aa\u02af\u0003\u0002\u0002\u0002", "\u02ab\u02ac\u0007\u0018\u0002\u0002\u02ac\u02ad\u0007;\u0002\u0002", "\u02ad\u02af\u0005b2\u0002\u02ae\u029d\u0003\u0002\u0002\u0002\u02ae", "\u02ab\u0003\u0002\u0002\u0002\u02af[\u0003\u0002\u0002\u0002\u02b0", "\u02b1\u0007\u0019\u0002\u0002\u02b1\u02b6\u0005^0\u0002\u02b2\u02b3", "\u0007:\u0002\u0002\u02b3\u02b5\u0005^0\u0002\u02b4\u02b2\u0003\u0002", "\u0002\u0002\u02b5\u02b8\u0003\u0002\u0002\u0002\u02b6\u02b4\u0003\u0002", "\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002\u0002\u02b7\u02b9\u0003\u0002", "\u0002\u0002\u02b8\u02b6\u0003\u0002\u0002\u0002\u02b9\u02ba\u0007;", "\u0002\u0002\u02ba\u02bb\u0005b2\u0002\u02bb]\u0003\u0002\u0002\u0002", "\u02bc\u02bf\u0005d3\u0002\u02bd\u02be\u0007\r\u0002\u0002\u02be\u02c0", "\u0005x=\u0002\u02bf\u02bd\u0003\u0002\u0002\u0002\u02bf\u02c0\u0003", "\u0002\u0002\u0002\u02c0_\u0003\u0002\u0002\u0002\u02c1\u02c7\u0007", "\u001a\u0002\u0002\u02c2\u02c5\u0005d3\u0002\u02c3\u02c4\u0007\r\u0002", "\u0002\u02c4\u02c6\u0007,\u0002\u0002\u02c5\u02c3\u0003\u0002\u0002", "\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c8\u0003\u0002\u0002", "\u0002\u02c7\u02c2\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002", "\u0002\u02c8a\u0003\u0002\u0002\u0002\u02c9\u02d4\u0005\u001e\u0010", "\u0002\u02ca\u02cb\u0007+\u0002\u0002\u02cb\u02cd\u0007\u0003\u0002", "\u0002\u02cc\u02ce\u0005\u001c\u000f\u0002\u02cd\u02cc\u0003\u0002\u0002", "\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cf\u02cd\u0003\u0002\u0002", "\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003\u0002\u0002", "\u0002\u02d1\u02d2\u0007\u0004\u0002\u0002\u02d2\u02d4\u0003\u0002\u0002", "\u0002\u02d3\u02c9\u0003\u0002\u0002\u0002\u02d3\u02ca\u0003\u0002\u0002", "\u0002\u02d4c\u0003\u0002\u0002\u0002\u02d5\u02db\u0005l7\u0002\u02d6", "\u02d7\u0007\u0011\u0002\u0002\u02d7\u02d8\u0005l7\u0002\u02d8\u02d9", "\u0007\u0013\u0002\u0002\u02d9\u02da\u0005d3\u0002\u02da\u02dc\u0003", "\u0002\u0002\u0002\u02db\u02d6\u0003\u0002\u0002\u0002\u02db\u02dc\u0003", "\u0002\u0002\u0002\u02dc\u02df\u0003\u0002\u0002\u0002\u02dd\u02df\u0005", "h5\u0002\u02de\u02d5\u0003\u0002\u0002\u0002\u02de\u02dd\u0003\u0002", "\u0002\u0002\u02dfe\u0003\u0002\u0002\u0002\u02e0\u02e3\u0005l7\u0002", "\u02e1\u02e3\u0005j6\u0002\u02e2\u02e0\u0003\u0002\u0002\u0002\u02e2", "\u02e1\u0003\u0002\u0002\u0002\u02e3g\u0003\u0002\u0002\u0002\u02e4", "\u02e6\u0007\u001b\u0002\u0002\u02e5\u02e7\u0005\u0018\r\u0002\u02e6", "\u02e5\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7", "\u02e8\u0003\u0002\u0002\u0002\u02e8\u02e9\u0007;\u0002\u0002\u02e9", "\u02ea\u0005d3\u0002\u02eai\u0003\u0002\u0002\u0002\u02eb\u02ed\u0007", "\u001b\u0002\u0002\u02ec\u02ee\u0005\u0018\r\u0002\u02ed\u02ec\u0003", "\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02ef\u0003", "\u0002\u0002\u0002\u02ef\u02f0\u0007;\u0002\u0002\u02f0\u02f1\u0005", "f4\u0002\u02f1k\u0003\u0002\u0002\u0002\u02f2\u02f7\u0005n8\u0002\u02f3", "\u02f4\u0007\u001c\u0002\u0002\u02f4\u02f6\u0005n8\u0002\u02f5\u02f3", "\u0003\u0002\u0002\u0002\u02f6\u02f9\u0003\u0002\u0002\u0002\u02f7\u02f5", "\u0003\u0002\u0002\u0002\u02f7\u02f8\u0003\u0002\u0002\u0002\u02f8m", "\u0003\u0002\u0002\u0002\u02f9\u02f7\u0003\u0002\u0002\u0002\u02fa\u02ff", "\u0005p9\u0002\u02fb\u02fc\u0007\u001d\u0002\u0002\u02fc\u02fe\u0005", "p9\u0002\u02fd\u02fb\u0003\u0002\u0002\u0002\u02fe\u0301\u0003\u0002", "\u0002\u0002\u02ff\u02fd\u0003\u0002\u0002\u0002\u02ff\u0300\u0003\u0002", "\u0002\u0002\u0300o\u0003\u0002\u0002\u0002\u0301\u02ff\u0003\u0002", "\u0002\u0002\u0302\u0303\u0007\u001e\u0002\u0002\u0303\u0306\u0005p", "9\u0002\u0304\u0306\u0005r:\u0002\u0305\u0302\u0003\u0002\u0002\u0002", "\u0305\u0304\u0003\u0002\u0002\u0002\u0306q\u0003\u0002\u0002\u0002", "\u0307\u030d\u0005x=\u0002\u0308\u0309\u0005t;\u0002\u0309\u030a\u0005", "x=\u0002\u030a\u030c\u0003\u0002\u0002\u0002\u030b\u0308\u0003\u0002", "\u0002\u0002\u030c\u030f\u0003\u0002\u0002\u0002\u030d\u030b\u0003\u0002", "\u0002\u0002\u030d\u030e\u0003\u0002\u0002\u0002\u030es\u0003\u0002", "\u0002\u0002\u030f\u030d\u0003\u0002\u0002\u0002\u0310\u031e\u0007N", "\u0002\u0002\u0311\u031e\u0007O\u0002\u0002\u0312\u031e\u0007P\u0002", "\u0002\u0313\u031e\u0007Q\u0002\u0002\u0314\u031e\u0007R\u0002\u0002", "\u0315\u031e\u0007S\u0002\u0002\u0316\u031e\u0007T\u0002\u0002\u0317", "\u031e\u0007\u0016\u0002\u0002\u0318\u0319\u0007\u001e\u0002\u0002\u0319", "\u031e\u0007\u0016\u0002\u0002\u031a\u031e\u0007\u001f\u0002\u0002\u031b", "\u031c\u0007\u001f\u0002\u0002\u031c\u031e\u0007\u001e\u0002\u0002\u031d", "\u0310\u0003\u0002\u0002\u0002\u031d\u0311\u0003\u0002\u0002\u0002\u031d", "\u0312\u0003\u0002\u0002\u0002\u031d\u0313\u0003\u0002\u0002\u0002\u031d", "\u0314\u0003\u0002\u0002\u0002\u031d\u0315\u0003\u0002\u0002\u0002\u031d", "\u0316\u0003\u0002\u0002\u0002\u031d\u0317\u0003\u0002\u0002\u0002\u031d", "\u0318\u0003\u0002\u0002\u0002\u031d\u031a\u0003\u0002\u0002\u0002\u031d", "\u031b\u0003\u0002\u0002\u0002\u031eu\u0003\u0002\u0002\u0002\u031f", "\u0320\u00077\u0002\u0002\u0320\u0321\u0005x=\u0002\u0321w\u0003\u0002", "\u0002\u0002\u0322\u0327\u0005z>\u0002\u0323\u0324\u0007A\u0002\u0002", "\u0324\u0326\u0005z>\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0326", "\u0329\u0003\u0002\u0002\u0002\u0327\u0325\u0003\u0002\u0002\u0002\u0327", "\u0328\u0003\u0002\u0002\u0002\u0328y\u0003\u0002\u0002\u0002\u0329", "\u0327\u0003\u0002\u0002\u0002\u032a\u032f\u0005|?\u0002\u032b\u032c", "\u0007B\u0002\u0002\u032c\u032e\u0005|?\u0002\u032d\u032b\u0003\u0002", "\u0002\u0002\u032e\u0331\u0003\u0002\u0002\u0002\u032f\u032d\u0003\u0002", "\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002\u0330{\u0003\u0002", "\u0002\u0002\u0331\u032f\u0003\u0002\u0002\u0002\u0332\u0337\u0005~", "@\u0002\u0333\u0334\u0007C\u0002\u0002\u0334\u0336\u0005~@\u0002\u0335", "\u0333\u0003\u0002\u0002\u0002\u0336\u0339\u0003\u0002\u0002\u0002\u0337", "\u0335\u0003\u0002\u0002\u0002\u0337\u0338\u0003\u0002\u0002\u0002\u0338", "}\u0003\u0002\u0002\u0002\u0339\u0337\u0003\u0002\u0002\u0002\u033a", "\u033f\u0005\u0080A\u0002\u033b\u033c\t\u0004\u0002\u0002\u033c\u033e", "\u0005\u0080A\u0002\u033d\u033b\u0003\u0002\u0002\u0002\u033e\u0341", "\u0003\u0002\u0002\u0002\u033f\u033d\u0003\u0002\u0002\u0002\u033f\u0340", "\u0003\u0002\u0002\u0002\u0340\u007f\u0003\u0002\u0002\u0002\u0341\u033f", "\u0003\u0002\u0002\u0002\u0342\u0347\u0005\u0082B\u0002\u0343\u0344", "\t\u0005\u0002\u0002\u0344\u0346\u0005\u0082B\u0002\u0345\u0343\u0003", "\u0002\u0002\u0002\u0346\u0349\u0003\u0002\u0002\u0002\u0347\u0345\u0003", "\u0002\u0002\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0081\u0003", "\u0002\u0002\u0002\u0349\u0347\u0003\u0002\u0002\u0002\u034a\u034f\u0005", "\u0084C\u0002\u034b\u034c\t\u0006\u0002\u0002\u034c\u034e\u0005\u0084", "C\u0002\u034d\u034b\u0003\u0002\u0002\u0002\u034e\u0351\u0003\u0002", "\u0002\u0002\u034f\u034d\u0003\u0002\u0002\u0002\u034f\u0350\u0003\u0002", "\u0002\u0002\u0350\u0083\u0003\u0002\u0002\u0002\u0351\u034f\u0003\u0002", "\u0002\u0002\u0352\u0353\t\u0007\u0002\u0002\u0353\u0356\u0005\u0084", "C\u0002\u0354\u0356\u0005\u0086D\u0002\u0355\u0352\u0003\u0002\u0002", "\u0002\u0355\u0354\u0003\u0002\u0002\u0002\u0356\u0085\u0003\u0002\u0002", "\u0002\u0357\u035a\u0005\u0088E\u0002\u0358\u0359\u0007=\u0002\u0002", "\u0359\u035b\u0005\u0084C\u0002\u035a\u0358\u0003\u0002\u0002\u0002", "\u035a\u035b\u0003\u0002\u0002\u0002\u035b\u0087\u0003\u0002\u0002\u0002", "\u035c\u035e\u0007*\u0002\u0002\u035d\u035c\u0003\u0002\u0002\u0002", "\u035d\u035e\u0003\u0002\u0002\u0002\u035e\u035f\u0003\u0002\u0002\u0002", "\u035f\u0363\u0005\u008aF\u0002\u0360\u0362\u0005\u008eH\u0002\u0361", "\u0360\u0003\u0002\u0002\u0002\u0362\u0365\u0003\u0002\u0002\u0002\u0363", "\u0361\u0003\u0002\u0002\u0002\u0363\u0364\u0003\u0002\u0002\u0002\u0364", "\u0089\u0003\u0002\u0002\u0002\u0365\u0363\u0003\u0002\u0002\u0002\u0366", "\u0369\u00078\u0002\u0002\u0367\u036a\u0005\u00aaV\u0002\u0368\u036a", "\u0005\u008cG\u0002\u0369\u0367\u0003\u0002\u0002\u0002\u0369\u0368", "\u0003\u0002\u0002\u0002\u0369\u036a\u0003\u0002\u0002\u0002\u036a\u036b", "\u0003\u0002\u0002\u0002\u036b\u0382\u00079\u0002\u0002\u036c\u036e", "\u0007?\u0002\u0002\u036d\u036f\u0005\u008cG\u0002\u036e\u036d\u0003", "\u0002\u0002\u0002\u036e\u036f\u0003\u0002\u0002\u0002\u036f\u0370\u0003", "\u0002\u0002\u0002\u0370\u0382\u0007@\u0002\u0002\u0371\u0373\u0007", "L\u0002\u0002\u0372\u0374\u0005\u009aN\u0002\u0373\u0372\u0003\u0002", "\u0002\u0002\u0373\u0374\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002", "\u0002\u0002\u0375\u0382\u0007M\u0002\u0002\u0376\u0382\u0007,\u0002", "\u0002\u0377\u0382\u0007\u0006\u0002\u0002\u0378\u037a\u0007\u0005\u0002", "\u0002\u0379\u0378\u0003\u0002\u0002\u0002\u037a\u037b\u0003\u0002\u0002", "\u0002\u037b\u0379\u0003\u0002\u0002\u0002\u037b\u037c\u0003\u0002\u0002", "\u0002\u037c\u0382\u0003\u0002\u0002\u0002\u037d\u0382\u00076\u0002", "\u0002\u037e\u0382\u0007 \u0002\u0002\u037f\u0382\u0007!\u0002\u0002", "\u0380\u0382\u0007\"\u0002\u0002\u0381\u0366\u0003\u0002\u0002\u0002", "\u0381\u036c\u0003\u0002\u0002\u0002\u0381\u0371\u0003\u0002\u0002\u0002", "\u0381\u0376\u0003\u0002\u0002\u0002\u0381\u0377\u0003\u0002\u0002\u0002", "\u0381\u0379\u0003\u0002\u0002\u0002\u0381\u037d\u0003\u0002\u0002\u0002", "\u0381\u037e\u0003\u0002\u0002\u0002\u0381\u037f\u0003\u0002\u0002\u0002", "\u0381\u0380\u0003\u0002\u0002\u0002\u0382\u008b\u0003\u0002\u0002\u0002", "\u0383\u0386\u0005d3\u0002\u0384\u0386\u0005v<\u0002\u0385\u0383\u0003", "\u0002\u0002\u0002\u0385\u0384\u0003\u0002\u0002\u0002\u0386\u0395\u0003", "\u0002\u0002\u0002\u0387\u0396\u0005\u00a4S\u0002\u0388\u038b\u0007", ":\u0002\u0002\u0389\u038c\u0005d3\u0002\u038a\u038c\u0005v<\u0002\u038b", "\u0389\u0003\u0002\u0002\u0002\u038b\u038a\u0003\u0002\u0002\u0002\u038c", "\u038e\u0003\u0002\u0002\u0002\u038d\u0388\u0003\u0002\u0002\u0002\u038e", "\u0391\u0003\u0002\u0002\u0002\u038f\u038d\u0003\u0002\u0002\u0002\u038f", "\u0390\u0003\u0002\u0002\u0002\u0390\u0393\u0003\u0002\u0002\u0002\u0391", "\u038f\u0003\u0002\u0002\u0002\u0392\u0394\u0007:\u0002\u0002\u0393", "\u0392\u0003\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002\u0002\u0394", "\u0396\u0003\u0002\u0002\u0002\u0395\u0387\u0003\u0002\u0002\u0002\u0395", "\u038f\u0003\u0002\u0002\u0002\u0396\u008d\u0003\u0002\u0002\u0002\u0397", "\u0399\u00078\u0002\u0002\u0398\u039a\u0005\u009eP\u0002\u0399\u0398", "\u0003\u0002\u0002\u0002\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u039b", "\u0003\u0002\u0002\u0002\u039b\u03a3\u00079\u0002\u0002\u039c\u039d", "\u0007?\u0002\u0002\u039d\u039e\u0005\u0090I\u0002\u039e\u039f\u0007", "@\u0002\u0002\u039f\u03a3\u0003\u0002\u0002\u0002\u03a0\u03a1\u0007", "5\u0002\u0002\u03a1\u03a3\u0007,\u0002\u0002\u03a2\u0397\u0003\u0002", "\u0002\u0002\u03a2\u039c\u0003\u0002\u0002\u0002\u03a2\u03a0\u0003\u0002", "\u0002\u0002\u03a3\u008f\u0003\u0002\u0002\u0002\u03a4\u03a9\u0005\u0092", "J\u0002\u03a5\u03a6\u0007:\u0002\u0002\u03a6\u03a8\u0005\u0092J\u0002", "\u03a7\u03a5\u0003\u0002\u0002\u0002\u03a8\u03ab\u0003\u0002\u0002\u0002", "\u03a9\u03a7\u0003\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002", "\u03aa\u03ad\u0003\u0002\u0002\u0002\u03ab\u03a9\u0003\u0002\u0002\u0002", "\u03ac\u03ae\u0007:\u0002\u0002\u03ad\u03ac\u0003\u0002\u0002\u0002", "\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u0091\u0003\u0002\u0002\u0002", "\u03af\u03bb\u0005d3\u0002\u03b0\u03b2\u0005d3\u0002\u03b1\u03b0\u0003", "\u0002\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002\u03b2\u03b3\u0003", "\u0002\u0002\u0002\u03b3\u03b5\u0007;\u0002\u0002\u03b4\u03b6\u0005", "d3\u0002\u03b5\u03b4\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003\u0002", "\u0002\u0002\u03b6\u03b8\u0003\u0002\u0002\u0002\u03b7\u03b9\u0005\u0094", "K\u0002\u03b8\u03b7\u0003\u0002\u0002\u0002\u03b8\u03b9\u0003\u0002", "\u0002\u0002\u03b9\u03bb\u0003\u0002\u0002\u0002\u03ba\u03af\u0003\u0002", "\u0002\u0002\u03ba\u03b1\u0003\u0002\u0002\u0002\u03bb\u0093\u0003\u0002", "\u0002\u0002\u03bc\u03be\u0007;\u0002\u0002\u03bd\u03bf\u0005d3\u0002", "\u03be\u03bd\u0003\u0002\u0002\u0002\u03be\u03bf\u0003\u0002\u0002\u0002", "\u03bf\u0095\u0003\u0002\u0002\u0002\u03c0\u03c3\u0005x=\u0002\u03c1", "\u03c3\u0005v<\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002\u03c2\u03c1", "\u0003\u0002\u0002\u0002\u03c3\u03cb\u0003\u0002\u0002\u0002\u03c4\u03c7", "\u0007:\u0002\u0002\u03c5\u03c8\u0005x=\u0002\u03c6\u03c8\u0005v<\u0002", "\u03c7\u03c5\u0003\u0002\u0002\u0002\u03c7\u03c6\u0003\u0002\u0002\u0002", "\u03c8\u03ca\u0003\u0002\u0002\u0002\u03c9\u03c4\u0003\u0002\u0002\u0002", "\u03ca\u03cd\u0003\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002\u0002\u0002", "\u03cb\u03cc\u0003\u0002\u0002\u0002\u03cc\u03cf\u0003\u0002\u0002\u0002", "\u03cd\u03cb\u0003\u0002\u0002\u0002\u03ce\u03d0\u0007:\u0002\u0002", "\u03cf\u03ce\u0003\u0002\u0002\u0002\u03cf\u03d0\u0003\u0002\u0002\u0002", "\u03d0\u0097\u0003\u0002\u0002\u0002\u03d1\u03d6\u0005d3\u0002\u03d2", "\u03d3\u0007:\u0002\u0002\u03d3\u03d5\u0005d3\u0002\u03d4\u03d2\u0003", "\u0002\u0002\u0002\u03d5\u03d8\u0003\u0002\u0002\u0002\u03d6\u03d4\u0003", "\u0002\u0002\u0002\u03d6\u03d7\u0003\u0002\u0002\u0002\u03d7\u03da\u0003", "\u0002\u0002\u0002\u03d8\u03d6\u0003\u0002\u0002\u0002\u03d9\u03db\u0007", ":\u0002\u0002\u03da\u03d9\u0003\u0002\u0002\u0002\u03da\u03db\u0003", "\u0002\u0002\u0002\u03db\u0099\u0003\u0002\u0002\u0002\u03dc\u03dd\u0005", "d3\u0002\u03dd\u03de\u0007;\u0002\u0002\u03de\u03df\u0005d3\u0002\u03df", "\u03e3\u0003\u0002\u0002\u0002\u03e0\u03e1\u0007=\u0002\u0002\u03e1", "\u03e3\u0005x=\u0002\u03e2\u03dc\u0003\u0002\u0002\u0002\u03e2\u03e0", "\u0003\u0002\u0002\u0002\u03e3\u03f6\u0003\u0002\u0002\u0002\u03e4\u03f7", "\u0005\u00a4S\u0002\u03e5\u03ec\u0007:\u0002\u0002\u03e6\u03e7\u0005", "d3\u0002\u03e7\u03e8\u0007;\u0002\u0002\u03e8\u03e9\u0005d3\u0002\u03e9", "\u03ed\u0003\u0002\u0002\u0002\u03ea\u03eb\u0007=\u0002\u0002\u03eb", "\u03ed\u0005x=\u0002\u03ec\u03e6\u0003\u0002\u0002\u0002\u03ec\u03ea", "\u0003\u0002\u0002\u0002\u03ed\u03ef\u0003\u0002\u0002\u0002\u03ee\u03e5", "\u0003\u0002\u0002\u0002\u03ef\u03f2\u0003\u0002\u0002\u0002\u03f0\u03ee", "\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002\u0002\u0002\u03f1\u03f4", "\u0003\u0002\u0002\u0002\u03f2\u03f0\u0003\u0002\u0002\u0002\u03f3\u03f5", "\u0007:\u0002\u0002\u03f4\u03f3\u0003\u0002\u0002\u0002\u03f4\u03f5", "\u0003\u0002\u0002\u0002\u03f5\u03f7\u0003\u0002\u0002\u0002\u03f6\u03e4", "\u0003\u0002\u0002\u0002\u03f6\u03f0\u0003\u0002\u0002\u0002\u03f7\u040d", "\u0003\u0002\u0002\u0002\u03f8\u03fb\u0005d3\u0002\u03f9\u03fb\u0005", "v<\u0002\u03fa\u03f8\u0003\u0002\u0002\u0002\u03fa\u03f9\u0003\u0002", "\u0002\u0002\u03fb\u040a\u0003\u0002\u0002\u0002\u03fc\u040b\u0005\u00a4", "S\u0002\u03fd\u0400\u0007:\u0002\u0002\u03fe\u0401\u0005d3\u0002\u03ff", "\u0401\u0005v<\u0002\u0400\u03fe\u0003\u0002\u0002\u0002\u0400\u03ff", "\u0003\u0002\u0002\u0002\u0401\u0403\u0003\u0002\u0002\u0002\u0402\u03fd", "\u0003\u0002\u0002\u0002\u0403\u0406\u0003\u0002\u0002\u0002\u0404\u0402", "\u0003\u0002\u0002\u0002\u0404\u0405\u0003\u0002\u0002\u0002\u0405\u0408", "\u0003\u0002\u0002\u0002\u0406\u0404\u0003\u0002\u0002\u0002\u0407\u0409", "\u0007:\u0002\u0002\u0408\u0407\u0003\u0002\u0002\u0002\u0408\u0409", "\u0003\u0002\u0002\u0002\u0409\u040b\u0003\u0002\u0002\u0002\u040a\u03fc", "\u0003\u0002\u0002\u0002\u040a\u0404\u0003\u0002\u0002\u0002\u040b\u040d", "\u0003\u0002\u0002\u0002\u040c\u03e2\u0003\u0002\u0002\u0002\u040c\u03fa", "\u0003\u0002\u0002\u0002\u040d\u009b\u0003\u0002\u0002\u0002\u040e\u040f", "\u0007#\u0002\u0002\u040f\u0415\u0007,\u0002\u0002\u0410\u0412\u0007", "8\u0002\u0002\u0411\u0413\u0005\u009eP\u0002\u0412\u0411\u0003\u0002", "\u0002\u0002\u0412\u0413\u0003\u0002\u0002\u0002\u0413\u0414\u0003\u0002", "\u0002\u0002\u0414\u0416\u00079\u0002\u0002\u0415\u0410\u0003\u0002", "\u0002\u0002\u0415\u0416\u0003\u0002\u0002\u0002\u0416\u0417\u0003\u0002", "\u0002\u0002\u0417\u0418\u0007;\u0002\u0002\u0418\u0419\u0005b2\u0002", "\u0419\u009d\u0003\u0002\u0002\u0002\u041a\u041f\u0005\u00a0Q\u0002", "\u041b\u041c\u0007:\u0002\u0002\u041c\u041e\u0005\u00a0Q\u0002\u041d", "\u041b\u0003\u0002\u0002\u0002\u041e\u0421\u0003\u0002\u0002\u0002\u041f", "\u041d\u0003\u0002\u0002\u0002\u041f\u0420\u0003\u0002\u0002\u0002\u0420", "\u0423\u0003\u0002\u0002\u0002\u0421\u041f\u0003\u0002\u0002\u0002\u0422", "\u0424\u0007:\u0002\u0002\u0423\u0422\u0003\u0002\u0002\u0002\u0423", "\u0424\u0003\u0002\u0002\u0002\u0424\u009f\u0003\u0002\u0002\u0002\u0425", "\u0427\u0005d3\u0002\u0426\u0428\u0005\u00a4S\u0002\u0427\u0426\u0003", "\u0002\u0002\u0002\u0427\u0428\u0003\u0002\u0002\u0002\u0428\u0432\u0003", "\u0002\u0002\u0002\u0429\u042a\u0005d3\u0002\u042a\u042b\u0007>\u0002", "\u0002\u042b\u042c\u0005d3\u0002\u042c\u0432\u0003\u0002\u0002\u0002", "\u042d\u042e\u0007=\u0002\u0002\u042e\u0432\u0005d3\u0002\u042f\u0430", "\u00077\u0002\u0002\u0430\u0432\u0005d3\u0002\u0431\u0425\u0003\u0002", "\u0002\u0002\u0431\u0429\u0003\u0002\u0002\u0002\u0431\u042d\u0003\u0002", "\u0002\u0002\u0431\u042f\u0003\u0002\u0002\u0002\u0432\u00a1\u0003\u0002", "\u0002\u0002\u0433\u0436\u0005\u00a4S\u0002\u0434\u0436\u0005\u00a6", "T\u0002\u0435\u0433\u0003\u0002\u0002\u0002\u0435\u0434\u0003\u0002", "\u0002\u0002\u0436\u00a3\u0003\u0002\u0002\u0002\u0437\u0439\u0007)", "\u0002\u0002\u0438\u0437\u0003\u0002\u0002\u0002\u0438\u0439\u0003\u0002", "\u0002\u0002\u0439\u043a\u0003\u0002\u0002\u0002\u043a\u043b\u0007\u0015", "\u0002\u0002\u043b\u043c\u0005\u0096L\u0002\u043c\u043d\u0007\u0016", "\u0002\u0002\u043d\u043f\u0005l7\u0002\u043e\u0440\u0005\u00a2R\u0002", "\u043f\u043e\u0003\u0002\u0002\u0002\u043f\u0440\u0003\u0002\u0002\u0002", "\u0440\u00a5\u0003\u0002\u0002\u0002\u0441\u0442\u0007\u0011\u0002\u0002", "\u0442\u0444\u0005f4\u0002\u0443\u0445\u0005\u00a2R\u0002\u0444\u0443", "\u0003\u0002\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002\u0445\u00a7", "\u0003\u0002\u0002\u0002\u0446\u0447\u0007,\u0002\u0002\u0447\u00a9", "\u0003\u0002\u0002\u0002\u0448\u044a\u0007$\u0002\u0002\u0449\u044b", "\u0005\u00acW\u0002\u044a\u0449\u0003\u0002\u0002\u0002\u044a\u044b", "\u0003\u0002\u0002\u0002\u044b\u00ab\u0003\u0002\u0002\u0002\u044c\u044d", "\u0007\u000b\u0002\u0002\u044d\u0450\u0005d3\u0002\u044e\u0450\u0005", "\u0098M\u0002\u044f\u044c\u0003\u0002\u0002\u0002\u044f\u044e\u0003", "\u0002\u0002\u0002\u0450\u00ad\u0003\u0002\u0002\u0002\u00a8\u00b3\u00b7", "\u00b9\u00c2\u00cb\u00ce\u00d5\u00db\u00e5\u00ec\u00f3\u00f9\u00fd\u0103", "\u0109\u010d\u0114\u0116\u0118\u011d\u011f\u0121\u0125\u012b\u012f\u0136", "\u0138\u013a\u013f\u0141\u0146\u014b\u0151\u0155\u015b\u0161\u0165\u016c", "\u016e\u0170\u0175\u0177\u0179\u017d\u0183\u0187\u018e\u0190\u0192\u0197", "\u0199\u019f\u01a6\u01aa\u01b6\u01bd\u01c2\u01c6\u01c9\u01cf\u01d3\u01d8", "\u01dc\u01e0\u01ee\u01f6\u01fe\u0200\u0204\u020d\u0214\u0216\u021f\u0224", "\u0229\u0230\u0234\u023b\u0243\u024c\u0255\u025c\u0267\u026d\u027a\u0280", "\u0289\u0294\u029f\u02a4\u02a9\u02ae\u02b6\u02bf\u02c5\u02c7\u02cf\u02d3", "\u02db\u02de\u02e2\u02e6\u02ed\u02f7\u02ff\u0305\u030d\u031d\u0327\u032f", "\u0337\u033f\u0347\u034f\u0355\u035a\u035d\u0363\u0369\u036e\u0373\u037b", "\u0381\u0385\u038b\u038f\u0393\u0395\u0399\u03a2\u03a9\u03ad\u03b1\u03b5", "\u03b8\u03ba\u03be\u03c2\u03c7\u03cb\u03cf\u03d6\u03da\u03e2\u03ec\u03f0", "\u03f4\u03f6\u03fa\u0400\u0404\u0408\u040a\u040c\u0412\u0415\u041f\u0423", "\u0427\u0431\u0435\u0438\u043f\u0444\u044a\u044f"].join("");
const atn = new _antlr.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new _antlr.default.dfa.DFA(ds, index));
const sharedContextCache = new _antlr.default.PredictionContextCache();

class Python3Parser extends _antlr.default.Parser {
  static grammarFileName = "Python3Parser.g4";
  static literalNames = [null, null, null, null, null, null, "'def'", "'return'", "'raise'", "'from'", "'import'", "'as'", "'global'", "'nonlocal'", "'assert'", "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", "'finally'", "'with'", "'except'", "'lambda'", "'or'", "'and'", "'not'", "'is'", "'None'", "'True'", "'False'", "'class'", "'yield'", "'del'", "'pass'", "'continue'", "'break'", "'async'", "'await'", null, null, null, null, null, null, null, null, null, null, "'.'", "'...'", "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='"];
  static symbolicNames = [null, "INDENT", "DEDENT", "STRING", "NUMBER", "INTEGER", "DEF", "RETURN", "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR"];
  static ruleNames = ["single_input", "file_input", "eval_input", "decorator", "decorators", "decorated", "async_funcdef", "funcdef", "parameters", "typedargslist", "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", "small_stmt", "expr_stmt", "annassign", "testlist_star_expr", "augassign", "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", "import_name", "import_from", "import_as_name", "dotted_as_name", "import_as_names", "dotted_as_names", "dotted_name", "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", "with_item", "except_clause", "suite", "test", "test_nocond", "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", "comparison", "comp_op", "star_expr", "expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", "term", "factor", "power", "atom_expr", "atom", "testlist_comp", "trailer", "subscriptlist", "subscript_", "sliceop", "exprlist", "testlist", "dictorsetmaker", "classdef", "arglist", "argument", "comp_iter", "comp_for", "comp_if", "encoding_decl", "yield_expr", "yield_arg"];

  constructor(input) {
    super(input);
    this._interp = new _antlr.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = Python3Parser.ruleNames;
    this.literalNames = Python3Parser.literalNames;
    this.symbolicNames = Python3Parser.symbolicNames;
  }

  get atn() {
    return atn;
  }

  single_input() {
    let localctx = new Single_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, Python3Parser.RULE_single_input);

    try {
      this.state = 177;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.NEWLINE:
          this.enterOuterAlt(localctx, 1);
          this.state = 172;
          this.match(Python3Parser.NEWLINE);
          break;

        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.RETURN:
        case Python3Parser.RAISE:
        case Python3Parser.FROM:
        case Python3Parser.IMPORT:
        case Python3Parser.GLOBAL:
        case Python3Parser.NONLOCAL:
        case Python3Parser.ASSERT:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.YIELD:
        case Python3Parser.DEL:
        case Python3Parser.PASS:
        case Python3Parser.CONTINUE:
        case Python3Parser.BREAK:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.STAR:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.enterOuterAlt(localctx, 2);
          this.state = 173;
          this.simple_stmt();
          break;

        case Python3Parser.DEF:
        case Python3Parser.IF:
        case Python3Parser.WHILE:
        case Python3Parser.FOR:
        case Python3Parser.TRY:
        case Python3Parser.WITH:
        case Python3Parser.CLASS:
        case Python3Parser.ASYNC:
        case Python3Parser.AT:
          this.enterOuterAlt(localctx, 3);
          this.state = 174;
          this.compound_stmt();
          this.state = 175;
          this.match(Python3Parser.NEWLINE);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  file_input() {
    let localctx = new File_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, Python3Parser.RULE_file_input);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 183;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.DEF | 1 << Python3Parser.RETURN | 1 << Python3Parser.RAISE | 1 << Python3Parser.FROM | 1 << Python3Parser.IMPORT | 1 << Python3Parser.GLOBAL | 1 << Python3Parser.NONLOCAL | 1 << Python3Parser.ASSERT | 1 << Python3Parser.IF | 1 << Python3Parser.WHILE | 1 << Python3Parser.FOR | 1 << Python3Parser.TRY | 1 << Python3Parser.WITH | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.CLASS - 32 | 1 << Python3Parser.YIELD - 32 | 1 << Python3Parser.DEL - 32 | 1 << Python3Parser.PASS - 32 | 1 << Python3Parser.CONTINUE - 32 | 1 << Python3Parser.BREAK - 32 | 1 << Python3Parser.ASYNC - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NEWLINE - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.STAR - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68 | 1 << Python3Parser.AT - 68)) !== 0) {
        this.state = 181;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case Python3Parser.NEWLINE:
            this.state = 179;
            this.match(Python3Parser.NEWLINE);
            break;

          case Python3Parser.STRING:
          case Python3Parser.NUMBER:
          case Python3Parser.DEF:
          case Python3Parser.RETURN:
          case Python3Parser.RAISE:
          case Python3Parser.FROM:
          case Python3Parser.IMPORT:
          case Python3Parser.GLOBAL:
          case Python3Parser.NONLOCAL:
          case Python3Parser.ASSERT:
          case Python3Parser.IF:
          case Python3Parser.WHILE:
          case Python3Parser.FOR:
          case Python3Parser.TRY:
          case Python3Parser.WITH:
          case Python3Parser.LAMBDA:
          case Python3Parser.NOT:
          case Python3Parser.NONE:
          case Python3Parser.TRUE:
          case Python3Parser.FALSE:
          case Python3Parser.CLASS:
          case Python3Parser.YIELD:
          case Python3Parser.DEL:
          case Python3Parser.PASS:
          case Python3Parser.CONTINUE:
          case Python3Parser.BREAK:
          case Python3Parser.ASYNC:
          case Python3Parser.AWAIT:
          case Python3Parser.NAME:
          case Python3Parser.ELLIPSIS:
          case Python3Parser.STAR:
          case Python3Parser.OPEN_PAREN:
          case Python3Parser.OPEN_BRACK:
          case Python3Parser.ADD:
          case Python3Parser.MINUS:
          case Python3Parser.NOT_OP:
          case Python3Parser.OPEN_BRACE:
          case Python3Parser.AT:
            this.state = 180;
            this.stmt();
            break;

          default:
            throw new _antlr.default.error.NoViableAltException(this);
        }

        this.state = 185;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 186;
      this.match(Python3Parser.EOF);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  eval_input() {
    let localctx = new Eval_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, Python3Parser.RULE_eval_input);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 188;
      this.testlist();
      this.state = 192;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.NEWLINE) {
        this.state = 189;
        this.match(Python3Parser.NEWLINE);
        this.state = 194;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 195;
      this.match(Python3Parser.EOF);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  decorator() {
    let localctx = new DecoratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, Python3Parser.RULE_decorator);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 197;
      this.match(Python3Parser.AT);
      this.state = 198;
      this.dotted_name();
      this.state = 204;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.OPEN_PAREN) {
        this.state = 199;
        this.match(Python3Parser.OPEN_PAREN);
        this.state = 201;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.STAR - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.POWER - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
          this.state = 200;
          this.arglist();
        }

        this.state = 203;
        this.match(Python3Parser.CLOSE_PAREN);
      }

      this.state = 206;
      this.match(Python3Parser.NEWLINE);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  decorators() {
    let localctx = new DecoratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, Python3Parser.RULE_decorators);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 209;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      do {
        this.state = 208;
        this.decorator();
        this.state = 211;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      } while (_la === Python3Parser.AT);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  decorated() {
    let localctx = new DecoratedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, Python3Parser.RULE_decorated);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 213;
      this.decorators();
      this.state = 217;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.CLASS:
          this.state = 214;
          this.classdef();
          break;

        case Python3Parser.DEF:
          this.state = 215;
          this.funcdef();
          break;

        case Python3Parser.ASYNC:
          this.state = 216;
          this.async_funcdef();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  async_funcdef() {
    let localctx = new Async_funcdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, Python3Parser.RULE_async_funcdef);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 219;
      this.match(Python3Parser.ASYNC);
      this.state = 220;
      this.funcdef();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  funcdef() {
    let localctx = new FuncdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, Python3Parser.RULE_funcdef);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 222;
      this.match(Python3Parser.DEF);
      this.state = 223;
      this.match(Python3Parser.NAME);
      this.state = 224;
      this.parameters();
      this.state = 227;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.ARROW) {
        this.state = 225;
        this.match(Python3Parser.ARROW);
        this.state = 226;
        this.test();
      }

      this.state = 229;
      this.match(Python3Parser.COLON);
      this.state = 230;
      this.suite();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  parameters() {
    let localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, Python3Parser.RULE_parameters);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 232;
      this.match(Python3Parser.OPEN_PAREN);
      this.state = 234;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 42 & ~0x1f) == 0 && (1 << _la - 42 & (1 << Python3Parser.NAME - 42 | 1 << Python3Parser.STAR - 42 | 1 << Python3Parser.POWER - 42)) !== 0) {
        this.state = 233;
        this.typedargslist();
      }

      this.state = 236;
      this.match(Python3Parser.CLOSE_PAREN);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  typedargslist() {
    let localctx = new TypedargslistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, Python3Parser.RULE_typedargslist);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 319;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.NAME:
          this.state = 238;
          this.tfpdef();
          this.state = 241;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.ASSIGN) {
            this.state = 239;
            this.match(Python3Parser.ASSIGN);
            this.state = 240;
            this.test();
          }

          this.state = 251;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 12, this._ctx);

          while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 243;
              this.match(Python3Parser.COMMA);
              this.state = 244;
              this.tfpdef();
              this.state = 247;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === Python3Parser.ASSIGN) {
                this.state = 245;
                this.match(Python3Parser.ASSIGN);
                this.state = 246;
                this.test();
              }
            }

            this.state = 253;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 12, this._ctx);
          }

          this.state = 287;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.COMMA) {
            this.state = 254;
            this.match(Python3Parser.COMMA);
            this.state = 285;

            this._errHandler.sync(this);

            switch (this._input.LA(1)) {
              case Python3Parser.STAR:
                this.state = 255;
                this.match(Python3Parser.STAR);
                this.state = 257;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if (_la === Python3Parser.NAME) {
                  this.state = 256;
                  this.tfpdef();
                }

                this.state = 267;

                this._errHandler.sync(this);

                var _alt = this._interp.adaptivePredict(this._input, 15, this._ctx);

                while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
                  if (_alt === 1) {
                    this.state = 259;
                    this.match(Python3Parser.COMMA);
                    this.state = 260;
                    this.tfpdef();
                    this.state = 263;

                    this._errHandler.sync(this);

                    _la = this._input.LA(1);

                    if (_la === Python3Parser.ASSIGN) {
                      this.state = 261;
                      this.match(Python3Parser.ASSIGN);
                      this.state = 262;
                      this.test();
                    }
                  }

                  this.state = 269;

                  this._errHandler.sync(this);

                  _alt = this._interp.adaptivePredict(this._input, 15, this._ctx);
                }

                this.state = 278;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if (_la === Python3Parser.COMMA) {
                  this.state = 270;
                  this.match(Python3Parser.COMMA);
                  this.state = 276;

                  this._errHandler.sync(this);

                  _la = this._input.LA(1);

                  if (_la === Python3Parser.POWER) {
                    this.state = 271;
                    this.match(Python3Parser.POWER);
                    this.state = 272;
                    this.tfpdef();
                    this.state = 274;

                    this._errHandler.sync(this);

                    _la = this._input.LA(1);

                    if (_la === Python3Parser.COMMA) {
                      this.state = 273;
                      this.match(Python3Parser.COMMA);
                    }
                  }
                }

                break;

              case Python3Parser.POWER:
                this.state = 280;
                this.match(Python3Parser.POWER);
                this.state = 281;
                this.tfpdef();
                this.state = 283;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if (_la === Python3Parser.COMMA) {
                  this.state = 282;
                  this.match(Python3Parser.COMMA);
                }

                break;

              case Python3Parser.CLOSE_PAREN:
                break;

              default:
                break;
            }
          }

          break;

        case Python3Parser.STAR:
          this.state = 289;
          this.match(Python3Parser.STAR);
          this.state = 291;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.NAME) {
            this.state = 290;
            this.tfpdef();
          }

          this.state = 301;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 24, this._ctx);

          while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 293;
              this.match(Python3Parser.COMMA);
              this.state = 294;
              this.tfpdef();
              this.state = 297;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === Python3Parser.ASSIGN) {
                this.state = 295;
                this.match(Python3Parser.ASSIGN);
                this.state = 296;
                this.test();
              }
            }

            this.state = 303;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 24, this._ctx);
          }

          this.state = 312;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.COMMA) {
            this.state = 304;
            this.match(Python3Parser.COMMA);
            this.state = 310;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === Python3Parser.POWER) {
              this.state = 305;
              this.match(Python3Parser.POWER);
              this.state = 306;
              this.tfpdef();
              this.state = 308;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === Python3Parser.COMMA) {
                this.state = 307;
                this.match(Python3Parser.COMMA);
              }
            }
          }

          break;

        case Python3Parser.POWER:
          this.state = 314;
          this.match(Python3Parser.POWER);
          this.state = 315;
          this.tfpdef();
          this.state = 317;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.COMMA) {
            this.state = 316;
            this.match(Python3Parser.COMMA);
          }

          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  tfpdef() {
    let localctx = new TfpdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, Python3Parser.RULE_tfpdef);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 321;
      this.match(Python3Parser.NAME);
      this.state = 324;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.COLON) {
        this.state = 322;
        this.match(Python3Parser.COLON);
        this.state = 323;
        this.test();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  varargslist() {
    let localctx = new VarargslistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, Python3Parser.RULE_varargslist);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 407;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.NAME:
          this.state = 326;
          this.vfpdef();
          this.state = 329;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.ASSIGN) {
            this.state = 327;
            this.match(Python3Parser.ASSIGN);
            this.state = 328;
            this.test();
          }

          this.state = 339;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 33, this._ctx);

          while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 331;
              this.match(Python3Parser.COMMA);
              this.state = 332;
              this.vfpdef();
              this.state = 335;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === Python3Parser.ASSIGN) {
                this.state = 333;
                this.match(Python3Parser.ASSIGN);
                this.state = 334;
                this.test();
              }
            }

            this.state = 341;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 33, this._ctx);
          }

          this.state = 375;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.COMMA) {
            this.state = 342;
            this.match(Python3Parser.COMMA);
            this.state = 373;

            this._errHandler.sync(this);

            switch (this._input.LA(1)) {
              case Python3Parser.STAR:
                this.state = 343;
                this.match(Python3Parser.STAR);
                this.state = 345;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if (_la === Python3Parser.NAME) {
                  this.state = 344;
                  this.vfpdef();
                }

                this.state = 355;

                this._errHandler.sync(this);

                var _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);

                while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
                  if (_alt === 1) {
                    this.state = 347;
                    this.match(Python3Parser.COMMA);
                    this.state = 348;
                    this.vfpdef();
                    this.state = 351;

                    this._errHandler.sync(this);

                    _la = this._input.LA(1);

                    if (_la === Python3Parser.ASSIGN) {
                      this.state = 349;
                      this.match(Python3Parser.ASSIGN);
                      this.state = 350;
                      this.test();
                    }
                  }

                  this.state = 357;

                  this._errHandler.sync(this);

                  _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
                }

                this.state = 366;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if (_la === Python3Parser.COMMA) {
                  this.state = 358;
                  this.match(Python3Parser.COMMA);
                  this.state = 364;

                  this._errHandler.sync(this);

                  _la = this._input.LA(1);

                  if (_la === Python3Parser.POWER) {
                    this.state = 359;
                    this.match(Python3Parser.POWER);
                    this.state = 360;
                    this.vfpdef();
                    this.state = 362;

                    this._errHandler.sync(this);

                    _la = this._input.LA(1);

                    if (_la === Python3Parser.COMMA) {
                      this.state = 361;
                      this.match(Python3Parser.COMMA);
                    }
                  }
                }

                break;

              case Python3Parser.POWER:
                this.state = 368;
                this.match(Python3Parser.POWER);
                this.state = 369;
                this.vfpdef();
                this.state = 371;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if (_la === Python3Parser.COMMA) {
                  this.state = 370;
                  this.match(Python3Parser.COMMA);
                }

                break;

              case Python3Parser.COLON:
                break;

              default:
                break;
            }
          }

          break;

        case Python3Parser.STAR:
          this.state = 377;
          this.match(Python3Parser.STAR);
          this.state = 379;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.NAME) {
            this.state = 378;
            this.vfpdef();
          }

          this.state = 389;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 45, this._ctx);

          while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 381;
              this.match(Python3Parser.COMMA);
              this.state = 382;
              this.vfpdef();
              this.state = 385;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === Python3Parser.ASSIGN) {
                this.state = 383;
                this.match(Python3Parser.ASSIGN);
                this.state = 384;
                this.test();
              }
            }

            this.state = 391;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 45, this._ctx);
          }

          this.state = 400;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.COMMA) {
            this.state = 392;
            this.match(Python3Parser.COMMA);
            this.state = 398;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === Python3Parser.POWER) {
              this.state = 393;
              this.match(Python3Parser.POWER);
              this.state = 394;
              this.vfpdef();
              this.state = 396;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === Python3Parser.COMMA) {
                this.state = 395;
                this.match(Python3Parser.COMMA);
              }
            }
          }

          break;

        case Python3Parser.POWER:
          this.state = 402;
          this.match(Python3Parser.POWER);
          this.state = 403;
          this.vfpdef();
          this.state = 405;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.COMMA) {
            this.state = 404;
            this.match(Python3Parser.COMMA);
          }

          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  vfpdef() {
    let localctx = new VfpdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, Python3Parser.RULE_vfpdef);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 409;
      this.match(Python3Parser.NAME);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  stmt() {
    let localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, Python3Parser.RULE_stmt);

    try {
      this.state = 413;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.RETURN:
        case Python3Parser.RAISE:
        case Python3Parser.FROM:
        case Python3Parser.IMPORT:
        case Python3Parser.GLOBAL:
        case Python3Parser.NONLOCAL:
        case Python3Parser.ASSERT:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.YIELD:
        case Python3Parser.DEL:
        case Python3Parser.PASS:
        case Python3Parser.CONTINUE:
        case Python3Parser.BREAK:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.STAR:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.enterOuterAlt(localctx, 1);
          this.state = 411;
          this.simple_stmt();
          break;

        case Python3Parser.DEF:
        case Python3Parser.IF:
        case Python3Parser.WHILE:
        case Python3Parser.FOR:
        case Python3Parser.TRY:
        case Python3Parser.WITH:
        case Python3Parser.CLASS:
        case Python3Parser.ASYNC:
        case Python3Parser.AT:
          this.enterOuterAlt(localctx, 2);
          this.state = 412;
          this.compound_stmt();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  simple_stmt() {
    let localctx = new Simple_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, Python3Parser.RULE_simple_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 415;
      this.small_stmt();
      this.state = 420;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 416;
          this.match(Python3Parser.SEMI_COLON);
          this.state = 417;
          this.small_stmt();
        }

        this.state = 422;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
      }

      this.state = 424;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.SEMI_COLON) {
        this.state = 423;
        this.match(Python3Parser.SEMI_COLON);
      }

      this.state = 426;
      this.match(Python3Parser.NEWLINE);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  small_stmt() {
    let localctx = new Small_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, Python3Parser.RULE_small_stmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 436;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.STAR:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.state = 428;
          this.expr_stmt();
          break;

        case Python3Parser.DEL:
          this.state = 429;
          this.del_stmt();
          break;

        case Python3Parser.PASS:
          this.state = 430;
          this.pass_stmt();
          break;

        case Python3Parser.RETURN:
        case Python3Parser.RAISE:
        case Python3Parser.YIELD:
        case Python3Parser.CONTINUE:
        case Python3Parser.BREAK:
          this.state = 431;
          this.flow_stmt();
          break;

        case Python3Parser.FROM:
        case Python3Parser.IMPORT:
          this.state = 432;
          this.import_stmt();
          break;

        case Python3Parser.GLOBAL:
          this.state = 433;
          this.global_stmt();
          break;

        case Python3Parser.NONLOCAL:
          this.state = 434;
          this.nonlocal_stmt();
          break;

        case Python3Parser.ASSERT:
          this.state = 435;
          this.assert_stmt();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  expr_stmt() {
    let localctx = new Expr_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, Python3Parser.RULE_expr_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 438;
      this.testlist_star_expr();
      this.state = 455;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.COLON:
          this.state = 439;
          this.annassign();
          break;

        case Python3Parser.ADD_ASSIGN:
        case Python3Parser.SUB_ASSIGN:
        case Python3Parser.MULT_ASSIGN:
        case Python3Parser.AT_ASSIGN:
        case Python3Parser.DIV_ASSIGN:
        case Python3Parser.MOD_ASSIGN:
        case Python3Parser.AND_ASSIGN:
        case Python3Parser.OR_ASSIGN:
        case Python3Parser.XOR_ASSIGN:
        case Python3Parser.LEFT_SHIFT_ASSIGN:
        case Python3Parser.RIGHT_SHIFT_ASSIGN:
        case Python3Parser.POWER_ASSIGN:
        case Python3Parser.IDIV_ASSIGN:
          this.state = 440;
          this.augassign();
          this.state = 443;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case Python3Parser.YIELD:
              this.state = 441;
              this.yield_expr();
              break;

            case Python3Parser.STRING:
            case Python3Parser.NUMBER:
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
              this.state = 442;
              this.testlist();
              break;

            default:
              throw new _antlr.default.error.NoViableAltException(this);
          }

          break;

        case Python3Parser.NEWLINE:
        case Python3Parser.SEMI_COLON:
        case Python3Parser.ASSIGN:
          this.state = 452;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === Python3Parser.ASSIGN) {
            this.state = 445;
            this.match(Python3Parser.ASSIGN);
            this.state = 448;

            this._errHandler.sync(this);

            switch (this._input.LA(1)) {
              case Python3Parser.YIELD:
                this.state = 446;
                this.yield_expr();
                break;

              case Python3Parser.STRING:
              case Python3Parser.NUMBER:
              case Python3Parser.LAMBDA:
              case Python3Parser.NOT:
              case Python3Parser.NONE:
              case Python3Parser.TRUE:
              case Python3Parser.FALSE:
              case Python3Parser.AWAIT:
              case Python3Parser.NAME:
              case Python3Parser.ELLIPSIS:
              case Python3Parser.STAR:
              case Python3Parser.OPEN_PAREN:
              case Python3Parser.OPEN_BRACK:
              case Python3Parser.ADD:
              case Python3Parser.MINUS:
              case Python3Parser.NOT_OP:
              case Python3Parser.OPEN_BRACE:
                this.state = 447;
                this.testlist_star_expr();
                break;

              default:
                throw new _antlr.default.error.NoViableAltException(this);
            }

            this.state = 454;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  annassign() {
    let localctx = new AnnassignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, Python3Parser.RULE_annassign);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 457;
      this.match(Python3Parser.COLON);
      this.state = 458;
      this.test();
      this.state = 461;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.ASSIGN) {
        this.state = 459;
        this.match(Python3Parser.ASSIGN);
        this.state = 460;
        this.test();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  testlist_star_expr() {
    let localctx = new Testlist_star_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, Python3Parser.RULE_testlist_star_expr);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 465;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.state = 463;
          this.test();
          break;

        case Python3Parser.STAR:
          this.state = 464;
          this.star_expr();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }

      this.state = 474;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 467;
          this.match(Python3Parser.COMMA);
          this.state = 470;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case Python3Parser.STRING:
            case Python3Parser.NUMBER:
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
              this.state = 468;
              this.test();
              break;

            case Python3Parser.STAR:
              this.state = 469;
              this.star_expr();
              break;

            default:
              throw new _antlr.default.error.NoViableAltException(this);
          }
        }

        this.state = 476;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
      }

      this.state = 478;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.COMMA) {
        this.state = 477;
        this.match(Python3Parser.COMMA);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  augassign() {
    let localctx = new AugassignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, Python3Parser.RULE_augassign);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 480;
      _la = this._input.LA(1);

      if (!((_la - 85 & ~0x1f) == 0 && (1 << _la - 85 & (1 << Python3Parser.ADD_ASSIGN - 85 | 1 << Python3Parser.SUB_ASSIGN - 85 | 1 << Python3Parser.MULT_ASSIGN - 85 | 1 << Python3Parser.AT_ASSIGN - 85 | 1 << Python3Parser.DIV_ASSIGN - 85 | 1 << Python3Parser.MOD_ASSIGN - 85 | 1 << Python3Parser.AND_ASSIGN - 85 | 1 << Python3Parser.OR_ASSIGN - 85 | 1 << Python3Parser.XOR_ASSIGN - 85 | 1 << Python3Parser.LEFT_SHIFT_ASSIGN - 85 | 1 << Python3Parser.RIGHT_SHIFT_ASSIGN - 85 | 1 << Python3Parser.POWER_ASSIGN - 85 | 1 << Python3Parser.IDIV_ASSIGN - 85)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  del_stmt() {
    let localctx = new Del_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, Python3Parser.RULE_del_stmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 482;
      this.match(Python3Parser.DEL);
      this.state = 483;
      this.exprlist();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  pass_stmt() {
    let localctx = new Pass_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, Python3Parser.RULE_pass_stmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 485;
      this.match(Python3Parser.PASS);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  flow_stmt() {
    let localctx = new Flow_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, Python3Parser.RULE_flow_stmt);

    try {
      this.state = 492;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.BREAK:
          this.enterOuterAlt(localctx, 1);
          this.state = 487;
          this.break_stmt();
          break;

        case Python3Parser.CONTINUE:
          this.enterOuterAlt(localctx, 2);
          this.state = 488;
          this.continue_stmt();
          break;

        case Python3Parser.RETURN:
          this.enterOuterAlt(localctx, 3);
          this.state = 489;
          this.return_stmt();
          break;

        case Python3Parser.RAISE:
          this.enterOuterAlt(localctx, 4);
          this.state = 490;
          this.raise_stmt();
          break;

        case Python3Parser.YIELD:
          this.enterOuterAlt(localctx, 5);
          this.state = 491;
          this.yield_stmt();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  break_stmt() {
    let localctx = new Break_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, Python3Parser.RULE_break_stmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 494;
      this.match(Python3Parser.BREAK);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  continue_stmt() {
    let localctx = new Continue_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, Python3Parser.RULE_continue_stmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 496;
      this.match(Python3Parser.CONTINUE);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  return_stmt() {
    let localctx = new Return_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, Python3Parser.RULE_return_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 498;
      this.match(Python3Parser.RETURN);
      this.state = 500;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
        this.state = 499;
        this.testlist();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  yield_stmt() {
    let localctx = new Yield_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, Python3Parser.RULE_yield_stmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 502;
      this.yield_expr();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  raise_stmt() {
    let localctx = new Raise_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, Python3Parser.RULE_raise_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 504;
      this.match(Python3Parser.RAISE);
      this.state = 510;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
        this.state = 505;
        this.test();
        this.state = 508;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === Python3Parser.FROM) {
          this.state = 506;
          this.match(Python3Parser.FROM);
          this.state = 507;
          this.test();
        }
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  import_stmt() {
    let localctx = new Import_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, Python3Parser.RULE_import_stmt);

    try {
      this.state = 514;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.IMPORT:
          this.enterOuterAlt(localctx, 1);
          this.state = 512;
          this.import_name();
          break;

        case Python3Parser.FROM:
          this.enterOuterAlt(localctx, 2);
          this.state = 513;
          this.import_from();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  import_name() {
    let localctx = new Import_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, Python3Parser.RULE_import_name);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 516;
      this.match(Python3Parser.IMPORT);
      this.state = 517;
      this.dotted_as_names();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  import_from() {
    let localctx = new Import_fromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, Python3Parser.RULE_import_from);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 519;
      this.match(Python3Parser.FROM);
      this.state = 532;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);

      switch (la_) {
        case 1:
          this.state = 523;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === Python3Parser.DOT || _la === Python3Parser.ELLIPSIS) {
            this.state = 520;
            _la = this._input.LA(1);

            if (!(_la === Python3Parser.DOT || _la === Python3Parser.ELLIPSIS)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);

              this.consume();
            }

            this.state = 525;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 526;
          this.dotted_name();
          break;

        case 2:
          this.state = 528;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          do {
            this.state = 527;
            _la = this._input.LA(1);

            if (!(_la === Python3Parser.DOT || _la === Python3Parser.ELLIPSIS)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);

              this.consume();
            }

            this.state = 530;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          } while (_la === Python3Parser.DOT || _la === Python3Parser.ELLIPSIS);

          break;
      }

      this.state = 534;
      this.match(Python3Parser.IMPORT);
      this.state = 541;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.STAR:
          this.state = 535;
          this.match(Python3Parser.STAR);
          break;

        case Python3Parser.OPEN_PAREN:
          this.state = 536;
          this.match(Python3Parser.OPEN_PAREN);
          this.state = 537;
          this.import_as_names();
          this.state = 538;
          this.match(Python3Parser.CLOSE_PAREN);
          break;

        case Python3Parser.NAME:
          this.state = 540;
          this.import_as_names();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  import_as_name() {
    let localctx = new Import_as_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, Python3Parser.RULE_import_as_name);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 543;
      this.match(Python3Parser.NAME);
      this.state = 546;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.AS) {
        this.state = 544;
        this.match(Python3Parser.AS);
        this.state = 545;
        this.match(Python3Parser.NAME);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  dotted_as_name() {
    let localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, Python3Parser.RULE_dotted_as_name);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 548;
      this.dotted_name();
      this.state = 551;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.AS) {
        this.state = 549;
        this.match(Python3Parser.AS);
        this.state = 550;
        this.match(Python3Parser.NAME);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  import_as_names() {
    let localctx = new Import_as_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, Python3Parser.RULE_import_as_names);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 553;
      this.import_as_name();
      this.state = 558;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 75, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 554;
          this.match(Python3Parser.COMMA);
          this.state = 555;
          this.import_as_name();
        }

        this.state = 560;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 75, this._ctx);
      }

      this.state = 562;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.COMMA) {
        this.state = 561;
        this.match(Python3Parser.COMMA);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  dotted_as_names() {
    let localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, Python3Parser.RULE_dotted_as_names);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 564;
      this.dotted_as_name();
      this.state = 569;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.COMMA) {
        this.state = 565;
        this.match(Python3Parser.COMMA);
        this.state = 566;
        this.dotted_as_name();
        this.state = 571;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  dotted_name() {
    let localctx = new Dotted_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, Python3Parser.RULE_dotted_name);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 572;
      this.match(Python3Parser.NAME);
      this.state = 577;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.DOT) {
        this.state = 573;
        this.match(Python3Parser.DOT);
        this.state = 574;
        this.match(Python3Parser.NAME);
        this.state = 579;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  global_stmt() {
    let localctx = new Global_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, Python3Parser.RULE_global_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 580;
      this.match(Python3Parser.GLOBAL);
      this.state = 581;
      this.match(Python3Parser.NAME);
      this.state = 586;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.COMMA) {
        this.state = 582;
        this.match(Python3Parser.COMMA);
        this.state = 583;
        this.match(Python3Parser.NAME);
        this.state = 588;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  nonlocal_stmt() {
    let localctx = new Nonlocal_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, Python3Parser.RULE_nonlocal_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 589;
      this.match(Python3Parser.NONLOCAL);
      this.state = 590;
      this.match(Python3Parser.NAME);
      this.state = 595;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.COMMA) {
        this.state = 591;
        this.match(Python3Parser.COMMA);
        this.state = 592;
        this.match(Python3Parser.NAME);
        this.state = 597;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  assert_stmt() {
    let localctx = new Assert_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, Python3Parser.RULE_assert_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 598;
      this.match(Python3Parser.ASSERT);
      this.state = 599;
      this.test();
      this.state = 602;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.COMMA) {
        this.state = 600;
        this.match(Python3Parser.COMMA);
        this.state = 601;
        this.test();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  compound_stmt() {
    let localctx = new Compound_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, Python3Parser.RULE_compound_stmt);

    try {
      this.state = 613;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.IF:
          this.enterOuterAlt(localctx, 1);
          this.state = 604;
          this.if_stmt();
          break;

        case Python3Parser.WHILE:
          this.enterOuterAlt(localctx, 2);
          this.state = 605;
          this.while_stmt();
          break;

        case Python3Parser.FOR:
          this.enterOuterAlt(localctx, 3);
          this.state = 606;
          this.for_stmt();
          break;

        case Python3Parser.TRY:
          this.enterOuterAlt(localctx, 4);
          this.state = 607;
          this.try_stmt();
          break;

        case Python3Parser.WITH:
          this.enterOuterAlt(localctx, 5);
          this.state = 608;
          this.with_stmt();
          break;

        case Python3Parser.DEF:
          this.enterOuterAlt(localctx, 6);
          this.state = 609;
          this.funcdef();
          break;

        case Python3Parser.CLASS:
          this.enterOuterAlt(localctx, 7);
          this.state = 610;
          this.classdef();
          break;

        case Python3Parser.AT:
          this.enterOuterAlt(localctx, 8);
          this.state = 611;
          this.decorated();
          break;

        case Python3Parser.ASYNC:
          this.enterOuterAlt(localctx, 9);
          this.state = 612;
          this.async_stmt();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  async_stmt() {
    let localctx = new Async_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, Python3Parser.RULE_async_stmt);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 615;
      this.match(Python3Parser.ASYNC);
      this.state = 619;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.DEF:
          this.state = 616;
          this.funcdef();
          break;

        case Python3Parser.WITH:
          this.state = 617;
          this.with_stmt();
          break;

        case Python3Parser.FOR:
          this.state = 618;
          this.for_stmt();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  if_stmt() {
    let localctx = new If_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, Python3Parser.RULE_if_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 621;
      this.match(Python3Parser.IF);
      this.state = 622;
      this.test();
      this.state = 623;
      this.match(Python3Parser.COLON);
      this.state = 624;
      this.suite();
      this.state = 632;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.ELIF) {
        this.state = 625;
        this.match(Python3Parser.ELIF);
        this.state = 626;
        this.test();
        this.state = 627;
        this.match(Python3Parser.COLON);
        this.state = 628;
        this.suite();
        this.state = 634;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 638;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.ELSE) {
        this.state = 635;
        this.match(Python3Parser.ELSE);
        this.state = 636;
        this.match(Python3Parser.COLON);
        this.state = 637;
        this.suite();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  while_stmt() {
    let localctx = new While_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, Python3Parser.RULE_while_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 640;
      this.match(Python3Parser.WHILE);
      this.state = 641;
      this.test();
      this.state = 642;
      this.match(Python3Parser.COLON);
      this.state = 643;
      this.suite();
      this.state = 647;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.ELSE) {
        this.state = 644;
        this.match(Python3Parser.ELSE);
        this.state = 645;
        this.match(Python3Parser.COLON);
        this.state = 646;
        this.suite();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  for_stmt() {
    let localctx = new For_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, Python3Parser.RULE_for_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 649;
      this.match(Python3Parser.FOR);
      this.state = 650;
      this.exprlist();
      this.state = 651;
      this.match(Python3Parser.IN);
      this.state = 652;
      this.testlist();
      this.state = 653;
      this.match(Python3Parser.COLON);
      this.state = 654;
      this.suite();
      this.state = 658;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.ELSE) {
        this.state = 655;
        this.match(Python3Parser.ELSE);
        this.state = 656;
        this.match(Python3Parser.COLON);
        this.state = 657;
        this.suite();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  try_stmt() {
    let localctx = new Try_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, Python3Parser.RULE_try_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 660;
      this.match(Python3Parser.TRY);
      this.state = 661;
      this.match(Python3Parser.COLON);
      this.state = 662;
      this.suite();
      this.state = 684;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.EXCEPT:
          this.state = 667;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          do {
            this.state = 663;
            this.except_clause();
            this.state = 664;
            this.match(Python3Parser.COLON);
            this.state = 665;
            this.suite();
            this.state = 669;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          } while (_la === Python3Parser.EXCEPT);

          this.state = 674;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.ELSE) {
            this.state = 671;
            this.match(Python3Parser.ELSE);
            this.state = 672;
            this.match(Python3Parser.COLON);
            this.state = 673;
            this.suite();
          }

          this.state = 679;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.FINALLY) {
            this.state = 676;
            this.match(Python3Parser.FINALLY);
            this.state = 677;
            this.match(Python3Parser.COLON);
            this.state = 678;
            this.suite();
          }

          break;

        case Python3Parser.FINALLY:
          this.state = 681;
          this.match(Python3Parser.FINALLY);
          this.state = 682;
          this.match(Python3Parser.COLON);
          this.state = 683;
          this.suite();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  with_stmt() {
    let localctx = new With_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, Python3Parser.RULE_with_stmt);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 686;
      this.match(Python3Parser.WITH);
      this.state = 687;
      this.with_item();
      this.state = 692;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.COMMA) {
        this.state = 688;
        this.match(Python3Parser.COMMA);
        this.state = 689;
        this.with_item();
        this.state = 694;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 695;
      this.match(Python3Parser.COLON);
      this.state = 696;
      this.suite();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  with_item() {
    let localctx = new With_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, Python3Parser.RULE_with_item);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 698;
      this.test();
      this.state = 701;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.AS) {
        this.state = 699;
        this.match(Python3Parser.AS);
        this.state = 700;
        this.expr();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  except_clause() {
    let localctx = new Except_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, Python3Parser.RULE_except_clause);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 703;
      this.match(Python3Parser.EXCEPT);
      this.state = 709;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
        this.state = 704;
        this.test();
        this.state = 707;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === Python3Parser.AS) {
          this.state = 705;
          this.match(Python3Parser.AS);
          this.state = 706;
          this.match(Python3Parser.NAME);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  suite() {
    let localctx = new SuiteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, Python3Parser.RULE_suite);
    var _la = 0; // Token type

    try {
      this.state = 721;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.RETURN:
        case Python3Parser.RAISE:
        case Python3Parser.FROM:
        case Python3Parser.IMPORT:
        case Python3Parser.GLOBAL:
        case Python3Parser.NONLOCAL:
        case Python3Parser.ASSERT:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.YIELD:
        case Python3Parser.DEL:
        case Python3Parser.PASS:
        case Python3Parser.CONTINUE:
        case Python3Parser.BREAK:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.STAR:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.enterOuterAlt(localctx, 1);
          this.state = 711;
          this.simple_stmt();
          break;

        case Python3Parser.NEWLINE:
          this.enterOuterAlt(localctx, 2);
          this.state = 712;
          this.match(Python3Parser.NEWLINE);
          this.state = 713;
          this.match(Python3Parser.INDENT);
          this.state = 715;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          do {
            this.state = 714;
            this.stmt();
            this.state = 717;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          } while ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.DEF | 1 << Python3Parser.RETURN | 1 << Python3Parser.RAISE | 1 << Python3Parser.FROM | 1 << Python3Parser.IMPORT | 1 << Python3Parser.GLOBAL | 1 << Python3Parser.NONLOCAL | 1 << Python3Parser.ASSERT | 1 << Python3Parser.IF | 1 << Python3Parser.WHILE | 1 << Python3Parser.FOR | 1 << Python3Parser.TRY | 1 << Python3Parser.WITH | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.CLASS - 32 | 1 << Python3Parser.YIELD - 32 | 1 << Python3Parser.DEL - 32 | 1 << Python3Parser.PASS - 32 | 1 << Python3Parser.CONTINUE - 32 | 1 << Python3Parser.BREAK - 32 | 1 << Python3Parser.ASYNC - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.STAR - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68 | 1 << Python3Parser.AT - 68)) !== 0);

          this.state = 719;
          this.match(Python3Parser.DEDENT);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  test() {
    let localctx = new TestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, Python3Parser.RULE_test);
    var _la = 0; // Token type

    try {
      this.state = 732;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.enterOuterAlt(localctx, 1);
          this.state = 723;
          this.or_test();
          this.state = 729;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.IF) {
            this.state = 724;
            this.match(Python3Parser.IF);
            this.state = 725;
            this.or_test();
            this.state = 726;
            this.match(Python3Parser.ELSE);
            this.state = 727;
            this.test();
          }

          break;

        case Python3Parser.LAMBDA:
          this.enterOuterAlt(localctx, 2);
          this.state = 731;
          this.lambdef();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  test_nocond() {
    let localctx = new Test_nocondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, Python3Parser.RULE_test_nocond);

    try {
      this.state = 736;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.enterOuterAlt(localctx, 1);
          this.state = 734;
          this.or_test();
          break;

        case Python3Parser.LAMBDA:
          this.enterOuterAlt(localctx, 2);
          this.state = 735;
          this.lambdef_nocond();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  lambdef() {
    let localctx = new LambdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, Python3Parser.RULE_lambdef);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 738;
      this.match(Python3Parser.LAMBDA);
      this.state = 740;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 42 & ~0x1f) == 0 && (1 << _la - 42 & (1 << Python3Parser.NAME - 42 | 1 << Python3Parser.STAR - 42 | 1 << Python3Parser.POWER - 42)) !== 0) {
        this.state = 739;
        this.varargslist();
      }

      this.state = 742;
      this.match(Python3Parser.COLON);
      this.state = 743;
      this.test();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  lambdef_nocond() {
    let localctx = new Lambdef_nocondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, Python3Parser.RULE_lambdef_nocond);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 745;
      this.match(Python3Parser.LAMBDA);
      this.state = 747;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 42 & ~0x1f) == 0 && (1 << _la - 42 & (1 << Python3Parser.NAME - 42 | 1 << Python3Parser.STAR - 42 | 1 << Python3Parser.POWER - 42)) !== 0) {
        this.state = 746;
        this.varargslist();
      }

      this.state = 749;
      this.match(Python3Parser.COLON);
      this.state = 750;
      this.test_nocond();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  or_test() {
    let localctx = new Or_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, Python3Parser.RULE_or_test);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 752;
      this.and_test();
      this.state = 757;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.OR) {
        this.state = 753;
        this.match(Python3Parser.OR);
        this.state = 754;
        this.and_test();
        this.state = 759;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  and_test() {
    let localctx = new And_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, Python3Parser.RULE_and_test);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 760;
      this.not_test();
      this.state = 765;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.AND) {
        this.state = 761;
        this.match(Python3Parser.AND);
        this.state = 762;
        this.not_test();
        this.state = 767;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  not_test() {
    let localctx = new Not_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, Python3Parser.RULE_not_test);

    try {
      this.state = 771;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.NOT:
          this.enterOuterAlt(localctx, 1);
          this.state = 768;
          this.match(Python3Parser.NOT);
          this.state = 769;
          this.not_test();
          break;

        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.enterOuterAlt(localctx, 2);
          this.state = 770;
          this.comparison();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  comparison() {
    let localctx = new ComparisonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, Python3Parser.RULE_comparison);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 773;
      this.expr();
      this.state = 779;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.IN | 1 << Python3Parser.NOT | 1 << Python3Parser.IS)) !== 0 || (_la - 76 & ~0x1f) == 0 && (1 << _la - 76 & (1 << Python3Parser.LESS_THAN - 76 | 1 << Python3Parser.GREATER_THAN - 76 | 1 << Python3Parser.EQUALS - 76 | 1 << Python3Parser.GT_EQ - 76 | 1 << Python3Parser.LT_EQ - 76 | 1 << Python3Parser.NOT_EQ_1 - 76 | 1 << Python3Parser.NOT_EQ_2 - 76)) !== 0) {
        this.state = 774;
        this.comp_op();
        this.state = 775;
        this.expr();
        this.state = 781;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  comp_op() {
    let localctx = new Comp_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, Python3Parser.RULE_comp_op);

    try {
      this.state = 795;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 107, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 782;
          this.match(Python3Parser.LESS_THAN);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 783;
          this.match(Python3Parser.GREATER_THAN);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 784;
          this.match(Python3Parser.EQUALS);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 785;
          this.match(Python3Parser.GT_EQ);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 786;
          this.match(Python3Parser.LT_EQ);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 787;
          this.match(Python3Parser.NOT_EQ_1);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 788;
          this.match(Python3Parser.NOT_EQ_2);
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 789;
          this.match(Python3Parser.IN);
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 790;
          this.match(Python3Parser.NOT);
          this.state = 791;
          this.match(Python3Parser.IN);
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 792;
          this.match(Python3Parser.IS);
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 793;
          this.match(Python3Parser.IS);
          this.state = 794;
          this.match(Python3Parser.NOT);
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  star_expr() {
    let localctx = new Star_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, Python3Parser.RULE_star_expr);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 797;
      this.match(Python3Parser.STAR);
      this.state = 798;
      this.expr();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  expr() {
    let localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, Python3Parser.RULE_expr);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 800;
      this.xor_expr();
      this.state = 805;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.OR_OP) {
        this.state = 801;
        this.match(Python3Parser.OR_OP);
        this.state = 802;
        this.xor_expr();
        this.state = 807;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  xor_expr() {
    let localctx = new Xor_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, Python3Parser.RULE_xor_expr);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 808;
      this.and_expr();
      this.state = 813;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.XOR) {
        this.state = 809;
        this.match(Python3Parser.XOR);
        this.state = 810;
        this.and_expr();
        this.state = 815;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  and_expr() {
    let localctx = new And_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, Python3Parser.RULE_and_expr);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 816;
      this.shift_expr();
      this.state = 821;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.AND_OP) {
        this.state = 817;
        this.match(Python3Parser.AND_OP);
        this.state = 818;
        this.shift_expr();
        this.state = 823;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  shift_expr() {
    let localctx = new Shift_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, Python3Parser.RULE_shift_expr);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 824;
      this.arith_expr();
      this.state = 829;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.LEFT_SHIFT || _la === Python3Parser.RIGHT_SHIFT) {
        this.state = 825;
        _la = this._input.LA(1);

        if (!(_la === Python3Parser.LEFT_SHIFT || _la === Python3Parser.RIGHT_SHIFT)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }

        this.state = 826;
        this.arith_expr();
        this.state = 831;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  arith_expr() {
    let localctx = new Arith_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, Python3Parser.RULE_arith_expr);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 832;
      this.term();
      this.state = 837;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === Python3Parser.ADD || _la === Python3Parser.MINUS) {
        this.state = 833;
        _la = this._input.LA(1);

        if (!(_la === Python3Parser.ADD || _la === Python3Parser.MINUS)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }

        this.state = 834;
        this.term();
        this.state = 839;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  term() {
    let localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, Python3Parser.RULE_term);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 840;
      this.factor();
      this.state = 845;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while ((_la - 53 & ~0x1f) == 0 && (1 << _la - 53 & (1 << Python3Parser.STAR - 53 | 1 << Python3Parser.DIV - 53 | 1 << Python3Parser.MOD - 53 | 1 << Python3Parser.IDIV - 53 | 1 << Python3Parser.AT - 53)) !== 0) {
        this.state = 841;
        _la = this._input.LA(1);

        if (!((_la - 53 & ~0x1f) == 0 && (1 << _la - 53 & (1 << Python3Parser.STAR - 53 | 1 << Python3Parser.DIV - 53 | 1 << Python3Parser.MOD - 53 | 1 << Python3Parser.IDIV - 53 | 1 << Python3Parser.AT - 53)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }

        this.state = 842;
        this.factor();
        this.state = 847;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  factor() {
    let localctx = new FactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, Python3Parser.RULE_factor);
    var _la = 0; // Token type

    try {
      this.state = 851;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
          this.enterOuterAlt(localctx, 1);
          this.state = 848;
          _la = this._input.LA(1);

          if (!((_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68)) !== 0)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);

            this.consume();
          }

          this.state = 849;
          this.factor();
          break;

        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.OPEN_BRACE:
          this.enterOuterAlt(localctx, 2);
          this.state = 850;
          this.power();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  power() {
    let localctx = new PowerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, Python3Parser.RULE_power);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 853;
      this.atom_expr();
      this.state = 856;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.POWER) {
        this.state = 854;
        this.match(Python3Parser.POWER);
        this.state = 855;
        this.factor();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  atom_expr() {
    let localctx = new Atom_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, Python3Parser.RULE_atom_expr);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 859;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.AWAIT) {
        this.state = 858;
        this.match(Python3Parser.AWAIT);
      }

      this.state = 861;
      this.atom();
      this.state = 865;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while ((_la - 51 & ~0x1f) == 0 && (1 << _la - 51 & (1 << Python3Parser.DOT - 51 | 1 << Python3Parser.OPEN_PAREN - 51 | 1 << Python3Parser.OPEN_BRACK - 51)) !== 0) {
        this.state = 862;
        this.trailer();
        this.state = 867;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  atom() {
    let localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, Python3Parser.RULE_atom);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 895;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.OPEN_PAREN:
          this.state = 868;
          this.match(Python3Parser.OPEN_PAREN);
          this.state = 871;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case Python3Parser.YIELD:
              this.state = 869;
              this.yield_expr();
              break;

            case Python3Parser.STRING:
            case Python3Parser.NUMBER:
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.STAR:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
              this.state = 870;
              this.testlist_comp();
              break;

            case Python3Parser.CLOSE_PAREN:
              break;

            default:
              break;
          }

          this.state = 873;
          this.match(Python3Parser.CLOSE_PAREN);
          break;

        case Python3Parser.OPEN_BRACK:
          this.state = 874;
          this.match(Python3Parser.OPEN_BRACK);
          this.state = 876;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.STAR - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
            this.state = 875;
            this.testlist_comp();
          }

          this.state = 878;
          this.match(Python3Parser.CLOSE_BRACK);
          break;

        case Python3Parser.OPEN_BRACE:
          this.state = 879;
          this.match(Python3Parser.OPEN_BRACE);
          this.state = 881;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.STAR - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.POWER - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
            this.state = 880;
            this.dictorsetmaker();
          }

          this.state = 883;
          this.match(Python3Parser.CLOSE_BRACE);
          break;

        case Python3Parser.NAME:
          this.state = 884;
          this.match(Python3Parser.NAME);
          break;

        case Python3Parser.NUMBER:
          this.state = 885;
          this.match(Python3Parser.NUMBER);
          break;

        case Python3Parser.STRING:
          this.state = 887;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          do {
            this.state = 886;
            this.match(Python3Parser.STRING);
            this.state = 889;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          } while (_la === Python3Parser.STRING);

          break;

        case Python3Parser.ELLIPSIS:
          this.state = 891;
          this.match(Python3Parser.ELLIPSIS);
          break;

        case Python3Parser.NONE:
          this.state = 892;
          this.match(Python3Parser.NONE);
          break;

        case Python3Parser.TRUE:
          this.state = 893;
          this.match(Python3Parser.TRUE);
          break;

        case Python3Parser.FALSE:
          this.state = 894;
          this.match(Python3Parser.FALSE);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  testlist_comp() {
    let localctx = new Testlist_compContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, Python3Parser.RULE_testlist_comp);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 899;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.state = 897;
          this.test();
          break;

        case Python3Parser.STAR:
          this.state = 898;
          this.star_expr();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }

      this.state = 915;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.FOR:
        case Python3Parser.ASYNC:
          this.state = 901;
          this.comp_for();
          break;

        case Python3Parser.CLOSE_PAREN:
        case Python3Parser.COMMA:
        case Python3Parser.CLOSE_BRACK:
          this.state = 909;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 125, this._ctx);

          while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 902;
              this.match(Python3Parser.COMMA);
              this.state = 905;

              this._errHandler.sync(this);

              switch (this._input.LA(1)) {
                case Python3Parser.STRING:
                case Python3Parser.NUMBER:
                case Python3Parser.LAMBDA:
                case Python3Parser.NOT:
                case Python3Parser.NONE:
                case Python3Parser.TRUE:
                case Python3Parser.FALSE:
                case Python3Parser.AWAIT:
                case Python3Parser.NAME:
                case Python3Parser.ELLIPSIS:
                case Python3Parser.OPEN_PAREN:
                case Python3Parser.OPEN_BRACK:
                case Python3Parser.ADD:
                case Python3Parser.MINUS:
                case Python3Parser.NOT_OP:
                case Python3Parser.OPEN_BRACE:
                  this.state = 903;
                  this.test();
                  break;

                case Python3Parser.STAR:
                  this.state = 904;
                  this.star_expr();
                  break;

                default:
                  throw new _antlr.default.error.NoViableAltException(this);
              }
            }

            this.state = 911;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 125, this._ctx);
          }

          this.state = 913;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.COMMA) {
            this.state = 912;
            this.match(Python3Parser.COMMA);
          }

          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  trailer() {
    let localctx = new TrailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, Python3Parser.RULE_trailer);
    var _la = 0; // Token type

    try {
      this.state = 928;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.OPEN_PAREN:
          this.enterOuterAlt(localctx, 1);
          this.state = 917;
          this.match(Python3Parser.OPEN_PAREN);
          this.state = 919;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.STAR - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.POWER - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
            this.state = 918;
            this.arglist();
          }

          this.state = 921;
          this.match(Python3Parser.CLOSE_PAREN);
          break;

        case Python3Parser.OPEN_BRACK:
          this.enterOuterAlt(localctx, 2);
          this.state = 922;
          this.match(Python3Parser.OPEN_BRACK);
          this.state = 923;
          this.subscriptlist();
          this.state = 924;
          this.match(Python3Parser.CLOSE_BRACK);
          break;

        case Python3Parser.DOT:
          this.enterOuterAlt(localctx, 3);
          this.state = 926;
          this.match(Python3Parser.DOT);
          this.state = 927;
          this.match(Python3Parser.NAME);
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  subscriptlist() {
    let localctx = new SubscriptlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, Python3Parser.RULE_subscriptlist);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 930;
      this.subscript_();
      this.state = 935;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 130, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 931;
          this.match(Python3Parser.COMMA);
          this.state = 932;
          this.subscript_();
        }

        this.state = 937;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 130, this._ctx);
      }

      this.state = 939;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.COMMA) {
        this.state = 938;
        this.match(Python3Parser.COMMA);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  subscript_() {
    let localctx = new Subscript_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 144, Python3Parser.RULE_subscript_);
    var _la = 0; // Token type

    try {
      this.state = 952;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 135, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 941;
          this.test();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 943;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
            this.state = 942;
            this.test();
          }

          this.state = 945;
          this.match(Python3Parser.COLON);
          this.state = 947;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
            this.state = 946;
            this.test();
          }

          this.state = 950;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.COLON) {
            this.state = 949;
            this.sliceop();
          }

          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  sliceop() {
    let localctx = new SliceopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, Python3Parser.RULE_sliceop);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 954;
      this.match(Python3Parser.COLON);
      this.state = 956;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
        this.state = 955;
        this.test();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  exprlist() {
    let localctx = new ExprlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, Python3Parser.RULE_exprlist);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 960;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.state = 958;
          this.expr();
          break;

        case Python3Parser.STAR:
          this.state = 959;
          this.star_expr();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }

      this.state = 969;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 139, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 962;
          this.match(Python3Parser.COMMA);
          this.state = 965;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case Python3Parser.STRING:
            case Python3Parser.NUMBER:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
              this.state = 963;
              this.expr();
              break;

            case Python3Parser.STAR:
              this.state = 964;
              this.star_expr();
              break;

            default:
              throw new _antlr.default.error.NoViableAltException(this);
          }
        }

        this.state = 971;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 139, this._ctx);
      }

      this.state = 973;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.COMMA) {
        this.state = 972;
        this.match(Python3Parser.COMMA);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  testlist() {
    let localctx = new TestlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, Python3Parser.RULE_testlist);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 975;
      this.test();
      this.state = 980;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 141, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 976;
          this.match(Python3Parser.COMMA);
          this.state = 977;
          this.test();
        }

        this.state = 982;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 141, this._ctx);
      }

      this.state = 984;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.COMMA) {
        this.state = 983;
        this.match(Python3Parser.COMMA);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  dictorsetmaker() {
    let localctx = new DictorsetmakerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, Python3Parser.RULE_dictorsetmaker);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1034;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 153, this._ctx);

      switch (la_) {
        case 1:
          this.state = 992;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case Python3Parser.STRING:
            case Python3Parser.NUMBER:
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
              this.state = 986;
              this.test();
              this.state = 987;
              this.match(Python3Parser.COLON);
              this.state = 988;
              this.test();
              break;

            case Python3Parser.POWER:
              this.state = 990;
              this.match(Python3Parser.POWER);
              this.state = 991;
              this.expr();
              break;

            default:
              throw new _antlr.default.error.NoViableAltException(this);
          }

          this.state = 1012;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case Python3Parser.FOR:
            case Python3Parser.ASYNC:
              this.state = 994;
              this.comp_for();
              break;

            case Python3Parser.COMMA:
            case Python3Parser.CLOSE_BRACE:
              this.state = 1006;

              this._errHandler.sync(this);

              var _alt = this._interp.adaptivePredict(this._input, 145, this._ctx);

              while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  this.state = 995;
                  this.match(Python3Parser.COMMA);
                  this.state = 1002;

                  this._errHandler.sync(this);

                  switch (this._input.LA(1)) {
                    case Python3Parser.STRING:
                    case Python3Parser.NUMBER:
                    case Python3Parser.LAMBDA:
                    case Python3Parser.NOT:
                    case Python3Parser.NONE:
                    case Python3Parser.TRUE:
                    case Python3Parser.FALSE:
                    case Python3Parser.AWAIT:
                    case Python3Parser.NAME:
                    case Python3Parser.ELLIPSIS:
                    case Python3Parser.OPEN_PAREN:
                    case Python3Parser.OPEN_BRACK:
                    case Python3Parser.ADD:
                    case Python3Parser.MINUS:
                    case Python3Parser.NOT_OP:
                    case Python3Parser.OPEN_BRACE:
                      this.state = 996;
                      this.test();
                      this.state = 997;
                      this.match(Python3Parser.COLON);
                      this.state = 998;
                      this.test();
                      break;

                    case Python3Parser.POWER:
                      this.state = 1000;
                      this.match(Python3Parser.POWER);
                      this.state = 1001;
                      this.expr();
                      break;

                    default:
                      throw new _antlr.default.error.NoViableAltException(this);
                  }
                }

                this.state = 1008;

                this._errHandler.sync(this);

                _alt = this._interp.adaptivePredict(this._input, 145, this._ctx);
              }

              this.state = 1010;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === Python3Parser.COMMA) {
                this.state = 1009;
                this.match(Python3Parser.COMMA);
              }

              break;

            default:
              throw new _antlr.default.error.NoViableAltException(this);
          }

          break;

        case 2:
          this.state = 1016;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case Python3Parser.STRING:
            case Python3Parser.NUMBER:
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
              this.state = 1014;
              this.test();
              break;

            case Python3Parser.STAR:
              this.state = 1015;
              this.star_expr();
              break;

            default:
              throw new _antlr.default.error.NoViableAltException(this);
          }

          this.state = 1032;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case Python3Parser.FOR:
            case Python3Parser.ASYNC:
              this.state = 1018;
              this.comp_for();
              break;

            case Python3Parser.COMMA:
            case Python3Parser.CLOSE_BRACE:
              this.state = 1026;

              this._errHandler.sync(this);

              var _alt = this._interp.adaptivePredict(this._input, 150, this._ctx);

              while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  this.state = 1019;
                  this.match(Python3Parser.COMMA);
                  this.state = 1022;

                  this._errHandler.sync(this);

                  switch (this._input.LA(1)) {
                    case Python3Parser.STRING:
                    case Python3Parser.NUMBER:
                    case Python3Parser.LAMBDA:
                    case Python3Parser.NOT:
                    case Python3Parser.NONE:
                    case Python3Parser.TRUE:
                    case Python3Parser.FALSE:
                    case Python3Parser.AWAIT:
                    case Python3Parser.NAME:
                    case Python3Parser.ELLIPSIS:
                    case Python3Parser.OPEN_PAREN:
                    case Python3Parser.OPEN_BRACK:
                    case Python3Parser.ADD:
                    case Python3Parser.MINUS:
                    case Python3Parser.NOT_OP:
                    case Python3Parser.OPEN_BRACE:
                      this.state = 1020;
                      this.test();
                      break;

                    case Python3Parser.STAR:
                      this.state = 1021;
                      this.star_expr();
                      break;

                    default:
                      throw new _antlr.default.error.NoViableAltException(this);
                  }
                }

                this.state = 1028;

                this._errHandler.sync(this);

                _alt = this._interp.adaptivePredict(this._input, 150, this._ctx);
              }

              this.state = 1030;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === Python3Parser.COMMA) {
                this.state = 1029;
                this.match(Python3Parser.COMMA);
              }

              break;

            default:
              throw new _antlr.default.error.NoViableAltException(this);
          }

          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  classdef() {
    let localctx = new ClassdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, Python3Parser.RULE_classdef);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1036;
      this.match(Python3Parser.CLASS);
      this.state = 1037;
      this.match(Python3Parser.NAME);
      this.state = 1043;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.OPEN_PAREN) {
        this.state = 1038;
        this.match(Python3Parser.OPEN_PAREN);
        this.state = 1040;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.STAR - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.POWER - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
          this.state = 1039;
          this.arglist();
        }

        this.state = 1042;
        this.match(Python3Parser.CLOSE_PAREN);
      }

      this.state = 1045;
      this.match(Python3Parser.COLON);
      this.state = 1046;
      this.suite();
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  arglist() {
    let localctx = new ArglistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, Python3Parser.RULE_arglist);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1048;
      this.argument();
      this.state = 1053;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 156, this._ctx);

      while (_alt != 2 && _alt != _antlr.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1049;
          this.match(Python3Parser.COMMA);
          this.state = 1050;
          this.argument();
        }

        this.state = 1055;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 156, this._ctx);
      }

      this.state = 1057;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.COMMA) {
        this.state = 1056;
        this.match(Python3Parser.COMMA);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  argument() {
    let localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, Python3Parser.RULE_argument);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1071;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 159, this._ctx);

      switch (la_) {
        case 1:
          this.state = 1059;
          this.test();
          this.state = 1061;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === Python3Parser.FOR || _la === Python3Parser.ASYNC) {
            this.state = 1060;
            this.comp_for();
          }

          break;

        case 2:
          this.state = 1063;
          this.test();
          this.state = 1064;
          this.match(Python3Parser.ASSIGN);
          this.state = 1065;
          this.test();
          break;

        case 3:
          this.state = 1067;
          this.match(Python3Parser.POWER);
          this.state = 1068;
          this.test();
          break;

        case 4:
          this.state = 1069;
          this.match(Python3Parser.STAR);
          this.state = 1070;
          this.test();
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  comp_iter() {
    let localctx = new Comp_iterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, Python3Parser.RULE_comp_iter);

    try {
      this.state = 1075;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.FOR:
        case Python3Parser.ASYNC:
          this.enterOuterAlt(localctx, 1);
          this.state = 1073;
          this.comp_for();
          break;

        case Python3Parser.IF:
          this.enterOuterAlt(localctx, 2);
          this.state = 1074;
          this.comp_if();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  comp_for() {
    let localctx = new Comp_forContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, Python3Parser.RULE_comp_for);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1078;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === Python3Parser.ASYNC) {
        this.state = 1077;
        this.match(Python3Parser.ASYNC);
      }

      this.state = 1080;
      this.match(Python3Parser.FOR);
      this.state = 1081;
      this.exprlist();
      this.state = 1082;
      this.match(Python3Parser.IN);
      this.state = 1083;
      this.or_test();
      this.state = 1085;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 15 & ~0x1f) == 0 && (1 << _la - 15 & (1 << Python3Parser.IF - 15 | 1 << Python3Parser.FOR - 15 | 1 << Python3Parser.ASYNC - 15)) !== 0) {
        this.state = 1084;
        this.comp_iter();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  comp_if() {
    let localctx = new Comp_ifContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, Python3Parser.RULE_comp_if);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1087;
      this.match(Python3Parser.IF);
      this.state = 1088;
      this.test_nocond();
      this.state = 1090;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 15 & ~0x1f) == 0 && (1 << _la - 15 & (1 << Python3Parser.IF - 15 | 1 << Python3Parser.FOR - 15 | 1 << Python3Parser.ASYNC - 15)) !== 0) {
        this.state = 1089;
        this.comp_iter();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  encoding_decl() {
    let localctx = new Encoding_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, Python3Parser.RULE_encoding_decl);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1092;
      this.match(Python3Parser.NAME);
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  yield_expr() {
    let localctx = new Yield_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, Python3Parser.RULE_yield_expr);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1094;
      this.match(Python3Parser.YIELD);
      this.state = 1096;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.STRING | 1 << Python3Parser.NUMBER | 1 << Python3Parser.FROM | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.FALSE - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32)) !== 0 || (_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << Python3Parser.ADD - 68 | 1 << Python3Parser.MINUS - 68 | 1 << Python3Parser.NOT_OP - 68 | 1 << Python3Parser.OPEN_BRACE - 68)) !== 0) {
        this.state = 1095;
        this.yield_arg();
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  yield_arg() {
    let localctx = new Yield_argContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, Python3Parser.RULE_yield_arg);

    try {
      this.state = 1101;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case Python3Parser.FROM:
          this.enterOuterAlt(localctx, 1);
          this.state = 1098;
          this.match(Python3Parser.FROM);
          this.state = 1099;
          this.test();
          break;

        case Python3Parser.STRING:
        case Python3Parser.NUMBER:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
          this.enterOuterAlt(localctx, 2);
          this.state = 1100;
          this.testlist();
          break;

        default:
          throw new _antlr.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.default.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

}

exports.default = Python3Parser;
Python3Parser.EOF = _antlr.default.Token.EOF;
Python3Parser.INDENT = 1;
Python3Parser.DEDENT = 2;
Python3Parser.STRING = 3;
Python3Parser.NUMBER = 4;
Python3Parser.INTEGER = 5;
Python3Parser.DEF = 6;
Python3Parser.RETURN = 7;
Python3Parser.RAISE = 8;
Python3Parser.FROM = 9;
Python3Parser.IMPORT = 10;
Python3Parser.AS = 11;
Python3Parser.GLOBAL = 12;
Python3Parser.NONLOCAL = 13;
Python3Parser.ASSERT = 14;
Python3Parser.IF = 15;
Python3Parser.ELIF = 16;
Python3Parser.ELSE = 17;
Python3Parser.WHILE = 18;
Python3Parser.FOR = 19;
Python3Parser.IN = 20;
Python3Parser.TRY = 21;
Python3Parser.FINALLY = 22;
Python3Parser.WITH = 23;
Python3Parser.EXCEPT = 24;
Python3Parser.LAMBDA = 25;
Python3Parser.OR = 26;
Python3Parser.AND = 27;
Python3Parser.NOT = 28;
Python3Parser.IS = 29;
Python3Parser.NONE = 30;
Python3Parser.TRUE = 31;
Python3Parser.FALSE = 32;
Python3Parser.CLASS = 33;
Python3Parser.YIELD = 34;
Python3Parser.DEL = 35;
Python3Parser.PASS = 36;
Python3Parser.CONTINUE = 37;
Python3Parser.BREAK = 38;
Python3Parser.ASYNC = 39;
Python3Parser.AWAIT = 40;
Python3Parser.NEWLINE = 41;
Python3Parser.NAME = 42;
Python3Parser.STRING_LITERAL = 43;
Python3Parser.BYTES_LITERAL = 44;
Python3Parser.DECIMAL_INTEGER = 45;
Python3Parser.OCT_INTEGER = 46;
Python3Parser.HEX_INTEGER = 47;
Python3Parser.BIN_INTEGER = 48;
Python3Parser.FLOAT_NUMBER = 49;
Python3Parser.IMAG_NUMBER = 50;
Python3Parser.DOT = 51;
Python3Parser.ELLIPSIS = 52;
Python3Parser.STAR = 53;
Python3Parser.OPEN_PAREN = 54;
Python3Parser.CLOSE_PAREN = 55;
Python3Parser.COMMA = 56;
Python3Parser.COLON = 57;
Python3Parser.SEMI_COLON = 58;
Python3Parser.POWER = 59;
Python3Parser.ASSIGN = 60;
Python3Parser.OPEN_BRACK = 61;
Python3Parser.CLOSE_BRACK = 62;
Python3Parser.OR_OP = 63;
Python3Parser.XOR = 64;
Python3Parser.AND_OP = 65;
Python3Parser.LEFT_SHIFT = 66;
Python3Parser.RIGHT_SHIFT = 67;
Python3Parser.ADD = 68;
Python3Parser.MINUS = 69;
Python3Parser.DIV = 70;
Python3Parser.MOD = 71;
Python3Parser.IDIV = 72;
Python3Parser.NOT_OP = 73;
Python3Parser.OPEN_BRACE = 74;
Python3Parser.CLOSE_BRACE = 75;
Python3Parser.LESS_THAN = 76;
Python3Parser.GREATER_THAN = 77;
Python3Parser.EQUALS = 78;
Python3Parser.GT_EQ = 79;
Python3Parser.LT_EQ = 80;
Python3Parser.NOT_EQ_1 = 81;
Python3Parser.NOT_EQ_2 = 82;
Python3Parser.AT = 83;
Python3Parser.ARROW = 84;
Python3Parser.ADD_ASSIGN = 85;
Python3Parser.SUB_ASSIGN = 86;
Python3Parser.MULT_ASSIGN = 87;
Python3Parser.AT_ASSIGN = 88;
Python3Parser.DIV_ASSIGN = 89;
Python3Parser.MOD_ASSIGN = 90;
Python3Parser.AND_ASSIGN = 91;
Python3Parser.OR_ASSIGN = 92;
Python3Parser.XOR_ASSIGN = 93;
Python3Parser.LEFT_SHIFT_ASSIGN = 94;
Python3Parser.RIGHT_SHIFT_ASSIGN = 95;
Python3Parser.POWER_ASSIGN = 96;
Python3Parser.IDIV_ASSIGN = 97;
Python3Parser.SKIP_ = 98;
Python3Parser.UNKNOWN_CHAR = 99;
Python3Parser.RULE_single_input = 0;
Python3Parser.RULE_file_input = 1;
Python3Parser.RULE_eval_input = 2;
Python3Parser.RULE_decorator = 3;
Python3Parser.RULE_decorators = 4;
Python3Parser.RULE_decorated = 5;
Python3Parser.RULE_async_funcdef = 6;
Python3Parser.RULE_funcdef = 7;
Python3Parser.RULE_parameters = 8;
Python3Parser.RULE_typedargslist = 9;
Python3Parser.RULE_tfpdef = 10;
Python3Parser.RULE_varargslist = 11;
Python3Parser.RULE_vfpdef = 12;
Python3Parser.RULE_stmt = 13;
Python3Parser.RULE_simple_stmt = 14;
Python3Parser.RULE_small_stmt = 15;
Python3Parser.RULE_expr_stmt = 16;
Python3Parser.RULE_annassign = 17;
Python3Parser.RULE_testlist_star_expr = 18;
Python3Parser.RULE_augassign = 19;
Python3Parser.RULE_del_stmt = 20;
Python3Parser.RULE_pass_stmt = 21;
Python3Parser.RULE_flow_stmt = 22;
Python3Parser.RULE_break_stmt = 23;
Python3Parser.RULE_continue_stmt = 24;
Python3Parser.RULE_return_stmt = 25;
Python3Parser.RULE_yield_stmt = 26;
Python3Parser.RULE_raise_stmt = 27;
Python3Parser.RULE_import_stmt = 28;
Python3Parser.RULE_import_name = 29;
Python3Parser.RULE_import_from = 30;
Python3Parser.RULE_import_as_name = 31;
Python3Parser.RULE_dotted_as_name = 32;
Python3Parser.RULE_import_as_names = 33;
Python3Parser.RULE_dotted_as_names = 34;
Python3Parser.RULE_dotted_name = 35;
Python3Parser.RULE_global_stmt = 36;
Python3Parser.RULE_nonlocal_stmt = 37;
Python3Parser.RULE_assert_stmt = 38;
Python3Parser.RULE_compound_stmt = 39;
Python3Parser.RULE_async_stmt = 40;
Python3Parser.RULE_if_stmt = 41;
Python3Parser.RULE_while_stmt = 42;
Python3Parser.RULE_for_stmt = 43;
Python3Parser.RULE_try_stmt = 44;
Python3Parser.RULE_with_stmt = 45;
Python3Parser.RULE_with_item = 46;
Python3Parser.RULE_except_clause = 47;
Python3Parser.RULE_suite = 48;
Python3Parser.RULE_test = 49;
Python3Parser.RULE_test_nocond = 50;
Python3Parser.RULE_lambdef = 51;
Python3Parser.RULE_lambdef_nocond = 52;
Python3Parser.RULE_or_test = 53;
Python3Parser.RULE_and_test = 54;
Python3Parser.RULE_not_test = 55;
Python3Parser.RULE_comparison = 56;
Python3Parser.RULE_comp_op = 57;
Python3Parser.RULE_star_expr = 58;
Python3Parser.RULE_expr = 59;
Python3Parser.RULE_xor_expr = 60;
Python3Parser.RULE_and_expr = 61;
Python3Parser.RULE_shift_expr = 62;
Python3Parser.RULE_arith_expr = 63;
Python3Parser.RULE_term = 64;
Python3Parser.RULE_factor = 65;
Python3Parser.RULE_power = 66;
Python3Parser.RULE_atom_expr = 67;
Python3Parser.RULE_atom = 68;
Python3Parser.RULE_testlist_comp = 69;
Python3Parser.RULE_trailer = 70;
Python3Parser.RULE_subscriptlist = 71;
Python3Parser.RULE_subscript_ = 72;
Python3Parser.RULE_sliceop = 73;
Python3Parser.RULE_exprlist = 74;
Python3Parser.RULE_testlist = 75;
Python3Parser.RULE_dictorsetmaker = 76;
Python3Parser.RULE_classdef = 77;
Python3Parser.RULE_arglist = 78;
Python3Parser.RULE_argument = 79;
Python3Parser.RULE_comp_iter = 80;
Python3Parser.RULE_comp_for = 81;
Python3Parser.RULE_comp_if = 82;
Python3Parser.RULE_encoding_decl = 83;
Python3Parser.RULE_yield_expr = 84;
Python3Parser.RULE_yield_arg = 85;

class Single_inputContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_single_input;
  }

  NEWLINE() {
    return this.getToken(Python3Parser.NEWLINE, 0);
  }

  simple_stmt() {
    return this.getTypedRuleContext(Simple_stmtContext, 0);
  }

  compound_stmt() {
    return this.getTypedRuleContext(Compound_stmtContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterSingle_input(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitSingle_input(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitSingle_input(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class File_inputContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_file_input;
  }

  EOF() {
    return this.getToken(Python3Parser.EOF, 0);
  }

  NEWLINE = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.NEWLINE);
    } else {
      return this.getToken(Python3Parser.NEWLINE, i);
    }
  };
  stmt = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(StmtContext);
    } else {
      return this.getTypedRuleContext(StmtContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterFile_input(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitFile_input(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitFile_input(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Eval_inputContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_eval_input;
  }

  testlist() {
    return this.getTypedRuleContext(TestlistContext, 0);
  }

  EOF() {
    return this.getToken(Python3Parser.EOF, 0);
  }

  NEWLINE = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.NEWLINE);
    } else {
      return this.getToken(Python3Parser.NEWLINE, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterEval_input(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitEval_input(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitEval_input(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class DecoratorContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_decorator;
  }

  AT() {
    return this.getToken(Python3Parser.AT, 0);
  }

  dotted_name() {
    return this.getTypedRuleContext(Dotted_nameContext, 0);
  }

  NEWLINE() {
    return this.getToken(Python3Parser.NEWLINE, 0);
  }

  OPEN_PAREN() {
    return this.getToken(Python3Parser.OPEN_PAREN, 0);
  }

  CLOSE_PAREN() {
    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
  }

  arglist() {
    return this.getTypedRuleContext(ArglistContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterDecorator(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitDecorator(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitDecorator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class DecoratorsContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_decorators;
  }

  decorator = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(DecoratorContext);
    } else {
      return this.getTypedRuleContext(DecoratorContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterDecorators(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitDecorators(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitDecorators(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class DecoratedContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_decorated;
  }

  decorators() {
    return this.getTypedRuleContext(DecoratorsContext, 0);
  }

  classdef() {
    return this.getTypedRuleContext(ClassdefContext, 0);
  }

  funcdef() {
    return this.getTypedRuleContext(FuncdefContext, 0);
  }

  async_funcdef() {
    return this.getTypedRuleContext(Async_funcdefContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterDecorated(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitDecorated(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitDecorated(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Async_funcdefContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_async_funcdef;
  }

  ASYNC() {
    return this.getToken(Python3Parser.ASYNC, 0);
  }

  funcdef() {
    return this.getTypedRuleContext(FuncdefContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterAsync_funcdef(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitAsync_funcdef(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitAsync_funcdef(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FuncdefContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_funcdef;
  }

  DEF() {
    return this.getToken(Python3Parser.DEF, 0);
  }

  NAME() {
    return this.getToken(Python3Parser.NAME, 0);
  }

  parameters() {
    return this.getTypedRuleContext(ParametersContext, 0);
  }

  COLON() {
    return this.getToken(Python3Parser.COLON, 0);
  }

  suite() {
    return this.getTypedRuleContext(SuiteContext, 0);
  }

  ARROW() {
    return this.getToken(Python3Parser.ARROW, 0);
  }

  test() {
    return this.getTypedRuleContext(TestContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterFuncdef(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitFuncdef(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitFuncdef(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ParametersContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_parameters;
  }

  OPEN_PAREN() {
    return this.getToken(Python3Parser.OPEN_PAREN, 0);
  }

  CLOSE_PAREN() {
    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
  }

  typedargslist() {
    return this.getTypedRuleContext(TypedargslistContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterParameters(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitParameters(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitParameters(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TypedargslistContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_typedargslist;
  }

  tfpdef = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TfpdefContext);
    } else {
      return this.getTypedRuleContext(TfpdefContext, i);
    }
  };

  STAR() {
    return this.getToken(Python3Parser.STAR, 0);
  }

  POWER() {
    return this.getToken(Python3Parser.POWER, 0);
  }

  ASSIGN = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.ASSIGN);
    } else {
      return this.getToken(Python3Parser.ASSIGN, i);
    }
  };
  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterTypedargslist(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitTypedargslist(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitTypedargslist(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TfpdefContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_tfpdef;
  }

  NAME() {
    return this.getToken(Python3Parser.NAME, 0);
  }

  COLON() {
    return this.getToken(Python3Parser.COLON, 0);
  }

  test() {
    return this.getTypedRuleContext(TestContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterTfpdef(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitTfpdef(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitTfpdef(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class VarargslistContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_varargslist;
  }

  vfpdef = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(VfpdefContext);
    } else {
      return this.getTypedRuleContext(VfpdefContext, i);
    }
  };

  STAR() {
    return this.getToken(Python3Parser.STAR, 0);
  }

  POWER() {
    return this.getToken(Python3Parser.POWER, 0);
  }

  ASSIGN = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.ASSIGN);
    } else {
      return this.getToken(Python3Parser.ASSIGN, i);
    }
  };
  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterVarargslist(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitVarargslist(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitVarargslist(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class VfpdefContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_vfpdef;
  }

  NAME() {
    return this.getToken(Python3Parser.NAME, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterVfpdef(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitVfpdef(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitVfpdef(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class StmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_stmt;
  }

  simple_stmt() {
    return this.getTypedRuleContext(Simple_stmtContext, 0);
  }

  compound_stmt() {
    return this.getTypedRuleContext(Compound_stmtContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterStmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitStmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitStmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Simple_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_simple_stmt;
  }

  small_stmt = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Small_stmtContext);
    } else {
      return this.getTypedRuleContext(Small_stmtContext, i);
    }
  };

  NEWLINE() {
    return this.getToken(Python3Parser.NEWLINE, 0);
  }

  SEMI_COLON = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.SEMI_COLON);
    } else {
      return this.getToken(Python3Parser.SEMI_COLON, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterSimple_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitSimple_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitSimple_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Small_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_small_stmt;
  }

  expr_stmt() {
    return this.getTypedRuleContext(Expr_stmtContext, 0);
  }

  del_stmt() {
    return this.getTypedRuleContext(Del_stmtContext, 0);
  }

  pass_stmt() {
    return this.getTypedRuleContext(Pass_stmtContext, 0);
  }

  flow_stmt() {
    return this.getTypedRuleContext(Flow_stmtContext, 0);
  }

  import_stmt() {
    return this.getTypedRuleContext(Import_stmtContext, 0);
  }

  global_stmt() {
    return this.getTypedRuleContext(Global_stmtContext, 0);
  }

  nonlocal_stmt() {
    return this.getTypedRuleContext(Nonlocal_stmtContext, 0);
  }

  assert_stmt() {
    return this.getTypedRuleContext(Assert_stmtContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterSmall_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitSmall_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitSmall_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Expr_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_expr_stmt;
  }

  testlist_star_expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Testlist_star_exprContext);
    } else {
      return this.getTypedRuleContext(Testlist_star_exprContext, i);
    }
  };

  annassign() {
    return this.getTypedRuleContext(AnnassignContext, 0);
  }

  augassign() {
    return this.getTypedRuleContext(AugassignContext, 0);
  }

  yield_expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Yield_exprContext);
    } else {
      return this.getTypedRuleContext(Yield_exprContext, i);
    }
  };

  testlist() {
    return this.getTypedRuleContext(TestlistContext, 0);
  }

  ASSIGN = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.ASSIGN);
    } else {
      return this.getToken(Python3Parser.ASSIGN, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterExpr_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitExpr_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitExpr_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class AnnassignContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_annassign;
  }

  COLON() {
    return this.getToken(Python3Parser.COLON, 0);
  }

  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };

  ASSIGN() {
    return this.getToken(Python3Parser.ASSIGN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterAnnassign(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitAnnassign(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitAnnassign(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Testlist_star_exprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_testlist_star_expr;
  }

  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };
  star_expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Star_exprContext);
    } else {
      return this.getTypedRuleContext(Star_exprContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterTestlist_star_expr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitTestlist_star_expr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitTestlist_star_expr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class AugassignContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_augassign;
  }

  ADD_ASSIGN() {
    return this.getToken(Python3Parser.ADD_ASSIGN, 0);
  }

  SUB_ASSIGN() {
    return this.getToken(Python3Parser.SUB_ASSIGN, 0);
  }

  MULT_ASSIGN() {
    return this.getToken(Python3Parser.MULT_ASSIGN, 0);
  }

  AT_ASSIGN() {
    return this.getToken(Python3Parser.AT_ASSIGN, 0);
  }

  DIV_ASSIGN() {
    return this.getToken(Python3Parser.DIV_ASSIGN, 0);
  }

  MOD_ASSIGN() {
    return this.getToken(Python3Parser.MOD_ASSIGN, 0);
  }

  AND_ASSIGN() {
    return this.getToken(Python3Parser.AND_ASSIGN, 0);
  }

  OR_ASSIGN() {
    return this.getToken(Python3Parser.OR_ASSIGN, 0);
  }

  XOR_ASSIGN() {
    return this.getToken(Python3Parser.XOR_ASSIGN, 0);
  }

  LEFT_SHIFT_ASSIGN() {
    return this.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0);
  }

  RIGHT_SHIFT_ASSIGN() {
    return this.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0);
  }

  POWER_ASSIGN() {
    return this.getToken(Python3Parser.POWER_ASSIGN, 0);
  }

  IDIV_ASSIGN() {
    return this.getToken(Python3Parser.IDIV_ASSIGN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterAugassign(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitAugassign(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitAugassign(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Del_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_del_stmt;
  }

  DEL() {
    return this.getToken(Python3Parser.DEL, 0);
  }

  exprlist() {
    return this.getTypedRuleContext(ExprlistContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterDel_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitDel_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitDel_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Pass_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_pass_stmt;
  }

  PASS() {
    return this.getToken(Python3Parser.PASS, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterPass_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitPass_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitPass_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Flow_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_flow_stmt;
  }

  break_stmt() {
    return this.getTypedRuleContext(Break_stmtContext, 0);
  }

  continue_stmt() {
    return this.getTypedRuleContext(Continue_stmtContext, 0);
  }

  return_stmt() {
    return this.getTypedRuleContext(Return_stmtContext, 0);
  }

  raise_stmt() {
    return this.getTypedRuleContext(Raise_stmtContext, 0);
  }

  yield_stmt() {
    return this.getTypedRuleContext(Yield_stmtContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterFlow_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitFlow_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitFlow_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Break_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_break_stmt;
  }

  BREAK() {
    return this.getToken(Python3Parser.BREAK, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterBreak_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitBreak_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitBreak_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Continue_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_continue_stmt;
  }

  CONTINUE() {
    return this.getToken(Python3Parser.CONTINUE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterContinue_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitContinue_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitContinue_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Return_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_return_stmt;
  }

  RETURN() {
    return this.getToken(Python3Parser.RETURN, 0);
  }

  testlist() {
    return this.getTypedRuleContext(TestlistContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterReturn_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitReturn_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitReturn_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Yield_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_yield_stmt;
  }

  yield_expr() {
    return this.getTypedRuleContext(Yield_exprContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterYield_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitYield_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitYield_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Raise_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_raise_stmt;
  }

  RAISE() {
    return this.getToken(Python3Parser.RAISE, 0);
  }

  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };

  FROM() {
    return this.getToken(Python3Parser.FROM, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterRaise_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitRaise_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitRaise_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Import_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_import_stmt;
  }

  import_name() {
    return this.getTypedRuleContext(Import_nameContext, 0);
  }

  import_from() {
    return this.getTypedRuleContext(Import_fromContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterImport_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitImport_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitImport_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Import_nameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_import_name;
  }

  IMPORT() {
    return this.getToken(Python3Parser.IMPORT, 0);
  }

  dotted_as_names() {
    return this.getTypedRuleContext(Dotted_as_namesContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterImport_name(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitImport_name(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitImport_name(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Import_fromContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_import_from;
  }

  FROM() {
    return this.getToken(Python3Parser.FROM, 0);
  }

  IMPORT() {
    return this.getToken(Python3Parser.IMPORT, 0);
  }

  dotted_name() {
    return this.getTypedRuleContext(Dotted_nameContext, 0);
  }

  STAR() {
    return this.getToken(Python3Parser.STAR, 0);
  }

  OPEN_PAREN() {
    return this.getToken(Python3Parser.OPEN_PAREN, 0);
  }

  import_as_names() {
    return this.getTypedRuleContext(Import_as_namesContext, 0);
  }

  CLOSE_PAREN() {
    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
  }

  DOT = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.DOT);
    } else {
      return this.getToken(Python3Parser.DOT, i);
    }
  };
  ELLIPSIS = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.ELLIPSIS);
    } else {
      return this.getToken(Python3Parser.ELLIPSIS, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterImport_from(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitImport_from(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitImport_from(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Import_as_nameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_import_as_name;
  }

  NAME = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.NAME);
    } else {
      return this.getToken(Python3Parser.NAME, i);
    }
  };

  AS() {
    return this.getToken(Python3Parser.AS, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterImport_as_name(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitImport_as_name(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitImport_as_name(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Dotted_as_nameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_dotted_as_name;
  }

  dotted_name() {
    return this.getTypedRuleContext(Dotted_nameContext, 0);
  }

  AS() {
    return this.getToken(Python3Parser.AS, 0);
  }

  NAME() {
    return this.getToken(Python3Parser.NAME, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterDotted_as_name(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitDotted_as_name(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitDotted_as_name(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Import_as_namesContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_import_as_names;
  }

  import_as_name = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Import_as_nameContext);
    } else {
      return this.getTypedRuleContext(Import_as_nameContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterImport_as_names(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitImport_as_names(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitImport_as_names(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Dotted_as_namesContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_dotted_as_names;
  }

  dotted_as_name = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Dotted_as_nameContext);
    } else {
      return this.getTypedRuleContext(Dotted_as_nameContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterDotted_as_names(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitDotted_as_names(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitDotted_as_names(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Dotted_nameContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_dotted_name;
  }

  NAME = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.NAME);
    } else {
      return this.getToken(Python3Parser.NAME, i);
    }
  };
  DOT = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.DOT);
    } else {
      return this.getToken(Python3Parser.DOT, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterDotted_name(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitDotted_name(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitDotted_name(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Global_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_global_stmt;
  }

  GLOBAL() {
    return this.getToken(Python3Parser.GLOBAL, 0);
  }

  NAME = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.NAME);
    } else {
      return this.getToken(Python3Parser.NAME, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterGlobal_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitGlobal_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitGlobal_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Nonlocal_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_nonlocal_stmt;
  }

  NONLOCAL() {
    return this.getToken(Python3Parser.NONLOCAL, 0);
  }

  NAME = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.NAME);
    } else {
      return this.getToken(Python3Parser.NAME, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterNonlocal_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitNonlocal_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitNonlocal_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Assert_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_assert_stmt;
  }

  ASSERT() {
    return this.getToken(Python3Parser.ASSERT, 0);
  }

  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };

  COMMA() {
    return this.getToken(Python3Parser.COMMA, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterAssert_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitAssert_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitAssert_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Compound_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_compound_stmt;
  }

  if_stmt() {
    return this.getTypedRuleContext(If_stmtContext, 0);
  }

  while_stmt() {
    return this.getTypedRuleContext(While_stmtContext, 0);
  }

  for_stmt() {
    return this.getTypedRuleContext(For_stmtContext, 0);
  }

  try_stmt() {
    return this.getTypedRuleContext(Try_stmtContext, 0);
  }

  with_stmt() {
    return this.getTypedRuleContext(With_stmtContext, 0);
  }

  funcdef() {
    return this.getTypedRuleContext(FuncdefContext, 0);
  }

  classdef() {
    return this.getTypedRuleContext(ClassdefContext, 0);
  }

  decorated() {
    return this.getTypedRuleContext(DecoratedContext, 0);
  }

  async_stmt() {
    return this.getTypedRuleContext(Async_stmtContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterCompound_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitCompound_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitCompound_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Async_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_async_stmt;
  }

  ASYNC() {
    return this.getToken(Python3Parser.ASYNC, 0);
  }

  funcdef() {
    return this.getTypedRuleContext(FuncdefContext, 0);
  }

  with_stmt() {
    return this.getTypedRuleContext(With_stmtContext, 0);
  }

  for_stmt() {
    return this.getTypedRuleContext(For_stmtContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterAsync_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitAsync_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitAsync_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class If_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_if_stmt;
  }

  IF() {
    return this.getToken(Python3Parser.IF, 0);
  }

  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };
  COLON = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COLON);
    } else {
      return this.getToken(Python3Parser.COLON, i);
    }
  };
  suite = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SuiteContext);
    } else {
      return this.getTypedRuleContext(SuiteContext, i);
    }
  };
  ELIF = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.ELIF);
    } else {
      return this.getToken(Python3Parser.ELIF, i);
    }
  };

  ELSE() {
    return this.getToken(Python3Parser.ELSE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterIf_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitIf_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitIf_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class While_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_while_stmt;
  }

  WHILE() {
    return this.getToken(Python3Parser.WHILE, 0);
  }

  test() {
    return this.getTypedRuleContext(TestContext, 0);
  }

  COLON = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COLON);
    } else {
      return this.getToken(Python3Parser.COLON, i);
    }
  };
  suite = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SuiteContext);
    } else {
      return this.getTypedRuleContext(SuiteContext, i);
    }
  };

  ELSE() {
    return this.getToken(Python3Parser.ELSE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterWhile_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitWhile_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitWhile_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class For_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_for_stmt;
  }

  FOR() {
    return this.getToken(Python3Parser.FOR, 0);
  }

  exprlist() {
    return this.getTypedRuleContext(ExprlistContext, 0);
  }

  IN() {
    return this.getToken(Python3Parser.IN, 0);
  }

  testlist() {
    return this.getTypedRuleContext(TestlistContext, 0);
  }

  COLON = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COLON);
    } else {
      return this.getToken(Python3Parser.COLON, i);
    }
  };
  suite = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SuiteContext);
    } else {
      return this.getTypedRuleContext(SuiteContext, i);
    }
  };

  ELSE() {
    return this.getToken(Python3Parser.ELSE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterFor_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitFor_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitFor_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Try_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_try_stmt;
  }

  TRY() {
    return this.getToken(Python3Parser.TRY, 0);
  }

  COLON = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COLON);
    } else {
      return this.getToken(Python3Parser.COLON, i);
    }
  };
  suite = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(SuiteContext);
    } else {
      return this.getTypedRuleContext(SuiteContext, i);
    }
  };

  FINALLY() {
    return this.getToken(Python3Parser.FINALLY, 0);
  }

  except_clause = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Except_clauseContext);
    } else {
      return this.getTypedRuleContext(Except_clauseContext, i);
    }
  };

  ELSE() {
    return this.getToken(Python3Parser.ELSE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterTry_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitTry_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitTry_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class With_stmtContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_with_stmt;
  }

  WITH() {
    return this.getToken(Python3Parser.WITH, 0);
  }

  with_item = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(With_itemContext);
    } else {
      return this.getTypedRuleContext(With_itemContext, i);
    }
  };

  COLON() {
    return this.getToken(Python3Parser.COLON, 0);
  }

  suite() {
    return this.getTypedRuleContext(SuiteContext, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterWith_stmt(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitWith_stmt(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitWith_stmt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class With_itemContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_with_item;
  }

  test() {
    return this.getTypedRuleContext(TestContext, 0);
  }

  AS() {
    return this.getToken(Python3Parser.AS, 0);
  }

  expr() {
    return this.getTypedRuleContext(ExprContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterWith_item(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitWith_item(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitWith_item(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Except_clauseContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_except_clause;
  }

  EXCEPT() {
    return this.getToken(Python3Parser.EXCEPT, 0);
  }

  test() {
    return this.getTypedRuleContext(TestContext, 0);
  }

  AS() {
    return this.getToken(Python3Parser.AS, 0);
  }

  NAME() {
    return this.getToken(Python3Parser.NAME, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterExcept_clause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitExcept_clause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitExcept_clause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SuiteContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_suite;
  }

  simple_stmt() {
    return this.getTypedRuleContext(Simple_stmtContext, 0);
  }

  NEWLINE() {
    return this.getToken(Python3Parser.NEWLINE, 0);
  }

  INDENT() {
    return this.getToken(Python3Parser.INDENT, 0);
  }

  DEDENT() {
    return this.getToken(Python3Parser.DEDENT, 0);
  }

  stmt = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(StmtContext);
    } else {
      return this.getTypedRuleContext(StmtContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterSuite(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitSuite(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitSuite(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TestContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_test;
  }

  or_test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Or_testContext);
    } else {
      return this.getTypedRuleContext(Or_testContext, i);
    }
  };

  IF() {
    return this.getToken(Python3Parser.IF, 0);
  }

  ELSE() {
    return this.getToken(Python3Parser.ELSE, 0);
  }

  test() {
    return this.getTypedRuleContext(TestContext, 0);
  }

  lambdef() {
    return this.getTypedRuleContext(LambdefContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterTest(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitTest(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitTest(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Test_nocondContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_test_nocond;
  }

  or_test() {
    return this.getTypedRuleContext(Or_testContext, 0);
  }

  lambdef_nocond() {
    return this.getTypedRuleContext(Lambdef_nocondContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterTest_nocond(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitTest_nocond(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitTest_nocond(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class LambdefContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_lambdef;
  }

  LAMBDA() {
    return this.getToken(Python3Parser.LAMBDA, 0);
  }

  COLON() {
    return this.getToken(Python3Parser.COLON, 0);
  }

  test() {
    return this.getTypedRuleContext(TestContext, 0);
  }

  varargslist() {
    return this.getTypedRuleContext(VarargslistContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterLambdef(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitLambdef(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitLambdef(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Lambdef_nocondContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_lambdef_nocond;
  }

  LAMBDA() {
    return this.getToken(Python3Parser.LAMBDA, 0);
  }

  COLON() {
    return this.getToken(Python3Parser.COLON, 0);
  }

  test_nocond() {
    return this.getTypedRuleContext(Test_nocondContext, 0);
  }

  varargslist() {
    return this.getTypedRuleContext(VarargslistContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterLambdef_nocond(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitLambdef_nocond(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitLambdef_nocond(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Or_testContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_or_test;
  }

  and_test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(And_testContext);
    } else {
      return this.getTypedRuleContext(And_testContext, i);
    }
  };
  OR = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.OR);
    } else {
      return this.getToken(Python3Parser.OR, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterOr_test(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitOr_test(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitOr_test(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class And_testContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_and_test;
  }

  not_test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Not_testContext);
    } else {
      return this.getTypedRuleContext(Not_testContext, i);
    }
  };
  AND = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.AND);
    } else {
      return this.getToken(Python3Parser.AND, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterAnd_test(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitAnd_test(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitAnd_test(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Not_testContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_not_test;
  }

  NOT() {
    return this.getToken(Python3Parser.NOT, 0);
  }

  not_test() {
    return this.getTypedRuleContext(Not_testContext, 0);
  }

  comparison() {
    return this.getTypedRuleContext(ComparisonContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterNot_test(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitNot_test(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitNot_test(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ComparisonContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_comparison;
  }

  expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ExprContext);
    } else {
      return this.getTypedRuleContext(ExprContext, i);
    }
  };
  comp_op = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Comp_opContext);
    } else {
      return this.getTypedRuleContext(Comp_opContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterComparison(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitComparison(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitComparison(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Comp_opContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_comp_op;
  }

  LESS_THAN() {
    return this.getToken(Python3Parser.LESS_THAN, 0);
  }

  GREATER_THAN() {
    return this.getToken(Python3Parser.GREATER_THAN, 0);
  }

  EQUALS() {
    return this.getToken(Python3Parser.EQUALS, 0);
  }

  GT_EQ() {
    return this.getToken(Python3Parser.GT_EQ, 0);
  }

  LT_EQ() {
    return this.getToken(Python3Parser.LT_EQ, 0);
  }

  NOT_EQ_1() {
    return this.getToken(Python3Parser.NOT_EQ_1, 0);
  }

  NOT_EQ_2() {
    return this.getToken(Python3Parser.NOT_EQ_2, 0);
  }

  IN() {
    return this.getToken(Python3Parser.IN, 0);
  }

  NOT() {
    return this.getToken(Python3Parser.NOT, 0);
  }

  IS() {
    return this.getToken(Python3Parser.IS, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterComp_op(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitComp_op(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitComp_op(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Star_exprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_star_expr;
  }

  STAR() {
    return this.getToken(Python3Parser.STAR, 0);
  }

  expr() {
    return this.getTypedRuleContext(ExprContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterStar_expr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitStar_expr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitStar_expr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_expr;
  }

  xor_expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Xor_exprContext);
    } else {
      return this.getTypedRuleContext(Xor_exprContext, i);
    }
  };
  OR_OP = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.OR_OP);
    } else {
      return this.getToken(Python3Parser.OR_OP, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterExpr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitExpr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitExpr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Xor_exprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_xor_expr;
  }

  and_expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(And_exprContext);
    } else {
      return this.getTypedRuleContext(And_exprContext, i);
    }
  };
  XOR = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.XOR);
    } else {
      return this.getToken(Python3Parser.XOR, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterXor_expr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitXor_expr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitXor_expr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class And_exprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_and_expr;
  }

  shift_expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Shift_exprContext);
    } else {
      return this.getTypedRuleContext(Shift_exprContext, i);
    }
  };
  AND_OP = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.AND_OP);
    } else {
      return this.getToken(Python3Parser.AND_OP, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterAnd_expr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitAnd_expr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitAnd_expr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Shift_exprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_shift_expr;
  }

  arith_expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Arith_exprContext);
    } else {
      return this.getTypedRuleContext(Arith_exprContext, i);
    }
  };
  LEFT_SHIFT = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.LEFT_SHIFT);
    } else {
      return this.getToken(Python3Parser.LEFT_SHIFT, i);
    }
  };
  RIGHT_SHIFT = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.RIGHT_SHIFT);
    } else {
      return this.getToken(Python3Parser.RIGHT_SHIFT, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterShift_expr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitShift_expr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitShift_expr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Arith_exprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_arith_expr;
  }

  term = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TermContext);
    } else {
      return this.getTypedRuleContext(TermContext, i);
    }
  };
  ADD = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.ADD);
    } else {
      return this.getToken(Python3Parser.ADD, i);
    }
  };
  MINUS = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.MINUS);
    } else {
      return this.getToken(Python3Parser.MINUS, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterArith_expr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitArith_expr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitArith_expr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TermContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_term;
  }

  factor = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(FactorContext);
    } else {
      return this.getTypedRuleContext(FactorContext, i);
    }
  };
  STAR = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.STAR);
    } else {
      return this.getToken(Python3Parser.STAR, i);
    }
  };
  AT = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.AT);
    } else {
      return this.getToken(Python3Parser.AT, i);
    }
  };
  DIV = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.DIV);
    } else {
      return this.getToken(Python3Parser.DIV, i);
    }
  };
  MOD = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.MOD);
    } else {
      return this.getToken(Python3Parser.MOD, i);
    }
  };
  IDIV = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.IDIV);
    } else {
      return this.getToken(Python3Parser.IDIV, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterTerm(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitTerm(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitTerm(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class FactorContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_factor;
  }

  factor() {
    return this.getTypedRuleContext(FactorContext, 0);
  }

  ADD() {
    return this.getToken(Python3Parser.ADD, 0);
  }

  MINUS() {
    return this.getToken(Python3Parser.MINUS, 0);
  }

  NOT_OP() {
    return this.getToken(Python3Parser.NOT_OP, 0);
  }

  power() {
    return this.getTypedRuleContext(PowerContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterFactor(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitFactor(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitFactor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class PowerContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_power;
  }

  atom_expr() {
    return this.getTypedRuleContext(Atom_exprContext, 0);
  }

  POWER() {
    return this.getToken(Python3Parser.POWER, 0);
  }

  factor() {
    return this.getTypedRuleContext(FactorContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterPower(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitPower(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitPower(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Atom_exprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_atom_expr;
  }

  atom() {
    return this.getTypedRuleContext(AtomContext, 0);
  }

  AWAIT() {
    return this.getToken(Python3Parser.AWAIT, 0);
  }

  trailer = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TrailerContext);
    } else {
      return this.getTypedRuleContext(TrailerContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterAtom_expr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitAtom_expr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitAtom_expr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class AtomContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_atom;
  }

  OPEN_PAREN() {
    return this.getToken(Python3Parser.OPEN_PAREN, 0);
  }

  CLOSE_PAREN() {
    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
  }

  OPEN_BRACK() {
    return this.getToken(Python3Parser.OPEN_BRACK, 0);
  }

  CLOSE_BRACK() {
    return this.getToken(Python3Parser.CLOSE_BRACK, 0);
  }

  OPEN_BRACE() {
    return this.getToken(Python3Parser.OPEN_BRACE, 0);
  }

  CLOSE_BRACE() {
    return this.getToken(Python3Parser.CLOSE_BRACE, 0);
  }

  NAME() {
    return this.getToken(Python3Parser.NAME, 0);
  }

  NUMBER() {
    return this.getToken(Python3Parser.NUMBER, 0);
  }

  ELLIPSIS() {
    return this.getToken(Python3Parser.ELLIPSIS, 0);
  }

  NONE() {
    return this.getToken(Python3Parser.NONE, 0);
  }

  TRUE() {
    return this.getToken(Python3Parser.TRUE, 0);
  }

  FALSE() {
    return this.getToken(Python3Parser.FALSE, 0);
  }

  yield_expr() {
    return this.getTypedRuleContext(Yield_exprContext, 0);
  }

  testlist_comp() {
    return this.getTypedRuleContext(Testlist_compContext, 0);
  }

  dictorsetmaker() {
    return this.getTypedRuleContext(DictorsetmakerContext, 0);
  }

  STRING = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.STRING);
    } else {
      return this.getToken(Python3Parser.STRING, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterAtom(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitAtom(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitAtom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Testlist_compContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_testlist_comp;
  }

  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };
  star_expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Star_exprContext);
    } else {
      return this.getTypedRuleContext(Star_exprContext, i);
    }
  };

  comp_for() {
    return this.getTypedRuleContext(Comp_forContext, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterTestlist_comp(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitTestlist_comp(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitTestlist_comp(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TrailerContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_trailer;
  }

  OPEN_PAREN() {
    return this.getToken(Python3Parser.OPEN_PAREN, 0);
  }

  CLOSE_PAREN() {
    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
  }

  arglist() {
    return this.getTypedRuleContext(ArglistContext, 0);
  }

  OPEN_BRACK() {
    return this.getToken(Python3Parser.OPEN_BRACK, 0);
  }

  subscriptlist() {
    return this.getTypedRuleContext(SubscriptlistContext, 0);
  }

  CLOSE_BRACK() {
    return this.getToken(Python3Parser.CLOSE_BRACK, 0);
  }

  DOT() {
    return this.getToken(Python3Parser.DOT, 0);
  }

  NAME() {
    return this.getToken(Python3Parser.NAME, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterTrailer(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitTrailer(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitTrailer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SubscriptlistContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_subscriptlist;
  }

  subscript_ = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Subscript_Context);
    } else {
      return this.getTypedRuleContext(Subscript_Context, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterSubscriptlist(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitSubscriptlist(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitSubscriptlist(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Subscript_Context extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_subscript_;
  }

  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };

  COLON() {
    return this.getToken(Python3Parser.COLON, 0);
  }

  sliceop() {
    return this.getTypedRuleContext(SliceopContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterSubscript_(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitSubscript_(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitSubscript_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class SliceopContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_sliceop;
  }

  COLON() {
    return this.getToken(Python3Parser.COLON, 0);
  }

  test() {
    return this.getTypedRuleContext(TestContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterSliceop(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitSliceop(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitSliceop(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ExprlistContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_exprlist;
  }

  expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ExprContext);
    } else {
      return this.getTypedRuleContext(ExprContext, i);
    }
  };
  star_expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Star_exprContext);
    } else {
      return this.getTypedRuleContext(Star_exprContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterExprlist(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitExprlist(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitExprlist(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class TestlistContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_testlist;
  }

  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterTestlist(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitTestlist(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitTestlist(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class DictorsetmakerContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_dictorsetmaker;
  }

  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };
  COLON = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COLON);
    } else {
      return this.getToken(Python3Parser.COLON, i);
    }
  };
  POWER = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.POWER);
    } else {
      return this.getToken(Python3Parser.POWER, i);
    }
  };
  expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ExprContext);
    } else {
      return this.getTypedRuleContext(ExprContext, i);
    }
  };

  comp_for() {
    return this.getTypedRuleContext(Comp_forContext, 0);
  }

  star_expr = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(Star_exprContext);
    } else {
      return this.getTypedRuleContext(Star_exprContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterDictorsetmaker(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitDictorsetmaker(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitDictorsetmaker(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ClassdefContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_classdef;
  }

  CLASS() {
    return this.getToken(Python3Parser.CLASS, 0);
  }

  NAME() {
    return this.getToken(Python3Parser.NAME, 0);
  }

  COLON() {
    return this.getToken(Python3Parser.COLON, 0);
  }

  suite() {
    return this.getTypedRuleContext(SuiteContext, 0);
  }

  OPEN_PAREN() {
    return this.getToken(Python3Parser.OPEN_PAREN, 0);
  }

  CLOSE_PAREN() {
    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
  }

  arglist() {
    return this.getTypedRuleContext(ArglistContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterClassdef(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitClassdef(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitClassdef(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ArglistContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_arglist;
  }

  argument = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(ArgumentContext);
    } else {
      return this.getTypedRuleContext(ArgumentContext, i);
    }
  };
  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTokens(Python3Parser.COMMA);
    } else {
      return this.getToken(Python3Parser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterArglist(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitArglist(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitArglist(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class ArgumentContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_argument;
  }

  test = function (i) {
    if (i === undefined) {
      i = null;
    }

    if (i === null) {
      return this.getTypedRuleContexts(TestContext);
    } else {
      return this.getTypedRuleContext(TestContext, i);
    }
  };

  ASSIGN() {
    return this.getToken(Python3Parser.ASSIGN, 0);
  }

  POWER() {
    return this.getToken(Python3Parser.POWER, 0);
  }

  STAR() {
    return this.getToken(Python3Parser.STAR, 0);
  }

  comp_for() {
    return this.getTypedRuleContext(Comp_forContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterArgument(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitArgument(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitArgument(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Comp_iterContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_comp_iter;
  }

  comp_for() {
    return this.getTypedRuleContext(Comp_forContext, 0);
  }

  comp_if() {
    return this.getTypedRuleContext(Comp_ifContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterComp_iter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitComp_iter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitComp_iter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Comp_forContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_comp_for;
  }

  FOR() {
    return this.getToken(Python3Parser.FOR, 0);
  }

  exprlist() {
    return this.getTypedRuleContext(ExprlistContext, 0);
  }

  IN() {
    return this.getToken(Python3Parser.IN, 0);
  }

  or_test() {
    return this.getTypedRuleContext(Or_testContext, 0);
  }

  ASYNC() {
    return this.getToken(Python3Parser.ASYNC, 0);
  }

  comp_iter() {
    return this.getTypedRuleContext(Comp_iterContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterComp_for(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitComp_for(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitComp_for(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Comp_ifContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_comp_if;
  }

  IF() {
    return this.getToken(Python3Parser.IF, 0);
  }

  test_nocond() {
    return this.getTypedRuleContext(Test_nocondContext, 0);
  }

  comp_iter() {
    return this.getTypedRuleContext(Comp_iterContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterComp_if(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitComp_if(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitComp_if(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Encoding_declContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_encoding_decl;
  }

  NAME() {
    return this.getToken(Python3Parser.NAME, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterEncoding_decl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitEncoding_decl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitEncoding_decl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Yield_exprContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_yield_expr;
  }

  YIELD() {
    return this.getToken(Python3Parser.YIELD, 0);
  }

  yield_arg() {
    return this.getTypedRuleContext(Yield_argContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterYield_expr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitYield_expr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitYield_expr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class Yield_argContext extends _antlr.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_yield_arg;
  }

  FROM() {
    return this.getToken(Python3Parser.FROM, 0);
  }

  test() {
    return this.getTypedRuleContext(TestContext, 0);
  }

  testlist() {
    return this.getTypedRuleContext(TestlistContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.enterYield_arg(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _Python3ParserListener.default) {
      listener.exitYield_arg(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _Python3ParserVisitor.default) {
      return visitor.visitYield_arg(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

Python3Parser.Single_inputContext = Single_inputContext;
Python3Parser.File_inputContext = File_inputContext;
Python3Parser.Eval_inputContext = Eval_inputContext;
Python3Parser.DecoratorContext = DecoratorContext;
Python3Parser.DecoratorsContext = DecoratorsContext;
Python3Parser.DecoratedContext = DecoratedContext;
Python3Parser.Async_funcdefContext = Async_funcdefContext;
Python3Parser.FuncdefContext = FuncdefContext;
Python3Parser.ParametersContext = ParametersContext;
Python3Parser.TypedargslistContext = TypedargslistContext;
Python3Parser.TfpdefContext = TfpdefContext;
Python3Parser.VarargslistContext = VarargslistContext;
Python3Parser.VfpdefContext = VfpdefContext;
Python3Parser.StmtContext = StmtContext;
Python3Parser.Simple_stmtContext = Simple_stmtContext;
Python3Parser.Small_stmtContext = Small_stmtContext;
Python3Parser.Expr_stmtContext = Expr_stmtContext;
Python3Parser.AnnassignContext = AnnassignContext;
Python3Parser.Testlist_star_exprContext = Testlist_star_exprContext;
Python3Parser.AugassignContext = AugassignContext;
Python3Parser.Del_stmtContext = Del_stmtContext;
Python3Parser.Pass_stmtContext = Pass_stmtContext;
Python3Parser.Flow_stmtContext = Flow_stmtContext;
Python3Parser.Break_stmtContext = Break_stmtContext;
Python3Parser.Continue_stmtContext = Continue_stmtContext;
Python3Parser.Return_stmtContext = Return_stmtContext;
Python3Parser.Yield_stmtContext = Yield_stmtContext;
Python3Parser.Raise_stmtContext = Raise_stmtContext;
Python3Parser.Import_stmtContext = Import_stmtContext;
Python3Parser.Import_nameContext = Import_nameContext;
Python3Parser.Import_fromContext = Import_fromContext;
Python3Parser.Import_as_nameContext = Import_as_nameContext;
Python3Parser.Dotted_as_nameContext = Dotted_as_nameContext;
Python3Parser.Import_as_namesContext = Import_as_namesContext;
Python3Parser.Dotted_as_namesContext = Dotted_as_namesContext;
Python3Parser.Dotted_nameContext = Dotted_nameContext;
Python3Parser.Global_stmtContext = Global_stmtContext;
Python3Parser.Nonlocal_stmtContext = Nonlocal_stmtContext;
Python3Parser.Assert_stmtContext = Assert_stmtContext;
Python3Parser.Compound_stmtContext = Compound_stmtContext;
Python3Parser.Async_stmtContext = Async_stmtContext;
Python3Parser.If_stmtContext = If_stmtContext;
Python3Parser.While_stmtContext = While_stmtContext;
Python3Parser.For_stmtContext = For_stmtContext;
Python3Parser.Try_stmtContext = Try_stmtContext;
Python3Parser.With_stmtContext = With_stmtContext;
Python3Parser.With_itemContext = With_itemContext;
Python3Parser.Except_clauseContext = Except_clauseContext;
Python3Parser.SuiteContext = SuiteContext;
Python3Parser.TestContext = TestContext;
Python3Parser.Test_nocondContext = Test_nocondContext;
Python3Parser.LambdefContext = LambdefContext;
Python3Parser.Lambdef_nocondContext = Lambdef_nocondContext;
Python3Parser.Or_testContext = Or_testContext;
Python3Parser.And_testContext = And_testContext;
Python3Parser.Not_testContext = Not_testContext;
Python3Parser.ComparisonContext = ComparisonContext;
Python3Parser.Comp_opContext = Comp_opContext;
Python3Parser.Star_exprContext = Star_exprContext;
Python3Parser.ExprContext = ExprContext;
Python3Parser.Xor_exprContext = Xor_exprContext;
Python3Parser.And_exprContext = And_exprContext;
Python3Parser.Shift_exprContext = Shift_exprContext;
Python3Parser.Arith_exprContext = Arith_exprContext;
Python3Parser.TermContext = TermContext;
Python3Parser.FactorContext = FactorContext;
Python3Parser.PowerContext = PowerContext;
Python3Parser.Atom_exprContext = Atom_exprContext;
Python3Parser.AtomContext = AtomContext;
Python3Parser.Testlist_compContext = Testlist_compContext;
Python3Parser.TrailerContext = TrailerContext;
Python3Parser.SubscriptlistContext = SubscriptlistContext;
Python3Parser.Subscript_Context = Subscript_Context;
Python3Parser.SliceopContext = SliceopContext;
Python3Parser.ExprlistContext = ExprlistContext;
Python3Parser.TestlistContext = TestlistContext;
Python3Parser.DictorsetmakerContext = DictorsetmakerContext;
Python3Parser.ClassdefContext = ClassdefContext;
Python3Parser.ArglistContext = ArglistContext;
Python3Parser.ArgumentContext = ArgumentContext;
Python3Parser.Comp_iterContext = Comp_iterContext;
Python3Parser.Comp_forContext = Comp_forContext;
Python3Parser.Comp_ifContext = Comp_ifContext;
Python3Parser.Encoding_declContext = Encoding_declContext;
Python3Parser.Yield_exprContext = Yield_exprContext;
Python3Parser.Yield_argContext = Yield_argContext;

},{"./Python3ParserListener.js":153,"./Python3ParserVisitor.js":154,"antlr4":42}],153:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/Python3Parser.g4 by ANTLR 4.9.2
// jshint ignore: start
// This class defines a complete listener for a parse tree produced by Python3Parser.
class Python3ParserListener extends _antlr.default.tree.ParseTreeListener {
  // Enter a parse tree produced by Python3Parser#single_input.
  enterSingle_input(ctx) {} // Exit a parse tree produced by Python3Parser#single_input.


  exitSingle_input(ctx) {} // Enter a parse tree produced by Python3Parser#file_input.


  enterFile_input(ctx) {} // Exit a parse tree produced by Python3Parser#file_input.


  exitFile_input(ctx) {} // Enter a parse tree produced by Python3Parser#eval_input.


  enterEval_input(ctx) {} // Exit a parse tree produced by Python3Parser#eval_input.


  exitEval_input(ctx) {} // Enter a parse tree produced by Python3Parser#decorator.


  enterDecorator(ctx) {} // Exit a parse tree produced by Python3Parser#decorator.


  exitDecorator(ctx) {} // Enter a parse tree produced by Python3Parser#decorators.


  enterDecorators(ctx) {} // Exit a parse tree produced by Python3Parser#decorators.


  exitDecorators(ctx) {} // Enter a parse tree produced by Python3Parser#decorated.


  enterDecorated(ctx) {} // Exit a parse tree produced by Python3Parser#decorated.


  exitDecorated(ctx) {} // Enter a parse tree produced by Python3Parser#async_funcdef.


  enterAsync_funcdef(ctx) {} // Exit a parse tree produced by Python3Parser#async_funcdef.


  exitAsync_funcdef(ctx) {} // Enter a parse tree produced by Python3Parser#funcdef.


  enterFuncdef(ctx) {} // Exit a parse tree produced by Python3Parser#funcdef.


  exitFuncdef(ctx) {} // Enter a parse tree produced by Python3Parser#parameters.


  enterParameters(ctx) {} // Exit a parse tree produced by Python3Parser#parameters.


  exitParameters(ctx) {} // Enter a parse tree produced by Python3Parser#typedargslist.


  enterTypedargslist(ctx) {} // Exit a parse tree produced by Python3Parser#typedargslist.


  exitTypedargslist(ctx) {} // Enter a parse tree produced by Python3Parser#tfpdef.


  enterTfpdef(ctx) {} // Exit a parse tree produced by Python3Parser#tfpdef.


  exitTfpdef(ctx) {} // Enter a parse tree produced by Python3Parser#varargslist.


  enterVarargslist(ctx) {} // Exit a parse tree produced by Python3Parser#varargslist.


  exitVarargslist(ctx) {} // Enter a parse tree produced by Python3Parser#vfpdef.


  enterVfpdef(ctx) {} // Exit a parse tree produced by Python3Parser#vfpdef.


  exitVfpdef(ctx) {} // Enter a parse tree produced by Python3Parser#stmt.


  enterStmt(ctx) {} // Exit a parse tree produced by Python3Parser#stmt.


  exitStmt(ctx) {} // Enter a parse tree produced by Python3Parser#simple_stmt.


  enterSimple_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#simple_stmt.


  exitSimple_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#small_stmt.


  enterSmall_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#small_stmt.


  exitSmall_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#expr_stmt.


  enterExpr_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#expr_stmt.


  exitExpr_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#annassign.


  enterAnnassign(ctx) {} // Exit a parse tree produced by Python3Parser#annassign.


  exitAnnassign(ctx) {} // Enter a parse tree produced by Python3Parser#testlist_star_expr.


  enterTestlist_star_expr(ctx) {} // Exit a parse tree produced by Python3Parser#testlist_star_expr.


  exitTestlist_star_expr(ctx) {} // Enter a parse tree produced by Python3Parser#augassign.


  enterAugassign(ctx) {} // Exit a parse tree produced by Python3Parser#augassign.


  exitAugassign(ctx) {} // Enter a parse tree produced by Python3Parser#del_stmt.


  enterDel_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#del_stmt.


  exitDel_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#pass_stmt.


  enterPass_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#pass_stmt.


  exitPass_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#flow_stmt.


  enterFlow_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#flow_stmt.


  exitFlow_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#break_stmt.


  enterBreak_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#break_stmt.


  exitBreak_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#continue_stmt.


  enterContinue_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#continue_stmt.


  exitContinue_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#return_stmt.


  enterReturn_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#return_stmt.


  exitReturn_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#yield_stmt.


  enterYield_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#yield_stmt.


  exitYield_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#raise_stmt.


  enterRaise_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#raise_stmt.


  exitRaise_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#import_stmt.


  enterImport_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#import_stmt.


  exitImport_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#import_name.


  enterImport_name(ctx) {} // Exit a parse tree produced by Python3Parser#import_name.


  exitImport_name(ctx) {} // Enter a parse tree produced by Python3Parser#import_from.


  enterImport_from(ctx) {} // Exit a parse tree produced by Python3Parser#import_from.


  exitImport_from(ctx) {} // Enter a parse tree produced by Python3Parser#import_as_name.


  enterImport_as_name(ctx) {} // Exit a parse tree produced by Python3Parser#import_as_name.


  exitImport_as_name(ctx) {} // Enter a parse tree produced by Python3Parser#dotted_as_name.


  enterDotted_as_name(ctx) {} // Exit a parse tree produced by Python3Parser#dotted_as_name.


  exitDotted_as_name(ctx) {} // Enter a parse tree produced by Python3Parser#import_as_names.


  enterImport_as_names(ctx) {} // Exit a parse tree produced by Python3Parser#import_as_names.


  exitImport_as_names(ctx) {} // Enter a parse tree produced by Python3Parser#dotted_as_names.


  enterDotted_as_names(ctx) {} // Exit a parse tree produced by Python3Parser#dotted_as_names.


  exitDotted_as_names(ctx) {} // Enter a parse tree produced by Python3Parser#dotted_name.


  enterDotted_name(ctx) {} // Exit a parse tree produced by Python3Parser#dotted_name.


  exitDotted_name(ctx) {} // Enter a parse tree produced by Python3Parser#global_stmt.


  enterGlobal_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#global_stmt.


  exitGlobal_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#nonlocal_stmt.


  enterNonlocal_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#nonlocal_stmt.


  exitNonlocal_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#assert_stmt.


  enterAssert_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#assert_stmt.


  exitAssert_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#compound_stmt.


  enterCompound_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#compound_stmt.


  exitCompound_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#async_stmt.


  enterAsync_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#async_stmt.


  exitAsync_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#if_stmt.


  enterIf_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#if_stmt.


  exitIf_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#while_stmt.


  enterWhile_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#while_stmt.


  exitWhile_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#for_stmt.


  enterFor_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#for_stmt.


  exitFor_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#try_stmt.


  enterTry_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#try_stmt.


  exitTry_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#with_stmt.


  enterWith_stmt(ctx) {} // Exit a parse tree produced by Python3Parser#with_stmt.


  exitWith_stmt(ctx) {} // Enter a parse tree produced by Python3Parser#with_item.


  enterWith_item(ctx) {} // Exit a parse tree produced by Python3Parser#with_item.


  exitWith_item(ctx) {} // Enter a parse tree produced by Python3Parser#except_clause.


  enterExcept_clause(ctx) {} // Exit a parse tree produced by Python3Parser#except_clause.


  exitExcept_clause(ctx) {} // Enter a parse tree produced by Python3Parser#suite.


  enterSuite(ctx) {} // Exit a parse tree produced by Python3Parser#suite.


  exitSuite(ctx) {} // Enter a parse tree produced by Python3Parser#test.


  enterTest(ctx) {} // Exit a parse tree produced by Python3Parser#test.


  exitTest(ctx) {} // Enter a parse tree produced by Python3Parser#test_nocond.


  enterTest_nocond(ctx) {} // Exit a parse tree produced by Python3Parser#test_nocond.


  exitTest_nocond(ctx) {} // Enter a parse tree produced by Python3Parser#lambdef.


  enterLambdef(ctx) {} // Exit a parse tree produced by Python3Parser#lambdef.


  exitLambdef(ctx) {} // Enter a parse tree produced by Python3Parser#lambdef_nocond.


  enterLambdef_nocond(ctx) {} // Exit a parse tree produced by Python3Parser#lambdef_nocond.


  exitLambdef_nocond(ctx) {} // Enter a parse tree produced by Python3Parser#or_test.


  enterOr_test(ctx) {} // Exit a parse tree produced by Python3Parser#or_test.


  exitOr_test(ctx) {} // Enter a parse tree produced by Python3Parser#and_test.


  enterAnd_test(ctx) {} // Exit a parse tree produced by Python3Parser#and_test.


  exitAnd_test(ctx) {} // Enter a parse tree produced by Python3Parser#not_test.


  enterNot_test(ctx) {} // Exit a parse tree produced by Python3Parser#not_test.


  exitNot_test(ctx) {} // Enter a parse tree produced by Python3Parser#comparison.


  enterComparison(ctx) {} // Exit a parse tree produced by Python3Parser#comparison.


  exitComparison(ctx) {} // Enter a parse tree produced by Python3Parser#comp_op.


  enterComp_op(ctx) {} // Exit a parse tree produced by Python3Parser#comp_op.


  exitComp_op(ctx) {} // Enter a parse tree produced by Python3Parser#star_expr.


  enterStar_expr(ctx) {} // Exit a parse tree produced by Python3Parser#star_expr.


  exitStar_expr(ctx) {} // Enter a parse tree produced by Python3Parser#expr.


  enterExpr(ctx) {} // Exit a parse tree produced by Python3Parser#expr.


  exitExpr(ctx) {} // Enter a parse tree produced by Python3Parser#xor_expr.


  enterXor_expr(ctx) {} // Exit a parse tree produced by Python3Parser#xor_expr.


  exitXor_expr(ctx) {} // Enter a parse tree produced by Python3Parser#and_expr.


  enterAnd_expr(ctx) {} // Exit a parse tree produced by Python3Parser#and_expr.


  exitAnd_expr(ctx) {} // Enter a parse tree produced by Python3Parser#shift_expr.


  enterShift_expr(ctx) {} // Exit a parse tree produced by Python3Parser#shift_expr.


  exitShift_expr(ctx) {} // Enter a parse tree produced by Python3Parser#arith_expr.


  enterArith_expr(ctx) {} // Exit a parse tree produced by Python3Parser#arith_expr.


  exitArith_expr(ctx) {} // Enter a parse tree produced by Python3Parser#term.


  enterTerm(ctx) {} // Exit a parse tree produced by Python3Parser#term.


  exitTerm(ctx) {} // Enter a parse tree produced by Python3Parser#factor.


  enterFactor(ctx) {} // Exit a parse tree produced by Python3Parser#factor.


  exitFactor(ctx) {} // Enter a parse tree produced by Python3Parser#power.


  enterPower(ctx) {} // Exit a parse tree produced by Python3Parser#power.


  exitPower(ctx) {} // Enter a parse tree produced by Python3Parser#atom_expr.


  enterAtom_expr(ctx) {} // Exit a parse tree produced by Python3Parser#atom_expr.


  exitAtom_expr(ctx) {} // Enter a parse tree produced by Python3Parser#atom.


  enterAtom(ctx) {} // Exit a parse tree produced by Python3Parser#atom.


  exitAtom(ctx) {} // Enter a parse tree produced by Python3Parser#testlist_comp.


  enterTestlist_comp(ctx) {} // Exit a parse tree produced by Python3Parser#testlist_comp.


  exitTestlist_comp(ctx) {} // Enter a parse tree produced by Python3Parser#trailer.


  enterTrailer(ctx) {} // Exit a parse tree produced by Python3Parser#trailer.


  exitTrailer(ctx) {} // Enter a parse tree produced by Python3Parser#subscriptlist.


  enterSubscriptlist(ctx) {} // Exit a parse tree produced by Python3Parser#subscriptlist.


  exitSubscriptlist(ctx) {} // Enter a parse tree produced by Python3Parser#subscript_.


  enterSubscript_(ctx) {} // Exit a parse tree produced by Python3Parser#subscript_.


  exitSubscript_(ctx) {} // Enter a parse tree produced by Python3Parser#sliceop.


  enterSliceop(ctx) {} // Exit a parse tree produced by Python3Parser#sliceop.


  exitSliceop(ctx) {} // Enter a parse tree produced by Python3Parser#exprlist.


  enterExprlist(ctx) {} // Exit a parse tree produced by Python3Parser#exprlist.


  exitExprlist(ctx) {} // Enter a parse tree produced by Python3Parser#testlist.


  enterTestlist(ctx) {} // Exit a parse tree produced by Python3Parser#testlist.


  exitTestlist(ctx) {} // Enter a parse tree produced by Python3Parser#dictorsetmaker.


  enterDictorsetmaker(ctx) {} // Exit a parse tree produced by Python3Parser#dictorsetmaker.


  exitDictorsetmaker(ctx) {} // Enter a parse tree produced by Python3Parser#classdef.


  enterClassdef(ctx) {} // Exit a parse tree produced by Python3Parser#classdef.


  exitClassdef(ctx) {} // Enter a parse tree produced by Python3Parser#arglist.


  enterArglist(ctx) {} // Exit a parse tree produced by Python3Parser#arglist.


  exitArglist(ctx) {} // Enter a parse tree produced by Python3Parser#argument.


  enterArgument(ctx) {} // Exit a parse tree produced by Python3Parser#argument.


  exitArgument(ctx) {} // Enter a parse tree produced by Python3Parser#comp_iter.


  enterComp_iter(ctx) {} // Exit a parse tree produced by Python3Parser#comp_iter.


  exitComp_iter(ctx) {} // Enter a parse tree produced by Python3Parser#comp_for.


  enterComp_for(ctx) {} // Exit a parse tree produced by Python3Parser#comp_for.


  exitComp_for(ctx) {} // Enter a parse tree produced by Python3Parser#comp_if.


  enterComp_if(ctx) {} // Exit a parse tree produced by Python3Parser#comp_if.


  exitComp_if(ctx) {} // Enter a parse tree produced by Python3Parser#encoding_decl.


  enterEncoding_decl(ctx) {} // Exit a parse tree produced by Python3Parser#encoding_decl.


  exitEncoding_decl(ctx) {} // Enter a parse tree produced by Python3Parser#yield_expr.


  enterYield_expr(ctx) {} // Exit a parse tree produced by Python3Parser#yield_expr.


  exitYield_expr(ctx) {} // Enter a parse tree produced by Python3Parser#yield_arg.


  enterYield_arg(ctx) {} // Exit a parse tree produced by Python3Parser#yield_arg.


  exitYield_arg(ctx) {}

}

exports.default = Python3ParserListener;

},{"antlr4":42}],154:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated from grammars/Python3Parser.g4 by ANTLR 4.9.2
// jshint ignore: start
// This class defines a complete generic visitor for a parse tree produced by Python3Parser.
class Python3ParserVisitor extends _antlr.default.tree.ParseTreeVisitor {
  // Visit a parse tree produced by Python3Parser#single_input.
  visitSingle_input(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#file_input.


  visitFile_input(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#eval_input.


  visitEval_input(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#decorator.


  visitDecorator(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#decorators.


  visitDecorators(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#decorated.


  visitDecorated(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#async_funcdef.


  visitAsync_funcdef(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#funcdef.


  visitFuncdef(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#parameters.


  visitParameters(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#typedargslist.


  visitTypedargslist(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#tfpdef.


  visitTfpdef(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#varargslist.


  visitVarargslist(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#vfpdef.


  visitVfpdef(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#stmt.


  visitStmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#simple_stmt.


  visitSimple_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#small_stmt.


  visitSmall_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#expr_stmt.


  visitExpr_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#annassign.


  visitAnnassign(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#testlist_star_expr.


  visitTestlist_star_expr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#augassign.


  visitAugassign(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#del_stmt.


  visitDel_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#pass_stmt.


  visitPass_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#flow_stmt.


  visitFlow_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#break_stmt.


  visitBreak_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#continue_stmt.


  visitContinue_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#return_stmt.


  visitReturn_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#yield_stmt.


  visitYield_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#raise_stmt.


  visitRaise_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#import_stmt.


  visitImport_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#import_name.


  visitImport_name(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#import_from.


  visitImport_from(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#import_as_name.


  visitImport_as_name(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#dotted_as_name.


  visitDotted_as_name(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#import_as_names.


  visitImport_as_names(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#dotted_as_names.


  visitDotted_as_names(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#dotted_name.


  visitDotted_name(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#global_stmt.


  visitGlobal_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#nonlocal_stmt.


  visitNonlocal_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#assert_stmt.


  visitAssert_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#compound_stmt.


  visitCompound_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#async_stmt.


  visitAsync_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#if_stmt.


  visitIf_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#while_stmt.


  visitWhile_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#for_stmt.


  visitFor_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#try_stmt.


  visitTry_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#with_stmt.


  visitWith_stmt(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#with_item.


  visitWith_item(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#except_clause.


  visitExcept_clause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#suite.


  visitSuite(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#test.


  visitTest(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#test_nocond.


  visitTest_nocond(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#lambdef.


  visitLambdef(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#lambdef_nocond.


  visitLambdef_nocond(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#or_test.


  visitOr_test(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#and_test.


  visitAnd_test(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#not_test.


  visitNot_test(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#comparison.


  visitComparison(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#comp_op.


  visitComp_op(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#star_expr.


  visitStar_expr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#expr.


  visitExpr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#xor_expr.


  visitXor_expr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#and_expr.


  visitAnd_expr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#shift_expr.


  visitShift_expr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#arith_expr.


  visitArith_expr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#term.


  visitTerm(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#factor.


  visitFactor(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#power.


  visitPower(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#atom_expr.


  visitAtom_expr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#atom.


  visitAtom(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#testlist_comp.


  visitTestlist_comp(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#trailer.


  visitTrailer(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#subscriptlist.


  visitSubscriptlist(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#subscript_.


  visitSubscript_(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#sliceop.


  visitSliceop(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#exprlist.


  visitExprlist(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#testlist.


  visitTestlist(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#dictorsetmaker.


  visitDictorsetmaker(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#classdef.


  visitClassdef(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#arglist.


  visitArglist(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#argument.


  visitArgument(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#comp_iter.


  visitComp_iter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#comp_for.


  visitComp_for(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#comp_if.


  visitComp_if(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#encoding_decl.


  visitEncoding_decl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#yield_expr.


  visitYield_expr(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by Python3Parser#yield_arg.


  visitYield_arg(ctx) {
    return this.visitChildren(ctx);
  }

}

exports.default = Python3ParserVisitor;

},{"antlr4":42}]},{},[125]);
