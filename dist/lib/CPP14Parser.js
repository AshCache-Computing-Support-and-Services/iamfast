var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var CPP14Parser_exports = {};
__export(CPP14Parser_exports, {
  default: () => CPP14Parser
});
var import_antlr4 = __toESM(require("antlr4"), 1);
var import_CPP14ParserListener = __toESM(require("./CPP14ParserListener.js"), 1);
var import_CPP14ParserVisitor = __toESM(require("./CPP14ParserVisitor.js"), 1);
const serializedATN = [
  "\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786",
  "\u5964\x93\u0840		",
  "			\x07	",
  "\x07\b	\b			\n	\n\v	\v",
  "\f	\f\r	\r		",
  "				",
  "			",
  "				",
  "\x1B	\x1B		",
  '		 	 !	!"	"#',
  "	#$	$%	%&	&'	'(	()	)",
  "*	*+	+,	,-	-.	./	/0	0",
  "1	12	23	34	45	56	67	7",
  "8	89	9:	:;	;<	<=	=>	>",
  "?	?@	@A	AB	BC	CD	DE	E",
  "F	FG	GH	HI	IJ	JK	KL	L",
  "M	MN	NO	OP	PQ	QR	RS	S",
  "T	TU	UV	VW	WX	XY	YZ	Z",
  "[	[\\	\\]	]^	^_	_`	`a	a",
  "b	bc	cd	de	ef	fg	gh	h",
  "i	ij	jk	kl	lm	mn	no	o",
  "p	pq	qr	rs	st	tu	uv	v",
  "w	wx	xy	yz	z{	{|	|}	}",
  "~	~\x7F	\x7F\x80	\x80\x81	\x81",
  "\x82	\x82\x83	\x83\x84	\x84\x85	",
  "\x85\x86	\x86\x87	\x87\x88	\x88",
  "\x89	\x89\x8A	\x8A\x8B	\x8B\x8C	",
  "\x8C\x8D	\x8D\x8E	\x8E\x8F	\x8F",
  "\x90	\x90\x91	\x91\x92	\x92\x93	",
  "\x93\x94	\x94\x95	\x95\x96	\x96",
  "\x97	\x97\x98	\x98\x99	\x99\x9A	",
  "\x9A\x9B	\x9B\x9C	\x9C\x9D	\x9D",
  "\x9E	\x9E\x9F	\x9F\xA0	\xA0\xA1	",
  "\xA1\xA2	\xA2\xA3	\xA3\xA4	\xA4",
  "\xA5	\xA5\xA6	\xA6\xA7	\xA7\xA8	",
  "\xA8\xA9	\xA9\xAA	\xAA\xAB	\xAB",
  "\xAC	\xAC\xAD	\xAD\xAE	\xAE\xAF	",
  "\xAF\xB0	\xB0\xB1	\xB1\xB2	\xB2",
  "\xB3	\xB3\xB4	\xB4\xB5	\xB5\xB6	",
  "\xB6\xB7	\xB7\xB8	\xB8\xB9	\xB9",
  "\xBA	\xBA\xBB	\xBB\xBC	\xBC\xBD	",
  "\xBD\xBE	\xBE\xBF	\xBF\xC0	\xC0",
  "\u0182\n",
  "\u0187\n\r\u0188",
  "",
  "\u0192\n\u0196\n",
  "",
  "\u019F\n\u01A2",
  "\n\u01A6\n",
  "\x07\x07\x07\x07\x07",
  "\u01AE\n\x07\x07\x07\x07\x07",
  "\x07\x07\u01B5\n\x07\x07\x07\u01B8\n\x07",
  "\x07\x07\x07\u01BB\n\x07\f\x07\x07\u01BE\v",
  "\x07\b\b\b\u01C2\n\b\b\b	",
  "		\u01C8\n			\n\n\n\n",
  "\n\u01D0\n\n\n\u01D2\n\n\v\v\f",
  "\f\f\x07\f\u01D9\n\f\f\f\f\u01DC\v\f\f",
  "\f\u01DF\n\f\r\r\r\u01E3\n\r",
  "\u01E6\n\u01EA\n",
  "\u01ED\n",
  "\u01F4\n",
  "\u01F8\n\u01FB",
  "\n\u01FE\n",
  "\u0201\n",
  "\u0207\n\u020B\n",
  "\u020F\n",
  "",
  "\u021D",
  "\n\u0221\n",
  "\u0227\n",
  "\u022E",
  "\n",
  "\u0234\n\u0238\n",
  "\x07\u023C\n\f\u023F",
  "\v",
  "\u0246\n",
  "\u024B\n",
  "",
  "\u0258\n",
  "\u025F\n",
  "",
  "\u026B\n",
  "",
  "\u0275\n",
  "\u027A\n",
  "\u027E\n",
  "\u0285\n\u0288",
  "\n",
  "\u0290\n",
  "\u0294\n\u0297\n\x1B",
  "\x1B\x1B\x1B\x1B\x1B\u029E\n",
  "\x1B\x1B\x1B\x1B\x1B\x1B",
  "\x1B\u02A5\n\x1B\x07\x1B\u02A7\n\x1B\f\x1B\x1B\u02AA",
  "\v\x1B\u02AE\n",
  "\u02B2\n",
  "\u02B5\n\u02BA",
  "\n",
  "",
  "\u02C9\n  ",
  " \x07 \u02CE\n \f  \u02D1\v !!!\x07",
  '!\u02D6\n!\f!!\u02D9\v!"""\x07"\u02DE',
  '\n"\f""\u02E1\v"####\x07#\u02E7',
  "\n#\f##\u02EA\v#$$$$$\u02F0",
  "\n$%%%\x07%\u02F5\n%\f%%\u02F8\v%",
  "&&&\x07&\u02FD\n&\f&&\u0300\v&'",
  "''\x07'\u0305\n'\f''\u0308\v'(",
  "((\x07(\u030D\n(\f((\u0310\v())",
  ")\x07)\u0315\n)\f))\u0318\v)***\x07",
  "*\u031D\n*\f**\u0320\v*+++\x07+\u0325",
  "\n+\f++\u0328\v+,,,,,",
  ",,\u0330\n,-------\u0338",
  "\n-..///\x07/\u033F\n/\f//\u0342",
  "\v/001111\u0349\n11",
  "111111\u0351\n11\u0353\n1",
  "22\u0356\n222222\u035C\n2",
  "22233\u0362\n33344",
  "4\u0368\n44455\u036D\n5\r55\u036E",
  "66666666\u0378\n66",
  "666666\u0380\n6777\u0384",
  "\n7777777\u038B\n77\u038D",
  "\n7888888888",
  "8888888888\u03A1",
  "\n8888\u03A5\n88888",
  "8\u03AB\n88888\u03B0\n899",
  "9\u03B4\n9::\u03B7\n::::;",
  ";;\u03BE\n;<<<<<<\u03C5\n",
  "<<<<\u03C9\n<<<==>",
  ">\u03D0\n>\r>>\u03D1?????",
  "?????\u03DD\n?@@@@",
  "@@@@@\u03E7\n@AAAA\u03EC",
  "\nAAAAABB\u03F3\nBB",
  "B\u03F6\nBBBBB\u03FB\nBBB",
  "BB\u0400\nBCCCCCCC",
  "CDDEEEFFFF",
  "FFF\u0415\nFGG\u0418\nG\rGG\u0419",
  "GG\u041D\nGHHIIJJK",
  "KKK\u0428\nKLLLLL\u042E\n",
  "LMM\u0431\nM\rMM\u0432MM\u0436\nM",
  "NN\u0439\nN\rNN\u043ANN\u043E\nNO",
  "OPPQQ\u0445\nQQQQQ",
  "QQQQ\u044E\nQQQ\u0451\nQ\rQQ\u0452",
  "QQ\u0456\nQQQQ\u045A\nQQQ",
  "Q\u045E\nQQQQ\u0462\nQQQQ",
  "Q\u0467\nQQ\x07Q\u046A\nQ\fQQ\u046D\vQ",
  "QQQQ\u0472\nQQQQQQ\u0478",
  "\nQRRRRR\u047E\nRSS",
  "SSS\u0484\nSSSTTT\u048A\n",
  "TTT\u048D\nTTTTTT\u0493\n",
  "TTTT\u0497\nTTTT\u049B\nT",
  "TT\u049E\nTUUVVVVV\u04A6",
  "\nVV\u04A8\nVVVWWW\u04AE\nW",
  "WW\u04B1\nWWW\u04B4\nWWW\u04B7\nW",
  "XXX\u04BB\nXXXX\u04BF\nXX",
  "XYYY\u04C5\nYZZZ[[",
  "[\x07[\u04CD\n[\f[[\u04D0\v[\\\\\\",
  "\\\u04D5\n\\]]^^^\u04DB\n^_",
  "_``\u04E0\n`````\u04E5\n`",
  "```\u04E9\n```aabb",
  "bbbbcc\u04F6\ncccd",
  "dd\u04FC\ndddd\u0500\nddd",
  "dee\u0506\neeeee\u050B\ne",
  "eeeffffffg",
  "gggg\u051A\ngggg\u051E\ng",
  "hh\u0521\nh\rhh\u0522iiii\u0528",
  "\niiiii\u052D\nijjj",
  "jj\u0533\njjj\u0536\njjjk",
  "kk\x07k\u053D\nk\fkk\u0540\vkkk\u0543",
  "\nkllll\u0548\nllll\u054C",
  "\nlmmnnn\u0552\nnnn",
  "oo\u0557\no\roo\u0558pppp",
  "pppppppppp\u0568",
  "\np\rpp\u0569p\u056C\npqqq\x07q\u0571",
  "\nq\fqq\u0574\vqrrr\u0578\nrs",
  "sssss\u057F\nsttt\u0583\n",
  "t\x07t\u0585\nt\ftt\u0588\vtttu",
  "uuu\u058F\nuuuuuu\u0595\n",
  "uuuuuu\u059B\nuuuu\u059F",
  "\nuu\u05A1\nu\x07u\u05A3\nu\fuu\u05A6\vuv",
  "vv\u05AA\nvvvv\u05AE\nvvv\u05B1",
  "\nvvv\u05B4\nvvv\u05B7\nvww",
  "ww\u05BC\nwxxx\u05C0\nxxx\u05C3",
  "\nxxxx\u05C7\nxxx\u05CA\nxx\u05CC",
  "\nxyy\u05CF\ny\ryy\u05D0zz{",
  "{||\u05D8\n|||}}}\u05DE\n",
  "}~~~\u05E2\n~~~~~~\u05E8",
  "\n~\x7F\x7F\x7F\u05EC\n\x7F\r\x7F",
  "\x7F\u05ED\x7F\x7F\u05F1\n\x7F\x7F\u05F3",
  "\n\x7F\x80\x80\x80\x80\x80",
  "\u05F9\n\x80\x80\x80\x80\u05FD\n\x80",
  "\x80\x80\x80\x80\x80\u0603\n\x80",
  "\x80\x80\x80\x80\x80\x80",
  "\u060A\n\x80\x80\x80\x80\u060E\n\x80",
  "\x80\u0610\n\x80\x07\x80\u0612\n\x80\f\x80\x80\u0615",
  "\v\x80\x81\x07\x81\u0618\n\x81\f\x81\x81",
  "\u061B\v\x81\x81\x81\x82\x82",
  "\x82\x82\x82\x82\x82\x82\u0626",
  "\n\x82\x82\x82\x82\u062A\n\x82\x82",
  "\u062C\n\x82\x07\x82\u062E\n\x82\f\x82\x82\u0631\v",
  "\x82\x83\x83\x83\u0635\n\x83\x83",
  "\x83\u0638\n\x83\x84\x84\x84\x07",
  "\x84\u063D\n\x84\f\x84\x84\u0640\v\x84\x85",
  "\x85\u0643\n\x85\x85\x85\x85",
  "\x85\u0648\n\x85\x85\u064A\n\x85\x85\x85",
  "\x85\u064E\n\x85\x86\x86\u0651\n\x86",
  "\x86\x86\u0654\n\x86\x86\x86\x86",
  "\u0658\n\x86\x86\x86\x87\x87\u065D",
  "\n\x87\x87\x87\x87\x87\x87",
  "\x87\u0664\n\x87\x88\x88\x88",
  "\x88\x88\x88\u066B\n\x88\x89\x89",
  "\x89\x89\u0670\n\x89\x8A\x8A",
  "\x8A\u0674\n\x8A\x8B\x8B\x8B\u0678\n\x8B",
  "\x8B\x8B\x8B\x8B\u067D\n\x8B\x07",
  "\x8B\u067F\n\x8B\f\x8B\x8B\u0682\v\x8B\x8C",
  "\x8C\x8C\x8C\u0687\n\x8C\x8C\u0689",
  "\n\x8C\x8C\x8C\x8D\x8D\x8D",
  "\u068F\n\x8D\x8E\x8E\x8E\x8E\u0694",
  "\n\x8E\x8E\x8E\x8F\x8F\x8F",
  "\u069A\n\x8F\x8F\x8F\x8F\u069E\n\x8F",
  "\x8F\u06A0\n\x8F\x8F\x8F\u06A3\n\x8F\x8F",
  "\x8F\x8F\u06A7\n\x8F\x8F\x8F",
  "\x8F\u06AB\n\x8F\x8F\u06AD\n\x8F\x8F\u06AF\n\x8F",
  "\x90\x90\u06B2\n\x90\x90\x90",
  "\x91\x91\x92\x92\x93\x93",
  "\x93\x93\x93\u06BE\n\x93\r\x93\x93\u06BF",
  "\x94\x94\u06C3\n\x94\x94\x94\u06C6",
  "\n\x94\x94\x94\u06C9\n\x94\x94\x94",
  "\x94\x94\x94\x94\x94\x94",
  "\u06D2\n\x94\x95\x95\x95\x07\x95\u06D7",
  "\n\x95\f\x95\x95\u06DA\v\x95\x96\x96",
  "\x96\u06DE\n\x96\x96\x96\u06E1\n\x96",
  "\x96\x96\u06E4\n\x96\x96\u06E6\n\x96\x96",
  "\x96\u06E9\n\x96\x96\x96\u06EC\n\x96",
  "\x96\x96\x96\u06F0\n\x96\x97\x97",
  "\u06F3\n\x97\r\x97\x97\u06F4\x98\x98",
  "\x99\x99\x99\x99\x9A\x9A",
  "\x9A\x9B\x9B\x9B\u0702\n\x9B\x9B",
  "\x9B\x9B\x9B\u0707\n\x9B\x07\x9B\u0709",
  "\n\x9B\f\x9B\x9B\u070C\v\x9B\x9C\x9C",
  "\u070F\n\x9C\x9C\x9C\x9C\x9C\u0714",
  "\n\x9C\x9C\x9C\x9C\x9C\u0719\n\x9C",
  "\x9C\x9C\x9C\u071D\n\x9C\x9D",
  "\x9D\u0720\n\x9D\x9D\x9D\x9D\u0724\n\x9D",
  "\x9E\x9E\x9F\x9F\xA0\xA0",
  "\xA0\xA1\xA1\xA1\u072F\n\xA1",
  "\xA2\xA2\xA2\u0733\n\xA2\xA3\xA3",
  "\xA3\xA4\xA4\xA4\u073A\n\xA4",
  "\xA4\xA4\xA4\xA4\u073F\n\xA4\x07\xA4",
  "\u0741\n\xA4\f\xA4\xA4\u0744\v\xA4\xA5",
  "\xA5\xA5\xA5\u0749\n\xA5\xA5\xA5",
  "\xA5\u074D\n\xA5\xA6\xA6\xA6\u0751",
  "\n\xA6\xA7\xA7\xA7\xA8\xA8",
  "\xA8\xA8\xA8\u075A\n\xA8\xA9",
  "\xA9\xA9\xA9\xA9\xA9\xAA",
  "\xAA\xAA\x07\xAA\u0765\n\xAA\f\xAA\xAA\u0768",
  "\v\xAA\xAB\xAB\xAB\u076C\n\xAB",
  "\xAC\xAC\xAC\xAC\xAC\xAC\u0773",
  "\n\xAC\xAC\xAC\xAC\u0777\n\xAC\xAC",
  "\xAC\u077A\n\xAC\xAC\xAC\u077D\n\xAC",
  "\xAC\xAC\u0780\n\xAC\xAC\xAC\xAC",
  "\u0784\n\xAC\xAD\xAD\xAD\xAD\u0789",
  "\n\xAD\xAD\xAD\xAE\xAE\xAE",
  "\xAE\u0790\n\xAE\xAE\xAE\xAE\u0794",
  "\n\xAE\xAE\xAE\xAE\u0798\n\xAE\xAF",
  "\xAF\xB0\xB0\xB0\u079E\n\xB0",
  "\xB0\xB0\xB0\xB0\u07A3\n\xB0\x07\xB0",
  "\u07A5\n\xB0\f\xB0\xB0\u07A8\v\xB0\xB1",
  "\xB1\xB1\xB1\u07AD\n\xB1\xB2\xB2",
  "\xB2\xB2\xB2\u07B3\n\xB2\xB2",
  "\xB2\u07B6\n\xB2\xB3\xB3\u07B9\n\xB3\xB3",
  "\xB3\xB3\xB4\xB4\xB4\xB4",
  "\xB4\xB5\xB5\xB5\xB5\xB6",
  "\xB6\xB6\u07C9\n\xB6\xB6\xB6",
  "\xB6\xB7\xB7\u07CF\n\xB7\r\xB7\xB7\u07D0",
  "\xB8\xB8\xB8\xB8\xB8\xB8",
  "\xB9\xB9\u07DA\n\xB9\xB9\xB9",
  "\xB9\xB9\u07DF\n\xB9\xB9\xB9\u07E2\n\xB9",
  "\xBA\xBA\xBA\u07E6\n\xBA\xBB",
  "\xBB\xBB\u07EA\n\xBB\xBC\xBC\xBC",
  "\xBC\u07EF\n\xBC\xBC\xBC\xBD",
  "\xBD\xBD\u07F5\n\xBD\xBD\xBD\xBD",
  "\xBD\u07FA\n\xBD\x07\xBD\u07FC\n\xBD\f\xBD\xBD",
  "\u07FF\v\xBD\xBE\xBE\xBE\xBE",
  "\xBE\xBE\xBE\u0807\n\xBE\xBF\xBF",
  "\xBF\xBF\u080C\n\xBF\xBF\xBF",
  "\xBF\xBF\u0811\n\xBF\xBF\xBF\xBF",
  "\xBF\xBF\xBF\xBF\xBF\xBF",
  "\xBF\xBF\xBF\xBF\xBF\xBF",
  "\xBF\xBF\xBF\xBF\xBF\xBF",
  "\xBF\xBF\xBF\xBF\xBF\xBF",
  "\xBF\xBF\xBF\xBF\xBF\xBF",
  "\xBF\xBF\xBF\xBF\xBF\xBF",
  "\xBF\xBF\xBF\u083C\n\xBF\xC0",
  "\xC0\xC0\u0419\b\f 4\xE8\xFE\u0102\xC1",
  "\b\n\f ",
  '"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\x80\x82\x84',
  "\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C",
  "\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4",
  "\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC",
  "\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\xE4",
  "\xE6\xE8\xEA\xEC\xEE\xF0\xF2\xF4\xF6\xF8\xFA\xFC",
  "\xFE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114",
  "\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C",
  "\u012E\u0130\u0132\u0134\u0136\u0138\u013A\u013C\u013E\u0140\u0142\u0144",
  "\u0146\u0148\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C",
  "\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174",
  "\u0176\u0178\u017A\u017C\u017Eccgg",
  "!!<<CC~~\x83\x83z{",
  "]_cf}}\x84\x84_a]^",
  "hivwtuggjs\x07&&11;;AAHH",
  "$$..RR00>>??PPDD",
  "W\\ccxxTT",
  "((778:	\u0929",
  "\u0181\u0191",
  "\u0195\b\u01A1",
  "\n\u01A3\f\u01A9",
  "\u01BF\u01C5",
  "\u01D1\u01D3",
  "\u01D5\u01E2",
  "\u01E9\u01EC",
  '\u01F1 \u0220"\u0240',
  "$\u0242&\u0257",
  "(\u0274*\u0276",
  ",\u0279.\u0289",
  "0\u028D2\u0296",
  "4\u02986\u02B18\u02B4",
  ":\u02BD<\u02C8",
  ">\u02CA@\u02D2",
  "B\u02DAD\u02E2",
  "F\u02EFH\u02F1",
  "J\u02F9L\u0301N\u0309",
  "P\u0311R\u0319",
  "T\u0321V\u0329",
  "X\u0337Z\u0339",
  "\\\u033B^\u0343",
  "`\u0352b\u0355d\u0361",
  "f\u0365h\u036C",
  "j\u037Fl\u038C",
  "n\u03AFp\u03B3",
  "r\u03B6t\u03BD",
  "v\u03C8x\u03CCz\u03CF",
  "|\u03DC~\u03E6",
  "\x80\u03E8\x82\u03FF",
  "\x84\u0401\x86\u0409",
  "\x88\u040B\x8A\u0414",
  "\x8C\u0417\x8E\u041E",
  "\x90\u0420\x92\u0422",
  "\x94\u0427\x96\u042D",
  "\x98\u0430\x9A\u0438",
  "\x9C\u043F\x9E\u0441",
  "\xA0\u0477\xA2\u047D",
  "\xA4\u047F\xA6\u049D",
  "\xA8\u049F\xAA\u04A1",
  "\xAC\u04AB\xAE\u04B8",
  "\xB0\u04C2\xB2\u04C6",
  "\xB4\u04C9\xB6\u04D1",
  "\xB8\u04D6\xBA\u04DA",
  "\xBC\u04DC\xBE\u04DF",
  "\xC0\u04EC\xC2\u04EE",
  "\xC4\u04F5\xC6\u04F9",
  "\xC8\u0505\xCA\u050F",
  "\xCC\u0515\xCE\u0520",
  "\xD0\u052C\xD2\u052E",
  "\xD4\u0539\xD6\u0547",
  "\xD8\u054D\xDA\u054F",
  "\xDC\u0556\xDE\u056B",
  "\xE0\u056D\xE2\u0575",
  "\xE4\u057E\xE6\u0586",
  "\xE8\u0594\xEA\u05A7",
  "\xEC\u05B8\xEE\u05CB",
  "\xF0\u05CE\xF2\u05D2",
  "\xF4\u05D4\xF6\u05D7",
  "\xF8\u05DB\xFA\u05E7",
  "\xFC\u05F2\xFE\u0602",
  "\u0100\u0619\u0102\u061E",
  "\u0104\u0632\u0106\u0639",
  "\u0108\u0642\u010A\u0650",
  "\u010C\u0663\u010E\u066A",
  "\u0110\u066F\u0112\u0673",
  "\u0114\u0675\u0116\u0683",
  "\u0118\u068E\u011A\u0690",
  "\u011C\u06AE\u011E\u06B1",
  "\u0120\u06B5\u0122\u06B7",
  "\u0124\u06BD\u0126\u06D1",
  "\u0128\u06D3\u012A\u06EF",
  "\u012C\u06F2\u012E\u06F6",
  "\u0130\u06F8\u0132\u06FC",
  "\u0134\u06FF\u0136\u070E",
  "\u0138\u0723\u013A\u0725",
  "\u013C\u0727\u013E\u0729",
  "\u0140\u072C\u0142\u0730",
  "\u0144\u0734\u0146\u0737",
  "\u0148\u0745\u014A\u0750",
  "\u014C\u0752\u014E\u0755",
  "\u0150\u075B\u0152\u0761",
  "\u0154\u076B\u0156\u0776",
  "\u0158\u0785\u015A\u0797",
  "\u015C\u0799\u015E\u079B",
  "\u0160\u07AC\u0162\u07AE",
  "\u0164\u07B8\u0166\u07BD",
  "\u0168\u07C2\u016A\u07C6",
  "\u016C\u07CE\u016E\u07D2",
  "\u0170\u07E1\u0172\u07E3",
  "\u0174\u07E9\u0176\u07EB",
  "\u0178\u07F2\u017A\u0806",
  "\u017C\u083B\u017E\u083D",
  "\u0180\u0182z>\u0181\u0180",
  "\u0181\u0182\u0182\u0183",
  "\u0183\u0184\x07\u0184",
  "\u0185\u0187\u017E\xC0\u0186\u0185",
  "\u0187\u0188\u0188\u0186",
  "\u0188\u0189\u0189\u0192",
  "\u018A\u0192\x07G\u018B\u018C\x07W",
  "\u018C\u018D\\/\u018D\u018E\x07X\u018E",
  "\u0192\u018F\u0192\u0190",
  "\u0192\b\u0191\u0186\u0191",
  "\u018A\u0191\u018B\u0191",
  "\u018F\u0191\u0190\u0192",
  "\u0193\u0196\b\u0194",
  "\u0196\n\u0195\u0193\u0195",
  "\u0194\u0196\x07\u0197",
  "\u01A2\x07\x86\u0198\u01A2\u014C\xA7\u0199",
  "\u01A2\u013E\xA0\u019A\u01A2\u014E\xA8\u019B",
  "\u019E\x07e\u019C\u019F\u0118\x8D\u019D",
  "\u019F\xA4S\u019E\u019C\u019E",
  "\u019D\u019F\u01A2\u01A0",
  "\u01A2\u015A\xAE\u01A1\u0197\u01A1",
  "\u0198\u01A1\u0199\u01A1",
  "\u019A\u01A1\u019B\u01A1",
  "\u01A0\u01A2	\u01A3",
  "\u01A5\f\x07\u01A4\u01A6\x07F\u01A5\u01A4",
  "\u01A5\u01A6\u01A6\u01A7",
  "\u01A7\u01A8\b\u01A8\v",
  "\u01A9\u01AD\b\x07\u01AA\u01AE",
  "\xA2R\u01AB\u01AE\xBA^\u01AC\u01AE",
  "\xA4S\u01AD\u01AA\u01AD\u01AB",
  "\u01AD\u01AC\u01AD\u01AE",
  "\u01AE\u01AF\u01AF\u01B0\x07",
  "\x81\u01B0\u01BC\u01B1\u01B7\f",
  "\u01B2\u01B8\x07\x86\u01B3\u01B5\x07",
  "F\u01B4\u01B3\u01B4\u01B5",
  "\u01B5\u01B6\u01B6\u01B8",
  "\u0158\xAD\u01B7\u01B2\u01B7\u01B4",
  "\u01B8\u01B9\u01B9\u01BB\x07",
  "\x81\u01BA\u01B1\u01BB\u01BE",
  "\u01BC\u01BA\u01BC\u01BD",
  "\u01BD\r\u01BE\u01BC",
  "\u01BF\u01C1	\u01C0\u01C2",
  "\u01C1\u01C0\u01C1\u01C2",
  "\u01C2\u01C3\u01C3\u01C4",
  "f4\u01C4\u01C5\u01C7\x07Y",
  "\u01C6\u01C8\n\u01C7\u01C6",
  "\u01C7\u01C8\u01C8\u01C9",
  "\u01C9\u01CA\x07Z\u01CA",
  "\u01CB\u01D2\f\u01CC\u01CF\v",
  "\u01CD\u01CE\x07|\u01CE\u01D0\f",
  "\u01CF\u01CD\u01CF\u01D0",
  "\u01D0\u01D2\u01D1\u01CB",
  "\u01D1\u01CC\u01D2",
  "\u01D3\u01D4	\u01D4",
  "\u01D5\u01DA\r\u01D6\u01D7\x07|\u01D7",
  "\u01D9\r\u01D8\u01D6\u01D9",
  "\u01DC\u01DA\u01D8\u01DA",
  "\u01DB\u01DB\u01DE\u01DC",
  "\u01DA\u01DD\u01DF\x07\x85\u01DE",
  "\u01DD\u01DE\u01DF\u01DF",
  "\u01E0\u01E3\u01E1",
  "\u01E3\u01E2\u01E0\u01E2",
  "\u01E1\u01E3\u01E4",
  "\u01E6\x07c\u01E5\u01E4\u01E5",
  "\u01E6\u01E6\u01E7\u01E7",
  "\u01EA\x07\x86\u01E8\u01EA\x07G\u01E9",
  "\u01E5\u01E9\u01E8\u01EA",
  "\x1B\u01EB\u01ED\x07c\u01EC",
  "\u01EB\u01EC\u01ED\u01ED",
  "\u01EE\u01EE\u01EF\x07\x86\u01EF",
  "\u01F0\u010E\x88\u01F0\u01F1",
  "\u01F3\x07W\u01F2\u01F4\u0104\x83\u01F3",
  "\u01F2\u01F3\u01F4\u01F4",
  "\u01F5\u01F5\u01F7\x07X\u01F6",
  "\u01F8\x071\u01F7\u01F6\u01F7",
  "\u01F8\u01F8\u01FA\u01F9",
  "\u01FB\u0174\xBB\u01FA\u01F9\u01FA",
  "\u01FB\u01FB\u01FD\u01FC",
  "\u01FE\xCEh\u01FD\u01FC\u01FD",
  "\u01FE\u01FE\u0200\u01FF",
  "\u0201\xECw\u0200\u01FF\u0200",
  "\u0201\u0201\u0202",
  "\u0203\b\u0203\u0221\u0204",
  "\u0207\xA0Q\u0205\u0207\u0162\xB2\u0206",
  "\u0204\u0206\u0205\u0207",
  "\u020E\u0208\u020A\x07W\u0209",
  "\u020B$\u020A\u0209\u020A",
  "\u020B\u020B\u020C\u020C",
  "\u020F\x07X\u020D\u020F\u0116\x8C\u020E",
  "\u0208\u020E\u020D\u020F",
  "\u0221\u0210\u0211	\u0211",
  "\u0212\x07h\u0212\u0213\xF8}\u0213\u0214",
  "\x07i\u0214\u0215\x07W\u0215\u0216",
  "\\/\u0216\u0217\x07X\u0217\u0221",
  '\u0218\u0219"\u0219\u021C\x07W',
  "\u021A\u021D\\/\u021B\u021D\xF8}\u021C\u021A",
  "\u021C\u021B\u021D\u021E",
  "\u021E\u021F\x07X\u021F\u0221",
  "\u0220\u0202\u0220\u0206",
  "\u0220\u0210\u0220\u0218",
  "\u0221\u023D\u0222\u0223",
  "\f	\u0223\u0226\x07Y\u0224\u0227\\",
  "/\u0225\u0227\u0116\x8C\u0226\u0224",
  "\u0226\u0225\u0227\u0228",
  "\u0228\u0229\x07Z\u0229\u023C",
  "\u022A\u022B\f\b\u022B\u022D\x07W",
  "\u022C\u022E$\u022D\u022C",
  "\u022D\u022E\u022E\u022F",
  "\u022F\u023C\x07X\u0230\u0231\f\u0231",
  "\u0237	\u0232\u0234\x07F\u0233\u0232",
  "\u0233\u0234\u0234\u0235",
  "\u0235\u0238\u0236\u0238",
  "&\u0237\u0233\u0237\u0236",
  "\u0238\u023C\u0239\u023A",
  "\f\u023A\u023C	\u023B\u0222",
  "\u023B\u022A\u023B\u0230",
  "\u023B\u0239\u023C\u023F",
  "\u023D\u023B\u023D\u023E",
  "\u023E!\u023F\u023D",
  "\u0240\u0241\x07M\u0241#",
  "\u0242\u0243\u0114\x8B\u0243%",
  "\u0244\u0246\f\x07\u0245\u0244",
  "\u0245\u0246\u0246\u024A",
  "\u0247\u0248\xA2R\u0248\u0249\x07\x81",
  "\u0249\u024B\u024A\u0247",
  "\u024A\u024B\u024B\u024C",
  "\u024C\u024D\x07e\u024D\u0258\xA2",
  "R\u024E\u024F\f\x07\u024F\u0250\x07F",
  "\u0250\u0251\u0158\xAD\u0251\u0252\x07\x81",
  "\u0252\u0253\x07e\u0253\u0254\xA2R\u0254",
  "\u0258\u0255\u0256\x07e\u0256",
  "\u0258\xA4S\u0257\u0245\u0257",
  "\u024E\u0257\u0255\u0258",
  "'\u0259\u0275 \u025A\u025F",
  "\x07z\u025B\u025F\x07{\u025C\u025F",
  "*\u025D\u025F\x07@\u025E\u025A",
  "\u025E\u025B\u025E\u025C",
  "\u025E\u025D\u025F\u0260",
  "\u0260\u0275(\u0261\u026A\x07@",
  "\u0262\u0263\x07W\u0263\u0264\xF8}",
  "\u0264\u0265\x07X\u0265\u026B",
  "\u0266\u0267\x07\x85\u0267\u0268\x07W",
  "\u0268\u0269\x07\x86\u0269\u026B\x07X",
  "\u026A\u0262\u026A\u0266",
  "\u026B\u0275\u026C\u026D\x07\r",
  "\u026D\u026E\x07W\u026E\u026F\xF8}\u026F",
  "\u0270\x07X\u0270\u0275\u0271",
  "\u0275:\u0272\u0275,\u0273\u0275",
  "8\u0274\u0259\u0274\u025E",
  "\u0274\u0261\u0274\u026C",
  "\u0274\u0271\u0274\u0272",
  "\u0274\u0273\u0275)",
  "\u0276\u0277	\u0277+",
  "\u0278\u027A\x07\x81\u0279\u0278",
  "\u0279\u027A\u027A\u027B",
  "\u027B\u027D\x073\u027C\u027E",
  ".\u027D\u027C\u027D\u027E",
  "\u027E\u0284\u027F\u0285",
  "0\u0280\u0281\x07W\u0281\u0282\xF8",
  "}\u0282\u0283\x07X\u0283\u0285",
  "\u0284\u027F\u0284\u0280",
  "\u0285\u0287\u0286\u02886",
  "\u0287\u0286\u0287\u0288",
  "\u0288-\u0289\u028A\x07W",
  "\u028A\u028B$\u028B\u028C\x07X\u028C",
  "/\u028D\u028F\x98M\u028E\u0290",
  "2\u028F\u028E\u028F\u0290",
  "\u02901\u0291\u0293",
  "\xEEx\u0292\u02942\u0293\u0292",
  "\u0293\u0294\u0294\u0297",
  "\u0295\u02974\x1B\u0296\u0291",
  "\u0296\u0295\u02973",
  "\u0298\u0299\b\x1B\u0299\u029A\x07",
  "Y\u029A\u029B\\/\u029B\u029D\x07Z",
  "\u029C\u029E\xCEh\u029D\u029C",
  "\u029D\u029E\u029E\u02A8",
  "\u029F\u02A0\f\u02A0\u02A1\x07Y\u02A1",
  "\u02A2^0\u02A2\u02A4\x07Z\u02A3\u02A5",
  "\xCEh\u02A4\u02A3\u02A4\u02A5",
  "\u02A5\u02A7\u02A6\u029F",
  "\u02A7\u02AA\u02A8\u02A6",
  "\u02A8\u02A9\u02A95",
  "\u02AA\u02A8\u02AB\u02AD\x07",
  "W\u02AC\u02AE$\u02AD\u02AC",
  "\u02AD\u02AE\u02AE\u02AF",
  "\u02AF\u02B2\x07X\u02B0\u02B2\u0116",
  "\x8C\u02B1\u02AB\u02B1\u02B0",
  "\u02B27\u02B3\u02B5\x07\x81",
  "\u02B4\u02B3\u02B4\u02B5",
  "\u02B5\u02B6\u02B6\u02B9\x07",
  "\u02B7\u02B8\x07Y\u02B8\u02BA\x07Z",
  "\u02B9\u02B7\u02B9\u02BA",
  "\u02BA\u02BB\u02BB\u02BC<",
  "\u02BC9\u02BD\u02BE\x074",
  "\u02BE\u02BF\x07W\u02BF\u02C0\\/\u02C0\u02C1",
  "\x07X\u02C1;\u02C2\u02C9",
  "(\u02C3\u02C4\x07W\u02C4\u02C5\xF8",
  "}\u02C5\u02C6\x07X\u02C6\u02C7<",
  "\u02C7\u02C9\u02C8\u02C2",
  "\u02C8\u02C3\u02C9=",
  "\u02CA\u02CF<\u02CB\u02CC	\x07\u02CC",
  "\u02CE<\u02CD\u02CB\u02CE",
  "\u02D1\u02CF\u02CD\u02CF",
  "\u02D0\u02D0?\u02D1",
  "\u02CF\u02D2\u02D7> \u02D3\u02D4",
  "	\b\u02D4\u02D6> \u02D5\u02D3",
  "\u02D6\u02D9\u02D7\u02D5",
  "\u02D7\u02D8\u02D8A",
  "\u02D9\u02D7\u02DA\u02DF@!",
  "\u02DB\u02DC		\u02DC\u02DE@!\u02DD\u02DB",
  "\u02DE\u02E1\u02DF\u02DD",
  "\u02DF\u02E0\u02E0C",
  "\u02E1\u02DF\u02E2\u02E8",
  'B"\u02E3\u02E4F$\u02E4\u02E5B"\u02E5',
  "\u02E7\u02E6\u02E3\u02E7",
  "\u02EA\u02E8\u02E6\u02E8",
  "\u02E9\u02E9E\u02EA",
  "\u02E8\u02EB\u02EC\x07i\u02EC",
  "\u02F0\x07i\u02ED\u02EE\x07h\u02EE\u02F0",
  "\x07h\u02EF\u02EB\u02EF\u02ED",
  "\u02F0G\u02F1\u02F6",
  "D#\u02F2\u02F3	\n\u02F3\u02F5D#",
  "\u02F4\u02F2\u02F5\u02F8",
  "\u02F6\u02F4\u02F6\u02F7",
  "\u02F7I\u02F8\u02F6",
  "\u02F9\u02FEH%\u02FA\u02FB	\v\u02FB\u02FD",
  "H%\u02FC\u02FA\u02FD\u0300",
  "\u02FE\u02FC\u02FE\u02FF",
  "\u02FFK\u0300\u02FE",
  "\u0301\u0306J&\u0302\u0303\x07c",
  "\u0303\u0305J&\u0304\u0302",
  "\u0305\u0308\u0306\u0304",
  "\u0306\u0307\u0307M",
  "\u0308\u0306\u0309\u030EL'\u030A",
  "\u030B\x07b\u030B\u030DL'\u030C\u030A",
  "\u030D\u0310\u030E\u030C",
  "\u030E\u030F\u030FO",
  "\u0310\u030E\u0311\u0316",
  "N(\u0312\u0313\x07d\u0313\u0315N(\u0314",
  "\u0312\u0315\u0318\u0316",
  "\u0314\u0316\u0317\u0317",
  "Q\u0318\u0316\u0319",
  "\u031EP)\u031A\u031B\x07x\u031B\u031D",
  "P)\u031C\u031A\u031D\u0320",
  "\u031E\u031C\u031E\u031F",
  "\u031FS\u0320\u031E",
  "\u0321\u0326R*\u0322\u0323\x07y",
  "\u0323\u0325R*\u0324\u0322\u0325",
  "\u0328\u0326\u0324\u0326",
  "\u0327\u0327U\u0328",
  "\u0326\u0329\u032FT+\u032A\u032B",
  "\x07\x7F\u032B\u032C\\/\u032C\u032D\x07",
  "\x80\u032D\u032EX-\u032E\u0330",
  "\u032F\u032A\u032F\u0330",
  "\u0330W\u0331\u0338V,",
  "\u0332\u0333T+\u0333\u0334Z.\u0334\u0335",
  "\u0112\x8A\u0335\u0338\u0336\u0338",
  "\u0172\xBA\u0337\u0331\u0337\u0332",
  "\u0337\u0336\u0338Y",
  "\u0339\u033A	\f\u033A[",
  "\u033B\u0340X-\u033C\u033D\x07|\u033D",
  "\u033FX-\u033E\u033C\u033F\u0342",
  "\u0340\u033E\u0340\u0341",
  "\u0341]\u0342\u0340",
  "\u0343\u0344V,\u0344_",
  "\u0345\u0353b2\u0346\u0353x=\u0347",
  "\u0349\xCEh\u0348\u0347\u0348",
  "\u0349\u0349\u0350\u034A",
  "\u0351d3\u034B\u0351f4\u034C\u0351j6",
  "\u034D\u0351n8\u034E\u0351v<\u034F\u0351",
  "\u0168\xB5\u0350\u034A\u0350\u034B",
  "\u0350\u034C\u0350\u034D",
  "\u0350\u034E\u0350\u034F",
  "\u0351\u0353\u0352\u0345",
  "\u0352\u0346\u0352\u0348",
  "\u0353a\u0354\u0356",
  "\xCEh\u0355\u0354\u0355\u0356",
  "\u0356\u035B\u0357\u035C\x07",
  "\x86\u0358\u0359\x07\u0359\u035C",
  "^0\u035A\u035C\x07\u035B\u0357",
  "\u035B\u0358\u035B\u035A",
  "\u035C\u035D\u035D\u035E\x07\x80",
  "\u035E\u035F`1\u035Fc",
  "\u0360\u0362\\/\u0361\u0360\u0361",
  "\u0362\u0362\u0363\u0363",
  "\u0364\x07\x82\u0364e\u0365",
  "\u0367\x07[\u0366\u0368h5\u0367\u0366",
  "\u0367\u0368\u0368\u0369",
  "\u0369\u036A\x07\\\u036Ag",
  "\u036B\u036D`1\u036C\u036B",
  "\u036D\u036E\u036E\u036C",
  "\u036E\u036F\u036Fi",
  "\u0370\u0371\x07-\u0371\u0372\x07W",
  "\u0372\u0373l7\u0373\u0374\x07X\u0374\u0377",
  '`1\u0375\u0376\x07"\u0376\u0378`1',
  "\u0377\u0375\u0377\u0378",
  "\u0378\u0380\u0379\u037A\x07E",
  "\u037A\u037B\x07W\u037B\u037Cl7\u037C\u037D",
  "\x07X\u037D\u037E`1\u037E\u0380",
  "\u037F\u0370\u037F\u0379",
  "\u0380k\u0381\u038D\\/",
  "\u0382\u0384\xCEh\u0383\u0382",
  "\u0383\u0384\u0384\u0385",
  "\u0385\u0386\x8CG\u0386\u038A\xE4s\u0387",
  "\u0388\x07g\u0388\u038B\u0112\x8A\u0389",
  "\u038B\u0116\x8C\u038A\u0387\u038A",
  "\u0389\u038B\u038D\u038C",
  "\u0381\u038C\u0383\u038D",
  "m\u038E\u038F\x07V\u038F\u0390",
  "\x07W\u0390\u0391l7\u0391\u0392\x07X",
  "\u0392\u0393`1\u0393\u03B0",
  "\u0394\u0395\x07\u0395\u0396`1\u0396",
  "\u0397\x07V\u0397\u0398\x07W\u0398\u0399",
  "\\/\u0399\u039A\x07X\u039A\u039B\x07\x82",
  "\u039B\u03B0\u039C\u039D\x07*",
  "\u039D\u03AA\x07W\u039E\u03A0p9",
  "\u039F\u03A1l7\u03A0\u039F\u03A0",
  "\u03A1\u03A1\u03A2\u03A2",
  "\u03A4\x07\x82\u03A3\u03A5\\/\u03A4\u03A3",
  "\u03A4\u03A5\u03A5\u03AB",
  "\u03A6\u03A7r:\u03A7\u03A8\x07",
  "\x80\u03A8\u03A9t;\u03A9\u03AB",
  "\u03AA\u039E\u03AA\u03A6",
  "\u03AB\u03AC\u03AC\u03AD\x07X",
  "\u03AD\u03AE`1\u03AE\u03B0",
  "\u03AF\u038E\u03AF\u0394",
  "\u03AF\u039C\u03B0o",
  "\u03B1\u03B4d3\u03B2\u03B4\x82B\u03B3",
  "\u03B1\u03B3\u03B2\u03B4",
  "q\u03B5\u03B7\xCEh\u03B6\u03B5",
  "\u03B6\u03B7\u03B7\u03B8",
  "\u03B8\u03B9\x8CG\u03B9\u03BA",
  "\xE4s\u03BAs\u03BB\u03BE",
  "\\/\u03BC\u03BE\u0116\x8C\u03BD\u03BB",
  "\u03BD\u03BC\u03BEu",
  "\u03BF\u03C9\x07\u03C0\u03C9\x07\x1B",
  "\u03C1\u03C4\x07=\u03C2\u03C5\\/",
  "\u03C3\u03C5\u0116\x8C\u03C4\u03C2",
  "\u03C4\u03C3\u03C4\u03C5",
  "\u03C5\u03C9\u03C6\u03C7\x07,",
  "\u03C7\u03C9\x07\x86\u03C8\u03BF",
  "\u03C8\u03C0\u03C8\u03C1",
  "\u03C8\u03C6\u03C9\u03CA",
  "\u03CA\u03CB\x07\x82\u03CBw",
  "\u03CC\u03CD~@\u03CDy\u03CE\u03D0",
  "|?\u03CF\u03CE\u03D0\u03D1",
  "\u03D1\u03CF\u03D1\u03D2",
  "\u03D2{\u03D3\u03DD",
  "~@\u03D4\u03DD\u010A\x86\u03D5\u03DD\u0150",
  "\xA9\u03D6\u03DD\u0164\xB3\u03D7\u03DD\u0166",
  "\xB4\u03D8\u03DD\xCCg\u03D9\u03DD\xBE",
  "`\u03DA\u03DD\x86D\u03DB\u03DD\x88E",
  "\u03DC\u03D3\u03DC\u03D4",
  "\u03DC\u03D5\u03DC\u03D6",
  "\u03DC\u03D7\u03DC\u03D8",
  "\u03DC\u03D9\u03DC\u03DA",
  "\u03DC\u03DB\u03DD}",
  "\u03DE\u03E7\x82B\u03DF\u03E7\xCAf\u03E0",
  "\u03E7\xC2b\u03E1\u03E7\xC6d\u03E2\u03E7",
  "\xC8e\u03E3\u03E7\x84C\u03E4\u03E7",
  "\x80A\u03E5\u03E7\xAEX\u03E6\u03DE",
  "\u03E6\u03DF\u03E6\u03E0",
  "\u03E6\u03E1\u03E6\u03E2",
  "\u03E6\u03E3\u03E6\u03E4",
  "\u03E6\u03E5\u03E7\x7F",
  "\u03E8\u03E9\x07Q\u03E9\u03EB\x07\x86",
  "\u03EA\u03EC\xCEh\u03EB\u03EA",
  "\u03EB\u03EC\u03EC\u03ED",
  "\u03ED\u03EE\x07g\u03EE\u03EF\xF8",
  "}\u03EF\u03F0\x07\x82\u03F0\x81",
  "\u03F1\u03F3\x8CG\u03F2\u03F1",
  "\u03F2\u03F3\u03F3\u03F5",
  "\u03F4\u03F6\xE0q\u03F5\u03F4",
  "\u03F5\u03F6\u03F6\u03F7",
  "\u03F7\u0400\x07\x82\u03F8\u03FA\xCE",
  "h\u03F9\u03FB\x8CG\u03FA\u03F9",
  "\u03FA\u03FB\u03FB\u03FC",
  "\u03FC\u03FD\xE0q\u03FD\u03FE\x07\x82",
  "\u03FE\u0400\u03FF\u03F2",
  "\u03FF\u03F8\u0400\x83",
  "\u0401\u0402\x07B\u0402\u0403\x07W",
  "\u0403\u0404^0\u0404\u0405\x07|\u0405\u0406",
  "\x07\u0406\u0407\x07X\u0407\u0408",
  "\x07\x82\u0408\x85\u0409\u040A",
  "\x07\x82\u040A\x87\u040B\u040C",
  "\xCEh\u040C\u040D\x07\x82\u040D\x89",
  "\u040E\u0415\x8EH\u040F\u0415",
  "\x94K\u0410\u0415\x90I\u0411\u0415\x07",
  "+\u0412\u0415\x07L\u0413\u0415\x07",
  "\u0414\u040E\u0414\u040F",
  "\u0414\u0410\u0414\u0411",
  "\u0414\u0412\u0414\u0413",
  "\u0415\x8B\u0416\u0418\x8A",
  "F\u0417\u0416\u0418\u0419",
  "\u0419\u041A\u0419\u0417",
  "\u041A\u041C\u041B\u041D\xCE",
  "h\u041C\u041B\u041C\u041D",
  "\u041D\x8D\u041E\u041F	\r",
  "\u041F\x8F\u0420\u0421	",
  "\u0421\x91\u0422\u0423\x07\x86",
  "\u0423\x93\u0424\u0428\x96L",
  "\u0425\u0428\u011A\x8E\u0426\u0428\xAAV",
  "\u0427\u0424\u0427\u0425",
  "\u0427\u0426\u0428\x95",
  "\u0429\u042E\xA0Q\u042A\u042E\xA6T",
  "\u042B\u042E\u0162\xB2\u042C\u042E\xF2z",
  "\u042D\u0429\u042D\u042A",
  "\u042D\u042B\u042D\u042C",
  "\u042E\x97\u042F\u0431\x94K",
  "\u0430\u042F\u0431\u0432",
  "\u0432\u0430\u0432\u0433",
  "\u0433\u0435\u0434\u0436\xCEh",
  "\u0435\u0434\u0435\u0436",
  "\u0436\x99\u0437\u0439\x96L",
  "\u0438\u0437\u0439\u043A",
  "\u043A\u0438\u043A\u043B",
  "\u043B\u043D\u043C\u043E\xCEh",
  "\u043D\u043C\u043D\u043E",
  "\u043E\x9B\u043F\u0440	",
  "\u0440\x9D\u0441\u0442	",
  "\u0442\x9F\u0443\u0445\f\x07",
  "\u0444\u0443\u0444\u0445",
  "\u0445\u0446\u0446\u0478\xA2R",
  "\u0447\u0448\f\x07\u0448\u0449\x07F\u0449",
  "\u044A\u0158\xAD\u044A\u0478\u044B",
  "\u0478\x9EP\u044C\u044E\x9EP\u044D\u044C",
  "\u044D\u044E\u044E\u0450",
  "\u044F\u0451\x9CO\u0450\u044F",
  "\u0451\u0452\u0452\u0450",
  "\u0452\u0453\u0453\u0478",
  "\u0454\u0456\x9EP\u0455\u0454",
  "\u0455\u0456\u0456\u0457",
  "\u0457\u0478\x07\u0458\u045A",
  "\x9EP\u0459\u0458\u0459\u045A",
  "\u045A\u045B\u045B\u0478",
  "\x07\u045C\u045E\x9EP\u045D\u045C",
  "\u045D\u045E\u045E\u045F",
  "\u045F\u0478\x07\u0460\u0462",
  "\x9EP\u0461\u0460\u0461\u0462",
  "\u0462\u0463\u0463\u0478",
  "\x07U\u0464\u0478\x07\u0465\u0467",
  "\x9EP\u0466\u0465\u0466\u0467",
  "\u0467\u046B\u0468\u046A",
  "\x9CO\u0469\u0468\u046A\u046D",
  "\u046B\u0469\u046B\u046C",
  "\u046C\u046E\u046D\u046B",
  "\u046E\u0478\x07/\u046F\u0478",
  "\x07)\u0470\u0472\x9CO\u0471\u0470",
  "\u0471\u0472\u0472\u0473",
  "\u0473\u0478\x07 \u0474\u0478\x07",
  "S\u0475\u0478\x07\u0476\u0478",
  "\xA4S\u0477\u0444\u0477\u0447",
  "\u0477\u044B\u0477\u044D",
  "\u0477\u0455\u0477\u0459",
  "\u0477\u045D\u0477\u0461",
  "\u0477\u0464\u0477\u0466",
  "\u0477\u046F\u0477\u0471",
  "\u0477\u0474\u0477\u0475",
  "\u0477\u0476\u0478\xA1",
  "\u0479\u047E\u0118\x8D\u047A\u047E",
  "\xA8U\u047B\u047E\x92J\u047C\u047E\u0158",
  "\xAD\u047D\u0479\u047D\u047A",
  "\u047D\u047B\u047D\u047C",
  "\u047E\xA3\u047F\u0480\x07",
  "\u0480\u0483\x07W\u0481\u0484\\/",
  "\u0482\u0484\x07\u0483\u0481",
  "\u0483\u0482\u0484\u0485",
  "\u0485\u0486\x07X\u0486\xA5",
  "\u0487\u0496\u0122\x92\u0488\u048A\xCEh",
  "\u0489\u0488\u0489\u048A",
  "\u048A\u048C\u048B\u048D\f\x07",
  "\u048C\u048B\u048C\u048D",
  "\u048D\u048E\u048E\u0497\x07\x86",
  "\u048F\u0497\u0158\xAD\u0490\u0492\f\x07",
  "\u0491\u0493\x07F\u0492\u0491",
  "\u0492\u0493\u0493\u0494",
  "\u0494\u0495\u0158\xAD\u0495\u0497",
  "\u0496\u0489\u0496\u048F",
  "\u0496\u0490\u0497\u049E",
  "\u0498\u049A\x07#\u0499\u049B\f\x07\u049A",
  "\u0499\u049A\u049B\u049B",
  "\u049C\u049C\u049E\x07\x86\u049D",
  "\u0487\u049D\u0498\u049E",
  "\xA7\u049F\u04A0\x07\x86\u04A0",
  "\xA9\u04A1\u04A2\xACW\u04A2",
  "\u04A7\x07[\u04A3\u04A5\xB4[\u04A4\u04A6",
  "\x07|\u04A5\u04A4\u04A5\u04A6",
  "\u04A6\u04A8\u04A7\u04A3",
  "\u04A7\u04A8\u04A8\u04A9",
  "\u04A9\u04AA\x07\\\u04AA\xAB",
  "\u04AB\u04AD\xB0Y\u04AC\u04AE",
  "\xCEh\u04AD\u04AC\u04AD\u04AE",
  "\u04AE\u04B3\u04AF\u04B1",
  "\f\x07\u04B0\u04AF\u04B0\u04B1",
  "\u04B1\u04B2\u04B2\u04B4",
  "\x07\x86\u04B3\u04B0\u04B3\u04B4",
  "\u04B4\u04B6\u04B5\u04B7",
  "\xB2Z\u04B6\u04B5\u04B6\u04B7",
  "\u04B7\xAD\u04B8\u04BA",
  "\xB0Y\u04B9\u04BB\xCEh\u04BA\u04B9",
  "\u04BA\u04BB\u04BB\u04BC",
  "\u04BC\u04BE\x07\x86\u04BD\u04BF",
  "\xB2Z\u04BE\u04BD\u04BE\u04BF",
  "\u04BF\u04C0\u04C0\u04C1\x07",
  "\x82\u04C1\xAF\u04C2\u04C4\x07",
  "#\u04C3\u04C5	\u04C4\u04C3",
  "\u04C4\u04C5\u04C5\xB1",
  "\u04C6\u04C7\x07\x80\u04C7\u04C8\x98",
  "M\u04C8\xB3\u04C9\u04CE\xB6",
  "\\\u04CA\u04CB\x07|\u04CB\u04CD\xB6\\",
  "\u04CC\u04CA\u04CD\u04D0",
  "\u04CE\u04CC\u04CE\u04CF",
  "\u04CF\xB5\u04D0\u04CE",
  "\u04D1\u04D4\xB8]\u04D2\u04D3\x07g\u04D3",
  "\u04D5^0\u04D4\u04D2\u04D4\u04D5",
  "\u04D5\xB7\u04D6\u04D7",
  "\x07\x86\u04D7\xB9\u04D8\u04DB",
  "\xBC_\u04D9\u04DB\xC0a\u04DA\u04D8",
  "\u04DA\u04D9\u04DB\xBB",
  "\u04DC\u04DD\x07\x86\u04DD\xBD",
  "\u04DE\u04E0\x07.\u04DF\u04DE",
  "\u04DF\u04E0\u04E0\u04E1",
  "\u04E1\u04E4\x072\u04E2\u04E5\x07",
  "\x86\u04E3\u04E5\xBC_\u04E4\u04E2",
  "\u04E4\u04E3\u04E4\u04E5",
  "\u04E5\u04E6\u04E6\u04E8\x07",
  "[\u04E7\u04E9z>\u04E8\u04E7",
  "\u04E8\u04E9\u04E9\u04EA",
  "\u04EA\u04EB\x07\\\u04EB\xBF",
  "\u04EC\u04ED\x07\x86\u04ED\xC1",
  "\u04EE\u04EF\x072\u04EF\u04F0\x07\x86",
  "\u04F0\u04F1\x07g\u04F1\u04F2\xC4c",
  "\u04F2\u04F3\x07\x82\u04F3\xC3",
  "\u04F4\u04F6\f\x07\u04F5\u04F4",
  "\u04F5\u04F6\u04F6\u04F7",
  "\u04F7\u04F8\xBA^\u04F8\xC5",
  "\u04F9\u04FF\x07Q\u04FA\u04FC\x07N\u04FB",
  "\u04FA\u04FB\u04FC\u04FC",
  "\u04FD\u04FD\u0500\f\x07\u04FE",
  "\u0500\x07\x81\u04FF\u04FB\u04FF",
  "\u04FE\u0500\u0501\u0501",
  "\u0502\b\u0502\u0503\x07\x82\u0503",
  "\xC7\u0504\u0506\xCEh\u0505",
  "\u0504\u0505\u0506\u0506",
  "\u0507\u0507\u0508\x07Q\u0508",
  "\u050A\x072\u0509\u050B\f\x07\u050A\u0509",
  "\u050A\u050B\u050B\u050C",
  "\u050C\u050D\xBA^\u050D\u050E",
  "\x07\x82\u050E\xC9\u050F\u0510",
  "\x07\u0510\u0511\x07W\u0511\u0512",
  "\x07\u0512\u0513\x07X\u0513\u0514",
  "\x07\x82\u0514\xCB\u0515\u0516",
  "\x07&\u0516\u051D\x07\u0517\u0519",
  "\x07[\u0518\u051Az>\u0519\u0518",
  "\u0519\u051A\u051A\u051B",
  "\u051B\u051E\x07\\\u051C\u051E|?",
  "\u051D\u0517\u051D\u051C",
  "\u051E\xCD\u051F\u0521\xD0i",
  "\u0520\u051F\u0521\u0522",
  "\u0522\u0520\u0522\u0523",
  "\u0523\xCF\u0524\u0525\x07Y",
  "\u0525\u0527\x07Y\u0526\u0528\xD4k\u0527",
  "\u0526\u0527\u0528\u0528",
  "\u0529\u0529\u052A\x07Z\u052A",
  "\u052D\x07Z\u052B\u052D\xD2j\u052C\u0524",
  "\u052C\u052B\u052D\xD1",
  "\u052E\u052F\x07\f\u052F\u0532",
  "\x07W\u0530\u0533\xF8}\u0531\u0533",
  "^0\u0532\u0530\u0532\u0531",
  "\u0533\u0535\u0534\u0536\x07\x85",
  "\u0535\u0534\u0535\u0536",
  "\u0536\u0537\u0537\u0538\x07X",
  "\u0538\xD3\u0539\u053E\xD6",
  "l\u053A\u053B\x07|\u053B\u053D\xD6l",
  "\u053C\u053A\u053D\u0540",
  "\u053E\u053C\u053E\u053F",
  "\u053F\u0542\u0540\u053E",
  "\u0541\u0543\x07\x85\u0542\u0541",
  "\u0542\u0543\u0543\xD5",
  "\u0544\u0545\xD8m\u0545\u0546\x07\x81",
  "\u0546\u0548\u0547\u0544",
  "\u0547\u0548\u0548\u0549",
  "\u0549\u054B\x07\x86\u054A\u054C\xDAn",
  "\u054B\u054A\u054B\u054C",
  "\u054C\xD7\u054D\u054E\x07\x86",
  "\u054E\xD9\u054F\u0551\x07W",
  "\u0550\u0552\xDCo\u0551\u0550",
  "\u0551\u0552\u0552\u0553",
  "\u0553\u0554\x07X\u0554\xDB",
  "\u0555\u0557\xDEp\u0556\u0555",
  "\u0557\u0558\u0558\u0556",
  "\u0558\u0559\u0559\xDD",
  "\u055A\u055B\x07W\u055B\u055C\xDCo\u055C",
  "\u055D\x07X\u055D\u056C\u055E",
  "\u055F\x07Y\u055F\u0560\xDCo\u0560\u0561",
  "\x07Z\u0561\u056C\u0562\u0563",
  "\x07[\u0563\u0564\xDCo\u0564\u0565\x07",
  "\\\u0565\u056C\u0566\u0568\n",
  "\u0567\u0566\u0568\u0569",
  "\u0569\u0567\u0569\u056A",
  "\u056A\u056C\u056B\u055A",
  "\u056B\u055E\u056B\u0562",
  "\u056B\u0567\u056C\xDF",
  "\u056D\u0572\xE2r\u056E\u056F\x07|",
  "\u056F\u0571\xE2r\u0570\u056E",
  "\u0571\u0574\u0572\u0570",
  "\u0572\u0573\u0573\xE1",
  "\u0574\u0572\u0575\u0577\xE4s",
  "\u0576\u0578\u010E\x88\u0577\u0576",
  "\u0577\u0578\u0578\xE3",
  "\u0579\u057F\xE6t\u057A\u057B\xE8u",
  "\u057B\u057C\xEAv\u057C\u057D\xECw\u057D",
  "\u057F\u057E\u0579\u057E",
  "\u057A\u057F\xE5\u0580",
  "\u0582\xEEx\u0581\u0583\x07\u0582",
  "\u0581\u0582\u0583\u0583",
  "\u0585\u0584\u0580\u0585",
  "\u0588\u0586\u0584\u0586",
  "\u0587\u0587\u0589\u0588",
  "\u0586\u0589\u058A\xE8u\u058A",
  "\xE7\u058B\u058C\bu\u058C\u058E",
  "\xF6|\u058D\u058F\xCEh\u058E\u058D",
  "\u058E\u058F\u058F\u0595",
  "\u0590\u0591\x07W\u0591\u0592",
  "\xE6t\u0592\u0593\x07X\u0593\u0595",
  "\u0594\u058B\u0594\u0590",
  "\u0595\u05A4\u0596\u05A0\f",
  "\u0597\u05A1\xEAv\u0598\u059A\x07Y",
  "\u0599\u059B^0\u059A\u0599",
  "\u059A\u059B\u059B\u059C",
  "\u059C\u059E\x07Z\u059D\u059F\xCEh\u059E",
  "\u059D\u059E\u059F\u059F",
  "\u05A1\u05A0\u0597\u05A0",
  "\u0598\u05A1\u05A3\u05A2",
  "\u0596\u05A3\u05A6\u05A4",
  "\u05A2\u05A4\u05A5\u05A5",
  "\xE9\u05A6\u05A4\u05A7",
  "\u05A9\x07W\u05A8\u05AA\u0104\x83\u05A9",
  "\u05A8\u05A9\u05AA\u05AA",
  "\u05AB\u05AB\u05AD\x07X\u05AC",
  "\u05AE\xF0y\u05AD\u05AC\u05AD",
  "\u05AE\u05AE\u05B0\u05AF",
  "\u05B1\xF4{\u05B0\u05AF\u05B0",
  "\u05B1\u05B1\u05B3\u05B2",
  "\u05B4\u0174\xBB\u05B3\u05B2\u05B3",
  "\u05B4\u05B4\u05B6\u05B5",
  "\u05B7\xCEh\u05B6\u05B5\u05B6",
  "\u05B7\u05B7\xEB\u05B8",
  "\u05B9\x07~\u05B9\u05BB\x9AN\u05BA\u05BC",
  "\xFA~\u05BB\u05BA\u05BB\u05BC",
  "\u05BC\xED\u05BD\u05BF",
  "	\u05BE\u05C0\xCEh\u05BF\u05BE",
  "\u05BF\u05C0\u05C0\u05CC",
  "\u05C1\u05C3\f\x07\u05C2\u05C1",
  "\u05C2\u05C3\u05C3\u05C4",
  "\u05C4\u05C6\x07_\u05C5\u05C7",
  "\xCEh\u05C6\u05C5\u05C6\u05C7",
  "\u05C7\u05C9\u05C8\u05CA",
  "\xF0y\u05C9\u05C8\u05C9\u05CA",
  "\u05CA\u05CC\u05CB\u05BD",
  "\u05CB\u05C2\u05CC\xEF",
  "\u05CD\u05CF\xF2z\u05CE\u05CD",
  "\u05CF\u05D0\u05D0\u05CE",
  "\u05D0\u05D1\u05D1\xF1",
  "\u05D2\u05D3	\u05D3\xF3",
  "\u05D4\u05D5	\u05D5\xF5",
  "\u05D6\u05D8\x07\x85\u05D7\u05D6",
  "\u05D7\u05D8\u05D8\u05D9",
  "\u05D9\u05DA\u05DA\xF7",
  "\u05DB\u05DD\x98M\u05DC\u05DE",
  "\xFA~\u05DD\u05DC\u05DD\u05DE",
  "\u05DE\xF9\u05DF\u05E8",
  "\xFC\x7F\u05E0\u05E2\xFE\x80\u05E1\u05E0",
  "\u05E1\u05E2\u05E2\u05E3",
  "\u05E3\u05E4\xEAv\u05E4\u05E5",
  "\xECw\u05E5\u05E8\u05E6\u05E8",
  "\u0100\x81\u05E7\u05DF\u05E7\u05E1",
  "\u05E7\u05E6\u05E8\xFB",
  "\u05E9\u05F3\xFE\x80\u05EA\u05EC",
  "\xEEx\u05EB\u05EA\u05EC\u05ED",
  "\u05ED\u05EB\u05ED\u05EE",
  "\u05EE\u05F0\u05EF\u05F1",
  "\xFE\x80\u05F0\u05EF\u05F0\u05F1",
  "\u05F1\u05F3\u05F2\u05E9",
  "\u05F2\u05EB\u05F3\xFD",
  "\u05F4\u05F5\b\x80\u05F5\u0603",
  "\xEAv\u05F6\u05F8\x07Y\u05F7\u05F9^0",
  "\u05F8\u05F7\u05F8\u05F9",
  "\u05F9\u05FA\u05FA\u05FC\x07Z",
  "\u05FB\u05FD\xCEh\u05FC\u05FB",
  "\u05FC\u05FD\u05FD\u0603",
  "\u05FE\u05FF\x07W\u05FF\u0600\xFC\x7F",
  "\u0600\u0601\x07X\u0601\u0603",
  "\u0602\u05F4\u0602\u05F6",
  "\u0602\u05FE\u0603\u0613",
  "\u0604\u060F\f\u0605\u0610\xEAv\u0606",
  "\u0607\xFE\x80\u0607\u0609\x07Y\u0608",
  "\u060A^0\u0609\u0608\u0609\u060A",
  "\u060A\u060B\u060B\u060D",
  "\x07Z\u060C\u060E\xCEh\u060D\u060C",
  "\u060D\u060E\u060E\u0610",
  "\u060F\u0605\u060F\u0606",
  "\u0610\u0612\u0611\u0604",
  "\u0612\u0615\u0613\u0611",
  "\u0613\u0614\u0614\xFF",
  "\u0615\u0613\u0616\u0618",
  "\xEEx\u0617\u0616\u0618\u061B",
  "\u0619\u0617\u0619\u061A",
  "\u061A\u061C\u061B\u0619",
  "\u061C\u061D\u0102\x82\u061D\u0101",
  "\u061E\u061F\b\x82\u061F\u0620\x07",
  "\x85\u0620\u062F\u0621\u062B\f",
  "\u0622\u062C\xEAv\u0623\u0625\x07",
  "Y\u0624\u0626^0\u0625\u0624",
  "\u0625\u0626\u0626\u0627",
  "\u0627\u0629\x07Z\u0628\u062A\xCEh",
  "\u0629\u0628\u0629\u062A",
  "\u062A\u062C\u062B\u0622",
  "\u062B\u0623\u062C\u062E",
  "\u062D\u0621\u062E\u0631",
  "\u062F\u062D\u062F\u0630",
  "\u0630\u0103\u0631\u062F",
  "\u0632\u0637\u0106\x84\u0633\u0635\x07|",
  "\u0634\u0633\u0634\u0635",
  "\u0635\u0636\u0636\u0638\x07\x85",
  "\u0637\u0634\u0637\u0638",
  "\u0638\u0105\u0639\u063E\u0108\x85",
  "\u063A\u063B\x07|\u063B\u063D\u0108\x85",
  "\u063C\u063A\u063D\u0640",
  "\u063E\u063C\u063E\u063F",
  "\u063F\u0107\u0640\u063E",
  "\u0641\u0643\xCEh\u0642\u0641",
  "\u0642\u0643\u0643\u0644",
  "\u0644\u0649\x8CG\u0645\u064A\xE4s\u0646",
  "\u0648\xFA~\u0647\u0646\u0647",
  "\u0648\u0648\u064A\u0649",
  "\u0645\u0649\u0647\u064A",
  "\u064D\u064B\u064C\x07g\u064C",
  "\u064E\u0112\x8A\u064D\u064B\u064D",
  "\u064E\u064E\u0109\u064F",
  "\u0651\xCEh\u0650\u064F\u0650",
  "\u0651\u0651\u0653\u0652",
  "\u0654\x8CG\u0653\u0652\u0653",
  "\u0654\u0654\u0655\u0655",
  "\u0657\xE4s\u0656\u0658\u012C\x97\u0657",
  "\u0656\u0657\u0658\u0658",
  "\u0659\u0659\u065A\u010C\x87\u065A",
  "\u010B\u065B\u065D\u0144\xA3\u065C",
  "\u065B\u065C\u065D\u065D",
  "\u065E\u065E\u0664f4\u065F\u0664",
  "\u016A\xB6\u0660\u0661\x07g\u0661\u0662",
  "	\u0662\u0664\x07\x82\u0663\u065C",
  "\u0663\u065F\u0663\u0660",
  "\u0664\u010D\u0665\u066B",
  "\u0110\x89\u0666\u0667\x07W\u0667\u0668",
  "$\u0668\u0669\x07X\u0669\u066B",
  "\u066A\u0665\u066A\u0666",
  "\u066B\u010F\u066C\u066D\x07",
  "g\u066D\u0670\u0112\x8A\u066E\u0670",
  "\u0116\x8C\u066F\u066C\u066F\u066E",
  "\u0670\u0111\u0671\u0674",
  "X-\u0672\u0674\u0116\x8C\u0673\u0671",
  "\u0673\u0672\u0674\u0113",
  "\u0675\u0677\u0112\x8A\u0676\u0678\x07\x85",
  "\u0677\u0676\u0677\u0678",
  "\u0678\u0680\u0679\u067A\x07|",
  "\u067A\u067C\u0112\x8A\u067B\u067D\x07\x85",
  "\u067C\u067B\u067C\u067D",
  "\u067D\u067F\u067E\u0679",
  "\u067F\u0682\u0680\u067E",
  "\u0680\u0681\u0681\u0115",
  "\u0682\u0680\u0683\u0688\x07[",
  "\u0684\u0686\u0114\x8B\u0685\u0687\x07|",
  "\u0686\u0685\u0686\u0687",
  "\u0687\u0689\u0688\u0684",
  "\u0688\u0689\u0689\u068A",
  "\u068A\u068B\x07\\\u068B\u0117",
  "\u068C\u068F\x07\x86\u068D\u068F\u0158",
  "\xAD\u068E\u068C\u068E\u068D",
  "\u068F\u0119\u0690\u0691\u011C",
  "\x8F\u0691\u0693\x07[\u0692\u0694\u0124",
  "\x93\u0693\u0692\u0693\u0694",
  "\u0694\u0695\u0695\u0696\x07\\",
  "\u0696\u011B\u0697\u0699\u0122",
  "\x92\u0698\u069A\xCEh\u0699\u0698",
  "\u0699\u069A\u069A\u069F",
  "\u069B\u069D\u011E\x90\u069C\u069E\u0120",
  "\x91\u069D\u069C\u069D\u069E",
  "\u069E\u06A0\u069F\u069B",
  "\u069F\u06A0\u06A0\u06A2",
  "\u06A1\u06A3\u0132\x9A\u06A2\u06A1",
  "\u06A2\u06A3\u06A3\u06AF",
  "\u06A4\u06A6\x07O\u06A5\u06A7\xCE",
  "h\u06A6\u06A5\u06A6\u06A7",
  "\u06A7\u06AC\u06A8\u06AA\u011E",
  "\x90\u06A9\u06AB\u0120\x91\u06AA\u06A9",
  "\u06AA\u06AB\u06AB\u06AD",
  "\u06AC\u06A8\u06AC\u06AD",
  "\u06AD\u06AF\u06AE\u0697",
  "\u06AE\u06A4\u06AF\u011D",
  "\u06B0\u06B2\f\x07\u06B1\u06B0",
  "\u06B1\u06B2\u06B2\u06B3",
  "\u06B3\u06B4\u0118\x8D\u06B4\u011F",
  "\u06B5\u06B6\x07(\u06B6\u0121",
  "\u06B7\u06B8	\u06B8\u0123",
  "\u06B9\u06BE\u0126\x94\u06BA\u06BB\u013C",
  "\x9F\u06BB\u06BC\x07\x80\u06BC\u06BE",
  "\u06BD\u06B9\u06BD\u06BA",
  "\u06BE\u06BF\u06BF\u06BD",
  "\u06BF\u06C0\u06C0\u0125",
  "\u06C1\u06C3\xCEh\u06C2\u06C1",
  "\u06C2\u06C3\u06C3\u06C5",
  "\u06C4\u06C6\x8CG\u06C5\u06C4",
  "\u06C5\u06C6\u06C6\u06C8",
  "\u06C7\u06C9\u0128\x95\u06C8\u06C7",
  "\u06C8\u06C9\u06C9\u06CA",
  "\u06CA\u06D2\x07\x82\u06CB\u06D2\u010A",
  "\x86\u06CC\u06D2\xC6d\u06CD\u06D2\x84",
  "C\u06CE\u06D2\u0150\xA9\u06CF\u06D2\x80",
  "A\u06D0\u06D2\x86D\u06D1\u06C2",
  "\u06D1\u06CB\u06D1\u06CC",
  "\u06D1\u06CD\u06D1\u06CE",
  "\u06D1\u06CF\u06D1\u06D0",
  "\u06D2\u0127\u06D3\u06D8\u012A\x96",
  "\u06D4\u06D5\x07|\u06D5\u06D7\u012A\x96",
  "\u06D6\u06D4\u06D7\u06DA",
  "\u06D8\u06D6\u06D8\u06D9",
  "\u06D9\u0129\u06DA\u06D8",
  "\u06DB\u06E5\xE4s\u06DC\u06DE\u012C\x97",
  "\u06DD\u06DC\u06DD\u06DE",
  "\u06DE\u06E0\u06DF\u06E1\u0130\x99",
  "\u06E0\u06DF\u06E0\u06E1",
  "\u06E1\u06E6\u06E2\u06E4\u0110\x89",
  "\u06E3\u06E2\u06E3\u06E4",
  "\u06E4\u06E6\u06E5\u06DD",
  "\u06E5\u06E3\u06E6\u06F0",
  "\u06E7\u06E9\x07\x86\u06E8\u06E7",
  "\u06E8\u06E9\u06E9\u06EB",
  "\u06EA\u06EC\xCEh\u06EB\u06EA",
  "\u06EB\u06EC\u06EC\u06ED",
  "\u06ED\u06EE\x07\x80\u06EE\u06F0^0",
  "\u06EF\u06DB\u06EF\u06E8",
  "\u06F0\u012B\u06F1\u06F3\u012E\x98",
  "\u06F2\u06F1\u06F3\u06F4",
  "\u06F4\u06F2\u06F4\u06F5",
  "\u06F5\u012D\u06F6\u06F7	",
  "\u06F7\u012F\u06F8\u06F9\x07g",
  "\u06F9\u06FA\x07\x88\u06FA\u06FB\b\x99",
  "\u06FB\u0131\u06FC\u06FD\x07\x80",
  "\u06FD\u06FE\u0134\x9B\u06FE\u0133",
  "\u06FF\u0701\u0136\x9C\u0700\u0702\x07\x85",
  "\u0701\u0700\u0701\u0702",
  "\u0702\u070A\u0703\u0704\x07|",
  "\u0704\u0706\u0136\x9C\u0705\u0707\x07\x85",
  "\u0706\u0705\u0706\u0707",
  "\u0707\u0709\u0708\u0703",
  "\u0709\u070C\u070A\u0708",
  "\u070A\u070B\u070B\u0135",
  "\u070C\u070A\u070D\u070F\xCEh",
  "\u070E\u070D\u070E\u070F",
  "\u070F\u071C\u0710\u071D\u013A\x9E",
  "\u0711\u0713\x07R\u0712\u0714\u013C\x9F",
  "\u0713\u0712\u0713\u0714",
  "\u0714\u0715\u0715\u071D\u013A\x9E",
  "\u0716\u0718\u013C\x9F\u0717\u0719\x07R",
  "\u0718\u0717\u0718\u0719",
  "\u0719\u071A\u071A\u071B\u013A\x9E",
  "\u071B\u071D\u071C\u0710",
  "\u071C\u0711\u071C\u0716",
  "\u071D\u0137\u071E\u0720\f\x07",
  "\u071F\u071E\u071F\u0720",
  "\u0720\u0721\u0721\u0724\u0118\x8D",
  "\u0722\u0724\xA4S\u0723\u071F",
  "\u0723\u0722\u0724\u0139",
  "\u0725\u0726\u0138\x9D\u0726\u013B",
  "\u0727\u0728	\u0728\u013D",
  "\u0729\u072A\x076\u072A\u072B\u0140\xA1",
  "\u072B\u013F\u072C\u072E\x98M",
  "\u072D\u072F\u0142\xA2\u072E\u072D",
  "\u072E\u072F\u072F\u0141",
  "\u0730\u0732\xEEx\u0731\u0733\u0142\xA2",
  "\u0732\u0731\u0732\u0733",
  "\u0733\u0143\u0734\u0735\x07\x80",
  "\u0735\u0736\u0146\xA4\u0736\u0145",
  "\u0737\u0739\u0148\xA5\u0738\u073A\x07\x85",
  "\u0739\u0738\u0739\u073A",
  "\u073A\u0742\u073B\u073C\x07|",
  "\u073C\u073E\u0148\xA5\u073D\u073F\x07\x85",
  "\u073E\u073D\u073E\u073F",
  "\u073F\u0741\u0740\u073B",
  "\u0741\u0744\u0742\u0740",
  "\u0742\u0743\u0743\u0147",
  "\u0744\u0742\u0745\u074C\u014A\xA6",
  "\u0746\u0748\x07W\u0747\u0749$\u0748",
  "\u0747\u0748\u0749\u0749",
  "\u074A\u074A\u074D\x07X\u074B",
  "\u074D\u0116\x8C\u074C\u0746\u074C",
  "\u074B\u074D\u0149\u074E",
  "\u0751\u0138\x9D\u074F\u0751\x07\x86\u0750",
  "\u074E\u0750\u074F\u0751",
  "\u014B\u0752\u0753\x076\u0753",
  "\u0754\u017C\xBF\u0754\u014D\u0755",
  "\u0759\x076\u0756\u0757\x07\u0757",
  "\u075A\x07\x86\u0758\u075A\x07\x8E\u0759",
  "\u0756\u0759\u0758\u075A",
  "\u014F\u075B\u075C\x07F\u075C",
  "\u075D\x07h\u075D\u075E\u0152\xAA\u075E",
  "\u075F\x07i\u075F\u0760|?\u0760\u0151",
  "\u0761\u0766\u0154\xAB\u0762\u0763\x07",
  "|\u0763\u0765\u0154\xAB\u0764\u0762",
  "\u0765\u0768\u0766\u0764",
  "\u0766\u0767\u0767\u0153",
  "\u0768\u0766\u0769\u076C",
  "\u0156\xAC\u076A\u076C\u0108\x85\u076B\u0769",
  "\u076B\u076A\u076C\u0155",
  "\u076D\u076E\x07F\u076E\u076F\x07",
  "h\u076F\u0770\u0152\xAA\u0770\u0771\x07",
  "i\u0771\u0773\u0772\u076D",
  "\u0772\u0773\u0773\u0774",
  "\u0774\u0777\x07\u0775\u0777\x07",
  "N\u0776\u0772\u0776\u0775",
  "\u0777\u0783\u0778\u077A\x07",
  "\x85\u0779\u0778\u0779\u077A",
  "\u077A\u077C\u077B\u077D\x07",
  "\x86\u077C\u077B\u077C\u077D",
  "\u077D\u0784\u077E\u0780\x07",
  "\x86\u077F\u077E\u077F\u0780",
  "\u0780\u0781\u0781\u0782\x07",
  "g\u0782\u0784\xF8}\u0783\u0779",
  "\u0783\u077F\u0784\u0157",
  "\u0785\u0786\u015C\xAF\u0786\u0788\x07h",
  "\u0787\u0789\u015E\xB0\u0788\u0787",
  "\u0788\u0789\u0789\u078A",
  "\u078A\u078B\x07i\u078B\u0159",
  "\u078C\u0798\u0158\xAD\u078D\u0790\u014C",
  "\xA7\u078E\u0790\u014E\xA8\u078F\u078D",
  "\u078F\u078E\u0790\u0791",
  "\u0791\u0793\x07h\u0792\u0794\u015E",
  "\xB0\u0793\u0792\u0793\u0794",
  "\u0794\u0795\u0795\u0796\x07i",
  "\u0796\u0798\u0797\u078C",
  "\u0797\u078F\u0798\u015B",
  "\u0799\u079A\x07\x86\u079A\u015D",
  "\u079B\u079D\u0160\xB1\u079C\u079E\x07\x85",
  "\u079D\u079C\u079D\u079E",
  "\u079E\u07A6\u079F\u07A0\x07|",
  "\u07A0\u07A2\u0160\xB1\u07A1\u07A3\x07\x85",
  "\u07A2\u07A1\u07A2\u07A3",
  "\u07A3\u07A5\u07A4\u079F",
  "\u07A5\u07A8\u07A6\u07A4",
  "\u07A6\u07A7\u07A7\u015F",
  "\u07A8\u07A6\u07A9\u07AD\xF8",
  "}\u07AA\u07AD^0\u07AB\u07AD",
  "\u07AC\u07A9\u07AC\u07AA",
  "\u07AC\u07AB\u07AD\u0161",
  "\u07AE\u07AF\x07N\u07AF\u07B5\f\x07\u07B0",
  "\u07B6\x07\x86\u07B1\u07B3\x07F\u07B2",
  "\u07B1\u07B2\u07B3\u07B3",
  "\u07B4\u07B4\u07B6\u0158\xAD\u07B5",
  "\u07B0\u07B5\u07B2\u07B6",
  "\u0163\u07B7\u07B9\x07&\u07B8",
  "\u07B7\u07B8\u07B9\u07B9",
  "\u07BA\u07BA\u07BB\x07F\u07BB",
  "\u07BC|?\u07BC\u0165\u07BD\u07BE",
  "\x07F\u07BE\u07BF\x07h\u07BF\u07C0\x07",
  "i\u07C0\u07C1|?\u07C1\u0167",
  "\u07C2\u07C3\x07K\u07C3\u07C4f4\u07C4",
  "\u07C5\u016C\xB7\u07C5\u0169\u07C6",
  "\u07C8\x07K\u07C7\u07C9\u0144\xA3\u07C8",
  "\u07C7\u07C8\u07C9\u07C9",
  "\u07CA\u07CA\u07CBf4\u07CB\u07CC",
  "\u016C\xB7\u07CC\u016B\u07CD\u07CF",
  "\u016E\xB8\u07CE\u07CD\u07CF\u07D0",
  "\u07D0\u07CE\u07D0\u07D1",
  "\u07D1\u016D\u07D2\u07D3",
  "\x07\u07D3\u07D4\x07W\u07D4\u07D5",
  "\u0170\xB9\u07D5\u07D6\x07X\u07D6\u07D7",
  "f4\u07D7\u016F\u07D8\u07DA",
  "\xCEh\u07D9\u07D8\u07D9\u07DA",
  "\u07DA\u07DB\u07DB\u07DE",
  "\x98M\u07DC\u07DF\xE4s\u07DD\u07DF\xFA",
  "~\u07DE\u07DC\u07DE\u07DD",
  "\u07DE\u07DF\u07DF\u07E2",
  "\u07E0\u07E2\x07\x85\u07E1\u07D9",
  "\u07E1\u07E0\u07E2\u0171",
  "\u07E3\u07E5\x07I\u07E4\u07E6X-",
  "\u07E5\u07E4\u07E5\u07E6",
  "\u07E6\u0173\u07E7\u07EA\u0176\xBC",
  "\u07E8\u07EA\u017A\xBE\u07E9\u07E7",
  "\u07E9\u07E8\u07EA\u0175",
  "\u07EB\u07EC\x07I\u07EC\u07EE\x07W\u07ED",
  "\u07EF\u0178\xBD\u07EE\u07ED\u07EE",
  "\u07EF\u07EF\u07F0\u07F0",
  "\u07F1\x07X\u07F1\u0177\u07F2",
  "\u07F4\xF8}\u07F3\u07F5\x07\x85\u07F4",
  "\u07F3\u07F4\u07F5\u07F5",
  "\u07FD\u07F6\u07F7\x07|\u07F7",
  "\u07F9\xF8}\u07F8\u07FA\x07\x85\u07F9",
  "\u07F8\u07F9\u07FA\u07FA",
  "\u07FC\u07FB\u07F6\u07FC",
  "\u07FF\u07FD\u07FB\u07FD",
  "\u07FE\u07FE\u0179\u07FF",
  "\u07FD\u0800\u0801\x074\u0801",
  "\u0802\x07W\u0802\u0803^0\u0803\u0804\x07",
  "X\u0804\u0807\u0805\u0807\x07",
  "4\u0806\u0800\u0806\u0805",
  "\u0807\u017B\u0808\u080B\x07",
  "3\u0809\u080A\x07Y\u080A\u080C\x07Z",
  "\u080B\u0809\u080B\u080C",
  "\u080C\u083C\u080D\u0810\x07",
  "\u080E\u080F\x07Y\u080F\u0811\x07Z",
  "\u0810\u080E\u0810\u0811",
  "\u0811\u083C\u0812\u083C\x07]",
  "\u0813\u083C\x07^\u0814\u083C\x07_\u0815",
  "\u083C\x07`\u0816\u083C\x07a\u0817\u083C",
  "\x07b\u0818\u083C\x07c\u0819\u083C\x07",
  "d\u081A\u083C\x07e\u081B\u083C\x07f",
  "\u081C\u083C\x07g\u081D\u083C\x07i",
  "\u081E\u083C\x07h\u081F\u083C\x07w\u0820",
  "\u083C\x07j\u0821\u083C\x07k\u0822\u083C",
  "\x07l\u0823\u083C\x07n\u0824\u083C\x07",
  "o\u0825\u083C\x07p\u0826\u083C\x07q",
  "\u0827\u0828\x07h\u0828\u083C\x07h",
  "\u0829\u082A\x07i\u082A\u083C\x07i\u082B",
  "\u083C\x07s\u082C\u083C\x07r\u082D\u083C",
  "\x07t\u082E\u083C\x07u\u082F\u083C\x07",
  "v\u0830\u083C\x07x\u0831\u083C\x07y",
  "\u0832\u083C\x07z\u0833\u083C\x07{",
  "\u0834\u083C\x07|\u0835\u083C\x07}\u0836",
  "\u083C\x07~\u0837\u0838\x07W\u0838\u083C",
  "\x07X\u0839\u083A\x07Y\u083A\u083C\x07",
  "Z\u083B\u0808\u083B\u080D",
  "\u083B\u0812\u083B\u0813",
  "\u083B\u0814\u083B\u0815",
  "\u083B\u0816\u083B\u0817",
  "\u083B\u0818\u083B\u0819",
  "\u083B\u081A\u083B\u081B",
  "\u083B\u081C\u083B\u081D",
  "\u083B\u081E\u083B\u081F",
  "\u083B\u0820\u083B\u0821",
  "\u083B\u0822\u083B\u0823",
  "\u083B\u0824\u083B\u0825",
  "\u083B\u0826\u083B\u0827",
  "\u083B\u0829\u083B\u082B",
  "\u083B\u082C\u083B\u082D",
  "\u083B\u082E\u083B\u082F",
  "\u083B\u0830\u083B\u0831",
  "\u083B\u0832\u083B\u0833",
  "\u083B\u0834\u083B\u0835",
  "\u083B\u0836\u083B\u0837",
  "\u083B\u0839\u083C\u017D",
  "\u083D\u083E	\u083E\u017F",
  "\u0134\u0181\u0188\u0191\u0195\u019E\u01A1\u01A5\u01AD",
  "\u01B4\u01B7\u01BC\u01C1\u01C7\u01CF\u01D1\u01DA\u01DE\u01E2\u01E5\u01E9",
  "\u01EC\u01F3\u01F7\u01FA\u01FD\u0200\u0206\u020A\u020E\u021C\u0220\u0226",
  "\u022D\u0233\u0237\u023B\u023D\u0245\u024A\u0257\u025E\u026A\u0274\u0279",
  "\u027D\u0284\u0287\u028F\u0293\u0296\u029D\u02A4\u02A8\u02AD\u02B1\u02B4",
  "\u02B9\u02C8\u02CF\u02D7\u02DF\u02E8\u02EF\u02F6\u02FE\u0306\u030E\u0316",
  "\u031E\u0326\u032F\u0337\u0340\u0348\u0350\u0352\u0355\u035B\u0361\u0367",
  "\u036E\u0377\u037F\u0383\u038A\u038C\u03A0\u03A4\u03AA\u03AF\u03B3\u03B6",
  "\u03BD\u03C4\u03C8\u03D1\u03DC\u03E6\u03EB\u03F2\u03F5\u03FA\u03FF\u0414",
  "\u0419\u041C\u0427\u042D\u0432\u0435\u043A\u043D\u0444\u044D\u0452\u0455",
  "\u0459\u045D\u0461\u0466\u046B\u0471\u0477\u047D\u0483\u0489\u048C\u0492",
  "\u0496\u049A\u049D\u04A5\u04A7\u04AD\u04B0\u04B3\u04B6\u04BA\u04BE\u04C4",
  "\u04CE\u04D4\u04DA\u04DF\u04E4\u04E8\u04F5\u04FB\u04FF\u0505\u050A\u0519",
  "\u051D\u0522\u0527\u052C\u0532\u0535\u053E\u0542\u0547\u054B\u0551\u0558",
  "\u0569\u056B\u0572\u0577\u057E\u0582\u0586\u058E\u0594\u059A\u059E\u05A0",
  "\u05A4\u05A9\u05AD\u05B0\u05B3\u05B6\u05BB\u05BF\u05C2\u05C6\u05C9\u05CB",
  "\u05D0\u05D7\u05DD\u05E1\u05E7\u05ED\u05F0\u05F2\u05F8\u05FC\u0602\u0609",
  "\u060D\u060F\u0613\u0619\u0625\u0629\u062B\u062F\u0634\u0637\u063E\u0642",
  "\u0647\u0649\u064D\u0650\u0653\u0657\u065C\u0663\u066A\u066F\u0673\u0677",
  "\u067C\u0680\u0686\u0688\u068E\u0693\u0699\u069D\u069F\u06A2\u06A6\u06AA",
  "\u06AC\u06AE\u06B1\u06BD\u06BF\u06C2\u06C5\u06C8\u06D1\u06D8\u06DD\u06E0",
  "\u06E3\u06E5\u06E8\u06EB\u06EF\u06F4\u0701\u0706\u070A\u070E\u0713\u0718",
  "\u071C\u071F\u0723\u072E\u0732\u0739\u073E\u0742\u0748\u074C\u0750\u0759",
  "\u0766\u076B\u0772\u0776\u0779\u077C\u077F\u0783\u0788\u078F\u0793\u0797",
  "\u079D\u07A2\u07A6\u07AC\u07B2\u07B5\u07B8\u07C8\u07D0\u07D9\u07DE\u07E1",
  "\u07E5\u07E9\u07EE\u07F4\u07F9\u07FD\u0806\u080B\u0810\u083B"
].join("");
const atn = new import_antlr4.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new import_antlr4.default.dfa.DFA(ds, index));
const sharedContextCache = new import_antlr4.default.PredictionContextCache();
class CPP14Parser extends import_antlr4.default.Parser {
  static grammarFileName = "CPP14Parser.g4";
  static literalNames = [
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    "'alignas'",
    "'alignof'",
    "'asm'",
    "'auto'",
    "'bool'",
    "'break'",
    "'case'",
    "'catch'",
    "'char'",
    "'char16_t'",
    "'char32_t'",
    "'class'",
    "'const'",
    "'constexpr'",
    "'const_cast'",
    "'continue'",
    "'decltype'",
    "'default'",
    "'delete'",
    "'do'",
    "'double'",
    "'dynamic_cast'",
    "'else'",
    "'enum'",
    "'explicit'",
    "'export'",
    "'extern'",
    "'false'",
    "'final'",
    "'float'",
    "'for'",
    "'friend'",
    "'goto'",
    "'if'",
    "'inline'",
    "'int'",
    "'long'",
    "'mutable'",
    "'namespace'",
    "'new'",
    "'noexcept'",
    "'nullptr'",
    "'operator'",
    "'override'",
    "'private'",
    "'protected'",
    "'public'",
    "'register'",
    "'reinterpret_cast'",
    "'return'",
    "'short'",
    "'signed'",
    "'sizeof'",
    "'static'",
    "'static_assert'",
    "'static_cast'",
    "'struct'",
    "'switch'",
    "'template'",
    "'this'",
    "'thread_local'",
    "'throw'",
    "'true'",
    "'try'",
    "'typedef'",
    "'typeid'",
    "'typename'",
    "'union'",
    "'unsigned'",
    "'using'",
    "'virtual'",
    "'void'",
    "'volatile'",
    "'wchar_t'",
    "'while'",
    "'('",
    "')'",
    "'['",
    "']'",
    "'{'",
    "'}'",
    "'+'",
    "'-'",
    "'*'",
    "'/'",
    "'%'",
    "'^'",
    "'&'",
    "'|'",
    "'~'",
    null,
    "'='",
    "'<'",
    "'>'",
    "'+='",
    "'-='",
    "'*='",
    "'/='",
    "'%='",
    "'^='",
    "'&='",
    "'|='",
    "'<<='",
    "'>>='",
    "'=='",
    "'!='",
    "'<='",
    "'>='",
    null,
    null,
    "'++'",
    "'--'",
    "','",
    "'->*'",
    "'->'",
    "'?'",
    "':'",
    "'::'",
    "';'",
    "'.'",
    "'.*'",
    "'...'"
  ];
  static symbolicNames = [
    null,
    "IntegerLiteral",
    "CharacterLiteral",
    "FloatingLiteral",
    "StringLiteral",
    "BooleanLiteral",
    "PointerLiteral",
    "UserDefinedLiteral",
    "MultiLineMacro",
    "Directive",
    "Alignas",
    "Alignof",
    "Asm",
    "Auto",
    "Bool",
    "Break",
    "Case",
    "Catch",
    "Char",
    "Char16",
    "Char32",
    "Class",
    "Const",
    "Constexpr",
    "Const_cast",
    "Continue",
    "Decltype",
    "Default",
    "Delete",
    "Do",
    "Double",
    "Dynamic_cast",
    "Else",
    "Enum",
    "Explicit",
    "Export",
    "Extern",
    "False_",
    "Final",
    "Float",
    "For",
    "Friend",
    "Goto",
    "If",
    "Inline",
    "Int",
    "Long",
    "Mutable",
    "Namespace",
    "New",
    "Noexcept",
    "Nullptr",
    "Operator",
    "Override",
    "Private",
    "Protected",
    "Public",
    "Register",
    "Reinterpret_cast",
    "Return",
    "Short",
    "Signed",
    "Sizeof",
    "Static",
    "Static_assert",
    "Static_cast",
    "Struct",
    "Switch",
    "Template",
    "This",
    "Thread_local",
    "Throw",
    "True_",
    "Try",
    "Typedef",
    "Typeid_",
    "Typename_",
    "Union",
    "Unsigned",
    "Using",
    "Virtual",
    "Void",
    "Volatile",
    "Wchar",
    "While",
    "LeftParen",
    "RightParen",
    "LeftBracket",
    "RightBracket",
    "LeftBrace",
    "RightBrace",
    "Plus",
    "Minus",
    "Star",
    "Div",
    "Mod",
    "Caret",
    "And",
    "Or",
    "Tilde",
    "Not",
    "Assign",
    "Less",
    "Greater",
    "PlusAssign",
    "MinusAssign",
    "StarAssign",
    "DivAssign",
    "ModAssign",
    "XorAssign",
    "AndAssign",
    "OrAssign",
    "LeftShiftAssign",
    "RightShiftAssign",
    "Equal",
    "NotEqual",
    "LessEqual",
    "GreaterEqual",
    "AndAnd",
    "OrOr",
    "PlusPlus",
    "MinusMinus",
    "Comma",
    "ArrowStar",
    "Arrow",
    "Question",
    "Colon",
    "Doublecolon",
    "Semi",
    "Dot",
    "DotStar",
    "Ellipsis",
    "Identifier",
    "DecimalLiteral",
    "OctalLiteral",
    "HexadecimalLiteral",
    "BinaryLiteral",
    "Integersuffix",
    "UserDefinedIntegerLiteral",
    "UserDefinedFloatingLiteral",
    "UserDefinedStringLiteral",
    "UserDefinedCharacterLiteral",
    "Whitespace",
    "Newline",
    "BlockComment",
    "LineComment"
  ];
  static ruleNames = [
    "translationUnit",
    "primaryExpression",
    "idExpression",
    "unqualifiedId",
    "qualifiedId",
    "nestedNameSpecifier",
    "lambdaExpression",
    "lambdaIntroducer",
    "lambdaCapture",
    "captureDefault",
    "captureList",
    "capture",
    "simpleCapture",
    "initcapture",
    "lambdaDeclarator",
    "postfixExpression",
    "typeIdOfTheTypeId",
    "expressionList",
    "pseudoDestructorName",
    "unaryExpression",
    "unaryOperator",
    "newExpression",
    "newPlacement",
    "newTypeId",
    "newDeclarator",
    "noPointerNewDeclarator",
    "newInitializer",
    "deleteExpression",
    "noExceptExpression",
    "castExpression",
    "pointerMemberExpression",
    "multiplicativeExpression",
    "additiveExpression",
    "shiftExpression",
    "shiftOperator",
    "relationalExpression",
    "equalityExpression",
    "andExpression",
    "exclusiveOrExpression",
    "inclusiveOrExpression",
    "logicalAndExpression",
    "logicalOrExpression",
    "conditionalExpression",
    "assignmentExpression",
    "assignmentOperator",
    "expression",
    "constantExpression",
    "statement",
    "labeledStatement",
    "expressionStatement",
    "compoundStatement",
    "statementSeq",
    "selectionStatement",
    "condition",
    "iterationStatement",
    "forInitStatement",
    "forRangeDeclaration",
    "forRangeInitializer",
    "jumpStatement",
    "declarationStatement",
    "declarationseq",
    "declaration",
    "blockDeclaration",
    "aliasDeclaration",
    "simpleDeclaration",
    "staticAssertDeclaration",
    "emptyDeclaration",
    "attributeDeclaration",
    "declSpecifier",
    "declSpecifierSeq",
    "storageClassSpecifier",
    "functionSpecifier",
    "typedefName",
    "typeSpecifier",
    "trailingTypeSpecifier",
    "typeSpecifierSeq",
    "trailingTypeSpecifierSeq",
    "simpleTypeLengthModifier",
    "simpleTypeSignednessModifier",
    "simpleTypeSpecifier",
    "theTypeName",
    "decltypeSpecifier",
    "elaboratedTypeSpecifier",
    "enumName",
    "enumSpecifier",
    "enumHead",
    "opaqueEnumDeclaration",
    "enumkey",
    "enumbase",
    "enumeratorList",
    "enumeratorDefinition",
    "enumerator",
    "namespaceName",
    "originalNamespaceName",
    "namespaceDefinition",
    "namespaceAlias",
    "namespaceAliasDefinition",
    "qualifiednamespacespecifier",
    "usingDeclaration",
    "usingDirective",
    "asmDefinition",
    "linkageSpecification",
    "attributeSpecifierSeq",
    "attributeSpecifier",
    "alignmentspecifier",
    "attributeList",
    "attribute",
    "attributeNamespace",
    "attributeArgumentClause",
    "balancedTokenSeq",
    "balancedtoken",
    "initDeclaratorList",
    "initDeclarator",
    "declarator",
    "pointerDeclarator",
    "noPointerDeclarator",
    "parametersAndQualifiers",
    "trailingReturnType",
    "pointerOperator",
    "cvqualifierseq",
    "cvQualifier",
    "refqualifier",
    "declaratorid",
    "theTypeId",
    "abstractDeclarator",
    "pointerAbstractDeclarator",
    "noPointerAbstractDeclarator",
    "abstractPackDeclarator",
    "noPointerAbstractPackDeclarator",
    "parameterDeclarationClause",
    "parameterDeclarationList",
    "parameterDeclaration",
    "functionDefinition",
    "functionBody",
    "initializer",
    "braceOrEqualInitializer",
    "initializerClause",
    "initializerList",
    "bracedInitList",
    "className",
    "classSpecifier",
    "classHead",
    "classHeadName",
    "classVirtSpecifier",
    "classKey",
    "memberSpecification",
    "memberdeclaration",
    "memberDeclaratorList",
    "memberDeclarator",
    "virtualSpecifierSeq",
    "virtualSpecifier",
    "pureSpecifier",
    "baseClause",
    "baseSpecifierList",
    "baseSpecifier",
    "classOrDeclType",
    "baseTypeSpecifier",
    "accessSpecifier",
    "conversionFunctionId",
    "conversionTypeId",
    "conversionDeclarator",
    "constructorInitializer",
    "memInitializerList",
    "memInitializer",
    "meminitializerid",
    "operatorFunctionId",
    "literalOperatorId",
    "templateDeclaration",
    "templateparameterList",
    "templateParameter",
    "typeParameter",
    "simpleTemplateId",
    "templateId",
    "templateName",
    "templateArgumentList",
    "templateArgument",
    "typeNameSpecifier",
    "explicitInstantiation",
    "explicitSpecialization",
    "tryBlock",
    "functionTryBlock",
    "handlerSeq",
    "handler",
    "exceptionDeclaration",
    "throwExpression",
    "exceptionSpecification",
    "dynamicExceptionSpecification",
    "typeIdList",
    "noeExceptSpecification",
    "theOperator",
    "literal"
  ];
  constructor(input) {
    super(input);
    this._interp = new import_antlr4.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = CPP14Parser.ruleNames;
    this.literalNames = CPP14Parser.literalNames;
    this.symbolicNames = CPP14Parser.symbolicNames;
  }
  get atn() {
    return atn;
  }
  sempred(localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 5:
        return this.nestedNameSpecifier_sempred(localctx, predIndex);
      case 15:
        return this.postfixExpression_sempred(localctx, predIndex);
      case 25:
        return this.noPointerNewDeclarator_sempred(localctx, predIndex);
      case 115:
        return this.noPointerDeclarator_sempred(localctx, predIndex);
      case 126:
        return this.noPointerAbstractDeclarator_sempred(localctx, predIndex);
      case 128:
        return this.noPointerAbstractPackDeclarator_sempred(localctx, predIndex);
      default:
        throw "No predicate with index:" + ruleIndex;
    }
  }
  nestedNameSpecifier_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.precpred(this._ctx, 1);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  postfixExpression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 1:
        return this.precpred(this._ctx, 7);
      case 2:
        return this.precpred(this._ctx, 6);
      case 3:
        return this.precpred(this._ctx, 4);
      case 4:
        return this.precpred(this._ctx, 3);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  noPointerNewDeclarator_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 5:
        return this.precpred(this._ctx, 1);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  noPointerDeclarator_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 6:
        return this.precpred(this._ctx, 2);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  noPointerAbstractDeclarator_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 7:
        return this.precpred(this._ctx, 4);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  noPointerAbstractPackDeclarator_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 8:
        return this.precpred(this._ctx, 2);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  translationUnit() {
    let localctx = new TranslationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CPP14Parser.RULE_translationUnit);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 383;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 10 & ~31) == 0 && (1 << _la - 10 & (1 << CPP14Parser.Alignas - 10 | 1 << CPP14Parser.Asm - 10 | 1 << CPP14Parser.Auto - 10 | 1 << CPP14Parser.Bool - 10 | 1 << CPP14Parser.Char - 10 | 1 << CPP14Parser.Char16 - 10 | 1 << CPP14Parser.Char32 - 10 | 1 << CPP14Parser.Class - 10 | 1 << CPP14Parser.Const - 10 | 1 << CPP14Parser.Constexpr - 10 | 1 << CPP14Parser.Decltype - 10 | 1 << CPP14Parser.Double - 10 | 1 << CPP14Parser.Enum - 10 | 1 << CPP14Parser.Explicit - 10 | 1 << CPP14Parser.Extern - 10 | 1 << CPP14Parser.Float - 10 | 1 << CPP14Parser.Friend - 10)) !== 0 || (_la - 44 & ~31) == 0 && (1 << _la - 44 & (1 << CPP14Parser.Inline - 44 | 1 << CPP14Parser.Int - 44 | 1 << CPP14Parser.Long - 44 | 1 << CPP14Parser.Mutable - 44 | 1 << CPP14Parser.Namespace - 44 | 1 << CPP14Parser.Operator - 44 | 1 << CPP14Parser.Register - 44 | 1 << CPP14Parser.Short - 44 | 1 << CPP14Parser.Signed - 44 | 1 << CPP14Parser.Static - 44 | 1 << CPP14Parser.Static_assert - 44 | 1 << CPP14Parser.Struct - 44 | 1 << CPP14Parser.Template - 44 | 1 << CPP14Parser.Thread_local - 44 | 1 << CPP14Parser.Typedef - 44)) !== 0 || (_la - 76 & ~31) == 0 && (1 << _la - 76 & (1 << CPP14Parser.Typename_ - 76 | 1 << CPP14Parser.Union - 76 | 1 << CPP14Parser.Unsigned - 76 | 1 << CPP14Parser.Using - 76 | 1 << CPP14Parser.Virtual - 76 | 1 << CPP14Parser.Void - 76 | 1 << CPP14Parser.Volatile - 76 | 1 << CPP14Parser.Wchar - 76 | 1 << CPP14Parser.LeftParen - 76 | 1 << CPP14Parser.LeftBracket - 76 | 1 << CPP14Parser.Star - 76 | 1 << CPP14Parser.And - 76 | 1 << CPP14Parser.Tilde - 76)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << CPP14Parser.AndAnd - 118 | 1 << CPP14Parser.Doublecolon - 118 | 1 << CPP14Parser.Semi - 118 | 1 << CPP14Parser.Ellipsis - 118 | 1 << CPP14Parser.Identifier - 118)) !== 0) {
        this.state = 382;
        this.declarationseq();
      }
      this.state = 385;
      this.match(CPP14Parser.EOF);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  primaryExpression() {
    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CPP14Parser.RULE_primaryExpression);
    try {
      this.state = 399;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.IntegerLiteral:
        case CPP14Parser.CharacterLiteral:
        case CPP14Parser.FloatingLiteral:
        case CPP14Parser.StringLiteral:
        case CPP14Parser.BooleanLiteral:
        case CPP14Parser.PointerLiteral:
        case CPP14Parser.UserDefinedLiteral:
          this.enterOuterAlt(localctx, 1);
          this.state = 388;
          this._errHandler.sync(this);
          var _alt = 1;
          do {
            switch (_alt) {
              case 1:
                this.state = 387;
                this.literal();
                break;
              default:
                throw new import_antlr4.default.error.NoViableAltException(this);
            }
            this.state = 390;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 1, this._ctx);
          } while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER);
          break;
        case CPP14Parser.This:
          this.enterOuterAlt(localctx, 2);
          this.state = 392;
          this.match(CPP14Parser.This);
          break;
        case CPP14Parser.LeftParen:
          this.enterOuterAlt(localctx, 3);
          this.state = 393;
          this.match(CPP14Parser.LeftParen);
          this.state = 394;
          this.expression();
          this.state = 395;
          this.match(CPP14Parser.RightParen);
          break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Operator:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 4);
          this.state = 397;
          this.idExpression();
          break;
        case CPP14Parser.LeftBracket:
          this.enterOuterAlt(localctx, 5);
          this.state = 398;
          this.lambdaExpression();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  idExpression() {
    let localctx = new IdExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CPP14Parser.RULE_idExpression);
    try {
      this.state = 403;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 401;
          this.unqualifiedId();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 402;
          this.qualifiedId();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  unqualifiedId() {
    let localctx = new UnqualifiedIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CPP14Parser.RULE_unqualifiedId);
    try {
      this.state = 415;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 5, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 405;
          this.match(CPP14Parser.Identifier);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 406;
          this.operatorFunctionId();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 407;
          this.conversionFunctionId();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 408;
          this.literalOperatorId();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 409;
          this.match(CPP14Parser.Tilde);
          this.state = 412;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CPP14Parser.Identifier:
              this.state = 410;
              this.className();
              break;
            case CPP14Parser.Decltype:
              this.state = 411;
              this.decltypeSpecifier();
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 414;
          this.templateId();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  qualifiedId() {
    let localctx = new QualifiedIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CPP14Parser.RULE_qualifiedId);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 417;
      this.nestedNameSpecifier(0);
      this.state = 419;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Template) {
        this.state = 418;
        this.match(CPP14Parser.Template);
      }
      this.state = 421;
      this.unqualifiedId();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  nestedNameSpecifier(_p) {
    if (_p === void 0) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new NestedNameSpecifierContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 10;
    this.enterRecursionRule(localctx, 10, CPP14Parser.RULE_nestedNameSpecifier, _p);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 427;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 7, this._ctx);
      if (la_ === 1) {
        this.state = 424;
        this.theTypeName();
      } else if (la_ === 2) {
        this.state = 425;
        this.namespaceName();
      } else if (la_ === 3) {
        this.state = 426;
        this.decltypeSpecifier();
      }
      this.state = 429;
      this.match(CPP14Parser.Doublecolon);
      this._ctx.stop = this._input.LT(-1);
      this.state = 442;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 10, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          localctx = new NestedNameSpecifierContext(this, _parentctx, _parentState);
          this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_nestedNameSpecifier);
          this.state = 431;
          if (!this.precpred(this._ctx, 1)) {
            throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
          }
          this.state = 437;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 9, this._ctx);
          switch (la_) {
            case 1:
              this.state = 432;
              this.match(CPP14Parser.Identifier);
              break;
            case 2:
              this.state = 434;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CPP14Parser.Template) {
                this.state = 433;
                this.match(CPP14Parser.Template);
              }
              this.state = 436;
              this.simpleTemplateId();
              break;
          }
          this.state = 439;
          this.match(CPP14Parser.Doublecolon);
        }
        this.state = 444;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 10, this._ctx);
      }
    } catch (error) {
      if (error instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  lambdaExpression() {
    let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CPP14Parser.RULE_lambdaExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 445;
      this.lambdaIntroducer();
      this.state = 447;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.LeftParen) {
        this.state = 446;
        this.lambdaDeclarator();
      }
      this.state = 449;
      this.compoundStatement();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lambdaIntroducer() {
    let localctx = new LambdaIntroducerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CPP14Parser.RULE_lambdaIntroducer);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 451;
      this.match(CPP14Parser.LeftBracket);
      this.state = 453;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.This || _la === CPP14Parser.And || _la === CPP14Parser.Assign || _la === CPP14Parser.Identifier) {
        this.state = 452;
        this.lambdaCapture();
      }
      this.state = 455;
      this.match(CPP14Parser.RightBracket);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lambdaCapture() {
    let localctx = new LambdaCaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CPP14Parser.RULE_lambdaCapture);
    var _la = 0;
    try {
      this.state = 463;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 14, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 457;
          this.captureList();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 458;
          this.captureDefault();
          this.state = 461;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Comma) {
            this.state = 459;
            this.match(CPP14Parser.Comma);
            this.state = 460;
            this.captureList();
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  captureDefault() {
    let localctx = new CaptureDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CPP14Parser.RULE_captureDefault);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 465;
      _la = this._input.LA(1);
      if (!(_la === CPP14Parser.And || _la === CPP14Parser.Assign)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  captureList() {
    let localctx = new CaptureListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CPP14Parser.RULE_captureList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 467;
      this.capture();
      this.state = 472;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Comma) {
        this.state = 468;
        this.match(CPP14Parser.Comma);
        this.state = 469;
        this.capture();
        this.state = 474;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 476;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Ellipsis) {
        this.state = 475;
        this.match(CPP14Parser.Ellipsis);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  capture() {
    let localctx = new CaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CPP14Parser.RULE_capture);
    try {
      this.state = 480;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 17, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 478;
          this.simpleCapture();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 479;
          this.initcapture();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  simpleCapture() {
    let localctx = new SimpleCaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CPP14Parser.RULE_simpleCapture);
    var _la = 0;
    try {
      this.state = 487;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.And:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 483;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.And) {
            this.state = 482;
            this.match(CPP14Parser.And);
          }
          this.state = 485;
          this.match(CPP14Parser.Identifier);
          break;
        case CPP14Parser.This:
          this.enterOuterAlt(localctx, 2);
          this.state = 486;
          this.match(CPP14Parser.This);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  initcapture() {
    let localctx = new InitcaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CPP14Parser.RULE_initcapture);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 490;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.And) {
        this.state = 489;
        this.match(CPP14Parser.And);
      }
      this.state = 492;
      this.match(CPP14Parser.Identifier);
      this.state = 493;
      this.initializer();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lambdaDeclarator() {
    let localctx = new LambdaDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CPP14Parser.RULE_lambdaDeclarator);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 495;
      this.match(CPP14Parser.LeftParen);
      this.state = 497;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.Alignas | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Class | 1 << CPP14Parser.Const | 1 << CPP14Parser.Constexpr | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Double)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << CPP14Parser.Enum - 33 | 1 << CPP14Parser.Explicit - 33 | 1 << CPP14Parser.Extern - 33 | 1 << CPP14Parser.Float - 33 | 1 << CPP14Parser.Friend - 33 | 1 << CPP14Parser.Inline - 33 | 1 << CPP14Parser.Int - 33 | 1 << CPP14Parser.Long - 33 | 1 << CPP14Parser.Mutable - 33 | 1 << CPP14Parser.Register - 33 | 1 << CPP14Parser.Short - 33 | 1 << CPP14Parser.Signed - 33 | 1 << CPP14Parser.Static - 33)) !== 0 || (_la - 66 & ~31) == 0 && (1 << _la - 66 & (1 << CPP14Parser.Struct - 66 | 1 << CPP14Parser.Thread_local - 66 | 1 << CPP14Parser.Typedef - 66 | 1 << CPP14Parser.Typename_ - 66 | 1 << CPP14Parser.Union - 66 | 1 << CPP14Parser.Unsigned - 66 | 1 << CPP14Parser.Virtual - 66 | 1 << CPP14Parser.Void - 66 | 1 << CPP14Parser.Volatile - 66 | 1 << CPP14Parser.Wchar - 66 | 1 << CPP14Parser.LeftBracket - 66)) !== 0 || _la === CPP14Parser.Doublecolon || _la === CPP14Parser.Identifier) {
        this.state = 496;
        this.parameterDeclarationClause();
      }
      this.state = 499;
      this.match(CPP14Parser.RightParen);
      this.state = 501;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Mutable) {
        this.state = 500;
        this.match(CPP14Parser.Mutable);
      }
      this.state = 504;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Noexcept || _la === CPP14Parser.Throw) {
        this.state = 503;
        this.exceptionSpecification();
      }
      this.state = 507;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
        this.state = 506;
        this.attributeSpecifierSeq();
      }
      this.state = 510;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Arrow) {
        this.state = 509;
        this.trailingReturnType();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  postfixExpression(_p) {
    if (_p === void 0) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new PostfixExpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 30;
    this.enterRecursionRule(localctx, 30, CPP14Parser.RULE_postfixExpression, _p);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 542;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 30, this._ctx);
      switch (la_) {
        case 1:
          this.state = 513;
          this.primaryExpression();
          break;
        case 2:
          this.state = 516;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CPP14Parser.Auto:
            case CPP14Parser.Bool:
            case CPP14Parser.Char:
            case CPP14Parser.Char16:
            case CPP14Parser.Char32:
            case CPP14Parser.Decltype:
            case CPP14Parser.Double:
            case CPP14Parser.Float:
            case CPP14Parser.Int:
            case CPP14Parser.Long:
            case CPP14Parser.Short:
            case CPP14Parser.Signed:
            case CPP14Parser.Unsigned:
            case CPP14Parser.Void:
            case CPP14Parser.Wchar:
            case CPP14Parser.Doublecolon:
            case CPP14Parser.Identifier:
              this.state = 514;
              this.simpleTypeSpecifier();
              break;
            case CPP14Parser.Typename_:
              this.state = 515;
              this.typeNameSpecifier();
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          this.state = 524;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CPP14Parser.LeftParen:
              this.state = 518;
              this.match(CPP14Parser.LeftParen);
              this.state = 520;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 71 & ~31) == 0 && (1 << _la - 71 & (1 << CPP14Parser.Throw - 71 | 1 << CPP14Parser.Typeid_ - 71 | 1 << CPP14Parser.Typename_ - 71 | 1 << CPP14Parser.Unsigned - 71 | 1 << CPP14Parser.Void - 71 | 1 << CPP14Parser.Wchar - 71 | 1 << CPP14Parser.LeftParen - 71 | 1 << CPP14Parser.LeftBracket - 71 | 1 << CPP14Parser.LeftBrace - 71 | 1 << CPP14Parser.Plus - 71 | 1 << CPP14Parser.Minus - 71 | 1 << CPP14Parser.Star - 71 | 1 << CPP14Parser.And - 71 | 1 << CPP14Parser.Or - 71 | 1 << CPP14Parser.Tilde - 71 | 1 << CPP14Parser.Not - 71)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
                this.state = 519;
                this.expressionList();
              }
              this.state = 522;
              this.match(CPP14Parser.RightParen);
              break;
            case CPP14Parser.LeftBrace:
              this.state = 523;
              this.bracedInitList();
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
        case 3:
          this.state = 526;
          _la = this._input.LA(1);
          if (!(_la === CPP14Parser.Const_cast || _la === CPP14Parser.Dynamic_cast || _la === CPP14Parser.Reinterpret_cast || _la === CPP14Parser.Static_cast)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 527;
          this.match(CPP14Parser.Less);
          this.state = 528;
          this.theTypeId();
          this.state = 529;
          this.match(CPP14Parser.Greater);
          this.state = 530;
          this.match(CPP14Parser.LeftParen);
          this.state = 531;
          this.expression();
          this.state = 532;
          this.match(CPP14Parser.RightParen);
          break;
        case 4:
          this.state = 534;
          this.typeIdOfTheTypeId();
          this.state = 535;
          this.match(CPP14Parser.LeftParen);
          this.state = 538;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);
          switch (la_) {
            case 1:
              this.state = 536;
              this.expression();
              break;
            case 2:
              this.state = 537;
              this.theTypeId();
              break;
          }
          this.state = 540;
          this.match(CPP14Parser.RightParen);
          break;
      }
      this._ctx.stop = this._input.LT(-1);
      this.state = 571;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          this.state = 569;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);
          switch (la_) {
            case 1:
              localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpression);
              this.state = 544;
              if (!this.precpred(this._ctx, 7)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
              }
              this.state = 545;
              this.match(CPP14Parser.LeftBracket);
              this.state = 548;
              this._errHandler.sync(this);
              switch (this._input.LA(1)) {
                case CPP14Parser.IntegerLiteral:
                case CPP14Parser.CharacterLiteral:
                case CPP14Parser.FloatingLiteral:
                case CPP14Parser.StringLiteral:
                case CPP14Parser.BooleanLiteral:
                case CPP14Parser.PointerLiteral:
                case CPP14Parser.UserDefinedLiteral:
                case CPP14Parser.Alignof:
                case CPP14Parser.Auto:
                case CPP14Parser.Bool:
                case CPP14Parser.Char:
                case CPP14Parser.Char16:
                case CPP14Parser.Char32:
                case CPP14Parser.Const_cast:
                case CPP14Parser.Decltype:
                case CPP14Parser.Delete:
                case CPP14Parser.Double:
                case CPP14Parser.Dynamic_cast:
                case CPP14Parser.Float:
                case CPP14Parser.Int:
                case CPP14Parser.Long:
                case CPP14Parser.New:
                case CPP14Parser.Noexcept:
                case CPP14Parser.Operator:
                case CPP14Parser.Reinterpret_cast:
                case CPP14Parser.Short:
                case CPP14Parser.Signed:
                case CPP14Parser.Sizeof:
                case CPP14Parser.Static_cast:
                case CPP14Parser.This:
                case CPP14Parser.Throw:
                case CPP14Parser.Typeid_:
                case CPP14Parser.Typename_:
                case CPP14Parser.Unsigned:
                case CPP14Parser.Void:
                case CPP14Parser.Wchar:
                case CPP14Parser.LeftParen:
                case CPP14Parser.LeftBracket:
                case CPP14Parser.Plus:
                case CPP14Parser.Minus:
                case CPP14Parser.Star:
                case CPP14Parser.And:
                case CPP14Parser.Or:
                case CPP14Parser.Tilde:
                case CPP14Parser.Not:
                case CPP14Parser.PlusPlus:
                case CPP14Parser.MinusMinus:
                case CPP14Parser.Doublecolon:
                case CPP14Parser.Identifier:
                  this.state = 546;
                  this.expression();
                  break;
                case CPP14Parser.LeftBrace:
                  this.state = 547;
                  this.bracedInitList();
                  break;
                default:
                  throw new import_antlr4.default.error.NoViableAltException(this);
              }
              this.state = 550;
              this.match(CPP14Parser.RightBracket);
              break;
            case 2:
              localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpression);
              this.state = 552;
              if (!this.precpred(this._ctx, 6)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
              }
              this.state = 553;
              this.match(CPP14Parser.LeftParen);
              this.state = 555;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 71 & ~31) == 0 && (1 << _la - 71 & (1 << CPP14Parser.Throw - 71 | 1 << CPP14Parser.Typeid_ - 71 | 1 << CPP14Parser.Typename_ - 71 | 1 << CPP14Parser.Unsigned - 71 | 1 << CPP14Parser.Void - 71 | 1 << CPP14Parser.Wchar - 71 | 1 << CPP14Parser.LeftParen - 71 | 1 << CPP14Parser.LeftBracket - 71 | 1 << CPP14Parser.LeftBrace - 71 | 1 << CPP14Parser.Plus - 71 | 1 << CPP14Parser.Minus - 71 | 1 << CPP14Parser.Star - 71 | 1 << CPP14Parser.And - 71 | 1 << CPP14Parser.Or - 71 | 1 << CPP14Parser.Tilde - 71 | 1 << CPP14Parser.Not - 71)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
                this.state = 554;
                this.expressionList();
              }
              this.state = 557;
              this.match(CPP14Parser.RightParen);
              break;
            case 3:
              localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpression);
              this.state = 558;
              if (!this.precpred(this._ctx, 4)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
              }
              this.state = 559;
              _la = this._input.LA(1);
              if (!(_la === CPP14Parser.Arrow || _la === CPP14Parser.Dot)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 565;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 34, this._ctx);
              switch (la_) {
                case 1:
                  this.state = 561;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === CPP14Parser.Template) {
                    this.state = 560;
                    this.match(CPP14Parser.Template);
                  }
                  this.state = 563;
                  this.idExpression();
                  break;
                case 2:
                  this.state = 564;
                  this.pseudoDestructorName();
                  break;
              }
              break;
            case 4:
              localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpression);
              this.state = 567;
              if (!this.precpred(this._ctx, 3)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
              }
              this.state = 568;
              _la = this._input.LA(1);
              if (!(_la === CPP14Parser.PlusPlus || _la === CPP14Parser.MinusMinus)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              break;
          }
        }
        this.state = 573;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
      }
    } catch (error) {
      if (error instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  typeIdOfTheTypeId() {
    let localctx = new TypeIdOfTheTypeIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CPP14Parser.RULE_typeIdOfTheTypeId);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 574;
      this.match(CPP14Parser.Typeid_);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  expressionList() {
    let localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CPP14Parser.RULE_expressionList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 576;
      this.initializerList();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  pseudoDestructorName() {
    let localctx = new PseudoDestructorNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CPP14Parser.RULE_pseudoDestructorName);
    var _la = 0;
    try {
      this.state = 597;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 579;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 37, this._ctx);
          if (la_ === 1) {
            this.state = 578;
            this.nestedNameSpecifier(0);
          }
          this.state = 584;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Identifier) {
            this.state = 581;
            this.theTypeName();
            this.state = 582;
            this.match(CPP14Parser.Doublecolon);
          }
          this.state = 586;
          this.match(CPP14Parser.Tilde);
          this.state = 587;
          this.theTypeName();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 588;
          this.nestedNameSpecifier(0);
          this.state = 589;
          this.match(CPP14Parser.Template);
          this.state = 590;
          this.simpleTemplateId();
          this.state = 591;
          this.match(CPP14Parser.Doublecolon);
          this.state = 592;
          this.match(CPP14Parser.Tilde);
          this.state = 593;
          this.theTypeName();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 595;
          this.match(CPP14Parser.Tilde);
          this.state = 596;
          this.decltypeSpecifier();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  unaryExpression() {
    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CPP14Parser.RULE_unaryExpression);
    try {
      this.state = 626;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 42, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 599;
          this.postfixExpression(0);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 604;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CPP14Parser.PlusPlus:
              this.state = 600;
              this.match(CPP14Parser.PlusPlus);
              break;
            case CPP14Parser.MinusMinus:
              this.state = 601;
              this.match(CPP14Parser.MinusMinus);
              break;
            case CPP14Parser.Plus:
            case CPP14Parser.Minus:
            case CPP14Parser.Star:
            case CPP14Parser.And:
            case CPP14Parser.Or:
            case CPP14Parser.Tilde:
            case CPP14Parser.Not:
              this.state = 602;
              this.unaryOperator();
              break;
            case CPP14Parser.Sizeof:
              this.state = 603;
              this.match(CPP14Parser.Sizeof);
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          this.state = 606;
          this.unaryExpression();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 607;
          this.match(CPP14Parser.Sizeof);
          this.state = 616;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CPP14Parser.LeftParen:
              this.state = 608;
              this.match(CPP14Parser.LeftParen);
              this.state = 609;
              this.theTypeId();
              this.state = 610;
              this.match(CPP14Parser.RightParen);
              break;
            case CPP14Parser.Ellipsis:
              this.state = 612;
              this.match(CPP14Parser.Ellipsis);
              this.state = 613;
              this.match(CPP14Parser.LeftParen);
              this.state = 614;
              this.match(CPP14Parser.Identifier);
              this.state = 615;
              this.match(CPP14Parser.RightParen);
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 618;
          this.match(CPP14Parser.Alignof);
          this.state = 619;
          this.match(CPP14Parser.LeftParen);
          this.state = 620;
          this.theTypeId();
          this.state = 621;
          this.match(CPP14Parser.RightParen);
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 623;
          this.noExceptExpression();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 624;
          this.newExpression();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 625;
          this.deleteExpression();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  unaryOperator() {
    let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CPP14Parser.RULE_unaryOperator);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 628;
      _la = this._input.LA(1);
      if (!((_la - 91 & ~31) == 0 && (1 << _la - 91 & (1 << CPP14Parser.Plus - 91 | 1 << CPP14Parser.Minus - 91 | 1 << CPP14Parser.Star - 91 | 1 << CPP14Parser.And - 91 | 1 << CPP14Parser.Or - 91 | 1 << CPP14Parser.Tilde - 91 | 1 << CPP14Parser.Not - 91)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  newExpression() {
    let localctx = new NewExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CPP14Parser.RULE_newExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 631;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Doublecolon) {
        this.state = 630;
        this.match(CPP14Parser.Doublecolon);
      }
      this.state = 633;
      this.match(CPP14Parser.New);
      this.state = 635;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 44, this._ctx);
      if (la_ === 1) {
        this.state = 634;
        this.newPlacement();
      }
      this.state = 642;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.Enum:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Struct:
        case CPP14Parser.Typename_:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.state = 637;
          this.newTypeId();
          break;
        case CPP14Parser.LeftParen:
          this.state = 638;
          this.match(CPP14Parser.LeftParen);
          this.state = 639;
          this.theTypeId();
          this.state = 640;
          this.match(CPP14Parser.RightParen);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
      this.state = 645;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.LeftParen || _la === CPP14Parser.LeftBrace) {
        this.state = 644;
        this.newInitializer();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  newPlacement() {
    let localctx = new NewPlacementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CPP14Parser.RULE_newPlacement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 647;
      this.match(CPP14Parser.LeftParen);
      this.state = 648;
      this.expressionList();
      this.state = 649;
      this.match(CPP14Parser.RightParen);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  newTypeId() {
    let localctx = new NewTypeIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CPP14Parser.RULE_newTypeId);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 651;
      this.typeSpecifierSeq();
      this.state = 653;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 47, this._ctx);
      if (la_ === 1) {
        this.state = 652;
        this.newDeclarator();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  newDeclarator() {
    let localctx = new NewDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CPP14Parser.RULE_newDeclarator);
    try {
      this.state = 660;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 655;
          this.pointerOperator();
          this.state = 657;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 48, this._ctx);
          if (la_ === 1) {
            this.state = 656;
            this.newDeclarator();
          }
          break;
        case CPP14Parser.LeftBracket:
          this.enterOuterAlt(localctx, 2);
          this.state = 659;
          this.noPointerNewDeclarator(0);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  noPointerNewDeclarator(_p) {
    if (_p === void 0) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new NoPointerNewDeclaratorContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 50;
    this.enterRecursionRule(localctx, 50, CPP14Parser.RULE_noPointerNewDeclarator, _p);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 663;
      this.match(CPP14Parser.LeftBracket);
      this.state = 664;
      this.expression();
      this.state = 665;
      this.match(CPP14Parser.RightBracket);
      this.state = 667;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 50, this._ctx);
      if (la_ === 1) {
        this.state = 666;
        this.attributeSpecifierSeq();
      }
      this._ctx.stop = this._input.LT(-1);
      this.state = 678;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          localctx = new NoPointerNewDeclaratorContext(this, _parentctx, _parentState);
          this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerNewDeclarator);
          this.state = 669;
          if (!this.precpred(this._ctx, 1)) {
            throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
          }
          this.state = 670;
          this.match(CPP14Parser.LeftBracket);
          this.state = 671;
          this.constantExpression();
          this.state = 672;
          this.match(CPP14Parser.RightBracket);
          this.state = 674;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);
          if (la_ === 1) {
            this.state = 673;
            this.attributeSpecifierSeq();
          }
        }
        this.state = 680;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
      }
    } catch (error) {
      if (error instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  newInitializer() {
    let localctx = new NewInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CPP14Parser.RULE_newInitializer);
    var _la = 0;
    try {
      this.state = 687;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.LeftParen:
          this.enterOuterAlt(localctx, 1);
          this.state = 681;
          this.match(CPP14Parser.LeftParen);
          this.state = 683;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 71 & ~31) == 0 && (1 << _la - 71 & (1 << CPP14Parser.Throw - 71 | 1 << CPP14Parser.Typeid_ - 71 | 1 << CPP14Parser.Typename_ - 71 | 1 << CPP14Parser.Unsigned - 71 | 1 << CPP14Parser.Void - 71 | 1 << CPP14Parser.Wchar - 71 | 1 << CPP14Parser.LeftParen - 71 | 1 << CPP14Parser.LeftBracket - 71 | 1 << CPP14Parser.LeftBrace - 71 | 1 << CPP14Parser.Plus - 71 | 1 << CPP14Parser.Minus - 71 | 1 << CPP14Parser.Star - 71 | 1 << CPP14Parser.And - 71 | 1 << CPP14Parser.Or - 71 | 1 << CPP14Parser.Tilde - 71 | 1 << CPP14Parser.Not - 71)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
            this.state = 682;
            this.expressionList();
          }
          this.state = 685;
          this.match(CPP14Parser.RightParen);
          break;
        case CPP14Parser.LeftBrace:
          this.enterOuterAlt(localctx, 2);
          this.state = 686;
          this.bracedInitList();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  deleteExpression() {
    let localctx = new DeleteExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CPP14Parser.RULE_deleteExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 690;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Doublecolon) {
        this.state = 689;
        this.match(CPP14Parser.Doublecolon);
      }
      this.state = 692;
      this.match(CPP14Parser.Delete);
      this.state = 695;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);
      if (la_ === 1) {
        this.state = 693;
        this.match(CPP14Parser.LeftBracket);
        this.state = 694;
        this.match(CPP14Parser.RightBracket);
      }
      this.state = 697;
      this.castExpression();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  noExceptExpression() {
    let localctx = new NoExceptExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CPP14Parser.RULE_noExceptExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 699;
      this.match(CPP14Parser.Noexcept);
      this.state = 700;
      this.match(CPP14Parser.LeftParen);
      this.state = 701;
      this.expression();
      this.state = 702;
      this.match(CPP14Parser.RightParen);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  castExpression() {
    let localctx = new CastExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CPP14Parser.RULE_castExpression);
    try {
      this.state = 710;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 57, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 704;
          this.unaryExpression();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 705;
          this.match(CPP14Parser.LeftParen);
          this.state = 706;
          this.theTypeId();
          this.state = 707;
          this.match(CPP14Parser.RightParen);
          this.state = 708;
          this.castExpression();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  pointerMemberExpression() {
    let localctx = new PointerMemberExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CPP14Parser.RULE_pointerMemberExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 712;
      this.castExpression();
      this.state = 717;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.ArrowStar || _la === CPP14Parser.DotStar) {
        this.state = 713;
        _la = this._input.LA(1);
        if (!(_la === CPP14Parser.ArrowStar || _la === CPP14Parser.DotStar)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 714;
        this.castExpression();
        this.state = 719;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  multiplicativeExpression() {
    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CPP14Parser.RULE_multiplicativeExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 720;
      this.pointerMemberExpression();
      this.state = 725;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la - 93 & ~31) == 0 && (1 << _la - 93 & (1 << CPP14Parser.Star - 93 | 1 << CPP14Parser.Div - 93 | 1 << CPP14Parser.Mod - 93)) !== 0) {
        this.state = 721;
        _la = this._input.LA(1);
        if (!((_la - 93 & ~31) == 0 && (1 << _la - 93 & (1 << CPP14Parser.Star - 93 | 1 << CPP14Parser.Div - 93 | 1 << CPP14Parser.Mod - 93)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 722;
        this.pointerMemberExpression();
        this.state = 727;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  additiveExpression() {
    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CPP14Parser.RULE_additiveExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 728;
      this.multiplicativeExpression();
      this.state = 733;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Plus || _la === CPP14Parser.Minus) {
        this.state = 729;
        _la = this._input.LA(1);
        if (!(_la === CPP14Parser.Plus || _la === CPP14Parser.Minus)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 730;
        this.multiplicativeExpression();
        this.state = 735;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  shiftExpression() {
    let localctx = new ShiftExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CPP14Parser.RULE_shiftExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 736;
      this.additiveExpression();
      this.state = 742;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 61, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 737;
          this.shiftOperator();
          this.state = 738;
          this.additiveExpression();
        }
        this.state = 744;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 61, this._ctx);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  shiftOperator() {
    let localctx = new ShiftOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CPP14Parser.RULE_shiftOperator);
    try {
      this.state = 749;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Greater:
          this.enterOuterAlt(localctx, 1);
          this.state = 745;
          this.match(CPP14Parser.Greater);
          this.state = 746;
          this.match(CPP14Parser.Greater);
          break;
        case CPP14Parser.Less:
          this.enterOuterAlt(localctx, 2);
          this.state = 747;
          this.match(CPP14Parser.Less);
          this.state = 748;
          this.match(CPP14Parser.Less);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  relationalExpression() {
    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CPP14Parser.RULE_relationalExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 751;
      this.shiftExpression();
      this.state = 756;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 63, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 752;
          _la = this._input.LA(1);
          if (!((_la - 102 & ~31) == 0 && (1 << _la - 102 & (1 << CPP14Parser.Less - 102 | 1 << CPP14Parser.Greater - 102 | 1 << CPP14Parser.LessEqual - 102 | 1 << CPP14Parser.GreaterEqual - 102)) !== 0)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 753;
          this.shiftExpression();
        }
        this.state = 758;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 63, this._ctx);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  equalityExpression() {
    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CPP14Parser.RULE_equalityExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 759;
      this.relationalExpression();
      this.state = 764;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Equal || _la === CPP14Parser.NotEqual) {
        this.state = 760;
        _la = this._input.LA(1);
        if (!(_la === CPP14Parser.Equal || _la === CPP14Parser.NotEqual)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 761;
        this.relationalExpression();
        this.state = 766;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  andExpression() {
    let localctx = new AndExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CPP14Parser.RULE_andExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 767;
      this.equalityExpression();
      this.state = 772;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.And) {
        this.state = 768;
        this.match(CPP14Parser.And);
        this.state = 769;
        this.equalityExpression();
        this.state = 774;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  exclusiveOrExpression() {
    let localctx = new ExclusiveOrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CPP14Parser.RULE_exclusiveOrExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 775;
      this.andExpression();
      this.state = 780;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Caret) {
        this.state = 776;
        this.match(CPP14Parser.Caret);
        this.state = 777;
        this.andExpression();
        this.state = 782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  inclusiveOrExpression() {
    let localctx = new InclusiveOrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CPP14Parser.RULE_inclusiveOrExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 783;
      this.exclusiveOrExpression();
      this.state = 788;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Or) {
        this.state = 784;
        this.match(CPP14Parser.Or);
        this.state = 785;
        this.exclusiveOrExpression();
        this.state = 790;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  logicalAndExpression() {
    let localctx = new LogicalAndExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CPP14Parser.RULE_logicalAndExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 791;
      this.inclusiveOrExpression();
      this.state = 796;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.AndAnd) {
        this.state = 792;
        this.match(CPP14Parser.AndAnd);
        this.state = 793;
        this.inclusiveOrExpression();
        this.state = 798;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  logicalOrExpression() {
    let localctx = new LogicalOrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CPP14Parser.RULE_logicalOrExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 799;
      this.logicalAndExpression();
      this.state = 804;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.OrOr) {
        this.state = 800;
        this.match(CPP14Parser.OrOr);
        this.state = 801;
        this.logicalAndExpression();
        this.state = 806;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  conditionalExpression() {
    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CPP14Parser.RULE_conditionalExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 807;
      this.logicalOrExpression();
      this.state = 813;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Question) {
        this.state = 808;
        this.match(CPP14Parser.Question);
        this.state = 809;
        this.expression();
        this.state = 810;
        this.match(CPP14Parser.Colon);
        this.state = 811;
        this.assignmentExpression();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  assignmentExpression() {
    let localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CPP14Parser.RULE_assignmentExpression);
    try {
      this.state = 821;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 815;
          this.conditionalExpression();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 816;
          this.logicalOrExpression();
          this.state = 817;
          this.assignmentOperator();
          this.state = 818;
          this.initializerClause();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 820;
          this.throwExpression();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  assignmentOperator() {
    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CPP14Parser.RULE_assignmentOperator);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 823;
      _la = this._input.LA(1);
      if (!((_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << CPP14Parser.Assign - 101 | 1 << CPP14Parser.PlusAssign - 101 | 1 << CPP14Parser.MinusAssign - 101 | 1 << CPP14Parser.StarAssign - 101 | 1 << CPP14Parser.DivAssign - 101 | 1 << CPP14Parser.ModAssign - 101 | 1 << CPP14Parser.XorAssign - 101 | 1 << CPP14Parser.AndAssign - 101 | 1 << CPP14Parser.OrAssign - 101 | 1 << CPP14Parser.LeftShiftAssign - 101 | 1 << CPP14Parser.RightShiftAssign - 101)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  expression() {
    let localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CPP14Parser.RULE_expression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 825;
      this.assignmentExpression();
      this.state = 830;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Comma) {
        this.state = 826;
        this.match(CPP14Parser.Comma);
        this.state = 827;
        this.assignmentExpression();
        this.state = 832;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  constantExpression() {
    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CPP14Parser.RULE_constantExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 833;
      this.conditionalExpression();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  statement() {
    let localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CPP14Parser.RULE_statement);
    try {
      this.state = 848;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 75, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 835;
          this.labeledStatement();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 836;
          this.declarationStatement();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 838;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);
          if (la_ === 1) {
            this.state = 837;
            this.attributeSpecifierSeq();
          }
          this.state = 846;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CPP14Parser.IntegerLiteral:
            case CPP14Parser.CharacterLiteral:
            case CPP14Parser.FloatingLiteral:
            case CPP14Parser.StringLiteral:
            case CPP14Parser.BooleanLiteral:
            case CPP14Parser.PointerLiteral:
            case CPP14Parser.UserDefinedLiteral:
            case CPP14Parser.Alignof:
            case CPP14Parser.Auto:
            case CPP14Parser.Bool:
            case CPP14Parser.Char:
            case CPP14Parser.Char16:
            case CPP14Parser.Char32:
            case CPP14Parser.Const_cast:
            case CPP14Parser.Decltype:
            case CPP14Parser.Delete:
            case CPP14Parser.Double:
            case CPP14Parser.Dynamic_cast:
            case CPP14Parser.Float:
            case CPP14Parser.Int:
            case CPP14Parser.Long:
            case CPP14Parser.New:
            case CPP14Parser.Noexcept:
            case CPP14Parser.Operator:
            case CPP14Parser.Reinterpret_cast:
            case CPP14Parser.Short:
            case CPP14Parser.Signed:
            case CPP14Parser.Sizeof:
            case CPP14Parser.Static_cast:
            case CPP14Parser.This:
            case CPP14Parser.Throw:
            case CPP14Parser.Typeid_:
            case CPP14Parser.Typename_:
            case CPP14Parser.Unsigned:
            case CPP14Parser.Void:
            case CPP14Parser.Wchar:
            case CPP14Parser.LeftParen:
            case CPP14Parser.LeftBracket:
            case CPP14Parser.Plus:
            case CPP14Parser.Minus:
            case CPP14Parser.Star:
            case CPP14Parser.And:
            case CPP14Parser.Or:
            case CPP14Parser.Tilde:
            case CPP14Parser.Not:
            case CPP14Parser.PlusPlus:
            case CPP14Parser.MinusMinus:
            case CPP14Parser.Doublecolon:
            case CPP14Parser.Semi:
            case CPP14Parser.Identifier:
              this.state = 840;
              this.expressionStatement();
              break;
            case CPP14Parser.LeftBrace:
              this.state = 841;
              this.compoundStatement();
              break;
            case CPP14Parser.If:
            case CPP14Parser.Switch:
              this.state = 842;
              this.selectionStatement();
              break;
            case CPP14Parser.Do:
            case CPP14Parser.For:
            case CPP14Parser.While:
              this.state = 843;
              this.iterationStatement();
              break;
            case CPP14Parser.Break:
            case CPP14Parser.Continue:
            case CPP14Parser.Goto:
            case CPP14Parser.Return:
              this.state = 844;
              this.jumpStatement();
              break;
            case CPP14Parser.Try:
              this.state = 845;
              this.tryBlock();
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  labeledStatement() {
    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CPP14Parser.RULE_labeledStatement);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 851;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
        this.state = 850;
        this.attributeSpecifierSeq();
      }
      this.state = 857;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Identifier:
          this.state = 853;
          this.match(CPP14Parser.Identifier);
          break;
        case CPP14Parser.Case:
          this.state = 854;
          this.match(CPP14Parser.Case);
          this.state = 855;
          this.constantExpression();
          break;
        case CPP14Parser.Default:
          this.state = 856;
          this.match(CPP14Parser.Default);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
      this.state = 859;
      this.match(CPP14Parser.Colon);
      this.state = 860;
      this.statement();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  expressionStatement() {
    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CPP14Parser.RULE_expressionStatement);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 863;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 71 & ~31) == 0 && (1 << _la - 71 & (1 << CPP14Parser.Throw - 71 | 1 << CPP14Parser.Typeid_ - 71 | 1 << CPP14Parser.Typename_ - 71 | 1 << CPP14Parser.Unsigned - 71 | 1 << CPP14Parser.Void - 71 | 1 << CPP14Parser.Wchar - 71 | 1 << CPP14Parser.LeftParen - 71 | 1 << CPP14Parser.LeftBracket - 71 | 1 << CPP14Parser.Plus - 71 | 1 << CPP14Parser.Minus - 71 | 1 << CPP14Parser.Star - 71 | 1 << CPP14Parser.And - 71 | 1 << CPP14Parser.Or - 71 | 1 << CPP14Parser.Tilde - 71 | 1 << CPP14Parser.Not - 71)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
        this.state = 862;
        this.expression();
      }
      this.state = 865;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  compoundStatement() {
    let localctx = new CompoundStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CPP14Parser.RULE_compoundStatement);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 867;
      this.match(CPP14Parser.LeftBrace);
      this.state = 869;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignas | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Asm | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Break | 1 << CPP14Parser.Case | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Class | 1 << CPP14Parser.Const | 1 << CPP14Parser.Constexpr | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Continue | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Default | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Do | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << CPP14Parser.Enum - 33 | 1 << CPP14Parser.Explicit - 33 | 1 << CPP14Parser.Extern - 33 | 1 << CPP14Parser.Float - 33 | 1 << CPP14Parser.For - 33 | 1 << CPP14Parser.Friend - 33 | 1 << CPP14Parser.Goto - 33 | 1 << CPP14Parser.If - 33 | 1 << CPP14Parser.Inline - 33 | 1 << CPP14Parser.Int - 33 | 1 << CPP14Parser.Long - 33 | 1 << CPP14Parser.Mutable - 33 | 1 << CPP14Parser.Namespace - 33 | 1 << CPP14Parser.New - 33 | 1 << CPP14Parser.Noexcept - 33 | 1 << CPP14Parser.Operator - 33 | 1 << CPP14Parser.Register - 33 | 1 << CPP14Parser.Reinterpret_cast - 33 | 1 << CPP14Parser.Return - 33 | 1 << CPP14Parser.Short - 33 | 1 << CPP14Parser.Signed - 33 | 1 << CPP14Parser.Sizeof - 33 | 1 << CPP14Parser.Static - 33 | 1 << CPP14Parser.Static_assert - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << CPP14Parser.Static_cast - 65 | 1 << CPP14Parser.Struct - 65 | 1 << CPP14Parser.Switch - 65 | 1 << CPP14Parser.This - 65 | 1 << CPP14Parser.Thread_local - 65 | 1 << CPP14Parser.Throw - 65 | 1 << CPP14Parser.Try - 65 | 1 << CPP14Parser.Typedef - 65 | 1 << CPP14Parser.Typeid_ - 65 | 1 << CPP14Parser.Typename_ - 65 | 1 << CPP14Parser.Union - 65 | 1 << CPP14Parser.Unsigned - 65 | 1 << CPP14Parser.Using - 65 | 1 << CPP14Parser.Virtual - 65 | 1 << CPP14Parser.Void - 65 | 1 << CPP14Parser.Volatile - 65 | 1 << CPP14Parser.Wchar - 65 | 1 << CPP14Parser.While - 65 | 1 << CPP14Parser.LeftParen - 65 | 1 << CPP14Parser.LeftBracket - 65 | 1 << CPP14Parser.LeftBrace - 65 | 1 << CPP14Parser.Plus - 65 | 1 << CPP14Parser.Minus - 65 | 1 << CPP14Parser.Star - 65)) !== 0 || (_la - 97 & ~31) == 0 && (1 << _la - 97 & (1 << CPP14Parser.And - 97 | 1 << CPP14Parser.Or - 97 | 1 << CPP14Parser.Tilde - 97 | 1 << CPP14Parser.Not - 97 | 1 << CPP14Parser.AndAnd - 97 | 1 << CPP14Parser.PlusPlus - 97 | 1 << CPP14Parser.MinusMinus - 97 | 1 << CPP14Parser.Doublecolon - 97 | 1 << CPP14Parser.Semi - 97)) !== 0 || _la === CPP14Parser.Ellipsis || _la === CPP14Parser.Identifier) {
        this.state = 868;
        this.statementSeq();
      }
      this.state = 871;
      this.match(CPP14Parser.RightBrace);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  statementSeq() {
    let localctx = new StatementSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CPP14Parser.RULE_statementSeq);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 874;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 873;
        this.statement();
        this.state = 876;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignas | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Asm | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Break | 1 << CPP14Parser.Case | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Class | 1 << CPP14Parser.Const | 1 << CPP14Parser.Constexpr | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Continue | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Default | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Do | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << CPP14Parser.Enum - 33 | 1 << CPP14Parser.Explicit - 33 | 1 << CPP14Parser.Extern - 33 | 1 << CPP14Parser.Float - 33 | 1 << CPP14Parser.For - 33 | 1 << CPP14Parser.Friend - 33 | 1 << CPP14Parser.Goto - 33 | 1 << CPP14Parser.If - 33 | 1 << CPP14Parser.Inline - 33 | 1 << CPP14Parser.Int - 33 | 1 << CPP14Parser.Long - 33 | 1 << CPP14Parser.Mutable - 33 | 1 << CPP14Parser.Namespace - 33 | 1 << CPP14Parser.New - 33 | 1 << CPP14Parser.Noexcept - 33 | 1 << CPP14Parser.Operator - 33 | 1 << CPP14Parser.Register - 33 | 1 << CPP14Parser.Reinterpret_cast - 33 | 1 << CPP14Parser.Return - 33 | 1 << CPP14Parser.Short - 33 | 1 << CPP14Parser.Signed - 33 | 1 << CPP14Parser.Sizeof - 33 | 1 << CPP14Parser.Static - 33 | 1 << CPP14Parser.Static_assert - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << CPP14Parser.Static_cast - 65 | 1 << CPP14Parser.Struct - 65 | 1 << CPP14Parser.Switch - 65 | 1 << CPP14Parser.This - 65 | 1 << CPP14Parser.Thread_local - 65 | 1 << CPP14Parser.Throw - 65 | 1 << CPP14Parser.Try - 65 | 1 << CPP14Parser.Typedef - 65 | 1 << CPP14Parser.Typeid_ - 65 | 1 << CPP14Parser.Typename_ - 65 | 1 << CPP14Parser.Union - 65 | 1 << CPP14Parser.Unsigned - 65 | 1 << CPP14Parser.Using - 65 | 1 << CPP14Parser.Virtual - 65 | 1 << CPP14Parser.Void - 65 | 1 << CPP14Parser.Volatile - 65 | 1 << CPP14Parser.Wchar - 65 | 1 << CPP14Parser.While - 65 | 1 << CPP14Parser.LeftParen - 65 | 1 << CPP14Parser.LeftBracket - 65 | 1 << CPP14Parser.LeftBrace - 65 | 1 << CPP14Parser.Plus - 65 | 1 << CPP14Parser.Minus - 65 | 1 << CPP14Parser.Star - 65)) !== 0 || (_la - 97 & ~31) == 0 && (1 << _la - 97 & (1 << CPP14Parser.And - 97 | 1 << CPP14Parser.Or - 97 | 1 << CPP14Parser.Tilde - 97 | 1 << CPP14Parser.Not - 97 | 1 << CPP14Parser.AndAnd - 97 | 1 << CPP14Parser.PlusPlus - 97 | 1 << CPP14Parser.MinusMinus - 97 | 1 << CPP14Parser.Doublecolon - 97 | 1 << CPP14Parser.Semi - 97)) !== 0 || _la === CPP14Parser.Ellipsis || _la === CPP14Parser.Identifier);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  selectionStatement() {
    let localctx = new SelectionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CPP14Parser.RULE_selectionStatement);
    try {
      this.state = 893;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.If:
          this.enterOuterAlt(localctx, 1);
          this.state = 878;
          this.match(CPP14Parser.If);
          this.state = 879;
          this.match(CPP14Parser.LeftParen);
          this.state = 880;
          this.condition();
          this.state = 881;
          this.match(CPP14Parser.RightParen);
          this.state = 882;
          this.statement();
          this.state = 885;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 81, this._ctx);
          if (la_ === 1) {
            this.state = 883;
            this.match(CPP14Parser.Else);
            this.state = 884;
            this.statement();
          }
          break;
        case CPP14Parser.Switch:
          this.enterOuterAlt(localctx, 2);
          this.state = 887;
          this.match(CPP14Parser.Switch);
          this.state = 888;
          this.match(CPP14Parser.LeftParen);
          this.state = 889;
          this.condition();
          this.state = 890;
          this.match(CPP14Parser.RightParen);
          this.state = 891;
          this.statement();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  condition() {
    let localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CPP14Parser.RULE_condition);
    var _la = 0;
    try {
      this.state = 906;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 85, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 895;
          this.expression();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 897;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
            this.state = 896;
            this.attributeSpecifierSeq();
          }
          this.state = 899;
          this.declSpecifierSeq();
          this.state = 900;
          this.declarator();
          this.state = 904;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CPP14Parser.Assign:
              this.state = 901;
              this.match(CPP14Parser.Assign);
              this.state = 902;
              this.initializerClause();
              break;
            case CPP14Parser.LeftBrace:
              this.state = 903;
              this.bracedInitList();
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  iterationStatement() {
    let localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CPP14Parser.RULE_iterationStatement);
    var _la = 0;
    try {
      this.state = 941;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.While:
          this.enterOuterAlt(localctx, 1);
          this.state = 908;
          this.match(CPP14Parser.While);
          this.state = 909;
          this.match(CPP14Parser.LeftParen);
          this.state = 910;
          this.condition();
          this.state = 911;
          this.match(CPP14Parser.RightParen);
          this.state = 912;
          this.statement();
          break;
        case CPP14Parser.Do:
          this.enterOuterAlt(localctx, 2);
          this.state = 914;
          this.match(CPP14Parser.Do);
          this.state = 915;
          this.statement();
          this.state = 916;
          this.match(CPP14Parser.While);
          this.state = 917;
          this.match(CPP14Parser.LeftParen);
          this.state = 918;
          this.expression();
          this.state = 919;
          this.match(CPP14Parser.RightParen);
          this.state = 920;
          this.match(CPP14Parser.Semi);
          break;
        case CPP14Parser.For:
          this.enterOuterAlt(localctx, 3);
          this.state = 922;
          this.match(CPP14Parser.For);
          this.state = 923;
          this.match(CPP14Parser.LeftParen);
          this.state = 936;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);
          switch (la_) {
            case 1:
              this.state = 924;
              this.forInitStatement();
              this.state = 926;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignas | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Class | 1 << CPP14Parser.Const | 1 << CPP14Parser.Constexpr | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << CPP14Parser.Enum - 33 | 1 << CPP14Parser.Explicit - 33 | 1 << CPP14Parser.Extern - 33 | 1 << CPP14Parser.Float - 33 | 1 << CPP14Parser.Friend - 33 | 1 << CPP14Parser.Inline - 33 | 1 << CPP14Parser.Int - 33 | 1 << CPP14Parser.Long - 33 | 1 << CPP14Parser.Mutable - 33 | 1 << CPP14Parser.New - 33 | 1 << CPP14Parser.Noexcept - 33 | 1 << CPP14Parser.Operator - 33 | 1 << CPP14Parser.Register - 33 | 1 << CPP14Parser.Reinterpret_cast - 33 | 1 << CPP14Parser.Short - 33 | 1 << CPP14Parser.Signed - 33 | 1 << CPP14Parser.Sizeof - 33 | 1 << CPP14Parser.Static - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << CPP14Parser.Static_cast - 65 | 1 << CPP14Parser.Struct - 65 | 1 << CPP14Parser.This - 65 | 1 << CPP14Parser.Thread_local - 65 | 1 << CPP14Parser.Throw - 65 | 1 << CPP14Parser.Typedef - 65 | 1 << CPP14Parser.Typeid_ - 65 | 1 << CPP14Parser.Typename_ - 65 | 1 << CPP14Parser.Union - 65 | 1 << CPP14Parser.Unsigned - 65 | 1 << CPP14Parser.Virtual - 65 | 1 << CPP14Parser.Void - 65 | 1 << CPP14Parser.Volatile - 65 | 1 << CPP14Parser.Wchar - 65 | 1 << CPP14Parser.LeftParen - 65 | 1 << CPP14Parser.LeftBracket - 65 | 1 << CPP14Parser.Plus - 65 | 1 << CPP14Parser.Minus - 65 | 1 << CPP14Parser.Star - 65)) !== 0 || (_la - 97 & ~31) == 0 && (1 << _la - 97 & (1 << CPP14Parser.And - 97 | 1 << CPP14Parser.Or - 97 | 1 << CPP14Parser.Tilde - 97 | 1 << CPP14Parser.Not - 97 | 1 << CPP14Parser.PlusPlus - 97 | 1 << CPP14Parser.MinusMinus - 97 | 1 << CPP14Parser.Doublecolon - 97)) !== 0 || _la === CPP14Parser.Identifier) {
                this.state = 925;
                this.condition();
              }
              this.state = 928;
              this.match(CPP14Parser.Semi);
              this.state = 930;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 71 & ~31) == 0 && (1 << _la - 71 & (1 << CPP14Parser.Throw - 71 | 1 << CPP14Parser.Typeid_ - 71 | 1 << CPP14Parser.Typename_ - 71 | 1 << CPP14Parser.Unsigned - 71 | 1 << CPP14Parser.Void - 71 | 1 << CPP14Parser.Wchar - 71 | 1 << CPP14Parser.LeftParen - 71 | 1 << CPP14Parser.LeftBracket - 71 | 1 << CPP14Parser.Plus - 71 | 1 << CPP14Parser.Minus - 71 | 1 << CPP14Parser.Star - 71 | 1 << CPP14Parser.And - 71 | 1 << CPP14Parser.Or - 71 | 1 << CPP14Parser.Tilde - 71 | 1 << CPP14Parser.Not - 71)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
                this.state = 929;
                this.expression();
              }
              break;
            case 2:
              this.state = 932;
              this.forRangeDeclaration();
              this.state = 933;
              this.match(CPP14Parser.Colon);
              this.state = 934;
              this.forRangeInitializer();
              break;
          }
          this.state = 938;
          this.match(CPP14Parser.RightParen);
          this.state = 939;
          this.statement();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  forInitStatement() {
    let localctx = new ForInitStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CPP14Parser.RULE_forInitStatement);
    try {
      this.state = 945;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 943;
          this.expressionStatement();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 944;
          this.simpleDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  forRangeDeclaration() {
    let localctx = new ForRangeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CPP14Parser.RULE_forRangeDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 948;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
        this.state = 947;
        this.attributeSpecifierSeq();
      }
      this.state = 950;
      this.declSpecifierSeq();
      this.state = 951;
      this.declarator();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  forRangeInitializer() {
    let localctx = new ForRangeInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CPP14Parser.RULE_forRangeInitializer);
    try {
      this.state = 955;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.IntegerLiteral:
        case CPP14Parser.CharacterLiteral:
        case CPP14Parser.FloatingLiteral:
        case CPP14Parser.StringLiteral:
        case CPP14Parser.BooleanLiteral:
        case CPP14Parser.PointerLiteral:
        case CPP14Parser.UserDefinedLiteral:
        case CPP14Parser.Alignof:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Const_cast:
        case CPP14Parser.Decltype:
        case CPP14Parser.Delete:
        case CPP14Parser.Double:
        case CPP14Parser.Dynamic_cast:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.New:
        case CPP14Parser.Noexcept:
        case CPP14Parser.Operator:
        case CPP14Parser.Reinterpret_cast:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Sizeof:
        case CPP14Parser.Static_cast:
        case CPP14Parser.This:
        case CPP14Parser.Throw:
        case CPP14Parser.Typeid_:
        case CPP14Parser.Typename_:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Plus:
        case CPP14Parser.Minus:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Or:
        case CPP14Parser.Tilde:
        case CPP14Parser.Not:
        case CPP14Parser.PlusPlus:
        case CPP14Parser.MinusMinus:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 953;
          this.expression();
          break;
        case CPP14Parser.LeftBrace:
          this.enterOuterAlt(localctx, 2);
          this.state = 954;
          this.bracedInitList();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  jumpStatement() {
    let localctx = new JumpStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CPP14Parser.RULE_jumpStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 966;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Break:
          this.state = 957;
          this.match(CPP14Parser.Break);
          break;
        case CPP14Parser.Continue:
          this.state = 958;
          this.match(CPP14Parser.Continue);
          break;
        case CPP14Parser.Return:
          this.state = 959;
          this.match(CPP14Parser.Return);
          this.state = 962;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CPP14Parser.IntegerLiteral:
            case CPP14Parser.CharacterLiteral:
            case CPP14Parser.FloatingLiteral:
            case CPP14Parser.StringLiteral:
            case CPP14Parser.BooleanLiteral:
            case CPP14Parser.PointerLiteral:
            case CPP14Parser.UserDefinedLiteral:
            case CPP14Parser.Alignof:
            case CPP14Parser.Auto:
            case CPP14Parser.Bool:
            case CPP14Parser.Char:
            case CPP14Parser.Char16:
            case CPP14Parser.Char32:
            case CPP14Parser.Const_cast:
            case CPP14Parser.Decltype:
            case CPP14Parser.Delete:
            case CPP14Parser.Double:
            case CPP14Parser.Dynamic_cast:
            case CPP14Parser.Float:
            case CPP14Parser.Int:
            case CPP14Parser.Long:
            case CPP14Parser.New:
            case CPP14Parser.Noexcept:
            case CPP14Parser.Operator:
            case CPP14Parser.Reinterpret_cast:
            case CPP14Parser.Short:
            case CPP14Parser.Signed:
            case CPP14Parser.Sizeof:
            case CPP14Parser.Static_cast:
            case CPP14Parser.This:
            case CPP14Parser.Throw:
            case CPP14Parser.Typeid_:
            case CPP14Parser.Typename_:
            case CPP14Parser.Unsigned:
            case CPP14Parser.Void:
            case CPP14Parser.Wchar:
            case CPP14Parser.LeftParen:
            case CPP14Parser.LeftBracket:
            case CPP14Parser.Plus:
            case CPP14Parser.Minus:
            case CPP14Parser.Star:
            case CPP14Parser.And:
            case CPP14Parser.Or:
            case CPP14Parser.Tilde:
            case CPP14Parser.Not:
            case CPP14Parser.PlusPlus:
            case CPP14Parser.MinusMinus:
            case CPP14Parser.Doublecolon:
            case CPP14Parser.Identifier:
              this.state = 960;
              this.expression();
              break;
            case CPP14Parser.LeftBrace:
              this.state = 961;
              this.bracedInitList();
              break;
            case CPP14Parser.Semi:
              break;
            default:
              break;
          }
          break;
        case CPP14Parser.Goto:
          this.state = 964;
          this.match(CPP14Parser.Goto);
          this.state = 965;
          this.match(CPP14Parser.Identifier);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
      this.state = 968;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  declarationStatement() {
    let localctx = new DeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CPP14Parser.RULE_declarationStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 970;
      this.blockDeclaration();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  declarationseq() {
    let localctx = new DeclarationseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CPP14Parser.RULE_declarationseq);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 973;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 972;
        this.declaration();
        this.state = 975;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while ((_la - 10 & ~31) == 0 && (1 << _la - 10 & (1 << CPP14Parser.Alignas - 10 | 1 << CPP14Parser.Asm - 10 | 1 << CPP14Parser.Auto - 10 | 1 << CPP14Parser.Bool - 10 | 1 << CPP14Parser.Char - 10 | 1 << CPP14Parser.Char16 - 10 | 1 << CPP14Parser.Char32 - 10 | 1 << CPP14Parser.Class - 10 | 1 << CPP14Parser.Const - 10 | 1 << CPP14Parser.Constexpr - 10 | 1 << CPP14Parser.Decltype - 10 | 1 << CPP14Parser.Double - 10 | 1 << CPP14Parser.Enum - 10 | 1 << CPP14Parser.Explicit - 10 | 1 << CPP14Parser.Extern - 10 | 1 << CPP14Parser.Float - 10 | 1 << CPP14Parser.Friend - 10)) !== 0 || (_la - 44 & ~31) == 0 && (1 << _la - 44 & (1 << CPP14Parser.Inline - 44 | 1 << CPP14Parser.Int - 44 | 1 << CPP14Parser.Long - 44 | 1 << CPP14Parser.Mutable - 44 | 1 << CPP14Parser.Namespace - 44 | 1 << CPP14Parser.Operator - 44 | 1 << CPP14Parser.Register - 44 | 1 << CPP14Parser.Short - 44 | 1 << CPP14Parser.Signed - 44 | 1 << CPP14Parser.Static - 44 | 1 << CPP14Parser.Static_assert - 44 | 1 << CPP14Parser.Struct - 44 | 1 << CPP14Parser.Template - 44 | 1 << CPP14Parser.Thread_local - 44 | 1 << CPP14Parser.Typedef - 44)) !== 0 || (_la - 76 & ~31) == 0 && (1 << _la - 76 & (1 << CPP14Parser.Typename_ - 76 | 1 << CPP14Parser.Union - 76 | 1 << CPP14Parser.Unsigned - 76 | 1 << CPP14Parser.Using - 76 | 1 << CPP14Parser.Virtual - 76 | 1 << CPP14Parser.Void - 76 | 1 << CPP14Parser.Volatile - 76 | 1 << CPP14Parser.Wchar - 76 | 1 << CPP14Parser.LeftParen - 76 | 1 << CPP14Parser.LeftBracket - 76 | 1 << CPP14Parser.Star - 76 | 1 << CPP14Parser.And - 76 | 1 << CPP14Parser.Tilde - 76)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << CPP14Parser.AndAnd - 118 | 1 << CPP14Parser.Doublecolon - 118 | 1 << CPP14Parser.Semi - 118 | 1 << CPP14Parser.Ellipsis - 118 | 1 << CPP14Parser.Identifier - 118)) !== 0);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  declaration() {
    let localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CPP14Parser.RULE_declaration);
    try {
      this.state = 986;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 977;
          this.blockDeclaration();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 978;
          this.functionDefinition();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 979;
          this.templateDeclaration();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 980;
          this.explicitInstantiation();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 981;
          this.explicitSpecialization();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 982;
          this.linkageSpecification();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 983;
          this.namespaceDefinition();
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 984;
          this.emptyDeclaration();
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 985;
          this.attributeDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  blockDeclaration() {
    let localctx = new BlockDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CPP14Parser.RULE_blockDeclaration);
    try {
      this.state = 996;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 988;
          this.simpleDeclaration();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 989;
          this.asmDefinition();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 990;
          this.namespaceAliasDefinition();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 991;
          this.usingDeclaration();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 992;
          this.usingDirective();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 993;
          this.staticAssertDeclaration();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 994;
          this.aliasDeclaration();
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 995;
          this.opaqueEnumDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  aliasDeclaration() {
    let localctx = new AliasDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CPP14Parser.RULE_aliasDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 998;
      this.match(CPP14Parser.Using);
      this.state = 999;
      this.match(CPP14Parser.Identifier);
      this.state = 1001;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
        this.state = 1e3;
        this.attributeSpecifierSeq();
      }
      this.state = 1003;
      this.match(CPP14Parser.Assign);
      this.state = 1004;
      this.theTypeId();
      this.state = 1005;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  simpleDeclaration() {
    let localctx = new SimpleDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CPP14Parser.RULE_simpleDeclaration);
    var _la = 0;
    try {
      this.state = 1021;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Constexpr:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.Enum:
        case CPP14Parser.Explicit:
        case CPP14Parser.Extern:
        case CPP14Parser.Float:
        case CPP14Parser.Friend:
        case CPP14Parser.Inline:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Mutable:
        case CPP14Parser.Operator:
        case CPP14Parser.Register:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Static:
        case CPP14Parser.Struct:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Typedef:
        case CPP14Parser.Typename_:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Virtual:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Tilde:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Semi:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 1008;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 99, this._ctx);
          if (la_ === 1) {
            this.state = 1007;
            this.declSpecifierSeq();
          }
          this.state = 1011;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Decltype || _la === CPP14Parser.Operator || (_la - 85 & ~31) == 0 && (1 << _la - 85 & (1 << CPP14Parser.LeftParen - 85 | 1 << CPP14Parser.Star - 85 | 1 << CPP14Parser.And - 85 | 1 << CPP14Parser.Tilde - 85)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << CPP14Parser.AndAnd - 118 | 1 << CPP14Parser.Doublecolon - 118 | 1 << CPP14Parser.Ellipsis - 118 | 1 << CPP14Parser.Identifier - 118)) !== 0) {
            this.state = 1010;
            this.initDeclaratorList();
          }
          this.state = 1013;
          this.match(CPP14Parser.Semi);
          break;
        case CPP14Parser.Alignas:
        case CPP14Parser.LeftBracket:
          this.enterOuterAlt(localctx, 2);
          this.state = 1014;
          this.attributeSpecifierSeq();
          this.state = 1016;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 101, this._ctx);
          if (la_ === 1) {
            this.state = 1015;
            this.declSpecifierSeq();
          }
          this.state = 1018;
          this.initDeclaratorList();
          this.state = 1019;
          this.match(CPP14Parser.Semi);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  staticAssertDeclaration() {
    let localctx = new StaticAssertDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CPP14Parser.RULE_staticAssertDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1023;
      this.match(CPP14Parser.Static_assert);
      this.state = 1024;
      this.match(CPP14Parser.LeftParen);
      this.state = 1025;
      this.constantExpression();
      this.state = 1026;
      this.match(CPP14Parser.Comma);
      this.state = 1027;
      this.match(CPP14Parser.StringLiteral);
      this.state = 1028;
      this.match(CPP14Parser.RightParen);
      this.state = 1029;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  emptyDeclaration() {
    let localctx = new EmptyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CPP14Parser.RULE_emptyDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1031;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  attributeDeclaration() {
    let localctx = new AttributeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CPP14Parser.RULE_attributeDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1033;
      this.attributeSpecifierSeq();
      this.state = 1034;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  declSpecifier() {
    let localctx = new DeclSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CPP14Parser.RULE_declSpecifier);
    try {
      this.state = 1042;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Extern:
        case CPP14Parser.Mutable:
        case CPP14Parser.Register:
        case CPP14Parser.Static:
        case CPP14Parser.Thread_local:
          this.enterOuterAlt(localctx, 1);
          this.state = 1036;
          this.storageClassSpecifier();
          break;
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.Enum:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Struct:
        case CPP14Parser.Typename_:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 2);
          this.state = 1037;
          this.typeSpecifier();
          break;
        case CPP14Parser.Explicit:
        case CPP14Parser.Inline:
        case CPP14Parser.Virtual:
          this.enterOuterAlt(localctx, 3);
          this.state = 1038;
          this.functionSpecifier();
          break;
        case CPP14Parser.Friend:
          this.enterOuterAlt(localctx, 4);
          this.state = 1039;
          this.match(CPP14Parser.Friend);
          break;
        case CPP14Parser.Typedef:
          this.enterOuterAlt(localctx, 5);
          this.state = 1040;
          this.match(CPP14Parser.Typedef);
          break;
        case CPP14Parser.Constexpr:
          this.enterOuterAlt(localctx, 6);
          this.state = 1041;
          this.match(CPP14Parser.Constexpr);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  declSpecifierSeq() {
    let localctx = new DeclSpecifierSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CPP14Parser.RULE_declSpecifierSeq);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1045;
      this._errHandler.sync(this);
      var _alt = 1 + 1;
      do {
        switch (_alt) {
          case 1 + 1:
            this.state = 1044;
            this.declSpecifier();
            break;
          default:
            throw new import_antlr4.default.error.NoViableAltException(this);
        }
        this.state = 1047;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 104, this._ctx);
      } while (_alt != 1 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER);
      this.state = 1050;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 105, this._ctx);
      if (la_ === 1) {
        this.state = 1049;
        this.attributeSpecifierSeq();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  storageClassSpecifier() {
    let localctx = new StorageClassSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CPP14Parser.RULE_storageClassSpecifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1052;
      _la = this._input.LA(1);
      if (!((_la - 36 & ~31) == 0 && (1 << _la - 36 & (1 << CPP14Parser.Extern - 36 | 1 << CPP14Parser.Mutable - 36 | 1 << CPP14Parser.Register - 36 | 1 << CPP14Parser.Static - 36)) !== 0 || _la === CPP14Parser.Thread_local)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionSpecifier() {
    let localctx = new FunctionSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CPP14Parser.RULE_functionSpecifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1054;
      _la = this._input.LA(1);
      if (!(_la === CPP14Parser.Explicit || _la === CPP14Parser.Inline || _la === CPP14Parser.Virtual)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typedefName() {
    let localctx = new TypedefNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CPP14Parser.RULE_typedefName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1056;
      this.match(CPP14Parser.Identifier);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeSpecifier() {
    let localctx = new TypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CPP14Parser.RULE_typeSpecifier);
    try {
      this.state = 1061;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 106, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1058;
          this.trailingTypeSpecifier();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1059;
          this.classSpecifier();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1060;
          this.enumSpecifier();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  trailingTypeSpecifier() {
    let localctx = new TrailingTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CPP14Parser.RULE_trailingTypeSpecifier);
    try {
      this.state = 1067;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 1063;
          this.simpleTypeSpecifier();
          break;
        case CPP14Parser.Class:
        case CPP14Parser.Enum:
        case CPP14Parser.Struct:
          this.enterOuterAlt(localctx, 2);
          this.state = 1064;
          this.elaboratedTypeSpecifier();
          break;
        case CPP14Parser.Typename_:
          this.enterOuterAlt(localctx, 3);
          this.state = 1065;
          this.typeNameSpecifier();
          break;
        case CPP14Parser.Const:
        case CPP14Parser.Volatile:
          this.enterOuterAlt(localctx, 4);
          this.state = 1066;
          this.cvQualifier();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeSpecifierSeq() {
    let localctx = new TypeSpecifierSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CPP14Parser.RULE_typeSpecifierSeq);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1070;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 1069;
            this.typeSpecifier();
            break;
          default:
            throw new import_antlr4.default.error.NoViableAltException(this);
        }
        this.state = 1072;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 108, this._ctx);
      } while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER);
      this.state = 1075;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 109, this._ctx);
      if (la_ === 1) {
        this.state = 1074;
        this.attributeSpecifierSeq();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  trailingTypeSpecifierSeq() {
    let localctx = new TrailingTypeSpecifierSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CPP14Parser.RULE_trailingTypeSpecifierSeq);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1078;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 1077;
            this.trailingTypeSpecifier();
            break;
          default:
            throw new import_antlr4.default.error.NoViableAltException(this);
        }
        this.state = 1080;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 110, this._ctx);
      } while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER);
      this.state = 1083;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 111, this._ctx);
      if (la_ === 1) {
        this.state = 1082;
        this.attributeSpecifierSeq();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  simpleTypeLengthModifier() {
    let localctx = new SimpleTypeLengthModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CPP14Parser.RULE_simpleTypeLengthModifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1085;
      _la = this._input.LA(1);
      if (!(_la === CPP14Parser.Long || _la === CPP14Parser.Short)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  simpleTypeSignednessModifier() {
    let localctx = new SimpleTypeSignednessModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CPP14Parser.RULE_simpleTypeSignednessModifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1087;
      _la = this._input.LA(1);
      if (!(_la === CPP14Parser.Signed || _la === CPP14Parser.Unsigned)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  simpleTypeSpecifier() {
    let localctx = new SimpleTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CPP14Parser.RULE_simpleTypeSpecifier);
    var _la = 0;
    try {
      this.state = 1141;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 122, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1090;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 112, this._ctx);
          if (la_ === 1) {
            this.state = 1089;
            this.nestedNameSpecifier(0);
          }
          this.state = 1092;
          this.theTypeName();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1093;
          this.nestedNameSpecifier(0);
          this.state = 1094;
          this.match(CPP14Parser.Template);
          this.state = 1095;
          this.simpleTemplateId();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1097;
          this.simpleTypeSignednessModifier();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1099;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Signed || _la === CPP14Parser.Unsigned) {
            this.state = 1098;
            this.simpleTypeSignednessModifier();
          }
          this.state = 1102;
          this._errHandler.sync(this);
          var _alt = 1;
          do {
            switch (_alt) {
              case 1:
                this.state = 1101;
                this.simpleTypeLengthModifier();
                break;
              default:
                throw new import_antlr4.default.error.NoViableAltException(this);
            }
            this.state = 1104;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 114, this._ctx);
          } while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER);
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1107;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Signed || _la === CPP14Parser.Unsigned) {
            this.state = 1106;
            this.simpleTypeSignednessModifier();
          }
          this.state = 1109;
          this.match(CPP14Parser.Char);
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1111;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Signed || _la === CPP14Parser.Unsigned) {
            this.state = 1110;
            this.simpleTypeSignednessModifier();
          }
          this.state = 1113;
          this.match(CPP14Parser.Char16);
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1115;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Signed || _la === CPP14Parser.Unsigned) {
            this.state = 1114;
            this.simpleTypeSignednessModifier();
          }
          this.state = 1117;
          this.match(CPP14Parser.Char32);
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 1119;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Signed || _la === CPP14Parser.Unsigned) {
            this.state = 1118;
            this.simpleTypeSignednessModifier();
          }
          this.state = 1121;
          this.match(CPP14Parser.Wchar);
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 1122;
          this.match(CPP14Parser.Bool);
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 1124;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Signed || _la === CPP14Parser.Unsigned) {
            this.state = 1123;
            this.simpleTypeSignednessModifier();
          }
          this.state = 1129;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CPP14Parser.Long || _la === CPP14Parser.Short) {
            this.state = 1126;
            this.simpleTypeLengthModifier();
            this.state = 1131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1132;
          this.match(CPP14Parser.Int);
          break;
        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 1133;
          this.match(CPP14Parser.Float);
          break;
        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 1135;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Long || _la === CPP14Parser.Short) {
            this.state = 1134;
            this.simpleTypeLengthModifier();
          }
          this.state = 1137;
          this.match(CPP14Parser.Double);
          break;
        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 1138;
          this.match(CPP14Parser.Void);
          break;
        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 1139;
          this.match(CPP14Parser.Auto);
          break;
        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 1140;
          this.decltypeSpecifier();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  theTypeName() {
    let localctx = new TheTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CPP14Parser.RULE_theTypeName);
    try {
      this.state = 1147;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 123, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1143;
          this.className();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1144;
          this.enumName();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1145;
          this.typedefName();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1146;
          this.simpleTemplateId();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  decltypeSpecifier() {
    let localctx = new DecltypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CPP14Parser.RULE_decltypeSpecifier);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1149;
      this.match(CPP14Parser.Decltype);
      this.state = 1150;
      this.match(CPP14Parser.LeftParen);
      this.state = 1153;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 124, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1151;
          this.expression();
          break;
        case 2:
          this.state = 1152;
          this.match(CPP14Parser.Auto);
          break;
      }
      this.state = 1155;
      this.match(CPP14Parser.RightParen);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  elaboratedTypeSpecifier() {
    let localctx = new ElaboratedTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CPP14Parser.RULE_elaboratedTypeSpecifier);
    var _la = 0;
    try {
      this.state = 1179;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Class:
        case CPP14Parser.Struct:
          this.enterOuterAlt(localctx, 1);
          this.state = 1157;
          this.classKey();
          this.state = 1172;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 128, this._ctx);
          switch (la_) {
            case 1:
              this.state = 1159;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
                this.state = 1158;
                this.attributeSpecifierSeq();
              }
              this.state = 1162;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
              if (la_ === 1) {
                this.state = 1161;
                this.nestedNameSpecifier(0);
              }
              this.state = 1164;
              this.match(CPP14Parser.Identifier);
              break;
            case 2:
              this.state = 1165;
              this.simpleTemplateId();
              break;
            case 3:
              this.state = 1166;
              this.nestedNameSpecifier(0);
              this.state = 1168;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CPP14Parser.Template) {
                this.state = 1167;
                this.match(CPP14Parser.Template);
              }
              this.state = 1170;
              this.simpleTemplateId();
              break;
          }
          break;
        case CPP14Parser.Enum:
          this.enterOuterAlt(localctx, 2);
          this.state = 1174;
          this.match(CPP14Parser.Enum);
          this.state = 1176;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 129, this._ctx);
          if (la_ === 1) {
            this.state = 1175;
            this.nestedNameSpecifier(0);
          }
          this.state = 1178;
          this.match(CPP14Parser.Identifier);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumName() {
    let localctx = new EnumNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CPP14Parser.RULE_enumName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1181;
      this.match(CPP14Parser.Identifier);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumSpecifier() {
    let localctx = new EnumSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CPP14Parser.RULE_enumSpecifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1183;
      this.enumHead();
      this.state = 1184;
      this.match(CPP14Parser.LeftBrace);
      this.state = 1189;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Identifier) {
        this.state = 1185;
        this.enumeratorList();
        this.state = 1187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CPP14Parser.Comma) {
          this.state = 1186;
          this.match(CPP14Parser.Comma);
        }
      }
      this.state = 1191;
      this.match(CPP14Parser.RightBrace);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumHead() {
    let localctx = new EnumHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CPP14Parser.RULE_enumHead);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1193;
      this.enumkey();
      this.state = 1195;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
        this.state = 1194;
        this.attributeSpecifierSeq();
      }
      this.state = 1201;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Decltype || _la === CPP14Parser.Doublecolon || _la === CPP14Parser.Identifier) {
        this.state = 1198;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 134, this._ctx);
        if (la_ === 1) {
          this.state = 1197;
          this.nestedNameSpecifier(0);
        }
        this.state = 1200;
        this.match(CPP14Parser.Identifier);
      }
      this.state = 1204;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Colon) {
        this.state = 1203;
        this.enumbase();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  opaqueEnumDeclaration() {
    let localctx = new OpaqueEnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CPP14Parser.RULE_opaqueEnumDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1206;
      this.enumkey();
      this.state = 1208;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
        this.state = 1207;
        this.attributeSpecifierSeq();
      }
      this.state = 1210;
      this.match(CPP14Parser.Identifier);
      this.state = 1212;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Colon) {
        this.state = 1211;
        this.enumbase();
      }
      this.state = 1214;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumkey() {
    let localctx = new EnumkeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CPP14Parser.RULE_enumkey);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1216;
      this.match(CPP14Parser.Enum);
      this.state = 1218;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Class || _la === CPP14Parser.Struct) {
        this.state = 1217;
        _la = this._input.LA(1);
        if (!(_la === CPP14Parser.Class || _la === CPP14Parser.Struct)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumbase() {
    let localctx = new EnumbaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CPP14Parser.RULE_enumbase);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1220;
      this.match(CPP14Parser.Colon);
      this.state = 1221;
      this.typeSpecifierSeq();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumeratorList() {
    let localctx = new EnumeratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CPP14Parser.RULE_enumeratorList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1223;
      this.enumeratorDefinition();
      this.state = 1228;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 140, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1224;
          this.match(CPP14Parser.Comma);
          this.state = 1225;
          this.enumeratorDefinition();
        }
        this.state = 1230;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 140, this._ctx);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumeratorDefinition() {
    let localctx = new EnumeratorDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CPP14Parser.RULE_enumeratorDefinition);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1231;
      this.enumerator();
      this.state = 1234;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Assign) {
        this.state = 1232;
        this.match(CPP14Parser.Assign);
        this.state = 1233;
        this.constantExpression();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumerator() {
    let localctx = new EnumeratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CPP14Parser.RULE_enumerator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1236;
      this.match(CPP14Parser.Identifier);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  namespaceName() {
    let localctx = new NamespaceNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CPP14Parser.RULE_namespaceName);
    try {
      this.state = 1240;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 142, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1238;
          this.originalNamespaceName();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1239;
          this.namespaceAlias();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  originalNamespaceName() {
    let localctx = new OriginalNamespaceNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CPP14Parser.RULE_originalNamespaceName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1242;
      this.match(CPP14Parser.Identifier);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  namespaceDefinition() {
    let localctx = new NamespaceDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CPP14Parser.RULE_namespaceDefinition);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1245;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Inline) {
        this.state = 1244;
        this.match(CPP14Parser.Inline);
      }
      this.state = 1247;
      this.match(CPP14Parser.Namespace);
      this.state = 1250;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 144, this._ctx);
      if (la_ === 1) {
        this.state = 1248;
        this.match(CPP14Parser.Identifier);
      } else if (la_ === 2) {
        this.state = 1249;
        this.originalNamespaceName();
      }
      this.state = 1252;
      this.match(CPP14Parser.LeftBrace);
      this.state = 1254;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 10 & ~31) == 0 && (1 << _la - 10 & (1 << CPP14Parser.Alignas - 10 | 1 << CPP14Parser.Asm - 10 | 1 << CPP14Parser.Auto - 10 | 1 << CPP14Parser.Bool - 10 | 1 << CPP14Parser.Char - 10 | 1 << CPP14Parser.Char16 - 10 | 1 << CPP14Parser.Char32 - 10 | 1 << CPP14Parser.Class - 10 | 1 << CPP14Parser.Const - 10 | 1 << CPP14Parser.Constexpr - 10 | 1 << CPP14Parser.Decltype - 10 | 1 << CPP14Parser.Double - 10 | 1 << CPP14Parser.Enum - 10 | 1 << CPP14Parser.Explicit - 10 | 1 << CPP14Parser.Extern - 10 | 1 << CPP14Parser.Float - 10 | 1 << CPP14Parser.Friend - 10)) !== 0 || (_la - 44 & ~31) == 0 && (1 << _la - 44 & (1 << CPP14Parser.Inline - 44 | 1 << CPP14Parser.Int - 44 | 1 << CPP14Parser.Long - 44 | 1 << CPP14Parser.Mutable - 44 | 1 << CPP14Parser.Namespace - 44 | 1 << CPP14Parser.Operator - 44 | 1 << CPP14Parser.Register - 44 | 1 << CPP14Parser.Short - 44 | 1 << CPP14Parser.Signed - 44 | 1 << CPP14Parser.Static - 44 | 1 << CPP14Parser.Static_assert - 44 | 1 << CPP14Parser.Struct - 44 | 1 << CPP14Parser.Template - 44 | 1 << CPP14Parser.Thread_local - 44 | 1 << CPP14Parser.Typedef - 44)) !== 0 || (_la - 76 & ~31) == 0 && (1 << _la - 76 & (1 << CPP14Parser.Typename_ - 76 | 1 << CPP14Parser.Union - 76 | 1 << CPP14Parser.Unsigned - 76 | 1 << CPP14Parser.Using - 76 | 1 << CPP14Parser.Virtual - 76 | 1 << CPP14Parser.Void - 76 | 1 << CPP14Parser.Volatile - 76 | 1 << CPP14Parser.Wchar - 76 | 1 << CPP14Parser.LeftParen - 76 | 1 << CPP14Parser.LeftBracket - 76 | 1 << CPP14Parser.Star - 76 | 1 << CPP14Parser.And - 76 | 1 << CPP14Parser.Tilde - 76)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << CPP14Parser.AndAnd - 118 | 1 << CPP14Parser.Doublecolon - 118 | 1 << CPP14Parser.Semi - 118 | 1 << CPP14Parser.Ellipsis - 118 | 1 << CPP14Parser.Identifier - 118)) !== 0) {
        this.state = 1253;
        localctx.namespaceBody = this.declarationseq();
      }
      this.state = 1256;
      this.match(CPP14Parser.RightBrace);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  namespaceAlias() {
    let localctx = new NamespaceAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CPP14Parser.RULE_namespaceAlias);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1258;
      this.match(CPP14Parser.Identifier);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  namespaceAliasDefinition() {
    let localctx = new NamespaceAliasDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CPP14Parser.RULE_namespaceAliasDefinition);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1260;
      this.match(CPP14Parser.Namespace);
      this.state = 1261;
      this.match(CPP14Parser.Identifier);
      this.state = 1262;
      this.match(CPP14Parser.Assign);
      this.state = 1263;
      this.qualifiednamespacespecifier();
      this.state = 1264;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  qualifiednamespacespecifier() {
    let localctx = new QualifiednamespacespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CPP14Parser.RULE_qualifiednamespacespecifier);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1267;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 146, this._ctx);
      if (la_ === 1) {
        this.state = 1266;
        this.nestedNameSpecifier(0);
      }
      this.state = 1269;
      this.namespaceName();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  usingDeclaration() {
    let localctx = new UsingDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CPP14Parser.RULE_usingDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1271;
      this.match(CPP14Parser.Using);
      this.state = 1277;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 148, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1273;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Typename_) {
            this.state = 1272;
            this.match(CPP14Parser.Typename_);
          }
          this.state = 1275;
          this.nestedNameSpecifier(0);
          break;
        case 2:
          this.state = 1276;
          this.match(CPP14Parser.Doublecolon);
          break;
      }
      this.state = 1279;
      this.unqualifiedId();
      this.state = 1280;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  usingDirective() {
    let localctx = new UsingDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CPP14Parser.RULE_usingDirective);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1283;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
        this.state = 1282;
        this.attributeSpecifierSeq();
      }
      this.state = 1285;
      this.match(CPP14Parser.Using);
      this.state = 1286;
      this.match(CPP14Parser.Namespace);
      this.state = 1288;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 150, this._ctx);
      if (la_ === 1) {
        this.state = 1287;
        this.nestedNameSpecifier(0);
      }
      this.state = 1290;
      this.namespaceName();
      this.state = 1291;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  asmDefinition() {
    let localctx = new AsmDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CPP14Parser.RULE_asmDefinition);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1293;
      this.match(CPP14Parser.Asm);
      this.state = 1294;
      this.match(CPP14Parser.LeftParen);
      this.state = 1295;
      this.match(CPP14Parser.StringLiteral);
      this.state = 1296;
      this.match(CPP14Parser.RightParen);
      this.state = 1297;
      this.match(CPP14Parser.Semi);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  linkageSpecification() {
    let localctx = new LinkageSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CPP14Parser.RULE_linkageSpecification);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1299;
      this.match(CPP14Parser.Extern);
      this.state = 1300;
      this.match(CPP14Parser.StringLiteral);
      this.state = 1307;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.LeftBrace:
          this.state = 1301;
          this.match(CPP14Parser.LeftBrace);
          this.state = 1303;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la - 10 & ~31) == 0 && (1 << _la - 10 & (1 << CPP14Parser.Alignas - 10 | 1 << CPP14Parser.Asm - 10 | 1 << CPP14Parser.Auto - 10 | 1 << CPP14Parser.Bool - 10 | 1 << CPP14Parser.Char - 10 | 1 << CPP14Parser.Char16 - 10 | 1 << CPP14Parser.Char32 - 10 | 1 << CPP14Parser.Class - 10 | 1 << CPP14Parser.Const - 10 | 1 << CPP14Parser.Constexpr - 10 | 1 << CPP14Parser.Decltype - 10 | 1 << CPP14Parser.Double - 10 | 1 << CPP14Parser.Enum - 10 | 1 << CPP14Parser.Explicit - 10 | 1 << CPP14Parser.Extern - 10 | 1 << CPP14Parser.Float - 10 | 1 << CPP14Parser.Friend - 10)) !== 0 || (_la - 44 & ~31) == 0 && (1 << _la - 44 & (1 << CPP14Parser.Inline - 44 | 1 << CPP14Parser.Int - 44 | 1 << CPP14Parser.Long - 44 | 1 << CPP14Parser.Mutable - 44 | 1 << CPP14Parser.Namespace - 44 | 1 << CPP14Parser.Operator - 44 | 1 << CPP14Parser.Register - 44 | 1 << CPP14Parser.Short - 44 | 1 << CPP14Parser.Signed - 44 | 1 << CPP14Parser.Static - 44 | 1 << CPP14Parser.Static_assert - 44 | 1 << CPP14Parser.Struct - 44 | 1 << CPP14Parser.Template - 44 | 1 << CPP14Parser.Thread_local - 44 | 1 << CPP14Parser.Typedef - 44)) !== 0 || (_la - 76 & ~31) == 0 && (1 << _la - 76 & (1 << CPP14Parser.Typename_ - 76 | 1 << CPP14Parser.Union - 76 | 1 << CPP14Parser.Unsigned - 76 | 1 << CPP14Parser.Using - 76 | 1 << CPP14Parser.Virtual - 76 | 1 << CPP14Parser.Void - 76 | 1 << CPP14Parser.Volatile - 76 | 1 << CPP14Parser.Wchar - 76 | 1 << CPP14Parser.LeftParen - 76 | 1 << CPP14Parser.LeftBracket - 76 | 1 << CPP14Parser.Star - 76 | 1 << CPP14Parser.And - 76 | 1 << CPP14Parser.Tilde - 76)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << CPP14Parser.AndAnd - 118 | 1 << CPP14Parser.Doublecolon - 118 | 1 << CPP14Parser.Semi - 118 | 1 << CPP14Parser.Ellipsis - 118 | 1 << CPP14Parser.Identifier - 118)) !== 0) {
            this.state = 1302;
            this.declarationseq();
          }
          this.state = 1305;
          this.match(CPP14Parser.RightBrace);
          break;
        case CPP14Parser.Alignas:
        case CPP14Parser.Asm:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Constexpr:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.Enum:
        case CPP14Parser.Explicit:
        case CPP14Parser.Extern:
        case CPP14Parser.Float:
        case CPP14Parser.Friend:
        case CPP14Parser.Inline:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Mutable:
        case CPP14Parser.Namespace:
        case CPP14Parser.Operator:
        case CPP14Parser.Register:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Static:
        case CPP14Parser.Static_assert:
        case CPP14Parser.Struct:
        case CPP14Parser.Template:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Typedef:
        case CPP14Parser.Typename_:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Using:
        case CPP14Parser.Virtual:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Tilde:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Semi:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
          this.state = 1306;
          this.declaration();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  attributeSpecifierSeq() {
    let localctx = new AttributeSpecifierSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CPP14Parser.RULE_attributeSpecifierSeq);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1310;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 1309;
            this.attributeSpecifier();
            break;
          default:
            throw new import_antlr4.default.error.NoViableAltException(this);
        }
        this.state = 1312;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 153, this._ctx);
      } while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  attributeSpecifier() {
    let localctx = new AttributeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CPP14Parser.RULE_attributeSpecifier);
    var _la = 0;
    try {
      this.state = 1322;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.LeftBracket:
          this.enterOuterAlt(localctx, 1);
          this.state = 1314;
          this.match(CPP14Parser.LeftBracket);
          this.state = 1315;
          this.match(CPP14Parser.LeftBracket);
          this.state = 1317;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Identifier) {
            this.state = 1316;
            this.attributeList();
          }
          this.state = 1319;
          this.match(CPP14Parser.RightBracket);
          this.state = 1320;
          this.match(CPP14Parser.RightBracket);
          break;
        case CPP14Parser.Alignas:
          this.enterOuterAlt(localctx, 2);
          this.state = 1321;
          this.alignmentspecifier();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  alignmentspecifier() {
    let localctx = new AlignmentspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CPP14Parser.RULE_alignmentspecifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1324;
      this.match(CPP14Parser.Alignas);
      this.state = 1325;
      this.match(CPP14Parser.LeftParen);
      this.state = 1328;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1326;
          this.theTypeId();
          break;
        case 2:
          this.state = 1327;
          this.constantExpression();
          break;
      }
      this.state = 1331;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Ellipsis) {
        this.state = 1330;
        this.match(CPP14Parser.Ellipsis);
      }
      this.state = 1333;
      this.match(CPP14Parser.RightParen);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  attributeList() {
    let localctx = new AttributeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CPP14Parser.RULE_attributeList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1335;
      this.attribute();
      this.state = 1340;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Comma) {
        this.state = 1336;
        this.match(CPP14Parser.Comma);
        this.state = 1337;
        this.attribute();
        this.state = 1342;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1344;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Ellipsis) {
        this.state = 1343;
        this.match(CPP14Parser.Ellipsis);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  attribute() {
    let localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CPP14Parser.RULE_attribute);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1349;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 160, this._ctx);
      if (la_ === 1) {
        this.state = 1346;
        this.attributeNamespace();
        this.state = 1347;
        this.match(CPP14Parser.Doublecolon);
      }
      this.state = 1351;
      this.match(CPP14Parser.Identifier);
      this.state = 1353;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.LeftParen) {
        this.state = 1352;
        this.attributeArgumentClause();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  attributeNamespace() {
    let localctx = new AttributeNamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CPP14Parser.RULE_attributeNamespace);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1355;
      this.match(CPP14Parser.Identifier);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  attributeArgumentClause() {
    let localctx = new AttributeArgumentClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, CPP14Parser.RULE_attributeArgumentClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1357;
      this.match(CPP14Parser.LeftParen);
      this.state = 1359;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.MultiLineMacro | 1 << CPP14Parser.Directive | 1 << CPP14Parser.Alignas | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Asm | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Break | 1 << CPP14Parser.Case | 1 << CPP14Parser.Catch | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Class | 1 << CPP14Parser.Const | 1 << CPP14Parser.Constexpr | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Continue | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Default | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Do | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 32 & ~31) == 0 && (1 << _la - 32 & (1 << CPP14Parser.Else - 32 | 1 << CPP14Parser.Enum - 32 | 1 << CPP14Parser.Explicit - 32 | 1 << CPP14Parser.Export - 32 | 1 << CPP14Parser.Extern - 32 | 1 << CPP14Parser.False_ - 32 | 1 << CPP14Parser.Final - 32 | 1 << CPP14Parser.Float - 32 | 1 << CPP14Parser.For - 32 | 1 << CPP14Parser.Friend - 32 | 1 << CPP14Parser.Goto - 32 | 1 << CPP14Parser.If - 32 | 1 << CPP14Parser.Inline - 32 | 1 << CPP14Parser.Int - 32 | 1 << CPP14Parser.Long - 32 | 1 << CPP14Parser.Mutable - 32 | 1 << CPP14Parser.Namespace - 32 | 1 << CPP14Parser.New - 32 | 1 << CPP14Parser.Noexcept - 32 | 1 << CPP14Parser.Nullptr - 32 | 1 << CPP14Parser.Operator - 32 | 1 << CPP14Parser.Override - 32 | 1 << CPP14Parser.Private - 32 | 1 << CPP14Parser.Protected - 32 | 1 << CPP14Parser.Public - 32 | 1 << CPP14Parser.Register - 32 | 1 << CPP14Parser.Reinterpret_cast - 32 | 1 << CPP14Parser.Return - 32 | 1 << CPP14Parser.Short - 32 | 1 << CPP14Parser.Signed - 32 | 1 << CPP14Parser.Sizeof - 32 | 1 << CPP14Parser.Static - 32)) !== 0 || (_la - 64 & ~31) == 0 && (1 << _la - 64 & (1 << CPP14Parser.Static_assert - 64 | 1 << CPP14Parser.Static_cast - 64 | 1 << CPP14Parser.Struct - 64 | 1 << CPP14Parser.Switch - 64 | 1 << CPP14Parser.Template - 64 | 1 << CPP14Parser.This - 64 | 1 << CPP14Parser.Thread_local - 64 | 1 << CPP14Parser.Throw - 64 | 1 << CPP14Parser.True_ - 64 | 1 << CPP14Parser.Try - 64 | 1 << CPP14Parser.Typedef - 64 | 1 << CPP14Parser.Typeid_ - 64 | 1 << CPP14Parser.Typename_ - 64 | 1 << CPP14Parser.Union - 64 | 1 << CPP14Parser.Unsigned - 64 | 1 << CPP14Parser.Using - 64 | 1 << CPP14Parser.Virtual - 64 | 1 << CPP14Parser.Void - 64 | 1 << CPP14Parser.Volatile - 64 | 1 << CPP14Parser.Wchar - 64 | 1 << CPP14Parser.While - 64 | 1 << CPP14Parser.LeftParen - 64 | 1 << CPP14Parser.LeftBracket - 64 | 1 << CPP14Parser.LeftBrace - 64 | 1 << CPP14Parser.Plus - 64 | 1 << CPP14Parser.Minus - 64 | 1 << CPP14Parser.Star - 64 | 1 << CPP14Parser.Div - 64 | 1 << CPP14Parser.Mod - 64)) !== 0 || (_la - 96 & ~31) == 0 && (1 << _la - 96 & (1 << CPP14Parser.Caret - 96 | 1 << CPP14Parser.And - 96 | 1 << CPP14Parser.Or - 96 | 1 << CPP14Parser.Tilde - 96 | 1 << CPP14Parser.Not - 96 | 1 << CPP14Parser.Assign - 96 | 1 << CPP14Parser.Less - 96 | 1 << CPP14Parser.Greater - 96 | 1 << CPP14Parser.PlusAssign - 96 | 1 << CPP14Parser.MinusAssign - 96 | 1 << CPP14Parser.StarAssign - 96 | 1 << CPP14Parser.DivAssign - 96 | 1 << CPP14Parser.ModAssign - 96 | 1 << CPP14Parser.XorAssign - 96 | 1 << CPP14Parser.AndAssign - 96 | 1 << CPP14Parser.OrAssign - 96 | 1 << CPP14Parser.LeftShiftAssign - 96 | 1 << CPP14Parser.RightShiftAssign - 96 | 1 << CPP14Parser.Equal - 96 | 1 << CPP14Parser.NotEqual - 96 | 1 << CPP14Parser.LessEqual - 96 | 1 << CPP14Parser.GreaterEqual - 96 | 1 << CPP14Parser.AndAnd - 96 | 1 << CPP14Parser.OrOr - 96 | 1 << CPP14Parser.PlusPlus - 96 | 1 << CPP14Parser.MinusMinus - 96 | 1 << CPP14Parser.Comma - 96 | 1 << CPP14Parser.ArrowStar - 96 | 1 << CPP14Parser.Arrow - 96 | 1 << CPP14Parser.Question - 96 | 1 << CPP14Parser.Colon - 96 | 1 << CPP14Parser.Doublecolon - 96)) !== 0 || (_la - 128 & ~31) == 0 && (1 << _la - 128 & (1 << CPP14Parser.Semi - 128 | 1 << CPP14Parser.Dot - 128 | 1 << CPP14Parser.DotStar - 128 | 1 << CPP14Parser.Ellipsis - 128 | 1 << CPP14Parser.Identifier - 128 | 1 << CPP14Parser.DecimalLiteral - 128 | 1 << CPP14Parser.OctalLiteral - 128 | 1 << CPP14Parser.HexadecimalLiteral - 128 | 1 << CPP14Parser.BinaryLiteral - 128 | 1 << CPP14Parser.Integersuffix - 128 | 1 << CPP14Parser.UserDefinedIntegerLiteral - 128 | 1 << CPP14Parser.UserDefinedFloatingLiteral - 128 | 1 << CPP14Parser.UserDefinedStringLiteral - 128 | 1 << CPP14Parser.UserDefinedCharacterLiteral - 128 | 1 << CPP14Parser.Whitespace - 128 | 1 << CPP14Parser.Newline - 128 | 1 << CPP14Parser.BlockComment - 128 | 1 << CPP14Parser.LineComment - 128)) !== 0) {
        this.state = 1358;
        this.balancedTokenSeq();
      }
      this.state = 1361;
      this.match(CPP14Parser.RightParen);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  balancedTokenSeq() {
    let localctx = new BalancedTokenSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CPP14Parser.RULE_balancedTokenSeq);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1364;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1363;
        this.balancedtoken();
        this.state = 1366;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.MultiLineMacro | 1 << CPP14Parser.Directive | 1 << CPP14Parser.Alignas | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Asm | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Break | 1 << CPP14Parser.Case | 1 << CPP14Parser.Catch | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Class | 1 << CPP14Parser.Const | 1 << CPP14Parser.Constexpr | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Continue | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Default | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Do | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 32 & ~31) == 0 && (1 << _la - 32 & (1 << CPP14Parser.Else - 32 | 1 << CPP14Parser.Enum - 32 | 1 << CPP14Parser.Explicit - 32 | 1 << CPP14Parser.Export - 32 | 1 << CPP14Parser.Extern - 32 | 1 << CPP14Parser.False_ - 32 | 1 << CPP14Parser.Final - 32 | 1 << CPP14Parser.Float - 32 | 1 << CPP14Parser.For - 32 | 1 << CPP14Parser.Friend - 32 | 1 << CPP14Parser.Goto - 32 | 1 << CPP14Parser.If - 32 | 1 << CPP14Parser.Inline - 32 | 1 << CPP14Parser.Int - 32 | 1 << CPP14Parser.Long - 32 | 1 << CPP14Parser.Mutable - 32 | 1 << CPP14Parser.Namespace - 32 | 1 << CPP14Parser.New - 32 | 1 << CPP14Parser.Noexcept - 32 | 1 << CPP14Parser.Nullptr - 32 | 1 << CPP14Parser.Operator - 32 | 1 << CPP14Parser.Override - 32 | 1 << CPP14Parser.Private - 32 | 1 << CPP14Parser.Protected - 32 | 1 << CPP14Parser.Public - 32 | 1 << CPP14Parser.Register - 32 | 1 << CPP14Parser.Reinterpret_cast - 32 | 1 << CPP14Parser.Return - 32 | 1 << CPP14Parser.Short - 32 | 1 << CPP14Parser.Signed - 32 | 1 << CPP14Parser.Sizeof - 32 | 1 << CPP14Parser.Static - 32)) !== 0 || (_la - 64 & ~31) == 0 && (1 << _la - 64 & (1 << CPP14Parser.Static_assert - 64 | 1 << CPP14Parser.Static_cast - 64 | 1 << CPP14Parser.Struct - 64 | 1 << CPP14Parser.Switch - 64 | 1 << CPP14Parser.Template - 64 | 1 << CPP14Parser.This - 64 | 1 << CPP14Parser.Thread_local - 64 | 1 << CPP14Parser.Throw - 64 | 1 << CPP14Parser.True_ - 64 | 1 << CPP14Parser.Try - 64 | 1 << CPP14Parser.Typedef - 64 | 1 << CPP14Parser.Typeid_ - 64 | 1 << CPP14Parser.Typename_ - 64 | 1 << CPP14Parser.Union - 64 | 1 << CPP14Parser.Unsigned - 64 | 1 << CPP14Parser.Using - 64 | 1 << CPP14Parser.Virtual - 64 | 1 << CPP14Parser.Void - 64 | 1 << CPP14Parser.Volatile - 64 | 1 << CPP14Parser.Wchar - 64 | 1 << CPP14Parser.While - 64 | 1 << CPP14Parser.LeftParen - 64 | 1 << CPP14Parser.LeftBracket - 64 | 1 << CPP14Parser.LeftBrace - 64 | 1 << CPP14Parser.Plus - 64 | 1 << CPP14Parser.Minus - 64 | 1 << CPP14Parser.Star - 64 | 1 << CPP14Parser.Div - 64 | 1 << CPP14Parser.Mod - 64)) !== 0 || (_la - 96 & ~31) == 0 && (1 << _la - 96 & (1 << CPP14Parser.Caret - 96 | 1 << CPP14Parser.And - 96 | 1 << CPP14Parser.Or - 96 | 1 << CPP14Parser.Tilde - 96 | 1 << CPP14Parser.Not - 96 | 1 << CPP14Parser.Assign - 96 | 1 << CPP14Parser.Less - 96 | 1 << CPP14Parser.Greater - 96 | 1 << CPP14Parser.PlusAssign - 96 | 1 << CPP14Parser.MinusAssign - 96 | 1 << CPP14Parser.StarAssign - 96 | 1 << CPP14Parser.DivAssign - 96 | 1 << CPP14Parser.ModAssign - 96 | 1 << CPP14Parser.XorAssign - 96 | 1 << CPP14Parser.AndAssign - 96 | 1 << CPP14Parser.OrAssign - 96 | 1 << CPP14Parser.LeftShiftAssign - 96 | 1 << CPP14Parser.RightShiftAssign - 96 | 1 << CPP14Parser.Equal - 96 | 1 << CPP14Parser.NotEqual - 96 | 1 << CPP14Parser.LessEqual - 96 | 1 << CPP14Parser.GreaterEqual - 96 | 1 << CPP14Parser.AndAnd - 96 | 1 << CPP14Parser.OrOr - 96 | 1 << CPP14Parser.PlusPlus - 96 | 1 << CPP14Parser.MinusMinus - 96 | 1 << CPP14Parser.Comma - 96 | 1 << CPP14Parser.ArrowStar - 96 | 1 << CPP14Parser.Arrow - 96 | 1 << CPP14Parser.Question - 96 | 1 << CPP14Parser.Colon - 96 | 1 << CPP14Parser.Doublecolon - 96)) !== 0 || (_la - 128 & ~31) == 0 && (1 << _la - 128 & (1 << CPP14Parser.Semi - 128 | 1 << CPP14Parser.Dot - 128 | 1 << CPP14Parser.DotStar - 128 | 1 << CPP14Parser.Ellipsis - 128 | 1 << CPP14Parser.Identifier - 128 | 1 << CPP14Parser.DecimalLiteral - 128 | 1 << CPP14Parser.OctalLiteral - 128 | 1 << CPP14Parser.HexadecimalLiteral - 128 | 1 << CPP14Parser.BinaryLiteral - 128 | 1 << CPP14Parser.Integersuffix - 128 | 1 << CPP14Parser.UserDefinedIntegerLiteral - 128 | 1 << CPP14Parser.UserDefinedFloatingLiteral - 128 | 1 << CPP14Parser.UserDefinedStringLiteral - 128 | 1 << CPP14Parser.UserDefinedCharacterLiteral - 128 | 1 << CPP14Parser.Whitespace - 128 | 1 << CPP14Parser.Newline - 128 | 1 << CPP14Parser.BlockComment - 128 | 1 << CPP14Parser.LineComment - 128)) !== 0);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  balancedtoken() {
    let localctx = new BalancedtokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CPP14Parser.RULE_balancedtoken);
    var _la = 0;
    try {
      this.state = 1385;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.LeftParen:
          this.enterOuterAlt(localctx, 1);
          this.state = 1368;
          this.match(CPP14Parser.LeftParen);
          this.state = 1369;
          this.balancedTokenSeq();
          this.state = 1370;
          this.match(CPP14Parser.RightParen);
          break;
        case CPP14Parser.LeftBracket:
          this.enterOuterAlt(localctx, 2);
          this.state = 1372;
          this.match(CPP14Parser.LeftBracket);
          this.state = 1373;
          this.balancedTokenSeq();
          this.state = 1374;
          this.match(CPP14Parser.RightBracket);
          break;
        case CPP14Parser.LeftBrace:
          this.enterOuterAlt(localctx, 3);
          this.state = 1376;
          this.match(CPP14Parser.LeftBrace);
          this.state = 1377;
          this.balancedTokenSeq();
          this.state = 1378;
          this.match(CPP14Parser.RightBrace);
          break;
        case CPP14Parser.IntegerLiteral:
        case CPP14Parser.CharacterLiteral:
        case CPP14Parser.FloatingLiteral:
        case CPP14Parser.StringLiteral:
        case CPP14Parser.BooleanLiteral:
        case CPP14Parser.PointerLiteral:
        case CPP14Parser.UserDefinedLiteral:
        case CPP14Parser.MultiLineMacro:
        case CPP14Parser.Directive:
        case CPP14Parser.Alignas:
        case CPP14Parser.Alignof:
        case CPP14Parser.Asm:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Break:
        case CPP14Parser.Case:
        case CPP14Parser.Catch:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Constexpr:
        case CPP14Parser.Const_cast:
        case CPP14Parser.Continue:
        case CPP14Parser.Decltype:
        case CPP14Parser.Default:
        case CPP14Parser.Delete:
        case CPP14Parser.Do:
        case CPP14Parser.Double:
        case CPP14Parser.Dynamic_cast:
        case CPP14Parser.Else:
        case CPP14Parser.Enum:
        case CPP14Parser.Explicit:
        case CPP14Parser.Export:
        case CPP14Parser.Extern:
        case CPP14Parser.False_:
        case CPP14Parser.Final:
        case CPP14Parser.Float:
        case CPP14Parser.For:
        case CPP14Parser.Friend:
        case CPP14Parser.Goto:
        case CPP14Parser.If:
        case CPP14Parser.Inline:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Mutable:
        case CPP14Parser.Namespace:
        case CPP14Parser.New:
        case CPP14Parser.Noexcept:
        case CPP14Parser.Nullptr:
        case CPP14Parser.Operator:
        case CPP14Parser.Override:
        case CPP14Parser.Private:
        case CPP14Parser.Protected:
        case CPP14Parser.Public:
        case CPP14Parser.Register:
        case CPP14Parser.Reinterpret_cast:
        case CPP14Parser.Return:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Sizeof:
        case CPP14Parser.Static:
        case CPP14Parser.Static_assert:
        case CPP14Parser.Static_cast:
        case CPP14Parser.Struct:
        case CPP14Parser.Switch:
        case CPP14Parser.Template:
        case CPP14Parser.This:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Throw:
        case CPP14Parser.True_:
        case CPP14Parser.Try:
        case CPP14Parser.Typedef:
        case CPP14Parser.Typeid_:
        case CPP14Parser.Typename_:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Using:
        case CPP14Parser.Virtual:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.While:
        case CPP14Parser.Plus:
        case CPP14Parser.Minus:
        case CPP14Parser.Star:
        case CPP14Parser.Div:
        case CPP14Parser.Mod:
        case CPP14Parser.Caret:
        case CPP14Parser.And:
        case CPP14Parser.Or:
        case CPP14Parser.Tilde:
        case CPP14Parser.Not:
        case CPP14Parser.Assign:
        case CPP14Parser.Less:
        case CPP14Parser.Greater:
        case CPP14Parser.PlusAssign:
        case CPP14Parser.MinusAssign:
        case CPP14Parser.StarAssign:
        case CPP14Parser.DivAssign:
        case CPP14Parser.ModAssign:
        case CPP14Parser.XorAssign:
        case CPP14Parser.AndAssign:
        case CPP14Parser.OrAssign:
        case CPP14Parser.LeftShiftAssign:
        case CPP14Parser.RightShiftAssign:
        case CPP14Parser.Equal:
        case CPP14Parser.NotEqual:
        case CPP14Parser.LessEqual:
        case CPP14Parser.GreaterEqual:
        case CPP14Parser.AndAnd:
        case CPP14Parser.OrOr:
        case CPP14Parser.PlusPlus:
        case CPP14Parser.MinusMinus:
        case CPP14Parser.Comma:
        case CPP14Parser.ArrowStar:
        case CPP14Parser.Arrow:
        case CPP14Parser.Question:
        case CPP14Parser.Colon:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Semi:
        case CPP14Parser.Dot:
        case CPP14Parser.DotStar:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
        case CPP14Parser.DecimalLiteral:
        case CPP14Parser.OctalLiteral:
        case CPP14Parser.HexadecimalLiteral:
        case CPP14Parser.BinaryLiteral:
        case CPP14Parser.Integersuffix:
        case CPP14Parser.UserDefinedIntegerLiteral:
        case CPP14Parser.UserDefinedFloatingLiteral:
        case CPP14Parser.UserDefinedStringLiteral:
        case CPP14Parser.UserDefinedCharacterLiteral:
        case CPP14Parser.Whitespace:
        case CPP14Parser.Newline:
        case CPP14Parser.BlockComment:
        case CPP14Parser.LineComment:
          this.enterOuterAlt(localctx, 4);
          this.state = 1381;
          this._errHandler.sync(this);
          var _alt = 1;
          do {
            switch (_alt) {
              case 1:
                this.state = 1380;
                _la = this._input.LA(1);
                if (_la <= 0 || (_la - 85 & ~31) == 0 && (1 << _la - 85 & (1 << CPP14Parser.LeftParen - 85 | 1 << CPP14Parser.RightParen - 85 | 1 << CPP14Parser.LeftBracket - 85 | 1 << CPP14Parser.RightBracket - 85 | 1 << CPP14Parser.LeftBrace - 85 | 1 << CPP14Parser.RightBrace - 85)) !== 0) {
                  this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);
                  this.consume();
                }
                break;
              default:
                throw new import_antlr4.default.error.NoViableAltException(this);
            }
            this.state = 1383;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 164, this._ctx);
          } while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  initDeclaratorList() {
    let localctx = new InitDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CPP14Parser.RULE_initDeclaratorList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1387;
      this.initDeclarator();
      this.state = 1392;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Comma) {
        this.state = 1388;
        this.match(CPP14Parser.Comma);
        this.state = 1389;
        this.initDeclarator();
        this.state = 1394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  initDeclarator() {
    let localctx = new InitDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CPP14Parser.RULE_initDeclarator);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1395;
      this.declarator();
      this.state = 1397;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 85 & ~31) == 0 && (1 << _la - 85 & (1 << CPP14Parser.LeftParen - 85 | 1 << CPP14Parser.LeftBrace - 85 | 1 << CPP14Parser.Assign - 85)) !== 0) {
        this.state = 1396;
        this.initializer();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  declarator() {
    let localctx = new DeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CPP14Parser.RULE_declarator);
    try {
      this.state = 1404;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 168, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1399;
          this.pointerDeclarator();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1400;
          this.noPointerDeclarator(0);
          this.state = 1401;
          this.parametersAndQualifiers();
          this.state = 1402;
          this.trailingReturnType();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  pointerDeclarator() {
    let localctx = new PointerDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CPP14Parser.RULE_pointerDeclarator);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1412;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 170, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1406;
          this.pointerOperator();
          this.state = 1408;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Const) {
            this.state = 1407;
            this.match(CPP14Parser.Const);
          }
        }
        this.state = 1414;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 170, this._ctx);
      }
      this.state = 1415;
      this.noPointerDeclarator(0);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  noPointerDeclarator(_p) {
    if (_p === void 0) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new NoPointerDeclaratorContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 230;
    this.enterRecursionRule(localctx, 230, CPP14Parser.RULE_noPointerDeclarator, _p);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1426;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Decltype:
        case CPP14Parser.Operator:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
          this.state = 1418;
          this.declaratorid();
          this.state = 1420;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 171, this._ctx);
          if (la_ === 1) {
            this.state = 1419;
            this.attributeSpecifierSeq();
          }
          break;
        case CPP14Parser.LeftParen:
          this.state = 1422;
          this.match(CPP14Parser.LeftParen);
          this.state = 1423;
          this.pointerDeclarator();
          this.state = 1424;
          this.match(CPP14Parser.RightParen);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
      this._ctx.stop = this._input.LT(-1);
      this.state = 1442;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 176, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          localctx = new NoPointerDeclaratorContext(this, _parentctx, _parentState);
          this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerDeclarator);
          this.state = 1428;
          if (!this.precpred(this._ctx, 2)) {
            throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
          }
          this.state = 1438;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CPP14Parser.LeftParen:
              this.state = 1429;
              this.parametersAndQualifiers();
              break;
            case CPP14Parser.LeftBracket:
              this.state = 1430;
              this.match(CPP14Parser.LeftBracket);
              this.state = 1432;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 75 & ~31) == 0 && (1 << _la - 75 & (1 << CPP14Parser.Typeid_ - 75 | 1 << CPP14Parser.Typename_ - 75 | 1 << CPP14Parser.Unsigned - 75 | 1 << CPP14Parser.Void - 75 | 1 << CPP14Parser.Wchar - 75 | 1 << CPP14Parser.LeftParen - 75 | 1 << CPP14Parser.LeftBracket - 75 | 1 << CPP14Parser.Plus - 75 | 1 << CPP14Parser.Minus - 75 | 1 << CPP14Parser.Star - 75 | 1 << CPP14Parser.And - 75 | 1 << CPP14Parser.Or - 75 | 1 << CPP14Parser.Tilde - 75 | 1 << CPP14Parser.Not - 75)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
                this.state = 1431;
                this.constantExpression();
              }
              this.state = 1434;
              this.match(CPP14Parser.RightBracket);
              this.state = 1436;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 174, this._ctx);
              if (la_ === 1) {
                this.state = 1435;
                this.attributeSpecifierSeq();
              }
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
        }
        this.state = 1444;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 176, this._ctx);
      }
    } catch (error) {
      if (error instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  parametersAndQualifiers() {
    let localctx = new ParametersAndQualifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CPP14Parser.RULE_parametersAndQualifiers);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1445;
      this.match(CPP14Parser.LeftParen);
      this.state = 1447;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.Alignas | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Class | 1 << CPP14Parser.Const | 1 << CPP14Parser.Constexpr | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Double)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << CPP14Parser.Enum - 33 | 1 << CPP14Parser.Explicit - 33 | 1 << CPP14Parser.Extern - 33 | 1 << CPP14Parser.Float - 33 | 1 << CPP14Parser.Friend - 33 | 1 << CPP14Parser.Inline - 33 | 1 << CPP14Parser.Int - 33 | 1 << CPP14Parser.Long - 33 | 1 << CPP14Parser.Mutable - 33 | 1 << CPP14Parser.Register - 33 | 1 << CPP14Parser.Short - 33 | 1 << CPP14Parser.Signed - 33 | 1 << CPP14Parser.Static - 33)) !== 0 || (_la - 66 & ~31) == 0 && (1 << _la - 66 & (1 << CPP14Parser.Struct - 66 | 1 << CPP14Parser.Thread_local - 66 | 1 << CPP14Parser.Typedef - 66 | 1 << CPP14Parser.Typename_ - 66 | 1 << CPP14Parser.Union - 66 | 1 << CPP14Parser.Unsigned - 66 | 1 << CPP14Parser.Virtual - 66 | 1 << CPP14Parser.Void - 66 | 1 << CPP14Parser.Volatile - 66 | 1 << CPP14Parser.Wchar - 66 | 1 << CPP14Parser.LeftBracket - 66)) !== 0 || _la === CPP14Parser.Doublecolon || _la === CPP14Parser.Identifier) {
        this.state = 1446;
        this.parameterDeclarationClause();
      }
      this.state = 1449;
      this.match(CPP14Parser.RightParen);
      this.state = 1451;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 178, this._ctx);
      if (la_ === 1) {
        this.state = 1450;
        this.cvqualifierseq();
      }
      this.state = 1454;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 179, this._ctx);
      if (la_ === 1) {
        this.state = 1453;
        this.refqualifier();
      }
      this.state = 1457;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 180, this._ctx);
      if (la_ === 1) {
        this.state = 1456;
        this.exceptionSpecification();
      }
      this.state = 1460;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 181, this._ctx);
      if (la_ === 1) {
        this.state = 1459;
        this.attributeSpecifierSeq();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  trailingReturnType() {
    let localctx = new TrailingReturnTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CPP14Parser.RULE_trailingReturnType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1462;
      this.match(CPP14Parser.Arrow);
      this.state = 1463;
      this.trailingTypeSpecifierSeq();
      this.state = 1465;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 182, this._ctx);
      if (la_ === 1) {
        this.state = 1464;
        this.abstractDeclarator();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  pointerOperator() {
    let localctx = new PointerOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CPP14Parser.RULE_pointerOperator);
    var _la = 0;
    try {
      this.state = 1481;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.And:
        case CPP14Parser.AndAnd:
          this.enterOuterAlt(localctx, 1);
          this.state = 1467;
          _la = this._input.LA(1);
          if (!(_la === CPP14Parser.And || _la === CPP14Parser.AndAnd)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1469;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 183, this._ctx);
          if (la_ === 1) {
            this.state = 1468;
            this.attributeSpecifierSeq();
          }
          break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 2);
          this.state = 1472;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Decltype || _la === CPP14Parser.Doublecolon || _la === CPP14Parser.Identifier) {
            this.state = 1471;
            this.nestedNameSpecifier(0);
          }
          this.state = 1474;
          this.match(CPP14Parser.Star);
          this.state = 1476;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 185, this._ctx);
          if (la_ === 1) {
            this.state = 1475;
            this.attributeSpecifierSeq();
          }
          this.state = 1479;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 186, this._ctx);
          if (la_ === 1) {
            this.state = 1478;
            this.cvqualifierseq();
          }
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  cvqualifierseq() {
    let localctx = new CvqualifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CPP14Parser.RULE_cvqualifierseq);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1484;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 1483;
            this.cvQualifier();
            break;
          default:
            throw new import_antlr4.default.error.NoViableAltException(this);
        }
        this.state = 1486;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 188, this._ctx);
      } while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  cvQualifier() {
    let localctx = new CvQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CPP14Parser.RULE_cvQualifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1488;
      _la = this._input.LA(1);
      if (!(_la === CPP14Parser.Const || _la === CPP14Parser.Volatile)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  refqualifier() {
    let localctx = new RefqualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CPP14Parser.RULE_refqualifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1490;
      _la = this._input.LA(1);
      if (!(_la === CPP14Parser.And || _la === CPP14Parser.AndAnd)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  declaratorid() {
    let localctx = new DeclaratoridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CPP14Parser.RULE_declaratorid);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1493;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Ellipsis) {
        this.state = 1492;
        this.match(CPP14Parser.Ellipsis);
      }
      this.state = 1495;
      this.idExpression();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  theTypeId() {
    let localctx = new TheTypeIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CPP14Parser.RULE_theTypeId);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1497;
      this.typeSpecifierSeq();
      this.state = 1499;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 190, this._ctx);
      if (la_ === 1) {
        this.state = 1498;
        this.abstractDeclarator();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  abstractDeclarator() {
    let localctx = new AbstractDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CPP14Parser.RULE_abstractDeclarator);
    try {
      this.state = 1509;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 192, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1501;
          this.pointerAbstractDeclarator();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1503;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 191, this._ctx);
          if (la_ === 1) {
            this.state = 1502;
            this.noPointerAbstractDeclarator(0);
          }
          this.state = 1505;
          this.parametersAndQualifiers();
          this.state = 1506;
          this.trailingReturnType();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1508;
          this.abstractPackDeclarator();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  pointerAbstractDeclarator() {
    let localctx = new PointerAbstractDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CPP14Parser.RULE_pointerAbstractDeclarator);
    var _la = 0;
    try {
      this.state = 1520;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
          this.enterOuterAlt(localctx, 1);
          this.state = 1511;
          this.noPointerAbstractDeclarator(0);
          break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 2);
          this.state = 1513;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          do {
            this.state = 1512;
            this.pointerOperator();
            this.state = 1515;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          } while (_la === CPP14Parser.Decltype || (_la - 93 & ~31) == 0 && (1 << _la - 93 & (1 << CPP14Parser.Star - 93 | 1 << CPP14Parser.And - 93 | 1 << CPP14Parser.AndAnd - 93)) !== 0 || _la === CPP14Parser.Doublecolon || _la === CPP14Parser.Identifier);
          this.state = 1518;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 194, this._ctx);
          if (la_ === 1) {
            this.state = 1517;
            this.noPointerAbstractDeclarator(0);
          }
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  noPointerAbstractDeclarator(_p) {
    if (_p === void 0) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new NoPointerAbstractDeclaratorContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 252;
    this.enterRecursionRule(localctx, 252, CPP14Parser.RULE_noPointerAbstractDeclarator, _p);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1536;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 198, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1523;
          this.parametersAndQualifiers();
          break;
        case 2:
          this.state = 1524;
          this.match(CPP14Parser.LeftBracket);
          this.state = 1526;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 75 & ~31) == 0 && (1 << _la - 75 & (1 << CPP14Parser.Typeid_ - 75 | 1 << CPP14Parser.Typename_ - 75 | 1 << CPP14Parser.Unsigned - 75 | 1 << CPP14Parser.Void - 75 | 1 << CPP14Parser.Wchar - 75 | 1 << CPP14Parser.LeftParen - 75 | 1 << CPP14Parser.LeftBracket - 75 | 1 << CPP14Parser.Plus - 75 | 1 << CPP14Parser.Minus - 75 | 1 << CPP14Parser.Star - 75 | 1 << CPP14Parser.And - 75 | 1 << CPP14Parser.Or - 75 | 1 << CPP14Parser.Tilde - 75 | 1 << CPP14Parser.Not - 75)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
            this.state = 1525;
            this.constantExpression();
          }
          this.state = 1528;
          this.match(CPP14Parser.RightBracket);
          this.state = 1530;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 197, this._ctx);
          if (la_ === 1) {
            this.state = 1529;
            this.attributeSpecifierSeq();
          }
          break;
        case 3:
          this.state = 1532;
          this.match(CPP14Parser.LeftParen);
          this.state = 1533;
          this.pointerAbstractDeclarator();
          this.state = 1534;
          this.match(CPP14Parser.RightParen);
          break;
      }
      this._ctx.stop = this._input.LT(-1);
      this.state = 1553;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 202, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          localctx = new NoPointerAbstractDeclaratorContext(this, _parentctx, _parentState);
          this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerAbstractDeclarator);
          this.state = 1538;
          if (!this.precpred(this._ctx, 4)) {
            throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
          }
          this.state = 1549;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 201, this._ctx);
          switch (la_) {
            case 1:
              this.state = 1539;
              this.parametersAndQualifiers();
              break;
            case 2:
              this.state = 1540;
              this.noPointerAbstractDeclarator(0);
              this.state = 1541;
              this.match(CPP14Parser.LeftBracket);
              this.state = 1543;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 75 & ~31) == 0 && (1 << _la - 75 & (1 << CPP14Parser.Typeid_ - 75 | 1 << CPP14Parser.Typename_ - 75 | 1 << CPP14Parser.Unsigned - 75 | 1 << CPP14Parser.Void - 75 | 1 << CPP14Parser.Wchar - 75 | 1 << CPP14Parser.LeftParen - 75 | 1 << CPP14Parser.LeftBracket - 75 | 1 << CPP14Parser.Plus - 75 | 1 << CPP14Parser.Minus - 75 | 1 << CPP14Parser.Star - 75 | 1 << CPP14Parser.And - 75 | 1 << CPP14Parser.Or - 75 | 1 << CPP14Parser.Tilde - 75 | 1 << CPP14Parser.Not - 75)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
                this.state = 1542;
                this.constantExpression();
              }
              this.state = 1545;
              this.match(CPP14Parser.RightBracket);
              this.state = 1547;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 200, this._ctx);
              if (la_ === 1) {
                this.state = 1546;
                this.attributeSpecifierSeq();
              }
              break;
          }
        }
        this.state = 1555;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 202, this._ctx);
      }
    } catch (error) {
      if (error instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  abstractPackDeclarator() {
    let localctx = new AbstractPackDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CPP14Parser.RULE_abstractPackDeclarator);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1559;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Decltype || (_la - 93 & ~31) == 0 && (1 << _la - 93 & (1 << CPP14Parser.Star - 93 | 1 << CPP14Parser.And - 93 | 1 << CPP14Parser.AndAnd - 93)) !== 0 || _la === CPP14Parser.Doublecolon || _la === CPP14Parser.Identifier) {
        this.state = 1556;
        this.pointerOperator();
        this.state = 1561;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1562;
      this.noPointerAbstractPackDeclarator(0);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  noPointerAbstractPackDeclarator(_p) {
    if (_p === void 0) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new NoPointerAbstractPackDeclaratorContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 256;
    this.enterRecursionRule(localctx, 256, CPP14Parser.RULE_noPointerAbstractPackDeclarator, _p);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1565;
      this.match(CPP14Parser.Ellipsis);
      this._ctx.stop = this._input.LT(-1);
      this.state = 1581;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 207, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          localctx = new NoPointerAbstractPackDeclaratorContext(this, _parentctx, _parentState);
          this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerAbstractPackDeclarator);
          this.state = 1567;
          if (!this.precpred(this._ctx, 2)) {
            throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
          }
          this.state = 1577;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CPP14Parser.LeftParen:
              this.state = 1568;
              this.parametersAndQualifiers();
              break;
            case CPP14Parser.LeftBracket:
              this.state = 1569;
              this.match(CPP14Parser.LeftBracket);
              this.state = 1571;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 75 & ~31) == 0 && (1 << _la - 75 & (1 << CPP14Parser.Typeid_ - 75 | 1 << CPP14Parser.Typename_ - 75 | 1 << CPP14Parser.Unsigned - 75 | 1 << CPP14Parser.Void - 75 | 1 << CPP14Parser.Wchar - 75 | 1 << CPP14Parser.LeftParen - 75 | 1 << CPP14Parser.LeftBracket - 75 | 1 << CPP14Parser.Plus - 75 | 1 << CPP14Parser.Minus - 75 | 1 << CPP14Parser.Star - 75 | 1 << CPP14Parser.And - 75 | 1 << CPP14Parser.Or - 75 | 1 << CPP14Parser.Tilde - 75 | 1 << CPP14Parser.Not - 75)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
                this.state = 1570;
                this.constantExpression();
              }
              this.state = 1573;
              this.match(CPP14Parser.RightBracket);
              this.state = 1575;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 205, this._ctx);
              if (la_ === 1) {
                this.state = 1574;
                this.attributeSpecifierSeq();
              }
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
        }
        this.state = 1583;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 207, this._ctx);
      }
    } catch (error) {
      if (error instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  parameterDeclarationClause() {
    let localctx = new ParameterDeclarationClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CPP14Parser.RULE_parameterDeclarationClause);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1584;
      this.parameterDeclarationList();
      this.state = 1589;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Comma || _la === CPP14Parser.Ellipsis) {
        this.state = 1586;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CPP14Parser.Comma) {
          this.state = 1585;
          this.match(CPP14Parser.Comma);
        }
        this.state = 1588;
        this.match(CPP14Parser.Ellipsis);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  parameterDeclarationList() {
    let localctx = new ParameterDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CPP14Parser.RULE_parameterDeclarationList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1591;
      this.parameterDeclaration();
      this.state = 1596;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 210, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1592;
          this.match(CPP14Parser.Comma);
          this.state = 1593;
          this.parameterDeclaration();
        }
        this.state = 1598;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 210, this._ctx);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  parameterDeclaration() {
    let localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CPP14Parser.RULE_parameterDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1600;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
        this.state = 1599;
        this.attributeSpecifierSeq();
      }
      this.state = 1602;
      this.declSpecifierSeq();
      this.state = 1607;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 213, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1603;
          this.declarator();
          break;
        case 2:
          this.state = 1605;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 212, this._ctx);
          if (la_ === 1) {
            this.state = 1604;
            this.abstractDeclarator();
          }
          break;
      }
      this.state = 1611;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Assign) {
        this.state = 1609;
        this.match(CPP14Parser.Assign);
        this.state = 1610;
        this.initializerClause();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionDefinition() {
    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CPP14Parser.RULE_functionDefinition);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1614;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
        this.state = 1613;
        this.attributeSpecifierSeq();
      }
      this.state = 1617;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 216, this._ctx);
      if (la_ === 1) {
        this.state = 1616;
        this.declSpecifierSeq();
      }
      this.state = 1619;
      this.declarator();
      this.state = 1621;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Final || _la === CPP14Parser.Override) {
        this.state = 1620;
        this.virtualSpecifierSeq();
      }
      this.state = 1623;
      this.functionBody();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionBody() {
    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CPP14Parser.RULE_functionBody);
    var _la = 0;
    try {
      this.state = 1633;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.LeftBrace:
        case CPP14Parser.Colon:
          this.enterOuterAlt(localctx, 1);
          this.state = 1626;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Colon) {
            this.state = 1625;
            this.constructorInitializer();
          }
          this.state = 1628;
          this.compoundStatement();
          break;
        case CPP14Parser.Try:
          this.enterOuterAlt(localctx, 2);
          this.state = 1629;
          this.functionTryBlock();
          break;
        case CPP14Parser.Assign:
          this.enterOuterAlt(localctx, 3);
          this.state = 1630;
          this.match(CPP14Parser.Assign);
          this.state = 1631;
          _la = this._input.LA(1);
          if (!(_la === CPP14Parser.Default || _la === CPP14Parser.Delete)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1632;
          this.match(CPP14Parser.Semi);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  initializer() {
    let localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, CPP14Parser.RULE_initializer);
    try {
      this.state = 1640;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.LeftBrace:
        case CPP14Parser.Assign:
          this.enterOuterAlt(localctx, 1);
          this.state = 1635;
          this.braceOrEqualInitializer();
          break;
        case CPP14Parser.LeftParen:
          this.enterOuterAlt(localctx, 2);
          this.state = 1636;
          this.match(CPP14Parser.LeftParen);
          this.state = 1637;
          this.expressionList();
          this.state = 1638;
          this.match(CPP14Parser.RightParen);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  braceOrEqualInitializer() {
    let localctx = new BraceOrEqualInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, CPP14Parser.RULE_braceOrEqualInitializer);
    try {
      this.state = 1645;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Assign:
          this.enterOuterAlt(localctx, 1);
          this.state = 1642;
          this.match(CPP14Parser.Assign);
          this.state = 1643;
          this.initializerClause();
          break;
        case CPP14Parser.LeftBrace:
          this.enterOuterAlt(localctx, 2);
          this.state = 1644;
          this.bracedInitList();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  initializerClause() {
    let localctx = new InitializerClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, CPP14Parser.RULE_initializerClause);
    try {
      this.state = 1649;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.IntegerLiteral:
        case CPP14Parser.CharacterLiteral:
        case CPP14Parser.FloatingLiteral:
        case CPP14Parser.StringLiteral:
        case CPP14Parser.BooleanLiteral:
        case CPP14Parser.PointerLiteral:
        case CPP14Parser.UserDefinedLiteral:
        case CPP14Parser.Alignof:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Const_cast:
        case CPP14Parser.Decltype:
        case CPP14Parser.Delete:
        case CPP14Parser.Double:
        case CPP14Parser.Dynamic_cast:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.New:
        case CPP14Parser.Noexcept:
        case CPP14Parser.Operator:
        case CPP14Parser.Reinterpret_cast:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Sizeof:
        case CPP14Parser.Static_cast:
        case CPP14Parser.This:
        case CPP14Parser.Throw:
        case CPP14Parser.Typeid_:
        case CPP14Parser.Typename_:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Plus:
        case CPP14Parser.Minus:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Or:
        case CPP14Parser.Tilde:
        case CPP14Parser.Not:
        case CPP14Parser.PlusPlus:
        case CPP14Parser.MinusMinus:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 1647;
          this.assignmentExpression();
          break;
        case CPP14Parser.LeftBrace:
          this.enterOuterAlt(localctx, 2);
          this.state = 1648;
          this.bracedInitList();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  initializerList() {
    let localctx = new InitializerListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CPP14Parser.RULE_initializerList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1651;
      this.initializerClause();
      this.state = 1653;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Ellipsis) {
        this.state = 1652;
        this.match(CPP14Parser.Ellipsis);
      }
      this.state = 1662;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 225, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1655;
          this.match(CPP14Parser.Comma);
          this.state = 1656;
          this.initializerClause();
          this.state = 1658;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Ellipsis) {
            this.state = 1657;
            this.match(CPP14Parser.Ellipsis);
          }
        }
        this.state = 1664;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 225, this._ctx);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  bracedInitList() {
    let localctx = new BracedInitListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CPP14Parser.RULE_bracedInitList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1665;
      this.match(CPP14Parser.LeftBrace);
      this.state = 1670;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 71 & ~31) == 0 && (1 << _la - 71 & (1 << CPP14Parser.Throw - 71 | 1 << CPP14Parser.Typeid_ - 71 | 1 << CPP14Parser.Typename_ - 71 | 1 << CPP14Parser.Unsigned - 71 | 1 << CPP14Parser.Void - 71 | 1 << CPP14Parser.Wchar - 71 | 1 << CPP14Parser.LeftParen - 71 | 1 << CPP14Parser.LeftBracket - 71 | 1 << CPP14Parser.LeftBrace - 71 | 1 << CPP14Parser.Plus - 71 | 1 << CPP14Parser.Minus - 71 | 1 << CPP14Parser.Star - 71 | 1 << CPP14Parser.And - 71 | 1 << CPP14Parser.Or - 71 | 1 << CPP14Parser.Tilde - 71 | 1 << CPP14Parser.Not - 71)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
        this.state = 1666;
        this.initializerList();
        this.state = 1668;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CPP14Parser.Comma) {
          this.state = 1667;
          this.match(CPP14Parser.Comma);
        }
      }
      this.state = 1672;
      this.match(CPP14Parser.RightBrace);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  className() {
    let localctx = new ClassNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CPP14Parser.RULE_className);
    try {
      this.state = 1676;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 228, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1674;
          this.match(CPP14Parser.Identifier);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1675;
          this.simpleTemplateId();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classSpecifier() {
    let localctx = new ClassSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, CPP14Parser.RULE_classSpecifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1678;
      this.classHead();
      this.state = 1679;
      this.match(CPP14Parser.LeftBrace);
      this.state = 1681;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 10 & ~31) == 0 && (1 << _la - 10 & (1 << CPP14Parser.Alignas - 10 | 1 << CPP14Parser.Auto - 10 | 1 << CPP14Parser.Bool - 10 | 1 << CPP14Parser.Char - 10 | 1 << CPP14Parser.Char16 - 10 | 1 << CPP14Parser.Char32 - 10 | 1 << CPP14Parser.Class - 10 | 1 << CPP14Parser.Const - 10 | 1 << CPP14Parser.Constexpr - 10 | 1 << CPP14Parser.Decltype - 10 | 1 << CPP14Parser.Double - 10 | 1 << CPP14Parser.Enum - 10 | 1 << CPP14Parser.Explicit - 10 | 1 << CPP14Parser.Extern - 10 | 1 << CPP14Parser.Float - 10 | 1 << CPP14Parser.Friend - 10)) !== 0 || (_la - 44 & ~31) == 0 && (1 << _la - 44 & (1 << CPP14Parser.Inline - 44 | 1 << CPP14Parser.Int - 44 | 1 << CPP14Parser.Long - 44 | 1 << CPP14Parser.Mutable - 44 | 1 << CPP14Parser.Operator - 44 | 1 << CPP14Parser.Private - 44 | 1 << CPP14Parser.Protected - 44 | 1 << CPP14Parser.Public - 44 | 1 << CPP14Parser.Register - 44 | 1 << CPP14Parser.Short - 44 | 1 << CPP14Parser.Signed - 44 | 1 << CPP14Parser.Static - 44 | 1 << CPP14Parser.Static_assert - 44 | 1 << CPP14Parser.Struct - 44 | 1 << CPP14Parser.Template - 44 | 1 << CPP14Parser.Thread_local - 44 | 1 << CPP14Parser.Typedef - 44)) !== 0 || (_la - 76 & ~31) == 0 && (1 << _la - 76 & (1 << CPP14Parser.Typename_ - 76 | 1 << CPP14Parser.Union - 76 | 1 << CPP14Parser.Unsigned - 76 | 1 << CPP14Parser.Using - 76 | 1 << CPP14Parser.Virtual - 76 | 1 << CPP14Parser.Void - 76 | 1 << CPP14Parser.Volatile - 76 | 1 << CPP14Parser.Wchar - 76 | 1 << CPP14Parser.LeftParen - 76 | 1 << CPP14Parser.LeftBracket - 76 | 1 << CPP14Parser.Star - 76 | 1 << CPP14Parser.And - 76 | 1 << CPP14Parser.Tilde - 76)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << CPP14Parser.AndAnd - 118 | 1 << CPP14Parser.Colon - 118 | 1 << CPP14Parser.Doublecolon - 118 | 1 << CPP14Parser.Semi - 118 | 1 << CPP14Parser.Ellipsis - 118 | 1 << CPP14Parser.Identifier - 118)) !== 0) {
        this.state = 1680;
        this.memberSpecification();
      }
      this.state = 1683;
      this.match(CPP14Parser.RightBrace);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classHead() {
    let localctx = new ClassHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, CPP14Parser.RULE_classHead);
    var _la = 0;
    try {
      this.state = 1708;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Class:
        case CPP14Parser.Struct:
          this.enterOuterAlt(localctx, 1);
          this.state = 1685;
          this.classKey();
          this.state = 1687;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
            this.state = 1686;
            this.attributeSpecifierSeq();
          }
          this.state = 1693;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Decltype || _la === CPP14Parser.Doublecolon || _la === CPP14Parser.Identifier) {
            this.state = 1689;
            this.classHeadName();
            this.state = 1691;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CPP14Parser.Final) {
              this.state = 1690;
              this.classVirtSpecifier();
            }
          }
          this.state = 1696;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Colon) {
            this.state = 1695;
            this.baseClause();
          }
          break;
        case CPP14Parser.Union:
          this.enterOuterAlt(localctx, 2);
          this.state = 1698;
          this.match(CPP14Parser.Union);
          this.state = 1700;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
            this.state = 1699;
            this.attributeSpecifierSeq();
          }
          this.state = 1706;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Decltype || _la === CPP14Parser.Doublecolon || _la === CPP14Parser.Identifier) {
            this.state = 1702;
            this.classHeadName();
            this.state = 1704;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CPP14Parser.Final) {
              this.state = 1703;
              this.classVirtSpecifier();
            }
          }
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classHeadName() {
    let localctx = new ClassHeadNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CPP14Parser.RULE_classHeadName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1711;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 238, this._ctx);
      if (la_ === 1) {
        this.state = 1710;
        this.nestedNameSpecifier(0);
      }
      this.state = 1713;
      this.className();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classVirtSpecifier() {
    let localctx = new ClassVirtSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, CPP14Parser.RULE_classVirtSpecifier);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1715;
      this.match(CPP14Parser.Final);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classKey() {
    let localctx = new ClassKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CPP14Parser.RULE_classKey);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1717;
      _la = this._input.LA(1);
      if (!(_la === CPP14Parser.Class || _la === CPP14Parser.Struct)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  memberSpecification() {
    let localctx = new MemberSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CPP14Parser.RULE_memberSpecification);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1723;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1723;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CPP14Parser.Alignas:
          case CPP14Parser.Auto:
          case CPP14Parser.Bool:
          case CPP14Parser.Char:
          case CPP14Parser.Char16:
          case CPP14Parser.Char32:
          case CPP14Parser.Class:
          case CPP14Parser.Const:
          case CPP14Parser.Constexpr:
          case CPP14Parser.Decltype:
          case CPP14Parser.Double:
          case CPP14Parser.Enum:
          case CPP14Parser.Explicit:
          case CPP14Parser.Extern:
          case CPP14Parser.Float:
          case CPP14Parser.Friend:
          case CPP14Parser.Inline:
          case CPP14Parser.Int:
          case CPP14Parser.Long:
          case CPP14Parser.Mutable:
          case CPP14Parser.Operator:
          case CPP14Parser.Register:
          case CPP14Parser.Short:
          case CPP14Parser.Signed:
          case CPP14Parser.Static:
          case CPP14Parser.Static_assert:
          case CPP14Parser.Struct:
          case CPP14Parser.Template:
          case CPP14Parser.Thread_local:
          case CPP14Parser.Typedef:
          case CPP14Parser.Typename_:
          case CPP14Parser.Union:
          case CPP14Parser.Unsigned:
          case CPP14Parser.Using:
          case CPP14Parser.Virtual:
          case CPP14Parser.Void:
          case CPP14Parser.Volatile:
          case CPP14Parser.Wchar:
          case CPP14Parser.LeftParen:
          case CPP14Parser.LeftBracket:
          case CPP14Parser.Star:
          case CPP14Parser.And:
          case CPP14Parser.Tilde:
          case CPP14Parser.AndAnd:
          case CPP14Parser.Colon:
          case CPP14Parser.Doublecolon:
          case CPP14Parser.Semi:
          case CPP14Parser.Ellipsis:
          case CPP14Parser.Identifier:
            this.state = 1719;
            this.memberdeclaration();
            break;
          case CPP14Parser.Private:
          case CPP14Parser.Protected:
          case CPP14Parser.Public:
            this.state = 1720;
            this.accessSpecifier();
            this.state = 1721;
            this.match(CPP14Parser.Colon);
            break;
          default:
            throw new import_antlr4.default.error.NoViableAltException(this);
        }
        this.state = 1725;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while ((_la - 10 & ~31) == 0 && (1 << _la - 10 & (1 << CPP14Parser.Alignas - 10 | 1 << CPP14Parser.Auto - 10 | 1 << CPP14Parser.Bool - 10 | 1 << CPP14Parser.Char - 10 | 1 << CPP14Parser.Char16 - 10 | 1 << CPP14Parser.Char32 - 10 | 1 << CPP14Parser.Class - 10 | 1 << CPP14Parser.Const - 10 | 1 << CPP14Parser.Constexpr - 10 | 1 << CPP14Parser.Decltype - 10 | 1 << CPP14Parser.Double - 10 | 1 << CPP14Parser.Enum - 10 | 1 << CPP14Parser.Explicit - 10 | 1 << CPP14Parser.Extern - 10 | 1 << CPP14Parser.Float - 10 | 1 << CPP14Parser.Friend - 10)) !== 0 || (_la - 44 & ~31) == 0 && (1 << _la - 44 & (1 << CPP14Parser.Inline - 44 | 1 << CPP14Parser.Int - 44 | 1 << CPP14Parser.Long - 44 | 1 << CPP14Parser.Mutable - 44 | 1 << CPP14Parser.Operator - 44 | 1 << CPP14Parser.Private - 44 | 1 << CPP14Parser.Protected - 44 | 1 << CPP14Parser.Public - 44 | 1 << CPP14Parser.Register - 44 | 1 << CPP14Parser.Short - 44 | 1 << CPP14Parser.Signed - 44 | 1 << CPP14Parser.Static - 44 | 1 << CPP14Parser.Static_assert - 44 | 1 << CPP14Parser.Struct - 44 | 1 << CPP14Parser.Template - 44 | 1 << CPP14Parser.Thread_local - 44 | 1 << CPP14Parser.Typedef - 44)) !== 0 || (_la - 76 & ~31) == 0 && (1 << _la - 76 & (1 << CPP14Parser.Typename_ - 76 | 1 << CPP14Parser.Union - 76 | 1 << CPP14Parser.Unsigned - 76 | 1 << CPP14Parser.Using - 76 | 1 << CPP14Parser.Virtual - 76 | 1 << CPP14Parser.Void - 76 | 1 << CPP14Parser.Volatile - 76 | 1 << CPP14Parser.Wchar - 76 | 1 << CPP14Parser.LeftParen - 76 | 1 << CPP14Parser.LeftBracket - 76 | 1 << CPP14Parser.Star - 76 | 1 << CPP14Parser.And - 76 | 1 << CPP14Parser.Tilde - 76)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << CPP14Parser.AndAnd - 118 | 1 << CPP14Parser.Colon - 118 | 1 << CPP14Parser.Doublecolon - 118 | 1 << CPP14Parser.Semi - 118 | 1 << CPP14Parser.Ellipsis - 118 | 1 << CPP14Parser.Identifier - 118)) !== 0);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  memberdeclaration() {
    let localctx = new MemberdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CPP14Parser.RULE_memberdeclaration);
    var _la = 0;
    try {
      this.state = 1743;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 244, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1728;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 241, this._ctx);
          if (la_ === 1) {
            this.state = 1727;
            this.attributeSpecifierSeq();
          }
          this.state = 1731;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 242, this._ctx);
          if (la_ === 1) {
            this.state = 1730;
            this.declSpecifierSeq();
          }
          this.state = 1734;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Alignas || _la === CPP14Parser.Decltype || _la === CPP14Parser.Operator || (_la - 85 & ~31) == 0 && (1 << _la - 85 & (1 << CPP14Parser.LeftParen - 85 | 1 << CPP14Parser.LeftBracket - 85 | 1 << CPP14Parser.Star - 85 | 1 << CPP14Parser.And - 85 | 1 << CPP14Parser.Tilde - 85)) !== 0 || (_la - 118 & ~31) == 0 && (1 << _la - 118 & (1 << CPP14Parser.AndAnd - 118 | 1 << CPP14Parser.Colon - 118 | 1 << CPP14Parser.Doublecolon - 118 | 1 << CPP14Parser.Ellipsis - 118 | 1 << CPP14Parser.Identifier - 118)) !== 0) {
            this.state = 1733;
            this.memberDeclaratorList();
          }
          this.state = 1736;
          this.match(CPP14Parser.Semi);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1737;
          this.functionDefinition();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1738;
          this.usingDeclaration();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1739;
          this.staticAssertDeclaration();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1740;
          this.templateDeclaration();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1741;
          this.aliasDeclaration();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1742;
          this.emptyDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  memberDeclaratorList() {
    let localctx = new MemberDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CPP14Parser.RULE_memberDeclaratorList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1745;
      this.memberDeclarator();
      this.state = 1750;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Comma) {
        this.state = 1746;
        this.match(CPP14Parser.Comma);
        this.state = 1747;
        this.memberDeclarator();
        this.state = 1752;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  memberDeclarator() {
    let localctx = new MemberDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CPP14Parser.RULE_memberDeclarator);
    var _la = 0;
    try {
      this.state = 1773;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 252, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1753;
          this.declarator();
          this.state = 1763;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 249, this._ctx);
          switch (la_) {
            case 1:
              this.state = 1755;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CPP14Parser.Final || _la === CPP14Parser.Override) {
                this.state = 1754;
                this.virtualSpecifierSeq();
              }
              this.state = 1758;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CPP14Parser.Assign) {
                this.state = 1757;
                this.pureSpecifier();
              }
              break;
            case 2:
              this.state = 1761;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === CPP14Parser.LeftBrace || _la === CPP14Parser.Assign) {
                this.state = 1760;
                this.braceOrEqualInitializer();
              }
              break;
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1766;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Identifier) {
            this.state = 1765;
            this.match(CPP14Parser.Identifier);
          }
          this.state = 1769;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
            this.state = 1768;
            this.attributeSpecifierSeq();
          }
          this.state = 1771;
          this.match(CPP14Parser.Colon);
          this.state = 1772;
          this.constantExpression();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  virtualSpecifierSeq() {
    let localctx = new VirtualSpecifierSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CPP14Parser.RULE_virtualSpecifierSeq);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1776;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1775;
        this.virtualSpecifier();
        this.state = 1778;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === CPP14Parser.Final || _la === CPP14Parser.Override);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  virtualSpecifier() {
    let localctx = new VirtualSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CPP14Parser.RULE_virtualSpecifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1780;
      _la = this._input.LA(1);
      if (!(_la === CPP14Parser.Final || _la === CPP14Parser.Override)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  pureSpecifier() {
    let localctx = new PureSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, CPP14Parser.RULE_pureSpecifier);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1782;
      this.match(CPP14Parser.Assign);
      this.state = 1783;
      localctx.val = this.match(CPP14Parser.OctalLiteral);
      if ((localctx.val === null ? null : localctx.val.text).compareTo("0") != 0)
        throw new InputMismatchException(this);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  baseClause() {
    let localctx = new BaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, CPP14Parser.RULE_baseClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1786;
      this.match(CPP14Parser.Colon);
      this.state = 1787;
      this.baseSpecifierList();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  baseSpecifierList() {
    let localctx = new BaseSpecifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, CPP14Parser.RULE_baseSpecifierList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1789;
      this.baseSpecifier();
      this.state = 1791;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Ellipsis) {
        this.state = 1790;
        this.match(CPP14Parser.Ellipsis);
      }
      this.state = 1800;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Comma) {
        this.state = 1793;
        this.match(CPP14Parser.Comma);
        this.state = 1794;
        this.baseSpecifier();
        this.state = 1796;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CPP14Parser.Ellipsis) {
          this.state = 1795;
          this.match(CPP14Parser.Ellipsis);
        }
        this.state = 1802;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  baseSpecifier() {
    let localctx = new BaseSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, CPP14Parser.RULE_baseSpecifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1804;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
        this.state = 1803;
        this.attributeSpecifierSeq();
      }
      this.state = 1818;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Decltype:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.state = 1806;
          this.baseTypeSpecifier();
          break;
        case CPP14Parser.Virtual:
          this.state = 1807;
          this.match(CPP14Parser.Virtual);
          this.state = 1809;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la - 54 & ~31) == 0 && (1 << _la - 54 & (1 << CPP14Parser.Private - 54 | 1 << CPP14Parser.Protected - 54 | 1 << CPP14Parser.Public - 54)) !== 0) {
            this.state = 1808;
            this.accessSpecifier();
          }
          this.state = 1811;
          this.baseTypeSpecifier();
          break;
        case CPP14Parser.Private:
        case CPP14Parser.Protected:
        case CPP14Parser.Public:
          this.state = 1812;
          this.accessSpecifier();
          this.state = 1814;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Virtual) {
            this.state = 1813;
            this.match(CPP14Parser.Virtual);
          }
          this.state = 1816;
          this.baseTypeSpecifier();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classOrDeclType() {
    let localctx = new ClassOrDeclTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, CPP14Parser.RULE_classOrDeclType);
    try {
      this.state = 1825;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 262, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1821;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 261, this._ctx);
          if (la_ === 1) {
            this.state = 1820;
            this.nestedNameSpecifier(0);
          }
          this.state = 1823;
          this.className();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1824;
          this.decltypeSpecifier();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  baseTypeSpecifier() {
    let localctx = new BaseTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, CPP14Parser.RULE_baseTypeSpecifier);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1827;
      this.classOrDeclType();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  accessSpecifier() {
    let localctx = new AccessSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CPP14Parser.RULE_accessSpecifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1829;
      _la = this._input.LA(1);
      if (!((_la - 54 & ~31) == 0 && (1 << _la - 54 & (1 << CPP14Parser.Private - 54 | 1 << CPP14Parser.Protected - 54 | 1 << CPP14Parser.Public - 54)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  conversionFunctionId() {
    let localctx = new ConversionFunctionIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CPP14Parser.RULE_conversionFunctionId);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1831;
      this.match(CPP14Parser.Operator);
      this.state = 1832;
      this.conversionTypeId();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  conversionTypeId() {
    let localctx = new ConversionTypeIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, CPP14Parser.RULE_conversionTypeId);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1834;
      this.typeSpecifierSeq();
      this.state = 1836;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 263, this._ctx);
      if (la_ === 1) {
        this.state = 1835;
        this.conversionDeclarator();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  conversionDeclarator() {
    let localctx = new ConversionDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CPP14Parser.RULE_conversionDeclarator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1838;
      this.pointerOperator();
      this.state = 1840;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 264, this._ctx);
      if (la_ === 1) {
        this.state = 1839;
        this.conversionDeclarator();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  constructorInitializer() {
    let localctx = new ConstructorInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CPP14Parser.RULE_constructorInitializer);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1842;
      this.match(CPP14Parser.Colon);
      this.state = 1843;
      this.memInitializerList();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  memInitializerList() {
    let localctx = new MemInitializerListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CPP14Parser.RULE_memInitializerList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1845;
      this.memInitializer();
      this.state = 1847;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Ellipsis) {
        this.state = 1846;
        this.match(CPP14Parser.Ellipsis);
      }
      this.state = 1856;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Comma) {
        this.state = 1849;
        this.match(CPP14Parser.Comma);
        this.state = 1850;
        this.memInitializer();
        this.state = 1852;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CPP14Parser.Ellipsis) {
          this.state = 1851;
          this.match(CPP14Parser.Ellipsis);
        }
        this.state = 1858;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  memInitializer() {
    let localctx = new MemInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CPP14Parser.RULE_memInitializer);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1859;
      this.meminitializerid();
      this.state = 1866;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.LeftParen:
          this.state = 1860;
          this.match(CPP14Parser.LeftParen);
          this.state = 1862;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 71 & ~31) == 0 && (1 << _la - 71 & (1 << CPP14Parser.Throw - 71 | 1 << CPP14Parser.Typeid_ - 71 | 1 << CPP14Parser.Typename_ - 71 | 1 << CPP14Parser.Unsigned - 71 | 1 << CPP14Parser.Void - 71 | 1 << CPP14Parser.Wchar - 71 | 1 << CPP14Parser.LeftParen - 71 | 1 << CPP14Parser.LeftBracket - 71 | 1 << CPP14Parser.LeftBrace - 71 | 1 << CPP14Parser.Plus - 71 | 1 << CPP14Parser.Minus - 71 | 1 << CPP14Parser.Star - 71 | 1 << CPP14Parser.And - 71 | 1 << CPP14Parser.Or - 71 | 1 << CPP14Parser.Tilde - 71 | 1 << CPP14Parser.Not - 71)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
            this.state = 1861;
            this.expressionList();
          }
          this.state = 1864;
          this.match(CPP14Parser.RightParen);
          break;
        case CPP14Parser.LeftBrace:
          this.state = 1865;
          this.bracedInitList();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  meminitializerid() {
    let localctx = new MeminitializeridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CPP14Parser.RULE_meminitializerid);
    try {
      this.state = 1870;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 270, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1868;
          this.classOrDeclType();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1869;
          this.match(CPP14Parser.Identifier);
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  operatorFunctionId() {
    let localctx = new OperatorFunctionIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CPP14Parser.RULE_operatorFunctionId);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1872;
      this.match(CPP14Parser.Operator);
      this.state = 1873;
      this.theOperator();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  literalOperatorId() {
    let localctx = new LiteralOperatorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CPP14Parser.RULE_literalOperatorId);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1875;
      this.match(CPP14Parser.Operator);
      this.state = 1879;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.StringLiteral:
          this.state = 1876;
          this.match(CPP14Parser.StringLiteral);
          this.state = 1877;
          this.match(CPP14Parser.Identifier);
          break;
        case CPP14Parser.UserDefinedStringLiteral:
          this.state = 1878;
          this.match(CPP14Parser.UserDefinedStringLiteral);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateDeclaration() {
    let localctx = new TemplateDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CPP14Parser.RULE_templateDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1881;
      this.match(CPP14Parser.Template);
      this.state = 1882;
      this.match(CPP14Parser.Less);
      this.state = 1883;
      this.templateparameterList();
      this.state = 1884;
      this.match(CPP14Parser.Greater);
      this.state = 1885;
      this.declaration();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateparameterList() {
    let localctx = new TemplateparameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CPP14Parser.RULE_templateparameterList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1887;
      this.templateParameter();
      this.state = 1892;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Comma) {
        this.state = 1888;
        this.match(CPP14Parser.Comma);
        this.state = 1889;
        this.templateParameter();
        this.state = 1894;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateParameter() {
    let localctx = new TemplateParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CPP14Parser.RULE_templateParameter);
    try {
      this.state = 1897;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 273, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1895;
          this.typeParameter();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1896;
          this.parameterDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeParameter() {
    let localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CPP14Parser.RULE_typeParameter);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1908;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Class:
        case CPP14Parser.Template:
          this.state = 1904;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Template) {
            this.state = 1899;
            this.match(CPP14Parser.Template);
            this.state = 1900;
            this.match(CPP14Parser.Less);
            this.state = 1901;
            this.templateparameterList();
            this.state = 1902;
            this.match(CPP14Parser.Greater);
          }
          this.state = 1906;
          this.match(CPP14Parser.Class);
          break;
        case CPP14Parser.Typename_:
          this.state = 1907;
          this.match(CPP14Parser.Typename_);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
      this.state = 1921;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 279, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1911;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Ellipsis) {
            this.state = 1910;
            this.match(CPP14Parser.Ellipsis);
          }
          this.state = 1914;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Identifier) {
            this.state = 1913;
            this.match(CPP14Parser.Identifier);
          }
          break;
        case 2:
          this.state = 1917;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Identifier) {
            this.state = 1916;
            this.match(CPP14Parser.Identifier);
          }
          this.state = 1919;
          this.match(CPP14Parser.Assign);
          this.state = 1920;
          this.theTypeId();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  simpleTemplateId() {
    let localctx = new SimpleTemplateIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, CPP14Parser.RULE_simpleTemplateId);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1923;
      this.templateName();
      this.state = 1924;
      this.match(CPP14Parser.Less);
      this.state = 1926;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Class | 1 << CPP14Parser.Const | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << CPP14Parser.Enum - 33 | 1 << CPP14Parser.Float - 33 | 1 << CPP14Parser.Int - 33 | 1 << CPP14Parser.Long - 33 | 1 << CPP14Parser.New - 33 | 1 << CPP14Parser.Noexcept - 33 | 1 << CPP14Parser.Operator - 33 | 1 << CPP14Parser.Reinterpret_cast - 33 | 1 << CPP14Parser.Short - 33 | 1 << CPP14Parser.Signed - 33 | 1 << CPP14Parser.Sizeof - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << CPP14Parser.Static_cast - 65 | 1 << CPP14Parser.Struct - 65 | 1 << CPP14Parser.This - 65 | 1 << CPP14Parser.Typeid_ - 65 | 1 << CPP14Parser.Typename_ - 65 | 1 << CPP14Parser.Union - 65 | 1 << CPP14Parser.Unsigned - 65 | 1 << CPP14Parser.Void - 65 | 1 << CPP14Parser.Volatile - 65 | 1 << CPP14Parser.Wchar - 65 | 1 << CPP14Parser.LeftParen - 65 | 1 << CPP14Parser.LeftBracket - 65 | 1 << CPP14Parser.Plus - 65 | 1 << CPP14Parser.Minus - 65 | 1 << CPP14Parser.Star - 65)) !== 0 || (_la - 97 & ~31) == 0 && (1 << _la - 97 & (1 << CPP14Parser.And - 97 | 1 << CPP14Parser.Or - 97 | 1 << CPP14Parser.Tilde - 97 | 1 << CPP14Parser.Not - 97 | 1 << CPP14Parser.PlusPlus - 97 | 1 << CPP14Parser.MinusMinus - 97 | 1 << CPP14Parser.Doublecolon - 97)) !== 0 || _la === CPP14Parser.Identifier) {
        this.state = 1925;
        this.templateArgumentList();
      }
      this.state = 1928;
      this.match(CPP14Parser.Greater);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateId() {
    let localctx = new TemplateIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CPP14Parser.RULE_templateId);
    var _la = 0;
    try {
      this.state = 1941;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 1930;
          this.simpleTemplateId();
          break;
        case CPP14Parser.Operator:
          this.enterOuterAlt(localctx, 2);
          this.state = 1933;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 281, this._ctx);
          switch (la_) {
            case 1:
              this.state = 1931;
              this.operatorFunctionId();
              break;
            case 2:
              this.state = 1932;
              this.literalOperatorId();
              break;
          }
          this.state = 1935;
          this.match(CPP14Parser.Less);
          this.state = 1937;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Class | 1 << CPP14Parser.Const | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << CPP14Parser.Enum - 33 | 1 << CPP14Parser.Float - 33 | 1 << CPP14Parser.Int - 33 | 1 << CPP14Parser.Long - 33 | 1 << CPP14Parser.New - 33 | 1 << CPP14Parser.Noexcept - 33 | 1 << CPP14Parser.Operator - 33 | 1 << CPP14Parser.Reinterpret_cast - 33 | 1 << CPP14Parser.Short - 33 | 1 << CPP14Parser.Signed - 33 | 1 << CPP14Parser.Sizeof - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << CPP14Parser.Static_cast - 65 | 1 << CPP14Parser.Struct - 65 | 1 << CPP14Parser.This - 65 | 1 << CPP14Parser.Typeid_ - 65 | 1 << CPP14Parser.Typename_ - 65 | 1 << CPP14Parser.Union - 65 | 1 << CPP14Parser.Unsigned - 65 | 1 << CPP14Parser.Void - 65 | 1 << CPP14Parser.Volatile - 65 | 1 << CPP14Parser.Wchar - 65 | 1 << CPP14Parser.LeftParen - 65 | 1 << CPP14Parser.LeftBracket - 65 | 1 << CPP14Parser.Plus - 65 | 1 << CPP14Parser.Minus - 65 | 1 << CPP14Parser.Star - 65)) !== 0 || (_la - 97 & ~31) == 0 && (1 << _la - 97 & (1 << CPP14Parser.And - 97 | 1 << CPP14Parser.Or - 97 | 1 << CPP14Parser.Tilde - 97 | 1 << CPP14Parser.Not - 97 | 1 << CPP14Parser.PlusPlus - 97 | 1 << CPP14Parser.MinusMinus - 97 | 1 << CPP14Parser.Doublecolon - 97)) !== 0 || _la === CPP14Parser.Identifier) {
            this.state = 1936;
            this.templateArgumentList();
          }
          this.state = 1939;
          this.match(CPP14Parser.Greater);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateName() {
    let localctx = new TemplateNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CPP14Parser.RULE_templateName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1943;
      this.match(CPP14Parser.Identifier);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateArgumentList() {
    let localctx = new TemplateArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, CPP14Parser.RULE_templateArgumentList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1945;
      this.templateArgument();
      this.state = 1947;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Ellipsis) {
        this.state = 1946;
        this.match(CPP14Parser.Ellipsis);
      }
      this.state = 1956;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Comma) {
        this.state = 1949;
        this.match(CPP14Parser.Comma);
        this.state = 1950;
        this.templateArgument();
        this.state = 1952;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CPP14Parser.Ellipsis) {
          this.state = 1951;
          this.match(CPP14Parser.Ellipsis);
        }
        this.state = 1958;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  templateArgument() {
    let localctx = new TemplateArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CPP14Parser.RULE_templateArgument);
    try {
      this.state = 1962;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 287, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1959;
          this.theTypeId();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1960;
          this.constantExpression();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1961;
          this.idExpression();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeNameSpecifier() {
    let localctx = new TypeNameSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CPP14Parser.RULE_typeNameSpecifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1964;
      this.match(CPP14Parser.Typename_);
      this.state = 1965;
      this.nestedNameSpecifier(0);
      this.state = 1971;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 289, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1966;
          this.match(CPP14Parser.Identifier);
          break;
        case 2:
          this.state = 1968;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Template) {
            this.state = 1967;
            this.match(CPP14Parser.Template);
          }
          this.state = 1970;
          this.simpleTemplateId();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  explicitInstantiation() {
    let localctx = new ExplicitInstantiationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, CPP14Parser.RULE_explicitInstantiation);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1974;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Extern) {
        this.state = 1973;
        this.match(CPP14Parser.Extern);
      }
      this.state = 1976;
      this.match(CPP14Parser.Template);
      this.state = 1977;
      this.declaration();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  explicitSpecialization() {
    let localctx = new ExplicitSpecializationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, CPP14Parser.RULE_explicitSpecialization);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1979;
      this.match(CPP14Parser.Template);
      this.state = 1980;
      this.match(CPP14Parser.Less);
      this.state = 1981;
      this.match(CPP14Parser.Greater);
      this.state = 1982;
      this.declaration();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  tryBlock() {
    let localctx = new TryBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, CPP14Parser.RULE_tryBlock);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1984;
      this.match(CPP14Parser.Try);
      this.state = 1985;
      this.compoundStatement();
      this.state = 1986;
      this.handlerSeq();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  functionTryBlock() {
    let localctx = new FunctionTryBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, CPP14Parser.RULE_functionTryBlock);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1988;
      this.match(CPP14Parser.Try);
      this.state = 1990;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Colon) {
        this.state = 1989;
        this.constructorInitializer();
      }
      this.state = 1992;
      this.compoundStatement();
      this.state = 1993;
      this.handlerSeq();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  handlerSeq() {
    let localctx = new HandlerSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CPP14Parser.RULE_handlerSeq);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1996;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1995;
        this.handler();
        this.state = 1998;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === CPP14Parser.Catch);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  handler() {
    let localctx = new HandlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CPP14Parser.RULE_handler);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2e3;
      this.match(CPP14Parser.Catch);
      this.state = 2001;
      this.match(CPP14Parser.LeftParen);
      this.state = 2002;
      this.exceptionDeclaration();
      this.state = 2003;
      this.match(CPP14Parser.RightParen);
      this.state = 2004;
      this.compoundStatement();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  exceptionDeclaration() {
    let localctx = new ExceptionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, CPP14Parser.RULE_exceptionDeclaration);
    var _la = 0;
    try {
      this.state = 2015;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Alignas:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.Enum:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Struct:
        case CPP14Parser.Typename_:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 2007;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {
            this.state = 2006;
            this.attributeSpecifierSeq();
          }
          this.state = 2009;
          this.typeSpecifierSeq();
          this.state = 2012;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 294, this._ctx);
          if (la_ === 1) {
            this.state = 2010;
            this.declarator();
          } else if (la_ === 2) {
            this.state = 2011;
            this.abstractDeclarator();
          }
          break;
        case CPP14Parser.Ellipsis:
          this.enterOuterAlt(localctx, 2);
          this.state = 2014;
          this.match(CPP14Parser.Ellipsis);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  throwExpression() {
    let localctx = new ThrowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, CPP14Parser.RULE_throwExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2017;
      this.match(CPP14Parser.Throw);
      this.state = 2019;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral | 1 << CPP14Parser.Alignof | 1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Const_cast | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Delete | 1 << CPP14Parser.Double | 1 << CPP14Parser.Dynamic_cast)) !== 0 || (_la - 39 & ~31) == 0 && (1 << _la - 39 & (1 << CPP14Parser.Float - 39 | 1 << CPP14Parser.Int - 39 | 1 << CPP14Parser.Long - 39 | 1 << CPP14Parser.New - 39 | 1 << CPP14Parser.Noexcept - 39 | 1 << CPP14Parser.Operator - 39 | 1 << CPP14Parser.Reinterpret_cast - 39 | 1 << CPP14Parser.Short - 39 | 1 << CPP14Parser.Signed - 39 | 1 << CPP14Parser.Sizeof - 39 | 1 << CPP14Parser.Static_cast - 39 | 1 << CPP14Parser.This - 39)) !== 0 || (_la - 71 & ~31) == 0 && (1 << _la - 71 & (1 << CPP14Parser.Throw - 71 | 1 << CPP14Parser.Typeid_ - 71 | 1 << CPP14Parser.Typename_ - 71 | 1 << CPP14Parser.Unsigned - 71 | 1 << CPP14Parser.Void - 71 | 1 << CPP14Parser.Wchar - 71 | 1 << CPP14Parser.LeftParen - 71 | 1 << CPP14Parser.LeftBracket - 71 | 1 << CPP14Parser.Plus - 71 | 1 << CPP14Parser.Minus - 71 | 1 << CPP14Parser.Star - 71 | 1 << CPP14Parser.And - 71 | 1 << CPP14Parser.Or - 71 | 1 << CPP14Parser.Tilde - 71 | 1 << CPP14Parser.Not - 71)) !== 0 || (_la - 120 & ~31) == 0 && (1 << _la - 120 & (1 << CPP14Parser.PlusPlus - 120 | 1 << CPP14Parser.MinusMinus - 120 | 1 << CPP14Parser.Doublecolon - 120 | 1 << CPP14Parser.Identifier - 120)) !== 0) {
        this.state = 2018;
        this.assignmentExpression();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  exceptionSpecification() {
    let localctx = new ExceptionSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CPP14Parser.RULE_exceptionSpecification);
    try {
      this.state = 2023;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CPP14Parser.Throw:
          this.enterOuterAlt(localctx, 1);
          this.state = 2021;
          this.dynamicExceptionSpecification();
          break;
        case CPP14Parser.Noexcept:
          this.enterOuterAlt(localctx, 2);
          this.state = 2022;
          this.noeExceptSpecification();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  dynamicExceptionSpecification() {
    let localctx = new DynamicExceptionSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CPP14Parser.RULE_dynamicExceptionSpecification);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2025;
      this.match(CPP14Parser.Throw);
      this.state = 2026;
      this.match(CPP14Parser.LeftParen);
      this.state = 2028;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.Auto | 1 << CPP14Parser.Bool | 1 << CPP14Parser.Char | 1 << CPP14Parser.Char16 | 1 << CPP14Parser.Char32 | 1 << CPP14Parser.Class | 1 << CPP14Parser.Const | 1 << CPP14Parser.Decltype | 1 << CPP14Parser.Double)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << CPP14Parser.Enum - 33 | 1 << CPP14Parser.Float - 33 | 1 << CPP14Parser.Int - 33 | 1 << CPP14Parser.Long - 33 | 1 << CPP14Parser.Short - 33 | 1 << CPP14Parser.Signed - 33)) !== 0 || (_la - 66 & ~31) == 0 && (1 << _la - 66 & (1 << CPP14Parser.Struct - 66 | 1 << CPP14Parser.Typename_ - 66 | 1 << CPP14Parser.Union - 66 | 1 << CPP14Parser.Unsigned - 66 | 1 << CPP14Parser.Void - 66 | 1 << CPP14Parser.Volatile - 66 | 1 << CPP14Parser.Wchar - 66)) !== 0 || _la === CPP14Parser.Doublecolon || _la === CPP14Parser.Identifier) {
        this.state = 2027;
        this.typeIdList();
      }
      this.state = 2030;
      this.match(CPP14Parser.RightParen);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeIdList() {
    let localctx = new TypeIdListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CPP14Parser.RULE_typeIdList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2032;
      this.theTypeId();
      this.state = 2034;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CPP14Parser.Ellipsis) {
        this.state = 2033;
        this.match(CPP14Parser.Ellipsis);
      }
      this.state = 2043;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CPP14Parser.Comma) {
        this.state = 2036;
        this.match(CPP14Parser.Comma);
        this.state = 2037;
        this.theTypeId();
        this.state = 2039;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CPP14Parser.Ellipsis) {
          this.state = 2038;
          this.match(CPP14Parser.Ellipsis);
        }
        this.state = 2045;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  noeExceptSpecification() {
    let localctx = new NoeExceptSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CPP14Parser.RULE_noeExceptSpecification);
    try {
      this.state = 2052;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 302, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2046;
          this.match(CPP14Parser.Noexcept);
          this.state = 2047;
          this.match(CPP14Parser.LeftParen);
          this.state = 2048;
          this.constantExpression();
          this.state = 2049;
          this.match(CPP14Parser.RightParen);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2051;
          this.match(CPP14Parser.Noexcept);
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  theOperator() {
    let localctx = new TheOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CPP14Parser.RULE_theOperator);
    try {
      this.state = 2105;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 305, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2054;
          this.match(CPP14Parser.New);
          this.state = 2057;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 303, this._ctx);
          if (la_ === 1) {
            this.state = 2055;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2056;
            this.match(CPP14Parser.RightBracket);
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2059;
          this.match(CPP14Parser.Delete);
          this.state = 2062;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 304, this._ctx);
          if (la_ === 1) {
            this.state = 2060;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2061;
            this.match(CPP14Parser.RightBracket);
          }
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2064;
          this.match(CPP14Parser.Plus);
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2065;
          this.match(CPP14Parser.Minus);
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2066;
          this.match(CPP14Parser.Star);
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 2067;
          this.match(CPP14Parser.Div);
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 2068;
          this.match(CPP14Parser.Mod);
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 2069;
          this.match(CPP14Parser.Caret);
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 2070;
          this.match(CPP14Parser.And);
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 2071;
          this.match(CPP14Parser.Or);
          break;
        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 2072;
          this.match(CPP14Parser.Tilde);
          break;
        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 2073;
          this.match(CPP14Parser.Not);
          break;
        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 2074;
          this.match(CPP14Parser.Assign);
          break;
        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 2075;
          this.match(CPP14Parser.Greater);
          break;
        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 2076;
          this.match(CPP14Parser.Less);
          break;
        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 2077;
          this.match(CPP14Parser.GreaterEqual);
          break;
        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 2078;
          this.match(CPP14Parser.PlusAssign);
          break;
        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 2079;
          this.match(CPP14Parser.MinusAssign);
          break;
        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 2080;
          this.match(CPP14Parser.StarAssign);
          break;
        case 20:
          this.enterOuterAlt(localctx, 20);
          this.state = 2081;
          this.match(CPP14Parser.ModAssign);
          break;
        case 21:
          this.enterOuterAlt(localctx, 21);
          this.state = 2082;
          this.match(CPP14Parser.XorAssign);
          break;
        case 22:
          this.enterOuterAlt(localctx, 22);
          this.state = 2083;
          this.match(CPP14Parser.AndAssign);
          break;
        case 23:
          this.enterOuterAlt(localctx, 23);
          this.state = 2084;
          this.match(CPP14Parser.OrAssign);
          break;
        case 24:
          this.enterOuterAlt(localctx, 24);
          this.state = 2085;
          this.match(CPP14Parser.Less);
          this.state = 2086;
          this.match(CPP14Parser.Less);
          break;
        case 25:
          this.enterOuterAlt(localctx, 25);
          this.state = 2087;
          this.match(CPP14Parser.Greater);
          this.state = 2088;
          this.match(CPP14Parser.Greater);
          break;
        case 26:
          this.enterOuterAlt(localctx, 26);
          this.state = 2089;
          this.match(CPP14Parser.RightShiftAssign);
          break;
        case 27:
          this.enterOuterAlt(localctx, 27);
          this.state = 2090;
          this.match(CPP14Parser.LeftShiftAssign);
          break;
        case 28:
          this.enterOuterAlt(localctx, 28);
          this.state = 2091;
          this.match(CPP14Parser.Equal);
          break;
        case 29:
          this.enterOuterAlt(localctx, 29);
          this.state = 2092;
          this.match(CPP14Parser.NotEqual);
          break;
        case 30:
          this.enterOuterAlt(localctx, 30);
          this.state = 2093;
          this.match(CPP14Parser.LessEqual);
          break;
        case 31:
          this.enterOuterAlt(localctx, 31);
          this.state = 2094;
          this.match(CPP14Parser.AndAnd);
          break;
        case 32:
          this.enterOuterAlt(localctx, 32);
          this.state = 2095;
          this.match(CPP14Parser.OrOr);
          break;
        case 33:
          this.enterOuterAlt(localctx, 33);
          this.state = 2096;
          this.match(CPP14Parser.PlusPlus);
          break;
        case 34:
          this.enterOuterAlt(localctx, 34);
          this.state = 2097;
          this.match(CPP14Parser.MinusMinus);
          break;
        case 35:
          this.enterOuterAlt(localctx, 35);
          this.state = 2098;
          this.match(CPP14Parser.Comma);
          break;
        case 36:
          this.enterOuterAlt(localctx, 36);
          this.state = 2099;
          this.match(CPP14Parser.ArrowStar);
          break;
        case 37:
          this.enterOuterAlt(localctx, 37);
          this.state = 2100;
          this.match(CPP14Parser.Arrow);
          break;
        case 38:
          this.enterOuterAlt(localctx, 38);
          this.state = 2101;
          this.match(CPP14Parser.LeftParen);
          this.state = 2102;
          this.match(CPP14Parser.RightParen);
          break;
        case 39:
          this.enterOuterAlt(localctx, 39);
          this.state = 2103;
          this.match(CPP14Parser.LeftBracket);
          this.state = 2104;
          this.match(CPP14Parser.RightBracket);
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  literal() {
    let localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CPP14Parser.RULE_literal);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2107;
      _la = this._input.LA(1);
      if (!((_la & ~31) == 0 && (1 << _la & (1 << CPP14Parser.IntegerLiteral | 1 << CPP14Parser.CharacterLiteral | 1 << CPP14Parser.FloatingLiteral | 1 << CPP14Parser.StringLiteral | 1 << CPP14Parser.BooleanLiteral | 1 << CPP14Parser.PointerLiteral | 1 << CPP14Parser.UserDefinedLiteral)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
}
CPP14Parser.EOF = import_antlr4.default.Token.EOF;
CPP14Parser.IntegerLiteral = 1;
CPP14Parser.CharacterLiteral = 2;
CPP14Parser.FloatingLiteral = 3;
CPP14Parser.StringLiteral = 4;
CPP14Parser.BooleanLiteral = 5;
CPP14Parser.PointerLiteral = 6;
CPP14Parser.UserDefinedLiteral = 7;
CPP14Parser.MultiLineMacro = 8;
CPP14Parser.Directive = 9;
CPP14Parser.Alignas = 10;
CPP14Parser.Alignof = 11;
CPP14Parser.Asm = 12;
CPP14Parser.Auto = 13;
CPP14Parser.Bool = 14;
CPP14Parser.Break = 15;
CPP14Parser.Case = 16;
CPP14Parser.Catch = 17;
CPP14Parser.Char = 18;
CPP14Parser.Char16 = 19;
CPP14Parser.Char32 = 20;
CPP14Parser.Class = 21;
CPP14Parser.Const = 22;
CPP14Parser.Constexpr = 23;
CPP14Parser.Const_cast = 24;
CPP14Parser.Continue = 25;
CPP14Parser.Decltype = 26;
CPP14Parser.Default = 27;
CPP14Parser.Delete = 28;
CPP14Parser.Do = 29;
CPP14Parser.Double = 30;
CPP14Parser.Dynamic_cast = 31;
CPP14Parser.Else = 32;
CPP14Parser.Enum = 33;
CPP14Parser.Explicit = 34;
CPP14Parser.Export = 35;
CPP14Parser.Extern = 36;
CPP14Parser.False_ = 37;
CPP14Parser.Final = 38;
CPP14Parser.Float = 39;
CPP14Parser.For = 40;
CPP14Parser.Friend = 41;
CPP14Parser.Goto = 42;
CPP14Parser.If = 43;
CPP14Parser.Inline = 44;
CPP14Parser.Int = 45;
CPP14Parser.Long = 46;
CPP14Parser.Mutable = 47;
CPP14Parser.Namespace = 48;
CPP14Parser.New = 49;
CPP14Parser.Noexcept = 50;
CPP14Parser.Nullptr = 51;
CPP14Parser.Operator = 52;
CPP14Parser.Override = 53;
CPP14Parser.Private = 54;
CPP14Parser.Protected = 55;
CPP14Parser.Public = 56;
CPP14Parser.Register = 57;
CPP14Parser.Reinterpret_cast = 58;
CPP14Parser.Return = 59;
CPP14Parser.Short = 60;
CPP14Parser.Signed = 61;
CPP14Parser.Sizeof = 62;
CPP14Parser.Static = 63;
CPP14Parser.Static_assert = 64;
CPP14Parser.Static_cast = 65;
CPP14Parser.Struct = 66;
CPP14Parser.Switch = 67;
CPP14Parser.Template = 68;
CPP14Parser.This = 69;
CPP14Parser.Thread_local = 70;
CPP14Parser.Throw = 71;
CPP14Parser.True_ = 72;
CPP14Parser.Try = 73;
CPP14Parser.Typedef = 74;
CPP14Parser.Typeid_ = 75;
CPP14Parser.Typename_ = 76;
CPP14Parser.Union = 77;
CPP14Parser.Unsigned = 78;
CPP14Parser.Using = 79;
CPP14Parser.Virtual = 80;
CPP14Parser.Void = 81;
CPP14Parser.Volatile = 82;
CPP14Parser.Wchar = 83;
CPP14Parser.While = 84;
CPP14Parser.LeftParen = 85;
CPP14Parser.RightParen = 86;
CPP14Parser.LeftBracket = 87;
CPP14Parser.RightBracket = 88;
CPP14Parser.LeftBrace = 89;
CPP14Parser.RightBrace = 90;
CPP14Parser.Plus = 91;
CPP14Parser.Minus = 92;
CPP14Parser.Star = 93;
CPP14Parser.Div = 94;
CPP14Parser.Mod = 95;
CPP14Parser.Caret = 96;
CPP14Parser.And = 97;
CPP14Parser.Or = 98;
CPP14Parser.Tilde = 99;
CPP14Parser.Not = 100;
CPP14Parser.Assign = 101;
CPP14Parser.Less = 102;
CPP14Parser.Greater = 103;
CPP14Parser.PlusAssign = 104;
CPP14Parser.MinusAssign = 105;
CPP14Parser.StarAssign = 106;
CPP14Parser.DivAssign = 107;
CPP14Parser.ModAssign = 108;
CPP14Parser.XorAssign = 109;
CPP14Parser.AndAssign = 110;
CPP14Parser.OrAssign = 111;
CPP14Parser.LeftShiftAssign = 112;
CPP14Parser.RightShiftAssign = 113;
CPP14Parser.Equal = 114;
CPP14Parser.NotEqual = 115;
CPP14Parser.LessEqual = 116;
CPP14Parser.GreaterEqual = 117;
CPP14Parser.AndAnd = 118;
CPP14Parser.OrOr = 119;
CPP14Parser.PlusPlus = 120;
CPP14Parser.MinusMinus = 121;
CPP14Parser.Comma = 122;
CPP14Parser.ArrowStar = 123;
CPP14Parser.Arrow = 124;
CPP14Parser.Question = 125;
CPP14Parser.Colon = 126;
CPP14Parser.Doublecolon = 127;
CPP14Parser.Semi = 128;
CPP14Parser.Dot = 129;
CPP14Parser.DotStar = 130;
CPP14Parser.Ellipsis = 131;
CPP14Parser.Identifier = 132;
CPP14Parser.DecimalLiteral = 133;
CPP14Parser.OctalLiteral = 134;
CPP14Parser.HexadecimalLiteral = 135;
CPP14Parser.BinaryLiteral = 136;
CPP14Parser.Integersuffix = 137;
CPP14Parser.UserDefinedIntegerLiteral = 138;
CPP14Parser.UserDefinedFloatingLiteral = 139;
CPP14Parser.UserDefinedStringLiteral = 140;
CPP14Parser.UserDefinedCharacterLiteral = 141;
CPP14Parser.Whitespace = 142;
CPP14Parser.Newline = 143;
CPP14Parser.BlockComment = 144;
CPP14Parser.LineComment = 145;
CPP14Parser.RULE_translationUnit = 0;
CPP14Parser.RULE_primaryExpression = 1;
CPP14Parser.RULE_idExpression = 2;
CPP14Parser.RULE_unqualifiedId = 3;
CPP14Parser.RULE_qualifiedId = 4;
CPP14Parser.RULE_nestedNameSpecifier = 5;
CPP14Parser.RULE_lambdaExpression = 6;
CPP14Parser.RULE_lambdaIntroducer = 7;
CPP14Parser.RULE_lambdaCapture = 8;
CPP14Parser.RULE_captureDefault = 9;
CPP14Parser.RULE_captureList = 10;
CPP14Parser.RULE_capture = 11;
CPP14Parser.RULE_simpleCapture = 12;
CPP14Parser.RULE_initcapture = 13;
CPP14Parser.RULE_lambdaDeclarator = 14;
CPP14Parser.RULE_postfixExpression = 15;
CPP14Parser.RULE_typeIdOfTheTypeId = 16;
CPP14Parser.RULE_expressionList = 17;
CPP14Parser.RULE_pseudoDestructorName = 18;
CPP14Parser.RULE_unaryExpression = 19;
CPP14Parser.RULE_unaryOperator = 20;
CPP14Parser.RULE_newExpression = 21;
CPP14Parser.RULE_newPlacement = 22;
CPP14Parser.RULE_newTypeId = 23;
CPP14Parser.RULE_newDeclarator = 24;
CPP14Parser.RULE_noPointerNewDeclarator = 25;
CPP14Parser.RULE_newInitializer = 26;
CPP14Parser.RULE_deleteExpression = 27;
CPP14Parser.RULE_noExceptExpression = 28;
CPP14Parser.RULE_castExpression = 29;
CPP14Parser.RULE_pointerMemberExpression = 30;
CPP14Parser.RULE_multiplicativeExpression = 31;
CPP14Parser.RULE_additiveExpression = 32;
CPP14Parser.RULE_shiftExpression = 33;
CPP14Parser.RULE_shiftOperator = 34;
CPP14Parser.RULE_relationalExpression = 35;
CPP14Parser.RULE_equalityExpression = 36;
CPP14Parser.RULE_andExpression = 37;
CPP14Parser.RULE_exclusiveOrExpression = 38;
CPP14Parser.RULE_inclusiveOrExpression = 39;
CPP14Parser.RULE_logicalAndExpression = 40;
CPP14Parser.RULE_logicalOrExpression = 41;
CPP14Parser.RULE_conditionalExpression = 42;
CPP14Parser.RULE_assignmentExpression = 43;
CPP14Parser.RULE_assignmentOperator = 44;
CPP14Parser.RULE_expression = 45;
CPP14Parser.RULE_constantExpression = 46;
CPP14Parser.RULE_statement = 47;
CPP14Parser.RULE_labeledStatement = 48;
CPP14Parser.RULE_expressionStatement = 49;
CPP14Parser.RULE_compoundStatement = 50;
CPP14Parser.RULE_statementSeq = 51;
CPP14Parser.RULE_selectionStatement = 52;
CPP14Parser.RULE_condition = 53;
CPP14Parser.RULE_iterationStatement = 54;
CPP14Parser.RULE_forInitStatement = 55;
CPP14Parser.RULE_forRangeDeclaration = 56;
CPP14Parser.RULE_forRangeInitializer = 57;
CPP14Parser.RULE_jumpStatement = 58;
CPP14Parser.RULE_declarationStatement = 59;
CPP14Parser.RULE_declarationseq = 60;
CPP14Parser.RULE_declaration = 61;
CPP14Parser.RULE_blockDeclaration = 62;
CPP14Parser.RULE_aliasDeclaration = 63;
CPP14Parser.RULE_simpleDeclaration = 64;
CPP14Parser.RULE_staticAssertDeclaration = 65;
CPP14Parser.RULE_emptyDeclaration = 66;
CPP14Parser.RULE_attributeDeclaration = 67;
CPP14Parser.RULE_declSpecifier = 68;
CPP14Parser.RULE_declSpecifierSeq = 69;
CPP14Parser.RULE_storageClassSpecifier = 70;
CPP14Parser.RULE_functionSpecifier = 71;
CPP14Parser.RULE_typedefName = 72;
CPP14Parser.RULE_typeSpecifier = 73;
CPP14Parser.RULE_trailingTypeSpecifier = 74;
CPP14Parser.RULE_typeSpecifierSeq = 75;
CPP14Parser.RULE_trailingTypeSpecifierSeq = 76;
CPP14Parser.RULE_simpleTypeLengthModifier = 77;
CPP14Parser.RULE_simpleTypeSignednessModifier = 78;
CPP14Parser.RULE_simpleTypeSpecifier = 79;
CPP14Parser.RULE_theTypeName = 80;
CPP14Parser.RULE_decltypeSpecifier = 81;
CPP14Parser.RULE_elaboratedTypeSpecifier = 82;
CPP14Parser.RULE_enumName = 83;
CPP14Parser.RULE_enumSpecifier = 84;
CPP14Parser.RULE_enumHead = 85;
CPP14Parser.RULE_opaqueEnumDeclaration = 86;
CPP14Parser.RULE_enumkey = 87;
CPP14Parser.RULE_enumbase = 88;
CPP14Parser.RULE_enumeratorList = 89;
CPP14Parser.RULE_enumeratorDefinition = 90;
CPP14Parser.RULE_enumerator = 91;
CPP14Parser.RULE_namespaceName = 92;
CPP14Parser.RULE_originalNamespaceName = 93;
CPP14Parser.RULE_namespaceDefinition = 94;
CPP14Parser.RULE_namespaceAlias = 95;
CPP14Parser.RULE_namespaceAliasDefinition = 96;
CPP14Parser.RULE_qualifiednamespacespecifier = 97;
CPP14Parser.RULE_usingDeclaration = 98;
CPP14Parser.RULE_usingDirective = 99;
CPP14Parser.RULE_asmDefinition = 100;
CPP14Parser.RULE_linkageSpecification = 101;
CPP14Parser.RULE_attributeSpecifierSeq = 102;
CPP14Parser.RULE_attributeSpecifier = 103;
CPP14Parser.RULE_alignmentspecifier = 104;
CPP14Parser.RULE_attributeList = 105;
CPP14Parser.RULE_attribute = 106;
CPP14Parser.RULE_attributeNamespace = 107;
CPP14Parser.RULE_attributeArgumentClause = 108;
CPP14Parser.RULE_balancedTokenSeq = 109;
CPP14Parser.RULE_balancedtoken = 110;
CPP14Parser.RULE_initDeclaratorList = 111;
CPP14Parser.RULE_initDeclarator = 112;
CPP14Parser.RULE_declarator = 113;
CPP14Parser.RULE_pointerDeclarator = 114;
CPP14Parser.RULE_noPointerDeclarator = 115;
CPP14Parser.RULE_parametersAndQualifiers = 116;
CPP14Parser.RULE_trailingReturnType = 117;
CPP14Parser.RULE_pointerOperator = 118;
CPP14Parser.RULE_cvqualifierseq = 119;
CPP14Parser.RULE_cvQualifier = 120;
CPP14Parser.RULE_refqualifier = 121;
CPP14Parser.RULE_declaratorid = 122;
CPP14Parser.RULE_theTypeId = 123;
CPP14Parser.RULE_abstractDeclarator = 124;
CPP14Parser.RULE_pointerAbstractDeclarator = 125;
CPP14Parser.RULE_noPointerAbstractDeclarator = 126;
CPP14Parser.RULE_abstractPackDeclarator = 127;
CPP14Parser.RULE_noPointerAbstractPackDeclarator = 128;
CPP14Parser.RULE_parameterDeclarationClause = 129;
CPP14Parser.RULE_parameterDeclarationList = 130;
CPP14Parser.RULE_parameterDeclaration = 131;
CPP14Parser.RULE_functionDefinition = 132;
CPP14Parser.RULE_functionBody = 133;
CPP14Parser.RULE_initializer = 134;
CPP14Parser.RULE_braceOrEqualInitializer = 135;
CPP14Parser.RULE_initializerClause = 136;
CPP14Parser.RULE_initializerList = 137;
CPP14Parser.RULE_bracedInitList = 138;
CPP14Parser.RULE_className = 139;
CPP14Parser.RULE_classSpecifier = 140;
CPP14Parser.RULE_classHead = 141;
CPP14Parser.RULE_classHeadName = 142;
CPP14Parser.RULE_classVirtSpecifier = 143;
CPP14Parser.RULE_classKey = 144;
CPP14Parser.RULE_memberSpecification = 145;
CPP14Parser.RULE_memberdeclaration = 146;
CPP14Parser.RULE_memberDeclaratorList = 147;
CPP14Parser.RULE_memberDeclarator = 148;
CPP14Parser.RULE_virtualSpecifierSeq = 149;
CPP14Parser.RULE_virtualSpecifier = 150;
CPP14Parser.RULE_pureSpecifier = 151;
CPP14Parser.RULE_baseClause = 152;
CPP14Parser.RULE_baseSpecifierList = 153;
CPP14Parser.RULE_baseSpecifier = 154;
CPP14Parser.RULE_classOrDeclType = 155;
CPP14Parser.RULE_baseTypeSpecifier = 156;
CPP14Parser.RULE_accessSpecifier = 157;
CPP14Parser.RULE_conversionFunctionId = 158;
CPP14Parser.RULE_conversionTypeId = 159;
CPP14Parser.RULE_conversionDeclarator = 160;
CPP14Parser.RULE_constructorInitializer = 161;
CPP14Parser.RULE_memInitializerList = 162;
CPP14Parser.RULE_memInitializer = 163;
CPP14Parser.RULE_meminitializerid = 164;
CPP14Parser.RULE_operatorFunctionId = 165;
CPP14Parser.RULE_literalOperatorId = 166;
CPP14Parser.RULE_templateDeclaration = 167;
CPP14Parser.RULE_templateparameterList = 168;
CPP14Parser.RULE_templateParameter = 169;
CPP14Parser.RULE_typeParameter = 170;
CPP14Parser.RULE_simpleTemplateId = 171;
CPP14Parser.RULE_templateId = 172;
CPP14Parser.RULE_templateName = 173;
CPP14Parser.RULE_templateArgumentList = 174;
CPP14Parser.RULE_templateArgument = 175;
CPP14Parser.RULE_typeNameSpecifier = 176;
CPP14Parser.RULE_explicitInstantiation = 177;
CPP14Parser.RULE_explicitSpecialization = 178;
CPP14Parser.RULE_tryBlock = 179;
CPP14Parser.RULE_functionTryBlock = 180;
CPP14Parser.RULE_handlerSeq = 181;
CPP14Parser.RULE_handler = 182;
CPP14Parser.RULE_exceptionDeclaration = 183;
CPP14Parser.RULE_throwExpression = 184;
CPP14Parser.RULE_exceptionSpecification = 185;
CPP14Parser.RULE_dynamicExceptionSpecification = 186;
CPP14Parser.RULE_typeIdList = 187;
CPP14Parser.RULE_noeExceptSpecification = 188;
CPP14Parser.RULE_theOperator = 189;
CPP14Parser.RULE_literal = 190;
class TranslationUnitContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_translationUnit;
  }
  EOF() {
    return this.getToken(CPP14Parser.EOF, 0);
  }
  declarationseq() {
    return this.getTypedRuleContext(DeclarationseqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTranslationUnit(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTranslationUnit(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTranslationUnit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PrimaryExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_primaryExpression;
  }
  literal = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(LiteralContext);
    } else {
      return this.getTypedRuleContext(LiteralContext, i);
    }
  };
  This() {
    return this.getToken(CPP14Parser.This, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  idExpression() {
    return this.getTypedRuleContext(IdExpressionContext, 0);
  }
  lambdaExpression() {
    return this.getTypedRuleContext(LambdaExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterPrimaryExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitPrimaryExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitPrimaryExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IdExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_idExpression;
  }
  unqualifiedId() {
    return this.getTypedRuleContext(UnqualifiedIdContext, 0);
  }
  qualifiedId() {
    return this.getTypedRuleContext(QualifiedIdContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterIdExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitIdExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitIdExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class UnqualifiedIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unqualifiedId;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  operatorFunctionId() {
    return this.getTypedRuleContext(OperatorFunctionIdContext, 0);
  }
  conversionFunctionId() {
    return this.getTypedRuleContext(ConversionFunctionIdContext, 0);
  }
  literalOperatorId() {
    return this.getTypedRuleContext(LiteralOperatorIdContext, 0);
  }
  Tilde() {
    return this.getToken(CPP14Parser.Tilde, 0);
  }
  className() {
    return this.getTypedRuleContext(ClassNameContext, 0);
  }
  decltypeSpecifier() {
    return this.getTypedRuleContext(DecltypeSpecifierContext, 0);
  }
  templateId() {
    return this.getTypedRuleContext(TemplateIdContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterUnqualifiedId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitUnqualifiedId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitUnqualifiedId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class QualifiedIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_qualifiedId;
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  unqualifiedId() {
    return this.getTypedRuleContext(UnqualifiedIdContext, 0);
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterQualifiedId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitQualifiedId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitQualifiedId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NestedNameSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_nestedNameSpecifier;
  }
  Doublecolon() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
  }
  theTypeName() {
    return this.getTypedRuleContext(TheTypeNameContext, 0);
  }
  namespaceName() {
    return this.getTypedRuleContext(NamespaceNameContext, 0);
  }
  decltypeSpecifier() {
    return this.getTypedRuleContext(DecltypeSpecifierContext, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  simpleTemplateId() {
    return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNestedNameSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNestedNameSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNestedNameSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LambdaExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdaExpression;
  }
  lambdaIntroducer() {
    return this.getTypedRuleContext(LambdaIntroducerContext, 0);
  }
  compoundStatement() {
    return this.getTypedRuleContext(CompoundStatementContext, 0);
  }
  lambdaDeclarator() {
    return this.getTypedRuleContext(LambdaDeclaratorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterLambdaExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitLambdaExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitLambdaExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LambdaIntroducerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdaIntroducer;
  }
  LeftBracket() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
  }
  RightBracket() {
    return this.getToken(CPP14Parser.RightBracket, 0);
  }
  lambdaCapture() {
    return this.getTypedRuleContext(LambdaCaptureContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterLambdaIntroducer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitLambdaIntroducer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitLambdaIntroducer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LambdaCaptureContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdaCapture;
  }
  captureList() {
    return this.getTypedRuleContext(CaptureListContext, 0);
  }
  captureDefault() {
    return this.getTypedRuleContext(CaptureDefaultContext, 0);
  }
  Comma() {
    return this.getToken(CPP14Parser.Comma, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterLambdaCapture(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitLambdaCapture(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitLambdaCapture(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CaptureDefaultContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_captureDefault;
  }
  And() {
    return this.getToken(CPP14Parser.And, 0);
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterCaptureDefault(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitCaptureDefault(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitCaptureDefault(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CaptureListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_captureList;
  }
  capture = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CaptureContext);
    } else {
      return this.getTypedRuleContext(CaptureContext, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  Ellipsis() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterCaptureList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitCaptureList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitCaptureList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CaptureContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_capture;
  }
  simpleCapture() {
    return this.getTypedRuleContext(SimpleCaptureContext, 0);
  }
  initcapture() {
    return this.getTypedRuleContext(InitcaptureContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterCapture(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitCapture(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitCapture(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SimpleCaptureContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpleCapture;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  And() {
    return this.getToken(CPP14Parser.And, 0);
  }
  This() {
    return this.getToken(CPP14Parser.This, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterSimpleCapture(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitSimpleCapture(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitSimpleCapture(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InitcaptureContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initcapture;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  initializer() {
    return this.getTypedRuleContext(InitializerContext, 0);
  }
  And() {
    return this.getToken(CPP14Parser.And, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterInitcapture(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitInitcapture(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitInitcapture(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LambdaDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdaDeclarator;
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  parameterDeclarationClause() {
    return this.getTypedRuleContext(ParameterDeclarationClauseContext, 0);
  }
  Mutable() {
    return this.getToken(CPP14Parser.Mutable, 0);
  }
  exceptionSpecification() {
    return this.getTypedRuleContext(ExceptionSpecificationContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  trailingReturnType() {
    return this.getTypedRuleContext(TrailingReturnTypeContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterLambdaDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitLambdaDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitLambdaDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PostfixExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_postfixExpression;
  }
  primaryExpression() {
    return this.getTypedRuleContext(PrimaryExpressionContext, 0);
  }
  simpleTypeSpecifier() {
    return this.getTypedRuleContext(SimpleTypeSpecifierContext, 0);
  }
  typeNameSpecifier() {
    return this.getTypedRuleContext(TypeNameSpecifierContext, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  bracedInitList() {
    return this.getTypedRuleContext(BracedInitListContext, 0);
  }
  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }
  Less() {
    return this.getToken(CPP14Parser.Less, 0);
  }
  theTypeId() {
    return this.getTypedRuleContext(TheTypeIdContext, 0);
  }
  Greater() {
    return this.getToken(CPP14Parser.Greater, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  Dynamic_cast() {
    return this.getToken(CPP14Parser.Dynamic_cast, 0);
  }
  Static_cast() {
    return this.getToken(CPP14Parser.Static_cast, 0);
  }
  Reinterpret_cast() {
    return this.getToken(CPP14Parser.Reinterpret_cast, 0);
  }
  Const_cast() {
    return this.getToken(CPP14Parser.Const_cast, 0);
  }
  typeIdOfTheTypeId() {
    return this.getTypedRuleContext(TypeIdOfTheTypeIdContext, 0);
  }
  postfixExpression() {
    return this.getTypedRuleContext(PostfixExpressionContext, 0);
  }
  LeftBracket() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
  }
  RightBracket() {
    return this.getToken(CPP14Parser.RightBracket, 0);
  }
  Dot() {
    return this.getToken(CPP14Parser.Dot, 0);
  }
  Arrow() {
    return this.getToken(CPP14Parser.Arrow, 0);
  }
  idExpression() {
    return this.getTypedRuleContext(IdExpressionContext, 0);
  }
  pseudoDestructorName() {
    return this.getTypedRuleContext(PseudoDestructorNameContext, 0);
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  PlusPlus() {
    return this.getToken(CPP14Parser.PlusPlus, 0);
  }
  MinusMinus() {
    return this.getToken(CPP14Parser.MinusMinus, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterPostfixExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitPostfixExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitPostfixExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeIdOfTheTypeIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeIdOfTheTypeId;
  }
  Typeid_() {
    return this.getToken(CPP14Parser.Typeid_, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTypeIdOfTheTypeId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTypeIdOfTheTypeId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTypeIdOfTheTypeId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpressionListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expressionList;
  }
  initializerList() {
    return this.getTypedRuleContext(InitializerListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterExpressionList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitExpressionList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitExpressionList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PseudoDestructorNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pseudoDestructorName;
  }
  Tilde() {
    return this.getToken(CPP14Parser.Tilde, 0);
  }
  theTypeName = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TheTypeNameContext);
    } else {
      return this.getTypedRuleContext(TheTypeNameContext, i);
    }
  };
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  Doublecolon() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  simpleTemplateId() {
    return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
  }
  decltypeSpecifier() {
    return this.getTypedRuleContext(DecltypeSpecifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterPseudoDestructorName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitPseudoDestructorName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitPseudoDestructorName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class UnaryExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unaryExpression;
  }
  postfixExpression() {
    return this.getTypedRuleContext(PostfixExpressionContext, 0);
  }
  unaryExpression() {
    return this.getTypedRuleContext(UnaryExpressionContext, 0);
  }
  PlusPlus() {
    return this.getToken(CPP14Parser.PlusPlus, 0);
  }
  MinusMinus() {
    return this.getToken(CPP14Parser.MinusMinus, 0);
  }
  unaryOperator() {
    return this.getTypedRuleContext(UnaryOperatorContext, 0);
  }
  Sizeof() {
    return this.getToken(CPP14Parser.Sizeof, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  theTypeId() {
    return this.getTypedRuleContext(TheTypeIdContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  Ellipsis() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  Alignof() {
    return this.getToken(CPP14Parser.Alignof, 0);
  }
  noExceptExpression() {
    return this.getTypedRuleContext(NoExceptExpressionContext, 0);
  }
  newExpression() {
    return this.getTypedRuleContext(NewExpressionContext, 0);
  }
  deleteExpression() {
    return this.getTypedRuleContext(DeleteExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterUnaryExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitUnaryExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitUnaryExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class UnaryOperatorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unaryOperator;
  }
  Or() {
    return this.getToken(CPP14Parser.Or, 0);
  }
  Star() {
    return this.getToken(CPP14Parser.Star, 0);
  }
  And() {
    return this.getToken(CPP14Parser.And, 0);
  }
  Plus() {
    return this.getToken(CPP14Parser.Plus, 0);
  }
  Tilde() {
    return this.getToken(CPP14Parser.Tilde, 0);
  }
  Minus() {
    return this.getToken(CPP14Parser.Minus, 0);
  }
  Not() {
    return this.getToken(CPP14Parser.Not, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterUnaryOperator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitUnaryOperator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitUnaryOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NewExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newExpression;
  }
  New() {
    return this.getToken(CPP14Parser.New, 0);
  }
  newTypeId() {
    return this.getTypedRuleContext(NewTypeIdContext, 0);
  }
  Doublecolon() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
  }
  newPlacement() {
    return this.getTypedRuleContext(NewPlacementContext, 0);
  }
  newInitializer() {
    return this.getTypedRuleContext(NewInitializerContext, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  theTypeId() {
    return this.getTypedRuleContext(TheTypeIdContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNewExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNewExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNewExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NewPlacementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newPlacement;
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNewPlacement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNewPlacement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNewPlacement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NewTypeIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newTypeId;
  }
  typeSpecifierSeq() {
    return this.getTypedRuleContext(TypeSpecifierSeqContext, 0);
  }
  newDeclarator() {
    return this.getTypedRuleContext(NewDeclaratorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNewTypeId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNewTypeId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNewTypeId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NewDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newDeclarator;
  }
  pointerOperator() {
    return this.getTypedRuleContext(PointerOperatorContext, 0);
  }
  newDeclarator() {
    return this.getTypedRuleContext(NewDeclaratorContext, 0);
  }
  noPointerNewDeclarator() {
    return this.getTypedRuleContext(NoPointerNewDeclaratorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNewDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNewDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNewDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NoPointerNewDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noPointerNewDeclarator;
  }
  LeftBracket() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RightBracket() {
    return this.getToken(CPP14Parser.RightBracket, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  noPointerNewDeclarator() {
    return this.getTypedRuleContext(NoPointerNewDeclaratorContext, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNoPointerNewDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNoPointerNewDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNoPointerNewDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NewInitializerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newInitializer;
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }
  bracedInitList() {
    return this.getTypedRuleContext(BracedInitListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNewInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNewInitializer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNewInitializer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DeleteExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_deleteExpression;
  }
  Delete() {
    return this.getToken(CPP14Parser.Delete, 0);
  }
  castExpression() {
    return this.getTypedRuleContext(CastExpressionContext, 0);
  }
  Doublecolon() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
  }
  LeftBracket() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
  }
  RightBracket() {
    return this.getToken(CPP14Parser.RightBracket, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterDeleteExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitDeleteExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitDeleteExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NoExceptExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noExceptExpression;
  }
  Noexcept() {
    return this.getToken(CPP14Parser.Noexcept, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNoExceptExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNoExceptExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNoExceptExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CastExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_castExpression;
  }
  unaryExpression() {
    return this.getTypedRuleContext(UnaryExpressionContext, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  theTypeId() {
    return this.getTypedRuleContext(TheTypeIdContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  castExpression() {
    return this.getTypedRuleContext(CastExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterCastExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitCastExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitCastExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PointerMemberExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pointerMemberExpression;
  }
  castExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CastExpressionContext);
    } else {
      return this.getTypedRuleContext(CastExpressionContext, i);
    }
  };
  DotStar = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.DotStar);
    } else {
      return this.getToken(CPP14Parser.DotStar, i);
    }
  };
  ArrowStar = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.ArrowStar);
    } else {
      return this.getToken(CPP14Parser.ArrowStar, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterPointerMemberExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitPointerMemberExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitPointerMemberExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MultiplicativeExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_multiplicativeExpression;
  }
  pointerMemberExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PointerMemberExpressionContext);
    } else {
      return this.getTypedRuleContext(PointerMemberExpressionContext, i);
    }
  };
  Star = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Star);
    } else {
      return this.getToken(CPP14Parser.Star, i);
    }
  };
  Div = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Div);
    } else {
      return this.getToken(CPP14Parser.Div, i);
    }
  };
  Mod = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Mod);
    } else {
      return this.getToken(CPP14Parser.Mod, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterMultiplicativeExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitMultiplicativeExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitMultiplicativeExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AdditiveExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_additiveExpression;
  }
  multiplicativeExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MultiplicativeExpressionContext);
    } else {
      return this.getTypedRuleContext(MultiplicativeExpressionContext, i);
    }
  };
  Plus = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Plus);
    } else {
      return this.getToken(CPP14Parser.Plus, i);
    }
  };
  Minus = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Minus);
    } else {
      return this.getToken(CPP14Parser.Minus, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAdditiveExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAdditiveExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAdditiveExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ShiftExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_shiftExpression;
  }
  additiveExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AdditiveExpressionContext);
    } else {
      return this.getTypedRuleContext(AdditiveExpressionContext, i);
    }
  };
  shiftOperator = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ShiftOperatorContext);
    } else {
      return this.getTypedRuleContext(ShiftOperatorContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterShiftExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitShiftExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitShiftExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ShiftOperatorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_shiftOperator;
  }
  Greater = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Greater);
    } else {
      return this.getToken(CPP14Parser.Greater, i);
    }
  };
  Less = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Less);
    } else {
      return this.getToken(CPP14Parser.Less, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterShiftOperator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitShiftOperator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitShiftOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class RelationalExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_relationalExpression;
  }
  shiftExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ShiftExpressionContext);
    } else {
      return this.getTypedRuleContext(ShiftExpressionContext, i);
    }
  };
  Less = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Less);
    } else {
      return this.getToken(CPP14Parser.Less, i);
    }
  };
  Greater = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Greater);
    } else {
      return this.getToken(CPP14Parser.Greater, i);
    }
  };
  LessEqual = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.LessEqual);
    } else {
      return this.getToken(CPP14Parser.LessEqual, i);
    }
  };
  GreaterEqual = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.GreaterEqual);
    } else {
      return this.getToken(CPP14Parser.GreaterEqual, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterRelationalExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitRelationalExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitRelationalExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EqualityExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_equalityExpression;
  }
  relationalExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RelationalExpressionContext);
    } else {
      return this.getTypedRuleContext(RelationalExpressionContext, i);
    }
  };
  Equal = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Equal);
    } else {
      return this.getToken(CPP14Parser.Equal, i);
    }
  };
  NotEqual = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.NotEqual);
    } else {
      return this.getToken(CPP14Parser.NotEqual, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterEqualityExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitEqualityExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitEqualityExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AndExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_andExpression;
  }
  equalityExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EqualityExpressionContext);
    } else {
      return this.getTypedRuleContext(EqualityExpressionContext, i);
    }
  };
  And = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.And);
    } else {
      return this.getToken(CPP14Parser.And, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAndExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAndExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAndExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExclusiveOrExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exclusiveOrExpression;
  }
  andExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AndExpressionContext);
    } else {
      return this.getTypedRuleContext(AndExpressionContext, i);
    }
  };
  Caret = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Caret);
    } else {
      return this.getToken(CPP14Parser.Caret, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterExclusiveOrExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitExclusiveOrExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitExclusiveOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InclusiveOrExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_inclusiveOrExpression;
  }
  exclusiveOrExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExclusiveOrExpressionContext);
    } else {
      return this.getTypedRuleContext(ExclusiveOrExpressionContext, i);
    }
  };
  Or = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Or);
    } else {
      return this.getToken(CPP14Parser.Or, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterInclusiveOrExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitInclusiveOrExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitInclusiveOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LogicalAndExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_logicalAndExpression;
  }
  inclusiveOrExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(InclusiveOrExpressionContext);
    } else {
      return this.getTypedRuleContext(InclusiveOrExpressionContext, i);
    }
  };
  AndAnd = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.AndAnd);
    } else {
      return this.getToken(CPP14Parser.AndAnd, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterLogicalAndExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitLogicalAndExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitLogicalAndExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LogicalOrExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_logicalOrExpression;
  }
  logicalAndExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(LogicalAndExpressionContext);
    } else {
      return this.getTypedRuleContext(LogicalAndExpressionContext, i);
    }
  };
  OrOr = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.OrOr);
    } else {
      return this.getToken(CPP14Parser.OrOr, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterLogicalOrExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitLogicalOrExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitLogicalOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ConditionalExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conditionalExpression;
  }
  logicalOrExpression() {
    return this.getTypedRuleContext(LogicalOrExpressionContext, 0);
  }
  Question() {
    return this.getToken(CPP14Parser.Question, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  Colon() {
    return this.getToken(CPP14Parser.Colon, 0);
  }
  assignmentExpression() {
    return this.getTypedRuleContext(AssignmentExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterConditionalExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitConditionalExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitConditionalExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AssignmentExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_assignmentExpression;
  }
  conditionalExpression() {
    return this.getTypedRuleContext(ConditionalExpressionContext, 0);
  }
  logicalOrExpression() {
    return this.getTypedRuleContext(LogicalOrExpressionContext, 0);
  }
  assignmentOperator() {
    return this.getTypedRuleContext(AssignmentOperatorContext, 0);
  }
  initializerClause() {
    return this.getTypedRuleContext(InitializerClauseContext, 0);
  }
  throwExpression() {
    return this.getTypedRuleContext(ThrowExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAssignmentExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAssignmentExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAssignmentExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AssignmentOperatorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_assignmentOperator;
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  StarAssign() {
    return this.getToken(CPP14Parser.StarAssign, 0);
  }
  DivAssign() {
    return this.getToken(CPP14Parser.DivAssign, 0);
  }
  ModAssign() {
    return this.getToken(CPP14Parser.ModAssign, 0);
  }
  PlusAssign() {
    return this.getToken(CPP14Parser.PlusAssign, 0);
  }
  MinusAssign() {
    return this.getToken(CPP14Parser.MinusAssign, 0);
  }
  RightShiftAssign() {
    return this.getToken(CPP14Parser.RightShiftAssign, 0);
  }
  LeftShiftAssign() {
    return this.getToken(CPP14Parser.LeftShiftAssign, 0);
  }
  AndAssign() {
    return this.getToken(CPP14Parser.AndAssign, 0);
  }
  XorAssign() {
    return this.getToken(CPP14Parser.XorAssign, 0);
  }
  OrAssign() {
    return this.getToken(CPP14Parser.OrAssign, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAssignmentOperator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAssignmentOperator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAssignmentOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expression;
  }
  assignmentExpression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
      return this.getTypedRuleContext(AssignmentExpressionContext, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ConstantExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_constantExpression;
  }
  conditionalExpression() {
    return this.getTypedRuleContext(ConditionalExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterConstantExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitConstantExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitConstantExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class StatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_statement;
  }
  labeledStatement() {
    return this.getTypedRuleContext(LabeledStatementContext, 0);
  }
  declarationStatement() {
    return this.getTypedRuleContext(DeclarationStatementContext, 0);
  }
  expressionStatement() {
    return this.getTypedRuleContext(ExpressionStatementContext, 0);
  }
  compoundStatement() {
    return this.getTypedRuleContext(CompoundStatementContext, 0);
  }
  selectionStatement() {
    return this.getTypedRuleContext(SelectionStatementContext, 0);
  }
  iterationStatement() {
    return this.getTypedRuleContext(IterationStatementContext, 0);
  }
  jumpStatement() {
    return this.getTypedRuleContext(JumpStatementContext, 0);
  }
  tryBlock() {
    return this.getTypedRuleContext(TryBlockContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LabeledStatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_labeledStatement;
  }
  Colon() {
    return this.getToken(CPP14Parser.Colon, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  Case() {
    return this.getToken(CPP14Parser.Case, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  Default() {
    return this.getToken(CPP14Parser.Default, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterLabeledStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitLabeledStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitLabeledStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpressionStatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expressionStatement;
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterExpressionStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitExpressionStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitExpressionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CompoundStatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_compoundStatement;
  }
  LeftBrace() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
  }
  RightBrace() {
    return this.getToken(CPP14Parser.RightBrace, 0);
  }
  statementSeq() {
    return this.getTypedRuleContext(StatementSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterCompoundStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitCompoundStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitCompoundStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class StatementSeqContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_statementSeq;
  }
  statement = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterStatementSeq(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitStatementSeq(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitStatementSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SelectionStatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_selectionStatement;
  }
  If() {
    return this.getToken(CPP14Parser.If, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  condition() {
    return this.getTypedRuleContext(ConditionContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  statement = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };
  Else() {
    return this.getToken(CPP14Parser.Else, 0);
  }
  Switch() {
    return this.getToken(CPP14Parser.Switch, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterSelectionStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitSelectionStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitSelectionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ConditionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_condition;
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  declSpecifierSeq() {
    return this.getTypedRuleContext(DeclSpecifierSeqContext, 0);
  }
  declarator() {
    return this.getTypedRuleContext(DeclaratorContext, 0);
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  initializerClause() {
    return this.getTypedRuleContext(InitializerClauseContext, 0);
  }
  bracedInitList() {
    return this.getTypedRuleContext(BracedInitListContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterCondition(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitCondition(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitCondition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IterationStatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_iterationStatement;
  }
  While() {
    return this.getToken(CPP14Parser.While, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  condition() {
    return this.getTypedRuleContext(ConditionContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  Do() {
    return this.getToken(CPP14Parser.Do, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  For() {
    return this.getToken(CPP14Parser.For, 0);
  }
  forInitStatement() {
    return this.getTypedRuleContext(ForInitStatementContext, 0);
  }
  forRangeDeclaration() {
    return this.getTypedRuleContext(ForRangeDeclarationContext, 0);
  }
  Colon() {
    return this.getToken(CPP14Parser.Colon, 0);
  }
  forRangeInitializer() {
    return this.getTypedRuleContext(ForRangeInitializerContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterIterationStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitIterationStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitIterationStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ForInitStatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forInitStatement;
  }
  expressionStatement() {
    return this.getTypedRuleContext(ExpressionStatementContext, 0);
  }
  simpleDeclaration() {
    return this.getTypedRuleContext(SimpleDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterForInitStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitForInitStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitForInitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ForRangeDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forRangeDeclaration;
  }
  declSpecifierSeq() {
    return this.getTypedRuleContext(DeclSpecifierSeqContext, 0);
  }
  declarator() {
    return this.getTypedRuleContext(DeclaratorContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterForRangeDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitForRangeDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitForRangeDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ForRangeInitializerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forRangeInitializer;
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  bracedInitList() {
    return this.getTypedRuleContext(BracedInitListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterForRangeInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitForRangeInitializer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitForRangeInitializer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class JumpStatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_jumpStatement;
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  Break() {
    return this.getToken(CPP14Parser.Break, 0);
  }
  Continue() {
    return this.getToken(CPP14Parser.Continue, 0);
  }
  Return() {
    return this.getToken(CPP14Parser.Return, 0);
  }
  Goto() {
    return this.getToken(CPP14Parser.Goto, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  bracedInitList() {
    return this.getTypedRuleContext(BracedInitListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterJumpStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitJumpStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitJumpStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DeclarationStatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarationStatement;
  }
  blockDeclaration() {
    return this.getTypedRuleContext(BlockDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterDeclarationStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitDeclarationStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitDeclarationStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DeclarationseqContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarationseq;
  }
  declaration = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DeclarationContext);
    } else {
      return this.getTypedRuleContext(DeclarationContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterDeclarationseq(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitDeclarationseq(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitDeclarationseq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declaration;
  }
  blockDeclaration() {
    return this.getTypedRuleContext(BlockDeclarationContext, 0);
  }
  functionDefinition() {
    return this.getTypedRuleContext(FunctionDefinitionContext, 0);
  }
  templateDeclaration() {
    return this.getTypedRuleContext(TemplateDeclarationContext, 0);
  }
  explicitInstantiation() {
    return this.getTypedRuleContext(ExplicitInstantiationContext, 0);
  }
  explicitSpecialization() {
    return this.getTypedRuleContext(ExplicitSpecializationContext, 0);
  }
  linkageSpecification() {
    return this.getTypedRuleContext(LinkageSpecificationContext, 0);
  }
  namespaceDefinition() {
    return this.getTypedRuleContext(NamespaceDefinitionContext, 0);
  }
  emptyDeclaration() {
    return this.getTypedRuleContext(EmptyDeclarationContext, 0);
  }
  attributeDeclaration() {
    return this.getTypedRuleContext(AttributeDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BlockDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_blockDeclaration;
  }
  simpleDeclaration() {
    return this.getTypedRuleContext(SimpleDeclarationContext, 0);
  }
  asmDefinition() {
    return this.getTypedRuleContext(AsmDefinitionContext, 0);
  }
  namespaceAliasDefinition() {
    return this.getTypedRuleContext(NamespaceAliasDefinitionContext, 0);
  }
  usingDeclaration() {
    return this.getTypedRuleContext(UsingDeclarationContext, 0);
  }
  usingDirective() {
    return this.getTypedRuleContext(UsingDirectiveContext, 0);
  }
  staticAssertDeclaration() {
    return this.getTypedRuleContext(StaticAssertDeclarationContext, 0);
  }
  aliasDeclaration() {
    return this.getTypedRuleContext(AliasDeclarationContext, 0);
  }
  opaqueEnumDeclaration() {
    return this.getTypedRuleContext(OpaqueEnumDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterBlockDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitBlockDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitBlockDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AliasDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_aliasDeclaration;
  }
  Using() {
    return this.getToken(CPP14Parser.Using, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  theTypeId() {
    return this.getTypedRuleContext(TheTypeIdContext, 0);
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAliasDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAliasDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAliasDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SimpleDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpleDeclaration;
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  declSpecifierSeq() {
    return this.getTypedRuleContext(DeclSpecifierSeqContext, 0);
  }
  initDeclaratorList() {
    return this.getTypedRuleContext(InitDeclaratorListContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterSimpleDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitSimpleDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitSimpleDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class StaticAssertDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_staticAssertDeclaration;
  }
  Static_assert() {
    return this.getToken(CPP14Parser.Static_assert, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  Comma() {
    return this.getToken(CPP14Parser.Comma, 0);
  }
  StringLiteral() {
    return this.getToken(CPP14Parser.StringLiteral, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterStaticAssertDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitStaticAssertDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitStaticAssertDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EmptyDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_emptyDeclaration;
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterEmptyDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitEmptyDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitEmptyDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AttributeDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributeDeclaration;
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAttributeDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAttributeDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAttributeDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DeclSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declSpecifier;
  }
  storageClassSpecifier() {
    return this.getTypedRuleContext(StorageClassSpecifierContext, 0);
  }
  typeSpecifier() {
    return this.getTypedRuleContext(TypeSpecifierContext, 0);
  }
  functionSpecifier() {
    return this.getTypedRuleContext(FunctionSpecifierContext, 0);
  }
  Friend() {
    return this.getToken(CPP14Parser.Friend, 0);
  }
  Typedef() {
    return this.getToken(CPP14Parser.Typedef, 0);
  }
  Constexpr() {
    return this.getToken(CPP14Parser.Constexpr, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterDeclSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitDeclSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitDeclSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DeclSpecifierSeqContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declSpecifierSeq;
  }
  declSpecifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DeclSpecifierContext);
    } else {
      return this.getTypedRuleContext(DeclSpecifierContext, i);
    }
  };
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterDeclSpecifierSeq(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitDeclSpecifierSeq(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitDeclSpecifierSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class StorageClassSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_storageClassSpecifier;
  }
  Register() {
    return this.getToken(CPP14Parser.Register, 0);
  }
  Static() {
    return this.getToken(CPP14Parser.Static, 0);
  }
  Thread_local() {
    return this.getToken(CPP14Parser.Thread_local, 0);
  }
  Extern() {
    return this.getToken(CPP14Parser.Extern, 0);
  }
  Mutable() {
    return this.getToken(CPP14Parser.Mutable, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterStorageClassSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitStorageClassSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitStorageClassSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FunctionSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionSpecifier;
  }
  Inline() {
    return this.getToken(CPP14Parser.Inline, 0);
  }
  Virtual() {
    return this.getToken(CPP14Parser.Virtual, 0);
  }
  Explicit() {
    return this.getToken(CPP14Parser.Explicit, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterFunctionSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitFunctionSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitFunctionSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypedefNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typedefName;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTypedefName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTypedefName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTypedefName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeSpecifier;
  }
  trailingTypeSpecifier() {
    return this.getTypedRuleContext(TrailingTypeSpecifierContext, 0);
  }
  classSpecifier() {
    return this.getTypedRuleContext(ClassSpecifierContext, 0);
  }
  enumSpecifier() {
    return this.getTypedRuleContext(EnumSpecifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTypeSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTypeSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTypeSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TrailingTypeSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingTypeSpecifier;
  }
  simpleTypeSpecifier() {
    return this.getTypedRuleContext(SimpleTypeSpecifierContext, 0);
  }
  elaboratedTypeSpecifier() {
    return this.getTypedRuleContext(ElaboratedTypeSpecifierContext, 0);
  }
  typeNameSpecifier() {
    return this.getTypedRuleContext(TypeNameSpecifierContext, 0);
  }
  cvQualifier() {
    return this.getTypedRuleContext(CvQualifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTrailingTypeSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTrailingTypeSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTrailingTypeSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeSpecifierSeqContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeSpecifierSeq;
  }
  typeSpecifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypeSpecifierContext);
    } else {
      return this.getTypedRuleContext(TypeSpecifierContext, i);
    }
  };
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTypeSpecifierSeq(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTypeSpecifierSeq(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTypeSpecifierSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TrailingTypeSpecifierSeqContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingTypeSpecifierSeq;
  }
  trailingTypeSpecifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TrailingTypeSpecifierContext);
    } else {
      return this.getTypedRuleContext(TrailingTypeSpecifierContext, i);
    }
  };
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTrailingTypeSpecifierSeq(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTrailingTypeSpecifierSeq(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTrailingTypeSpecifierSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SimpleTypeLengthModifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpleTypeLengthModifier;
  }
  Short() {
    return this.getToken(CPP14Parser.Short, 0);
  }
  Long() {
    return this.getToken(CPP14Parser.Long, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterSimpleTypeLengthModifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitSimpleTypeLengthModifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitSimpleTypeLengthModifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SimpleTypeSignednessModifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpleTypeSignednessModifier;
  }
  Unsigned() {
    return this.getToken(CPP14Parser.Unsigned, 0);
  }
  Signed() {
    return this.getToken(CPP14Parser.Signed, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterSimpleTypeSignednessModifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitSimpleTypeSignednessModifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitSimpleTypeSignednessModifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SimpleTypeSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpleTypeSpecifier;
  }
  theTypeName() {
    return this.getTypedRuleContext(TheTypeNameContext, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  simpleTemplateId() {
    return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
  }
  simpleTypeSignednessModifier() {
    return this.getTypedRuleContext(SimpleTypeSignednessModifierContext, 0);
  }
  simpleTypeLengthModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SimpleTypeLengthModifierContext);
    } else {
      return this.getTypedRuleContext(SimpleTypeLengthModifierContext, i);
    }
  };
  Char() {
    return this.getToken(CPP14Parser.Char, 0);
  }
  Char16() {
    return this.getToken(CPP14Parser.Char16, 0);
  }
  Char32() {
    return this.getToken(CPP14Parser.Char32, 0);
  }
  Wchar() {
    return this.getToken(CPP14Parser.Wchar, 0);
  }
  Bool() {
    return this.getToken(CPP14Parser.Bool, 0);
  }
  Int() {
    return this.getToken(CPP14Parser.Int, 0);
  }
  Float() {
    return this.getToken(CPP14Parser.Float, 0);
  }
  Double() {
    return this.getToken(CPP14Parser.Double, 0);
  }
  Void() {
    return this.getToken(CPP14Parser.Void, 0);
  }
  Auto() {
    return this.getToken(CPP14Parser.Auto, 0);
  }
  decltypeSpecifier() {
    return this.getTypedRuleContext(DecltypeSpecifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterSimpleTypeSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitSimpleTypeSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitSimpleTypeSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TheTypeNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_theTypeName;
  }
  className() {
    return this.getTypedRuleContext(ClassNameContext, 0);
  }
  enumName() {
    return this.getTypedRuleContext(EnumNameContext, 0);
  }
  typedefName() {
    return this.getTypedRuleContext(TypedefNameContext, 0);
  }
  simpleTemplateId() {
    return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTheTypeName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTheTypeName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTheTypeName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DecltypeSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_decltypeSpecifier;
  }
  Decltype() {
    return this.getToken(CPP14Parser.Decltype, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  Auto() {
    return this.getToken(CPP14Parser.Auto, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterDecltypeSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitDecltypeSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitDecltypeSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ElaboratedTypeSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_elaboratedTypeSpecifier;
  }
  classKey() {
    return this.getTypedRuleContext(ClassKeyContext, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  simpleTemplateId() {
    return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  Enum() {
    return this.getToken(CPP14Parser.Enum, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterElaboratedTypeSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitElaboratedTypeSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitElaboratedTypeSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumName;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterEnumName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitEnumName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitEnumName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumSpecifier;
  }
  enumHead() {
    return this.getTypedRuleContext(EnumHeadContext, 0);
  }
  LeftBrace() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
  }
  RightBrace() {
    return this.getToken(CPP14Parser.RightBrace, 0);
  }
  enumeratorList() {
    return this.getTypedRuleContext(EnumeratorListContext, 0);
  }
  Comma() {
    return this.getToken(CPP14Parser.Comma, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterEnumSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitEnumSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitEnumSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumHeadContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumHead;
  }
  enumkey() {
    return this.getTypedRuleContext(EnumkeyContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  enumbase() {
    return this.getTypedRuleContext(EnumbaseContext, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterEnumHead(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitEnumHead(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitEnumHead(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class OpaqueEnumDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_opaqueEnumDeclaration;
  }
  enumkey() {
    return this.getTypedRuleContext(EnumkeyContext, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enumbase() {
    return this.getTypedRuleContext(EnumbaseContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterOpaqueEnumDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitOpaqueEnumDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitOpaqueEnumDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumkeyContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumkey;
  }
  Enum() {
    return this.getToken(CPP14Parser.Enum, 0);
  }
  Class() {
    return this.getToken(CPP14Parser.Class, 0);
  }
  Struct() {
    return this.getToken(CPP14Parser.Struct, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterEnumkey(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitEnumkey(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitEnumkey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumbaseContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumbase;
  }
  Colon() {
    return this.getToken(CPP14Parser.Colon, 0);
  }
  typeSpecifierSeq() {
    return this.getTypedRuleContext(TypeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterEnumbase(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitEnumbase(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitEnumbase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumeratorListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumeratorList;
  }
  enumeratorDefinition = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EnumeratorDefinitionContext);
    } else {
      return this.getTypedRuleContext(EnumeratorDefinitionContext, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterEnumeratorList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitEnumeratorList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitEnumeratorList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumeratorDefinitionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumeratorDefinition;
  }
  enumerator() {
    return this.getTypedRuleContext(EnumeratorContext, 0);
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterEnumeratorDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitEnumeratorDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitEnumeratorDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumeratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumerator;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterEnumerator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitEnumerator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitEnumerator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NamespaceNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespaceName;
  }
  originalNamespaceName() {
    return this.getTypedRuleContext(OriginalNamespaceNameContext, 0);
  }
  namespaceAlias() {
    return this.getTypedRuleContext(NamespaceAliasContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNamespaceName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNamespaceName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNamespaceName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class OriginalNamespaceNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_originalNamespaceName;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterOriginalNamespaceName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitOriginalNamespaceName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitOriginalNamespaceName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NamespaceDefinitionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespaceDefinition;
    this.namespaceBody = null;
  }
  Namespace() {
    return this.getToken(CPP14Parser.Namespace, 0);
  }
  LeftBrace() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
  }
  RightBrace() {
    return this.getToken(CPP14Parser.RightBrace, 0);
  }
  Inline() {
    return this.getToken(CPP14Parser.Inline, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  originalNamespaceName() {
    return this.getTypedRuleContext(OriginalNamespaceNameContext, 0);
  }
  declarationseq() {
    return this.getTypedRuleContext(DeclarationseqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNamespaceDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNamespaceDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNamespaceDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NamespaceAliasContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespaceAlias;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNamespaceAlias(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNamespaceAlias(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNamespaceAlias(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NamespaceAliasDefinitionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespaceAliasDefinition;
  }
  Namespace() {
    return this.getToken(CPP14Parser.Namespace, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  qualifiednamespacespecifier() {
    return this.getTypedRuleContext(QualifiednamespacespecifierContext, 0);
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNamespaceAliasDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNamespaceAliasDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNamespaceAliasDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class QualifiednamespacespecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_qualifiednamespacespecifier;
  }
  namespaceName() {
    return this.getTypedRuleContext(NamespaceNameContext, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterQualifiednamespacespecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitQualifiednamespacespecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitQualifiednamespacespecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class UsingDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_usingDeclaration;
  }
  Using() {
    return this.getToken(CPP14Parser.Using, 0);
  }
  unqualifiedId() {
    return this.getTypedRuleContext(UnqualifiedIdContext, 0);
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  Doublecolon() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  Typename_() {
    return this.getToken(CPP14Parser.Typename_, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterUsingDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitUsingDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitUsingDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class UsingDirectiveContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_usingDirective;
  }
  Using() {
    return this.getToken(CPP14Parser.Using, 0);
  }
  Namespace() {
    return this.getToken(CPP14Parser.Namespace, 0);
  }
  namespaceName() {
    return this.getTypedRuleContext(NamespaceNameContext, 0);
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterUsingDirective(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitUsingDirective(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitUsingDirective(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AsmDefinitionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_asmDefinition;
  }
  Asm() {
    return this.getToken(CPP14Parser.Asm, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  StringLiteral() {
    return this.getToken(CPP14Parser.StringLiteral, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAsmDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAsmDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAsmDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LinkageSpecificationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_linkageSpecification;
  }
  Extern() {
    return this.getToken(CPP14Parser.Extern, 0);
  }
  StringLiteral() {
    return this.getToken(CPP14Parser.StringLiteral, 0);
  }
  LeftBrace() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
  }
  RightBrace() {
    return this.getToken(CPP14Parser.RightBrace, 0);
  }
  declaration() {
    return this.getTypedRuleContext(DeclarationContext, 0);
  }
  declarationseq() {
    return this.getTypedRuleContext(DeclarationseqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterLinkageSpecification(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitLinkageSpecification(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitLinkageSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AttributeSpecifierSeqContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributeSpecifierSeq;
  }
  attributeSpecifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
      return this.getTypedRuleContext(AttributeSpecifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAttributeSpecifierSeq(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAttributeSpecifierSeq(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAttributeSpecifierSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AttributeSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributeSpecifier;
  }
  LeftBracket = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.LeftBracket);
    } else {
      return this.getToken(CPP14Parser.LeftBracket, i);
    }
  };
  RightBracket = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.RightBracket);
    } else {
      return this.getToken(CPP14Parser.RightBracket, i);
    }
  };
  attributeList() {
    return this.getTypedRuleContext(AttributeListContext, 0);
  }
  alignmentspecifier() {
    return this.getTypedRuleContext(AlignmentspecifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAttributeSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAttributeSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAttributeSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AlignmentspecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_alignmentspecifier;
  }
  Alignas() {
    return this.getToken(CPP14Parser.Alignas, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  theTypeId() {
    return this.getTypedRuleContext(TheTypeIdContext, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  Ellipsis() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAlignmentspecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAlignmentspecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAlignmentspecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AttributeListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributeList;
  }
  attribute = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AttributeContext);
    } else {
      return this.getTypedRuleContext(AttributeContext, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  Ellipsis() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAttributeList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAttributeList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAttributeList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AttributeContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attribute;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  attributeNamespace() {
    return this.getTypedRuleContext(AttributeNamespaceContext, 0);
  }
  Doublecolon() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
  }
  attributeArgumentClause() {
    return this.getTypedRuleContext(AttributeArgumentClauseContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAttribute(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAttribute(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAttribute(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AttributeNamespaceContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributeNamespace;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAttributeNamespace(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAttributeNamespace(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAttributeNamespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AttributeArgumentClauseContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributeArgumentClause;
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  balancedTokenSeq() {
    return this.getTypedRuleContext(BalancedTokenSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAttributeArgumentClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAttributeArgumentClause(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAttributeArgumentClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BalancedTokenSeqContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_balancedTokenSeq;
  }
  balancedtoken = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BalancedtokenContext);
    } else {
      return this.getTypedRuleContext(BalancedtokenContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterBalancedTokenSeq(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitBalancedTokenSeq(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitBalancedTokenSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BalancedtokenContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_balancedtoken;
  }
  LeftParen = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.LeftParen);
    } else {
      return this.getToken(CPP14Parser.LeftParen, i);
    }
  };
  balancedTokenSeq() {
    return this.getTypedRuleContext(BalancedTokenSeqContext, 0);
  }
  RightParen = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.RightParen);
    } else {
      return this.getToken(CPP14Parser.RightParen, i);
    }
  };
  LeftBracket = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.LeftBracket);
    } else {
      return this.getToken(CPP14Parser.LeftBracket, i);
    }
  };
  RightBracket = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.RightBracket);
    } else {
      return this.getToken(CPP14Parser.RightBracket, i);
    }
  };
  LeftBrace = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.LeftBrace);
    } else {
      return this.getToken(CPP14Parser.LeftBrace, i);
    }
  };
  RightBrace = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.RightBrace);
    } else {
      return this.getToken(CPP14Parser.RightBrace, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterBalancedtoken(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitBalancedtoken(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitBalancedtoken(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InitDeclaratorListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initDeclaratorList;
  }
  initDeclarator = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(InitDeclaratorContext);
    } else {
      return this.getTypedRuleContext(InitDeclaratorContext, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterInitDeclaratorList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitInitDeclaratorList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitInitDeclaratorList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InitDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initDeclarator;
  }
  declarator() {
    return this.getTypedRuleContext(DeclaratorContext, 0);
  }
  initializer() {
    return this.getTypedRuleContext(InitializerContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterInitDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitInitDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitInitDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarator;
  }
  pointerDeclarator() {
    return this.getTypedRuleContext(PointerDeclaratorContext, 0);
  }
  noPointerDeclarator() {
    return this.getTypedRuleContext(NoPointerDeclaratorContext, 0);
  }
  parametersAndQualifiers() {
    return this.getTypedRuleContext(ParametersAndQualifiersContext, 0);
  }
  trailingReturnType() {
    return this.getTypedRuleContext(TrailingReturnTypeContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PointerDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pointerDeclarator;
  }
  noPointerDeclarator() {
    return this.getTypedRuleContext(NoPointerDeclaratorContext, 0);
  }
  pointerOperator = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PointerOperatorContext);
    } else {
      return this.getTypedRuleContext(PointerOperatorContext, i);
    }
  };
  Const = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Const);
    } else {
      return this.getToken(CPP14Parser.Const, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterPointerDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitPointerDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitPointerDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NoPointerDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noPointerDeclarator;
  }
  declaratorid() {
    return this.getTypedRuleContext(DeclaratoridContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  pointerDeclarator() {
    return this.getTypedRuleContext(PointerDeclaratorContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  noPointerDeclarator() {
    return this.getTypedRuleContext(NoPointerDeclaratorContext, 0);
  }
  parametersAndQualifiers() {
    return this.getTypedRuleContext(ParametersAndQualifiersContext, 0);
  }
  LeftBracket() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
  }
  RightBracket() {
    return this.getToken(CPP14Parser.RightBracket, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNoPointerDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNoPointerDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNoPointerDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ParametersAndQualifiersContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parametersAndQualifiers;
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  parameterDeclarationClause() {
    return this.getTypedRuleContext(ParameterDeclarationClauseContext, 0);
  }
  cvqualifierseq() {
    return this.getTypedRuleContext(CvqualifierseqContext, 0);
  }
  refqualifier() {
    return this.getTypedRuleContext(RefqualifierContext, 0);
  }
  exceptionSpecification() {
    return this.getTypedRuleContext(ExceptionSpecificationContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterParametersAndQualifiers(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitParametersAndQualifiers(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitParametersAndQualifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TrailingReturnTypeContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingReturnType;
  }
  Arrow() {
    return this.getToken(CPP14Parser.Arrow, 0);
  }
  trailingTypeSpecifierSeq() {
    return this.getTypedRuleContext(TrailingTypeSpecifierSeqContext, 0);
  }
  abstractDeclarator() {
    return this.getTypedRuleContext(AbstractDeclaratorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTrailingReturnType(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTrailingReturnType(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTrailingReturnType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PointerOperatorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pointerOperator;
  }
  And() {
    return this.getToken(CPP14Parser.And, 0);
  }
  AndAnd() {
    return this.getToken(CPP14Parser.AndAnd, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  Star() {
    return this.getToken(CPP14Parser.Star, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  cvqualifierseq() {
    return this.getTypedRuleContext(CvqualifierseqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterPointerOperator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitPointerOperator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitPointerOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CvqualifierseqContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_cvqualifierseq;
  }
  cvQualifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CvQualifierContext);
    } else {
      return this.getTypedRuleContext(CvQualifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterCvqualifierseq(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitCvqualifierseq(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitCvqualifierseq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CvQualifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_cvQualifier;
  }
  Const() {
    return this.getToken(CPP14Parser.Const, 0);
  }
  Volatile() {
    return this.getToken(CPP14Parser.Volatile, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterCvQualifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitCvQualifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitCvQualifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class RefqualifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_refqualifier;
  }
  And() {
    return this.getToken(CPP14Parser.And, 0);
  }
  AndAnd() {
    return this.getToken(CPP14Parser.AndAnd, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterRefqualifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitRefqualifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitRefqualifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DeclaratoridContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declaratorid;
  }
  idExpression() {
    return this.getTypedRuleContext(IdExpressionContext, 0);
  }
  Ellipsis() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterDeclaratorid(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitDeclaratorid(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitDeclaratorid(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TheTypeIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_theTypeId;
  }
  typeSpecifierSeq() {
    return this.getTypedRuleContext(TypeSpecifierSeqContext, 0);
  }
  abstractDeclarator() {
    return this.getTypedRuleContext(AbstractDeclaratorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTheTypeId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTheTypeId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTheTypeId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AbstractDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_abstractDeclarator;
  }
  pointerAbstractDeclarator() {
    return this.getTypedRuleContext(PointerAbstractDeclaratorContext, 0);
  }
  parametersAndQualifiers() {
    return this.getTypedRuleContext(ParametersAndQualifiersContext, 0);
  }
  trailingReturnType() {
    return this.getTypedRuleContext(TrailingReturnTypeContext, 0);
  }
  noPointerAbstractDeclarator() {
    return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext, 0);
  }
  abstractPackDeclarator() {
    return this.getTypedRuleContext(AbstractPackDeclaratorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAbstractDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAbstractDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAbstractDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PointerAbstractDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pointerAbstractDeclarator;
  }
  noPointerAbstractDeclarator() {
    return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext, 0);
  }
  pointerOperator = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PointerOperatorContext);
    } else {
      return this.getTypedRuleContext(PointerOperatorContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterPointerAbstractDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitPointerAbstractDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitPointerAbstractDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NoPointerAbstractDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noPointerAbstractDeclarator;
  }
  parametersAndQualifiers() {
    return this.getTypedRuleContext(ParametersAndQualifiersContext, 0);
  }
  LeftBracket() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
  }
  RightBracket() {
    return this.getToken(CPP14Parser.RightBracket, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  pointerAbstractDeclarator() {
    return this.getTypedRuleContext(PointerAbstractDeclaratorContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  noPointerAbstractDeclarator = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(NoPointerAbstractDeclaratorContext);
    } else {
      return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNoPointerAbstractDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNoPointerAbstractDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNoPointerAbstractDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AbstractPackDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_abstractPackDeclarator;
  }
  noPointerAbstractPackDeclarator() {
    return this.getTypedRuleContext(NoPointerAbstractPackDeclaratorContext, 0);
  }
  pointerOperator = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PointerOperatorContext);
    } else {
      return this.getTypedRuleContext(PointerOperatorContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAbstractPackDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAbstractPackDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAbstractPackDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NoPointerAbstractPackDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noPointerAbstractPackDeclarator;
  }
  Ellipsis() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
  }
  noPointerAbstractPackDeclarator() {
    return this.getTypedRuleContext(NoPointerAbstractPackDeclaratorContext, 0);
  }
  parametersAndQualifiers() {
    return this.getTypedRuleContext(ParametersAndQualifiersContext, 0);
  }
  LeftBracket() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
  }
  RightBracket() {
    return this.getToken(CPP14Parser.RightBracket, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNoPointerAbstractPackDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNoPointerAbstractPackDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNoPointerAbstractPackDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ParameterDeclarationClauseContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterDeclarationClause;
  }
  parameterDeclarationList() {
    return this.getTypedRuleContext(ParameterDeclarationListContext, 0);
  }
  Ellipsis() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
  }
  Comma() {
    return this.getToken(CPP14Parser.Comma, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterParameterDeclarationClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitParameterDeclarationClause(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitParameterDeclarationClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ParameterDeclarationListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterDeclarationList;
  }
  parameterDeclaration = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ParameterDeclarationContext);
    } else {
      return this.getTypedRuleContext(ParameterDeclarationContext, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterParameterDeclarationList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitParameterDeclarationList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitParameterDeclarationList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ParameterDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterDeclaration;
  }
  declSpecifierSeq() {
    return this.getTypedRuleContext(DeclSpecifierSeqContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  declarator() {
    return this.getTypedRuleContext(DeclaratorContext, 0);
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  initializerClause() {
    return this.getTypedRuleContext(InitializerClauseContext, 0);
  }
  abstractDeclarator() {
    return this.getTypedRuleContext(AbstractDeclaratorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterParameterDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitParameterDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitParameterDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FunctionDefinitionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionDefinition;
  }
  declarator() {
    return this.getTypedRuleContext(DeclaratorContext, 0);
  }
  functionBody() {
    return this.getTypedRuleContext(FunctionBodyContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  declSpecifierSeq() {
    return this.getTypedRuleContext(DeclSpecifierSeqContext, 0);
  }
  virtualSpecifierSeq() {
    return this.getTypedRuleContext(VirtualSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterFunctionDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitFunctionDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitFunctionDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FunctionBodyContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionBody;
  }
  compoundStatement() {
    return this.getTypedRuleContext(CompoundStatementContext, 0);
  }
  constructorInitializer() {
    return this.getTypedRuleContext(ConstructorInitializerContext, 0);
  }
  functionTryBlock() {
    return this.getTypedRuleContext(FunctionTryBlockContext, 0);
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  Default() {
    return this.getToken(CPP14Parser.Default, 0);
  }
  Delete() {
    return this.getToken(CPP14Parser.Delete, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterFunctionBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitFunctionBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitFunctionBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InitializerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializer;
  }
  braceOrEqualInitializer() {
    return this.getTypedRuleContext(BraceOrEqualInitializerContext, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitInitializer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitInitializer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BraceOrEqualInitializerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_braceOrEqualInitializer;
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  initializerClause() {
    return this.getTypedRuleContext(InitializerClauseContext, 0);
  }
  bracedInitList() {
    return this.getTypedRuleContext(BracedInitListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterBraceOrEqualInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitBraceOrEqualInitializer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitBraceOrEqualInitializer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InitializerClauseContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializerClause;
  }
  assignmentExpression() {
    return this.getTypedRuleContext(AssignmentExpressionContext, 0);
  }
  bracedInitList() {
    return this.getTypedRuleContext(BracedInitListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterInitializerClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitInitializerClause(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitInitializerClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InitializerListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializerList;
  }
  initializerClause = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(InitializerClauseContext);
    } else {
      return this.getTypedRuleContext(InitializerClauseContext, i);
    }
  };
  Ellipsis = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Ellipsis);
    } else {
      return this.getToken(CPP14Parser.Ellipsis, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterInitializerList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitInitializerList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitInitializerList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BracedInitListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_bracedInitList;
  }
  LeftBrace() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
  }
  RightBrace() {
    return this.getToken(CPP14Parser.RightBrace, 0);
  }
  initializerList() {
    return this.getTypedRuleContext(InitializerListContext, 0);
  }
  Comma() {
    return this.getToken(CPP14Parser.Comma, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterBracedInitList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitBracedInitList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitBracedInitList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_className;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  simpleTemplateId() {
    return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterClassName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitClassName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitClassName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classSpecifier;
  }
  classHead() {
    return this.getTypedRuleContext(ClassHeadContext, 0);
  }
  LeftBrace() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
  }
  RightBrace() {
    return this.getToken(CPP14Parser.RightBrace, 0);
  }
  memberSpecification() {
    return this.getTypedRuleContext(MemberSpecificationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterClassSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitClassSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitClassSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassHeadContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classHead;
  }
  classKey() {
    return this.getTypedRuleContext(ClassKeyContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  classHeadName() {
    return this.getTypedRuleContext(ClassHeadNameContext, 0);
  }
  baseClause() {
    return this.getTypedRuleContext(BaseClauseContext, 0);
  }
  classVirtSpecifier() {
    return this.getTypedRuleContext(ClassVirtSpecifierContext, 0);
  }
  Union() {
    return this.getToken(CPP14Parser.Union, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterClassHead(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitClassHead(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitClassHead(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassHeadNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classHeadName;
  }
  className() {
    return this.getTypedRuleContext(ClassNameContext, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterClassHeadName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitClassHeadName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitClassHeadName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassVirtSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classVirtSpecifier;
  }
  Final() {
    return this.getToken(CPP14Parser.Final, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterClassVirtSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitClassVirtSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitClassVirtSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassKeyContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classKey;
  }
  Class() {
    return this.getToken(CPP14Parser.Class, 0);
  }
  Struct() {
    return this.getToken(CPP14Parser.Struct, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterClassKey(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitClassKey(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitClassKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MemberSpecificationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberSpecification;
  }
  memberdeclaration = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MemberdeclarationContext);
    } else {
      return this.getTypedRuleContext(MemberdeclarationContext, i);
    }
  };
  accessSpecifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AccessSpecifierContext);
    } else {
      return this.getTypedRuleContext(AccessSpecifierContext, i);
    }
  };
  Colon = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Colon);
    } else {
      return this.getToken(CPP14Parser.Colon, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterMemberSpecification(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitMemberSpecification(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitMemberSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MemberdeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberdeclaration;
  }
  Semi() {
    return this.getToken(CPP14Parser.Semi, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  declSpecifierSeq() {
    return this.getTypedRuleContext(DeclSpecifierSeqContext, 0);
  }
  memberDeclaratorList() {
    return this.getTypedRuleContext(MemberDeclaratorListContext, 0);
  }
  functionDefinition() {
    return this.getTypedRuleContext(FunctionDefinitionContext, 0);
  }
  usingDeclaration() {
    return this.getTypedRuleContext(UsingDeclarationContext, 0);
  }
  staticAssertDeclaration() {
    return this.getTypedRuleContext(StaticAssertDeclarationContext, 0);
  }
  templateDeclaration() {
    return this.getTypedRuleContext(TemplateDeclarationContext, 0);
  }
  aliasDeclaration() {
    return this.getTypedRuleContext(AliasDeclarationContext, 0);
  }
  emptyDeclaration() {
    return this.getTypedRuleContext(EmptyDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterMemberdeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitMemberdeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitMemberdeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MemberDeclaratorListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberDeclaratorList;
  }
  memberDeclarator = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MemberDeclaratorContext);
    } else {
      return this.getTypedRuleContext(MemberDeclaratorContext, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterMemberDeclaratorList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitMemberDeclaratorList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitMemberDeclaratorList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MemberDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberDeclarator;
  }
  declarator() {
    return this.getTypedRuleContext(DeclaratorContext, 0);
  }
  virtualSpecifierSeq() {
    return this.getTypedRuleContext(VirtualSpecifierSeqContext, 0);
  }
  pureSpecifier() {
    return this.getTypedRuleContext(PureSpecifierContext, 0);
  }
  braceOrEqualInitializer() {
    return this.getTypedRuleContext(BraceOrEqualInitializerContext, 0);
  }
  Colon() {
    return this.getToken(CPP14Parser.Colon, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterMemberDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitMemberDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitMemberDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VirtualSpecifierSeqContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_virtualSpecifierSeq;
  }
  virtualSpecifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VirtualSpecifierContext);
    } else {
      return this.getTypedRuleContext(VirtualSpecifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterVirtualSpecifierSeq(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitVirtualSpecifierSeq(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitVirtualSpecifierSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VirtualSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_virtualSpecifier;
  }
  Override() {
    return this.getToken(CPP14Parser.Override, 0);
  }
  Final() {
    return this.getToken(CPP14Parser.Final, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterVirtualSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitVirtualSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitVirtualSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PureSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pureSpecifier;
    this.val = null;
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  OctalLiteral() {
    return this.getToken(CPP14Parser.OctalLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterPureSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitPureSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitPureSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BaseClauseContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_baseClause;
  }
  Colon() {
    return this.getToken(CPP14Parser.Colon, 0);
  }
  baseSpecifierList() {
    return this.getTypedRuleContext(BaseSpecifierListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterBaseClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitBaseClause(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitBaseClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BaseSpecifierListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_baseSpecifierList;
  }
  baseSpecifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BaseSpecifierContext);
    } else {
      return this.getTypedRuleContext(BaseSpecifierContext, i);
    }
  };
  Ellipsis = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Ellipsis);
    } else {
      return this.getToken(CPP14Parser.Ellipsis, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterBaseSpecifierList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitBaseSpecifierList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitBaseSpecifierList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BaseSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_baseSpecifier;
  }
  baseTypeSpecifier() {
    return this.getTypedRuleContext(BaseTypeSpecifierContext, 0);
  }
  Virtual() {
    return this.getToken(CPP14Parser.Virtual, 0);
  }
  accessSpecifier() {
    return this.getTypedRuleContext(AccessSpecifierContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterBaseSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitBaseSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitBaseSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassOrDeclTypeContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classOrDeclType;
  }
  className() {
    return this.getTypedRuleContext(ClassNameContext, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  decltypeSpecifier() {
    return this.getTypedRuleContext(DecltypeSpecifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterClassOrDeclType(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitClassOrDeclType(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitClassOrDeclType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BaseTypeSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_baseTypeSpecifier;
  }
  classOrDeclType() {
    return this.getTypedRuleContext(ClassOrDeclTypeContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterBaseTypeSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitBaseTypeSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitBaseTypeSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AccessSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_accessSpecifier;
  }
  Private() {
    return this.getToken(CPP14Parser.Private, 0);
  }
  Protected() {
    return this.getToken(CPP14Parser.Protected, 0);
  }
  Public() {
    return this.getToken(CPP14Parser.Public, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterAccessSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitAccessSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitAccessSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ConversionFunctionIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversionFunctionId;
  }
  Operator() {
    return this.getToken(CPP14Parser.Operator, 0);
  }
  conversionTypeId() {
    return this.getTypedRuleContext(ConversionTypeIdContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterConversionFunctionId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitConversionFunctionId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitConversionFunctionId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ConversionTypeIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversionTypeId;
  }
  typeSpecifierSeq() {
    return this.getTypedRuleContext(TypeSpecifierSeqContext, 0);
  }
  conversionDeclarator() {
    return this.getTypedRuleContext(ConversionDeclaratorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterConversionTypeId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitConversionTypeId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitConversionTypeId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ConversionDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversionDeclarator;
  }
  pointerOperator() {
    return this.getTypedRuleContext(PointerOperatorContext, 0);
  }
  conversionDeclarator() {
    return this.getTypedRuleContext(ConversionDeclaratorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterConversionDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitConversionDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitConversionDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ConstructorInitializerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_constructorInitializer;
  }
  Colon() {
    return this.getToken(CPP14Parser.Colon, 0);
  }
  memInitializerList() {
    return this.getTypedRuleContext(MemInitializerListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterConstructorInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitConstructorInitializer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitConstructorInitializer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MemInitializerListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memInitializerList;
  }
  memInitializer = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MemInitializerContext);
    } else {
      return this.getTypedRuleContext(MemInitializerContext, i);
    }
  };
  Ellipsis = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Ellipsis);
    } else {
      return this.getToken(CPP14Parser.Ellipsis, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterMemInitializerList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitMemInitializerList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitMemInitializerList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MemInitializerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memInitializer;
  }
  meminitializerid() {
    return this.getTypedRuleContext(MeminitializeridContext, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  bracedInitList() {
    return this.getTypedRuleContext(BracedInitListContext, 0);
  }
  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterMemInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitMemInitializer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitMemInitializer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MeminitializeridContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_meminitializerid;
  }
  classOrDeclType() {
    return this.getTypedRuleContext(ClassOrDeclTypeContext, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterMeminitializerid(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitMeminitializerid(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitMeminitializerid(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class OperatorFunctionIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_operatorFunctionId;
  }
  Operator() {
    return this.getToken(CPP14Parser.Operator, 0);
  }
  theOperator() {
    return this.getTypedRuleContext(TheOperatorContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterOperatorFunctionId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitOperatorFunctionId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitOperatorFunctionId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LiteralOperatorIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_literalOperatorId;
  }
  Operator() {
    return this.getToken(CPP14Parser.Operator, 0);
  }
  StringLiteral() {
    return this.getToken(CPP14Parser.StringLiteral, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  UserDefinedStringLiteral() {
    return this.getToken(CPP14Parser.UserDefinedStringLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterLiteralOperatorId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitLiteralOperatorId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitLiteralOperatorId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateDeclaration;
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  Less() {
    return this.getToken(CPP14Parser.Less, 0);
  }
  templateparameterList() {
    return this.getTypedRuleContext(TemplateparameterListContext, 0);
  }
  Greater() {
    return this.getToken(CPP14Parser.Greater, 0);
  }
  declaration() {
    return this.getTypedRuleContext(DeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTemplateDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTemplateDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTemplateDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateparameterListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateparameterList;
  }
  templateParameter = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TemplateParameterContext);
    } else {
      return this.getTypedRuleContext(TemplateParameterContext, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTemplateparameterList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTemplateparameterList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTemplateparameterList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateParameterContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateParameter;
  }
  typeParameter() {
    return this.getTypedRuleContext(TypeParameterContext, 0);
  }
  parameterDeclaration() {
    return this.getTypedRuleContext(ParameterDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTemplateParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTemplateParameter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTemplateParameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeParameterContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeParameter;
  }
  Class() {
    return this.getToken(CPP14Parser.Class, 0);
  }
  Typename_() {
    return this.getToken(CPP14Parser.Typename_, 0);
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  theTypeId() {
    return this.getTypedRuleContext(TheTypeIdContext, 0);
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  Less() {
    return this.getToken(CPP14Parser.Less, 0);
  }
  templateparameterList() {
    return this.getTypedRuleContext(TemplateparameterListContext, 0);
  }
  Greater() {
    return this.getToken(CPP14Parser.Greater, 0);
  }
  Ellipsis() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTypeParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTypeParameter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTypeParameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SimpleTemplateIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpleTemplateId;
  }
  templateName() {
    return this.getTypedRuleContext(TemplateNameContext, 0);
  }
  Less() {
    return this.getToken(CPP14Parser.Less, 0);
  }
  Greater() {
    return this.getToken(CPP14Parser.Greater, 0);
  }
  templateArgumentList() {
    return this.getTypedRuleContext(TemplateArgumentListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterSimpleTemplateId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitSimpleTemplateId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitSimpleTemplateId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateId;
  }
  simpleTemplateId() {
    return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
  }
  Less() {
    return this.getToken(CPP14Parser.Less, 0);
  }
  Greater() {
    return this.getToken(CPP14Parser.Greater, 0);
  }
  operatorFunctionId() {
    return this.getTypedRuleContext(OperatorFunctionIdContext, 0);
  }
  literalOperatorId() {
    return this.getTypedRuleContext(LiteralOperatorIdContext, 0);
  }
  templateArgumentList() {
    return this.getTypedRuleContext(TemplateArgumentListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTemplateId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTemplateId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTemplateId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateName;
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTemplateName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTemplateName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTemplateName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateArgumentListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateArgumentList;
  }
  templateArgument = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TemplateArgumentContext);
    } else {
      return this.getTypedRuleContext(TemplateArgumentContext, i);
    }
  };
  Ellipsis = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Ellipsis);
    } else {
      return this.getToken(CPP14Parser.Ellipsis, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTemplateArgumentList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTemplateArgumentList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTemplateArgumentList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TemplateArgumentContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateArgument;
  }
  theTypeId() {
    return this.getTypedRuleContext(TheTypeIdContext, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  idExpression() {
    return this.getTypedRuleContext(IdExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTemplateArgument(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTemplateArgument(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTemplateArgument(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeNameSpecifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeNameSpecifier;
  }
  Typename_() {
    return this.getToken(CPP14Parser.Typename_, 0);
  }
  nestedNameSpecifier() {
    return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
  }
  Identifier() {
    return this.getToken(CPP14Parser.Identifier, 0);
  }
  simpleTemplateId() {
    return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTypeNameSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTypeNameSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTypeNameSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExplicitInstantiationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_explicitInstantiation;
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  declaration() {
    return this.getTypedRuleContext(DeclarationContext, 0);
  }
  Extern() {
    return this.getToken(CPP14Parser.Extern, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterExplicitInstantiation(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitExplicitInstantiation(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitExplicitInstantiation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExplicitSpecializationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_explicitSpecialization;
  }
  Template() {
    return this.getToken(CPP14Parser.Template, 0);
  }
  Less() {
    return this.getToken(CPP14Parser.Less, 0);
  }
  Greater() {
    return this.getToken(CPP14Parser.Greater, 0);
  }
  declaration() {
    return this.getTypedRuleContext(DeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterExplicitSpecialization(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitExplicitSpecialization(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitExplicitSpecialization(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TryBlockContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_tryBlock;
  }
  Try() {
    return this.getToken(CPP14Parser.Try, 0);
  }
  compoundStatement() {
    return this.getTypedRuleContext(CompoundStatementContext, 0);
  }
  handlerSeq() {
    return this.getTypedRuleContext(HandlerSeqContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTryBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTryBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTryBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FunctionTryBlockContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionTryBlock;
  }
  Try() {
    return this.getToken(CPP14Parser.Try, 0);
  }
  compoundStatement() {
    return this.getTypedRuleContext(CompoundStatementContext, 0);
  }
  handlerSeq() {
    return this.getTypedRuleContext(HandlerSeqContext, 0);
  }
  constructorInitializer() {
    return this.getTypedRuleContext(ConstructorInitializerContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterFunctionTryBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitFunctionTryBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitFunctionTryBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class HandlerSeqContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_handlerSeq;
  }
  handler = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(HandlerContext);
    } else {
      return this.getTypedRuleContext(HandlerContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterHandlerSeq(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitHandlerSeq(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitHandlerSeq(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class HandlerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_handler;
  }
  Catch() {
    return this.getToken(CPP14Parser.Catch, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  exceptionDeclaration() {
    return this.getTypedRuleContext(ExceptionDeclarationContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  compoundStatement() {
    return this.getTypedRuleContext(CompoundStatementContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterHandler(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitHandler(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitHandler(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExceptionDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exceptionDeclaration;
  }
  typeSpecifierSeq() {
    return this.getTypedRuleContext(TypeSpecifierSeqContext, 0);
  }
  attributeSpecifierSeq() {
    return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
  }
  declarator() {
    return this.getTypedRuleContext(DeclaratorContext, 0);
  }
  abstractDeclarator() {
    return this.getTypedRuleContext(AbstractDeclaratorContext, 0);
  }
  Ellipsis() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterExceptionDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitExceptionDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitExceptionDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ThrowExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_throwExpression;
  }
  Throw() {
    return this.getToken(CPP14Parser.Throw, 0);
  }
  assignmentExpression() {
    return this.getTypedRuleContext(AssignmentExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterThrowExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitThrowExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitThrowExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExceptionSpecificationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exceptionSpecification;
  }
  dynamicExceptionSpecification() {
    return this.getTypedRuleContext(DynamicExceptionSpecificationContext, 0);
  }
  noeExceptSpecification() {
    return this.getTypedRuleContext(NoeExceptSpecificationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterExceptionSpecification(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitExceptionSpecification(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitExceptionSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DynamicExceptionSpecificationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_dynamicExceptionSpecification;
  }
  Throw() {
    return this.getToken(CPP14Parser.Throw, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  typeIdList() {
    return this.getTypedRuleContext(TypeIdListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterDynamicExceptionSpecification(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitDynamicExceptionSpecification(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitDynamicExceptionSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeIdListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeIdList;
  }
  theTypeId = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TheTypeIdContext);
    } else {
      return this.getTypedRuleContext(TheTypeIdContext, i);
    }
  };
  Ellipsis = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Ellipsis);
    } else {
      return this.getToken(CPP14Parser.Ellipsis, i);
    }
  };
  Comma = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Comma);
    } else {
      return this.getToken(CPP14Parser.Comma, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTypeIdList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTypeIdList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTypeIdList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NoeExceptSpecificationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noeExceptSpecification;
  }
  Noexcept() {
    return this.getToken(CPP14Parser.Noexcept, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  constantExpression() {
    return this.getTypedRuleContext(ConstantExpressionContext, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterNoeExceptSpecification(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitNoeExceptSpecification(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitNoeExceptSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TheOperatorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_theOperator;
  }
  New() {
    return this.getToken(CPP14Parser.New, 0);
  }
  LeftBracket() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
  }
  RightBracket() {
    return this.getToken(CPP14Parser.RightBracket, 0);
  }
  Delete() {
    return this.getToken(CPP14Parser.Delete, 0);
  }
  Plus() {
    return this.getToken(CPP14Parser.Plus, 0);
  }
  Minus() {
    return this.getToken(CPP14Parser.Minus, 0);
  }
  Star() {
    return this.getToken(CPP14Parser.Star, 0);
  }
  Div() {
    return this.getToken(CPP14Parser.Div, 0);
  }
  Mod() {
    return this.getToken(CPP14Parser.Mod, 0);
  }
  Caret() {
    return this.getToken(CPP14Parser.Caret, 0);
  }
  And() {
    return this.getToken(CPP14Parser.And, 0);
  }
  Or() {
    return this.getToken(CPP14Parser.Or, 0);
  }
  Tilde() {
    return this.getToken(CPP14Parser.Tilde, 0);
  }
  Not() {
    return this.getToken(CPP14Parser.Not, 0);
  }
  Assign() {
    return this.getToken(CPP14Parser.Assign, 0);
  }
  Greater = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Greater);
    } else {
      return this.getToken(CPP14Parser.Greater, i);
    }
  };
  Less = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CPP14Parser.Less);
    } else {
      return this.getToken(CPP14Parser.Less, i);
    }
  };
  GreaterEqual() {
    return this.getToken(CPP14Parser.GreaterEqual, 0);
  }
  PlusAssign() {
    return this.getToken(CPP14Parser.PlusAssign, 0);
  }
  MinusAssign() {
    return this.getToken(CPP14Parser.MinusAssign, 0);
  }
  StarAssign() {
    return this.getToken(CPP14Parser.StarAssign, 0);
  }
  ModAssign() {
    return this.getToken(CPP14Parser.ModAssign, 0);
  }
  XorAssign() {
    return this.getToken(CPP14Parser.XorAssign, 0);
  }
  AndAssign() {
    return this.getToken(CPP14Parser.AndAssign, 0);
  }
  OrAssign() {
    return this.getToken(CPP14Parser.OrAssign, 0);
  }
  RightShiftAssign() {
    return this.getToken(CPP14Parser.RightShiftAssign, 0);
  }
  LeftShiftAssign() {
    return this.getToken(CPP14Parser.LeftShiftAssign, 0);
  }
  Equal() {
    return this.getToken(CPP14Parser.Equal, 0);
  }
  NotEqual() {
    return this.getToken(CPP14Parser.NotEqual, 0);
  }
  LessEqual() {
    return this.getToken(CPP14Parser.LessEqual, 0);
  }
  AndAnd() {
    return this.getToken(CPP14Parser.AndAnd, 0);
  }
  OrOr() {
    return this.getToken(CPP14Parser.OrOr, 0);
  }
  PlusPlus() {
    return this.getToken(CPP14Parser.PlusPlus, 0);
  }
  MinusMinus() {
    return this.getToken(CPP14Parser.MinusMinus, 0);
  }
  Comma() {
    return this.getToken(CPP14Parser.Comma, 0);
  }
  ArrowStar() {
    return this.getToken(CPP14Parser.ArrowStar, 0);
  }
  Arrow() {
    return this.getToken(CPP14Parser.Arrow, 0);
  }
  LeftParen() {
    return this.getToken(CPP14Parser.LeftParen, 0);
  }
  RightParen() {
    return this.getToken(CPP14Parser.RightParen, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterTheOperator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitTheOperator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitTheOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LiteralContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_literal;
  }
  IntegerLiteral() {
    return this.getToken(CPP14Parser.IntegerLiteral, 0);
  }
  CharacterLiteral() {
    return this.getToken(CPP14Parser.CharacterLiteral, 0);
  }
  FloatingLiteral() {
    return this.getToken(CPP14Parser.FloatingLiteral, 0);
  }
  StringLiteral() {
    return this.getToken(CPP14Parser.StringLiteral, 0);
  }
  BooleanLiteral() {
    return this.getToken(CPP14Parser.BooleanLiteral, 0);
  }
  PointerLiteral() {
    return this.getToken(CPP14Parser.PointerLiteral, 0);
  }
  UserDefinedLiteral() {
    return this.getToken(CPP14Parser.UserDefinedLiteral, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.enterLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_CPP14ParserListener.default) {
      listener.exitLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_CPP14ParserVisitor.default) {
      return visitor.visitLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
CPP14Parser.TranslationUnitContext = TranslationUnitContext;
CPP14Parser.PrimaryExpressionContext = PrimaryExpressionContext;
CPP14Parser.IdExpressionContext = IdExpressionContext;
CPP14Parser.UnqualifiedIdContext = UnqualifiedIdContext;
CPP14Parser.QualifiedIdContext = QualifiedIdContext;
CPP14Parser.NestedNameSpecifierContext = NestedNameSpecifierContext;
CPP14Parser.LambdaExpressionContext = LambdaExpressionContext;
CPP14Parser.LambdaIntroducerContext = LambdaIntroducerContext;
CPP14Parser.LambdaCaptureContext = LambdaCaptureContext;
CPP14Parser.CaptureDefaultContext = CaptureDefaultContext;
CPP14Parser.CaptureListContext = CaptureListContext;
CPP14Parser.CaptureContext = CaptureContext;
CPP14Parser.SimpleCaptureContext = SimpleCaptureContext;
CPP14Parser.InitcaptureContext = InitcaptureContext;
CPP14Parser.LambdaDeclaratorContext = LambdaDeclaratorContext;
CPP14Parser.PostfixExpressionContext = PostfixExpressionContext;
CPP14Parser.TypeIdOfTheTypeIdContext = TypeIdOfTheTypeIdContext;
CPP14Parser.ExpressionListContext = ExpressionListContext;
CPP14Parser.PseudoDestructorNameContext = PseudoDestructorNameContext;
CPP14Parser.UnaryExpressionContext = UnaryExpressionContext;
CPP14Parser.UnaryOperatorContext = UnaryOperatorContext;
CPP14Parser.NewExpressionContext = NewExpressionContext;
CPP14Parser.NewPlacementContext = NewPlacementContext;
CPP14Parser.NewTypeIdContext = NewTypeIdContext;
CPP14Parser.NewDeclaratorContext = NewDeclaratorContext;
CPP14Parser.NoPointerNewDeclaratorContext = NoPointerNewDeclaratorContext;
CPP14Parser.NewInitializerContext = NewInitializerContext;
CPP14Parser.DeleteExpressionContext = DeleteExpressionContext;
CPP14Parser.NoExceptExpressionContext = NoExceptExpressionContext;
CPP14Parser.CastExpressionContext = CastExpressionContext;
CPP14Parser.PointerMemberExpressionContext = PointerMemberExpressionContext;
CPP14Parser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;
CPP14Parser.AdditiveExpressionContext = AdditiveExpressionContext;
CPP14Parser.ShiftExpressionContext = ShiftExpressionContext;
CPP14Parser.ShiftOperatorContext = ShiftOperatorContext;
CPP14Parser.RelationalExpressionContext = RelationalExpressionContext;
CPP14Parser.EqualityExpressionContext = EqualityExpressionContext;
CPP14Parser.AndExpressionContext = AndExpressionContext;
CPP14Parser.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext;
CPP14Parser.InclusiveOrExpressionContext = InclusiveOrExpressionContext;
CPP14Parser.LogicalAndExpressionContext = LogicalAndExpressionContext;
CPP14Parser.LogicalOrExpressionContext = LogicalOrExpressionContext;
CPP14Parser.ConditionalExpressionContext = ConditionalExpressionContext;
CPP14Parser.AssignmentExpressionContext = AssignmentExpressionContext;
CPP14Parser.AssignmentOperatorContext = AssignmentOperatorContext;
CPP14Parser.ExpressionContext = ExpressionContext;
CPP14Parser.ConstantExpressionContext = ConstantExpressionContext;
CPP14Parser.StatementContext = StatementContext;
CPP14Parser.LabeledStatementContext = LabeledStatementContext;
CPP14Parser.ExpressionStatementContext = ExpressionStatementContext;
CPP14Parser.CompoundStatementContext = CompoundStatementContext;
CPP14Parser.StatementSeqContext = StatementSeqContext;
CPP14Parser.SelectionStatementContext = SelectionStatementContext;
CPP14Parser.ConditionContext = ConditionContext;
CPP14Parser.IterationStatementContext = IterationStatementContext;
CPP14Parser.ForInitStatementContext = ForInitStatementContext;
CPP14Parser.ForRangeDeclarationContext = ForRangeDeclarationContext;
CPP14Parser.ForRangeInitializerContext = ForRangeInitializerContext;
CPP14Parser.JumpStatementContext = JumpStatementContext;
CPP14Parser.DeclarationStatementContext = DeclarationStatementContext;
CPP14Parser.DeclarationseqContext = DeclarationseqContext;
CPP14Parser.DeclarationContext = DeclarationContext;
CPP14Parser.BlockDeclarationContext = BlockDeclarationContext;
CPP14Parser.AliasDeclarationContext = AliasDeclarationContext;
CPP14Parser.SimpleDeclarationContext = SimpleDeclarationContext;
CPP14Parser.StaticAssertDeclarationContext = StaticAssertDeclarationContext;
CPP14Parser.EmptyDeclarationContext = EmptyDeclarationContext;
CPP14Parser.AttributeDeclarationContext = AttributeDeclarationContext;
CPP14Parser.DeclSpecifierContext = DeclSpecifierContext;
CPP14Parser.DeclSpecifierSeqContext = DeclSpecifierSeqContext;
CPP14Parser.StorageClassSpecifierContext = StorageClassSpecifierContext;
CPP14Parser.FunctionSpecifierContext = FunctionSpecifierContext;
CPP14Parser.TypedefNameContext = TypedefNameContext;
CPP14Parser.TypeSpecifierContext = TypeSpecifierContext;
CPP14Parser.TrailingTypeSpecifierContext = TrailingTypeSpecifierContext;
CPP14Parser.TypeSpecifierSeqContext = TypeSpecifierSeqContext;
CPP14Parser.TrailingTypeSpecifierSeqContext = TrailingTypeSpecifierSeqContext;
CPP14Parser.SimpleTypeLengthModifierContext = SimpleTypeLengthModifierContext;
CPP14Parser.SimpleTypeSignednessModifierContext = SimpleTypeSignednessModifierContext;
CPP14Parser.SimpleTypeSpecifierContext = SimpleTypeSpecifierContext;
CPP14Parser.TheTypeNameContext = TheTypeNameContext;
CPP14Parser.DecltypeSpecifierContext = DecltypeSpecifierContext;
CPP14Parser.ElaboratedTypeSpecifierContext = ElaboratedTypeSpecifierContext;
CPP14Parser.EnumNameContext = EnumNameContext;
CPP14Parser.EnumSpecifierContext = EnumSpecifierContext;
CPP14Parser.EnumHeadContext = EnumHeadContext;
CPP14Parser.OpaqueEnumDeclarationContext = OpaqueEnumDeclarationContext;
CPP14Parser.EnumkeyContext = EnumkeyContext;
CPP14Parser.EnumbaseContext = EnumbaseContext;
CPP14Parser.EnumeratorListContext = EnumeratorListContext;
CPP14Parser.EnumeratorDefinitionContext = EnumeratorDefinitionContext;
CPP14Parser.EnumeratorContext = EnumeratorContext;
CPP14Parser.NamespaceNameContext = NamespaceNameContext;
CPP14Parser.OriginalNamespaceNameContext = OriginalNamespaceNameContext;
CPP14Parser.NamespaceDefinitionContext = NamespaceDefinitionContext;
CPP14Parser.NamespaceAliasContext = NamespaceAliasContext;
CPP14Parser.NamespaceAliasDefinitionContext = NamespaceAliasDefinitionContext;
CPP14Parser.QualifiednamespacespecifierContext = QualifiednamespacespecifierContext;
CPP14Parser.UsingDeclarationContext = UsingDeclarationContext;
CPP14Parser.UsingDirectiveContext = UsingDirectiveContext;
CPP14Parser.AsmDefinitionContext = AsmDefinitionContext;
CPP14Parser.LinkageSpecificationContext = LinkageSpecificationContext;
CPP14Parser.AttributeSpecifierSeqContext = AttributeSpecifierSeqContext;
CPP14Parser.AttributeSpecifierContext = AttributeSpecifierContext;
CPP14Parser.AlignmentspecifierContext = AlignmentspecifierContext;
CPP14Parser.AttributeListContext = AttributeListContext;
CPP14Parser.AttributeContext = AttributeContext;
CPP14Parser.AttributeNamespaceContext = AttributeNamespaceContext;
CPP14Parser.AttributeArgumentClauseContext = AttributeArgumentClauseContext;
CPP14Parser.BalancedTokenSeqContext = BalancedTokenSeqContext;
CPP14Parser.BalancedtokenContext = BalancedtokenContext;
CPP14Parser.InitDeclaratorListContext = InitDeclaratorListContext;
CPP14Parser.InitDeclaratorContext = InitDeclaratorContext;
CPP14Parser.DeclaratorContext = DeclaratorContext;
CPP14Parser.PointerDeclaratorContext = PointerDeclaratorContext;
CPP14Parser.NoPointerDeclaratorContext = NoPointerDeclaratorContext;
CPP14Parser.ParametersAndQualifiersContext = ParametersAndQualifiersContext;
CPP14Parser.TrailingReturnTypeContext = TrailingReturnTypeContext;
CPP14Parser.PointerOperatorContext = PointerOperatorContext;
CPP14Parser.CvqualifierseqContext = CvqualifierseqContext;
CPP14Parser.CvQualifierContext = CvQualifierContext;
CPP14Parser.RefqualifierContext = RefqualifierContext;
CPP14Parser.DeclaratoridContext = DeclaratoridContext;
CPP14Parser.TheTypeIdContext = TheTypeIdContext;
CPP14Parser.AbstractDeclaratorContext = AbstractDeclaratorContext;
CPP14Parser.PointerAbstractDeclaratorContext = PointerAbstractDeclaratorContext;
CPP14Parser.NoPointerAbstractDeclaratorContext = NoPointerAbstractDeclaratorContext;
CPP14Parser.AbstractPackDeclaratorContext = AbstractPackDeclaratorContext;
CPP14Parser.NoPointerAbstractPackDeclaratorContext = NoPointerAbstractPackDeclaratorContext;
CPP14Parser.ParameterDeclarationClauseContext = ParameterDeclarationClauseContext;
CPP14Parser.ParameterDeclarationListContext = ParameterDeclarationListContext;
CPP14Parser.ParameterDeclarationContext = ParameterDeclarationContext;
CPP14Parser.FunctionDefinitionContext = FunctionDefinitionContext;
CPP14Parser.FunctionBodyContext = FunctionBodyContext;
CPP14Parser.InitializerContext = InitializerContext;
CPP14Parser.BraceOrEqualInitializerContext = BraceOrEqualInitializerContext;
CPP14Parser.InitializerClauseContext = InitializerClauseContext;
CPP14Parser.InitializerListContext = InitializerListContext;
CPP14Parser.BracedInitListContext = BracedInitListContext;
CPP14Parser.ClassNameContext = ClassNameContext;
CPP14Parser.ClassSpecifierContext = ClassSpecifierContext;
CPP14Parser.ClassHeadContext = ClassHeadContext;
CPP14Parser.ClassHeadNameContext = ClassHeadNameContext;
CPP14Parser.ClassVirtSpecifierContext = ClassVirtSpecifierContext;
CPP14Parser.ClassKeyContext = ClassKeyContext;
CPP14Parser.MemberSpecificationContext = MemberSpecificationContext;
CPP14Parser.MemberdeclarationContext = MemberdeclarationContext;
CPP14Parser.MemberDeclaratorListContext = MemberDeclaratorListContext;
CPP14Parser.MemberDeclaratorContext = MemberDeclaratorContext;
CPP14Parser.VirtualSpecifierSeqContext = VirtualSpecifierSeqContext;
CPP14Parser.VirtualSpecifierContext = VirtualSpecifierContext;
CPP14Parser.PureSpecifierContext = PureSpecifierContext;
CPP14Parser.BaseClauseContext = BaseClauseContext;
CPP14Parser.BaseSpecifierListContext = BaseSpecifierListContext;
CPP14Parser.BaseSpecifierContext = BaseSpecifierContext;
CPP14Parser.ClassOrDeclTypeContext = ClassOrDeclTypeContext;
CPP14Parser.BaseTypeSpecifierContext = BaseTypeSpecifierContext;
CPP14Parser.AccessSpecifierContext = AccessSpecifierContext;
CPP14Parser.ConversionFunctionIdContext = ConversionFunctionIdContext;
CPP14Parser.ConversionTypeIdContext = ConversionTypeIdContext;
CPP14Parser.ConversionDeclaratorContext = ConversionDeclaratorContext;
CPP14Parser.ConstructorInitializerContext = ConstructorInitializerContext;
CPP14Parser.MemInitializerListContext = MemInitializerListContext;
CPP14Parser.MemInitializerContext = MemInitializerContext;
CPP14Parser.MeminitializeridContext = MeminitializeridContext;
CPP14Parser.OperatorFunctionIdContext = OperatorFunctionIdContext;
CPP14Parser.LiteralOperatorIdContext = LiteralOperatorIdContext;
CPP14Parser.TemplateDeclarationContext = TemplateDeclarationContext;
CPP14Parser.TemplateparameterListContext = TemplateparameterListContext;
CPP14Parser.TemplateParameterContext = TemplateParameterContext;
CPP14Parser.TypeParameterContext = TypeParameterContext;
CPP14Parser.SimpleTemplateIdContext = SimpleTemplateIdContext;
CPP14Parser.TemplateIdContext = TemplateIdContext;
CPP14Parser.TemplateNameContext = TemplateNameContext;
CPP14Parser.TemplateArgumentListContext = TemplateArgumentListContext;
CPP14Parser.TemplateArgumentContext = TemplateArgumentContext;
CPP14Parser.TypeNameSpecifierContext = TypeNameSpecifierContext;
CPP14Parser.ExplicitInstantiationContext = ExplicitInstantiationContext;
CPP14Parser.ExplicitSpecializationContext = ExplicitSpecializationContext;
CPP14Parser.TryBlockContext = TryBlockContext;
CPP14Parser.FunctionTryBlockContext = FunctionTryBlockContext;
CPP14Parser.HandlerSeqContext = HandlerSeqContext;
CPP14Parser.HandlerContext = HandlerContext;
CPP14Parser.ExceptionDeclarationContext = ExceptionDeclarationContext;
CPP14Parser.ThrowExpressionContext = ThrowExpressionContext;
CPP14Parser.ExceptionSpecificationContext = ExceptionSpecificationContext;
CPP14Parser.DynamicExceptionSpecificationContext = DynamicExceptionSpecificationContext;
CPP14Parser.TypeIdListContext = TypeIdListContext;
CPP14Parser.NoeExceptSpecificationContext = NoeExceptSpecificationContext;
CPP14Parser.TheOperatorContext = TheOperatorContext;
CPP14Parser.LiteralContext = LiteralContext;
module.exports = __toCommonJS(CPP14Parser_exports);
