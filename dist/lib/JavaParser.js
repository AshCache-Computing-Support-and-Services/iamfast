var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var JavaParser_exports = {};
__export(JavaParser_exports, {
  default: () => JavaParser
});
var import_antlr4 = __toESM(require("antlr4"), 1);
var import_JavaParserListener = __toESM(require("./JavaParserListener.js"), 1);
var import_JavaParserVisitor = __toESM(require("./JavaParserVisitor.js"), 1);
const serializedATN = [
  "\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786",
  "\u5964\x82\u06E2		",
  "			\x07	",
  "\x07\b	\b			\n	\n\v	\v",
  "\f	\f\r	\r		",
  "				",
  "			",
  "				",
  "\x1B	\x1B		",
  '		 	 !	!"	"#',
  "	#$	$%	%&	&'	'(	()	)",
  "*	*+	+,	,-	-.	./	/0	0",
  "1	12	23	34	45	56	67	7",
  "8	89	9:	:;	;<	<=	=>	>",
  "?	?@	@A	AB	BC	CD	DE	E",
  "F	FG	GH	HI	IJ	JK	KL	L",
  "M	MN	NO	OP	PQ	QR	RS	S",
  "T	TU	UV	VW	WX	XY	YZ	Z",
  "[	[\\	\\]	]^	^_	_`	`a	a",
  "b	bc	cd	de	ef	fg	gh	h",
  "i	ij	jk	kl	lm	mn	no	o",
  "p	pq	qr	rs	st	tu	uv	v",
  "w	wx	xy	yz	z{	{|	|}	}",
  "\xFC\n\x07\xFF\n",
  "\f\u0102\v\x07\u0105",
  "\n\f\u0108\v",
  "\u010D\n\x07\u0110",
  "\n\f\u0113\v",
  "\u011B\n",
  "\u0120\n",
  "\x07\u0125\n\f",
  "\u0128\v",
  "\u012F\n",
  "\u0132\n",
  "\u0139\n\x07\x07\x07",
  "\x07\x07\x07\x07\x07\x07",
  "\x07\x07\u0145\n\x07\b\b\b\u0149",
  "\n\b				\u014E\n			",
  "	\u0152\n				\u0156\n			",
  "	\u015A\n			\n\n\n\n\x07\n",
  "\u0162\n\n\f\n\n\u0165\v\n\n\n\v\x07",
  "\v\u016A\n\v\f\v\v\u016D\v\v\v",
  "\v\v\x07\v\u0172\n\v\f\v\v",
  "\u0175\v\v\v\v\u0178\n\v\f",
  "\f\f\x07\f\u017D\n\f\f\f\f\u0180\v\f\r",
  "\r\r\r\r\u0186\n\r\r\r\r\u018A\n",
  "\r\r\r\u018D\n\r\r\r\u0190\n\r\r",
  "\r\x07\u0197\n\f",
  "\u019A\v\x07\u019D\n",
  "\f\u01A0\v",
  "\u01A4\n\u01A7\n",
  "\x07\u01AB\n\f\u01AE\v",
  "\u01B3\n",
  "\u01B7\n",
  "\x07\u01BD\n\f",
  "\u01C0\v",
  "\x07\u01C6\n\f\u01C9\v",
  "\u01CF\n",
  "\x07\u01D3\n\f",
  "\u01D6\v\u01D9\n",
  "",
  "\u01E5\n",
  "\x07\u01EC",
  "\n\f\u01EF\v",
  "\u01F3\n",
  "\u01F9\n",
  "\u01FD\n",
  "\x1B\x1B\x1B\x1B",
  "\x1B\u0209\n\x1B\x1B\x1B",
  "\x07\u0212\n\f",
  "\u0215\v\u0219",
  "\n",
  "\u0223\n",
  "\x07\u0229\n",
  "\f\u022C\v",
  "   \x07 \u0233\n \f  \u0236\v  ",
  "  !\x07!\u023C\n!\f!!\u023F\v!!",
  '!"""""""\u0249\n"',
  "#\x07#\u024C\n#\f##\u024F\v####",
  "$\x07$\u0255\n$\f$$\u0258\v$$$$",
  "$$\x07$\u025F\n$\f$$\u0262\v$$$",
  "$\u0266\n$$$%%%\x07%\u026D\n%",
  "\f%%\u0270\v%&&&&\u0275\n&'",
  "''\x07'\u027A\n'\f''\u027D\v'(",
  "((\u0281\n())))\x07)\u0287\n)",
  "\f))\u028A\v)))\u028D\n))\u028F\n)",
  "))***\u0295\n*****\u029A",
  "\n*\x07*\u029C\n*\f**\u029F\v*++\x07+\u02A3",
  "\n+\f++\u02A6\v+++++\u02AB\n+",
  "+\u02AD\n+,,,\x07,\u02B2\n,\f,,\u02B5\v",
  ",---\u02B9\n-----\u02BE\n",
  "---\u02C1\n--\u02C3\n---.",
  "...\x07.\u02CB\n.\f..\u02CE\v..",
  ".///\x07/\u02D5\n/\f//\u02D8\v/",
  "///\u02DC\n///\u02DF\n/0\x070\u02E2",
  "\n0\f00\u02E5\v00001\x071\u02EB",
  "\n1\f11\u02EE\v111\x071\u02F2\n1\f11\u02F5",
  "\v1111222\x072\u02FD\n2\f",
  "22\u0300\v23\x073\u0303\n3\f33\u0306\v3",
  "333444\x074\u030E\n4\f4",
  "4\u0311\v45555555",
  "5\u031A\n56677888\x078\u0323",
  "\n8\f88\u0326\v888899",
  "99\u032E\n99999\u0333\n99",
  "9\u0336\n9:::\x07:\u033B\n:\f::\u033E\v",
  ":;;;;<<<<\u0347\n<",
  "====\x07=\u034D\n=\f==\u0350\v=",
  "=\u0352\n===\u0355\n===>>",
  ">>>??\x07?\u0360\n?\f??\u0363\v",
  "???@\x07@\u0368\n@\f@@\u036B\v@",
  "@@@\u036F\n@AAAAAA",
  "A\u0377\nAAAA\u037B\nAAAA\u037F",
  "\nAAAA\u0383\nAAAA\u0387\nA",
  "A\u0389\nABBB\u038D\nBCCC",
  "CC\u0393\nCDDEEEFF\u039B",
  "\nFFFFFGG\x07G\u03A3\nG\fG",
  "G\u03A6\vGGGHH\x07H\u03AC\nH\fH",
  "H\u03AF\vHHHHHHHH",
  "H\u03B8\nHHHHHHHH\u03C0\n",
  "HHHHHHHHHH",
  "HHHH\u03CE\nHIIJJJ",
  "J\u03D5\nJJJJJ\u03DA\nJJJ",
  "KKK\u03E0\nKKKLLL\x07L\u03E7",
  "\nL\fLL\u03EA\vLMMMNN\x07",
  "N\u03F1\nN\fNN\u03F4\vNNNOO\x07",
  "O\u03FA\nO\fOO\u03FD\vOOOPP",
  "PPPP\u0406\nPQ\x07Q\u0409\nQ\fQQ\u040C",
  "\vQQQQQQQQQ",
  "Q\u0416\nQRRS\x07S\u041B\nS\fSS\u041E\v",
  "SSSSS\u0423\nSSS\u0426\nS",
  "TTTTTT\u042D\nTTTT",
  "TTTTT\u0436\nTTTTT",
  "TTTTTTTTTT",
  "TTTTTT\u044B\nT\rTT\u044C",
  "TT\u0450\nTTT\u0453\nTTTT",
  "T\x07T\u0459\nT\fTT\u045C\vTTT\u045F\nT",
  "TTTT\x07T\u0465\nT\fTT\u0468\vT",
  "T\x07T\u046B\nT\fTT\u046E\vTTTT",
  "TTTTTT\u0478\nTTTT",
  "TTTTT\u0481\nTTTTT\u0486",
  "\nTTTTTTTTTT",
  "TTT\u0493\nTTTTTT\u0499\n",
  "TUUU\x07U\u049E\nU\fUU\u04A1\vU",
  "UUUUUVVV\x07V\u04AB\nV\f",
  "VV\u04AE\vVWWWXXX",
  "X\u04B6\nXXXYYY\x07Y\u04BD\nY\fY",
  "Y\u04C0\vYZ\x07Z\u04C3\nZ\fZZ\u04C6\vZZ",
  "ZZZZZ\u04CD\nZZZZ",
  "ZZ\u04D3\nZ[[\u04D6\n[\r[[\u04D7[",
  "[\u04DB\n[\r[[\u04DC\\\\\\\\\\",
  "\\\\\u04E5\n\\\\\\\\\\\u04EA\n\\",
  "]]]\u04EE\n]]]]\u04F2\n]]",
  "]]\u04F6\n]]\u04F8\n]^^^\u04FC\n^",
  "_\x07_\u04FF\n_\f__\u0502\v____\u0506",
  "\n_____````a",
  "aa\x07a\u0513\na\faa\u0516\vabb",
  "bb\u051B\nbbbbbbb\u0522\n",
  "bbbbbb\u0528\nbbb\u052B\n",
  "bccccccc\x07c\u0534\nc\f",
  "cc\u0537\vcccc\x07c\u053C\nc\fc",
  "c\u053F\vcccccccc",
  "cccccc\u054D\ncccc\u0551",
  "\nccccc\u0556\ncccc\u055A",
  "\ncccccccccc",
  "cccccc\u056A\ncccc",
  "cccccccccc",
  "cccccccccc",
  "cccccccccc",
  "cccccc\u0592\ncccc",
  "cc\u0598\ncccccccc",
  "ccccc\u05A5\nccccc\u05AA",
  "\ncc\x07c\u05AD\nc\fcc\u05B0\vcd\x07d\u05B3",
  "\nd\fdd\u05B6\vddd\x07d\u05BA\nd\fdd\u05BD",
  "\vdddeeeeff",
  "ff\u05C8\nffffff\x07f\u05CF\n",
  "f\fff\u05D2\vffffff\u05D8\n",
  "fff\u05DB\nfggg\u05DF\ngh",
  "hhhhhhhhhh",
  "hhhhhh\u05F1\nhh\u05F3\nh",
  "iiii\x07i\u05F9\ni\fii\u05FC\vi",
  "iijjjjj\u0604\njjj",
  "jjjj\u060B\njkkkkk",
  "k\x07k\u0613\nk\fkk\u0616\vkkk\x07k\u061A",
  "\nk\fkk\u061D\vkkkk\x07k\u0622\nk\fk",
  "k\u0625\vkk\u0627\nkkkk\x07k\u062C\nk",
  "\fkk\u062F\vkll\x07l\u0633\nl\fll\u0636",
  "\vll\u0638\nlmmmm\u063D\nmm",
  "\x07m\u0640\nm\fmm\u0643\vmmmm\u0647\n",
  "mnnnnnnnn\u0650\nn",
  "n\u0652\nnooo\u0656\noooo",
  "o\u065B\no\x07o\u065D\no\foo\u0660\vooo\u0663",
  "\noppp\u0667\npppqq",
  "qq\x07q\u066F\nq\fqq\u0672\vqqq",
  "qqqqq\x07q\u067B\nq\fqq\u067E\v",
  "qqq\x07q\u0682\nq\fqq\u0685\vqq\u0687",
  "\nqrrr\u068B\nrssst",
  "ttt\u0693\ntuuuu\u0698\nu",
  "vvvvwww\x07w\u06A1\nw\fw",
  "w\u06A4\vwx\x07x\u06A7\nx\fxx\u06AA\vxx",
  "xx\u06AE\nxx\x07x\u06B1\nx\fxx\u06B4\v",
  "xxx\x07x\u06B8\nx\fxx\u06BB\vxy",
  "yzzzz\x07z\u06C3\nz\fzz\u06C6\v",
  "zzz{{{{\u06CD\n{{{",
  "{\u06D1\n{{\u06D3\n{|||||",
  "|\u06DA\n|}}}\u06DE\n}}}}",
  "\xC4\xD4~\b\n\f",
  ' "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd',
  "fhjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90",
  "\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8",
  "\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0",
  "\xC2\xC4\xC6\xC8\xCA\xCC\xCE\xD0\xD2\xD4\xD6\xD8",
  "\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8\xEA\xEC\xEE\xF0",
  "\xF2\xF4\xF6\xF8**",
  "EHIJ((>>5C\x82\x82",
  "fi\\]jkoohiZ[",
  "ab``ccYYpzfg__{{\n",
  "\x07\x07\n\n",
  "''\u07A9\u010C\u0111",
  "\u0118\b\u0131",
  "\n\u0138\f\u0144",
  "\u0148\u014A",
  "\u015D\u016B",
  "\u0179\u0181",
  "\u0193\u019E",
  "\u01A8 \u01AF",
  '"\u01BA$\u01C3',
  "&\u01D8(\u01E4",
  "*\u01E6,\u01F8",
  ".\u01FC0\u01FE2\u0201",
  "4\u02046\u020C",
  "8\u0218:\u0222",
  "<\u0224>\u022F",
  "@\u023DB\u0248",
  "D\u024DF\u0256H\u0269",
  "J\u0271L\u0276",
  "N\u0280P\u0282",
  "R\u0292T\u02AC",
  "V\u02AEX\u02B6",
  "Z\u02C6\\\u02DE^\u02E3",
  "`\u02ECb\u02F9",
  "d\u0304f\u030A",
  "h\u0319j\u031B",
  "l\u031Dn\u0324",
  "p\u032Dr\u0337t\u033F",
  "v\u0346x\u0348",
  "z\u0358|\u035D",
  "~\u036E\x80\u0388",
  "\x82\u038C\x84\u038E",
  "\x86\u0394\x88\u0396",
  "\x8A\u039A\x8C\u03A0",
  "\x8E\u03CD\x90\u03CF",
  "\x92\u03D1\x94\u03DD",
  "\x96\u03E3\x98\u03EB",
  "\x9A\u03EE\x9C\u03F7",
  "\x9E\u0405\xA0\u040A",
  "\xA2\u0417\xA4\u0425",
  "\xA6\u0498\xA8\u049A",
  "\xAA\u04A7\xAC\u04AF",
  "\xAE\u04B2\xB0\u04B9",
  "\xB2\u04D2\xB4\u04D5",
  "\xB6\u04E9\xB8\u04F7",
  "\xBA\u04FB\xBC\u0500",
  "\xBE\u050B\xC0\u050F",
  "\xC2\u052A\xC4\u0559",
  "\xC6\u05B4\xC8\u05C0",
  "\xCA\u05DA\xCC\u05DE",
  "\xCE\u05F2\xD0\u05F4",
  "\xD2\u060A\xD4\u0626",
  "\xD6\u0637\xD8\u063C",
  "\xDA\u0651\xDC\u0662",
  "\xDE\u0664\xE0\u066A",
  "\xE2\u0688\xE4\u068C",
  "\xE6\u0692\xE8\u0697",
  "\xEA\u0699\xEC\u069D",
  "\xEE\u06A8\xF0\u06BC",
  "\xF2\u06BE\xF4\u06D2",
  "\xF6\u06D9\xF8\u06DB",
  "\xFA\xFC\xFB\xFA",
  "\xFB\xFC\xFC\u0100",
  "\xFD\xFF\xFE\xFD",
  "\xFF\u0102\u0100\xFE",
  "\u0100\u0101\u0101\u0106",
  "\u0102\u0100\u0103\u0105\b",
  "\u0104\u0103\u0105\u0108",
  "\u0106\u0104\u0106\u0107",
  "\u0107\u010D\u0108\u0106",
  "\u0109\u010A\x8AF\u010A\u010B\x07",
  "\u010B\u010D\u010C\xFB",
  "\u010C\u0109\u010D",
  "\u010E\u0110p9\u010F\u010E",
  "\u0110\u0113\u0111\u010F",
  "\u0111\u0112\u0112\u0114",
  '\u0113\u0111\u0114\u0115\x07"',
  "\u0115\u0116f4\u0116\u0117\x07V\u0117",
  "\u0118\u011A\x07\x1B\u0119",
  "\u011B\x07(\u011A\u0119\u011A",
  "\u011B\u011B\u011C\u011C",
  "\u011Ff4\u011D\u011E\x07X\u011E\u0120\x07",
  "j\u011F\u011D\u011F\u0120",
  "\u0120\u0121\u0121\u0122\x07",
  "V\u0122\x07\u0123\u0125",
  "\f\x07\u0124\u0123\u0125\u0128",
  "\u0126\u0124\u0126\u0127",
  "\u0127\u012E\u0128\u0126",
  "\u0129\u012F	\u012A\u012F",
  "\r\u012B\u012F \u012C\u012Fz>",
  "\u012D\u012F\x92J\u012E\u0129",
  "\u012E\u012A\u012E\u012B",
  "\u012E\u012C\u012E\u012D",
  "\u012F\u0132\u0130\u0132\x07V",
  "\u0131\u0126\u0131\u0130",
  "\u0132	\u0133\u0139\f\x07\u0134",
  "\u0139\x07 \u0135\u0139\x07,\u0136\u0139",
  "\x070\u0137\u0139\x073\u0138\u0133",
  "\u0138\u0134\u0138\u0135",
  "\u0138\u0136\u0138\u0137",
  "\u0139\v\u013A\u0145",
  "p9\u013B\u0145\x07%\u013C\u0145\x07$",
  "\u013D\u0145\x07#\u013E\u0145\x07(\u013F",
  "\u0145\x07\u0140\u0145\x07\u0141",
  "\u0145\x07)\u0142\u0145\x07B\u0143\u0145",
  "\x07D\u0144\u013A\u0144\u013B",
  "\u0144\u013C\u0144\u013D",
  "\u0144\u013E\u0144\u013F",
  "\u0144\u0140\u0144\u0141",
  "\u0144\u0142\u0144\u0143",
  "\u0145\r\u0146\u0149",
  "\x07\u0147\u0149p9\u0148\u0146",
  "\u0148\u0147\u0149",
  "\u014A\u014B\x07\v\u014B\u014D",
  "\xA2R\u014C\u014E\n\u014D\u014C",
  "\u014D\u014E\u014E\u0151",
  "\u014F\u0150\x07\u0150\u0152\xEE",
  "x\u0151\u014F\u0151\u0152",
  "\u0152\u0155\u0153\u0154\x07",
  "\u0154\u0156\xECw\u0155\u0153",
  "\u0155\u0156\u0156\u0159",
  "\u0157\u0158\x07C\u0158\u015A\xEC",
  "w\u0159\u0157\u0159\u015A",
  '\u015A\u015B\u015B\u015C"',
  "\u015C\u015D\u015E\x07[",
  "\u015E\u0163\v\u015F\u0160\x07W",
  "\u0160\u0162\v\u0161\u015F",
  "\u0162\u0165\u0163\u0161",
  "\u0163\u0164\u0164\u0166",
  "\u0165\u0163\u0166\u0167\x07Z",
  "\u0167\u0168\u016Ap",
  "9\u0169\u0168\u016A\u016D",
  "\u016B\u0169\u016B\u016C",
  "\u016C\u016E\u016D\u016B",
  "\u016E\u0177\xA2R\u016F\u0173\x07",
  "\u0170\u0172p9\u0171\u0170",
  "\u0172\u0175\u0173\u0171",
  "\u0173\u0174\u0174\u0176",
  "\u0175\u0173\u0176\u0178\f",
  "\u0177\u016F\u0177\u0178",
  "\u0178\u0179\u017E\xEEx",
  "\u017A\u017B\x07l\u017B\u017D\xEEx",
  "\u017C\u017A\u017D\u0180",
  "\u017E\u017C\u017E\u017F",
  "\u017F\u0180\u017E",
  "\u0181\u0182\x07\u0182\u0185\xA2R",
  "\u0183\u0184\x07\u0184\u0186\xECw",
  "\u0185\u0183\u0185\u0186",
  "\u0186\u0187\u0187\u0189\x07R",
  "\u0188\u018A\u0189\u0188",
  "\u0189\u018A\u018A\u018C",
  "\u018B\u018D\x07W\u018C\u018B",
  "\u018C\u018D\u018D\u018F",
  "\u018E\u0190\u018F\u018E",
  "\u018F\u0190\u0190\u0191",
  "\u0191\u0192\x07S\u0192",
  "\u0193\u0198\u0194\u0195\x07W",
  "\u0195\u0197\u0196\u0194",
  "\u0197\u019A\u0198\u0196",
  "\u0198\u0199\u0199\x1B",
  "\u019A\u0198\u019B\u019Dp9\u019C",
  "\u019B\u019D\u01A0\u019E",
  "\u019C\u019E\u019F\u019F",
  "\u01A1\u01A0\u019E\u01A1",
  "\u01A3\xA2R\u01A2\u01A4\xF8}\u01A3\u01A2",
  "\u01A3\u01A4\u01A4\u01A6",
  '\u01A5\u01A7"\u01A6\u01A5',
  "\u01A6\u01A7\u01A7",
  "\u01A8\u01AC\x07V\u01A9\u01AB",
  "&\u01AA\u01A9\u01AB\u01AE",
  "\u01AC\u01AA\u01AC\u01AD",
  "\u01AD\u01AE\u01AC",
  "\u01AF\u01B0\x07\u01B0\u01B2",
  "\xA2R\u01B1\u01B3\n\u01B2\u01B1",
  "\u01B2\u01B3\u01B3\u01B6",
  "\u01B4\u01B5\x07\u01B5\u01B7",
  "\xECw\u01B6\u01B4\u01B6\u01B7",
  "\u01B7\u01B8\u01B8\u01B9",
  "$\u01B9!\u01BA\u01BE\x07R",
  "\u01BB\u01BD&\u01BC\u01BB",
  "\u01BD\u01C0\u01BE\u01BC",
  "\u01BE\u01BF\u01BF\u01C1",
  "\u01C0\u01BE\u01C1\u01C2\x07S",
  "\u01C2#\u01C3\u01C7\x07R",
  "\u01C4\u01C68\u01C5\u01C4",
  "\u01C6\u01C9\u01C7\u01C5",
  "\u01C7\u01C8\u01C8\u01CA",
  "\u01C9\u01C7\u01CA\u01CB\x07S",
  "\u01CB%\u01CC\u01D9\x07V\u01CD",
  "\u01CF\x07(\u01CE\u01CD\u01CE",
  "\u01CF\u01CF\u01D0\u01D0",
  "\u01D9\x9CO\u01D1\u01D3\n\u01D2\u01D1",
  "\u01D3\u01D6\u01D4\u01D2",
  "\u01D4\u01D5\u01D5\u01D7",
  "\u01D6\u01D4\u01D7\u01D9",
  "(\u01D8\u01CC\u01D8\u01CE",
  "\u01D8\u01D4\u01D9'",
  "\u01DA\u01E5*\u01DB\u01E5",
  "0\u01DC\u01E56\u01DD\u01E5",
  "4\x1B\u01DE\u01E52\u01DF\u01E5 ",
  "\u01E0\u01E5z>\u01E1\u01E5	\u01E2",
  "\u01E5\r\u01E3\u01E5\x92J\u01E4\u01DA",
  "\u01E4\u01DB\u01E4\u01DC",
  "\u01E4\u01DD\u01E4\u01DE",
  "\u01E4\u01DF\u01E4\u01E0",
  "\u01E4\u01E1\u01E4\u01E2",
  "\u01E4\u01E3\u01E5)",
  "\u01E6\u01E7.\u01E7\u01E8",
  "\xA2R\u01E8\u01EDX-\u01E9\u01EA\x07T",
  "\u01EA\u01EC\x07U\u01EB\u01E9",
  "\u01EC\u01EF\u01ED\u01EB",
  "\u01ED\u01EE\u01EE\u01F2",
  "\u01EF\u01ED\u01F0\u01F1\x07/",
  "\u01F1\u01F3V,\u01F2\u01F0",
  "\u01F2\u01F3\u01F3\u01F4",
  "\u01F4\u01F5,\u01F5+\u01F6",
  "\u01F9\x9CO\u01F7\u01F9\x07V\u01F8\u01F6",
  "\u01F8\u01F7\u01F9-",
  "\u01FA\u01FD\xEEx\u01FB\u01FD",
  "\x072\u01FC\u01FA\u01FC\u01FB",
  "\u01FD/\u01FE\u01FF",
  "\n\u01FF\u0200*\u02001",
  "\u0201\u0202\n\u0202\u02034\x1B",
  "\u02033\u0204\u0205\xA2R",
  "\u0205\u0208X-\u0206\u0207\x07/\u0207\u0209",
  "V,\u0208\u0206\u0208\u0209",
  "\u0209\u020A\u020A\u020B",
  "\x9CO\u020B5\u020C\u020D\xEE",
  "x\u020D\u020EH%\u020E\u020F\x07V\u020F",
  "7\u0210\u0212\n\u0211\u0210",
  "\u0212\u0215\u0213\u0211",
  "\u0213\u0214\u0214\u0216",
  "\u0215\u0213\u0216\u0219",
  ":\u0217\u0219\x07V\u0218\u0213",
  "\u0218\u0217\u02199",
  "\u021A\u0223<\u021B\u0223",
  "@!\u021C\u0223D#\u021D\u0223 \u021E",
  "\u0223z>\u021F\u0223	\u0220\u0223",
  "\r\u0221\u0223\x92J\u0222\u021A",
  "\u0222\u021B\u0222\u021C",
  "\u0222\u021D\u0222\u021E",
  "\u0222\u021F\u0222\u0220",
  "\u0222\u0221\u0223;",
  "\u0224\u0225\xEEx\u0225\u022A> ",
  "\u0226\u0227\x07W\u0227\u0229> \u0228\u0226",
  "\u0229\u022C\u022A\u0228",
  "\u022A\u022B\u022B\u022D",
  "\u022C\u022A\u022D\u022E",
  "\x07V\u022E=\u022F\u0234",
  "\xA2R\u0230\u0231\x07T\u0231\u0233\x07U",
  "\u0232\u0230\u0233\u0236",
  "\u0234\u0232\u0234\u0235",
  "\u0235\u0237\u0236\u0234",
  "\u0237\u0238\x07Y\u0238\u0239N(\u0239",
  '?\u023A\u023CB"\u023B\u023A',
  "\u023C\u023F\u023D\u023B",
  "\u023D\u023E\u023E\u0240",
  "\u023F\u023D\u0240\u0241",
  "F$\u0241A\u0242\u0249p9\u0243",
  "\u0249\x07%\u0244\u0249\x07\u0245",
  "\u0249\x07\u0246\u0249\x07(\u0247",
  "\u0249\x07)\u0248\u0242\u0248",
  "\u0243\u0248\u0244\u0248",
  "\u0245\u0248\u0246\u0248",
  "\u0247\u0249C\u024A",
  '\u024CB"\u024B\u024A\u024C\u024F',
  "\u024D\u024B\u024D\u024E",
  "\u024E\u0250\u024F\u024D",
  "\u0250\u0251\n\u0251\u0252",
  "F$\u0252E\u0253\u0255p9",
  "\u0254\u0253\u0255\u0258",
  "\u0256\u0254\u0256\u0257",
  "\u0257\u0259\u0258\u0256",
  "\u0259\u025A.\u025A\u025B\xA2R\u025B",
  "\u0260X-\u025C\u025D\x07T\u025D\u025F\x07",
  "U\u025E\u025C\u025F\u0262",
  "\u0260\u025E\u0260\u0261",
  "\u0261\u0265\u0262\u0260",
  "\u0263\u0264\x07/\u0264\u0266",
  "V,\u0265\u0263\u0265\u0266",
  "\u0266\u0267\u0267\u0268,",
  "\u0268G\u0269\u026EJ&",
  "\u026A\u026B\x07W\u026B\u026DJ&\u026C\u026A",
  "\u026D\u0270\u026E\u026C",
  "\u026E\u026F\u026FI",
  "\u0270\u026E\u0271\u0274",
  "L'\u0272\u0273\x07Y\u0273\u0275N(",
  "\u0274\u0272\u0274\u0275",
  "\u0275K\u0276\u027B\xA2R\u0277",
  "\u0278\x07T\u0278\u027A\x07U\u0279\u0277",
  "\u027A\u027D\u027B\u0279",
  "\u027B\u027C\u027CM",
  "\u027D\u027B\u027E\u0281",
  "P)\u027F\u0281\xC4c\u0280\u027E",
  "\u0280\u027F\u0281O",
  "\u0282\u028E\x07R\u0283\u0288N(",
  "\u0284\u0285\x07W\u0285\u0287N(\u0286\u0284",
  "\u0287\u028A\u0288\u0286",
  "\u0288\u0289\u0289\u028C",
  "\u028A\u0288\u028B\u028D",
  "\x07W\u028C\u028B\u028C\u028D",
  "\u028D\u028F\u028E\u0283",
  "\u028E\u028F\u028F\u0290",
  "\u0290\u0291\x07S\u0291Q",
  "\u0292\u0294\xA2R\u0293\u0295",
  "\xF2z\u0294\u0293\u0294\u0295",
  "\u0295\u029D\u0296\u0297\x07",
  "X\u0297\u0299\xA2R\u0298\u029A\xF2",
  "z\u0299\u0298\u0299\u029A",
  "\u029A\u029C\u029B\u0296",
  "\u029C\u029F\u029D\u029B",
  "\u029D\u029E\u029ES",
  "\u029F\u029D\u02A0\u02AD\xEE",
  "x\u02A1\u02A3p9\u02A2\u02A1",
  "\u02A3\u02A6\u02A4\u02A2",
  "\u02A4\u02A5\u02A5\u02A7",
  "\u02A6\u02A4\u02A7\u02AA\x07^",
  "\u02A8\u02A9	\u02A9\u02AB\xEEx\u02AA",
  "\u02A8\u02AA\u02AB\u02AB",
  "\u02AD\u02AC\u02A0\u02AC",
  "\u02A4\u02ADU\u02AE",
  "\u02B3f4\u02AF\u02B0\x07W\u02B0\u02B2",
  "f4\u02B1\u02AF\u02B2\u02B5",
  "\u02B3\u02B1\u02B3\u02B4",
  "\u02B4W\u02B5\u02B3",
  "\u02B6\u02C2\x07P\u02B7\u02B9Z.",
  "\u02B8\u02B7\u02B8\u02B9",
  "\u02B9\u02C3\u02BA\u02BDZ.\u02BB",
  "\u02BC\x07W\u02BC\u02BE\\/\u02BD\u02BB",
  "\u02BD\u02BE\u02BE\u02C3",
  "\u02BF\u02C1\\/\u02C0\u02BF",
  "\u02C0\u02C1\u02C1\u02C3",
  "\u02C2\u02B8\u02C2\u02BA",
  "\u02C2\u02C0\u02C3\u02C4",
  "\u02C4\u02C5\x07Q\u02C5Y",
  "\u02C6\u02CC\xEEx\u02C7\u02C8\xA2R",
  "\u02C8\u02C9\x07X\u02C9\u02CB",
  "\u02CA\u02C7\u02CB\u02CE",
  "\u02CC\u02CA\u02CC\u02CD",
  "\u02CD\u02CF\u02CE\u02CC",
  "\u02CF\u02D0\x07-\u02D0[\u02D1",
  "\u02D6^0\u02D2\u02D3\x07W\u02D3\u02D5",
  "^0\u02D4\u02D2\u02D5\u02D8",
  "\u02D6\u02D4\u02D6\u02D7",
  "\u02D7\u02DB\u02D8\u02D6",
  "\u02D9\u02DA\x07W\u02DA\u02DC`1",
  "\u02DB\u02D9\u02DB\u02DC",
  "\u02DC\u02DF\u02DD\u02DF`1\u02DE",
  "\u02D1\u02DE\u02DD\u02DF",
  "]\u02E0\u02E2\b\u02E1\u02E0",
  "\u02E2\u02E5\u02E3\u02E1",
  "\u02E3\u02E4\u02E4\u02E6",
  "\u02E5\u02E3\u02E6\u02E7",
  "\xEEx\u02E7\u02E8L'\u02E8_",
  "\u02E9\u02EB\b\u02EA\u02E9",
  "\u02EB\u02EE\u02EC\u02EA",
  "\u02EC\u02ED\u02ED\u02EF",
  "\u02EE\u02EC\u02EF\u02F3\xEEx",
  "\u02F0\u02F2p9\u02F1\u02F0",
  "\u02F2\u02F5\u02F3\u02F1",
  "\u02F3\u02F4\u02F4\u02F6",
  "\u02F5\u02F3\u02F6\u02F7\x07~",
  "\u02F7\u02F8L'\u02F8a\u02F9\u02FE",
  "d3\u02FA\u02FB\x07W\u02FB\u02FDd3",
  "\u02FC\u02FA\u02FD\u0300",
  "\u02FE\u02FC\u02FE\u02FF",
  "\u02FFc\u0300\u02FE",
  "\u0301\u0303\b\u0302\u0301",
  "\u0303\u0306\u0304\u0302",
  "\u0304\u0305\u0305\u0307",
  "\u0306\u0304\u0307\u0308\x07?",
  "\u0308\u0309\xA2R\u0309e\u030A",
  "\u030F\xA2R\u030B\u030C\x07X\u030C\u030E",
  "\xA2R\u030D\u030B\u030E\u0311",
  "\u030F\u030D\u030F\u0310",
  "\u0310g\u0311\u030F",
  "\u0312\u031Aj6\u0313\u031A",
  "l7\u0314\u031A\x07L\u0315\u031A\x07M",
  "\u0316\u031A\x07K\u0317\u031A\x07O\u0318",
  "\u031A\x07N\u0319\u0312\u0319",
  "\u0313\u0319\u0314\u0319",
  "\u0315\u0319\u0316\u0319",
  "\u0317\u0319\u0318\u031A",
  "i\u031B\u031C	\u031Ck",
  "\u031D\u031E	\u031Em",
  "\u031F\u0320\xA2R\u0320\u0321\x07X",
  "\u0321\u0323\u0322\u031F",
  "\u0323\u0326\u0324\u0322",
  "\u0324\u0325\u0325\u0327",
  "\u0326\u0324\u0327\u0328\x07}",
  "\u0328\u0329\xA2R\u0329o",
  "\u032A\u032B\x07}\u032B\u032Ef4\u032C\u032E",
  "n8\u032D\u032A\u032D\u032C",
  "\u032E\u0335\u032F\u0332\x07",
  "P\u0330\u0333r:\u0331\u0333v<\u0332",
  "\u0330\u0332\u0331\u0332",
  "\u0333\u0333\u0334\u0334",
  "\u0336\x07Q\u0335\u032F\u0335",
  "\u0336\u0336q\u0337",
  "\u033Ct;\u0338\u0339\x07W\u0339\u033B",
  "t;\u033A\u0338\u033B\u033E",
  "\u033C\u033A\u033C\u033D",
  "\u033Ds\u033E\u033C",
  "\u033F\u0340\xA2R\u0340\u0341\x07Y",
  "\u0341\u0342v<\u0342u\u0343",
  "\u0347\xC4c\u0344\u0347p9\u0345\u0347",
  "x=\u0346\u0343\u0346\u0344",
  "\u0346\u0345\u0347w",
  "\u0348\u0351\x07R\u0349\u034Ev<",
  "\u034A\u034B\x07W\u034B\u034Dv<\u034C\u034A",
  "\u034D\u0350\u034E\u034C",
  "\u034E\u034F\u034F\u0352",
  "\u0350\u034E\u0351\u0349",
  "\u0351\u0352\u0352\u0354",
  "\u0353\u0355\x07W\u0354\u0353",
  "\u0354\u0355\u0355\u0356",
  "\u0356\u0357\x07S\u0357y",
  "\u0358\u0359\x07}\u0359\u035A\x07",
  "\u035A\u035B\xA2R\u035B\u035C",
  "|?\u035C{\u035D\u0361\x07R",
  "\u035E\u0360~@\u035F\u035E\u0360",
  "\u0363\u0361\u035F\u0361",
  "\u0362\u0362\u0364\u0363",
  "\u0361\u0364\u0365\x07S\u0365",
  "}\u0366\u0368\n\u0367\u0366",
  "\u0368\u036B\u0369\u0367",
  "\u0369\u036A\u036A\u036C",
  "\u036B\u0369\u036C\u036F",
  "\x80A\u036D\u036F\x07V\u036E\u0369",
  "\u036E\u036D\u036F\x7F",
  "\u0370\u0371\xEEx\u0371\u0372",
  "\x82B\u0372\u0373\x07V\u0373\u0389",
  "\u0374\u0376	\u0375\u0377\x07V",
  "\u0376\u0375\u0376\u0377",
  "\u0377\u0389\u0378\u037A ",
  "\u0379\u037B\x07V\u037A\u0379",
  "\u037A\u037B\u037B\u0389",
  "\u037C\u037E\r\u037D\u037F\x07V",
  "\u037E\u037D\u037E\u037F",
  "\u037F\u0389\u0380\u0382z>\u0381",
  "\u0383\x07V\u0382\u0381\u0382",
  "\u0383\u0383\u0389\u0384",
  "\u0386\x92J\u0385\u0387\x07V\u0386\u0385",
  "\u0386\u0387\u0387\u0389",
  "\u0388\u0370\u0388\u0374",
  "\u0388\u0378\u0388\u037C",
  "\u0388\u0380\u0388\u0384",
  "\u0389\x81\u038A\u038D",
  "\x84C\u038B\u038D\x86D\u038C\u038A",
  "\u038C\u038B\u038D\x83",
  "\u038E\u038F\xA2R\u038F\u0390\x07",
  "P\u0390\u0392\x07Q\u0391\u0393\x88",
  "E\u0392\u0391\u0392\u0393",
  "\u0393\x85\u0394\u0395H",
  "%\u0395\x87\u0396\u0397\x07",
  "\u0397\u0398v<\u0398\x89",
  "\u0399\u039B\x076\u039A\u0399",
  "\u039A\u039B\u039B\u039C",
  "\u039C\u039D\x075\u039D\u039Ef4\u039E",
  "\u039F\x8CG\u039F\x8B\u03A0",
  "\u03A4\x07R\u03A1\u03A3\x8EH\u03A2\u03A1",
  "\u03A3\u03A6\u03A4\u03A2",
  "\u03A4\u03A5\u03A5\u03A7",
  "\u03A6\u03A4\u03A7\u03A8",
  "\x07S\u03A8\x8D\u03A9\u03AD",
  "\x077\u03AA\u03AC\x90I\u03AB\u03AA",
  "\u03AC\u03AF\u03AD\u03AB",
  "\u03AD\u03AE\u03AE\u03B0",
  "\u03AF\u03AD\u03B0\u03B1",
  "f4\u03B1\u03B2\x07V\u03B2\u03CE",
  "\u03B3\u03B4\x078\u03B4\u03B7f4\u03B5",
  "\u03B6\x07:\u03B6\u03B8f4\u03B7\u03B5",
  "\u03B7\u03B8\u03B8\u03B9",
  "\u03B9\u03BA\x07V\u03BA\u03CE",
  "\u03BB\u03BC\x079\u03BC\u03BF",
  "f4\u03BD\u03BE\x07:\u03BE\u03C0f4\u03BF",
  "\u03BD\u03BF\u03C0\u03C0",
  "\u03C1\u03C1\u03C2\x07V\u03C2",
  "\u03CE\u03C3\u03C4\x07;\u03C4",
  "\u03C5f4\u03C5\u03C6\x07V\u03C6\u03CE",
  "\u03C7\u03C8\x07<\u03C8\u03C9",
  "f4\u03C9\u03CA\x07=\u03CA\u03CBf4\u03CB",
  "\u03CC\x07V\u03CC\u03CE\u03CD",
  "\u03A9\u03CD\u03B3\u03CD",
  "\u03BB\u03CD\u03C3\u03CD",
  "\u03C7\u03CE\x8F\u03CF",
  "\u03D0	\u03D0\x91\u03D1",
  "\u03D2\x07A\u03D2\u03D4\xA2R\u03D3\u03D5",
  "\n\u03D4\u03D3\u03D4\u03D5",
  "\u03D5\u03D6\u03D6\u03D9",
  "\x94K\u03D7\u03D8\x07\u03D8\u03DA",
  "\xECw\u03D9\u03D7\u03D9\u03DA",
  "\u03DA\u03DB\u03DB\u03DC",
  "\x9AN\u03DC\x93\u03DD\u03DF",
  "\x07P\u03DE\u03E0\x96L\u03DF\u03DE",
  "\u03DF\u03E0\u03E0\u03E1",
  "\u03E1\u03E2\x07Q\u03E2\x95",
  "\u03E3\u03E8\x98M\u03E4\u03E5\x07",
  "W\u03E5\u03E7\x98M\u03E6\u03E4",
  "\u03E7\u03EA\u03E8\u03E6",
  "\u03E8\u03E9\u03E9\x97",
  "\u03EA\u03E8\u03EB\u03EC\xEE",
  "x\u03EC\u03ED\xA2R\u03ED\x99",
  "\u03EE\u03F2\x07R\u03EF\u03F1&",
  "\u03F0\u03EF\u03F1\u03F4",
  "\u03F2\u03F0\u03F2\u03F3",
  "\u03F3\u03F5\u03F4\u03F2",
  "\u03F5\u03F6\x07S\u03F6\x9B",
  "\u03F7\u03FB\x07R\u03F8\u03FA\x9EP\u03F9",
  "\u03F8\u03FA\u03FD\u03FB",
  "\u03F9\u03FB\u03FC\u03FC",
  "\u03FE\u03FD\u03FB\u03FE",
  "\u03FF\x07S\u03FF\x9D\u0400",
  "\u0401\xA0Q\u0401\u0402\x07V\u0402\u0406",
  "\u0403\u0406\xA6T\u0404\u0406",
  "\xA4S\u0405\u0400\u0405\u0403",
  "\u0405\u0404\u0406\x9F",
  "\u0407\u0409\b\u0408\u0407",
  "\u0409\u040C\u040A\u0408",
  "\u040A\u040B\u040B\u0415",
  "\u040C\u040A\u040D\u040E",
  "\xEEx\u040E\u040FH%\u040F\u0416",
  "\u0410\u0411\x07?\u0411\u0412\xA2",
  "R\u0412\u0413\x07Y\u0413\u0414\xC4c",
  "\u0414\u0416\u0415\u040D",
  "\u0415\u0410\u0416\xA1",
  "\u0417\u0418	\u0418\xA3",
  "\u0419\u041B\f\x07\u041A\u0419",
  "\u041B\u041E\u041C\u041A",
  "\u041C\u041D\u041D\u0422",
  "\u041E\u041C\u041F\u0423	",
  "\u0420\u0423 \u0421\u0423\x92J\u0422",
  "\u041F\u0422\u0420\u0422",
  "\u0421\u0423\u0426\u0424",
  "\u0426\x07V\u0425\u041C\u0425",
  "\u0424\u0426\xA5\u0427",
  "\u0499\x9CO\u0428\u0429\x07\u0429",
  "\u042C\xC4c\u042A\u042B\x07_\u042B\u042D",
  "\xC4c\u042C\u042A\u042C\u042D",
  "\u042D\u042E\u042E\u042F",
  "\x07V\u042F\u0499\u0430\u0431",
  "\x07\u0431\u0432\xBE`\u0432\u0435",
  "\xA6T\u0433\u0434\x07\u0434\u0436",
  "\xA6T\u0435\u0433\u0435\u0436",
  "\u0436\u0499\u0437\u0438",
  "\x07\u0438\u0439\x07P\u0439\u043A",
  "\xB8]\u043A\u043B\x07Q\u043B\u043C",
  "\xA6T\u043C\u0499\u043D\u043E\x07",
  "4\u043E\u043F\xBE`\u043F\u0440\xA6",
  "T\u0440\u0499\u0441\u0442\x07",
  "\u0442\u0443\xA6T\u0443\u0444\x074",
  "\u0444\u0445\xBE`\u0445\u0446\x07V",
  "\u0446\u0499\u0447\u0448\x071",
  "\u0448\u0452\x9CO\u0449\u044B\xA8U\u044A",
  "\u0449\u044B\u044C\u044C",
  "\u044A\u044C\u044D\u044D",
  "\u044F\u044E\u0450\xACW\u044F",
  "\u044E\u044F\u0450\u0450",
  "\u0453\u0451\u0453\xACW\u0452",
  "\u044A\u0452\u0451\u0453",
  "\u0499\u0454\u0455\x071\u0455",
  "\u0456\xAEX\u0456\u045A\x9CO\u0457\u0459",
  "\xA8U\u0458\u0457\u0459\u045C",
  "\u045A\u0458\u045A\u045B",
  "\u045B\u045E\u045C\u045A",
  "\u045D\u045F\xACW\u045E\u045D",
  "\u045E\u045F\u045F\u0499",
  "\u0460\u0461\x07+\u0461\u0462",
  "\xBE`\u0462\u0466\x07R\u0463\u0465",
  "\xB4[\u0464\u0463\u0465\u0468",
  "\u0466\u0464\u0466\u0467",
  "\u0467\u046C\u0468\u0466",
  "\u0469\u046B\xB6\\\u046A\u0469",
  "\u046B\u046E\u046C\u046A",
  "\u046C\u046D\u046D\u046F",
  "\u046E\u046C\u046F\u0470\x07",
  "S\u0470\u0499\u0471\u0472\x07",
  ",\u0472\u0473\xBE`\u0473\u0474\x9C",
  "O\u0474\u0499\u0475\u0477\x07&",
  "\u0476\u0478\xC4c\u0477\u0476",
  "\u0477\u0478\u0478\u0479",
  "\u0479\u0499\x07V\u047A\u047B\x07.",
  "\u047B\u047C\xC4c\u047C\u047D\x07V\u047D",
  "\u0499\u047E\u0480\x07\u047F",
  "\u0481\xA2R\u0480\u047F\u0480",
  "\u0481\u0481\u0482\u0482",
  "\u0499\x07V\u0483\u0485\x07\r\u0484\u0486",
  "\xA2R\u0485\u0484\u0485\u0486",
  "\u0486\u0487\u0487\u0499",
  "\x07V\u0488\u0489\x07@\u0489\u048A",
  "\xC4c\u048A\u048B\x07V\u048B\u0499",
  "\u048C\u0499\x07V\u048D\u048E\xC4",
  "c\u048E\u048F\x07V\u048F\u0499",
  "\u0490\u0492\xD0i\u0491\u0493\x07V",
  "\u0492\u0491\u0492\u0493",
  "\u0493\u0499\u0494\u0495\xA2R",
  "\u0495\u0496\x07_\u0496\u0497\xA6T\u0497",
  "\u0499\u0498\u0427\u0498",
  "\u0428\u0498\u0430\u0498",
  "\u0437\u0498\u043D\u0498",
  "\u0441\u0498\u0447\u0498",
  "\u0454\u0498\u0460\u0498",
  "\u0471\u0498\u0475\u0498",
  "\u047A\u0498\u047E\u0498",
  "\u0483\u0498\u0488\u0498",
  "\u048C\u0498\u048D\u0498",
  "\u0490\u0498\u0494\u0499",
  "\xA7\u049A\u049B\x07	\u049B",
  "\u049F\x07P\u049C\u049E\b\u049D\u049C",
  "\u049E\u04A1\u049F\u049D",
  "\u049F\u04A0\u04A0\u04A2",
  "\u04A1\u049F\u04A2\u04A3",
  "\xAAV\u04A3\u04A4\xA2R\u04A4\u04A5\x07",
  "Q\u04A5\u04A6\x9CO\u04A6\xA9",
  "\u04A7\u04ACf4\u04A8\u04A9\x07m",
  "\u04A9\u04ABf4\u04AA\u04A8\u04AB",
  "\u04AE\u04AC\u04AA\u04AC",
  "\u04AD\u04AD\xAB\u04AE",
  "\u04AC\u04AF\u04B0\x07\u04B0",
  "\u04B1\x9CO\u04B1\xAD\u04B2",
  "\u04B3\x07P\u04B3\u04B5\xB0Y\u04B4\u04B6",
  "\x07V\u04B5\u04B4\u04B5\u04B6",
  "\u04B6\u04B7\u04B7\u04B8",
  "\x07Q\u04B8\xAF\u04B9\u04BE",
  "\xB2Z\u04BA\u04BB\x07V\u04BB\u04BD",
  "\xB2Z\u04BC\u04BA\u04BD\u04C0",
  "\u04BE\u04BC\u04BE\u04BF",
  "\u04BF\xB1\u04C0\u04BE",
  "\u04C1\u04C3\b\u04C2\u04C1",
  "\u04C3\u04C6\u04C4\u04C2",
  "\u04C4\u04C5\u04C5\u04CC",
  "\u04C6\u04C4\u04C7\u04C8",
  "R*\u04C8\u04C9L'\u04C9\u04CD",
  "\u04CA\u04CB\x07?\u04CB\u04CD\xA2R\u04CC",
  "\u04C7\u04CC\u04CA\u04CD",
  "\u04CE\u04CE\u04CF\x07Y\u04CF",
  "\u04D0\xC4c\u04D0\u04D3\u04D1",
  "\u04D3\xA2R\u04D2\u04C4\u04D2",
  "\u04D1\u04D3\xB3\u04D4",
  "\u04D6\xB6\\\u04D5\u04D4\u04D6",
  "\u04D7\u04D7\u04D5\u04D7",
  "\u04D8\u04D8\u04DA\u04D9",
  "\u04DB\x9EP\u04DA\u04D9\u04DB",
  "\u04DC\u04DC\u04DA\u04DC",
  "\u04DD\u04DD\xB5\u04DE",
  "\u04E4\x07\b\u04DF\u04E5\xC4c\u04E0\u04E5",
  "\x07\x82\u04E1\u04E2\xEEx\u04E2\u04E3",
  "\xA2R\u04E3\u04E5\u04E4\u04DF",
  "\u04E4\u04E0\u04E4\u04E1",
  "\u04E5\u04E6\u04E6\u04EA",
  "\x07_\u04E7\u04E8\x07\u04E8\u04EA",
  "\x07_\u04E9\u04DE\u04E9\u04E7",
  "\u04EA\xB7\u04EB\u04F8",
  "\xBC_\u04EC\u04EE\xBA^\u04ED\u04EC",
  "\u04ED\u04EE\u04EE\u04EF",
  "\u04EF\u04F1\x07V\u04F0\u04F2",
  "\xC4c\u04F1\u04F0\u04F1\u04F2",
  "\u04F2\u04F3\u04F3\u04F5\x07",
  "V\u04F4\u04F6\xC0a\u04F5\u04F4",
  "\u04F5\u04F6\u04F6\u04F8",
  "\u04F7\u04EB\u04F7\u04ED",
  "\u04F8\xB9\u04F9\u04FC\xA0",
  "Q\u04FA\u04FC\xC0a\u04FB\u04F9",
  "\u04FB\u04FA\u04FC\xBB",
  "\u04FD\u04FF\b\u04FE\u04FD",
  "\u04FF\u0502\u0500\u04FE",
  "\u0500\u0501\u0501\u0505",
  "\u0502\u0500\u0503\u0506\xEEx",
  "\u0504\u0506\x07?\u0505\u0503",
  "\u0505\u0504\u0506\u0507",
  "\u0507\u0508L'\u0508\u0509\x07_\u0509",
  "\u050A\xC4c\u050A\xBD\u050B",
  "\u050C\x07P\u050C\u050D\xC4c\u050D\u050E",
  "\x07Q\u050E\xBF\u050F\u0514",
  "\xC4c\u0510\u0511\x07W\u0511\u0513",
  "\xC4c\u0512\u0510\u0513\u0516",
  "\u0514\u0512\u0514\u0515",
  "\u0515\xC1\u0516\u0514",
  "\u0517\u0518\xA2R\u0518\u051A\x07",
  "P\u0519\u051B\xC0a\u051A\u0519",
  "\u051A\u051B\u051B\u051C",
  "\u051C\u051D\x07Q\u051D\u052B",
  "\u051E\u051F\x07-\u051F\u0521\x07P",
  "\u0520\u0522\xC0a\u0521\u0520",
  "\u0521\u0522\u0522\u0523",
  "\u0523\u052B\x07Q\u0524\u0525\x07*",
  "\u0525\u0527\x07P\u0526\u0528\xC0a\u0527",
  "\u0526\u0527\u0528\u0528",
  "\u0529\u0529\u052B\x07Q\u052A",
  "\u0517\u052A\u051E\u052A",
  "\u0524\u052B\xC3\u052C",
  "\u052D\bc\u052D\u055A\xCEh\u052E\u055A",
  "\xC2b\u052F\u0530\x07!\u0530\u055A\xDA",
  "n\u0531\u0535\x07P\u0532\u0534p9\u0533",
  "\u0532\u0534\u0537\u0535",
  "\u0533\u0535\u0536\u0536",
  "\u0538\u0537\u0535\u0538",
  "\u053D\xEEx\u0539\u053A\x07l\u053A\u053C",
  "\xEEx\u053B\u0539\u053C\u053F",
  "\u053D\u053B\u053D\u053E",
  "\u053E\u0540\u053F\u053D",
  "\u0540\u0541\x07Q\u0541\u0542",
  "\xC4c\u0542\u055A\u0543\u0544",
  "	\x07\u0544\u055A\xC4c\u0545\u0546	\b",
  "\u0546\u055A\xC4c\u0547\u055A\xC8",
  "e\u0548\u055A\xD0i\u0549\u054A\xEEx",
  "\u054A\u0550\x07|\u054B\u054D\xF2z\u054C",
  "\u054B\u054C\u054D\u054D",
  "\u054E\u054E\u0551\xA2R\u054F",
  "\u0551\x07!\u0550\u054C\u0550",
  "\u054F\u0551\u055A\u0552",
  "\u0553\xD8m\u0553\u0555\x07|\u0554\u0556",
  "\xF2z\u0555\u0554\u0555\u0556",
  "\u0556\u0557\u0557\u0558",
  "\x07!\u0558\u055A\u0559\u052C",
  "\u0559\u052E\u0559\u052F",
  "\u0559\u0531\u0559\u0543",
  "\u0559\u0545\u0559\u0547",
  "\u0559\u0548\u0559\u0549",
  "\u0559\u0552\u055A\u05AE",
  "\u055B\u055C\f\u055C\u055D",
  "		\u055D\u05AD\xC4c\u055E\u055F\f",
  "\u055F\u0560	\n\u0560\u05AD\xC4c",
  "\u0561\u0569\f\u0562\u0563\x07[\u0563",
  "\u056A\x07[\u0564\u0565\x07Z\u0565\u0566",
  "\x07Z\u0566\u056A\x07Z\u0567\u0568\x07",
  "Z\u0568\u056A\x07Z\u0569\u0562",
  "\u0569\u0564\u0569\u0567",
  "\u056A\u056B\u056B\u05AD\xC4",
  "c\u056C\u056D\f\u056D\u056E	\v",
  "\u056E\u05AD\xC4c\u056F\u0570\f\u0570",
  "\u0571	\f\u0571\u05AD\xC4c\u0572\u0573\f",
  "\u0573\u0574\x07l\u0574\u05AD",
  "\xC4c\u0575\u0576\f\r\u0576\u0577\x07n",
  "\u0577\u05AD\xC4c\u0578\u0579\f\f\u0579\u057A",
  "\x07m\u057A\u05AD\xC4c\r\u057B\u057C\f\v",
  "\u057C\u057D\x07d\u057D\u05AD\xC4c\f\u057E",
  "\u057F\f\n\u057F\u0580\x07e\u0580\u05AD",
  "\xC4c\v\u0581\u0582\f	\u0582\u0583\x07^",
  "\u0583\u0584\xC4c\u0584\u0585\x07_\u0585",
  "\u0586\xC4c	\u0586\u05AD\u0587\u0588",
  "\f\b\u0588\u0589	\r\u0589\u05AD\xC4",
  "c\b\u058A\u058B\f\u058B\u0597\x07X\u058C",
  "\u0598\xA2R\u058D\u0598\xC2b\u058E\u0598",
  "\x07-\u058F\u0591\x07!\u0590\u0592",
  "\xEAv\u0591\u0590\u0591\u0592",
  "\u0592\u0593\u0593\u0598",
  "\xDEp\u0594\u0595\x07*\u0595\u0598\xF4",
  "{\u0596\u0598\xE4s\u0597\u058C",
  "\u0597\u058D\u0597\u058E",
  "\u0597\u058F\u0597\u0594",
  "\u0597\u0596\u0598\u05AD",
  "\u0599\u059A\f\x1B\u059A\u059B\x07T",
  "\u059B\u059C\xC4c\u059C\u059D\x07U\u059D",
  "\u05AD\u059E\u059F\f\u059F",
  "\u05AD	\u05A0\u05A1\f\u05A1\u05A4",
  "\x07\u05A2\u05A5\xEEx\u05A3\u05A5",
  "\xC6d\u05A4\u05A2\u05A4\u05A3",
  "\u05A5\u05AD\u05A6\u05A7",
  "\f\u05A7\u05A9\x07|\u05A8\u05AA",
  "\xF2z\u05A9\u05A8\u05A9\u05AA",
  "\u05AA\u05AB\u05AB\u05AD",
  "\xA2R\u05AC\u055B\u05AC\u055E",
  "\u05AC\u0561\u05AC\u056C",
  "\u05AC\u056F\u05AC\u0572",
  "\u05AC\u0575\u05AC\u0578",
  "\u05AC\u057B\u05AC\u057E",
  "\u05AC\u0581\u05AC\u0587",
  "\u05AC\u058A\u05AC\u0599",
  "\u05AC\u059E\u05AC\u05A0",
  "\u05AC\u05A6\u05AD\u05B0",
  "\u05AE\u05AC\u05AE\u05AF",
  "\u05AF\xC5\u05B0\u05AE",
  "\u05B1\u05B3\b\u05B2\u05B1",
  "\u05B3\u05B6\u05B4\u05B2",
  "\u05B4\u05B5\u05B5\u05B7",
  "\u05B6\u05B4\u05B7\u05BB",
  "\xEEx\u05B8\u05BAp9\u05B9\u05B8",
  "\u05BA\u05BD\u05BB\u05B9",
  "\u05BB\u05BC\u05BC\u05BE",
  "\u05BD\u05BB\u05BE\u05BF\xA2R",
  "\u05BF\xC7\u05C0\u05C1\xCAf",
  "\u05C1\u05C2\x07{\u05C2\u05C3\xCCg",
  "\u05C3\xC9\u05C4\u05DB\xA2R",
  "\u05C5\u05C7\x07P\u05C6\u05C8\\/\u05C7\u05C6",
  "\u05C7\u05C8\u05C8\u05C9",
  "\u05C9\u05DB\x07Q\u05CA\u05CB",
  "\x07P\u05CB\u05D0\xA2R\u05CC\u05CD\x07",
  "W\u05CD\u05CF\xA2R\u05CE\u05CC",
  "\u05CF\u05D2\u05D0\u05CE",
  "\u05D0\u05D1\u05D1\u05D3",
  "\u05D2\u05D0\u05D3\u05D4\x07Q",
  "\u05D4\u05DB\u05D5\u05D7\x07P",
  "\u05D6\u05D8b2\u05D7\u05D6",
  "\u05D7\u05D8\u05D8\u05D9",
  "\u05D9\u05DB\x07Q\u05DA\u05C4",
  "\u05DA\u05C5\u05DA\u05CA",
  "\u05DA\u05D5\u05DB\xCB",
  "\u05DC\u05DF\xC4c\u05DD\u05DF\x9CO",
  "\u05DE\u05DC\u05DE\u05DD",
  "\u05DF\xCD\u05E0\u05E1\x07P",
  "\u05E1\u05E2\xC4c\u05E2\u05E3\x07Q\u05E3",
  "\u05F3\u05E4\u05F3\x07-\u05E5",
  "\u05F3\x07*\u05E6\u05F3h5\u05E7\u05F3",
  "\xA2R\u05E8\u05E9.\u05E9\u05EA\x07X",
  "\u05EA\u05EB\x07\v\u05EB\u05F3",
  "\u05EC\u05F0\xEAv\u05ED\u05F1\xF6|",
  "\u05EE\u05EF\x07-\u05EF\u05F1\xF8}\u05F0",
  "\u05ED\u05F0\u05EE\u05F1",
  "\u05F3\u05F2\u05E0\u05F2",
  "\u05E4\u05F2\u05E5\u05F2",
  "\u05E6\u05F2\u05E7\u05F2",
  "\u05E8\u05F2\u05EC\u05F3",
  "\xCF\u05F4\u05F5\x07+\u05F5",
  "\u05F6\xBE`\u05F6\u05FA\x07R\u05F7\u05F9",
  "\xD2j\u05F8\u05F7\u05F9\u05FC",
  "\u05FA\u05F8\u05FA\u05FB",
  "\u05FB\u05FD\u05FC\u05FA",
  "\u05FD\u05FE\x07S\u05FE\xD1",
  "\u05FF\u0603\x07\b\u0600\u0604",
  "\xC0a\u0601\u0604\x07O\u0602\u0604",
  "\xD4k\u0603\u0600\u0603\u0601",
  "\u0603\u0602\u0604\u0605",
  "\u0605\u0606	\u0606\u060B",
  "\xD6l\u0607\u0608\x07\u0608\u0609	",
  "\u0609\u060B\xD6l\u060A\u05FF",
  "\u060A\u0607\u060B\xD3",
  "\u060C\u060D\bk\u060D\u060E\x07P",
  "\u060E\u060F\xD4k\u060F\u0610\x07Q\u0610",
  "\u0627\u0611\u0613\b\u0612",
  "\u0611\u0613\u0616\u0614",
  "\u0612\u0614\u0615\u0615",
  "\u0617\u0616\u0614\u0617",
  "\u061B\xEEx\u0618\u061Ap9\u0619\u0618",
  "\u061A\u061D\u061B\u0619",
  "\u061B\u061C\u061C\u061E",
  "\u061D\u061B\u061E\u0623",
  "\xA2R\u061F\u0620\x07d\u0620\u0622\xC4",
  "c\u0621\u061F\u0622\u0625",
  "\u0623\u0621\u0623\u0624",
  "\u0624\u0627\u0625\u0623",
  "\u0626\u060C\u0626\u0614",
  "\u0627\u062D\u0628\u0629\f",
  "\u0629\u062A\x07d\u062A\u062C\xC4",
  "c\u062B\u0628\u062C\u062F",
  "\u062D\u062B\u062D\u062E",
  "\u062E\xD5\u062F\u062D",
  "\u0630\u0638\x9CO\u0631\u0633\x9E",
  "P\u0632\u0631\u0633\u0636",
  "\u0634\u0632\u0634\u0635",
  "\u0635\u0638\u0636\u0634",
  "\u0637\u0630\u0637\u0634",
  "\u0638\xD7\u0639\u063AR",
  "*\u063A\u063B\x07X\u063B\u063D",
  "\u063C\u0639\u063C\u063D",
  "\u063D\u0641\u063E\u0640p9",
  "\u063F\u063E\u0640\u0643",
  "\u0641\u063F\u0641\u0642",
  "\u0642\u0644\u0643\u0641",
  "\u0644\u0646\xA2R\u0645\u0647\xF2z\u0646",
  "\u0645\u0646\u0647\u0647",
  "\xD9\u0648\u0649\xEAv\u0649",
  "\u064A\xDCo\u064A\u064B\xE2r\u064B\u0652",
  "\u064C\u064F\xDCo\u064D\u0650",
  "\xE0q\u064E\u0650\xE2r\u064F\u064D",
  "\u064F\u064E\u0650\u0652",
  "\u0651\u0648\u0651\u064C",
  "\u0652\xDB\u0653\u0655",
  "\xA2R\u0654\u0656\xE6t\u0655\u0654",
  "\u0655\u0656\u0656\u065E",
  "\u0657\u0658\x07X\u0658\u065A\xA2",
  "R\u0659\u065B\xE6t\u065A\u0659",
  "\u065A\u065B\u065B\u065D",
  "\u065C\u0657\u065D\u0660",
  "\u065E\u065C\u065E\u065F",
  "\u065F\u0663\u0660\u065E",
  "\u0661\u0663\xF0y\u0662\u0653",
  "\u0662\u0661\u0663\xDD",
  "\u0664\u0666\xA2R\u0665\u0667\xE8u",
  "\u0666\u0665\u0666\u0667",
  "\u0667\u0668\u0668\u0669\xE2r",
  "\u0669\xDF\u066A\u0686\x07T",
  "\u066B\u0670\x07U\u066C\u066D\x07T\u066D",
  "\u066F\x07U\u066E\u066C\u066F",
  "\u0672\u0670\u066E\u0670",
  "\u0671\u0671\u0673\u0672",
  "\u0670\u0673\u0687P)\u0674\u0675",
  "\xC4c\u0675\u067C\x07U\u0676\u0677\x07",
  "T\u0677\u0678\xC4c\u0678\u0679\x07U",
  "\u0679\u067B\u067A\u0676",
  "\u067B\u067E\u067C\u067A",
  "\u067C\u067D\u067D\u0683",
  "\u067E\u067C\u067F\u0680\x07T",
  "\u0680\u0682\x07U\u0681\u067F",
  "\u0682\u0685\u0683\u0681",
  "\u0683\u0684\u0684\u0687",
  "\u0685\u0683\u0686\u066B",
  "\u0686\u0674\u0687\xE1",
  '\u0688\u068A\xF8}\u0689\u068B"',
  "\u068A\u0689\u068A\u068B",
  "\u068B\xE3\u068C\u068D\xEAv",
  "\u068D\u068E\xF6|\u068E\xE5",
  "\u068F\u0690\x07[\u0690\u0693\x07Z\u0691",
  "\u0693\xF2z\u0692\u068F\u0692",
  "\u0691\u0693\xE7\u0694",
  "\u0695\x07[\u0695\u0698\x07Z\u0696\u0698",
  "\xEAv\u0697\u0694\u0697\u0696",
  "\u0698\xE9\u0699\u069A",
  "\x07[\u069A\u069B\xECw\u069B\u069C\x07",
  "Z\u069C\xEB\u069D\u06A2",
  "\xEEx\u069E\u069F\x07W\u069F\u06A1\xEE",
  "x\u06A0\u069E\u06A1\u06A4",
  "\u06A2\u06A0\u06A2\u06A3",
  "\u06A3\xED\u06A4\u06A2",
  "\u06A5\u06A7p9\u06A6\u06A5",
  "\u06A7\u06AA\u06A8\u06A6",
  "\u06A8\u06A9\u06A9\u06AD",
  "\u06AA\u06A8\u06AB\u06AER*",
  "\u06AC\u06AE\xF0y\u06AD\u06AB",
  "\u06AD\u06AC\u06AE\u06B9",
  "\u06AF\u06B1p9\u06B0\u06AF\u06B1",
  "\u06B4\u06B2\u06B0\u06B2",
  "\u06B3\u06B3\u06B5\u06B4",
  "\u06B2\u06B5\u06B6\x07T\u06B6",
  "\u06B8\x07U\u06B7\u06B2\u06B8",
  "\u06BB\u06B9\u06B7\u06B9",
  "\u06BA\u06BA\xEF\u06BB",
  "\u06B9\u06BC\u06BD	\u06BD",
  "\xF1\u06BE\u06BF\x07[\u06BF",
  "\u06C4T+\u06C0\u06C1\x07W\u06C1\u06C3",
  "T+\u06C2\u06C0\u06C3\u06C6",
  "\u06C4\u06C2\u06C4\u06C5",
  "\u06C5\u06C7\u06C6\u06C4",
  "\u06C7\u06C8\x07Z\u06C8\xF3",
  "\u06C9\u06D3\xF8}\u06CA\u06CC\x07X",
  "\u06CB\u06CD\xF2z\u06CC\u06CB",
  "\u06CC\u06CD\u06CD\u06CE",
  "\u06CE\u06D0\xA2R\u06CF\u06D1\xF8}",
  "\u06D0\u06CF\u06D0\u06D1",
  "\u06D1\u06D3\u06D2\u06C9",
  "\u06D2\u06CA\u06D3\xF5",
  "\u06D4\u06D5\x07*\u06D5\u06DA\xF4{\u06D6",
  "\u06D7\xA2R\u06D7\u06D8\xF8}\u06D8\u06DA",
  "\u06D9\u06D4\u06D9\u06D6",
  "\u06DA\xF7\u06DB\u06DD",
  "\x07P\u06DC\u06DE\xC0a\u06DD\u06DC",
  "\u06DD\u06DE\u06DE\u06DF",
  "\u06DF\u06E0\x07Q\u06E0\xF9",
  "\xDD\xFB\u0100\u0106\u010C\u0111\u011A\u011F\u0126",
  "\u012E\u0131\u0138\u0144\u0148\u014D\u0151\u0155\u0159\u0163\u016B\u0173",
  "\u0177\u017E\u0185\u0189\u018C\u018F\u0198\u019E\u01A3\u01A6\u01AC\u01B2",
  "\u01B6\u01BE\u01C7\u01CE\u01D4\u01D8\u01E4\u01ED\u01F2\u01F8\u01FC\u0208",
  "\u0213\u0218\u0222\u022A\u0234\u023D\u0248\u024D\u0256\u0260\u0265\u026E",
  "\u0274\u027B\u0280\u0288\u028C\u028E\u0294\u0299\u029D\u02A4\u02AA\u02AC",
  "\u02B3\u02B8\u02BD\u02C0\u02C2\u02CC\u02D6\u02DB\u02DE\u02E3\u02EC\u02F3",
  "\u02FE\u0304\u030F\u0319\u0324\u032D\u0332\u0335\u033C\u0346\u034E\u0351",
  "\u0354\u0361\u0369\u036E\u0376\u037A\u037E\u0382\u0386\u0388\u038C\u0392",
  "\u039A\u03A4\u03AD\u03B7\u03BF\u03CD\u03D4\u03D9\u03DF\u03E8\u03F2\u03FB",
  "\u0405\u040A\u0415\u041C\u0422\u0425\u042C\u0435\u044C\u044F\u0452\u045A",
  "\u045E\u0466\u046C\u0477\u0480\u0485\u0492\u0498\u049F\u04AC\u04B5\u04BE",
  "\u04C4\u04CC\u04D2\u04D7\u04DC\u04E4\u04E9\u04ED\u04F1\u04F5\u04F7\u04FB",
  "\u0500\u0505\u0514\u051A\u0521\u0527\u052A\u0535\u053D\u054C\u0550\u0555",
  "\u0559\u0569\u0591\u0597\u05A4\u05A9\u05AC\u05AE\u05B4\u05BB\u05C7\u05D0",
  "\u05D7\u05DA\u05DE\u05F0\u05F2\u05FA\u0603\u060A\u0614\u061B\u0623\u0626",
  "\u062D\u0634\u0637\u063C\u0641\u0646\u064F\u0651\u0655\u065A\u065E\u0662",
  "\u0666\u0670\u067C\u0683\u0686\u068A\u0692\u0697\u06A2\u06A8\u06AD\u06B2",
  "\u06B9\u06C4\u06CC\u06D0\u06D2\u06D9\u06DD"
].join("");
const atn = new import_antlr4.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new import_antlr4.default.dfa.DFA(ds, index));
const sharedContextCache = new import_antlr4.default.PredictionContextCache();
class JavaParser extends import_antlr4.default.Parser {
  static grammarFileName = "JavaParser.g4";
  static literalNames = [
    null,
    "'abstract'",
    "'assert'",
    "'boolean'",
    "'break'",
    "'byte'",
    "'case'",
    "'catch'",
    "'char'",
    "'class'",
    "'const'",
    "'continue'",
    "'default'",
    "'do'",
    "'double'",
    "'else'",
    "'enum'",
    "'extends'",
    "'final'",
    "'finally'",
    "'float'",
    "'for'",
    "'if'",
    "'goto'",
    "'implements'",
    "'import'",
    "'instanceof'",
    "'int'",
    "'interface'",
    "'long'",
    "'native'",
    "'new'",
    "'package'",
    "'private'",
    "'protected'",
    "'public'",
    "'return'",
    "'short'",
    "'static'",
    "'strictfp'",
    "'super'",
    "'switch'",
    "'synchronized'",
    "'this'",
    "'throw'",
    "'throws'",
    "'transient'",
    "'try'",
    "'void'",
    "'volatile'",
    "'while'",
    "'module'",
    "'open'",
    "'requires'",
    "'exports'",
    "'opens'",
    "'to'",
    "'uses'",
    "'provides'",
    "'with'",
    "'transitive'",
    "'var'",
    "'yield'",
    "'record'",
    "'sealed'",
    "'permits'",
    "'non-sealed'",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    "'null'",
    "'('",
    "')'",
    "'{'",
    "'}'",
    "'['",
    "']'",
    "';'",
    "','",
    "'.'",
    "'='",
    "'>'",
    "'<'",
    "'!'",
    "'~'",
    "'?'",
    "':'",
    "'=='",
    "'<='",
    "'>='",
    "'!='",
    "'&&'",
    "'||'",
    "'++'",
    "'--'",
    "'+'",
    "'-'",
    "'*'",
    "'/'",
    "'&'",
    "'|'",
    "'^'",
    "'%'",
    "'+='",
    "'-='",
    "'*='",
    "'/='",
    "'&='",
    "'|='",
    "'^='",
    "'%='",
    "'<<='",
    "'>>='",
    "'>>>='",
    "'->'",
    "'::'",
    "'@'",
    "'...'"
  ];
  static symbolicNames = [
    null,
    "ABSTRACT",
    "ASSERT",
    "BOOLEAN",
    "BREAK",
    "BYTE",
    "CASE",
    "CATCH",
    "CHAR",
    "CLASS",
    "CONST",
    "CONTINUE",
    "DEFAULT",
    "DO",
    "DOUBLE",
    "ELSE",
    "ENUM",
    "EXTENDS",
    "FINAL",
    "FINALLY",
    "FLOAT",
    "FOR",
    "IF",
    "GOTO",
    "IMPLEMENTS",
    "IMPORT",
    "INSTANCEOF",
    "INT",
    "INTERFACE",
    "LONG",
    "NATIVE",
    "NEW",
    "PACKAGE",
    "PRIVATE",
    "PROTECTED",
    "PUBLIC",
    "RETURN",
    "SHORT",
    "STATIC",
    "STRICTFP",
    "SUPER",
    "SWITCH",
    "SYNCHRONIZED",
    "THIS",
    "THROW",
    "THROWS",
    "TRANSIENT",
    "TRY",
    "VOID",
    "VOLATILE",
    "WHILE",
    "MODULE",
    "OPEN",
    "REQUIRES",
    "EXPORTS",
    "OPENS",
    "TO",
    "USES",
    "PROVIDES",
    "WITH",
    "TRANSITIVE",
    "VAR",
    "YIELD",
    "RECORD",
    "SEALED",
    "PERMITS",
    "NON_SEALED",
    "DECIMAL_LITERAL",
    "HEX_LITERAL",
    "OCT_LITERAL",
    "BINARY_LITERAL",
    "FLOAT_LITERAL",
    "HEX_FLOAT_LITERAL",
    "BOOL_LITERAL",
    "CHAR_LITERAL",
    "STRING_LITERAL",
    "TEXT_BLOCK",
    "NULL_LITERAL",
    "LPAREN",
    "RPAREN",
    "LBRACE",
    "RBRACE",
    "LBRACK",
    "RBRACK",
    "SEMI",
    "COMMA",
    "DOT",
    "ASSIGN",
    "GT",
    "LT",
    "BANG",
    "TILDE",
    "QUESTION",
    "COLON",
    "EQUAL",
    "LE",
    "GE",
    "NOTEQUAL",
    "AND",
    "OR",
    "INC",
    "DEC",
    "ADD",
    "SUB",
    "MUL",
    "DIV",
    "BITAND",
    "BITOR",
    "CARET",
    "MOD",
    "ADD_ASSIGN",
    "SUB_ASSIGN",
    "MUL_ASSIGN",
    "DIV_ASSIGN",
    "AND_ASSIGN",
    "OR_ASSIGN",
    "XOR_ASSIGN",
    "MOD_ASSIGN",
    "LSHIFT_ASSIGN",
    "RSHIFT_ASSIGN",
    "URSHIFT_ASSIGN",
    "ARROW",
    "COLONCOLON",
    "AT",
    "ELLIPSIS",
    "WS",
    "COMMENT",
    "LINE_COMMENT",
    "IDENTIFIER"
  ];
  static ruleNames = [
    "compilationUnit",
    "packageDeclaration",
    "importDeclaration",
    "typeDeclaration",
    "modifier",
    "classOrInterfaceModifier",
    "variableModifier",
    "classDeclaration",
    "typeParameters",
    "typeParameter",
    "typeBound",
    "enumDeclaration",
    "enumConstants",
    "enumConstant",
    "enumBodyDeclarations",
    "interfaceDeclaration",
    "classBody",
    "interfaceBody",
    "classBodyDeclaration",
    "memberDeclaration",
    "methodDeclaration",
    "methodBody",
    "typeTypeOrVoid",
    "genericMethodDeclaration",
    "genericConstructorDeclaration",
    "constructorDeclaration",
    "fieldDeclaration",
    "interfaceBodyDeclaration",
    "interfaceMemberDeclaration",
    "constDeclaration",
    "constantDeclarator",
    "interfaceMethodDeclaration",
    "interfaceMethodModifier",
    "genericInterfaceMethodDeclaration",
    "interfaceCommonBodyDeclaration",
    "variableDeclarators",
    "variableDeclarator",
    "variableDeclaratorId",
    "variableInitializer",
    "arrayInitializer",
    "classOrInterfaceType",
    "typeArgument",
    "qualifiedNameList",
    "formalParameters",
    "receiverParameter",
    "formalParameterList",
    "formalParameter",
    "lastFormalParameter",
    "lambdaLVTIList",
    "lambdaLVTIParameter",
    "qualifiedName",
    "literal",
    "integerLiteral",
    "floatLiteral",
    "altAnnotationQualifiedName",
    "annotation",
    "elementValuePairs",
    "elementValuePair",
    "elementValue",
    "elementValueArrayInitializer",
    "annotationTypeDeclaration",
    "annotationTypeBody",
    "annotationTypeElementDeclaration",
    "annotationTypeElementRest",
    "annotationMethodOrConstantRest",
    "annotationMethodRest",
    "annotationConstantRest",
    "defaultValue",
    "moduleDeclaration",
    "moduleBody",
    "moduleDirective",
    "requiresModifier",
    "recordDeclaration",
    "recordHeader",
    "recordComponentList",
    "recordComponent",
    "recordBody",
    "block",
    "blockStatement",
    "localVariableDeclaration",
    "identifier",
    "localTypeDeclaration",
    "statement",
    "catchClause",
    "catchType",
    "finallyBlock",
    "resourceSpecification",
    "resources",
    "resource",
    "switchBlockStatementGroup",
    "switchLabel",
    "forControl",
    "forInit",
    "enhancedForControl",
    "parExpression",
    "expressionList",
    "methodCall",
    "expression",
    "pattern",
    "lambdaExpression",
    "lambdaParameters",
    "lambdaBody",
    "primary",
    "switchExpression",
    "switchLabeledRule",
    "guardedPattern",
    "switchRuleOutcome",
    "classType",
    "creator",
    "createdName",
    "innerCreator",
    "arrayCreatorRest",
    "classCreatorRest",
    "explicitGenericInvocation",
    "typeArgumentsOrDiamond",
    "nonWildcardTypeArgumentsOrDiamond",
    "nonWildcardTypeArguments",
    "typeList",
    "typeType",
    "primitiveType",
    "typeArguments",
    "superSuffix",
    "explicitGenericInvocationSuffix",
    "arguments"
  ];
  constructor(input) {
    super(input);
    this._interp = new import_antlr4.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = JavaParser.ruleNames;
    this.literalNames = JavaParser.literalNames;
    this.symbolicNames = JavaParser.symbolicNames;
  }
  get atn() {
    return atn;
  }
  sempred(localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 97:
        return this.expression_sempred(localctx, predIndex);
      case 105:
        return this.guardedPattern_sempred(localctx, predIndex);
      default:
        throw "No predicate with index:" + ruleIndex;
    }
  }
  expression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.precpred(this._ctx, 18);
      case 1:
        return this.precpred(this._ctx, 17);
      case 2:
        return this.precpred(this._ctx, 16);
      case 3:
        return this.precpred(this._ctx, 15);
      case 4:
        return this.precpred(this._ctx, 13);
      case 5:
        return this.precpred(this._ctx, 12);
      case 6:
        return this.precpred(this._ctx, 11);
      case 7:
        return this.precpred(this._ctx, 10);
      case 8:
        return this.precpred(this._ctx, 9);
      case 9:
        return this.precpred(this._ctx, 8);
      case 10:
        return this.precpred(this._ctx, 7);
      case 11:
        return this.precpred(this._ctx, 6);
      case 12:
        return this.precpred(this._ctx, 26);
      case 13:
        return this.precpred(this._ctx, 25);
      case 14:
        return this.precpred(this._ctx, 21);
      case 15:
        return this.precpred(this._ctx, 14);
      case 16:
        return this.precpred(this._ctx, 3);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  guardedPattern_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 17:
        return this.precpred(this._ctx, 1);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }
  compilationUnit() {
    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, JavaParser.RULE_compilationUnit);
    var _la = 0;
    try {
      this.state = 266;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 249;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
          if (la_ === 1) {
            this.state = 248;
            this.packageDeclaration();
          }
          this.state = 254;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === JavaParser.IMPORT) {
            this.state = 251;
            this.importDeclaration();
            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 260;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.ABSTRACT | 1 << JavaParser.CLASS | 1 << JavaParser.ENUM | 1 << JavaParser.FINAL | 1 << JavaParser.INTERFACE)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << JavaParser.PRIVATE - 33 | 1 << JavaParser.PROTECTED - 33 | 1 << JavaParser.PUBLIC - 33 | 1 << JavaParser.STATIC - 33 | 1 << JavaParser.STRICTFP - 33 | 1 << JavaParser.MODULE - 33 | 1 << JavaParser.OPEN - 33 | 1 << JavaParser.REQUIRES - 33 | 1 << JavaParser.EXPORTS - 33 | 1 << JavaParser.OPENS - 33 | 1 << JavaParser.TO - 33 | 1 << JavaParser.USES - 33 | 1 << JavaParser.PROVIDES - 33 | 1 << JavaParser.WITH - 33 | 1 << JavaParser.TRANSITIVE - 33 | 1 << JavaParser.VAR - 33 | 1 << JavaParser.YIELD - 33 | 1 << JavaParser.RECORD - 33 | 1 << JavaParser.SEALED - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << JavaParser.PERMITS - 65 | 1 << JavaParser.NON_SEALED - 65 | 1 << JavaParser.SEMI - 65)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
            this.state = 257;
            this.typeDeclaration();
            this.state = 262;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 263;
          this.moduleDeclaration();
          this.state = 264;
          this.match(JavaParser.EOF);
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  packageDeclaration() {
    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, JavaParser.RULE_packageDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 271;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
        this.state = 268;
        this.annotation();
        this.state = 273;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 274;
      this.match(JavaParser.PACKAGE);
      this.state = 275;
      this.qualifiedName();
      this.state = 276;
      this.match(JavaParser.SEMI);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  importDeclaration() {
    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, JavaParser.RULE_importDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 278;
      this.match(JavaParser.IMPORT);
      this.state = 280;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.STATIC) {
        this.state = 279;
        this.match(JavaParser.STATIC);
      }
      this.state = 282;
      this.qualifiedName();
      this.state = 285;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.DOT) {
        this.state = 283;
        this.match(JavaParser.DOT);
        this.state = 284;
        this.match(JavaParser.MUL);
      }
      this.state = 287;
      this.match(JavaParser.SEMI);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeDeclaration() {
    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, JavaParser.RULE_typeDeclaration);
    try {
      this.state = 303;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.ABSTRACT:
        case JavaParser.CLASS:
        case JavaParser.ENUM:
        case JavaParser.FINAL:
        case JavaParser.INTERFACE:
        case JavaParser.PRIVATE:
        case JavaParser.PROTECTED:
        case JavaParser.PUBLIC:
        case JavaParser.STATIC:
        case JavaParser.STRICTFP:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.NON_SEALED:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 292;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 289;
              this.classOrInterfaceModifier();
            }
            this.state = 294;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
          }
          this.state = 300;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case JavaParser.CLASS:
              this.state = 295;
              this.classDeclaration();
              break;
            case JavaParser.ENUM:
              this.state = 296;
              this.enumDeclaration();
              break;
            case JavaParser.INTERFACE:
              this.state = 297;
              this.interfaceDeclaration();
              break;
            case JavaParser.AT:
              this.state = 298;
              this.annotationTypeDeclaration();
              break;
            case JavaParser.RECORD:
              this.state = 299;
              this.recordDeclaration();
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
        case JavaParser.SEMI:
          this.enterOuterAlt(localctx, 2);
          this.state = 302;
          this.match(JavaParser.SEMI);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  modifier() {
    let localctx = new ModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, JavaParser.RULE_modifier);
    try {
      this.state = 310;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.ABSTRACT:
        case JavaParser.FINAL:
        case JavaParser.PRIVATE:
        case JavaParser.PROTECTED:
        case JavaParser.PUBLIC:
        case JavaParser.STATIC:
        case JavaParser.STRICTFP:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.NON_SEALED:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 305;
          this.classOrInterfaceModifier();
          break;
        case JavaParser.NATIVE:
          this.enterOuterAlt(localctx, 2);
          this.state = 306;
          this.match(JavaParser.NATIVE);
          break;
        case JavaParser.SYNCHRONIZED:
          this.enterOuterAlt(localctx, 3);
          this.state = 307;
          this.match(JavaParser.SYNCHRONIZED);
          break;
        case JavaParser.TRANSIENT:
          this.enterOuterAlt(localctx, 4);
          this.state = 308;
          this.match(JavaParser.TRANSIENT);
          break;
        case JavaParser.VOLATILE:
          this.enterOuterAlt(localctx, 5);
          this.state = 309;
          this.match(JavaParser.VOLATILE);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classOrInterfaceModifier() {
    let localctx = new ClassOrInterfaceModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, JavaParser.RULE_classOrInterfaceModifier);
    try {
      this.state = 322;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 11, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 312;
          this.annotation();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 313;
          this.match(JavaParser.PUBLIC);
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 314;
          this.match(JavaParser.PROTECTED);
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 315;
          this.match(JavaParser.PRIVATE);
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 316;
          this.match(JavaParser.STATIC);
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 317;
          this.match(JavaParser.ABSTRACT);
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 318;
          this.match(JavaParser.FINAL);
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 319;
          this.match(JavaParser.STRICTFP);
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 320;
          this.match(JavaParser.SEALED);
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 321;
          this.match(JavaParser.NON_SEALED);
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableModifier() {
    let localctx = new VariableModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, JavaParser.RULE_variableModifier);
    try {
      this.state = 326;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.FINAL:
          this.enterOuterAlt(localctx, 1);
          this.state = 324;
          this.match(JavaParser.FINAL);
          break;
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 2);
          this.state = 325;
          this.annotation();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classDeclaration() {
    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, JavaParser.RULE_classDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 328;
      this.match(JavaParser.CLASS);
      this.state = 329;
      this.identifier();
      this.state = 331;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.LT) {
        this.state = 330;
        this.typeParameters();
      }
      this.state = 335;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.EXTENDS) {
        this.state = 333;
        this.match(JavaParser.EXTENDS);
        this.state = 334;
        this.typeType();
      }
      this.state = 339;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.IMPLEMENTS) {
        this.state = 337;
        this.match(JavaParser.IMPLEMENTS);
        this.state = 338;
        this.typeList();
      }
      this.state = 343;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.PERMITS) {
        this.state = 341;
        this.match(JavaParser.PERMITS);
        this.state = 342;
        this.typeList();
      }
      this.state = 345;
      this.classBody();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeParameters() {
    let localctx = new TypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, JavaParser.RULE_typeParameters);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 347;
      this.match(JavaParser.LT);
      this.state = 348;
      this.typeParameter();
      this.state = 353;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.COMMA) {
        this.state = 349;
        this.match(JavaParser.COMMA);
        this.state = 350;
        this.typeParameter();
        this.state = 355;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 356;
      this.match(JavaParser.GT);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeParameter() {
    let localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, JavaParser.RULE_typeParameter);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 361;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 18, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 358;
          this.annotation();
        }
        this.state = 363;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 18, this._ctx);
      }
      this.state = 364;
      this.identifier();
      this.state = 373;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.EXTENDS) {
        this.state = 365;
        this.match(JavaParser.EXTENDS);
        this.state = 369;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 19, this._ctx);
        while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 366;
            this.annotation();
          }
          this.state = 371;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 19, this._ctx);
        }
        this.state = 372;
        this.typeBound();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeBound() {
    let localctx = new TypeBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, JavaParser.RULE_typeBound);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 375;
      this.typeType();
      this.state = 380;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.BITAND) {
        this.state = 376;
        this.match(JavaParser.BITAND);
        this.state = 377;
        this.typeType();
        this.state = 382;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumDeclaration() {
    let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, JavaParser.RULE_enumDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 383;
      this.match(JavaParser.ENUM);
      this.state = 384;
      this.identifier();
      this.state = 387;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.IMPLEMENTS) {
        this.state = 385;
        this.match(JavaParser.IMPLEMENTS);
        this.state = 386;
        this.typeList();
      }
      this.state = 389;
      this.match(JavaParser.LBRACE);
      this.state = 391;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
        this.state = 390;
        this.enumConstants();
      }
      this.state = 394;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.COMMA) {
        this.state = 393;
        this.match(JavaParser.COMMA);
      }
      this.state = 397;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.SEMI) {
        this.state = 396;
        this.enumBodyDeclarations();
      }
      this.state = 399;
      this.match(JavaParser.RBRACE);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumConstants() {
    let localctx = new EnumConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, JavaParser.RULE_enumConstants);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 401;
      this.enumConstant();
      this.state = 406;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 402;
          this.match(JavaParser.COMMA);
          this.state = 403;
          this.enumConstant();
        }
        this.state = 408;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumConstant() {
    let localctx = new EnumConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, JavaParser.RULE_enumConstant);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 412;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 27, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 409;
          this.annotation();
        }
        this.state = 414;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 27, this._ctx);
      }
      this.state = 415;
      this.identifier();
      this.state = 417;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.LPAREN) {
        this.state = 416;
        this.arguments();
      }
      this.state = 420;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.LBRACE) {
        this.state = 419;
        this.classBody();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enumBodyDeclarations() {
    let localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, JavaParser.RULE_enumBodyDeclarations);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 422;
      this.match(JavaParser.SEMI);
      this.state = 426;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.ABSTRACT | 1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.CLASS | 1 << JavaParser.DOUBLE | 1 << JavaParser.ENUM | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.INTERFACE | 1 << JavaParser.LONG | 1 << JavaParser.NATIVE)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << JavaParser.PRIVATE - 33 | 1 << JavaParser.PROTECTED - 33 | 1 << JavaParser.PUBLIC - 33 | 1 << JavaParser.SHORT - 33 | 1 << JavaParser.STATIC - 33 | 1 << JavaParser.STRICTFP - 33 | 1 << JavaParser.SYNCHRONIZED - 33 | 1 << JavaParser.TRANSIENT - 33 | 1 << JavaParser.VOID - 33 | 1 << JavaParser.VOLATILE - 33 | 1 << JavaParser.MODULE - 33 | 1 << JavaParser.OPEN - 33 | 1 << JavaParser.REQUIRES - 33 | 1 << JavaParser.EXPORTS - 33 | 1 << JavaParser.OPENS - 33 | 1 << JavaParser.TO - 33 | 1 << JavaParser.USES - 33 | 1 << JavaParser.PROVIDES - 33 | 1 << JavaParser.WITH - 33 | 1 << JavaParser.TRANSITIVE - 33 | 1 << JavaParser.VAR - 33 | 1 << JavaParser.YIELD - 33 | 1 << JavaParser.RECORD - 33 | 1 << JavaParser.SEALED - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << JavaParser.PERMITS - 65 | 1 << JavaParser.NON_SEALED - 65 | 1 << JavaParser.LBRACE - 65 | 1 << JavaParser.SEMI - 65 | 1 << JavaParser.LT - 65)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
        this.state = 423;
        this.classBodyDeclaration();
        this.state = 428;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  interfaceDeclaration() {
    let localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, JavaParser.RULE_interfaceDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 429;
      this.match(JavaParser.INTERFACE);
      this.state = 430;
      this.identifier();
      this.state = 432;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.LT) {
        this.state = 431;
        this.typeParameters();
      }
      this.state = 436;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.EXTENDS) {
        this.state = 434;
        this.match(JavaParser.EXTENDS);
        this.state = 435;
        this.typeList();
      }
      this.state = 438;
      this.interfaceBody();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classBody() {
    let localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, JavaParser.RULE_classBody);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 440;
      this.match(JavaParser.LBRACE);
      this.state = 444;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.ABSTRACT | 1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.CLASS | 1 << JavaParser.DOUBLE | 1 << JavaParser.ENUM | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.INTERFACE | 1 << JavaParser.LONG | 1 << JavaParser.NATIVE)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << JavaParser.PRIVATE - 33 | 1 << JavaParser.PROTECTED - 33 | 1 << JavaParser.PUBLIC - 33 | 1 << JavaParser.SHORT - 33 | 1 << JavaParser.STATIC - 33 | 1 << JavaParser.STRICTFP - 33 | 1 << JavaParser.SYNCHRONIZED - 33 | 1 << JavaParser.TRANSIENT - 33 | 1 << JavaParser.VOID - 33 | 1 << JavaParser.VOLATILE - 33 | 1 << JavaParser.MODULE - 33 | 1 << JavaParser.OPEN - 33 | 1 << JavaParser.REQUIRES - 33 | 1 << JavaParser.EXPORTS - 33 | 1 << JavaParser.OPENS - 33 | 1 << JavaParser.TO - 33 | 1 << JavaParser.USES - 33 | 1 << JavaParser.PROVIDES - 33 | 1 << JavaParser.WITH - 33 | 1 << JavaParser.TRANSITIVE - 33 | 1 << JavaParser.VAR - 33 | 1 << JavaParser.YIELD - 33 | 1 << JavaParser.RECORD - 33 | 1 << JavaParser.SEALED - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << JavaParser.PERMITS - 65 | 1 << JavaParser.NON_SEALED - 65 | 1 << JavaParser.LBRACE - 65 | 1 << JavaParser.SEMI - 65 | 1 << JavaParser.LT - 65)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
        this.state = 441;
        this.classBodyDeclaration();
        this.state = 446;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 447;
      this.match(JavaParser.RBRACE);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  interfaceBody() {
    let localctx = new InterfaceBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, JavaParser.RULE_interfaceBody);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 449;
      this.match(JavaParser.LBRACE);
      this.state = 453;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.ABSTRACT | 1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.CLASS | 1 << JavaParser.DEFAULT | 1 << JavaParser.DOUBLE | 1 << JavaParser.ENUM | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.INTERFACE | 1 << JavaParser.LONG | 1 << JavaParser.NATIVE)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << JavaParser.PRIVATE - 33 | 1 << JavaParser.PROTECTED - 33 | 1 << JavaParser.PUBLIC - 33 | 1 << JavaParser.SHORT - 33 | 1 << JavaParser.STATIC - 33 | 1 << JavaParser.STRICTFP - 33 | 1 << JavaParser.SYNCHRONIZED - 33 | 1 << JavaParser.TRANSIENT - 33 | 1 << JavaParser.VOID - 33 | 1 << JavaParser.VOLATILE - 33 | 1 << JavaParser.MODULE - 33 | 1 << JavaParser.OPEN - 33 | 1 << JavaParser.REQUIRES - 33 | 1 << JavaParser.EXPORTS - 33 | 1 << JavaParser.OPENS - 33 | 1 << JavaParser.TO - 33 | 1 << JavaParser.USES - 33 | 1 << JavaParser.PROVIDES - 33 | 1 << JavaParser.WITH - 33 | 1 << JavaParser.TRANSITIVE - 33 | 1 << JavaParser.VAR - 33 | 1 << JavaParser.YIELD - 33 | 1 << JavaParser.RECORD - 33 | 1 << JavaParser.SEALED - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << JavaParser.PERMITS - 65 | 1 << JavaParser.NON_SEALED - 65 | 1 << JavaParser.SEMI - 65 | 1 << JavaParser.LT - 65)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
        this.state = 450;
        this.interfaceBodyDeclaration();
        this.state = 455;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 456;
      this.match(JavaParser.RBRACE);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classBodyDeclaration() {
    let localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, JavaParser.RULE_classBodyDeclaration);
    var _la = 0;
    try {
      this.state = 470;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 37, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 458;
          this.match(JavaParser.SEMI);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 460;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.STATIC) {
            this.state = 459;
            this.match(JavaParser.STATIC);
          }
          this.state = 462;
          this.block();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 466;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 463;
              this.modifier();
            }
            this.state = 468;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
          }
          this.state = 469;
          this.memberDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  memberDeclaration() {
    let localctx = new MemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, JavaParser.RULE_memberDeclaration);
    try {
      this.state = 482;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 472;
          this.methodDeclaration();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 473;
          this.genericMethodDeclaration();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 474;
          this.fieldDeclaration();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 475;
          this.constructorDeclaration();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 476;
          this.genericConstructorDeclaration();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 477;
          this.interfaceDeclaration();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 478;
          this.annotationTypeDeclaration();
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 479;
          this.classDeclaration();
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 480;
          this.enumDeclaration();
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 481;
          this.recordDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  methodDeclaration() {
    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, JavaParser.RULE_methodDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 484;
      this.typeTypeOrVoid();
      this.state = 485;
      this.identifier();
      this.state = 486;
      this.formalParameters();
      this.state = 491;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.LBRACK) {
        this.state = 487;
        this.match(JavaParser.LBRACK);
        this.state = 488;
        this.match(JavaParser.RBRACK);
        this.state = 493;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 496;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.THROWS) {
        this.state = 494;
        this.match(JavaParser.THROWS);
        this.state = 495;
        this.qualifiedNameList();
      }
      this.state = 498;
      this.methodBody();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  methodBody() {
    let localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, JavaParser.RULE_methodBody);
    try {
      this.state = 502;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.LBRACE:
          this.enterOuterAlt(localctx, 1);
          this.state = 500;
          this.block();
          break;
        case JavaParser.SEMI:
          this.enterOuterAlt(localctx, 2);
          this.state = 501;
          this.match(JavaParser.SEMI);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeTypeOrVoid() {
    let localctx = new TypeTypeOrVoidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, JavaParser.RULE_typeTypeOrVoid);
    try {
      this.state = 506;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.BOOLEAN:
        case JavaParser.BYTE:
        case JavaParser.CHAR:
        case JavaParser.DOUBLE:
        case JavaParser.FLOAT:
        case JavaParser.INT:
        case JavaParser.LONG:
        case JavaParser.SHORT:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 504;
          this.typeType();
          break;
        case JavaParser.VOID:
          this.enterOuterAlt(localctx, 2);
          this.state = 505;
          this.match(JavaParser.VOID);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  genericMethodDeclaration() {
    let localctx = new GenericMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, JavaParser.RULE_genericMethodDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 508;
      this.typeParameters();
      this.state = 509;
      this.methodDeclaration();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  genericConstructorDeclaration() {
    let localctx = new GenericConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, JavaParser.RULE_genericConstructorDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 511;
      this.typeParameters();
      this.state = 512;
      this.constructorDeclaration();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  constructorDeclaration() {
    let localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, JavaParser.RULE_constructorDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 514;
      this.identifier();
      this.state = 515;
      this.formalParameters();
      this.state = 518;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.THROWS) {
        this.state = 516;
        this.match(JavaParser.THROWS);
        this.state = 517;
        this.qualifiedNameList();
      }
      this.state = 520;
      localctx.constructorBody = this.block();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  fieldDeclaration() {
    let localctx = new FieldDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, JavaParser.RULE_fieldDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 522;
      this.typeType();
      this.state = 523;
      this.variableDeclarators();
      this.state = 524;
      this.match(JavaParser.SEMI);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  interfaceBodyDeclaration() {
    let localctx = new InterfaceBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, JavaParser.RULE_interfaceBodyDeclaration);
    try {
      this.state = 534;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.ABSTRACT:
        case JavaParser.BOOLEAN:
        case JavaParser.BYTE:
        case JavaParser.CHAR:
        case JavaParser.CLASS:
        case JavaParser.DEFAULT:
        case JavaParser.DOUBLE:
        case JavaParser.ENUM:
        case JavaParser.FINAL:
        case JavaParser.FLOAT:
        case JavaParser.INT:
        case JavaParser.INTERFACE:
        case JavaParser.LONG:
        case JavaParser.NATIVE:
        case JavaParser.PRIVATE:
        case JavaParser.PROTECTED:
        case JavaParser.PUBLIC:
        case JavaParser.SHORT:
        case JavaParser.STATIC:
        case JavaParser.STRICTFP:
        case JavaParser.SYNCHRONIZED:
        case JavaParser.TRANSIENT:
        case JavaParser.VOID:
        case JavaParser.VOLATILE:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.NON_SEALED:
        case JavaParser.LT:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 529;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 44, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 526;
              this.modifier();
            }
            this.state = 531;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 44, this._ctx);
          }
          this.state = 532;
          this.interfaceMemberDeclaration();
          break;
        case JavaParser.SEMI:
          this.enterOuterAlt(localctx, 2);
          this.state = 533;
          this.match(JavaParser.SEMI);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  interfaceMemberDeclaration() {
    let localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, JavaParser.RULE_interfaceMemberDeclaration);
    try {
      this.state = 544;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 46, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 536;
          this.constDeclaration();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 537;
          this.interfaceMethodDeclaration();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 538;
          this.genericInterfaceMethodDeclaration();
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 539;
          this.interfaceDeclaration();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 540;
          this.annotationTypeDeclaration();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 541;
          this.classDeclaration();
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 542;
          this.enumDeclaration();
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 543;
          this.recordDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  constDeclaration() {
    let localctx = new ConstDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, JavaParser.RULE_constDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 546;
      this.typeType();
      this.state = 547;
      this.constantDeclarator();
      this.state = 552;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.COMMA) {
        this.state = 548;
        this.match(JavaParser.COMMA);
        this.state = 549;
        this.constantDeclarator();
        this.state = 554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 555;
      this.match(JavaParser.SEMI);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  constantDeclarator() {
    let localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, JavaParser.RULE_constantDeclarator);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 557;
      this.identifier();
      this.state = 562;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.LBRACK) {
        this.state = 558;
        this.match(JavaParser.LBRACK);
        this.state = 559;
        this.match(JavaParser.RBRACK);
        this.state = 564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 565;
      this.match(JavaParser.ASSIGN);
      this.state = 566;
      this.variableInitializer();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  interfaceMethodDeclaration() {
    let localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, JavaParser.RULE_interfaceMethodDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 571;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 568;
          this.interfaceMethodModifier();
        }
        this.state = 573;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
      }
      this.state = 574;
      this.interfaceCommonBodyDeclaration();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  interfaceMethodModifier() {
    let localctx = new InterfaceMethodModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, JavaParser.RULE_interfaceMethodModifier);
    try {
      this.state = 582;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 576;
          this.annotation();
          break;
        case JavaParser.PUBLIC:
          this.enterOuterAlt(localctx, 2);
          this.state = 577;
          this.match(JavaParser.PUBLIC);
          break;
        case JavaParser.ABSTRACT:
          this.enterOuterAlt(localctx, 3);
          this.state = 578;
          this.match(JavaParser.ABSTRACT);
          break;
        case JavaParser.DEFAULT:
          this.enterOuterAlt(localctx, 4);
          this.state = 579;
          this.match(JavaParser.DEFAULT);
          break;
        case JavaParser.STATIC:
          this.enterOuterAlt(localctx, 5);
          this.state = 580;
          this.match(JavaParser.STATIC);
          break;
        case JavaParser.STRICTFP:
          this.enterOuterAlt(localctx, 6);
          this.state = 581;
          this.match(JavaParser.STRICTFP);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  genericInterfaceMethodDeclaration() {
    let localctx = new GenericInterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, JavaParser.RULE_genericInterfaceMethodDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 587;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.ABSTRACT || _la === JavaParser.DEFAULT || (_la - 35 & ~31) == 0 && (1 << _la - 35 & (1 << JavaParser.PUBLIC - 35 | 1 << JavaParser.STATIC - 35 | 1 << JavaParser.STRICTFP - 35 | 1 << JavaParser.MODULE - 35 | 1 << JavaParser.OPEN - 35 | 1 << JavaParser.REQUIRES - 35 | 1 << JavaParser.EXPORTS - 35 | 1 << JavaParser.OPENS - 35 | 1 << JavaParser.TO - 35 | 1 << JavaParser.USES - 35 | 1 << JavaParser.PROVIDES - 35 | 1 << JavaParser.WITH - 35 | 1 << JavaParser.TRANSITIVE - 35 | 1 << JavaParser.VAR - 35 | 1 << JavaParser.YIELD - 35 | 1 << JavaParser.RECORD - 35 | 1 << JavaParser.SEALED - 35 | 1 << JavaParser.PERMITS - 35)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
        this.state = 584;
        this.interfaceMethodModifier();
        this.state = 589;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 590;
      this.typeParameters();
      this.state = 591;
      this.interfaceCommonBodyDeclaration();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  interfaceCommonBodyDeclaration() {
    let localctx = new InterfaceCommonBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, JavaParser.RULE_interfaceCommonBodyDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 596;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 593;
          this.annotation();
        }
        this.state = 598;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
      }
      this.state = 599;
      this.typeTypeOrVoid();
      this.state = 600;
      this.identifier();
      this.state = 601;
      this.formalParameters();
      this.state = 606;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.LBRACK) {
        this.state = 602;
        this.match(JavaParser.LBRACK);
        this.state = 603;
        this.match(JavaParser.RBRACK);
        this.state = 608;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 611;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.THROWS) {
        this.state = 609;
        this.match(JavaParser.THROWS);
        this.state = 610;
        this.qualifiedNameList();
      }
      this.state = 613;
      this.methodBody();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableDeclarators() {
    let localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, JavaParser.RULE_variableDeclarators);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 615;
      this.variableDeclarator();
      this.state = 620;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.COMMA) {
        this.state = 616;
        this.match(JavaParser.COMMA);
        this.state = 617;
        this.variableDeclarator();
        this.state = 622;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableDeclarator() {
    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, JavaParser.RULE_variableDeclarator);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 623;
      this.variableDeclaratorId();
      this.state = 626;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.ASSIGN) {
        this.state = 624;
        this.match(JavaParser.ASSIGN);
        this.state = 625;
        this.variableInitializer();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableDeclaratorId() {
    let localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, JavaParser.RULE_variableDeclaratorId);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 628;
      this.identifier();
      this.state = 633;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.LBRACK) {
        this.state = 629;
        this.match(JavaParser.LBRACK);
        this.state = 630;
        this.match(JavaParser.RBRACK);
        this.state = 635;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  variableInitializer() {
    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, JavaParser.RULE_variableInitializer);
    try {
      this.state = 638;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.LBRACE:
          this.enterOuterAlt(localctx, 1);
          this.state = 636;
          this.arrayInitializer();
          break;
        case JavaParser.BOOLEAN:
        case JavaParser.BYTE:
        case JavaParser.CHAR:
        case JavaParser.DOUBLE:
        case JavaParser.FLOAT:
        case JavaParser.INT:
        case JavaParser.LONG:
        case JavaParser.NEW:
        case JavaParser.SHORT:
        case JavaParser.SUPER:
        case JavaParser.SWITCH:
        case JavaParser.THIS:
        case JavaParser.VOID:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.DECIMAL_LITERAL:
        case JavaParser.HEX_LITERAL:
        case JavaParser.OCT_LITERAL:
        case JavaParser.BINARY_LITERAL:
        case JavaParser.FLOAT_LITERAL:
        case JavaParser.HEX_FLOAT_LITERAL:
        case JavaParser.BOOL_LITERAL:
        case JavaParser.CHAR_LITERAL:
        case JavaParser.STRING_LITERAL:
        case JavaParser.TEXT_BLOCK:
        case JavaParser.NULL_LITERAL:
        case JavaParser.LPAREN:
        case JavaParser.LT:
        case JavaParser.BANG:
        case JavaParser.TILDE:
        case JavaParser.INC:
        case JavaParser.DEC:
        case JavaParser.ADD:
        case JavaParser.SUB:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 2);
          this.state = 637;
          this.expression(0);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrayInitializer() {
    let localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, JavaParser.RULE_arrayInitializer);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 640;
      this.match(JavaParser.LBRACE);
      this.state = 652;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.SUPER - 37 | 1 << JavaParser.SWITCH - 37 | 1 << JavaParser.THIS - 37 | 1 << JavaParser.VOID - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37 | 1 << JavaParser.DECIMAL_LITERAL - 37 | 1 << JavaParser.HEX_LITERAL - 37)) !== 0 || (_la - 69 & ~31) == 0 && (1 << _la - 69 & (1 << JavaParser.OCT_LITERAL - 69 | 1 << JavaParser.BINARY_LITERAL - 69 | 1 << JavaParser.FLOAT_LITERAL - 69 | 1 << JavaParser.HEX_FLOAT_LITERAL - 69 | 1 << JavaParser.BOOL_LITERAL - 69 | 1 << JavaParser.CHAR_LITERAL - 69 | 1 << JavaParser.STRING_LITERAL - 69 | 1 << JavaParser.TEXT_BLOCK - 69 | 1 << JavaParser.NULL_LITERAL - 69 | 1 << JavaParser.LPAREN - 69 | 1 << JavaParser.LBRACE - 69 | 1 << JavaParser.LT - 69 | 1 << JavaParser.BANG - 69 | 1 << JavaParser.TILDE - 69 | 1 << JavaParser.INC - 69)) !== 0 || (_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << JavaParser.DEC - 101 | 1 << JavaParser.ADD - 101 | 1 << JavaParser.SUB - 101 | 1 << JavaParser.AT - 101 | 1 << JavaParser.IDENTIFIER - 101)) !== 0) {
        this.state = 641;
        this.variableInitializer();
        this.state = 646;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
        while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 642;
            this.match(JavaParser.COMMA);
            this.state = 643;
            this.variableInitializer();
          }
          this.state = 648;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
        }
        this.state = 650;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === JavaParser.COMMA) {
          this.state = 649;
          this.match(JavaParser.COMMA);
        }
      }
      this.state = 654;
      this.match(JavaParser.RBRACE);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classOrInterfaceType() {
    let localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, JavaParser.RULE_classOrInterfaceType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 656;
      this.identifier();
      this.state = 658;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);
      if (la_ === 1) {
        this.state = 657;
        this.typeArguments();
      }
      this.state = 667;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 64, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 660;
          this.match(JavaParser.DOT);
          this.state = 661;
          this.identifier();
          this.state = 663;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
          if (la_ === 1) {
            this.state = 662;
            this.typeArguments();
          }
        }
        this.state = 669;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 64, this._ctx);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeArgument() {
    let localctx = new TypeArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, JavaParser.RULE_typeArgument);
    var _la = 0;
    try {
      this.state = 682;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 670;
          this.typeType();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 674;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while ((_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
            this.state = 671;
            this.annotation();
            this.state = 676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 677;
          this.match(JavaParser.QUESTION);
          this.state = 680;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.EXTENDS || _la === JavaParser.SUPER) {
            this.state = 678;
            _la = this._input.LA(1);
            if (!(_la === JavaParser.EXTENDS || _la === JavaParser.SUPER)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 679;
            this.typeType();
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  qualifiedNameList() {
    let localctx = new QualifiedNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, JavaParser.RULE_qualifiedNameList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 684;
      this.qualifiedName();
      this.state = 689;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.COMMA) {
        this.state = 685;
        this.match(JavaParser.COMMA);
        this.state = 686;
        this.qualifiedName();
        this.state = 691;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  formalParameters() {
    let localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, JavaParser.RULE_formalParameters);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 692;
      this.match(JavaParser.LPAREN);
      this.state = 704;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 72, this._ctx);
      switch (la_) {
        case 1:
          this.state = 694;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
            this.state = 693;
            this.receiverParameter();
          }
          break;
        case 2:
          this.state = 696;
          this.receiverParameter();
          this.state = 699;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.COMMA) {
            this.state = 697;
            this.match(JavaParser.COMMA);
            this.state = 698;
            this.formalParameterList();
          }
          break;
        case 3:
          this.state = 702;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
            this.state = 701;
            this.formalParameterList();
          }
          break;
      }
      this.state = 706;
      this.match(JavaParser.RPAREN);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  receiverParameter() {
    let localctx = new ReceiverParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, JavaParser.RULE_receiverParameter);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 708;
      this.typeType();
      this.state = 714;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.IDENTIFIER) {
        this.state = 709;
        this.identifier();
        this.state = 710;
        this.match(JavaParser.DOT);
        this.state = 716;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 717;
      this.match(JavaParser.THIS);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  formalParameterList() {
    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, JavaParser.RULE_formalParameterList);
    var _la = 0;
    try {
      this.state = 732;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 76, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 719;
          this.formalParameter();
          this.state = 724;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 74, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 720;
              this.match(JavaParser.COMMA);
              this.state = 721;
              this.formalParameter();
            }
            this.state = 726;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 74, this._ctx);
          }
          this.state = 729;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.COMMA) {
            this.state = 727;
            this.match(JavaParser.COMMA);
            this.state = 728;
            this.lastFormalParameter();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 731;
          this.lastFormalParameter();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  formalParameter() {
    let localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, JavaParser.RULE_formalParameter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 737;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 77, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 734;
          this.variableModifier();
        }
        this.state = 739;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 77, this._ctx);
      }
      this.state = 740;
      this.typeType();
      this.state = 741;
      this.variableDeclaratorId();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lastFormalParameter() {
    let localctx = new LastFormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, JavaParser.RULE_lastFormalParameter);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 746;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 743;
          this.variableModifier();
        }
        this.state = 748;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
      }
      this.state = 749;
      this.typeType();
      this.state = 753;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
        this.state = 750;
        this.annotation();
        this.state = 755;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 756;
      this.match(JavaParser.ELLIPSIS);
      this.state = 757;
      this.variableDeclaratorId();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lambdaLVTIList() {
    let localctx = new LambdaLVTIListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, JavaParser.RULE_lambdaLVTIList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 759;
      this.lambdaLVTIParameter();
      this.state = 764;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.COMMA) {
        this.state = 760;
        this.match(JavaParser.COMMA);
        this.state = 761;
        this.lambdaLVTIParameter();
        this.state = 766;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lambdaLVTIParameter() {
    let localctx = new LambdaLVTIParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, JavaParser.RULE_lambdaLVTIParameter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 770;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 81, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 767;
          this.variableModifier();
        }
        this.state = 772;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 81, this._ctx);
      }
      this.state = 773;
      this.match(JavaParser.VAR);
      this.state = 774;
      this.identifier();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  qualifiedName() {
    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, JavaParser.RULE_qualifiedName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 776;
      this.identifier();
      this.state = 781;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 82, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 777;
          this.match(JavaParser.DOT);
          this.state = 778;
          this.identifier();
        }
        this.state = 783;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 82, this._ctx);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  literal() {
    let localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, JavaParser.RULE_literal);
    try {
      this.state = 791;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.DECIMAL_LITERAL:
        case JavaParser.HEX_LITERAL:
        case JavaParser.OCT_LITERAL:
        case JavaParser.BINARY_LITERAL:
          this.enterOuterAlt(localctx, 1);
          this.state = 784;
          this.integerLiteral();
          break;
        case JavaParser.FLOAT_LITERAL:
        case JavaParser.HEX_FLOAT_LITERAL:
          this.enterOuterAlt(localctx, 2);
          this.state = 785;
          this.floatLiteral();
          break;
        case JavaParser.CHAR_LITERAL:
          this.enterOuterAlt(localctx, 3);
          this.state = 786;
          this.match(JavaParser.CHAR_LITERAL);
          break;
        case JavaParser.STRING_LITERAL:
          this.enterOuterAlt(localctx, 4);
          this.state = 787;
          this.match(JavaParser.STRING_LITERAL);
          break;
        case JavaParser.BOOL_LITERAL:
          this.enterOuterAlt(localctx, 5);
          this.state = 788;
          this.match(JavaParser.BOOL_LITERAL);
          break;
        case JavaParser.NULL_LITERAL:
          this.enterOuterAlt(localctx, 6);
          this.state = 789;
          this.match(JavaParser.NULL_LITERAL);
          break;
        case JavaParser.TEXT_BLOCK:
          this.enterOuterAlt(localctx, 7);
          this.state = 790;
          this.match(JavaParser.TEXT_BLOCK);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  integerLiteral() {
    let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, JavaParser.RULE_integerLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 793;
      _la = this._input.LA(1);
      if (!((_la - 67 & ~31) == 0 && (1 << _la - 67 & (1 << JavaParser.DECIMAL_LITERAL - 67 | 1 << JavaParser.HEX_LITERAL - 67 | 1 << JavaParser.OCT_LITERAL - 67 | 1 << JavaParser.BINARY_LITERAL - 67)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  floatLiteral() {
    let localctx = new FloatLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, JavaParser.RULE_floatLiteral);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 795;
      _la = this._input.LA(1);
      if (!(_la === JavaParser.FLOAT_LITERAL || _la === JavaParser.HEX_FLOAT_LITERAL)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  altAnnotationQualifiedName() {
    let localctx = new AltAnnotationQualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, JavaParser.RULE_altAnnotationQualifiedName);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 802;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.IDENTIFIER) {
        this.state = 797;
        this.identifier();
        this.state = 798;
        this.match(JavaParser.DOT);
        this.state = 804;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 805;
      this.match(JavaParser.AT);
      this.state = 806;
      this.identifier();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  annotation() {
    let localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, JavaParser.RULE_annotation);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 811;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 85, this._ctx);
      switch (la_) {
        case 1:
          this.state = 808;
          this.match(JavaParser.AT);
          this.state = 809;
          this.qualifiedName();
          break;
        case 2:
          this.state = 810;
          this.altAnnotationQualifiedName();
          break;
      }
      this.state = 819;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.LPAREN) {
        this.state = 813;
        this.match(JavaParser.LPAREN);
        this.state = 816;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);
        if (la_ === 1) {
          this.state = 814;
          this.elementValuePairs();
        } else if (la_ === 2) {
          this.state = 815;
          this.elementValue();
        }
        this.state = 818;
        this.match(JavaParser.RPAREN);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  elementValuePairs() {
    let localctx = new ElementValuePairsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, JavaParser.RULE_elementValuePairs);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 821;
      this.elementValuePair();
      this.state = 826;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.COMMA) {
        this.state = 822;
        this.match(JavaParser.COMMA);
        this.state = 823;
        this.elementValuePair();
        this.state = 828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  elementValuePair() {
    let localctx = new ElementValuePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, JavaParser.RULE_elementValuePair);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 829;
      this.identifier();
      this.state = 830;
      this.match(JavaParser.ASSIGN);
      this.state = 831;
      this.elementValue();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  elementValue() {
    let localctx = new ElementValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, JavaParser.RULE_elementValue);
    try {
      this.state = 836;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 833;
          this.expression(0);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 834;
          this.annotation();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 835;
          this.elementValueArrayInitializer();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  elementValueArrayInitializer() {
    let localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, JavaParser.RULE_elementValueArrayInitializer);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 838;
      this.match(JavaParser.LBRACE);
      this.state = 847;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.SUPER - 37 | 1 << JavaParser.SWITCH - 37 | 1 << JavaParser.THIS - 37 | 1 << JavaParser.VOID - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37 | 1 << JavaParser.DECIMAL_LITERAL - 37 | 1 << JavaParser.HEX_LITERAL - 37)) !== 0 || (_la - 69 & ~31) == 0 && (1 << _la - 69 & (1 << JavaParser.OCT_LITERAL - 69 | 1 << JavaParser.BINARY_LITERAL - 69 | 1 << JavaParser.FLOAT_LITERAL - 69 | 1 << JavaParser.HEX_FLOAT_LITERAL - 69 | 1 << JavaParser.BOOL_LITERAL - 69 | 1 << JavaParser.CHAR_LITERAL - 69 | 1 << JavaParser.STRING_LITERAL - 69 | 1 << JavaParser.TEXT_BLOCK - 69 | 1 << JavaParser.NULL_LITERAL - 69 | 1 << JavaParser.LPAREN - 69 | 1 << JavaParser.LBRACE - 69 | 1 << JavaParser.LT - 69 | 1 << JavaParser.BANG - 69 | 1 << JavaParser.TILDE - 69 | 1 << JavaParser.INC - 69)) !== 0 || (_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << JavaParser.DEC - 101 | 1 << JavaParser.ADD - 101 | 1 << JavaParser.SUB - 101 | 1 << JavaParser.AT - 101 | 1 << JavaParser.IDENTIFIER - 101)) !== 0) {
        this.state = 839;
        this.elementValue();
        this.state = 844;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 90, this._ctx);
        while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 840;
            this.match(JavaParser.COMMA);
            this.state = 841;
            this.elementValue();
          }
          this.state = 846;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 90, this._ctx);
        }
      }
      this.state = 850;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.COMMA) {
        this.state = 849;
        this.match(JavaParser.COMMA);
      }
      this.state = 852;
      this.match(JavaParser.RBRACE);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  annotationTypeDeclaration() {
    let localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, JavaParser.RULE_annotationTypeDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 854;
      this.match(JavaParser.AT);
      this.state = 855;
      this.match(JavaParser.INTERFACE);
      this.state = 856;
      this.identifier();
      this.state = 857;
      this.annotationTypeBody();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  annotationTypeBody() {
    let localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, JavaParser.RULE_annotationTypeBody);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 859;
      this.match(JavaParser.LBRACE);
      this.state = 863;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.ABSTRACT | 1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.CLASS | 1 << JavaParser.DOUBLE | 1 << JavaParser.ENUM | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.INTERFACE | 1 << JavaParser.LONG | 1 << JavaParser.NATIVE)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << JavaParser.PRIVATE - 33 | 1 << JavaParser.PROTECTED - 33 | 1 << JavaParser.PUBLIC - 33 | 1 << JavaParser.SHORT - 33 | 1 << JavaParser.STATIC - 33 | 1 << JavaParser.STRICTFP - 33 | 1 << JavaParser.SYNCHRONIZED - 33 | 1 << JavaParser.TRANSIENT - 33 | 1 << JavaParser.VOLATILE - 33 | 1 << JavaParser.MODULE - 33 | 1 << JavaParser.OPEN - 33 | 1 << JavaParser.REQUIRES - 33 | 1 << JavaParser.EXPORTS - 33 | 1 << JavaParser.OPENS - 33 | 1 << JavaParser.TO - 33 | 1 << JavaParser.USES - 33 | 1 << JavaParser.PROVIDES - 33 | 1 << JavaParser.WITH - 33 | 1 << JavaParser.TRANSITIVE - 33 | 1 << JavaParser.VAR - 33 | 1 << JavaParser.YIELD - 33 | 1 << JavaParser.RECORD - 33 | 1 << JavaParser.SEALED - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << JavaParser.PERMITS - 65 | 1 << JavaParser.NON_SEALED - 65 | 1 << JavaParser.SEMI - 65)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
        this.state = 860;
        this.annotationTypeElementDeclaration();
        this.state = 865;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 866;
      this.match(JavaParser.RBRACE);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  annotationTypeElementDeclaration() {
    let localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, JavaParser.RULE_annotationTypeElementDeclaration);
    try {
      this.state = 876;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.ABSTRACT:
        case JavaParser.BOOLEAN:
        case JavaParser.BYTE:
        case JavaParser.CHAR:
        case JavaParser.CLASS:
        case JavaParser.DOUBLE:
        case JavaParser.ENUM:
        case JavaParser.FINAL:
        case JavaParser.FLOAT:
        case JavaParser.INT:
        case JavaParser.INTERFACE:
        case JavaParser.LONG:
        case JavaParser.NATIVE:
        case JavaParser.PRIVATE:
        case JavaParser.PROTECTED:
        case JavaParser.PUBLIC:
        case JavaParser.SHORT:
        case JavaParser.STATIC:
        case JavaParser.STRICTFP:
        case JavaParser.SYNCHRONIZED:
        case JavaParser.TRANSIENT:
        case JavaParser.VOLATILE:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.NON_SEALED:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 871;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 868;
              this.modifier();
            }
            this.state = 873;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);
          }
          this.state = 874;
          this.annotationTypeElementRest();
          break;
        case JavaParser.SEMI:
          this.enterOuterAlt(localctx, 2);
          this.state = 875;
          this.match(JavaParser.SEMI);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  annotationTypeElementRest() {
    let localctx = new AnnotationTypeElementRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, JavaParser.RULE_annotationTypeElementRest);
    try {
      this.state = 902;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 101, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 878;
          this.typeType();
          this.state = 879;
          this.annotationMethodOrConstantRest();
          this.state = 880;
          this.match(JavaParser.SEMI);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 882;
          this.classDeclaration();
          this.state = 884;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
          if (la_ === 1) {
            this.state = 883;
            this.match(JavaParser.SEMI);
          }
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 886;
          this.interfaceDeclaration();
          this.state = 888;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
          if (la_ === 1) {
            this.state = 887;
            this.match(JavaParser.SEMI);
          }
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 890;
          this.enumDeclaration();
          this.state = 892;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);
          if (la_ === 1) {
            this.state = 891;
            this.match(JavaParser.SEMI);
          }
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 894;
          this.annotationTypeDeclaration();
          this.state = 896;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 99, this._ctx);
          if (la_ === 1) {
            this.state = 895;
            this.match(JavaParser.SEMI);
          }
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 898;
          this.recordDeclaration();
          this.state = 900;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);
          if (la_ === 1) {
            this.state = 899;
            this.match(JavaParser.SEMI);
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  annotationMethodOrConstantRest() {
    let localctx = new AnnotationMethodOrConstantRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, JavaParser.RULE_annotationMethodOrConstantRest);
    try {
      this.state = 906;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 102, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 904;
          this.annotationMethodRest();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 905;
          this.annotationConstantRest();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  annotationMethodRest() {
    let localctx = new AnnotationMethodRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, JavaParser.RULE_annotationMethodRest);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 908;
      this.identifier();
      this.state = 909;
      this.match(JavaParser.LPAREN);
      this.state = 910;
      this.match(JavaParser.RPAREN);
      this.state = 912;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.DEFAULT) {
        this.state = 911;
        this.defaultValue();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  annotationConstantRest() {
    let localctx = new AnnotationConstantRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, JavaParser.RULE_annotationConstantRest);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 914;
      this.variableDeclarators();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  defaultValue() {
    let localctx = new DefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, JavaParser.RULE_defaultValue);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 916;
      this.match(JavaParser.DEFAULT);
      this.state = 917;
      this.elementValue();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  moduleDeclaration() {
    let localctx = new ModuleDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, JavaParser.RULE_moduleDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 920;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.OPEN) {
        this.state = 919;
        this.match(JavaParser.OPEN);
      }
      this.state = 922;
      this.match(JavaParser.MODULE);
      this.state = 923;
      this.qualifiedName();
      this.state = 924;
      this.moduleBody();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  moduleBody() {
    let localctx = new ModuleBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, JavaParser.RULE_moduleBody);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 926;
      this.match(JavaParser.LBRACE);
      this.state = 930;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la - 53 & ~31) == 0 && (1 << _la - 53 & (1 << JavaParser.REQUIRES - 53 | 1 << JavaParser.EXPORTS - 53 | 1 << JavaParser.OPENS - 53 | 1 << JavaParser.USES - 53 | 1 << JavaParser.PROVIDES - 53)) !== 0) {
        this.state = 927;
        this.moduleDirective();
        this.state = 932;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 933;
      this.match(JavaParser.RBRACE);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  moduleDirective() {
    let localctx = new ModuleDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, JavaParser.RULE_moduleDirective);
    var _la = 0;
    try {
      this.state = 971;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.REQUIRES:
          this.enterOuterAlt(localctx, 1);
          this.state = 935;
          this.match(JavaParser.REQUIRES);
          this.state = 939;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 106, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 936;
              this.requiresModifier();
            }
            this.state = 941;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 106, this._ctx);
          }
          this.state = 942;
          this.qualifiedName();
          this.state = 943;
          this.match(JavaParser.SEMI);
          break;
        case JavaParser.EXPORTS:
          this.enterOuterAlt(localctx, 2);
          this.state = 945;
          this.match(JavaParser.EXPORTS);
          this.state = 946;
          this.qualifiedName();
          this.state = 949;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.TO) {
            this.state = 947;
            this.match(JavaParser.TO);
            this.state = 948;
            this.qualifiedName();
          }
          this.state = 951;
          this.match(JavaParser.SEMI);
          break;
        case JavaParser.OPENS:
          this.enterOuterAlt(localctx, 3);
          this.state = 953;
          this.match(JavaParser.OPENS);
          this.state = 954;
          this.qualifiedName();
          this.state = 957;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.TO) {
            this.state = 955;
            this.match(JavaParser.TO);
            this.state = 956;
            this.qualifiedName();
          }
          this.state = 959;
          this.match(JavaParser.SEMI);
          break;
        case JavaParser.USES:
          this.enterOuterAlt(localctx, 4);
          this.state = 961;
          this.match(JavaParser.USES);
          this.state = 962;
          this.qualifiedName();
          this.state = 963;
          this.match(JavaParser.SEMI);
          break;
        case JavaParser.PROVIDES:
          this.enterOuterAlt(localctx, 5);
          this.state = 965;
          this.match(JavaParser.PROVIDES);
          this.state = 966;
          this.qualifiedName();
          this.state = 967;
          this.match(JavaParser.WITH);
          this.state = 968;
          this.qualifiedName();
          this.state = 969;
          this.match(JavaParser.SEMI);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  requiresModifier() {
    let localctx = new RequiresModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, JavaParser.RULE_requiresModifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 973;
      _la = this._input.LA(1);
      if (!(_la === JavaParser.STATIC || _la === JavaParser.TRANSITIVE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  recordDeclaration() {
    let localctx = new RecordDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, JavaParser.RULE_recordDeclaration);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 975;
      this.match(JavaParser.RECORD);
      this.state = 976;
      this.identifier();
      this.state = 978;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.LT) {
        this.state = 977;
        this.typeParameters();
      }
      this.state = 980;
      this.recordHeader();
      this.state = 983;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.IMPLEMENTS) {
        this.state = 981;
        this.match(JavaParser.IMPLEMENTS);
        this.state = 982;
        this.typeList();
      }
      this.state = 985;
      this.recordBody();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  recordHeader() {
    let localctx = new RecordHeaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, JavaParser.RULE_recordHeader);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 987;
      this.match(JavaParser.LPAREN);
      this.state = 989;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
        this.state = 988;
        this.recordComponentList();
      }
      this.state = 991;
      this.match(JavaParser.RPAREN);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  recordComponentList() {
    let localctx = new RecordComponentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, JavaParser.RULE_recordComponentList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 993;
      this.recordComponent();
      this.state = 998;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.COMMA) {
        this.state = 994;
        this.match(JavaParser.COMMA);
        this.state = 995;
        this.recordComponent();
        this.state = 1e3;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  recordComponent() {
    let localctx = new RecordComponentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, JavaParser.RULE_recordComponent);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1001;
      this.typeType();
      this.state = 1002;
      this.identifier();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  recordBody() {
    let localctx = new RecordBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, JavaParser.RULE_recordBody);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1004;
      this.match(JavaParser.LBRACE);
      this.state = 1008;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.ABSTRACT | 1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.CLASS | 1 << JavaParser.DOUBLE | 1 << JavaParser.ENUM | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.INTERFACE | 1 << JavaParser.LONG | 1 << JavaParser.NATIVE)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << JavaParser.PRIVATE - 33 | 1 << JavaParser.PROTECTED - 33 | 1 << JavaParser.PUBLIC - 33 | 1 << JavaParser.SHORT - 33 | 1 << JavaParser.STATIC - 33 | 1 << JavaParser.STRICTFP - 33 | 1 << JavaParser.SYNCHRONIZED - 33 | 1 << JavaParser.TRANSIENT - 33 | 1 << JavaParser.VOID - 33 | 1 << JavaParser.VOLATILE - 33 | 1 << JavaParser.MODULE - 33 | 1 << JavaParser.OPEN - 33 | 1 << JavaParser.REQUIRES - 33 | 1 << JavaParser.EXPORTS - 33 | 1 << JavaParser.OPENS - 33 | 1 << JavaParser.TO - 33 | 1 << JavaParser.USES - 33 | 1 << JavaParser.PROVIDES - 33 | 1 << JavaParser.WITH - 33 | 1 << JavaParser.TRANSITIVE - 33 | 1 << JavaParser.VAR - 33 | 1 << JavaParser.YIELD - 33 | 1 << JavaParser.RECORD - 33 | 1 << JavaParser.SEALED - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << JavaParser.PERMITS - 65 | 1 << JavaParser.NON_SEALED - 65 | 1 << JavaParser.LBRACE - 65 | 1 << JavaParser.SEMI - 65 | 1 << JavaParser.LT - 65)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
        this.state = 1005;
        this.classBodyDeclaration();
        this.state = 1010;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1011;
      this.match(JavaParser.RBRACE);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  block() {
    let localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, JavaParser.RULE_block);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1013;
      this.match(JavaParser.LBRACE);
      this.state = 1017;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.ABSTRACT | 1 << JavaParser.ASSERT | 1 << JavaParser.BOOLEAN | 1 << JavaParser.BREAK | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.CLASS | 1 << JavaParser.CONTINUE | 1 << JavaParser.DO | 1 << JavaParser.DOUBLE | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.FOR | 1 << JavaParser.IF | 1 << JavaParser.INT | 1 << JavaParser.INTERFACE | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << JavaParser.PRIVATE - 33 | 1 << JavaParser.PROTECTED - 33 | 1 << JavaParser.PUBLIC - 33 | 1 << JavaParser.RETURN - 33 | 1 << JavaParser.SHORT - 33 | 1 << JavaParser.STATIC - 33 | 1 << JavaParser.STRICTFP - 33 | 1 << JavaParser.SUPER - 33 | 1 << JavaParser.SWITCH - 33 | 1 << JavaParser.SYNCHRONIZED - 33 | 1 << JavaParser.THIS - 33 | 1 << JavaParser.THROW - 33 | 1 << JavaParser.TRY - 33 | 1 << JavaParser.VOID - 33 | 1 << JavaParser.WHILE - 33 | 1 << JavaParser.MODULE - 33 | 1 << JavaParser.OPEN - 33 | 1 << JavaParser.REQUIRES - 33 | 1 << JavaParser.EXPORTS - 33 | 1 << JavaParser.OPENS - 33 | 1 << JavaParser.TO - 33 | 1 << JavaParser.USES - 33 | 1 << JavaParser.PROVIDES - 33 | 1 << JavaParser.WITH - 33 | 1 << JavaParser.TRANSITIVE - 33 | 1 << JavaParser.VAR - 33 | 1 << JavaParser.YIELD - 33 | 1 << JavaParser.RECORD - 33 | 1 << JavaParser.SEALED - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << JavaParser.PERMITS - 65 | 1 << JavaParser.NON_SEALED - 65 | 1 << JavaParser.DECIMAL_LITERAL - 65 | 1 << JavaParser.HEX_LITERAL - 65 | 1 << JavaParser.OCT_LITERAL - 65 | 1 << JavaParser.BINARY_LITERAL - 65 | 1 << JavaParser.FLOAT_LITERAL - 65 | 1 << JavaParser.HEX_FLOAT_LITERAL - 65 | 1 << JavaParser.BOOL_LITERAL - 65 | 1 << JavaParser.CHAR_LITERAL - 65 | 1 << JavaParser.STRING_LITERAL - 65 | 1 << JavaParser.TEXT_BLOCK - 65 | 1 << JavaParser.NULL_LITERAL - 65 | 1 << JavaParser.LPAREN - 65 | 1 << JavaParser.LBRACE - 65 | 1 << JavaParser.SEMI - 65 | 1 << JavaParser.LT - 65 | 1 << JavaParser.BANG - 65 | 1 << JavaParser.TILDE - 65)) !== 0 || (_la - 100 & ~31) == 0 && (1 << _la - 100 & (1 << JavaParser.INC - 100 | 1 << JavaParser.DEC - 100 | 1 << JavaParser.ADD - 100 | 1 << JavaParser.SUB - 100 | 1 << JavaParser.AT - 100 | 1 << JavaParser.IDENTIFIER - 100)) !== 0) {
        this.state = 1014;
        this.blockStatement();
        this.state = 1019;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1020;
      this.match(JavaParser.RBRACE);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  blockStatement() {
    let localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, JavaParser.RULE_blockStatement);
    try {
      this.state = 1027;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 116, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1022;
          this.localVariableDeclaration();
          this.state = 1023;
          this.match(JavaParser.SEMI);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1025;
          this.statement();
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1026;
          this.localTypeDeclaration();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  localVariableDeclaration() {
    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, JavaParser.RULE_localVariableDeclaration);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1032;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 117, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1029;
          this.variableModifier();
        }
        this.state = 1034;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 117, this._ctx);
      }
      this.state = 1043;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 118, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1035;
          this.typeType();
          this.state = 1036;
          this.variableDeclarators();
          break;
        case 2:
          this.state = 1038;
          this.match(JavaParser.VAR);
          this.state = 1039;
          this.identifier();
          this.state = 1040;
          this.match(JavaParser.ASSIGN);
          this.state = 1041;
          this.expression(0);
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  identifier() {
    let localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, JavaParser.RULE_identifier);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1045;
      _la = this._input.LA(1);
      if (!((_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.IDENTIFIER)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  localTypeDeclaration() {
    let localctx = new LocalTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, JavaParser.RULE_localTypeDeclaration);
    try {
      this.state = 1059;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.ABSTRACT:
        case JavaParser.CLASS:
        case JavaParser.FINAL:
        case JavaParser.INTERFACE:
        case JavaParser.PRIVATE:
        case JavaParser.PROTECTED:
        case JavaParser.PUBLIC:
        case JavaParser.STATIC:
        case JavaParser.STRICTFP:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.NON_SEALED:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 1050;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 119, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1047;
              this.classOrInterfaceModifier();
            }
            this.state = 1052;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 119, this._ctx);
          }
          this.state = 1056;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case JavaParser.CLASS:
              this.state = 1053;
              this.classDeclaration();
              break;
            case JavaParser.INTERFACE:
              this.state = 1054;
              this.interfaceDeclaration();
              break;
            case JavaParser.RECORD:
              this.state = 1055;
              this.recordDeclaration();
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
        case JavaParser.SEMI:
          this.enterOuterAlt(localctx, 2);
          this.state = 1058;
          this.match(JavaParser.SEMI);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  statement() {
    let localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, JavaParser.RULE_statement);
    var _la = 0;
    try {
      this.state = 1174;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 135, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1061;
          localctx.blockLabel = this.block();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1062;
          this.match(JavaParser.ASSERT);
          this.state = 1063;
          this.expression(0);
          this.state = 1066;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.COLON) {
            this.state = 1064;
            this.match(JavaParser.COLON);
            this.state = 1065;
            this.expression(0);
          }
          this.state = 1068;
          this.match(JavaParser.SEMI);
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1070;
          this.match(JavaParser.IF);
          this.state = 1071;
          this.parExpression();
          this.state = 1072;
          this.statement();
          this.state = 1075;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 123, this._ctx);
          if (la_ === 1) {
            this.state = 1073;
            this.match(JavaParser.ELSE);
            this.state = 1074;
            this.statement();
          }
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1077;
          this.match(JavaParser.FOR);
          this.state = 1078;
          this.match(JavaParser.LPAREN);
          this.state = 1079;
          this.forControl();
          this.state = 1080;
          this.match(JavaParser.RPAREN);
          this.state = 1081;
          this.statement();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1083;
          this.match(JavaParser.WHILE);
          this.state = 1084;
          this.parExpression();
          this.state = 1085;
          this.statement();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1087;
          this.match(JavaParser.DO);
          this.state = 1088;
          this.statement();
          this.state = 1089;
          this.match(JavaParser.WHILE);
          this.state = 1090;
          this.parExpression();
          this.state = 1091;
          this.match(JavaParser.SEMI);
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1093;
          this.match(JavaParser.TRY);
          this.state = 1094;
          this.block();
          this.state = 1104;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case JavaParser.CATCH:
              this.state = 1096;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              do {
                this.state = 1095;
                this.catchClause();
                this.state = 1098;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              } while (_la === JavaParser.CATCH);
              this.state = 1101;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === JavaParser.FINALLY) {
                this.state = 1100;
                this.finallyBlock();
              }
              break;
            case JavaParser.FINALLY:
              this.state = 1103;
              this.finallyBlock();
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 1106;
          this.match(JavaParser.TRY);
          this.state = 1107;
          this.resourceSpecification();
          this.state = 1108;
          this.block();
          this.state = 1112;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === JavaParser.CATCH) {
            this.state = 1109;
            this.catchClause();
            this.state = 1114;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1116;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.FINALLY) {
            this.state = 1115;
            this.finallyBlock();
          }
          break;
        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 1118;
          this.match(JavaParser.SWITCH);
          this.state = 1119;
          this.parExpression();
          this.state = 1120;
          this.match(JavaParser.LBRACE);
          this.state = 1124;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 129, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1121;
              this.switchBlockStatementGroup();
            }
            this.state = 1126;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 129, this._ctx);
          }
          this.state = 1130;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === JavaParser.CASE || _la === JavaParser.DEFAULT) {
            this.state = 1127;
            this.switchLabel();
            this.state = 1132;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1133;
          this.match(JavaParser.RBRACE);
          break;
        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 1135;
          this.match(JavaParser.SYNCHRONIZED);
          this.state = 1136;
          this.parExpression();
          this.state = 1137;
          this.block();
          break;
        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 1139;
          this.match(JavaParser.RETURN);
          this.state = 1141;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.SUPER - 37 | 1 << JavaParser.SWITCH - 37 | 1 << JavaParser.THIS - 37 | 1 << JavaParser.VOID - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37 | 1 << JavaParser.DECIMAL_LITERAL - 37 | 1 << JavaParser.HEX_LITERAL - 37)) !== 0 || (_la - 69 & ~31) == 0 && (1 << _la - 69 & (1 << JavaParser.OCT_LITERAL - 69 | 1 << JavaParser.BINARY_LITERAL - 69 | 1 << JavaParser.FLOAT_LITERAL - 69 | 1 << JavaParser.HEX_FLOAT_LITERAL - 69 | 1 << JavaParser.BOOL_LITERAL - 69 | 1 << JavaParser.CHAR_LITERAL - 69 | 1 << JavaParser.STRING_LITERAL - 69 | 1 << JavaParser.TEXT_BLOCK - 69 | 1 << JavaParser.NULL_LITERAL - 69 | 1 << JavaParser.LPAREN - 69 | 1 << JavaParser.LT - 69 | 1 << JavaParser.BANG - 69 | 1 << JavaParser.TILDE - 69 | 1 << JavaParser.INC - 69)) !== 0 || (_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << JavaParser.DEC - 101 | 1 << JavaParser.ADD - 101 | 1 << JavaParser.SUB - 101 | 1 << JavaParser.AT - 101 | 1 << JavaParser.IDENTIFIER - 101)) !== 0) {
            this.state = 1140;
            this.expression(0);
          }
          this.state = 1143;
          this.match(JavaParser.SEMI);
          break;
        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 1144;
          this.match(JavaParser.THROW);
          this.state = 1145;
          this.expression(0);
          this.state = 1146;
          this.match(JavaParser.SEMI);
          break;
        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 1148;
          this.match(JavaParser.BREAK);
          this.state = 1150;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.IDENTIFIER) {
            this.state = 1149;
            this.identifier();
          }
          this.state = 1152;
          this.match(JavaParser.SEMI);
          break;
        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 1153;
          this.match(JavaParser.CONTINUE);
          this.state = 1155;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.IDENTIFIER) {
            this.state = 1154;
            this.identifier();
          }
          this.state = 1157;
          this.match(JavaParser.SEMI);
          break;
        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 1158;
          this.match(JavaParser.YIELD);
          this.state = 1159;
          this.expression(0);
          this.state = 1160;
          this.match(JavaParser.SEMI);
          break;
        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 1162;
          this.match(JavaParser.SEMI);
          break;
        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 1163;
          localctx.statementExpression = this.expression(0);
          this.state = 1164;
          this.match(JavaParser.SEMI);
          break;
        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 1166;
          this.switchExpression();
          this.state = 1168;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 134, this._ctx);
          if (la_ === 1) {
            this.state = 1167;
            this.match(JavaParser.SEMI);
          }
          break;
        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 1170;
          localctx.identifierLabel = this.identifier();
          this.state = 1171;
          this.match(JavaParser.COLON);
          this.state = 1172;
          this.statement();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  catchClause() {
    let localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, JavaParser.RULE_catchClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1176;
      this.match(JavaParser.CATCH);
      this.state = 1177;
      this.match(JavaParser.LPAREN);
      this.state = 1181;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 136, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1178;
          this.variableModifier();
        }
        this.state = 1183;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 136, this._ctx);
      }
      this.state = 1184;
      this.catchType();
      this.state = 1185;
      this.identifier();
      this.state = 1186;
      this.match(JavaParser.RPAREN);
      this.state = 1187;
      this.block();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  catchType() {
    let localctx = new CatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, JavaParser.RULE_catchType);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1189;
      this.qualifiedName();
      this.state = 1194;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.BITOR) {
        this.state = 1190;
        this.match(JavaParser.BITOR);
        this.state = 1191;
        this.qualifiedName();
        this.state = 1196;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  finallyBlock() {
    let localctx = new FinallyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, JavaParser.RULE_finallyBlock);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1197;
      this.match(JavaParser.FINALLY);
      this.state = 1198;
      this.block();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  resourceSpecification() {
    let localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, JavaParser.RULE_resourceSpecification);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1200;
      this.match(JavaParser.LPAREN);
      this.state = 1201;
      this.resources();
      this.state = 1203;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.SEMI) {
        this.state = 1202;
        this.match(JavaParser.SEMI);
      }
      this.state = 1205;
      this.match(JavaParser.RPAREN);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  resources() {
    let localctx = new ResourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, JavaParser.RULE_resources);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1207;
      this.resource();
      this.state = 1212;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 139, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1208;
          this.match(JavaParser.SEMI);
          this.state = 1209;
          this.resource();
        }
        this.state = 1214;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 139, this._ctx);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  resource() {
    let localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, JavaParser.RULE_resource);
    try {
      this.state = 1232;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 142, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1218;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 140, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1215;
              this.variableModifier();
            }
            this.state = 1220;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 140, this._ctx);
          }
          this.state = 1226;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 141, this._ctx);
          switch (la_) {
            case 1:
              this.state = 1221;
              this.classOrInterfaceType();
              this.state = 1222;
              this.variableDeclaratorId();
              break;
            case 2:
              this.state = 1224;
              this.match(JavaParser.VAR);
              this.state = 1225;
              this.identifier();
              break;
          }
          this.state = 1228;
          this.match(JavaParser.ASSIGN);
          this.state = 1229;
          this.expression(0);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1231;
          this.identifier();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  switchBlockStatementGroup() {
    let localctx = new SwitchBlockStatementGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, JavaParser.RULE_switchBlockStatementGroup);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1235;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1234;
        this.switchLabel();
        this.state = 1237;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === JavaParser.CASE || _la === JavaParser.DEFAULT);
      this.state = 1240;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1239;
        this.blockStatement();
        this.state = 1242;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.ABSTRACT | 1 << JavaParser.ASSERT | 1 << JavaParser.BOOLEAN | 1 << JavaParser.BREAK | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.CLASS | 1 << JavaParser.CONTINUE | 1 << JavaParser.DO | 1 << JavaParser.DOUBLE | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.FOR | 1 << JavaParser.IF | 1 << JavaParser.INT | 1 << JavaParser.INTERFACE | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << JavaParser.PRIVATE - 33 | 1 << JavaParser.PROTECTED - 33 | 1 << JavaParser.PUBLIC - 33 | 1 << JavaParser.RETURN - 33 | 1 << JavaParser.SHORT - 33 | 1 << JavaParser.STATIC - 33 | 1 << JavaParser.STRICTFP - 33 | 1 << JavaParser.SUPER - 33 | 1 << JavaParser.SWITCH - 33 | 1 << JavaParser.SYNCHRONIZED - 33 | 1 << JavaParser.THIS - 33 | 1 << JavaParser.THROW - 33 | 1 << JavaParser.TRY - 33 | 1 << JavaParser.VOID - 33 | 1 << JavaParser.WHILE - 33 | 1 << JavaParser.MODULE - 33 | 1 << JavaParser.OPEN - 33 | 1 << JavaParser.REQUIRES - 33 | 1 << JavaParser.EXPORTS - 33 | 1 << JavaParser.OPENS - 33 | 1 << JavaParser.TO - 33 | 1 << JavaParser.USES - 33 | 1 << JavaParser.PROVIDES - 33 | 1 << JavaParser.WITH - 33 | 1 << JavaParser.TRANSITIVE - 33 | 1 << JavaParser.VAR - 33 | 1 << JavaParser.YIELD - 33 | 1 << JavaParser.RECORD - 33 | 1 << JavaParser.SEALED - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << JavaParser.PERMITS - 65 | 1 << JavaParser.NON_SEALED - 65 | 1 << JavaParser.DECIMAL_LITERAL - 65 | 1 << JavaParser.HEX_LITERAL - 65 | 1 << JavaParser.OCT_LITERAL - 65 | 1 << JavaParser.BINARY_LITERAL - 65 | 1 << JavaParser.FLOAT_LITERAL - 65 | 1 << JavaParser.HEX_FLOAT_LITERAL - 65 | 1 << JavaParser.BOOL_LITERAL - 65 | 1 << JavaParser.CHAR_LITERAL - 65 | 1 << JavaParser.STRING_LITERAL - 65 | 1 << JavaParser.TEXT_BLOCK - 65 | 1 << JavaParser.NULL_LITERAL - 65 | 1 << JavaParser.LPAREN - 65 | 1 << JavaParser.LBRACE - 65 | 1 << JavaParser.SEMI - 65 | 1 << JavaParser.LT - 65 | 1 << JavaParser.BANG - 65 | 1 << JavaParser.TILDE - 65)) !== 0 || (_la - 100 & ~31) == 0 && (1 << _la - 100 & (1 << JavaParser.INC - 100 | 1 << JavaParser.DEC - 100 | 1 << JavaParser.ADD - 100 | 1 << JavaParser.SUB - 100 | 1 << JavaParser.AT - 100 | 1 << JavaParser.IDENTIFIER - 100)) !== 0);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  switchLabel() {
    let localctx = new SwitchLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, JavaParser.RULE_switchLabel);
    try {
      this.state = 1255;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.CASE:
          this.enterOuterAlt(localctx, 1);
          this.state = 1244;
          this.match(JavaParser.CASE);
          this.state = 1250;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 145, this._ctx);
          switch (la_) {
            case 1:
              this.state = 1245;
              localctx.constantExpression = this.expression(0);
              break;
            case 2:
              this.state = 1246;
              localctx.enumConstantName = this.match(JavaParser.IDENTIFIER);
              break;
            case 3:
              this.state = 1247;
              this.typeType();
              this.state = 1248;
              localctx.varName = this.identifier();
              break;
          }
          this.state = 1252;
          this.match(JavaParser.COLON);
          break;
        case JavaParser.DEFAULT:
          this.enterOuterAlt(localctx, 2);
          this.state = 1253;
          this.match(JavaParser.DEFAULT);
          this.state = 1254;
          this.match(JavaParser.COLON);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  forControl() {
    let localctx = new ForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, JavaParser.RULE_forControl);
    var _la = 0;
    try {
      this.state = 1269;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 150, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1257;
          this.enhancedForControl();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1259;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.SUPER - 37 | 1 << JavaParser.SWITCH - 37 | 1 << JavaParser.THIS - 37 | 1 << JavaParser.VOID - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37 | 1 << JavaParser.DECIMAL_LITERAL - 37 | 1 << JavaParser.HEX_LITERAL - 37)) !== 0 || (_la - 69 & ~31) == 0 && (1 << _la - 69 & (1 << JavaParser.OCT_LITERAL - 69 | 1 << JavaParser.BINARY_LITERAL - 69 | 1 << JavaParser.FLOAT_LITERAL - 69 | 1 << JavaParser.HEX_FLOAT_LITERAL - 69 | 1 << JavaParser.BOOL_LITERAL - 69 | 1 << JavaParser.CHAR_LITERAL - 69 | 1 << JavaParser.STRING_LITERAL - 69 | 1 << JavaParser.TEXT_BLOCK - 69 | 1 << JavaParser.NULL_LITERAL - 69 | 1 << JavaParser.LPAREN - 69 | 1 << JavaParser.LT - 69 | 1 << JavaParser.BANG - 69 | 1 << JavaParser.TILDE - 69 | 1 << JavaParser.INC - 69)) !== 0 || (_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << JavaParser.DEC - 101 | 1 << JavaParser.ADD - 101 | 1 << JavaParser.SUB - 101 | 1 << JavaParser.AT - 101 | 1 << JavaParser.IDENTIFIER - 101)) !== 0) {
            this.state = 1258;
            this.forInit();
          }
          this.state = 1261;
          this.match(JavaParser.SEMI);
          this.state = 1263;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.SUPER - 37 | 1 << JavaParser.SWITCH - 37 | 1 << JavaParser.THIS - 37 | 1 << JavaParser.VOID - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37 | 1 << JavaParser.DECIMAL_LITERAL - 37 | 1 << JavaParser.HEX_LITERAL - 37)) !== 0 || (_la - 69 & ~31) == 0 && (1 << _la - 69 & (1 << JavaParser.OCT_LITERAL - 69 | 1 << JavaParser.BINARY_LITERAL - 69 | 1 << JavaParser.FLOAT_LITERAL - 69 | 1 << JavaParser.HEX_FLOAT_LITERAL - 69 | 1 << JavaParser.BOOL_LITERAL - 69 | 1 << JavaParser.CHAR_LITERAL - 69 | 1 << JavaParser.STRING_LITERAL - 69 | 1 << JavaParser.TEXT_BLOCK - 69 | 1 << JavaParser.NULL_LITERAL - 69 | 1 << JavaParser.LPAREN - 69 | 1 << JavaParser.LT - 69 | 1 << JavaParser.BANG - 69 | 1 << JavaParser.TILDE - 69 | 1 << JavaParser.INC - 69)) !== 0 || (_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << JavaParser.DEC - 101 | 1 << JavaParser.ADD - 101 | 1 << JavaParser.SUB - 101 | 1 << JavaParser.AT - 101 | 1 << JavaParser.IDENTIFIER - 101)) !== 0) {
            this.state = 1262;
            this.expression(0);
          }
          this.state = 1265;
          this.match(JavaParser.SEMI);
          this.state = 1267;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.SUPER - 37 | 1 << JavaParser.SWITCH - 37 | 1 << JavaParser.THIS - 37 | 1 << JavaParser.VOID - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37 | 1 << JavaParser.DECIMAL_LITERAL - 37 | 1 << JavaParser.HEX_LITERAL - 37)) !== 0 || (_la - 69 & ~31) == 0 && (1 << _la - 69 & (1 << JavaParser.OCT_LITERAL - 69 | 1 << JavaParser.BINARY_LITERAL - 69 | 1 << JavaParser.FLOAT_LITERAL - 69 | 1 << JavaParser.HEX_FLOAT_LITERAL - 69 | 1 << JavaParser.BOOL_LITERAL - 69 | 1 << JavaParser.CHAR_LITERAL - 69 | 1 << JavaParser.STRING_LITERAL - 69 | 1 << JavaParser.TEXT_BLOCK - 69 | 1 << JavaParser.NULL_LITERAL - 69 | 1 << JavaParser.LPAREN - 69 | 1 << JavaParser.LT - 69 | 1 << JavaParser.BANG - 69 | 1 << JavaParser.TILDE - 69 | 1 << JavaParser.INC - 69)) !== 0 || (_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << JavaParser.DEC - 101 | 1 << JavaParser.ADD - 101 | 1 << JavaParser.SUB - 101 | 1 << JavaParser.AT - 101 | 1 << JavaParser.IDENTIFIER - 101)) !== 0) {
            this.state = 1266;
            localctx.forUpdate = this.expressionList();
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  forInit() {
    let localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, JavaParser.RULE_forInit);
    try {
      this.state = 1273;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 151, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1271;
          this.localVariableDeclaration();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1272;
          this.expressionList();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  enhancedForControl() {
    let localctx = new EnhancedForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, JavaParser.RULE_enhancedForControl);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1278;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 152, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1275;
          this.variableModifier();
        }
        this.state = 1280;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 152, this._ctx);
      }
      this.state = 1283;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 153, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1281;
          this.typeType();
          break;
        case 2:
          this.state = 1282;
          this.match(JavaParser.VAR);
          break;
      }
      this.state = 1285;
      this.variableDeclaratorId();
      this.state = 1286;
      this.match(JavaParser.COLON);
      this.state = 1287;
      this.expression(0);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  parExpression() {
    let localctx = new ParExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, JavaParser.RULE_parExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1289;
      this.match(JavaParser.LPAREN);
      this.state = 1290;
      this.expression(0);
      this.state = 1291;
      this.match(JavaParser.RPAREN);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  expressionList() {
    let localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, JavaParser.RULE_expressionList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1293;
      this.expression(0);
      this.state = 1298;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.COMMA) {
        this.state = 1294;
        this.match(JavaParser.COMMA);
        this.state = 1295;
        this.expression(0);
        this.state = 1300;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  methodCall() {
    let localctx = new MethodCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, JavaParser.RULE_methodCall);
    var _la = 0;
    try {
      this.state = 1320;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 1301;
          this.identifier();
          this.state = 1302;
          this.match(JavaParser.LPAREN);
          this.state = 1304;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.SUPER - 37 | 1 << JavaParser.SWITCH - 37 | 1 << JavaParser.THIS - 37 | 1 << JavaParser.VOID - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37 | 1 << JavaParser.DECIMAL_LITERAL - 37 | 1 << JavaParser.HEX_LITERAL - 37)) !== 0 || (_la - 69 & ~31) == 0 && (1 << _la - 69 & (1 << JavaParser.OCT_LITERAL - 69 | 1 << JavaParser.BINARY_LITERAL - 69 | 1 << JavaParser.FLOAT_LITERAL - 69 | 1 << JavaParser.HEX_FLOAT_LITERAL - 69 | 1 << JavaParser.BOOL_LITERAL - 69 | 1 << JavaParser.CHAR_LITERAL - 69 | 1 << JavaParser.STRING_LITERAL - 69 | 1 << JavaParser.TEXT_BLOCK - 69 | 1 << JavaParser.NULL_LITERAL - 69 | 1 << JavaParser.LPAREN - 69 | 1 << JavaParser.LT - 69 | 1 << JavaParser.BANG - 69 | 1 << JavaParser.TILDE - 69 | 1 << JavaParser.INC - 69)) !== 0 || (_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << JavaParser.DEC - 101 | 1 << JavaParser.ADD - 101 | 1 << JavaParser.SUB - 101 | 1 << JavaParser.AT - 101 | 1 << JavaParser.IDENTIFIER - 101)) !== 0) {
            this.state = 1303;
            this.expressionList();
          }
          this.state = 1306;
          this.match(JavaParser.RPAREN);
          break;
        case JavaParser.THIS:
          this.enterOuterAlt(localctx, 2);
          this.state = 1308;
          this.match(JavaParser.THIS);
          this.state = 1309;
          this.match(JavaParser.LPAREN);
          this.state = 1311;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.SUPER - 37 | 1 << JavaParser.SWITCH - 37 | 1 << JavaParser.THIS - 37 | 1 << JavaParser.VOID - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37 | 1 << JavaParser.DECIMAL_LITERAL - 37 | 1 << JavaParser.HEX_LITERAL - 37)) !== 0 || (_la - 69 & ~31) == 0 && (1 << _la - 69 & (1 << JavaParser.OCT_LITERAL - 69 | 1 << JavaParser.BINARY_LITERAL - 69 | 1 << JavaParser.FLOAT_LITERAL - 69 | 1 << JavaParser.HEX_FLOAT_LITERAL - 69 | 1 << JavaParser.BOOL_LITERAL - 69 | 1 << JavaParser.CHAR_LITERAL - 69 | 1 << JavaParser.STRING_LITERAL - 69 | 1 << JavaParser.TEXT_BLOCK - 69 | 1 << JavaParser.NULL_LITERAL - 69 | 1 << JavaParser.LPAREN - 69 | 1 << JavaParser.LT - 69 | 1 << JavaParser.BANG - 69 | 1 << JavaParser.TILDE - 69 | 1 << JavaParser.INC - 69)) !== 0 || (_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << JavaParser.DEC - 101 | 1 << JavaParser.ADD - 101 | 1 << JavaParser.SUB - 101 | 1 << JavaParser.AT - 101 | 1 << JavaParser.IDENTIFIER - 101)) !== 0) {
            this.state = 1310;
            this.expressionList();
          }
          this.state = 1313;
          this.match(JavaParser.RPAREN);
          break;
        case JavaParser.SUPER:
          this.enterOuterAlt(localctx, 3);
          this.state = 1314;
          this.match(JavaParser.SUPER);
          this.state = 1315;
          this.match(JavaParser.LPAREN);
          this.state = 1317;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.SUPER - 37 | 1 << JavaParser.SWITCH - 37 | 1 << JavaParser.THIS - 37 | 1 << JavaParser.VOID - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37 | 1 << JavaParser.DECIMAL_LITERAL - 37 | 1 << JavaParser.HEX_LITERAL - 37)) !== 0 || (_la - 69 & ~31) == 0 && (1 << _la - 69 & (1 << JavaParser.OCT_LITERAL - 69 | 1 << JavaParser.BINARY_LITERAL - 69 | 1 << JavaParser.FLOAT_LITERAL - 69 | 1 << JavaParser.HEX_FLOAT_LITERAL - 69 | 1 << JavaParser.BOOL_LITERAL - 69 | 1 << JavaParser.CHAR_LITERAL - 69 | 1 << JavaParser.STRING_LITERAL - 69 | 1 << JavaParser.TEXT_BLOCK - 69 | 1 << JavaParser.NULL_LITERAL - 69 | 1 << JavaParser.LPAREN - 69 | 1 << JavaParser.LT - 69 | 1 << JavaParser.BANG - 69 | 1 << JavaParser.TILDE - 69 | 1 << JavaParser.INC - 69)) !== 0 || (_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << JavaParser.DEC - 101 | 1 << JavaParser.ADD - 101 | 1 << JavaParser.SUB - 101 | 1 << JavaParser.AT - 101 | 1 << JavaParser.IDENTIFIER - 101)) !== 0) {
            this.state = 1316;
            this.expressionList();
          }
          this.state = 1319;
          this.match(JavaParser.RPAREN);
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  expression(_p) {
    if (_p === void 0) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new ExpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 194;
    this.enterRecursionRule(localctx, 194, JavaParser.RULE_expression, _p);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1367;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 164, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1323;
          this.primary();
          break;
        case 2:
          this.state = 1324;
          this.methodCall();
          break;
        case 3:
          this.state = 1325;
          this.match(JavaParser.NEW);
          this.state = 1326;
          this.creator();
          break;
        case 4:
          this.state = 1327;
          this.match(JavaParser.LPAREN);
          this.state = 1331;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 159, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1328;
              this.annotation();
            }
            this.state = 1333;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 159, this._ctx);
          }
          this.state = 1334;
          this.typeType();
          this.state = 1339;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === JavaParser.BITAND) {
            this.state = 1335;
            this.match(JavaParser.BITAND);
            this.state = 1336;
            this.typeType();
            this.state = 1341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1342;
          this.match(JavaParser.RPAREN);
          this.state = 1343;
          this.expression(22);
          break;
        case 5:
          this.state = 1345;
          localctx.prefix = this._input.LT(1);
          _la = this._input.LA(1);
          if (!((_la - 100 & ~31) == 0 && (1 << _la - 100 & (1 << JavaParser.INC - 100 | 1 << JavaParser.DEC - 100 | 1 << JavaParser.ADD - 100 | 1 << JavaParser.SUB - 100)) !== 0)) {
            localctx.prefix = this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1346;
          this.expression(20);
          break;
        case 6:
          this.state = 1347;
          localctx.prefix = this._input.LT(1);
          _la = this._input.LA(1);
          if (!(_la === JavaParser.BANG || _la === JavaParser.TILDE)) {
            localctx.prefix = this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1348;
          this.expression(19);
          break;
        case 7:
          this.state = 1349;
          this.lambdaExpression();
          break;
        case 8:
          this.state = 1350;
          this.switchExpression();
          break;
        case 9:
          this.state = 1351;
          this.typeType();
          this.state = 1352;
          this.match(JavaParser.COLONCOLON);
          this.state = 1358;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case JavaParser.MODULE:
            case JavaParser.OPEN:
            case JavaParser.REQUIRES:
            case JavaParser.EXPORTS:
            case JavaParser.OPENS:
            case JavaParser.TO:
            case JavaParser.USES:
            case JavaParser.PROVIDES:
            case JavaParser.WITH:
            case JavaParser.TRANSITIVE:
            case JavaParser.VAR:
            case JavaParser.YIELD:
            case JavaParser.RECORD:
            case JavaParser.SEALED:
            case JavaParser.PERMITS:
            case JavaParser.LT:
            case JavaParser.IDENTIFIER:
              this.state = 1354;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === JavaParser.LT) {
                this.state = 1353;
                this.typeArguments();
              }
              this.state = 1356;
              this.identifier();
              break;
            case JavaParser.NEW:
              this.state = 1357;
              this.match(JavaParser.NEW);
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
        case 10:
          this.state = 1360;
          this.classType();
          this.state = 1361;
          this.match(JavaParser.COLONCOLON);
          this.state = 1363;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.LT) {
            this.state = 1362;
            this.typeArguments();
          }
          this.state = 1365;
          this.match(JavaParser.NEW);
          break;
      }
      this._ctx.stop = this._input.LT(-1);
      this.state = 1452;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 171, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          this.state = 1450;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 170, this._ctx);
          switch (la_) {
            case 1:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1369;
              if (!this.precpred(this._ctx, 18)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
              }
              this.state = 1370;
              localctx.bop = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 104 & ~31) == 0 && (1 << _la - 104 & (1 << JavaParser.MUL - 104 | 1 << JavaParser.DIV - 104 | 1 << JavaParser.MOD - 104)) !== 0)) {
                localctx.bop = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1371;
              this.expression(19);
              break;
            case 2:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1372;
              if (!this.precpred(this._ctx, 17)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
              }
              this.state = 1373;
              localctx.bop = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === JavaParser.ADD || _la === JavaParser.SUB)) {
                localctx.bop = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1374;
              this.expression(18);
              break;
            case 3:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1375;
              if (!this.precpred(this._ctx, 16)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
              }
              this.state = 1383;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 165, this._ctx);
              switch (la_) {
                case 1:
                  this.state = 1376;
                  this.match(JavaParser.LT);
                  this.state = 1377;
                  this.match(JavaParser.LT);
                  break;
                case 2:
                  this.state = 1378;
                  this.match(JavaParser.GT);
                  this.state = 1379;
                  this.match(JavaParser.GT);
                  this.state = 1380;
                  this.match(JavaParser.GT);
                  break;
                case 3:
                  this.state = 1381;
                  this.match(JavaParser.GT);
                  this.state = 1382;
                  this.match(JavaParser.GT);
                  break;
              }
              this.state = 1385;
              this.expression(17);
              break;
            case 4:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1386;
              if (!this.precpred(this._ctx, 15)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
              }
              this.state = 1387;
              localctx.bop = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 88 & ~31) == 0 && (1 << _la - 88 & (1 << JavaParser.GT - 88 | 1 << JavaParser.LT - 88 | 1 << JavaParser.LE - 88 | 1 << JavaParser.GE - 88)) !== 0)) {
                localctx.bop = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1388;
              this.expression(16);
              break;
            case 5:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1389;
              if (!this.precpred(this._ctx, 13)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
              }
              this.state = 1390;
              localctx.bop = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === JavaParser.EQUAL || _la === JavaParser.NOTEQUAL)) {
                localctx.bop = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1391;
              this.expression(14);
              break;
            case 6:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1392;
              if (!this.precpred(this._ctx, 12)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
              }
              this.state = 1393;
              localctx.bop = this.match(JavaParser.BITAND);
              this.state = 1394;
              this.expression(13);
              break;
            case 7:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1395;
              if (!this.precpred(this._ctx, 11)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
              }
              this.state = 1396;
              localctx.bop = this.match(JavaParser.CARET);
              this.state = 1397;
              this.expression(12);
              break;
            case 8:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1398;
              if (!this.precpred(this._ctx, 10)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
              }
              this.state = 1399;
              localctx.bop = this.match(JavaParser.BITOR);
              this.state = 1400;
              this.expression(11);
              break;
            case 9:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1401;
              if (!this.precpred(this._ctx, 9)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
              }
              this.state = 1402;
              localctx.bop = this.match(JavaParser.AND);
              this.state = 1403;
              this.expression(10);
              break;
            case 10:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1404;
              if (!this.precpred(this._ctx, 8)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
              }
              this.state = 1405;
              localctx.bop = this.match(JavaParser.OR);
              this.state = 1406;
              this.expression(9);
              break;
            case 11:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1407;
              if (!this.precpred(this._ctx, 7)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
              }
              this.state = 1408;
              localctx.bop = this.match(JavaParser.QUESTION);
              this.state = 1409;
              this.expression(0);
              this.state = 1410;
              this.match(JavaParser.COLON);
              this.state = 1411;
              this.expression(7);
              break;
            case 12:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1413;
              if (!this.precpred(this._ctx, 6)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
              }
              this.state = 1414;
              localctx.bop = this._input.LT(1);
              _la = this._input.LA(1);
              if (!((_la - 87 & ~31) == 0 && (1 << _la - 87 & (1 << JavaParser.ASSIGN - 87 | 1 << JavaParser.ADD_ASSIGN - 87 | 1 << JavaParser.SUB_ASSIGN - 87 | 1 << JavaParser.MUL_ASSIGN - 87 | 1 << JavaParser.DIV_ASSIGN - 87 | 1 << JavaParser.AND_ASSIGN - 87 | 1 << JavaParser.OR_ASSIGN - 87 | 1 << JavaParser.XOR_ASSIGN - 87 | 1 << JavaParser.MOD_ASSIGN - 87 | 1 << JavaParser.LSHIFT_ASSIGN - 87)) !== 0 || _la === JavaParser.RSHIFT_ASSIGN || _la === JavaParser.URSHIFT_ASSIGN)) {
                localctx.bop = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1415;
              this.expression(6);
              break;
            case 13:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1416;
              if (!this.precpred(this._ctx, 26)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
              }
              this.state = 1417;
              localctx.bop = this.match(JavaParser.DOT);
              this.state = 1429;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 167, this._ctx);
              switch (la_) {
                case 1:
                  this.state = 1418;
                  this.identifier();
                  break;
                case 2:
                  this.state = 1419;
                  this.methodCall();
                  break;
                case 3:
                  this.state = 1420;
                  this.match(JavaParser.THIS);
                  break;
                case 4:
                  this.state = 1421;
                  this.match(JavaParser.NEW);
                  this.state = 1423;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === JavaParser.LT) {
                    this.state = 1422;
                    this.nonWildcardTypeArguments();
                  }
                  this.state = 1425;
                  this.innerCreator();
                  break;
                case 5:
                  this.state = 1426;
                  this.match(JavaParser.SUPER);
                  this.state = 1427;
                  this.superSuffix();
                  break;
                case 6:
                  this.state = 1428;
                  this.explicitGenericInvocation();
                  break;
              }
              break;
            case 14:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1431;
              if (!this.precpred(this._ctx, 25)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
              }
              this.state = 1432;
              this.match(JavaParser.LBRACK);
              this.state = 1433;
              this.expression(0);
              this.state = 1434;
              this.match(JavaParser.RBRACK);
              break;
            case 15:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1436;
              if (!this.precpred(this._ctx, 21)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
              }
              this.state = 1437;
              localctx.postfix = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === JavaParser.INC || _la === JavaParser.DEC)) {
                localctx.postfix = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              break;
            case 16:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1438;
              if (!this.precpred(this._ctx, 14)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
              }
              this.state = 1439;
              localctx.bop = this.match(JavaParser.INSTANCEOF);
              this.state = 1442;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 168, this._ctx);
              switch (la_) {
                case 1:
                  this.state = 1440;
                  this.typeType();
                  break;
                case 2:
                  this.state = 1441;
                  this.pattern();
                  break;
              }
              break;
            case 17:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
              this.state = 1444;
              if (!this.precpred(this._ctx, 3)) {
                throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
              }
              this.state = 1445;
              this.match(JavaParser.COLONCOLON);
              this.state = 1447;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === JavaParser.LT) {
                this.state = 1446;
                this.typeArguments();
              }
              this.state = 1449;
              this.identifier();
              break;
          }
        }
        this.state = 1454;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 171, this._ctx);
      }
    } catch (error) {
      if (error instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  pattern() {
    let localctx = new PatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, JavaParser.RULE_pattern);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1458;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 172, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1455;
          this.variableModifier();
        }
        this.state = 1460;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 172, this._ctx);
      }
      this.state = 1461;
      this.typeType();
      this.state = 1465;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 173, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1462;
          this.annotation();
        }
        this.state = 1467;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 173, this._ctx);
      }
      this.state = 1468;
      this.identifier();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lambdaExpression() {
    let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, JavaParser.RULE_lambdaExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1470;
      this.lambdaParameters();
      this.state = 1471;
      this.match(JavaParser.ARROW);
      this.state = 1472;
      this.lambdaBody();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lambdaParameters() {
    let localctx = new LambdaParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, JavaParser.RULE_lambdaParameters);
    var _la = 0;
    try {
      this.state = 1496;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 177, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1474;
          this.identifier();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1475;
          this.match(JavaParser.LPAREN);
          this.state = 1477;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
            this.state = 1476;
            this.formalParameterList();
          }
          this.state = 1479;
          this.match(JavaParser.RPAREN);
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1480;
          this.match(JavaParser.LPAREN);
          this.state = 1481;
          this.identifier();
          this.state = 1486;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === JavaParser.COMMA) {
            this.state = 1482;
            this.match(JavaParser.COMMA);
            this.state = 1483;
            this.identifier();
            this.state = 1488;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1489;
          this.match(JavaParser.RPAREN);
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1491;
          this.match(JavaParser.LPAREN);
          this.state = 1493;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.FINAL || (_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
            this.state = 1492;
            this.lambdaLVTIList();
          }
          this.state = 1495;
          this.match(JavaParser.RPAREN);
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  lambdaBody() {
    let localctx = new LambdaBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, JavaParser.RULE_lambdaBody);
    try {
      this.state = 1500;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.BOOLEAN:
        case JavaParser.BYTE:
        case JavaParser.CHAR:
        case JavaParser.DOUBLE:
        case JavaParser.FLOAT:
        case JavaParser.INT:
        case JavaParser.LONG:
        case JavaParser.NEW:
        case JavaParser.SHORT:
        case JavaParser.SUPER:
        case JavaParser.SWITCH:
        case JavaParser.THIS:
        case JavaParser.VOID:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.DECIMAL_LITERAL:
        case JavaParser.HEX_LITERAL:
        case JavaParser.OCT_LITERAL:
        case JavaParser.BINARY_LITERAL:
        case JavaParser.FLOAT_LITERAL:
        case JavaParser.HEX_FLOAT_LITERAL:
        case JavaParser.BOOL_LITERAL:
        case JavaParser.CHAR_LITERAL:
        case JavaParser.STRING_LITERAL:
        case JavaParser.TEXT_BLOCK:
        case JavaParser.NULL_LITERAL:
        case JavaParser.LPAREN:
        case JavaParser.LT:
        case JavaParser.BANG:
        case JavaParser.TILDE:
        case JavaParser.INC:
        case JavaParser.DEC:
        case JavaParser.ADD:
        case JavaParser.SUB:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 1498;
          this.expression(0);
          break;
        case JavaParser.LBRACE:
          this.enterOuterAlt(localctx, 2);
          this.state = 1499;
          this.block();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  primary() {
    let localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, JavaParser.RULE_primary);
    try {
      this.state = 1520;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 180, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1502;
          this.match(JavaParser.LPAREN);
          this.state = 1503;
          this.expression(0);
          this.state = 1504;
          this.match(JavaParser.RPAREN);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1506;
          this.match(JavaParser.THIS);
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1507;
          this.match(JavaParser.SUPER);
          break;
        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1508;
          this.literal();
          break;
        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1509;
          this.identifier();
          break;
        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1510;
          this.typeTypeOrVoid();
          this.state = 1511;
          this.match(JavaParser.DOT);
          this.state = 1512;
          this.match(JavaParser.CLASS);
          break;
        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1514;
          this.nonWildcardTypeArguments();
          this.state = 1518;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case JavaParser.SUPER:
            case JavaParser.MODULE:
            case JavaParser.OPEN:
            case JavaParser.REQUIRES:
            case JavaParser.EXPORTS:
            case JavaParser.OPENS:
            case JavaParser.TO:
            case JavaParser.USES:
            case JavaParser.PROVIDES:
            case JavaParser.WITH:
            case JavaParser.TRANSITIVE:
            case JavaParser.VAR:
            case JavaParser.YIELD:
            case JavaParser.RECORD:
            case JavaParser.SEALED:
            case JavaParser.PERMITS:
            case JavaParser.IDENTIFIER:
              this.state = 1515;
              this.explicitGenericInvocationSuffix();
              break;
            case JavaParser.THIS:
              this.state = 1516;
              this.match(JavaParser.THIS);
              this.state = 1517;
              this.arguments();
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  switchExpression() {
    let localctx = new SwitchExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, JavaParser.RULE_switchExpression);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1522;
      this.match(JavaParser.SWITCH);
      this.state = 1523;
      this.parExpression();
      this.state = 1524;
      this.match(JavaParser.LBRACE);
      this.state = 1528;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.CASE || _la === JavaParser.DEFAULT) {
        this.state = 1525;
        this.switchLabeledRule();
        this.state = 1530;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1531;
      this.match(JavaParser.RBRACE);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  switchLabeledRule() {
    let localctx = new SwitchLabeledRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, JavaParser.RULE_switchLabeledRule);
    var _la = 0;
    try {
      this.state = 1544;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.CASE:
          this.enterOuterAlt(localctx, 1);
          this.state = 1533;
          this.match(JavaParser.CASE);
          this.state = 1537;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 182, this._ctx);
          switch (la_) {
            case 1:
              this.state = 1534;
              this.expressionList();
              break;
            case 2:
              this.state = 1535;
              this.match(JavaParser.NULL_LITERAL);
              break;
            case 3:
              this.state = 1536;
              this.guardedPattern(0);
              break;
          }
          this.state = 1539;
          _la = this._input.LA(1);
          if (!(_la === JavaParser.COLON || _la === JavaParser.ARROW)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1540;
          this.switchRuleOutcome();
          break;
        case JavaParser.DEFAULT:
          this.enterOuterAlt(localctx, 2);
          this.state = 1541;
          this.match(JavaParser.DEFAULT);
          this.state = 1542;
          _la = this._input.LA(1);
          if (!(_la === JavaParser.COLON || _la === JavaParser.ARROW)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1543;
          this.switchRuleOutcome();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  guardedPattern(_p) {
    if (_p === void 0) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new GuardedPatternContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 210;
    this.enterRecursionRule(localctx, 210, JavaParser.RULE_guardedPattern, _p);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1572;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.LPAREN:
          this.state = 1547;
          this.match(JavaParser.LPAREN);
          this.state = 1548;
          this.guardedPattern(0);
          this.state = 1549;
          this.match(JavaParser.RPAREN);
          break;
        case JavaParser.BOOLEAN:
        case JavaParser.BYTE:
        case JavaParser.CHAR:
        case JavaParser.DOUBLE:
        case JavaParser.FINAL:
        case JavaParser.FLOAT:
        case JavaParser.INT:
        case JavaParser.LONG:
        case JavaParser.SHORT:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.state = 1554;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 184, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1551;
              this.variableModifier();
            }
            this.state = 1556;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 184, this._ctx);
          }
          this.state = 1557;
          this.typeType();
          this.state = 1561;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 185, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1558;
              this.annotation();
            }
            this.state = 1563;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 185, this._ctx);
          }
          this.state = 1564;
          this.identifier();
          this.state = 1569;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 186, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1565;
              this.match(JavaParser.AND);
              this.state = 1566;
              this.expression(0);
            }
            this.state = 1571;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 186, this._ctx);
          }
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
      this._ctx.stop = this._input.LT(-1);
      this.state = 1579;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 188, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          localctx = new GuardedPatternContext(this, _parentctx, _parentState);
          this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_guardedPattern);
          this.state = 1574;
          if (!this.precpred(this._ctx, 1)) {
            throw new import_antlr4.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
          }
          this.state = 1575;
          this.match(JavaParser.AND);
          this.state = 1576;
          this.expression(0);
        }
        this.state = 1581;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 188, this._ctx);
      }
    } catch (error) {
      if (error instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  switchRuleOutcome() {
    let localctx = new SwitchRuleOutcomeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, JavaParser.RULE_switchRuleOutcome);
    var _la = 0;
    try {
      this.state = 1589;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 190, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1582;
          this.block();
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1586;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.ABSTRACT | 1 << JavaParser.ASSERT | 1 << JavaParser.BOOLEAN | 1 << JavaParser.BREAK | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.CLASS | 1 << JavaParser.CONTINUE | 1 << JavaParser.DO | 1 << JavaParser.DOUBLE | 1 << JavaParser.FINAL | 1 << JavaParser.FLOAT | 1 << JavaParser.FOR | 1 << JavaParser.IF | 1 << JavaParser.INT | 1 << JavaParser.INTERFACE | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 33 & ~31) == 0 && (1 << _la - 33 & (1 << JavaParser.PRIVATE - 33 | 1 << JavaParser.PROTECTED - 33 | 1 << JavaParser.PUBLIC - 33 | 1 << JavaParser.RETURN - 33 | 1 << JavaParser.SHORT - 33 | 1 << JavaParser.STATIC - 33 | 1 << JavaParser.STRICTFP - 33 | 1 << JavaParser.SUPER - 33 | 1 << JavaParser.SWITCH - 33 | 1 << JavaParser.SYNCHRONIZED - 33 | 1 << JavaParser.THIS - 33 | 1 << JavaParser.THROW - 33 | 1 << JavaParser.TRY - 33 | 1 << JavaParser.VOID - 33 | 1 << JavaParser.WHILE - 33 | 1 << JavaParser.MODULE - 33 | 1 << JavaParser.OPEN - 33 | 1 << JavaParser.REQUIRES - 33 | 1 << JavaParser.EXPORTS - 33 | 1 << JavaParser.OPENS - 33 | 1 << JavaParser.TO - 33 | 1 << JavaParser.USES - 33 | 1 << JavaParser.PROVIDES - 33 | 1 << JavaParser.WITH - 33 | 1 << JavaParser.TRANSITIVE - 33 | 1 << JavaParser.VAR - 33 | 1 << JavaParser.YIELD - 33 | 1 << JavaParser.RECORD - 33 | 1 << JavaParser.SEALED - 33)) !== 0 || (_la - 65 & ~31) == 0 && (1 << _la - 65 & (1 << JavaParser.PERMITS - 65 | 1 << JavaParser.NON_SEALED - 65 | 1 << JavaParser.DECIMAL_LITERAL - 65 | 1 << JavaParser.HEX_LITERAL - 65 | 1 << JavaParser.OCT_LITERAL - 65 | 1 << JavaParser.BINARY_LITERAL - 65 | 1 << JavaParser.FLOAT_LITERAL - 65 | 1 << JavaParser.HEX_FLOAT_LITERAL - 65 | 1 << JavaParser.BOOL_LITERAL - 65 | 1 << JavaParser.CHAR_LITERAL - 65 | 1 << JavaParser.STRING_LITERAL - 65 | 1 << JavaParser.TEXT_BLOCK - 65 | 1 << JavaParser.NULL_LITERAL - 65 | 1 << JavaParser.LPAREN - 65 | 1 << JavaParser.LBRACE - 65 | 1 << JavaParser.SEMI - 65 | 1 << JavaParser.LT - 65 | 1 << JavaParser.BANG - 65 | 1 << JavaParser.TILDE - 65)) !== 0 || (_la - 100 & ~31) == 0 && (1 << _la - 100 & (1 << JavaParser.INC - 100 | 1 << JavaParser.DEC - 100 | 1 << JavaParser.ADD - 100 | 1 << JavaParser.SUB - 100 | 1 << JavaParser.AT - 100 | 1 << JavaParser.IDENTIFIER - 100)) !== 0) {
            this.state = 1583;
            this.blockStatement();
            this.state = 1588;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classType() {
    let localctx = new ClassTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, JavaParser.RULE_classType);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1594;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 191, this._ctx);
      if (la_ === 1) {
        this.state = 1591;
        this.classOrInterfaceType();
        this.state = 1592;
        this.match(JavaParser.DOT);
      }
      this.state = 1599;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 192, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1596;
          this.annotation();
        }
        this.state = 1601;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 192, this._ctx);
      }
      this.state = 1602;
      this.identifier();
      this.state = 1604;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.LT) {
        this.state = 1603;
        this.typeArguments();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  creator() {
    let localctx = new CreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, JavaParser.RULE_creator);
    try {
      this.state = 1615;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.LT:
          this.enterOuterAlt(localctx, 1);
          this.state = 1606;
          this.nonWildcardTypeArguments();
          this.state = 1607;
          this.createdName();
          this.state = 1608;
          this.classCreatorRest();
          break;
        case JavaParser.BOOLEAN:
        case JavaParser.BYTE:
        case JavaParser.CHAR:
        case JavaParser.DOUBLE:
        case JavaParser.FLOAT:
        case JavaParser.INT:
        case JavaParser.LONG:
        case JavaParser.SHORT:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 2);
          this.state = 1610;
          this.createdName();
          this.state = 1613;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case JavaParser.LBRACK:
              this.state = 1611;
              this.arrayCreatorRest();
              break;
            case JavaParser.LPAREN:
              this.state = 1612;
              this.classCreatorRest();
              break;
            default:
              throw new import_antlr4.default.error.NoViableAltException(this);
          }
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  createdName() {
    let localctx = new CreatedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, JavaParser.RULE_createdName);
    var _la = 0;
    try {
      this.state = 1632;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 1);
          this.state = 1617;
          this.identifier();
          this.state = 1619;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.LT) {
            this.state = 1618;
            this.typeArgumentsOrDiamond();
          }
          this.state = 1628;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === JavaParser.DOT) {
            this.state = 1621;
            this.match(JavaParser.DOT);
            this.state = 1622;
            this.identifier();
            this.state = 1624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === JavaParser.LT) {
              this.state = 1623;
              this.typeArgumentsOrDiamond();
            }
            this.state = 1630;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
        case JavaParser.BOOLEAN:
        case JavaParser.BYTE:
        case JavaParser.CHAR:
        case JavaParser.DOUBLE:
        case JavaParser.FLOAT:
        case JavaParser.INT:
        case JavaParser.LONG:
        case JavaParser.SHORT:
          this.enterOuterAlt(localctx, 2);
          this.state = 1631;
          this.primitiveType();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  innerCreator() {
    let localctx = new InnerCreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, JavaParser.RULE_innerCreator);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1634;
      this.identifier();
      this.state = 1636;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === JavaParser.LT) {
        this.state = 1635;
        this.nonWildcardTypeArgumentsOrDiamond();
      }
      this.state = 1638;
      this.classCreatorRest();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arrayCreatorRest() {
    let localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, JavaParser.RULE_arrayCreatorRest);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1640;
      this.match(JavaParser.LBRACK);
      this.state = 1668;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.RBRACK:
          this.state = 1641;
          this.match(JavaParser.RBRACK);
          this.state = 1646;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === JavaParser.LBRACK) {
            this.state = 1642;
            this.match(JavaParser.LBRACK);
            this.state = 1643;
            this.match(JavaParser.RBRACK);
            this.state = 1648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1649;
          this.arrayInitializer();
          break;
        case JavaParser.BOOLEAN:
        case JavaParser.BYTE:
        case JavaParser.CHAR:
        case JavaParser.DOUBLE:
        case JavaParser.FLOAT:
        case JavaParser.INT:
        case JavaParser.LONG:
        case JavaParser.NEW:
        case JavaParser.SHORT:
        case JavaParser.SUPER:
        case JavaParser.SWITCH:
        case JavaParser.THIS:
        case JavaParser.VOID:
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.DECIMAL_LITERAL:
        case JavaParser.HEX_LITERAL:
        case JavaParser.OCT_LITERAL:
        case JavaParser.BINARY_LITERAL:
        case JavaParser.FLOAT_LITERAL:
        case JavaParser.HEX_FLOAT_LITERAL:
        case JavaParser.BOOL_LITERAL:
        case JavaParser.CHAR_LITERAL:
        case JavaParser.STRING_LITERAL:
        case JavaParser.TEXT_BLOCK:
        case JavaParser.NULL_LITERAL:
        case JavaParser.LPAREN:
        case JavaParser.LT:
        case JavaParser.BANG:
        case JavaParser.TILDE:
        case JavaParser.INC:
        case JavaParser.DEC:
        case JavaParser.ADD:
        case JavaParser.SUB:
        case JavaParser.AT:
        case JavaParser.IDENTIFIER:
          this.state = 1650;
          this.expression(0);
          this.state = 1651;
          this.match(JavaParser.RBRACK);
          this.state = 1658;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 202, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1652;
              this.match(JavaParser.LBRACK);
              this.state = 1653;
              this.expression(0);
              this.state = 1654;
              this.match(JavaParser.RBRACK);
            }
            this.state = 1660;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 202, this._ctx);
          }
          this.state = 1665;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 203, this._ctx);
          while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 1661;
              this.match(JavaParser.LBRACK);
              this.state = 1662;
              this.match(JavaParser.RBRACK);
            }
            this.state = 1667;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 203, this._ctx);
          }
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  classCreatorRest() {
    let localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, JavaParser.RULE_classCreatorRest);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1670;
      this.arguments();
      this.state = 1672;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 205, this._ctx);
      if (la_ === 1) {
        this.state = 1671;
        this.classBody();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  explicitGenericInvocation() {
    let localctx = new ExplicitGenericInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, JavaParser.RULE_explicitGenericInvocation);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1674;
      this.nonWildcardTypeArguments();
      this.state = 1675;
      this.explicitGenericInvocationSuffix();
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeArgumentsOrDiamond() {
    let localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, JavaParser.RULE_typeArgumentsOrDiamond);
    try {
      this.state = 1680;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 206, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1677;
          this.match(JavaParser.LT);
          this.state = 1678;
          this.match(JavaParser.GT);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1679;
          this.typeArguments();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  nonWildcardTypeArgumentsOrDiamond() {
    let localctx = new NonWildcardTypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond);
    try {
      this.state = 1685;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 207, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1682;
          this.match(JavaParser.LT);
          this.state = 1683;
          this.match(JavaParser.GT);
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1684;
          this.nonWildcardTypeArguments();
          break;
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  nonWildcardTypeArguments() {
    let localctx = new NonWildcardTypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, JavaParser.RULE_nonWildcardTypeArguments);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1687;
      this.match(JavaParser.LT);
      this.state = 1688;
      this.typeList();
      this.state = 1689;
      this.match(JavaParser.GT);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeList() {
    let localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, JavaParser.RULE_typeList);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1691;
      this.typeType();
      this.state = 1696;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.COMMA) {
        this.state = 1692;
        this.match(JavaParser.COMMA);
        this.state = 1693;
        this.typeType();
        this.state = 1698;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeType() {
    let localctx = new TypeTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, JavaParser.RULE_typeType);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1702;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 209, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1699;
          this.annotation();
        }
        this.state = 1704;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 209, this._ctx);
      }
      this.state = 1707;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.IDENTIFIER:
          this.state = 1705;
          this.classOrInterfaceType();
          break;
        case JavaParser.BOOLEAN:
        case JavaParser.BYTE:
        case JavaParser.CHAR:
        case JavaParser.DOUBLE:
        case JavaParser.FLOAT:
        case JavaParser.INT:
        case JavaParser.LONG:
        case JavaParser.SHORT:
          this.state = 1706;
          this.primitiveType();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
      this.state = 1719;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 212, this._ctx);
      while (_alt != 2 && _alt != import_antlr4.default.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1712;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while ((_la - 51 & ~31) == 0 && (1 << _la - 51 & (1 << JavaParser.MODULE - 51 | 1 << JavaParser.OPEN - 51 | 1 << JavaParser.REQUIRES - 51 | 1 << JavaParser.EXPORTS - 51 | 1 << JavaParser.OPENS - 51 | 1 << JavaParser.TO - 51 | 1 << JavaParser.USES - 51 | 1 << JavaParser.PROVIDES - 51 | 1 << JavaParser.WITH - 51 | 1 << JavaParser.TRANSITIVE - 51 | 1 << JavaParser.VAR - 51 | 1 << JavaParser.YIELD - 51 | 1 << JavaParser.RECORD - 51 | 1 << JavaParser.SEALED - 51 | 1 << JavaParser.PERMITS - 51)) !== 0 || _la === JavaParser.AT || _la === JavaParser.IDENTIFIER) {
            this.state = 1709;
            this.annotation();
            this.state = 1714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1715;
          this.match(JavaParser.LBRACK);
          this.state = 1716;
          this.match(JavaParser.RBRACK);
        }
        this.state = 1721;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 212, this._ctx);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  primitiveType() {
    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, JavaParser.RULE_primitiveType);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1722;
      _la = this._input.LA(1);
      if (!((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG)) !== 0 || _la === JavaParser.SHORT)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  typeArguments() {
    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, JavaParser.RULE_typeArguments);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1724;
      this.match(JavaParser.LT);
      this.state = 1725;
      this.typeArgument();
      this.state = 1730;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === JavaParser.COMMA) {
        this.state = 1726;
        this.match(JavaParser.COMMA);
        this.state = 1727;
        this.typeArgument();
        this.state = 1732;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1733;
      this.match(JavaParser.GT);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  superSuffix() {
    let localctx = new SuperSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, JavaParser.RULE_superSuffix);
    var _la = 0;
    try {
      this.state = 1744;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.LPAREN:
          this.enterOuterAlt(localctx, 1);
          this.state = 1735;
          this.arguments();
          break;
        case JavaParser.DOT:
          this.enterOuterAlt(localctx, 2);
          this.state = 1736;
          this.match(JavaParser.DOT);
          this.state = 1738;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === JavaParser.LT) {
            this.state = 1737;
            this.typeArguments();
          }
          this.state = 1740;
          this.identifier();
          this.state = 1742;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 215, this._ctx);
          if (la_ === 1) {
            this.state = 1741;
            this.arguments();
          }
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  explicitGenericInvocationSuffix() {
    let localctx = new ExplicitGenericInvocationSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, JavaParser.RULE_explicitGenericInvocationSuffix);
    try {
      this.state = 1751;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JavaParser.SUPER:
          this.enterOuterAlt(localctx, 1);
          this.state = 1746;
          this.match(JavaParser.SUPER);
          this.state = 1747;
          this.superSuffix();
          break;
        case JavaParser.MODULE:
        case JavaParser.OPEN:
        case JavaParser.REQUIRES:
        case JavaParser.EXPORTS:
        case JavaParser.OPENS:
        case JavaParser.TO:
        case JavaParser.USES:
        case JavaParser.PROVIDES:
        case JavaParser.WITH:
        case JavaParser.TRANSITIVE:
        case JavaParser.VAR:
        case JavaParser.YIELD:
        case JavaParser.RECORD:
        case JavaParser.SEALED:
        case JavaParser.PERMITS:
        case JavaParser.IDENTIFIER:
          this.enterOuterAlt(localctx, 2);
          this.state = 1748;
          this.identifier();
          this.state = 1749;
          this.arguments();
          break;
        default:
          throw new import_antlr4.default.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  arguments() {
    let localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, JavaParser.RULE_arguments);
    var _la = 0;
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1753;
      this.match(JavaParser.LPAREN);
      this.state = 1755;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~31) == 0 && (1 << _la & (1 << JavaParser.BOOLEAN | 1 << JavaParser.BYTE | 1 << JavaParser.CHAR | 1 << JavaParser.DOUBLE | 1 << JavaParser.FLOAT | 1 << JavaParser.INT | 1 << JavaParser.LONG | 1 << JavaParser.NEW)) !== 0 || (_la - 37 & ~31) == 0 && (1 << _la - 37 & (1 << JavaParser.SHORT - 37 | 1 << JavaParser.SUPER - 37 | 1 << JavaParser.SWITCH - 37 | 1 << JavaParser.THIS - 37 | 1 << JavaParser.VOID - 37 | 1 << JavaParser.MODULE - 37 | 1 << JavaParser.OPEN - 37 | 1 << JavaParser.REQUIRES - 37 | 1 << JavaParser.EXPORTS - 37 | 1 << JavaParser.OPENS - 37 | 1 << JavaParser.TO - 37 | 1 << JavaParser.USES - 37 | 1 << JavaParser.PROVIDES - 37 | 1 << JavaParser.WITH - 37 | 1 << JavaParser.TRANSITIVE - 37 | 1 << JavaParser.VAR - 37 | 1 << JavaParser.YIELD - 37 | 1 << JavaParser.RECORD - 37 | 1 << JavaParser.SEALED - 37 | 1 << JavaParser.PERMITS - 37 | 1 << JavaParser.DECIMAL_LITERAL - 37 | 1 << JavaParser.HEX_LITERAL - 37)) !== 0 || (_la - 69 & ~31) == 0 && (1 << _la - 69 & (1 << JavaParser.OCT_LITERAL - 69 | 1 << JavaParser.BINARY_LITERAL - 69 | 1 << JavaParser.FLOAT_LITERAL - 69 | 1 << JavaParser.HEX_FLOAT_LITERAL - 69 | 1 << JavaParser.BOOL_LITERAL - 69 | 1 << JavaParser.CHAR_LITERAL - 69 | 1 << JavaParser.STRING_LITERAL - 69 | 1 << JavaParser.TEXT_BLOCK - 69 | 1 << JavaParser.NULL_LITERAL - 69 | 1 << JavaParser.LPAREN - 69 | 1 << JavaParser.LT - 69 | 1 << JavaParser.BANG - 69 | 1 << JavaParser.TILDE - 69 | 1 << JavaParser.INC - 69)) !== 0 || (_la - 101 & ~31) == 0 && (1 << _la - 101 & (1 << JavaParser.DEC - 101 | 1 << JavaParser.ADD - 101 | 1 << JavaParser.SUB - 101 | 1 << JavaParser.AT - 101 | 1 << JavaParser.IDENTIFIER - 101)) !== 0) {
        this.state = 1754;
        this.expressionList();
      }
      this.state = 1757;
      this.match(JavaParser.RPAREN);
    } catch (re) {
      if (re instanceof import_antlr4.default.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
}
JavaParser.EOF = import_antlr4.default.Token.EOF;
JavaParser.ABSTRACT = 1;
JavaParser.ASSERT = 2;
JavaParser.BOOLEAN = 3;
JavaParser.BREAK = 4;
JavaParser.BYTE = 5;
JavaParser.CASE = 6;
JavaParser.CATCH = 7;
JavaParser.CHAR = 8;
JavaParser.CLASS = 9;
JavaParser.CONST = 10;
JavaParser.CONTINUE = 11;
JavaParser.DEFAULT = 12;
JavaParser.DO = 13;
JavaParser.DOUBLE = 14;
JavaParser.ELSE = 15;
JavaParser.ENUM = 16;
JavaParser.EXTENDS = 17;
JavaParser.FINAL = 18;
JavaParser.FINALLY = 19;
JavaParser.FLOAT = 20;
JavaParser.FOR = 21;
JavaParser.IF = 22;
JavaParser.GOTO = 23;
JavaParser.IMPLEMENTS = 24;
JavaParser.IMPORT = 25;
JavaParser.INSTANCEOF = 26;
JavaParser.INT = 27;
JavaParser.INTERFACE = 28;
JavaParser.LONG = 29;
JavaParser.NATIVE = 30;
JavaParser.NEW = 31;
JavaParser.PACKAGE = 32;
JavaParser.PRIVATE = 33;
JavaParser.PROTECTED = 34;
JavaParser.PUBLIC = 35;
JavaParser.RETURN = 36;
JavaParser.SHORT = 37;
JavaParser.STATIC = 38;
JavaParser.STRICTFP = 39;
JavaParser.SUPER = 40;
JavaParser.SWITCH = 41;
JavaParser.SYNCHRONIZED = 42;
JavaParser.THIS = 43;
JavaParser.THROW = 44;
JavaParser.THROWS = 45;
JavaParser.TRANSIENT = 46;
JavaParser.TRY = 47;
JavaParser.VOID = 48;
JavaParser.VOLATILE = 49;
JavaParser.WHILE = 50;
JavaParser.MODULE = 51;
JavaParser.OPEN = 52;
JavaParser.REQUIRES = 53;
JavaParser.EXPORTS = 54;
JavaParser.OPENS = 55;
JavaParser.TO = 56;
JavaParser.USES = 57;
JavaParser.PROVIDES = 58;
JavaParser.WITH = 59;
JavaParser.TRANSITIVE = 60;
JavaParser.VAR = 61;
JavaParser.YIELD = 62;
JavaParser.RECORD = 63;
JavaParser.SEALED = 64;
JavaParser.PERMITS = 65;
JavaParser.NON_SEALED = 66;
JavaParser.DECIMAL_LITERAL = 67;
JavaParser.HEX_LITERAL = 68;
JavaParser.OCT_LITERAL = 69;
JavaParser.BINARY_LITERAL = 70;
JavaParser.FLOAT_LITERAL = 71;
JavaParser.HEX_FLOAT_LITERAL = 72;
JavaParser.BOOL_LITERAL = 73;
JavaParser.CHAR_LITERAL = 74;
JavaParser.STRING_LITERAL = 75;
JavaParser.TEXT_BLOCK = 76;
JavaParser.NULL_LITERAL = 77;
JavaParser.LPAREN = 78;
JavaParser.RPAREN = 79;
JavaParser.LBRACE = 80;
JavaParser.RBRACE = 81;
JavaParser.LBRACK = 82;
JavaParser.RBRACK = 83;
JavaParser.SEMI = 84;
JavaParser.COMMA = 85;
JavaParser.DOT = 86;
JavaParser.ASSIGN = 87;
JavaParser.GT = 88;
JavaParser.LT = 89;
JavaParser.BANG = 90;
JavaParser.TILDE = 91;
JavaParser.QUESTION = 92;
JavaParser.COLON = 93;
JavaParser.EQUAL = 94;
JavaParser.LE = 95;
JavaParser.GE = 96;
JavaParser.NOTEQUAL = 97;
JavaParser.AND = 98;
JavaParser.OR = 99;
JavaParser.INC = 100;
JavaParser.DEC = 101;
JavaParser.ADD = 102;
JavaParser.SUB = 103;
JavaParser.MUL = 104;
JavaParser.DIV = 105;
JavaParser.BITAND = 106;
JavaParser.BITOR = 107;
JavaParser.CARET = 108;
JavaParser.MOD = 109;
JavaParser.ADD_ASSIGN = 110;
JavaParser.SUB_ASSIGN = 111;
JavaParser.MUL_ASSIGN = 112;
JavaParser.DIV_ASSIGN = 113;
JavaParser.AND_ASSIGN = 114;
JavaParser.OR_ASSIGN = 115;
JavaParser.XOR_ASSIGN = 116;
JavaParser.MOD_ASSIGN = 117;
JavaParser.LSHIFT_ASSIGN = 118;
JavaParser.RSHIFT_ASSIGN = 119;
JavaParser.URSHIFT_ASSIGN = 120;
JavaParser.ARROW = 121;
JavaParser.COLONCOLON = 122;
JavaParser.AT = 123;
JavaParser.ELLIPSIS = 124;
JavaParser.WS = 125;
JavaParser.COMMENT = 126;
JavaParser.LINE_COMMENT = 127;
JavaParser.IDENTIFIER = 128;
JavaParser.RULE_compilationUnit = 0;
JavaParser.RULE_packageDeclaration = 1;
JavaParser.RULE_importDeclaration = 2;
JavaParser.RULE_typeDeclaration = 3;
JavaParser.RULE_modifier = 4;
JavaParser.RULE_classOrInterfaceModifier = 5;
JavaParser.RULE_variableModifier = 6;
JavaParser.RULE_classDeclaration = 7;
JavaParser.RULE_typeParameters = 8;
JavaParser.RULE_typeParameter = 9;
JavaParser.RULE_typeBound = 10;
JavaParser.RULE_enumDeclaration = 11;
JavaParser.RULE_enumConstants = 12;
JavaParser.RULE_enumConstant = 13;
JavaParser.RULE_enumBodyDeclarations = 14;
JavaParser.RULE_interfaceDeclaration = 15;
JavaParser.RULE_classBody = 16;
JavaParser.RULE_interfaceBody = 17;
JavaParser.RULE_classBodyDeclaration = 18;
JavaParser.RULE_memberDeclaration = 19;
JavaParser.RULE_methodDeclaration = 20;
JavaParser.RULE_methodBody = 21;
JavaParser.RULE_typeTypeOrVoid = 22;
JavaParser.RULE_genericMethodDeclaration = 23;
JavaParser.RULE_genericConstructorDeclaration = 24;
JavaParser.RULE_constructorDeclaration = 25;
JavaParser.RULE_fieldDeclaration = 26;
JavaParser.RULE_interfaceBodyDeclaration = 27;
JavaParser.RULE_interfaceMemberDeclaration = 28;
JavaParser.RULE_constDeclaration = 29;
JavaParser.RULE_constantDeclarator = 30;
JavaParser.RULE_interfaceMethodDeclaration = 31;
JavaParser.RULE_interfaceMethodModifier = 32;
JavaParser.RULE_genericInterfaceMethodDeclaration = 33;
JavaParser.RULE_interfaceCommonBodyDeclaration = 34;
JavaParser.RULE_variableDeclarators = 35;
JavaParser.RULE_variableDeclarator = 36;
JavaParser.RULE_variableDeclaratorId = 37;
JavaParser.RULE_variableInitializer = 38;
JavaParser.RULE_arrayInitializer = 39;
JavaParser.RULE_classOrInterfaceType = 40;
JavaParser.RULE_typeArgument = 41;
JavaParser.RULE_qualifiedNameList = 42;
JavaParser.RULE_formalParameters = 43;
JavaParser.RULE_receiverParameter = 44;
JavaParser.RULE_formalParameterList = 45;
JavaParser.RULE_formalParameter = 46;
JavaParser.RULE_lastFormalParameter = 47;
JavaParser.RULE_lambdaLVTIList = 48;
JavaParser.RULE_lambdaLVTIParameter = 49;
JavaParser.RULE_qualifiedName = 50;
JavaParser.RULE_literal = 51;
JavaParser.RULE_integerLiteral = 52;
JavaParser.RULE_floatLiteral = 53;
JavaParser.RULE_altAnnotationQualifiedName = 54;
JavaParser.RULE_annotation = 55;
JavaParser.RULE_elementValuePairs = 56;
JavaParser.RULE_elementValuePair = 57;
JavaParser.RULE_elementValue = 58;
JavaParser.RULE_elementValueArrayInitializer = 59;
JavaParser.RULE_annotationTypeDeclaration = 60;
JavaParser.RULE_annotationTypeBody = 61;
JavaParser.RULE_annotationTypeElementDeclaration = 62;
JavaParser.RULE_annotationTypeElementRest = 63;
JavaParser.RULE_annotationMethodOrConstantRest = 64;
JavaParser.RULE_annotationMethodRest = 65;
JavaParser.RULE_annotationConstantRest = 66;
JavaParser.RULE_defaultValue = 67;
JavaParser.RULE_moduleDeclaration = 68;
JavaParser.RULE_moduleBody = 69;
JavaParser.RULE_moduleDirective = 70;
JavaParser.RULE_requiresModifier = 71;
JavaParser.RULE_recordDeclaration = 72;
JavaParser.RULE_recordHeader = 73;
JavaParser.RULE_recordComponentList = 74;
JavaParser.RULE_recordComponent = 75;
JavaParser.RULE_recordBody = 76;
JavaParser.RULE_block = 77;
JavaParser.RULE_blockStatement = 78;
JavaParser.RULE_localVariableDeclaration = 79;
JavaParser.RULE_identifier = 80;
JavaParser.RULE_localTypeDeclaration = 81;
JavaParser.RULE_statement = 82;
JavaParser.RULE_catchClause = 83;
JavaParser.RULE_catchType = 84;
JavaParser.RULE_finallyBlock = 85;
JavaParser.RULE_resourceSpecification = 86;
JavaParser.RULE_resources = 87;
JavaParser.RULE_resource = 88;
JavaParser.RULE_switchBlockStatementGroup = 89;
JavaParser.RULE_switchLabel = 90;
JavaParser.RULE_forControl = 91;
JavaParser.RULE_forInit = 92;
JavaParser.RULE_enhancedForControl = 93;
JavaParser.RULE_parExpression = 94;
JavaParser.RULE_expressionList = 95;
JavaParser.RULE_methodCall = 96;
JavaParser.RULE_expression = 97;
JavaParser.RULE_pattern = 98;
JavaParser.RULE_lambdaExpression = 99;
JavaParser.RULE_lambdaParameters = 100;
JavaParser.RULE_lambdaBody = 101;
JavaParser.RULE_primary = 102;
JavaParser.RULE_switchExpression = 103;
JavaParser.RULE_switchLabeledRule = 104;
JavaParser.RULE_guardedPattern = 105;
JavaParser.RULE_switchRuleOutcome = 106;
JavaParser.RULE_classType = 107;
JavaParser.RULE_creator = 108;
JavaParser.RULE_createdName = 109;
JavaParser.RULE_innerCreator = 110;
JavaParser.RULE_arrayCreatorRest = 111;
JavaParser.RULE_classCreatorRest = 112;
JavaParser.RULE_explicitGenericInvocation = 113;
JavaParser.RULE_typeArgumentsOrDiamond = 114;
JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond = 115;
JavaParser.RULE_nonWildcardTypeArguments = 116;
JavaParser.RULE_typeList = 117;
JavaParser.RULE_typeType = 118;
JavaParser.RULE_primitiveType = 119;
JavaParser.RULE_typeArguments = 120;
JavaParser.RULE_superSuffix = 121;
JavaParser.RULE_explicitGenericInvocationSuffix = 122;
JavaParser.RULE_arguments = 123;
class CompilationUnitContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_compilationUnit;
  }
  packageDeclaration() {
    return this.getTypedRuleContext(PackageDeclarationContext, 0);
  }
  importDeclaration = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ImportDeclarationContext);
    } else {
      return this.getTypedRuleContext(ImportDeclarationContext, i);
    }
  };
  typeDeclaration = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypeDeclarationContext);
    } else {
      return this.getTypedRuleContext(TypeDeclarationContext, i);
    }
  };
  moduleDeclaration() {
    return this.getTypedRuleContext(ModuleDeclarationContext, 0);
  }
  EOF() {
    return this.getToken(JavaParser.EOF, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterCompilationUnit(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitCompilationUnit(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitCompilationUnit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PackageDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_packageDeclaration;
  }
  PACKAGE() {
    return this.getToken(JavaParser.PACKAGE, 0);
  }
  qualifiedName() {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
  }
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterPackageDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitPackageDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitPackageDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ImportDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_importDeclaration;
  }
  IMPORT() {
    return this.getToken(JavaParser.IMPORT, 0);
  }
  qualifiedName() {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
  }
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  STATIC() {
    return this.getToken(JavaParser.STATIC, 0);
  }
  DOT() {
    return this.getToken(JavaParser.DOT, 0);
  }
  MUL() {
    return this.getToken(JavaParser.MUL, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterImportDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitImportDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitImportDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_typeDeclaration;
  }
  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }
  enumDeclaration() {
    return this.getTypedRuleContext(EnumDeclarationContext, 0);
  }
  interfaceDeclaration() {
    return this.getTypedRuleContext(InterfaceDeclarationContext, 0);
  }
  annotationTypeDeclaration() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext, 0);
  }
  recordDeclaration() {
    return this.getTypedRuleContext(RecordDeclarationContext, 0);
  }
  classOrInterfaceModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
    } else {
      return this.getTypedRuleContext(ClassOrInterfaceModifierContext, i);
    }
  };
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterTypeDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitTypeDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitTypeDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ModifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_modifier;
  }
  classOrInterfaceModifier() {
    return this.getTypedRuleContext(ClassOrInterfaceModifierContext, 0);
  }
  NATIVE() {
    return this.getToken(JavaParser.NATIVE, 0);
  }
  SYNCHRONIZED() {
    return this.getToken(JavaParser.SYNCHRONIZED, 0);
  }
  TRANSIENT() {
    return this.getToken(JavaParser.TRANSIENT, 0);
  }
  VOLATILE() {
    return this.getToken(JavaParser.VOLATILE, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterModifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitModifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitModifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassOrInterfaceModifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_classOrInterfaceModifier;
  }
  annotation() {
    return this.getTypedRuleContext(AnnotationContext, 0);
  }
  PUBLIC() {
    return this.getToken(JavaParser.PUBLIC, 0);
  }
  PROTECTED() {
    return this.getToken(JavaParser.PROTECTED, 0);
  }
  PRIVATE() {
    return this.getToken(JavaParser.PRIVATE, 0);
  }
  STATIC() {
    return this.getToken(JavaParser.STATIC, 0);
  }
  ABSTRACT() {
    return this.getToken(JavaParser.ABSTRACT, 0);
  }
  FINAL() {
    return this.getToken(JavaParser.FINAL, 0);
  }
  STRICTFP() {
    return this.getToken(JavaParser.STRICTFP, 0);
  }
  SEALED() {
    return this.getToken(JavaParser.SEALED, 0);
  }
  NON_SEALED() {
    return this.getToken(JavaParser.NON_SEALED, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterClassOrInterfaceModifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitClassOrInterfaceModifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitClassOrInterfaceModifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableModifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_variableModifier;
  }
  FINAL() {
    return this.getToken(JavaParser.FINAL, 0);
  }
  annotation() {
    return this.getTypedRuleContext(AnnotationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterVariableModifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitVariableModifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitVariableModifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_classDeclaration;
  }
  CLASS() {
    return this.getToken(JavaParser.CLASS, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  classBody() {
    return this.getTypedRuleContext(ClassBodyContext, 0);
  }
  typeParameters() {
    return this.getTypedRuleContext(TypeParametersContext, 0);
  }
  EXTENDS() {
    return this.getToken(JavaParser.EXTENDS, 0);
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  IMPLEMENTS() {
    return this.getToken(JavaParser.IMPLEMENTS, 0);
  }
  typeList = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypeListContext);
    } else {
      return this.getTypedRuleContext(TypeListContext, i);
    }
  };
  PERMITS() {
    return this.getToken(JavaParser.PERMITS, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterClassDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitClassDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitClassDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeParametersContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_typeParameters;
  }
  LT() {
    return this.getToken(JavaParser.LT, 0);
  }
  typeParameter = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypeParameterContext);
    } else {
      return this.getTypedRuleContext(TypeParameterContext, i);
    }
  };
  GT() {
    return this.getToken(JavaParser.GT, 0);
  }
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterTypeParameters(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitTypeParameters(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitTypeParameters(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeParameterContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_typeParameter;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  EXTENDS() {
    return this.getToken(JavaParser.EXTENDS, 0);
  }
  typeBound() {
    return this.getTypedRuleContext(TypeBoundContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterTypeParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitTypeParameter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitTypeParameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeBoundContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_typeBound;
  }
  typeType = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypeTypeContext);
    } else {
      return this.getTypedRuleContext(TypeTypeContext, i);
    }
  };
  BITAND = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.BITAND);
    } else {
      return this.getToken(JavaParser.BITAND, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterTypeBound(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitTypeBound(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitTypeBound(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_enumDeclaration;
  }
  ENUM() {
    return this.getToken(JavaParser.ENUM, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  IMPLEMENTS() {
    return this.getToken(JavaParser.IMPLEMENTS, 0);
  }
  typeList() {
    return this.getTypedRuleContext(TypeListContext, 0);
  }
  enumConstants() {
    return this.getTypedRuleContext(EnumConstantsContext, 0);
  }
  COMMA() {
    return this.getToken(JavaParser.COMMA, 0);
  }
  enumBodyDeclarations() {
    return this.getTypedRuleContext(EnumBodyDeclarationsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterEnumDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitEnumDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitEnumDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumConstantsContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_enumConstants;
  }
  enumConstant = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EnumConstantContext);
    } else {
      return this.getTypedRuleContext(EnumConstantContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterEnumConstants(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitEnumConstants(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitEnumConstants(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumConstantContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_enumConstant;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  classBody() {
    return this.getTypedRuleContext(ClassBodyContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterEnumConstant(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitEnumConstant(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitEnumConstant(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnumBodyDeclarationsContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_enumBodyDeclarations;
  }
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  classBodyDeclaration = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
      return this.getTypedRuleContext(ClassBodyDeclarationContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterEnumBodyDeclarations(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitEnumBodyDeclarations(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitEnumBodyDeclarations(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InterfaceDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_interfaceDeclaration;
  }
  INTERFACE() {
    return this.getToken(JavaParser.INTERFACE, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  interfaceBody() {
    return this.getTypedRuleContext(InterfaceBodyContext, 0);
  }
  typeParameters() {
    return this.getTypedRuleContext(TypeParametersContext, 0);
  }
  EXTENDS() {
    return this.getToken(JavaParser.EXTENDS, 0);
  }
  typeList() {
    return this.getTypedRuleContext(TypeListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterInterfaceDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitInterfaceDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitInterfaceDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassBodyContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_classBody;
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  classBodyDeclaration = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
      return this.getTypedRuleContext(ClassBodyDeclarationContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterClassBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitClassBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitClassBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InterfaceBodyContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_interfaceBody;
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  interfaceBodyDeclaration = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);
    } else {
      return this.getTypedRuleContext(InterfaceBodyDeclarationContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterInterfaceBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitInterfaceBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitInterfaceBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassBodyDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_classBodyDeclaration;
  }
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  STATIC() {
    return this.getToken(JavaParser.STATIC, 0);
  }
  memberDeclaration() {
    return this.getTypedRuleContext(MemberDeclarationContext, 0);
  }
  modifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ModifierContext);
    } else {
      return this.getTypedRuleContext(ModifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterClassBodyDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitClassBodyDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitClassBodyDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MemberDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_memberDeclaration;
  }
  methodDeclaration() {
    return this.getTypedRuleContext(MethodDeclarationContext, 0);
  }
  genericMethodDeclaration() {
    return this.getTypedRuleContext(GenericMethodDeclarationContext, 0);
  }
  fieldDeclaration() {
    return this.getTypedRuleContext(FieldDeclarationContext, 0);
  }
  constructorDeclaration() {
    return this.getTypedRuleContext(ConstructorDeclarationContext, 0);
  }
  genericConstructorDeclaration() {
    return this.getTypedRuleContext(GenericConstructorDeclarationContext, 0);
  }
  interfaceDeclaration() {
    return this.getTypedRuleContext(InterfaceDeclarationContext, 0);
  }
  annotationTypeDeclaration() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext, 0);
  }
  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }
  enumDeclaration() {
    return this.getTypedRuleContext(EnumDeclarationContext, 0);
  }
  recordDeclaration() {
    return this.getTypedRuleContext(RecordDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterMemberDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitMemberDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitMemberDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MethodDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_methodDeclaration;
  }
  typeTypeOrVoid() {
    return this.getTypedRuleContext(TypeTypeOrVoidContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  formalParameters() {
    return this.getTypedRuleContext(FormalParametersContext, 0);
  }
  methodBody() {
    return this.getTypedRuleContext(MethodBodyContext, 0);
  }
  LBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.LBRACK);
    } else {
      return this.getToken(JavaParser.LBRACK, i);
    }
  };
  RBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.RBRACK);
    } else {
      return this.getToken(JavaParser.RBRACK, i);
    }
  };
  THROWS() {
    return this.getToken(JavaParser.THROWS, 0);
  }
  qualifiedNameList() {
    return this.getTypedRuleContext(QualifiedNameListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterMethodDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitMethodDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitMethodDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MethodBodyContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_methodBody;
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterMethodBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitMethodBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitMethodBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeTypeOrVoidContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_typeTypeOrVoid;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  VOID() {
    return this.getToken(JavaParser.VOID, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterTypeTypeOrVoid(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitTypeTypeOrVoid(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitTypeTypeOrVoid(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class GenericMethodDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_genericMethodDeclaration;
  }
  typeParameters() {
    return this.getTypedRuleContext(TypeParametersContext, 0);
  }
  methodDeclaration() {
    return this.getTypedRuleContext(MethodDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterGenericMethodDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitGenericMethodDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitGenericMethodDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class GenericConstructorDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_genericConstructorDeclaration;
  }
  typeParameters() {
    return this.getTypedRuleContext(TypeParametersContext, 0);
  }
  constructorDeclaration() {
    return this.getTypedRuleContext(ConstructorDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterGenericConstructorDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitGenericConstructorDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitGenericConstructorDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ConstructorDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_constructorDeclaration;
    this.constructorBody = null;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  formalParameters() {
    return this.getTypedRuleContext(FormalParametersContext, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  THROWS() {
    return this.getToken(JavaParser.THROWS, 0);
  }
  qualifiedNameList() {
    return this.getTypedRuleContext(QualifiedNameListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterConstructorDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitConstructorDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitConstructorDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FieldDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_fieldDeclaration;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  variableDeclarators() {
    return this.getTypedRuleContext(VariableDeclaratorsContext, 0);
  }
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterFieldDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitFieldDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitFieldDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InterfaceBodyDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_interfaceBodyDeclaration;
  }
  interfaceMemberDeclaration() {
    return this.getTypedRuleContext(InterfaceMemberDeclarationContext, 0);
  }
  modifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ModifierContext);
    } else {
      return this.getTypedRuleContext(ModifierContext, i);
    }
  };
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterInterfaceBodyDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitInterfaceBodyDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitInterfaceBodyDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InterfaceMemberDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_interfaceMemberDeclaration;
  }
  constDeclaration() {
    return this.getTypedRuleContext(ConstDeclarationContext, 0);
  }
  interfaceMethodDeclaration() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext, 0);
  }
  genericInterfaceMethodDeclaration() {
    return this.getTypedRuleContext(GenericInterfaceMethodDeclarationContext, 0);
  }
  interfaceDeclaration() {
    return this.getTypedRuleContext(InterfaceDeclarationContext, 0);
  }
  annotationTypeDeclaration() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext, 0);
  }
  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }
  enumDeclaration() {
    return this.getTypedRuleContext(EnumDeclarationContext, 0);
  }
  recordDeclaration() {
    return this.getTypedRuleContext(RecordDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterInterfaceMemberDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitInterfaceMemberDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitInterfaceMemberDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ConstDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_constDeclaration;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  constantDeclarator = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ConstantDeclaratorContext);
    } else {
      return this.getTypedRuleContext(ConstantDeclaratorContext, i);
    }
  };
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterConstDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitConstDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitConstDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ConstantDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_constantDeclarator;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  ASSIGN() {
    return this.getToken(JavaParser.ASSIGN, 0);
  }
  variableInitializer() {
    return this.getTypedRuleContext(VariableInitializerContext, 0);
  }
  LBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.LBRACK);
    } else {
      return this.getToken(JavaParser.LBRACK, i);
    }
  };
  RBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.RBRACK);
    } else {
      return this.getToken(JavaParser.RBRACK, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterConstantDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitConstantDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitConstantDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InterfaceMethodDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_interfaceMethodDeclaration;
  }
  interfaceCommonBodyDeclaration() {
    return this.getTypedRuleContext(InterfaceCommonBodyDeclarationContext, 0);
  }
  interfaceMethodModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(InterfaceMethodModifierContext);
    } else {
      return this.getTypedRuleContext(InterfaceMethodModifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterInterfaceMethodDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitInterfaceMethodDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitInterfaceMethodDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InterfaceMethodModifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_interfaceMethodModifier;
  }
  annotation() {
    return this.getTypedRuleContext(AnnotationContext, 0);
  }
  PUBLIC() {
    return this.getToken(JavaParser.PUBLIC, 0);
  }
  ABSTRACT() {
    return this.getToken(JavaParser.ABSTRACT, 0);
  }
  DEFAULT() {
    return this.getToken(JavaParser.DEFAULT, 0);
  }
  STATIC() {
    return this.getToken(JavaParser.STATIC, 0);
  }
  STRICTFP() {
    return this.getToken(JavaParser.STRICTFP, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterInterfaceMethodModifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitInterfaceMethodModifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitInterfaceMethodModifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class GenericInterfaceMethodDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_genericInterfaceMethodDeclaration;
  }
  typeParameters() {
    return this.getTypedRuleContext(TypeParametersContext, 0);
  }
  interfaceCommonBodyDeclaration() {
    return this.getTypedRuleContext(InterfaceCommonBodyDeclarationContext, 0);
  }
  interfaceMethodModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(InterfaceMethodModifierContext);
    } else {
      return this.getTypedRuleContext(InterfaceMethodModifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterGenericInterfaceMethodDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitGenericInterfaceMethodDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitGenericInterfaceMethodDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InterfaceCommonBodyDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_interfaceCommonBodyDeclaration;
  }
  typeTypeOrVoid() {
    return this.getTypedRuleContext(TypeTypeOrVoidContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  formalParameters() {
    return this.getTypedRuleContext(FormalParametersContext, 0);
  }
  methodBody() {
    return this.getTypedRuleContext(MethodBodyContext, 0);
  }
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  LBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.LBRACK);
    } else {
      return this.getToken(JavaParser.LBRACK, i);
    }
  };
  RBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.RBRACK);
    } else {
      return this.getToken(JavaParser.RBRACK, i);
    }
  };
  THROWS() {
    return this.getToken(JavaParser.THROWS, 0);
  }
  qualifiedNameList() {
    return this.getTypedRuleContext(QualifiedNameListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterInterfaceCommonBodyDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitInterfaceCommonBodyDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitInterfaceCommonBodyDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableDeclaratorsContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_variableDeclarators;
  }
  variableDeclarator = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
      return this.getTypedRuleContext(VariableDeclaratorContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterVariableDeclarators(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitVariableDeclarators(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitVariableDeclarators(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableDeclaratorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_variableDeclarator;
  }
  variableDeclaratorId() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext, 0);
  }
  ASSIGN() {
    return this.getToken(JavaParser.ASSIGN, 0);
  }
  variableInitializer() {
    return this.getTypedRuleContext(VariableInitializerContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterVariableDeclarator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitVariableDeclarator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitVariableDeclarator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableDeclaratorIdContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_variableDeclaratorId;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  LBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.LBRACK);
    } else {
      return this.getToken(JavaParser.LBRACK, i);
    }
  };
  RBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.RBRACK);
    } else {
      return this.getToken(JavaParser.RBRACK, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterVariableDeclaratorId(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitVariableDeclaratorId(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitVariableDeclaratorId(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class VariableInitializerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_variableInitializer;
  }
  arrayInitializer() {
    return this.getTypedRuleContext(ArrayInitializerContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterVariableInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitVariableInitializer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitVariableInitializer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArrayInitializerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_arrayInitializer;
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  variableInitializer = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
      return this.getTypedRuleContext(VariableInitializerContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterArrayInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitArrayInitializer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitArrayInitializer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassOrInterfaceTypeContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_classOrInterfaceType;
  }
  identifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };
  typeArguments = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypeArgumentsContext);
    } else {
      return this.getTypedRuleContext(TypeArgumentsContext, i);
    }
  };
  DOT = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.DOT);
    } else {
      return this.getToken(JavaParser.DOT, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterClassOrInterfaceType(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitClassOrInterfaceType(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitClassOrInterfaceType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeArgumentContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_typeArgument;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  QUESTION() {
    return this.getToken(JavaParser.QUESTION, 0);
  }
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  EXTENDS() {
    return this.getToken(JavaParser.EXTENDS, 0);
  }
  SUPER() {
    return this.getToken(JavaParser.SUPER, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterTypeArgument(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitTypeArgument(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitTypeArgument(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class QualifiedNameListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_qualifiedNameList;
  }
  qualifiedName = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
      return this.getTypedRuleContext(QualifiedNameContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterQualifiedNameList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitQualifiedNameList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitQualifiedNameList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FormalParametersContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_formalParameters;
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  receiverParameter() {
    return this.getTypedRuleContext(ReceiverParameterContext, 0);
  }
  COMMA() {
    return this.getToken(JavaParser.COMMA, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterFormalParameters(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitFormalParameters(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitFormalParameters(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ReceiverParameterContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_receiverParameter;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  THIS() {
    return this.getToken(JavaParser.THIS, 0);
  }
  identifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };
  DOT = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.DOT);
    } else {
      return this.getToken(JavaParser.DOT, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterReceiverParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitReceiverParameter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitReceiverParameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FormalParameterListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_formalParameterList;
  }
  formalParameter = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(FormalParameterContext);
    } else {
      return this.getTypedRuleContext(FormalParameterContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  lastFormalParameter() {
    return this.getTypedRuleContext(LastFormalParameterContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterFormalParameterList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitFormalParameterList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitFormalParameterList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FormalParameterContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_formalParameter;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  variableDeclaratorId() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext, 0);
  }
  variableModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableModifierContext);
    } else {
      return this.getTypedRuleContext(VariableModifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterFormalParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitFormalParameter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitFormalParameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LastFormalParameterContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_lastFormalParameter;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  ELLIPSIS() {
    return this.getToken(JavaParser.ELLIPSIS, 0);
  }
  variableDeclaratorId() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext, 0);
  }
  variableModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableModifierContext);
    } else {
      return this.getTypedRuleContext(VariableModifierContext, i);
    }
  };
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterLastFormalParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitLastFormalParameter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitLastFormalParameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LambdaLVTIListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_lambdaLVTIList;
  }
  lambdaLVTIParameter = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(LambdaLVTIParameterContext);
    } else {
      return this.getTypedRuleContext(LambdaLVTIParameterContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterLambdaLVTIList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitLambdaLVTIList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitLambdaLVTIList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LambdaLVTIParameterContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_lambdaLVTIParameter;
  }
  VAR() {
    return this.getToken(JavaParser.VAR, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  variableModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableModifierContext);
    } else {
      return this.getTypedRuleContext(VariableModifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterLambdaLVTIParameter(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitLambdaLVTIParameter(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitLambdaLVTIParameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class QualifiedNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_qualifiedName;
  }
  identifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };
  DOT = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.DOT);
    } else {
      return this.getToken(JavaParser.DOT, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterQualifiedName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitQualifiedName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitQualifiedName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LiteralContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_literal;
  }
  integerLiteral() {
    return this.getTypedRuleContext(IntegerLiteralContext, 0);
  }
  floatLiteral() {
    return this.getTypedRuleContext(FloatLiteralContext, 0);
  }
  CHAR_LITERAL() {
    return this.getToken(JavaParser.CHAR_LITERAL, 0);
  }
  STRING_LITERAL() {
    return this.getToken(JavaParser.STRING_LITERAL, 0);
  }
  BOOL_LITERAL() {
    return this.getToken(JavaParser.BOOL_LITERAL, 0);
  }
  NULL_LITERAL() {
    return this.getToken(JavaParser.NULL_LITERAL, 0);
  }
  TEXT_BLOCK() {
    return this.getToken(JavaParser.TEXT_BLOCK, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IntegerLiteralContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_integerLiteral;
  }
  DECIMAL_LITERAL() {
    return this.getToken(JavaParser.DECIMAL_LITERAL, 0);
  }
  HEX_LITERAL() {
    return this.getToken(JavaParser.HEX_LITERAL, 0);
  }
  OCT_LITERAL() {
    return this.getToken(JavaParser.OCT_LITERAL, 0);
  }
  BINARY_LITERAL() {
    return this.getToken(JavaParser.BINARY_LITERAL, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterIntegerLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitIntegerLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitIntegerLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FloatLiteralContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_floatLiteral;
  }
  FLOAT_LITERAL() {
    return this.getToken(JavaParser.FLOAT_LITERAL, 0);
  }
  HEX_FLOAT_LITERAL() {
    return this.getToken(JavaParser.HEX_FLOAT_LITERAL, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterFloatLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitFloatLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitFloatLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AltAnnotationQualifiedNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_altAnnotationQualifiedName;
  }
  AT() {
    return this.getToken(JavaParser.AT, 0);
  }
  identifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };
  DOT = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.DOT);
    } else {
      return this.getToken(JavaParser.DOT, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterAltAnnotationQualifiedName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitAltAnnotationQualifiedName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitAltAnnotationQualifiedName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AnnotationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_annotation;
  }
  AT() {
    return this.getToken(JavaParser.AT, 0);
  }
  qualifiedName() {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
  }
  altAnnotationQualifiedName() {
    return this.getTypedRuleContext(AltAnnotationQualifiedNameContext, 0);
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  elementValuePairs() {
    return this.getTypedRuleContext(ElementValuePairsContext, 0);
  }
  elementValue() {
    return this.getTypedRuleContext(ElementValueContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterAnnotation(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitAnnotation(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitAnnotation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ElementValuePairsContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_elementValuePairs;
  }
  elementValuePair = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ElementValuePairContext);
    } else {
      return this.getTypedRuleContext(ElementValuePairContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterElementValuePairs(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitElementValuePairs(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitElementValuePairs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ElementValuePairContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_elementValuePair;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  ASSIGN() {
    return this.getToken(JavaParser.ASSIGN, 0);
  }
  elementValue() {
    return this.getTypedRuleContext(ElementValueContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterElementValuePair(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitElementValuePair(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitElementValuePair(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ElementValueContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_elementValue;
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  annotation() {
    return this.getTypedRuleContext(AnnotationContext, 0);
  }
  elementValueArrayInitializer() {
    return this.getTypedRuleContext(ElementValueArrayInitializerContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterElementValue(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitElementValue(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitElementValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ElementValueArrayInitializerContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_elementValueArrayInitializer;
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  elementValue = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ElementValueContext);
    } else {
      return this.getTypedRuleContext(ElementValueContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterElementValueArrayInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitElementValueArrayInitializer(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitElementValueArrayInitializer(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AnnotationTypeDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_annotationTypeDeclaration;
  }
  AT() {
    return this.getToken(JavaParser.AT, 0);
  }
  INTERFACE() {
    return this.getToken(JavaParser.INTERFACE, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  annotationTypeBody() {
    return this.getTypedRuleContext(AnnotationTypeBodyContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterAnnotationTypeDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitAnnotationTypeDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitAnnotationTypeDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AnnotationTypeBodyContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_annotationTypeBody;
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  annotationTypeElementDeclaration = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationTypeElementDeclarationContext);
    } else {
      return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterAnnotationTypeBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitAnnotationTypeBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitAnnotationTypeBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AnnotationTypeElementDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_annotationTypeElementDeclaration;
  }
  annotationTypeElementRest() {
    return this.getTypedRuleContext(AnnotationTypeElementRestContext, 0);
  }
  modifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ModifierContext);
    } else {
      return this.getTypedRuleContext(ModifierContext, i);
    }
  };
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterAnnotationTypeElementDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitAnnotationTypeElementDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitAnnotationTypeElementDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AnnotationTypeElementRestContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_annotationTypeElementRest;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  annotationMethodOrConstantRest() {
    return this.getTypedRuleContext(AnnotationMethodOrConstantRestContext, 0);
  }
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }
  interfaceDeclaration() {
    return this.getTypedRuleContext(InterfaceDeclarationContext, 0);
  }
  enumDeclaration() {
    return this.getTypedRuleContext(EnumDeclarationContext, 0);
  }
  annotationTypeDeclaration() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext, 0);
  }
  recordDeclaration() {
    return this.getTypedRuleContext(RecordDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterAnnotationTypeElementRest(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitAnnotationTypeElementRest(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitAnnotationTypeElementRest(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AnnotationMethodOrConstantRestContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_annotationMethodOrConstantRest;
  }
  annotationMethodRest() {
    return this.getTypedRuleContext(AnnotationMethodRestContext, 0);
  }
  annotationConstantRest() {
    return this.getTypedRuleContext(AnnotationConstantRestContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterAnnotationMethodOrConstantRest(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitAnnotationMethodOrConstantRest(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitAnnotationMethodOrConstantRest(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AnnotationMethodRestContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_annotationMethodRest;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  defaultValue() {
    return this.getTypedRuleContext(DefaultValueContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterAnnotationMethodRest(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitAnnotationMethodRest(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitAnnotationMethodRest(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class AnnotationConstantRestContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_annotationConstantRest;
  }
  variableDeclarators() {
    return this.getTypedRuleContext(VariableDeclaratorsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterAnnotationConstantRest(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitAnnotationConstantRest(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitAnnotationConstantRest(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class DefaultValueContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_defaultValue;
  }
  DEFAULT() {
    return this.getToken(JavaParser.DEFAULT, 0);
  }
  elementValue() {
    return this.getTypedRuleContext(ElementValueContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterDefaultValue(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitDefaultValue(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitDefaultValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ModuleDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_moduleDeclaration;
  }
  MODULE() {
    return this.getToken(JavaParser.MODULE, 0);
  }
  qualifiedName() {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
  }
  moduleBody() {
    return this.getTypedRuleContext(ModuleBodyContext, 0);
  }
  OPEN() {
    return this.getToken(JavaParser.OPEN, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterModuleDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitModuleDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitModuleDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ModuleBodyContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_moduleBody;
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  moduleDirective = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ModuleDirectiveContext);
    } else {
      return this.getTypedRuleContext(ModuleDirectiveContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterModuleBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitModuleBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitModuleBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ModuleDirectiveContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_moduleDirective;
  }
  REQUIRES() {
    return this.getToken(JavaParser.REQUIRES, 0);
  }
  qualifiedName = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
      return this.getTypedRuleContext(QualifiedNameContext, i);
    }
  };
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  requiresModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RequiresModifierContext);
    } else {
      return this.getTypedRuleContext(RequiresModifierContext, i);
    }
  };
  EXPORTS() {
    return this.getToken(JavaParser.EXPORTS, 0);
  }
  TO() {
    return this.getToken(JavaParser.TO, 0);
  }
  OPENS() {
    return this.getToken(JavaParser.OPENS, 0);
  }
  USES() {
    return this.getToken(JavaParser.USES, 0);
  }
  PROVIDES() {
    return this.getToken(JavaParser.PROVIDES, 0);
  }
  WITH() {
    return this.getToken(JavaParser.WITH, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterModuleDirective(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitModuleDirective(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitModuleDirective(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class RequiresModifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_requiresModifier;
  }
  TRANSITIVE() {
    return this.getToken(JavaParser.TRANSITIVE, 0);
  }
  STATIC() {
    return this.getToken(JavaParser.STATIC, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterRequiresModifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitRequiresModifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitRequiresModifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class RecordDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_recordDeclaration;
  }
  RECORD() {
    return this.getToken(JavaParser.RECORD, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  recordHeader() {
    return this.getTypedRuleContext(RecordHeaderContext, 0);
  }
  recordBody() {
    return this.getTypedRuleContext(RecordBodyContext, 0);
  }
  typeParameters() {
    return this.getTypedRuleContext(TypeParametersContext, 0);
  }
  IMPLEMENTS() {
    return this.getToken(JavaParser.IMPLEMENTS, 0);
  }
  typeList() {
    return this.getTypedRuleContext(TypeListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterRecordDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitRecordDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitRecordDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class RecordHeaderContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_recordHeader;
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  recordComponentList() {
    return this.getTypedRuleContext(RecordComponentListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterRecordHeader(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitRecordHeader(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitRecordHeader(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class RecordComponentListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_recordComponentList;
  }
  recordComponent = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RecordComponentContext);
    } else {
      return this.getTypedRuleContext(RecordComponentContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterRecordComponentList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitRecordComponentList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitRecordComponentList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class RecordComponentContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_recordComponent;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterRecordComponent(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitRecordComponent(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitRecordComponent(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class RecordBodyContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_recordBody;
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  classBodyDeclaration = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
      return this.getTypedRuleContext(ClassBodyDeclarationContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterRecordBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitRecordBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitRecordBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BlockContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_block;
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  blockStatement = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BlockStatementContext);
    } else {
      return this.getTypedRuleContext(BlockStatementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class BlockStatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_blockStatement;
  }
  localVariableDeclaration() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext, 0);
  }
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  localTypeDeclaration() {
    return this.getTypedRuleContext(LocalTypeDeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterBlockStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitBlockStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitBlockStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LocalVariableDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_localVariableDeclaration;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  variableDeclarators() {
    return this.getTypedRuleContext(VariableDeclaratorsContext, 0);
  }
  VAR() {
    return this.getToken(JavaParser.VAR, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  ASSIGN() {
    return this.getToken(JavaParser.ASSIGN, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  variableModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableModifierContext);
    } else {
      return this.getTypedRuleContext(VariableModifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterLocalVariableDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitLocalVariableDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitLocalVariableDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class IdentifierContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_identifier;
  }
  IDENTIFIER() {
    return this.getToken(JavaParser.IDENTIFIER, 0);
  }
  MODULE() {
    return this.getToken(JavaParser.MODULE, 0);
  }
  OPEN() {
    return this.getToken(JavaParser.OPEN, 0);
  }
  REQUIRES() {
    return this.getToken(JavaParser.REQUIRES, 0);
  }
  EXPORTS() {
    return this.getToken(JavaParser.EXPORTS, 0);
  }
  OPENS() {
    return this.getToken(JavaParser.OPENS, 0);
  }
  TO() {
    return this.getToken(JavaParser.TO, 0);
  }
  USES() {
    return this.getToken(JavaParser.USES, 0);
  }
  PROVIDES() {
    return this.getToken(JavaParser.PROVIDES, 0);
  }
  WITH() {
    return this.getToken(JavaParser.WITH, 0);
  }
  TRANSITIVE() {
    return this.getToken(JavaParser.TRANSITIVE, 0);
  }
  YIELD() {
    return this.getToken(JavaParser.YIELD, 0);
  }
  SEALED() {
    return this.getToken(JavaParser.SEALED, 0);
  }
  PERMITS() {
    return this.getToken(JavaParser.PERMITS, 0);
  }
  RECORD() {
    return this.getToken(JavaParser.RECORD, 0);
  }
  VAR() {
    return this.getToken(JavaParser.VAR, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterIdentifier(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitIdentifier(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LocalTypeDeclarationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_localTypeDeclaration;
  }
  classDeclaration() {
    return this.getTypedRuleContext(ClassDeclarationContext, 0);
  }
  interfaceDeclaration() {
    return this.getTypedRuleContext(InterfaceDeclarationContext, 0);
  }
  recordDeclaration() {
    return this.getTypedRuleContext(RecordDeclarationContext, 0);
  }
  classOrInterfaceModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
    } else {
      return this.getTypedRuleContext(ClassOrInterfaceModifierContext, i);
    }
  };
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterLocalTypeDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitLocalTypeDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitLocalTypeDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class StatementContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_statement;
    this.blockLabel = null;
    this.statementExpression = null;
    this.identifierLabel = null;
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  ASSERT() {
    return this.getToken(JavaParser.ASSERT, 0);
  }
  expression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  COLON() {
    return this.getToken(JavaParser.COLON, 0);
  }
  IF() {
    return this.getToken(JavaParser.IF, 0);
  }
  parExpression() {
    return this.getTypedRuleContext(ParExpressionContext, 0);
  }
  statement = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };
  ELSE() {
    return this.getToken(JavaParser.ELSE, 0);
  }
  FOR() {
    return this.getToken(JavaParser.FOR, 0);
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  forControl() {
    return this.getTypedRuleContext(ForControlContext, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  WHILE() {
    return this.getToken(JavaParser.WHILE, 0);
  }
  DO() {
    return this.getToken(JavaParser.DO, 0);
  }
  TRY() {
    return this.getToken(JavaParser.TRY, 0);
  }
  finallyBlock() {
    return this.getTypedRuleContext(FinallyBlockContext, 0);
  }
  catchClause = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CatchClauseContext);
    } else {
      return this.getTypedRuleContext(CatchClauseContext, i);
    }
  };
  resourceSpecification() {
    return this.getTypedRuleContext(ResourceSpecificationContext, 0);
  }
  SWITCH() {
    return this.getToken(JavaParser.SWITCH, 0);
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  switchBlockStatementGroup = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);
    } else {
      return this.getTypedRuleContext(SwitchBlockStatementGroupContext, i);
    }
  };
  switchLabel = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SwitchLabelContext);
    } else {
      return this.getTypedRuleContext(SwitchLabelContext, i);
    }
  };
  SYNCHRONIZED() {
    return this.getToken(JavaParser.SYNCHRONIZED, 0);
  }
  RETURN() {
    return this.getToken(JavaParser.RETURN, 0);
  }
  THROW() {
    return this.getToken(JavaParser.THROW, 0);
  }
  BREAK() {
    return this.getToken(JavaParser.BREAK, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  CONTINUE() {
    return this.getToken(JavaParser.CONTINUE, 0);
  }
  YIELD() {
    return this.getToken(JavaParser.YIELD, 0);
  }
  switchExpression() {
    return this.getTypedRuleContext(SwitchExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterStatement(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitStatement(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CatchClauseContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_catchClause;
  }
  CATCH() {
    return this.getToken(JavaParser.CATCH, 0);
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  catchType() {
    return this.getTypedRuleContext(CatchTypeContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  variableModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableModifierContext);
    } else {
      return this.getTypedRuleContext(VariableModifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterCatchClause(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitCatchClause(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitCatchClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CatchTypeContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_catchType;
  }
  qualifiedName = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
      return this.getTypedRuleContext(QualifiedNameContext, i);
    }
  };
  BITOR = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.BITOR);
    } else {
      return this.getToken(JavaParser.BITOR, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterCatchType(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitCatchType(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitCatchType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class FinallyBlockContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_finallyBlock;
  }
  FINALLY() {
    return this.getToken(JavaParser.FINALLY, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterFinallyBlock(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitFinallyBlock(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitFinallyBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ResourceSpecificationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_resourceSpecification;
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  resources() {
    return this.getTypedRuleContext(ResourcesContext, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  SEMI() {
    return this.getToken(JavaParser.SEMI, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterResourceSpecification(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitResourceSpecification(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitResourceSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ResourcesContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_resources;
  }
  resource = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ResourceContext);
    } else {
      return this.getTypedRuleContext(ResourceContext, i);
    }
  };
  SEMI = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.SEMI);
    } else {
      return this.getToken(JavaParser.SEMI, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterResources(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitResources(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitResources(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ResourceContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_resource;
  }
  ASSIGN() {
    return this.getToken(JavaParser.ASSIGN, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  classOrInterfaceType() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext, 0);
  }
  variableDeclaratorId() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext, 0);
  }
  VAR() {
    return this.getToken(JavaParser.VAR, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  variableModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableModifierContext);
    } else {
      return this.getTypedRuleContext(VariableModifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterResource(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitResource(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitResource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SwitchBlockStatementGroupContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_switchBlockStatementGroup;
  }
  switchLabel = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SwitchLabelContext);
    } else {
      return this.getTypedRuleContext(SwitchLabelContext, i);
    }
  };
  blockStatement = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BlockStatementContext);
    } else {
      return this.getTypedRuleContext(BlockStatementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterSwitchBlockStatementGroup(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitSwitchBlockStatementGroup(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitSwitchBlockStatementGroup(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SwitchLabelContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_switchLabel;
    this.constantExpression = null;
    this.enumConstantName = null;
    this.varName = null;
  }
  CASE() {
    return this.getToken(JavaParser.CASE, 0);
  }
  COLON() {
    return this.getToken(JavaParser.COLON, 0);
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  IDENTIFIER() {
    return this.getToken(JavaParser.IDENTIFIER, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  DEFAULT() {
    return this.getToken(JavaParser.DEFAULT, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterSwitchLabel(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitSwitchLabel(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitSwitchLabel(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ForControlContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_forControl;
    this.forUpdate = null;
  }
  enhancedForControl() {
    return this.getTypedRuleContext(EnhancedForControlContext, 0);
  }
  SEMI = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.SEMI);
    } else {
      return this.getToken(JavaParser.SEMI, i);
    }
  };
  forInit() {
    return this.getTypedRuleContext(ForInitContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterForControl(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitForControl(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitForControl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ForInitContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_forInit;
  }
  localVariableDeclaration() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext, 0);
  }
  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterForInit(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitForInit(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitForInit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class EnhancedForControlContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_enhancedForControl;
  }
  variableDeclaratorId() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext, 0);
  }
  COLON() {
    return this.getToken(JavaParser.COLON, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  VAR() {
    return this.getToken(JavaParser.VAR, 0);
  }
  variableModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableModifierContext);
    } else {
      return this.getTypedRuleContext(VariableModifierContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterEnhancedForControl(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitEnhancedForControl(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitEnhancedForControl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ParExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_parExpression;
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterParExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitParExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitParExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpressionListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_expressionList;
  }
  expression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterExpressionList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitExpressionList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitExpressionList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class MethodCallContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_methodCall;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }
  THIS() {
    return this.getToken(JavaParser.THIS, 0);
  }
  SUPER() {
    return this.getToken(JavaParser.SUPER, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterMethodCall(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitMethodCall(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitMethodCall(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_expression;
    this.prefix = null;
    this.bop = null;
    this.postfix = null;
  }
  primary() {
    return this.getTypedRuleContext(PrimaryContext, 0);
  }
  methodCall() {
    return this.getTypedRuleContext(MethodCallContext, 0);
  }
  NEW() {
    return this.getToken(JavaParser.NEW, 0);
  }
  creator() {
    return this.getTypedRuleContext(CreatorContext, 0);
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  typeType = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypeTypeContext);
    } else {
      return this.getTypedRuleContext(TypeTypeContext, i);
    }
  };
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  expression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  BITAND = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.BITAND);
    } else {
      return this.getToken(JavaParser.BITAND, i);
    }
  };
  ADD() {
    return this.getToken(JavaParser.ADD, 0);
  }
  SUB() {
    return this.getToken(JavaParser.SUB, 0);
  }
  INC() {
    return this.getToken(JavaParser.INC, 0);
  }
  DEC() {
    return this.getToken(JavaParser.DEC, 0);
  }
  TILDE() {
    return this.getToken(JavaParser.TILDE, 0);
  }
  BANG() {
    return this.getToken(JavaParser.BANG, 0);
  }
  lambdaExpression() {
    return this.getTypedRuleContext(LambdaExpressionContext, 0);
  }
  switchExpression() {
    return this.getTypedRuleContext(SwitchExpressionContext, 0);
  }
  COLONCOLON() {
    return this.getToken(JavaParser.COLONCOLON, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  typeArguments() {
    return this.getTypedRuleContext(TypeArgumentsContext, 0);
  }
  classType() {
    return this.getTypedRuleContext(ClassTypeContext, 0);
  }
  MUL() {
    return this.getToken(JavaParser.MUL, 0);
  }
  DIV() {
    return this.getToken(JavaParser.DIV, 0);
  }
  MOD() {
    return this.getToken(JavaParser.MOD, 0);
  }
  LT = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.LT);
    } else {
      return this.getToken(JavaParser.LT, i);
    }
  };
  GT = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.GT);
    } else {
      return this.getToken(JavaParser.GT, i);
    }
  };
  LE() {
    return this.getToken(JavaParser.LE, 0);
  }
  GE() {
    return this.getToken(JavaParser.GE, 0);
  }
  EQUAL() {
    return this.getToken(JavaParser.EQUAL, 0);
  }
  NOTEQUAL() {
    return this.getToken(JavaParser.NOTEQUAL, 0);
  }
  CARET() {
    return this.getToken(JavaParser.CARET, 0);
  }
  BITOR() {
    return this.getToken(JavaParser.BITOR, 0);
  }
  AND() {
    return this.getToken(JavaParser.AND, 0);
  }
  OR() {
    return this.getToken(JavaParser.OR, 0);
  }
  COLON() {
    return this.getToken(JavaParser.COLON, 0);
  }
  QUESTION() {
    return this.getToken(JavaParser.QUESTION, 0);
  }
  ASSIGN() {
    return this.getToken(JavaParser.ASSIGN, 0);
  }
  ADD_ASSIGN() {
    return this.getToken(JavaParser.ADD_ASSIGN, 0);
  }
  SUB_ASSIGN() {
    return this.getToken(JavaParser.SUB_ASSIGN, 0);
  }
  MUL_ASSIGN() {
    return this.getToken(JavaParser.MUL_ASSIGN, 0);
  }
  DIV_ASSIGN() {
    return this.getToken(JavaParser.DIV_ASSIGN, 0);
  }
  AND_ASSIGN() {
    return this.getToken(JavaParser.AND_ASSIGN, 0);
  }
  OR_ASSIGN() {
    return this.getToken(JavaParser.OR_ASSIGN, 0);
  }
  XOR_ASSIGN() {
    return this.getToken(JavaParser.XOR_ASSIGN, 0);
  }
  RSHIFT_ASSIGN() {
    return this.getToken(JavaParser.RSHIFT_ASSIGN, 0);
  }
  URSHIFT_ASSIGN() {
    return this.getToken(JavaParser.URSHIFT_ASSIGN, 0);
  }
  LSHIFT_ASSIGN() {
    return this.getToken(JavaParser.LSHIFT_ASSIGN, 0);
  }
  MOD_ASSIGN() {
    return this.getToken(JavaParser.MOD_ASSIGN, 0);
  }
  DOT() {
    return this.getToken(JavaParser.DOT, 0);
  }
  THIS() {
    return this.getToken(JavaParser.THIS, 0);
  }
  innerCreator() {
    return this.getTypedRuleContext(InnerCreatorContext, 0);
  }
  SUPER() {
    return this.getToken(JavaParser.SUPER, 0);
  }
  superSuffix() {
    return this.getTypedRuleContext(SuperSuffixContext, 0);
  }
  explicitGenericInvocation() {
    return this.getTypedRuleContext(ExplicitGenericInvocationContext, 0);
  }
  nonWildcardTypeArguments() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext, 0);
  }
  LBRACK() {
    return this.getToken(JavaParser.LBRACK, 0);
  }
  RBRACK() {
    return this.getToken(JavaParser.RBRACK, 0);
  }
  INSTANCEOF() {
    return this.getToken(JavaParser.INSTANCEOF, 0);
  }
  pattern() {
    return this.getTypedRuleContext(PatternContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PatternContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_pattern;
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  variableModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableModifierContext);
    } else {
      return this.getTypedRuleContext(VariableModifierContext, i);
    }
  };
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterPattern(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitPattern(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitPattern(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LambdaExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_lambdaExpression;
  }
  lambdaParameters() {
    return this.getTypedRuleContext(LambdaParametersContext, 0);
  }
  ARROW() {
    return this.getToken(JavaParser.ARROW, 0);
  }
  lambdaBody() {
    return this.getTypedRuleContext(LambdaBodyContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterLambdaExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitLambdaExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitLambdaExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LambdaParametersContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_lambdaParameters;
  }
  identifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  formalParameterList() {
    return this.getTypedRuleContext(FormalParameterListContext, 0);
  }
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  lambdaLVTIList() {
    return this.getTypedRuleContext(LambdaLVTIListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterLambdaParameters(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitLambdaParameters(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitLambdaParameters(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class LambdaBodyContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_lambdaBody;
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterLambdaBody(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitLambdaBody(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitLambdaBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PrimaryContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_primary;
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  THIS() {
    return this.getToken(JavaParser.THIS, 0);
  }
  SUPER() {
    return this.getToken(JavaParser.SUPER, 0);
  }
  literal() {
    return this.getTypedRuleContext(LiteralContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  typeTypeOrVoid() {
    return this.getTypedRuleContext(TypeTypeOrVoidContext, 0);
  }
  DOT() {
    return this.getToken(JavaParser.DOT, 0);
  }
  CLASS() {
    return this.getToken(JavaParser.CLASS, 0);
  }
  nonWildcardTypeArguments() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext, 0);
  }
  explicitGenericInvocationSuffix() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext, 0);
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterPrimary(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitPrimary(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitPrimary(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SwitchExpressionContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_switchExpression;
  }
  SWITCH() {
    return this.getToken(JavaParser.SWITCH, 0);
  }
  parExpression() {
    return this.getTypedRuleContext(ParExpressionContext, 0);
  }
  LBRACE() {
    return this.getToken(JavaParser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(JavaParser.RBRACE, 0);
  }
  switchLabeledRule = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SwitchLabeledRuleContext);
    } else {
      return this.getTypedRuleContext(SwitchLabeledRuleContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterSwitchExpression(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitSwitchExpression(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitSwitchExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SwitchLabeledRuleContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_switchLabeledRule;
  }
  CASE() {
    return this.getToken(JavaParser.CASE, 0);
  }
  switchRuleOutcome() {
    return this.getTypedRuleContext(SwitchRuleOutcomeContext, 0);
  }
  ARROW() {
    return this.getToken(JavaParser.ARROW, 0);
  }
  COLON() {
    return this.getToken(JavaParser.COLON, 0);
  }
  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }
  NULL_LITERAL() {
    return this.getToken(JavaParser.NULL_LITERAL, 0);
  }
  guardedPattern() {
    return this.getTypedRuleContext(GuardedPatternContext, 0);
  }
  DEFAULT() {
    return this.getToken(JavaParser.DEFAULT, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterSwitchLabeledRule(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitSwitchLabeledRule(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitSwitchLabeledRule(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class GuardedPatternContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_guardedPattern;
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  guardedPattern() {
    return this.getTypedRuleContext(GuardedPatternContext, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  typeType() {
    return this.getTypedRuleContext(TypeTypeContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  variableModifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(VariableModifierContext);
    } else {
      return this.getTypedRuleContext(VariableModifierContext, i);
    }
  };
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  AND = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.AND);
    } else {
      return this.getToken(JavaParser.AND, i);
    }
  };
  expression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterGuardedPattern(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitGuardedPattern(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitGuardedPattern(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SwitchRuleOutcomeContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_switchRuleOutcome;
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  blockStatement = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BlockStatementContext);
    } else {
      return this.getTypedRuleContext(BlockStatementContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterSwitchRuleOutcome(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitSwitchRuleOutcome(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitSwitchRuleOutcome(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassTypeContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_classType;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  classOrInterfaceType() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext, 0);
  }
  DOT() {
    return this.getToken(JavaParser.DOT, 0);
  }
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  typeArguments() {
    return this.getTypedRuleContext(TypeArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterClassType(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitClassType(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitClassType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CreatorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_creator;
  }
  nonWildcardTypeArguments() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext, 0);
  }
  createdName() {
    return this.getTypedRuleContext(CreatedNameContext, 0);
  }
  classCreatorRest() {
    return this.getTypedRuleContext(ClassCreatorRestContext, 0);
  }
  arrayCreatorRest() {
    return this.getTypedRuleContext(ArrayCreatorRestContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterCreator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitCreator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitCreator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class CreatedNameContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_createdName;
  }
  identifier = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };
  typeArgumentsOrDiamond = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypeArgumentsOrDiamondContext);
    } else {
      return this.getTypedRuleContext(TypeArgumentsOrDiamondContext, i);
    }
  };
  DOT = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.DOT);
    } else {
      return this.getToken(JavaParser.DOT, i);
    }
  };
  primitiveType() {
    return this.getTypedRuleContext(PrimitiveTypeContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterCreatedName(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitCreatedName(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitCreatedName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class InnerCreatorContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_innerCreator;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  classCreatorRest() {
    return this.getTypedRuleContext(ClassCreatorRestContext, 0);
  }
  nonWildcardTypeArgumentsOrDiamond() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsOrDiamondContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterInnerCreator(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitInnerCreator(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitInnerCreator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArrayCreatorRestContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_arrayCreatorRest;
  }
  LBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.LBRACK);
    } else {
      return this.getToken(JavaParser.LBRACK, i);
    }
  };
  RBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.RBRACK);
    } else {
      return this.getToken(JavaParser.RBRACK, i);
    }
  };
  arrayInitializer() {
    return this.getTypedRuleContext(ArrayInitializerContext, 0);
  }
  expression = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterArrayCreatorRest(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitArrayCreatorRest(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitArrayCreatorRest(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ClassCreatorRestContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_classCreatorRest;
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  classBody() {
    return this.getTypedRuleContext(ClassBodyContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterClassCreatorRest(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitClassCreatorRest(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitClassCreatorRest(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExplicitGenericInvocationContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_explicitGenericInvocation;
  }
  nonWildcardTypeArguments() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext, 0);
  }
  explicitGenericInvocationSuffix() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterExplicitGenericInvocation(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitExplicitGenericInvocation(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitExplicitGenericInvocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeArgumentsOrDiamondContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_typeArgumentsOrDiamond;
  }
  LT() {
    return this.getToken(JavaParser.LT, 0);
  }
  GT() {
    return this.getToken(JavaParser.GT, 0);
  }
  typeArguments() {
    return this.getTypedRuleContext(TypeArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterTypeArgumentsOrDiamond(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitTypeArgumentsOrDiamond(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitTypeArgumentsOrDiamond(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NonWildcardTypeArgumentsOrDiamondContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond;
  }
  LT() {
    return this.getToken(JavaParser.LT, 0);
  }
  GT() {
    return this.getToken(JavaParser.GT, 0);
  }
  nonWildcardTypeArguments() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterNonWildcardTypeArgumentsOrDiamond(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitNonWildcardTypeArgumentsOrDiamond(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitNonWildcardTypeArgumentsOrDiamond(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class NonWildcardTypeArgumentsContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_nonWildcardTypeArguments;
  }
  LT() {
    return this.getToken(JavaParser.LT, 0);
  }
  typeList() {
    return this.getTypedRuleContext(TypeListContext, 0);
  }
  GT() {
    return this.getToken(JavaParser.GT, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterNonWildcardTypeArguments(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitNonWildcardTypeArguments(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitNonWildcardTypeArguments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeListContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_typeList;
  }
  typeType = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypeTypeContext);
    } else {
      return this.getTypedRuleContext(TypeTypeContext, i);
    }
  };
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterTypeList(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitTypeList(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitTypeList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeTypeContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_typeType;
  }
  classOrInterfaceType() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext, 0);
  }
  primitiveType() {
    return this.getTypedRuleContext(PrimitiveTypeContext, 0);
  }
  annotation = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnnotationContext);
    } else {
      return this.getTypedRuleContext(AnnotationContext, i);
    }
  };
  LBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.LBRACK);
    } else {
      return this.getToken(JavaParser.LBRACK, i);
    }
  };
  RBRACK = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.RBRACK);
    } else {
      return this.getToken(JavaParser.RBRACK, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterTypeType(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitTypeType(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitTypeType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class PrimitiveTypeContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_primitiveType;
  }
  BOOLEAN() {
    return this.getToken(JavaParser.BOOLEAN, 0);
  }
  CHAR() {
    return this.getToken(JavaParser.CHAR, 0);
  }
  BYTE() {
    return this.getToken(JavaParser.BYTE, 0);
  }
  SHORT() {
    return this.getToken(JavaParser.SHORT, 0);
  }
  INT() {
    return this.getToken(JavaParser.INT, 0);
  }
  LONG() {
    return this.getToken(JavaParser.LONG, 0);
  }
  FLOAT() {
    return this.getToken(JavaParser.FLOAT, 0);
  }
  DOUBLE() {
    return this.getToken(JavaParser.DOUBLE, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterPrimitiveType(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitPrimitiveType(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitPrimitiveType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class TypeArgumentsContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_typeArguments;
  }
  LT() {
    return this.getToken(JavaParser.LT, 0);
  }
  typeArgument = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypeArgumentContext);
    } else {
      return this.getTypedRuleContext(TypeArgumentContext, i);
    }
  };
  GT() {
    return this.getToken(JavaParser.GT, 0);
  }
  COMMA = function(i) {
    if (i === void 0) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(JavaParser.COMMA);
    } else {
      return this.getToken(JavaParser.COMMA, i);
    }
  };
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterTypeArguments(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitTypeArguments(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitTypeArguments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class SuperSuffixContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_superSuffix;
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  DOT() {
    return this.getToken(JavaParser.DOT, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  typeArguments() {
    return this.getTypedRuleContext(TypeArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterSuperSuffix(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitSuperSuffix(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitSuperSuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ExplicitGenericInvocationSuffixContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_explicitGenericInvocationSuffix;
  }
  SUPER() {
    return this.getToken(JavaParser.SUPER, 0);
  }
  superSuffix() {
    return this.getTypedRuleContext(SuperSuffixContext, 0);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterExplicitGenericInvocationSuffix(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitExplicitGenericInvocationSuffix(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitExplicitGenericInvocationSuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
class ArgumentsContext extends import_antlr4.default.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === void 0) {
      parent = null;
    }
    if (invokingState === void 0 || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaParser.RULE_arguments;
  }
  LPAREN() {
    return this.getToken(JavaParser.LPAREN, 0);
  }
  RPAREN() {
    return this.getToken(JavaParser.RPAREN, 0);
  }
  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }
  enterRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.enterArguments(this);
    }
  }
  exitRule(listener) {
    if (listener instanceof import_JavaParserListener.default) {
      listener.exitArguments(this);
    }
  }
  accept(visitor) {
    if (visitor instanceof import_JavaParserVisitor.default) {
      return visitor.visitArguments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
JavaParser.CompilationUnitContext = CompilationUnitContext;
JavaParser.PackageDeclarationContext = PackageDeclarationContext;
JavaParser.ImportDeclarationContext = ImportDeclarationContext;
JavaParser.TypeDeclarationContext = TypeDeclarationContext;
JavaParser.ModifierContext = ModifierContext;
JavaParser.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext;
JavaParser.VariableModifierContext = VariableModifierContext;
JavaParser.ClassDeclarationContext = ClassDeclarationContext;
JavaParser.TypeParametersContext = TypeParametersContext;
JavaParser.TypeParameterContext = TypeParameterContext;
JavaParser.TypeBoundContext = TypeBoundContext;
JavaParser.EnumDeclarationContext = EnumDeclarationContext;
JavaParser.EnumConstantsContext = EnumConstantsContext;
JavaParser.EnumConstantContext = EnumConstantContext;
JavaParser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext;
JavaParser.InterfaceDeclarationContext = InterfaceDeclarationContext;
JavaParser.ClassBodyContext = ClassBodyContext;
JavaParser.InterfaceBodyContext = InterfaceBodyContext;
JavaParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext;
JavaParser.MemberDeclarationContext = MemberDeclarationContext;
JavaParser.MethodDeclarationContext = MethodDeclarationContext;
JavaParser.MethodBodyContext = MethodBodyContext;
JavaParser.TypeTypeOrVoidContext = TypeTypeOrVoidContext;
JavaParser.GenericMethodDeclarationContext = GenericMethodDeclarationContext;
JavaParser.GenericConstructorDeclarationContext = GenericConstructorDeclarationContext;
JavaParser.ConstructorDeclarationContext = ConstructorDeclarationContext;
JavaParser.FieldDeclarationContext = FieldDeclarationContext;
JavaParser.InterfaceBodyDeclarationContext = InterfaceBodyDeclarationContext;
JavaParser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext;
JavaParser.ConstDeclarationContext = ConstDeclarationContext;
JavaParser.ConstantDeclaratorContext = ConstantDeclaratorContext;
JavaParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;
JavaParser.InterfaceMethodModifierContext = InterfaceMethodModifierContext;
JavaParser.GenericInterfaceMethodDeclarationContext = GenericInterfaceMethodDeclarationContext;
JavaParser.InterfaceCommonBodyDeclarationContext = InterfaceCommonBodyDeclarationContext;
JavaParser.VariableDeclaratorsContext = VariableDeclaratorsContext;
JavaParser.VariableDeclaratorContext = VariableDeclaratorContext;
JavaParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext;
JavaParser.VariableInitializerContext = VariableInitializerContext;
JavaParser.ArrayInitializerContext = ArrayInitializerContext;
JavaParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext;
JavaParser.TypeArgumentContext = TypeArgumentContext;
JavaParser.QualifiedNameListContext = QualifiedNameListContext;
JavaParser.FormalParametersContext = FormalParametersContext;
JavaParser.ReceiverParameterContext = ReceiverParameterContext;
JavaParser.FormalParameterListContext = FormalParameterListContext;
JavaParser.FormalParameterContext = FormalParameterContext;
JavaParser.LastFormalParameterContext = LastFormalParameterContext;
JavaParser.LambdaLVTIListContext = LambdaLVTIListContext;
JavaParser.LambdaLVTIParameterContext = LambdaLVTIParameterContext;
JavaParser.QualifiedNameContext = QualifiedNameContext;
JavaParser.LiteralContext = LiteralContext;
JavaParser.IntegerLiteralContext = IntegerLiteralContext;
JavaParser.FloatLiteralContext = FloatLiteralContext;
JavaParser.AltAnnotationQualifiedNameContext = AltAnnotationQualifiedNameContext;
JavaParser.AnnotationContext = AnnotationContext;
JavaParser.ElementValuePairsContext = ElementValuePairsContext;
JavaParser.ElementValuePairContext = ElementValuePairContext;
JavaParser.ElementValueContext = ElementValueContext;
JavaParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;
JavaParser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext;
JavaParser.AnnotationTypeBodyContext = AnnotationTypeBodyContext;
JavaParser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext;
JavaParser.AnnotationTypeElementRestContext = AnnotationTypeElementRestContext;
JavaParser.AnnotationMethodOrConstantRestContext = AnnotationMethodOrConstantRestContext;
JavaParser.AnnotationMethodRestContext = AnnotationMethodRestContext;
JavaParser.AnnotationConstantRestContext = AnnotationConstantRestContext;
JavaParser.DefaultValueContext = DefaultValueContext;
JavaParser.ModuleDeclarationContext = ModuleDeclarationContext;
JavaParser.ModuleBodyContext = ModuleBodyContext;
JavaParser.ModuleDirectiveContext = ModuleDirectiveContext;
JavaParser.RequiresModifierContext = RequiresModifierContext;
JavaParser.RecordDeclarationContext = RecordDeclarationContext;
JavaParser.RecordHeaderContext = RecordHeaderContext;
JavaParser.RecordComponentListContext = RecordComponentListContext;
JavaParser.RecordComponentContext = RecordComponentContext;
JavaParser.RecordBodyContext = RecordBodyContext;
JavaParser.BlockContext = BlockContext;
JavaParser.BlockStatementContext = BlockStatementContext;
JavaParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;
JavaParser.IdentifierContext = IdentifierContext;
JavaParser.LocalTypeDeclarationContext = LocalTypeDeclarationContext;
JavaParser.StatementContext = StatementContext;
JavaParser.CatchClauseContext = CatchClauseContext;
JavaParser.CatchTypeContext = CatchTypeContext;
JavaParser.FinallyBlockContext = FinallyBlockContext;
JavaParser.ResourceSpecificationContext = ResourceSpecificationContext;
JavaParser.ResourcesContext = ResourcesContext;
JavaParser.ResourceContext = ResourceContext;
JavaParser.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext;
JavaParser.SwitchLabelContext = SwitchLabelContext;
JavaParser.ForControlContext = ForControlContext;
JavaParser.ForInitContext = ForInitContext;
JavaParser.EnhancedForControlContext = EnhancedForControlContext;
JavaParser.ParExpressionContext = ParExpressionContext;
JavaParser.ExpressionListContext = ExpressionListContext;
JavaParser.MethodCallContext = MethodCallContext;
JavaParser.ExpressionContext = ExpressionContext;
JavaParser.PatternContext = PatternContext;
JavaParser.LambdaExpressionContext = LambdaExpressionContext;
JavaParser.LambdaParametersContext = LambdaParametersContext;
JavaParser.LambdaBodyContext = LambdaBodyContext;
JavaParser.PrimaryContext = PrimaryContext;
JavaParser.SwitchExpressionContext = SwitchExpressionContext;
JavaParser.SwitchLabeledRuleContext = SwitchLabeledRuleContext;
JavaParser.GuardedPatternContext = GuardedPatternContext;
JavaParser.SwitchRuleOutcomeContext = SwitchRuleOutcomeContext;
JavaParser.ClassTypeContext = ClassTypeContext;
JavaParser.CreatorContext = CreatorContext;
JavaParser.CreatedNameContext = CreatedNameContext;
JavaParser.InnerCreatorContext = InnerCreatorContext;
JavaParser.ArrayCreatorRestContext = ArrayCreatorRestContext;
JavaParser.ClassCreatorRestContext = ClassCreatorRestContext;
JavaParser.ExplicitGenericInvocationContext = ExplicitGenericInvocationContext;
JavaParser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext;
JavaParser.NonWildcardTypeArgumentsOrDiamondContext = NonWildcardTypeArgumentsOrDiamondContext;
JavaParser.NonWildcardTypeArgumentsContext = NonWildcardTypeArgumentsContext;
JavaParser.TypeListContext = TypeListContext;
JavaParser.TypeTypeContext = TypeTypeContext;
JavaParser.PrimitiveTypeContext = PrimitiveTypeContext;
JavaParser.TypeArgumentsContext = TypeArgumentsContext;
JavaParser.SuperSuffixContext = SuperSuffixContext;
JavaParser.ExplicitGenericInvocationSuffixContext = ExplicitGenericInvocationSuffixContext;
JavaParser.ArgumentsContext = ArgumentsContext;
module.exports = __toCommonJS(JavaParser_exports);
